<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Functional programming vs object oriented programming</title>
      <author>Godday Success (The Codess) </author>
      <pubDate>Wed, 12 May 2021 08:09:08 +0000</pubDate>
      <link>https://dev.to/thecodess/functional-programming-vs-object-oriented-programming-2he8</link>
      <guid>https://dev.to/thecodess/functional-programming-vs-object-oriented-programming-2he8</guid>
      <description>&lt;p&gt;Functional programming is the programming technique that accentuates the functional factors required for creating and implementing the programs. Simply put, Functional programming (FP) is the process of building software by composing pure functions.  Object-oriented programming is a programming paradigm based on the concept of "objects", which can contain data and code: data in the form of fields, and code, in the form of procedures. &lt;/p&gt;

&lt;p&gt;Functional programming:&lt;br&gt;
Functional programming is a declarative programming paradigm where programs are created by applying sequential functions rather than statements. Each function takes in an input value and returns a consistent output value without altering or being affected by the program state.&lt;br&gt;
Functional programming is gaining popularity due to its efficiency and scalability to solve modern problems. Functional programming supports programming languages like Lisp, Clojure, Wolfram, Erlang, Haskell, F#, R, and other prominent languages. Functional programming is great for data science work. &lt;/p&gt;

&lt;p&gt;Object-oriented programming:&lt;br&gt;
Object Oriented programming (OOP) is a programming paradigm that relies on the concept of classes and objects. It is used to structure a software program into simple, reusable pieces of code blueprints (usually called classes), which are used to create individual instances of objects. Object-oriented programming languages include JavaScript, C++, Java, and Python. Object-oriented programming is about creating objects that contain both data and functions. A class is an abstract blueprint used to create more specific, concrete objects. Classes define what attributes an instance of this type will have, like color, but not the value of those attributes for a specific object.Classes can also contain functions, called methods available only to objects of that type. These functions are defined within the class and perform some action helpful to that specific type of object.&lt;/p&gt;

&lt;p&gt;Functional programming vs Object oriented programming&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Functional programming emphasizes on evaluation of functions while object oriented programming is based on the concept of objects.&lt;/li&gt;
&lt;li&gt;Functional programming uses immutable data while object oriented programming uses the mutable data.&lt;/li&gt;
&lt;li&gt;Functional programming follows the declarative programming model while object oriented programming follows the imperative programming model.&lt;/li&gt;
&lt;li&gt;Functional programming supports parallel programming while object oriented programming does not.&lt;/li&gt;
&lt;li&gt;In functional programming, statements can be executed in any order. In OOP, statements are executed in a particular order.&lt;/li&gt;
&lt;li&gt;In functional programming, recursion is used for iterative data while in OOP, loops are used for iterative data.&lt;/li&gt;
&lt;li&gt;Variables and functions are the basic elements of functional programming. Objects and models are the basic elements of object oriented programming.&lt;/li&gt;
&lt;li&gt;Functional programming is used only when there are few things with more operations. Object-oriented programming is used when there are many things with few operations.&lt;/li&gt;
&lt;li&gt;In functional programming, a state does not exist. In object-oriented programming, the state exists.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In functional programming, a function is the primary manipulation unit. In object-oriented, an object is the primary manipulation unit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Functional programming provides high performance in processing large data for applications. Object-oriented programming is not good for big data processing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Functional programming does not support conditional statements. In Object-oriented programming, conditional statements can be used like if-else statements and switch statement.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Which is better?&lt;/p&gt;

&lt;p&gt;Well,it depends on what your program is trying to do.&lt;br&gt;
Both OOP and FP have the shared goal of creating understandable, flexible programs that are free of bugs. But they have two different approaches for how to best create those programs.&lt;br&gt;
In all programs, there are two primary components: the data (the stuff a program knows) and the behaviors (the stuff a program can do to/with that data). OOP says that bringing together data and its associated behavior in a single location (called an “object”) makes it easier to understand how a program works. Functional programming says that data and behavior are distinctively different things and should be kept separate for clarity.&lt;br&gt;
In functional programming, data cannot be stored in objects, and it can only be transformed by creating functions. In object-oriented programming, data is stored in objects. Object-oriented programming is widely used by programmers and successful also.&lt;/p&gt;

&lt;p&gt;In Object-oriented programming, it is quite hard to maintain objects while increasing the levels of inheritance. In functional programming, it requires a new object to execute functions, and it takes a lot of memory for executing the applications.&lt;br&gt;
Each has their own advantages and disadvantages, it is up to the programmers or developers to choose the programming language concept that makes their development productive and easy.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>functional</category>
      <category>oop</category>
    </item>
    <item>
      <title>Top 10 Tech Trends for Programmers in 2021</title>
      <author>Priyanshi Sharma</author>
      <pubDate>Wed, 12 May 2021 08:08:25 +0000</pubDate>
      <link>https://dev.to/priyanshi_sharma/top-10-tech-trends-for-programmers-in-2021-4el8</link>
      <guid>https://dev.to/priyanshi_sharma/top-10-tech-trends-for-programmers-in-2021-4el8</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tPV5S8i8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsdudzwkxynnfset7e7y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tPV5S8i8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsdudzwkxynnfset7e7y.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the software development industry and programmers 2020 has been a significant year with lots of breakthroughs in several areas. With the global pandemic, digitization has sped up remarkably, so the trends that we will be discussing today will be much greater than the last year.&lt;/p&gt;

&lt;p&gt;The development of software and &lt;a href="https://www.decipherzone.com/web-app-development-company"&gt;web applications&lt;/a&gt; has become a crucial aspect of today’s business while programmers or developers have become an integral part of the enterprise that helps businesses innovate, emerge and thrive.&lt;/p&gt;

&lt;p&gt;We’ve already spent four months into 2021 and it’s crystal clear that a programmer with cutting-edge skills will continue to be on the top of the corporate battle.&lt;/p&gt;

&lt;p&gt;So, in this article, I am going to focus on the technology trends and planning for programmers in 2021. All the mentioned trends will be based on the facts, figures and data from authenticate sources to offer clear-cut information.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#predictions-on-top-10-tech-trends-for-programmers-in-2021"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.decipherzone.com/blog-detail/tech-trends-programmers"&gt;Predictions On Top 10 Tech Trends For Programmers in 2021&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;So, what are the trends that are going to be on top this year?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-multicloud"&gt;
  &lt;/a&gt;
  1. Multi-Cloud
&lt;/h3&gt;

&lt;p&gt;When it comes to public cloud providers there is no doubt about who is leading in the market. According to &lt;a href="https://www.statista.com/chart/18819/worldwide-market-share-of-leading-cloud-infrastructure-service-providers/"&gt;Statista&lt;/a&gt;, Amazon Web Services is leading the cloud market with 32%. While Microsoft has a market share of 20% and Google Cloud is in third place with a 9% market share. And it’s more likely to be the top-three in 2021 as well.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m_3DSt7o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aaafzebqx8185sm1jdam.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m_3DSt7o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aaafzebqx8185sm1jdam.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Moreover, the Multi-Cloud initiative will come into momentum with several companies moving towards it. Firstly, being reluctant to the multi-cloud strategy, Amazon has now entered this market as well making it seamless for the programmers to deploy their applications in Multiple Clouds.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-blockchain"&gt;
  &lt;/a&gt;
  3. Blockchain
&lt;/h3&gt;

&lt;p&gt;One of the most disruptive technologies that have been recently introduced is &lt;a href="https://www.decipherzone.com/blog-detail/Use-cases-for-blockchain-Top-5-real-life-usage"&gt;Blockchain&lt;/a&gt; and has been used for the Cryptocurrency concept. However, it has the potential to change the whole IT industry and it is projected by &lt;a href="https://www.prnewswire.com/news-releases/global-blockchain-technology-market-report-2021-2027-market-to-reach-us-30-7-billion---blockchain-to-improve-transparency-security-immutability--accessibility-of-financial-systems--processes-301266654.html"&gt;PR Newswire&lt;/a&gt; to reach $30.7 billion by the year 2027 with 43% CAGR. It will most likely be used as a Smart Contract mechanism in 2021 among different industries.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-quantum-computing"&gt;
  &lt;/a&gt;
  3. Quantum Computing
&lt;/h3&gt;

&lt;p&gt;Undoubtedly, Quantum Computing is the most reformist technology in the current era of digitization. It is most likely to impact every sector. And based on what &lt;a href="https://www.ibm.com/blogs/research/2020/09/ibm-quantum-roadmap/"&gt;IBM&lt;/a&gt; has recently reported in their research blogs, by 2023 they will debut a 1,121 qubit IBM Quantum Condor processor.&lt;/p&gt;

&lt;p&gt;To clearly understand its perspective: if we think of the most advanced Supercomputer as a Chess player or 8th-grade mathematics student, then Quantum computers can be referred to as the supergenius Mathematician like Euler or a chess player that can play with about 50 average chess players at once.&lt;/p&gt;

&lt;p&gt;So keeping the vast possibilities and enormous interest, we will be seeing some mind-blowing discoveries and breakthroughs in Quantum Computing this 2021.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-deep-learning-library"&gt;
  &lt;/a&gt;
  4. Deep Learning Library
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://www.decipherzone.com/blog-detail/Artificial-Intelligence-vs-Machine-Learning-vs-Deep-Learning"&gt;deep learning&lt;/a&gt; market is estimated to reach $93.34 Billion in the year 2028, as stated by &lt;a href="http://www.globenewswire.com/en/news-release/2021/03/23/2197902/0/en/Deep-Learning-System-Market-Size-to-Reach-USD-93-34-Billion-in-2028-Improvements-in-Computing-Power-and-Reduction-in-Hardware-Costs-will-Drive-the-Industry-Growth-says-Emergen-Rese.html"&gt;Globe News Wire&lt;/a&gt; at a steady 39.1% CAGR. Among the two prominent global players Facebook and Google in Deep Learning, Google’s TensorFlow 2.0 is the most popular framework rather than Facebook’s PyTorch - based on &lt;a href="https://insights.stackoverflow.com/survey/2020#most-popular-technologies"&gt;Stack Overflow Developer Survey&lt;/a&gt;. It is due to the fact that TensorFlow has all the features of PyTorch and works amazingly on Google Collab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PCjeIkqV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p88461x8mp1xjyq06suo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PCjeIkqV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p88461x8mp1xjyq06suo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the contrary, developers are more comfortable with working on PyTorch as it offers developer-friendly features.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UizOGZcD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o0x14ux7pepervllca1a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UizOGZcD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o0x14ux7pepervllca1a.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Needless to say, in 2021, both PyTorch and TensorFlow 2.0 will be the preferred choice libraries for developers depending on their requirements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-dataintensive-computation"&gt;
  &lt;/a&gt;
  5. Data-Intensive Computation
&lt;/h3&gt;

&lt;p&gt;When it comes to Distributed Batch Jobs or Data-Intensive Computation a few years ago, Hadoop was the default choice. However, with the emergence of Apache Spark, Hadoop is being replaced in most cases for Distributed Batch Jobs. As stated in the blog by &lt;a href="https://towardsdatascience.com/big-data-analytics-apache-spark-vs-apache-hadoop-7cb77a7a9424"&gt;Towards Data Science&lt;/a&gt;, a key difference among these two is their performance. Spark program continuously runs about 10 times faster on disk and 100 times faster than Hadoop in-memory. Moreover, Spark has been designed to overcome the cons of Hadoop so this trend of replacing Hadoop and opting for Spark is most likely to continue this year as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-rapid-app-development"&gt;
  &lt;/a&gt;
  6. Rapid App Development
&lt;/h3&gt;

&lt;p&gt;With the recent release of &lt;a href="https://www.prnewswire.com/news-releases/at-26-1-cagr-low-code-development-platform-market-size-is-expected-to-reach-65-15-billion-by-2027--says-brandessence-market-research-301243189.html"&gt;PR Newswire&lt;/a&gt;, it can be predicted that &lt;a href="https://www.decipherzone.com/on-demand-solutions"&gt;rapid application development&lt;/a&gt; or Low Code/No-Code market size will reach $65.15 Billion by 2027 at more than 26.1% CAGR. Several platforms are supporting low code/no code in web development such as Microsoft Power Apps, Bubble, OutSystems, and Appian.&lt;/p&gt;

&lt;p&gt;In 2021, LCNC platforms will be one of the powerful trends having lots of acquisitions, innovations and mergers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-javascript-python-amp-java"&gt;
  &lt;/a&gt;
  7. JavaScript, Python &amp;amp; Java
&lt;/h3&gt;

&lt;p&gt;The landscape of &lt;a href="https://www.decipherzone.com/blog-detail/top-programming-languages-for-desktop-apps-in-2021"&gt;programming language&lt;/a&gt; is going through major changes. While traditional heavy-weight languages are losing their share over the market, developer-friendly languages like JavaScript, Python and Java are still the most popular languages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gg-Oqa4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8512e4uryf78qpeyhcus.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gg-Oqa4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8512e4uryf78qpeyhcus.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
As the software industry is continuing to boom with numerous new developers joining the development industry, developer-friendly programming languages will also thrive this year.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-react-for-clientside-web-frameworks"&gt;
  &lt;/a&gt;
  8. React for CLient-Side Web Frameworks
&lt;/h3&gt;

&lt;p&gt;When we focus on web frameworks, jQuery is still ruling others but it is soon about to lose its place to React.js and Angular gradually. Besides, React.js is the most downloaded, used and chosen client-side &lt;a href="https://www.decipherzone.com/blog-detail/top-10-backend-development-frameworks"&gt;framework&lt;/a&gt; as we can see in the following &lt;a href="https://insights.stackoverflow.com/survey/2020#most-popular-technologies"&gt;Stack Overflow&lt;/a&gt; data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--spWBHlFR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nx0by7g1n3gxou2k32le.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--spWBHlFR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nx0by7g1n3gxou2k32le.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-containerization"&gt;
  &lt;/a&gt;
  9. Containerization
&lt;/h3&gt;

&lt;p&gt;In the cloud-native IT industry, containerization is the core technology. Kubernetes has reached a 48% adoption rate as shared by &lt;a href="https://www.globenewswire.com/news-release/2021/02/18/2178094/0/en/Global-Application-Container-Market-2021-to-2026-Growth-Trends-COVID-19-Impact-and-Forecasts.html"&gt;Globe Newswire&lt;/a&gt;. It has established itself as the top Container orchestration and management tool. It is leading both private and public cloud aspects. Moreover, all the ruling cloud providers like AWS, Azure and Google are now providing managed services for Kubernetes too.&lt;/p&gt;

&lt;p&gt;This year, we are about to see a growth in Kubernetes adoption rate because it is the main ingredient for the Multi-Cloud strategy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-edge-computing"&gt;
  &lt;/a&gt;
  10. Edge Computing
&lt;/h3&gt;

&lt;p&gt;Edge Computing is a distributed computing infrastructure that brings data storage and computation together to improve response time. It is &lt;a href="https://www.grandviewresearch.com/press-release/global-edge-computing-market"&gt;estimated&lt;/a&gt; to reach $43.4 Billion worth by 2027. With the rise in IoT devices, connected vehicles, AI/ML, Edge computing will be a giant market his year and beyond. So be ready for the innovations and standardizations in this technology.&lt;/p&gt;

&lt;p&gt;Although the software industry is much bigger with multiple important areas to cover, it’s impossible to include everything out there. However, I have tried to entail a few significant trends that will play a magnificent role in the programmer’s life. I hope you have got an overview of all the technological trends lying ahead in 2021 and beyond.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>python</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How often do you maintain the code that's not a part of your favorite stack?</title>
      <author>Madza</author>
      <pubDate>Wed, 12 May 2021 06:45:04 +0000</pubDate>
      <link>https://dev.to/madza/how-often-do-you-maintain-the-code-that-s-not-a-part-of-your-current-stack-44ib</link>
      <guid>https://dev.to/madza/how-often-do-you-maintain-the-code-that-s-not-a-part-of-your-current-stack-44ib</guid>
      <description>&lt;p&gt;For example, you are focusing on mastering MERN stack, but you still have to maintain codebases written in PHP and jQuery (no offense).&lt;/p&gt;

&lt;p&gt;How often do you find yourself in situations like these?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>webdev</category>
      <category>coding</category>
    </item>
    <item>
      <title>What's your favorite Static Site Generator?</title>
      <author>Madza</author>
      <pubDate>Wed, 12 May 2021 06:08:52 +0000</pubDate>
      <link>https://dev.to/madza/what-s-your-favorite-static-site-generator-5h74</link>
      <guid>https://dev.to/madza/what-s-your-favorite-static-site-generator-5h74</guid>
      <description>&lt;p&gt;SSGs handle the build process before the pages are requested by the client, meaning that they’re ready to serve when requested.&lt;/p&gt;

&lt;p&gt;Some of the most common choices include NextJS, Gatsby, Hugo, Jekyll, Eleventy, Nuxt, Hexo, and &lt;a href="https://jamstack.org/generators/"&gt;many others&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Which ones have you tried and what are your favorites?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>webdev</category>
      <category>ssg</category>
    </item>
    <item>
      <title>How to Evaluate Site Speed with the Performance API</title>
      <author>Asayer Tech Blog</author>
      <pubDate>Wed, 12 May 2021 05:22:12 +0000</pubDate>
      <link>https://dev.to/asayerio_techblog/how-to-evaluate-site-speed-with-the-performance-api-41d2</link>
      <guid>https://dev.to/asayerio_techblog/how-to-evaluate-site-speed-with-the-performance-api-41d2</guid>
      <description>&lt;p&gt;&lt;em&gt;by author &lt;a href="https://blog.asayer.io/authors/craig-buckler"&gt;Craig Buckler&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Browser DevTools are great for monitoring web application performance on your local development PC. However, they're less practical for measuring site speed on different devices, browsers, and network connections across global locations.&lt;/p&gt;

&lt;p&gt;The Performance API records DevTool-like metrics from real users as they navigate your application. You can post collected data to a service such as Asayer.io, e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;asayer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;load-performance&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;os&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;      &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ubuntu&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;agent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;   &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Firefox 88.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;location&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;US&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pageload&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1522.598&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;paint&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;   &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;5969.123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ajaxinit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1507.067&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To help identify performance bottlenecks on specific browsers, devices, or even user sessions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-performance-api"&gt;
  &lt;/a&gt;
  What is the Performance API?
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://developer.mozilla.org/docs/Web/API/Performance_API"&gt;Performance API&lt;/a&gt; is a collection of APIs used to measure:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#navigation-timing"&gt;navigation timing&lt;/a&gt; -- redirects, DNS look-ups, DOM loaded, page loaded, etc.&lt;/li&gt;
&lt;li&gt;
&lt;a href="#resource-timing"&gt;resource timing&lt;/a&gt; -- loading of specific page assets such as CSS, scripts, images, and Ajax calls&lt;/li&gt;
&lt;li&gt;
&lt;a href="#paint-timing"&gt;paint timing&lt;/a&gt; -- the point at which browser rendering starts, and&lt;/li&gt;
&lt;li&gt;
&lt;a href="#user-timing"&gt;user timing&lt;/a&gt; -- custom measurements for your application, including &lt;a href="#performancenow"&gt;&lt;code&gt;performance.now()&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Historically, developers had to adopt the &lt;code&gt;Date()&lt;/code&gt; function to record elapsed times, e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;startTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;elapsedTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;startTime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`doSomething() took &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;elapsedTime&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;ms`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;but the Performance API is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;higher resolution. Unlike &lt;code&gt;Date()&lt;/code&gt;, it records timings in fractions of a millisecond.&lt;/li&gt;
&lt;li&gt;more reliable. &lt;code&gt;Date()&lt;/code&gt; uses the system time so timings can become inaccurate when the OS synchronises the clock.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The API is available in client-side JavaScript in most modern browsers and is detectable with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;performance&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// use Performance APIs&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Resource and user timing is also available in client-side &lt;a href="https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Using_web_workers"&gt;Web Workers&lt;/a&gt;. These provide a way to run long-running or computationally-expensive scripts in the background which do not interfere with the browser's main processing thread.&lt;/p&gt;

&lt;p&gt;User timing APIs are also available in server-side:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://nodejs.org/dist/latest/docs/api/perf_hooks.html"&gt;Node.js&lt;/a&gt; applications with the &lt;code&gt;performance_hook&lt;/code&gt; module, and&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://doc.deno.land/builtin/stable#Performance"&gt;Deno&lt;/a&gt; applications run with the &lt;code&gt;--allow-hrtime&lt;/code&gt; option.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Performance API and documentation can be a little difficult to understand partly because it has evolved. I hope the information and examples in this article help illustrate its potential.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#load-timing-properties"&gt;
  &lt;/a&gt;
  Load timing properties
&lt;/h2&gt;

&lt;p&gt;The sections below describe:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#navigation-timing"&gt;page navigation timings&lt;/a&gt; which return a &lt;a href="https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming"&gt;&lt;code&gt;PerformanceNavigationTiming&lt;/code&gt;&lt;/a&gt; object, and&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#resource-timing"&gt;resource timings&lt;/a&gt; which returns a &lt;a href="https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming"&gt;&lt;code&gt;PerformanceResourceTiming&lt;/code&gt;&lt;/a&gt; object&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Both objects provide the following identification properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;name&lt;/strong&gt; -- resource URL&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;entryType&lt;/strong&gt; -- performance type (&lt;code&gt;"navigation"&lt;/code&gt; for a page, &lt;code&gt;"resource"&lt;/code&gt; for a page asset)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;initiatorType&lt;/strong&gt; -- resource which initiated the performance entry (&lt;code&gt;"navigation"&lt;/code&gt; for a page)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;serverTiming&lt;/strong&gt; -- an array of &lt;a href="https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming"&gt;PerformanceServerTiming&lt;/a&gt; objects with &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, and &lt;code&gt;duration&lt;/code&gt; metrics written by the server to the HTTP &lt;a href="https://developer.mozilla.org/docs/Web/HTTP/Headers/Server-Timing"&gt;&lt;code&gt;Server-Timing&lt;/code&gt; header&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both objects provide the following timing properties shown here in the chronological order you would expect them to occur. Timestamps are in milliseconds relative to the start of the page load:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;startTime&lt;/strong&gt; -- timestamp when the fetch started (&lt;code&gt;0&lt;/code&gt; for a page since it's the first asset loaded)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;nextHopProtocol&lt;/strong&gt; -- network protocol used&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;workerStart&lt;/strong&gt; -- timestamp before starting a Progressive Web App (PWA) Service Worker (&lt;code&gt;0&lt;/code&gt; if the request is not intercepted by a Service Worker)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;redirectStart&lt;/strong&gt; -- timestamp of the fetch which initiated a redirect&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;redirectEnd&lt;/strong&gt; -- timestamp after receiving the last byte of the last redirect response&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;fetchStart&lt;/strong&gt; -- timestamp before the resource fetch&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;domainLookupStart&lt;/strong&gt; -- timestamp before a DNS lookup&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;domainLookupEnd&lt;/strong&gt; -- timestamp after the DNS lookup&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;connectStart&lt;/strong&gt; -- timestamp before the browser establishes a server connection&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;connectEnd&lt;/strong&gt; -- timestamp after establishing a server connection&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;secureConnectionStart&lt;/strong&gt; -- timestamp before the browser starts the SSL handshake process&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;requestStart&lt;/strong&gt; -- timestamp before the browser requests the resource&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;responseStart&lt;/strong&gt; -- timestamp when the browser receives the first byte of data&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;responseEnd&lt;/strong&gt; -- timestamp after receiving the last byte or closing the connection&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;duration&lt;/strong&gt; -- the difference between &lt;strong&gt;startTime&lt;/strong&gt; and &lt;strong&gt;responseEnd&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both objects provide the following download size properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;transferSize&lt;/strong&gt; -- the resource size in bytes (octets), including the header and compressed body&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;encodedBodySize&lt;/strong&gt; -- the resource's payload body in bytes (octets) before decoding/uncompressing&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;decodedBodySize&lt;/strong&gt; -- the resource's payload body in bytes (octets) after decoding/uncompressing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Page &lt;a href="https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming"&gt;&lt;code&gt;PerformanceNavigationTiming&lt;/code&gt;&lt;/a&gt; objects provide further metrics about loading and DOM events, although these are not supported in Safari:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;type&lt;/strong&gt; -- either &lt;code&gt;"navigate"&lt;/code&gt;, &lt;code&gt;"reload"&lt;/code&gt;, &lt;code&gt;"back_forward"&lt;/code&gt; or &lt;code&gt;"prerender"&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;redirectCount&lt;/strong&gt; -- the number of redirects&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;unloadEventStart&lt;/strong&gt; -- timestamp before the &lt;code&gt;unload&lt;/code&gt; event of the previous document (zero if no previous document)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;unloadEventEnd&lt;/strong&gt; -- timestamp after the &lt;code&gt;unload&lt;/code&gt; event of the previous document (zero if no previous document)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;domInteractive&lt;/strong&gt; -- timestamp before the browser sets the document readiness to &lt;em&gt;interactive&lt;/em&gt; when HTML parsing and DOM construction is complete&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;domContentLoadedEventStart&lt;/strong&gt; -- timestamp before document's &lt;code&gt;DOMContentLoaded&lt;/code&gt; event fires&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;domContentLoadedEventEnd&lt;/strong&gt; -- timestamp after document's &lt;code&gt;DOMContentLoaded&lt;/code&gt; event completes&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;domComplete&lt;/strong&gt; -- timestamp before the browser sets the document readiness to &lt;em&gt;complete&lt;/em&gt; when DOM construction and &lt;code&gt;DOMContentLoaded&lt;/code&gt; events have completed&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;loadEventStart&lt;/strong&gt; -- timestamp before the page &lt;code&gt;load&lt;/code&gt; event has fired&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;loadEventEnd&lt;/strong&gt; -- timestamp after the page &lt;code&gt;load&lt;/code&gt; event and all assets are available&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#navigation-timing"&gt;
  &lt;/a&gt;
  Navigation timing
&lt;/h2&gt;

&lt;p&gt;The Navigation Timing API collates timings for unloading the previous page, redirects, DNS lookups, page loading, file sizes, load events, and more. The information would be difficult to reliably determine in any other way.&lt;/p&gt;

&lt;p&gt;Navigation timing is available to client-side JavaScript window and Web Worker functions. Pass a &lt;code&gt;"navigation"&lt;/code&gt; type to the &lt;a href="https://developer.mozilla.org/docs/Web/API/Performance/getEntriesByType"&gt;&lt;code&gt;performance.getEntriesByType()&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pageTiming&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getEntriesByType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;navigation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or the page URL to &lt;a href="https://developer.mozilla.org/docs/Web/API/Performance/getEntriesByName"&gt;&lt;code&gt;performance.getEntriesByName()&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pageTiming&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getEntriesByName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Either option returns an array with a single element containing a &lt;a href="https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming"&gt;&lt;code&gt;PerformanceNavigationTiming&lt;/code&gt;&lt;/a&gt; object (see &lt;a href="#load-timing-properties"&gt;load timing properties&lt;/a&gt;). It contains read-only properties about the resource load times, e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;connectEnd:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;139&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;connectStart:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;103&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;decodedBodySize:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;72325&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;domComplete:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;771&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;domContentLoadedEventEnd:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;634&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;domContentLoadedEventStart:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;630&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;domInteractive:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;421&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;domainLookupEnd:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;103&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;domainLookupStart:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;87&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;duration:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;771&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;encodedBodySize:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;13091&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;entryType:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"navigation"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;fetchStart:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;initiatorType:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"navigation"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;loadEventEnd:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;771&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;loadEventStart:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;771&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;name:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://domain.com/"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;nextHopProtocol:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"h2"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;redirectCount:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;redirectEnd:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;redirectStart:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;requestStart:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;140&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;responseEnd:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;154&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;responseStart:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;154&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;secureConnectionStart:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;115&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;serverTiming:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Array&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;startTime:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;transferSize:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;13735&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;type:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"reload"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;unloadEventEnd:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;171&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;unloadEventStart:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;169&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;workerStart:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use it to calculate useful page loading metrics from users, e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;performance&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt;
    &lt;span class="nx"&gt;pageTiming&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getEntriesByName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;pageDownload&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pageTiming&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;pageDomReady&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pageTiming&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domContentLoadedEventStart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;pageFullyReady&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pageTiming&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadEventEnd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#resource-timing"&gt;
  &lt;/a&gt;
  Resource timing
&lt;/h2&gt;

&lt;p&gt;You can examine load timings for other resources such as images, stylesheets, scripts, &lt;a href="https://developer.mozilla.org/docs/Web/API/Fetch_API"&gt;Fetch&lt;/a&gt;, and &lt;a href="https://developer.mozilla.org/docs/Web/API/XMLHttpRequest"&gt;XMLHttpRequest&lt;/a&gt; Ajax calls in a similar way to the page.&lt;/p&gt;

&lt;p&gt;Resource timing is available to client-side JavaScript window and Web Worker functions. Pass a &lt;code&gt;"resource"&lt;/code&gt; type to the &lt;a href="https://developer.mozilla.org/docs/Web/API/Performance/getEntriesByType"&gt;&lt;code&gt;performance.getEntriesByType()&lt;/code&gt;&lt;/a&gt; to return an array. Each element is a &lt;a href="https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming"&gt;&lt;code&gt;PerformanceResourceTiming&lt;/code&gt;&lt;/a&gt; object (see &lt;a href="#load-timing-properties"&gt;load timing properties&lt;/a&gt;) representing a resource loaded by the page (but not the page itself):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resourceTiming&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getEntriesByType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resource&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;example result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;name:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://domain.com/script1.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;entryType:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"resource"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;initiatorType:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"script"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;fetchStart:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;duration:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;...etc...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;name:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://domain.com/style1.css"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;entryType:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"resource"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;initiatorType:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"link"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;fetchStart:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;323&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;duration:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;...etc...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;name:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://domain.com/service/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;entryType:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"resource"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;initiatorType:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"xmlhttprequest"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;fetchStart:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;598&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;duration:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;...etc...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;...etc...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also fetch a resource by passing its &lt;strong&gt;exact&lt;/strong&gt; URL to &lt;a href="https://developer.mozilla.org/docs/Web/API/Performance/getEntriesByName"&gt;&lt;code&gt;performance.getEntriesByName()&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resourceTiming&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getEntriesByName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://domain.com/style1.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This returns an array with a single element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;name:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://domain.com/style1.css"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;entryType:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"resource"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;initiatorType:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"link"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;fetchStart:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;323&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;duration:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;...etc...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could use this to report to calculate the load times and sizes of each JavaScript resource as well as the total:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;performance&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// total size of all JavaScript files&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;scriptTotalSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// array of script names, load times, and uncompressed file sizes&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getEntriesByType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resource&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initiatorType&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;script&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;decodedBodySize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;scriptTotalSize&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;load&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;size&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Performance API records at least 150 resource metrics, but you can define a specific number with &lt;a href="https://developer.mozilla.org/docs/Web/API/Performance/setResourceTimingBufferSize"&gt;&lt;code&gt;performance.setResourceTimingBufferSize(N)&lt;/code&gt;&lt;/a&gt;, e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// record metrics for 300 page resources&lt;/span&gt;
&lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setResourceTimingBufferSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can clear existing metrics with &lt;a href="https://developer.mozilla.org/docs/Web/API/Performance/clearResourceTimings"&gt;&lt;code&gt;performance.clearResourceTimings()&lt;/code&gt;&lt;/a&gt;. This may be practical when you no longer require page resource information but want to record Ajax requests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// clear timings&lt;/span&gt;
&lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clearResourceTimings&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// API Fetch request&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/service1/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// one resource returned&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resourceTiming&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getEntriesByType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resource&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#paint-timing"&gt;
  &lt;/a&gt;
  Paint timing
&lt;/h2&gt;

&lt;p&gt;The Paint Timing API is available to client-side JavaScript window functions and records two rendering operations observed during page construction.&lt;/p&gt;

&lt;p&gt;Pass a &lt;code&gt;"paint"&lt;/code&gt; type to the &lt;a href="https://developer.mozilla.org/docs/Web/API/Performance/getEntriesByType"&gt;&lt;code&gt;performance.getEntriesByType()&lt;/code&gt;&lt;/a&gt; to return an array containing two &lt;a href="https://developer.mozilla.org/docs/Web/API/PerformancePaintTiming"&gt;PerformancePaintTiming&lt;/a&gt; objects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paintTiming&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getEntriesByType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;paint&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"first-paint"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"entryType"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"paint"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"startTime"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;242&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"duration"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"first-contentful-paint"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"entryType"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"paint"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"startTime"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;243&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"duration"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;first-paint&lt;/strong&gt;: the browser has painted the first pixel on the page, and&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;first-contentful-paint&lt;/strong&gt;: the browser has painted the first item of DOM content, such as text or an image.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that &lt;code&gt;"duration"&lt;/code&gt; will always be zero.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#performancenow"&gt;
  &lt;/a&gt;
  performance.now()
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/docs/Web/API/Performance/now"&gt;&lt;code&gt;performance.now()&lt;/code&gt;&lt;/a&gt; returns a high-resolution timestamp in fractions of a millisecond since the beginning of the process's lifetime. The method is available in client-side JavaScript, Web Workers, Node.js, and Deno.&lt;/p&gt;

&lt;p&gt;In client-side JavaScript, the &lt;code&gt;performance.now()&lt;/code&gt; timer starts at zero when the process responsible for creating the &lt;code&gt;document&lt;/code&gt; started. Web Worker, Node.js, and Deno timers start when the script process initially executes.&lt;/p&gt;

&lt;p&gt;Note that Node.js scripts must load the &lt;a href="https://nodejs.org/dist/latest/docs/api/perf_hooks.html"&gt;Performance hooks (&lt;code&gt;perf_hooks&lt;/code&gt;) module&lt;/a&gt; to use the Performance API. In CommonJS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;performance&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;perf_hooks&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or as an ES module:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;performance&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;perf_hooks&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use &lt;code&gt;performance.now()&lt;/code&gt; to time scripts, e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doSomethingStart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doSomethingElapsed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;doSomethingStart&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A further non-standard &lt;a href="https://developer.mozilla.org/docs/Web/API/Performance/timeOrigin"&gt;&lt;code&gt;timeOrigin&lt;/code&gt; property&lt;/a&gt; returns the timestamp at which the current process began. This is measured in Unix time since 1 January 1970 and is available in Node.js and browser JavaScript (not IE or Safari):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doSomethingStart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeOrigin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doSomethingElapsed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeOrigin&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;doSomethingStart&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#user-timing"&gt;
  &lt;/a&gt;
  User timing
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;performance.now()&lt;/code&gt; becomes cumbersome when taking more than a couple of timing measurements. The &lt;a href="https://developer.mozilla.org/docs/Web/API/Performance/mark"&gt;&lt;code&gt;performance.mark()&lt;/code&gt;&lt;/a&gt; method adds a named &lt;a href="https://developer.mozilla.org/docs/Web/API/PerformanceMark"&gt;PerformanceMark object&lt;/a&gt; object with a timestamp to the performance buffer. It's available in client-side JavaScript, Web Workers, Node.js, and Deno:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Node.js scripts require:&lt;/span&gt;
&lt;span class="c1"&gt;// CommonJS: const { performance } = require('perf_hooks');&lt;/span&gt;
&lt;span class="c1"&gt;// or ESM  : import { performance } from 'perf_hooks';&lt;/span&gt;

&lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mark&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;script:start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mark&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;doSomething1:start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;doSomething1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mark&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;doSomething1:end&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mark&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;doSomething2:start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;doSomething2&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mark&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;doSomething2:end&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mark&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;script:end&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pass a &lt;code&gt;"mark"&lt;/code&gt; type to the &lt;a href="https://developer.mozilla.org/docs/Web/API/Performance/getEntriesByType"&gt;&lt;code&gt;performance.getEntriesByType()&lt;/code&gt;&lt;/a&gt; to return an array of marks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userTiming&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getEntriesByType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The resulting array contains objects with &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;startTime&lt;/code&gt; properties:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;detail:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;duration:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;entryType:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"mark"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;name:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"script:start"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;startTime:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;detail:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;duration:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;entryType:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"mark"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;name:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"doSomething1:start"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;startTime:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;detail:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;duration:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;entryType:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"mark"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;name:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"doSomething1:end"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;startTime:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;...etc...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://developer.mozilla.org/docs/Web/API/Performance/measure"&gt;&lt;code&gt;performance.measure()&lt;/code&gt;&lt;/a&gt; method calculates the elapsed time between two marks. It's passed the measure name, the start mark name (or a falsy value to use the page/script load time), and the end mark name (or a falsy value to use the current time), e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;measure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;doSomething1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;doSomething1:start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;doSomething1:end&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;measure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;script&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;doSomething1:end&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This adds a &lt;a href="https://developer.mozilla.org/docs/Web/API/PerformanceMeasure"&gt;PerformanceMeasure&lt;/a&gt; object to the performance buffer with a calculated duration. Pass a &lt;code&gt;"measure"&lt;/code&gt; type to the &lt;a href="https://developer.mozilla.org/docs/Web/API/Performance/getEntriesByType"&gt;&lt;code&gt;performance.getEntriesByType()&lt;/code&gt;&lt;/a&gt; to return an array of measures:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userTiming&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getEntriesByType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;measure&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The resulting array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;detail:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;duration:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;211&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;entryType:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"measure"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;name:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"doSomething1"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;startTime:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;detail:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;duration:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;551&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;entryType:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"measure"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;name:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"script"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;startTime:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also fetch mark and measure entries by name using &lt;a href="https://developer.mozilla.org/docs/Web/API/Performance/getEntriesByName"&gt;&lt;code&gt;performance.getEntriesByName()&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getEntriesByName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;doSomething1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Other useful methods include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/docs/Web/API/Performance/getEntries"&gt;&lt;code&gt;performance.getEntries()&lt;/code&gt;&lt;/a&gt; -- returns an array of all performance entries including marks, measures, navigation timing, resource timing, and paint timing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/docs/Web/API/Performance/clearMarks"&gt;&lt;code&gt;performance.clearMarks( [name] )&lt;/code&gt;&lt;/a&gt; -- clear a named mark, or omit the name to clear all marks&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/docs/Web/API/Performance/clearMeasures"&gt;&lt;code&gt;performance.clearMeasures( [name] )&lt;/code&gt;&lt;/a&gt; -- clear a named measure, or omit the name to clear all measures&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#frontend-monitoring"&gt;
  &lt;/a&gt;
  Frontend Monitoring
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://asayer.io"&gt;Asayer&lt;/a&gt; is a frontend monitoring tool that replays everything your users do and shows how your web app behaves for every issue. It lets you reproduce issues, aggregate JS errors and monitor your web app’s performance.&lt;/p&gt;

&lt;p&gt;Happy debugging, for modern frontend teams - &lt;a href="https://asayer.io/register.html"&gt;Start monitoring your web app for free&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#performanceobserver"&gt;
  &lt;/a&gt;
  PerformanceObserver
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://developer.mozilla.org/docs/Web/API/PerformanceObserver"&gt;PerformanceObserver&lt;/a&gt; interface can watch for changes to the performance buffer and run a function when specific objects appear. It's most practically used for mark, measure, and resource loading events (navigation and paint timings will generally occur before a script has started).&lt;/p&gt;

&lt;p&gt;First, define an observer function. This could log an event or post the data to a statistics endpoint:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;performanceObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getEntries&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;---&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`name    : &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`type    : &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`start   : &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startTime&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`duration: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function has the following parameters:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;a &lt;code&gt;list&lt;/code&gt; of observer entries, and&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the &lt;a href="https://developer.mozilla.org/docs/Web/API/PerformanceObserver"&gt;&lt;code&gt;observer&lt;/code&gt; object&lt;/a&gt; so it's possible to &lt;a href="https://developer.mozilla.org/docs/Web/API/PerformanceObserver/disconnect"&gt;disconnect()&lt;/a&gt; if necessary.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Pass this function when creating a new &lt;code&gt;PerformanceObserver&lt;/code&gt; object then run the &lt;a href="https://developer.mozilla.org/docs/Web/API/PerformanceObserver/observe"&gt;&lt;code&gt;observe()&lt;/code&gt; method&lt;/a&gt; with the &lt;code&gt;entryTypes&lt;/code&gt; to observe:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PerformanceObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;performanceObserver&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;entryTypes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;measure&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adding a new mark or measure will now run the &lt;code&gt;performanceObserver()&lt;/code&gt; function and display details about that measurement.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#future-performance-options"&gt;
  &lt;/a&gt;
  Future performance options
&lt;/h2&gt;

&lt;p&gt;Chrome-based browsers offer a non-standard &lt;a href="https://developer.mozilla.org/docs/Web/API/Performance/memory"&gt;&lt;code&gt;performance.memory&lt;/code&gt; property&lt;/a&gt; which returns a single MemoryInfo object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;jsHeapSizeLimit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4294705152&lt;/span&gt;
  &lt;span class="nx"&gt;totalJSHeapSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5092217&lt;/span&gt;
  &lt;span class="nx"&gt;usedJSHeapSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3742009&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;jsHeapSizeLimit&lt;/strong&gt; -- the maximum size of the heap in bytes&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;totalJSHeapSize&lt;/strong&gt; -- the total allocated heap size in bytes, and&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;usedJSHeapSize&lt;/strong&gt; -- The currently active segment of JS heap in bytes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href="https://developer.mozilla.org/docs/Web/API/Frame_Timing_API"&gt;Frame timing API&lt;/a&gt; is not implemented in any browser, but will record the amount of browser work in one event loop iteration. This includes processing DOM events, CSS animations, rendering, scrolling, resizing, etc. The API should be able to report potential jerkiness when a frame takes longer than 16.7 milliseconds so updates drop below 60 frames per second.&lt;/p&gt;

&lt;p&gt;Finally, the &lt;a href="https://wicg.github.io/js-self-profiling/"&gt;Self-Profiling API&lt;/a&gt; is an &lt;a href="https://chromestatus.com/features/5170190448852992"&gt;experimental feature under development in Chrome&lt;/a&gt;. Given a sample rate, the API will help locate slow or unnecessary code in a similar way to the DevTools &lt;a href="https://blog.asayer.io/the-ultimate-guide-to-fixing-javascript-performance-problems-in-browser-devtools#run-a-performance-report"&gt;performance report&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// define a new profiler with 10ms sample rate&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;sampleInterval&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// run code&lt;/span&gt;
&lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// stop the profiler and capture a trace&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;trace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#pinpoint-performance-problems"&gt;
  &lt;/a&gt;
  Pinpoint performance problems
&lt;/h2&gt;

&lt;p&gt;It's easy to presume your application runs well when you're developing on a new PC connected to a fast network. The performance API offers a way to prove -- &lt;em&gt;or disprove&lt;/em&gt; -- performance issues by collecting real user metrics based on their devices, connections, and locations.&lt;/p&gt;

</description>
      <category>performance</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Top React Native Animation Libraries for Stellar UX</title>
      <author>Bacancy Technology</author>
      <pubDate>Wed, 12 May 2021 05:14:23 +0000</pubDate>
      <link>https://dev.to/bacancy_technology/top-react-native-animation-libraries-for-stellar-ux-51il</link>
      <guid>https://dev.to/bacancy_technology/top-react-native-animation-libraries-for-stellar-ux-51il</guid>
      <description>&lt;p&gt;We all feel that animations are not less than magic. It feels like wow when you see some unexpected animation or beyond your real-world experiences. Within the tech environment, animation becomes such a common part of the process but using the right form of animation that fits in your design and makes the right go is very vital for any particular user experience.&lt;/p&gt;

&lt;p&gt;If you are about to develop your native application, React Native should be your first choice. The animations that react native offers give you additional advantages and will help you to gain the best user experience. We at Bacancy Technology, share an article about the top &lt;strong&gt;React Native Animation Libraries&lt;/strong&gt;, which help you to do wonders with your project by its effect in motion.&lt;/p&gt;

&lt;p&gt;Animations offer an outstanding user experience to your customers. It provides emotional and believable motion at your website’s interface. Many successful organizations use animation to communicate with customers and their actions. Their outstanding animation helps organizations to keep the user connected with their website or business applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We at Bacancy Technology - talked about the Best React Native Animation Libraries&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lottie React Native&lt;/li&gt;
&lt;li&gt;React Native Animatable&lt;/li&gt;
&lt;li&gt;React Native Wheel of Fortune&lt;/li&gt;
&lt;li&gt;React Navigation Transitions&lt;/li&gt;
&lt;li&gt;React Native Auto Animate&lt;/li&gt;
&lt;li&gt;React Native SVG Animations&lt;/li&gt;
&lt;li&gt;React Native Circular Menu&lt;/li&gt;
&lt;li&gt;React Native Redash&lt;/li&gt;
&lt;li&gt;React Native Motion&lt;/li&gt;
&lt;li&gt;React Native reanimated&lt;/li&gt;
&lt;li&gt;React Native Flip Card&lt;/li&gt;
&lt;li&gt;Lottie Web&lt;/li&gt;
&lt;li&gt;React Native Sooji Animated Input&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We discuss libraries in detail in our article, if you want to know more about &lt;a href="https://www.bacancytechnology.com/blog/react-native-animation-libraries"&gt;React Native Animation Libraries&lt;/a&gt;. Jump to the article and get the best knowledge about React Native Animation Libraries and use React Native Animation Libraries for your next project.&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>react</category>
      <category>animation</category>
      <category>libraries</category>
    </item>
    <item>
      <title>Create an Odoo 14 Markdown Widget Field with TDD - Part 2</title>
      <author>Coding Dodo</author>
      <pubDate>Wed, 12 May 2021 05:10:03 +0000</pubDate>
      <link>https://dev.to/codingdodo/create-an-odoo-14-markdown-widget-field-with-tdd-part-2-23f</link>
      <guid>https://dev.to/codingdodo/create-an-odoo-14-markdown-widget-field-with-tdd-part-2-23f</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6062fE4k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codingdodo.com/content/images/2021/05/post-cover-tdd-part-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6062fE4k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codingdodo.com/content/images/2021/05/post-cover-tdd-part-2.png" alt="Create an Odoo 14 Markdown Widget Field with TDD - Part 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the &lt;strong&gt;second part&lt;/strong&gt; of an article series where we use TDD to develop an Odoo markdown widget.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codingdodo.com/create-odoo-markdown-widget-field-with-tdd-part-1/"&gt;Create an Odoo 14 Markdown Widget Field with TDD - Part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the last part (code available &lt;a href="https://github.com/Coding-Dodo/web_widget_markdown/tree/web-widget-markdown-tutorial-part-one"&gt;here&lt;/a&gt;) we ended up with a functional widget transforming pure text markdown content into HTML in render mode and behaving like a standard FieldText when in edit mode.&lt;/p&gt;

&lt;p&gt;In this tutorial, we are going to use SimpleMDE Editor instead of the standard FieldText &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; input.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#refactoring-and-adding-new-tests"&gt;
  &lt;/a&gt;
  Refactoring and adding new tests
&lt;/h2&gt;

&lt;p&gt;First of all, we are going to &lt;strong&gt;remove the test&lt;/strong&gt; named &lt;code&gt;web_widget_markdown edit form&lt;/code&gt;. As a reminder, this test was used to Edit the form and write into the input like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;testUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clickEdit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;testUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;editInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.o_field_markdown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; **bold content**&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;testUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clickSave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The problem is that the &lt;code&gt;editInput&lt;/code&gt; function will not work anymore because SimpleMDE will replace the whole &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; with his own editor and writing inside will not be possible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-test-simplemde-presence"&gt;
  &lt;/a&gt;
  How to test SimpleMDE presence
&lt;/h3&gt;

&lt;p&gt;To test for SimpleMDE presence we have to analyze how this library insert its editor into the DOM, and a quick inspect gives us more info:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"CodeMirror cm-s-paper CodeMirror-wrap"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"overflow: hidden; position: relative; width: 3px; height: 0px; top: 15px; left: 38.8281px;"&lt;/span&gt; &lt;span class="na"&gt;data-children-count=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;autocorrect=&lt;/span&gt;&lt;span class="s"&gt;"off"&lt;/span&gt; &lt;span class="na"&gt;autocapitalize=&lt;/span&gt;&lt;span class="s"&gt;"off"&lt;/span&gt; &lt;span class="na"&gt;spellcheck=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="na"&gt;tabindex=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"position: absolute; padding: 0px; width: 1000px; height: 1em; outline: none;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"CodeMirror-vscrollbar"&lt;/span&gt; &lt;span class="na"&gt;cm-not-content=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"bottom: 0px; width: 12px; pointer-events: none;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ...
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see, SimpleMDE uses the underlying library &lt;a href="https://codemirror.net/"&gt;CodeMirror&lt;/a&gt; to create his editor. So checking for the presence of the &lt;code&gt;div&lt;/code&gt; with class &lt;code&gt;.CodeMirror&lt;/code&gt; should validate the presence of the Editor. &lt;strong&gt;Let's write a new test.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;QUnit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;web_widget_markdown SimpleMDE is present&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;testUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createView&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;View&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FormView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;arch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;form string="Blog"&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;group&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;field name="name"/&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;field name="content" widget="markdown"/&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;/group&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;res_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;testUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clickEdit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strictEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.o_field_markdown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div.CodeMirror&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CodeMirror div should be present&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-to-test-that-simplemde-is-working"&gt;
  &lt;/a&gt;
  How to test that SimpleMDE is working
&lt;/h3&gt;

&lt;p&gt;To test that simple MDE is working we should:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, go into Edit mode so SimpleMDE is initialized (previous test)&lt;/li&gt;
&lt;li&gt;Check that the initial value of our model (data) is passed to SimpleMDE&lt;/li&gt;
&lt;li&gt;Change the value of SimpleMDE content (mock behavior of user writing inside the WYSIWYG) and verify that Odoo widget value has been updated&lt;/li&gt;
&lt;li&gt;Save the Form and assert that our edits are saved and present&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#writing-the-tests"&gt;
  &lt;/a&gt;
  Writing the tests
&lt;/h4&gt;

&lt;p&gt;To go through our test we will need to &lt;strong&gt;have access to the widget itself&lt;/strong&gt; from the mocked FormView. Form object have a &lt;code&gt;renderer&lt;/code&gt; attribute that will be helpful in that situation by inspecting it's &lt;code&gt;allFieldWidgets&lt;/code&gt; property:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// [1] because in our form the first field is for the name of the blog&lt;/span&gt;
&lt;span class="c1"&gt;// So the first field is in [0] and ours is in [1]&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;markdownField&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allFieldWidgets&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the test, we want to be able to have access to the &lt;strong&gt;SimpleMDE instance directly from the widget&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Often times, &lt;strong&gt;we write tests that drive us to implement the solution in a specific way&lt;/strong&gt;. In this example we know that we want the Widget Object to hold a property object named &lt;code&gt;simplemde&lt;/code&gt; containing the current instance of &lt;code&gt;new SimpleMDE&lt;/code&gt; Editor. This will help us to initialize it, destroy it, set, or get its value. This is a powerful way of programming because the test help us make more robust APIs by directly needing us to implement the strict necessary functions for it to be functional.&lt;/p&gt;

&lt;p&gt;So given the idea, we have that property available the test can be written like that&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;QUnit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;web_widget_markdown edit SimpleMDE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;testUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createView&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;View&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FormView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;arch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;form string="Blog"&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;group&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;field name="name"/&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;field name="content" widget="markdown"/&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;/group&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;res_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;testUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clickEdit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;markdownField&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allFieldWidgets&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strictEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;markdownField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;simplemde&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; 
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;# Hello world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Initial Value of SimpleMDE should be set&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;markdownField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;simplemde&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; **bold content**&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strictEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;markdownField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_getValue&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; 
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; **bold content**&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;If we change value in SimpleMDE, value of odoo widget should be updated&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;testUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clickSave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strictEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.o_field_markdown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;strong&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;After Save, b should be present&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strictEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.o_field_markdown strong&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; 
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bold content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;After Save, &amp;lt;strong&amp;gt; should contain 'bold content'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We cannot properly interact with the CodeMirror editor with JQuery testUtils so we will refer to the &lt;a href="https://codemirror.net/doc/manual.html"&gt;CodeMirror user manual&lt;/a&gt; to see how to insert a value (this is also what happens when user type) and this is how we will do it from the test function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;markdownField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;simplemde&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;codemirror&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; **bold content**&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And to test that the &lt;strong&gt;Odoo field&lt;/strong&gt; itself has the same value as the Markdown editor we make this assertion.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strictEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;markdownField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_getValue&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; 
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; **bold content**&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Value of odoo widget should be updated&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#general-knowledge-understanding-getvalue-in-odoo-widget"&gt;
  &lt;/a&gt;
  General knowledge: Understanding _getValue() in Odoo Widget
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;_getValue()&lt;/code&gt; is a function first defined in the &lt;code&gt;DebouncedField&lt;/code&gt; &lt;em&gt;(FieldText inherits DebouncedField)&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Inside DebouncedField in odoo/addons/web/static/src/js/fields/basic_fields.js&lt;/span&gt;
&lt;span class="cm"&gt;/**
 * Should return the current value of the field, in the DOM (for example,
 * the content of the input)
 *
 * @abstract
 * @private
 * @returns {*}
 */&lt;/span&gt;
&lt;span class="nx"&gt;_getValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A &lt;code&gt;DebouncedField&lt;/code&gt; is a superclass that handles the debouncing of the user input.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Debouncing an input in JavaScript is a common technique to reduce the rate of execution of a function. If a user is typing inside an input and you execute a function on each change of that input (each letter typed) it can quickly lead to a lot of computation power being used on just that. The common technique is called debounced and it will delay the execution of the function listening to the input, only every X secondes. Odoo use &lt;code&gt;_.debounce&lt;/code&gt; for this with the &lt;a href="https://underscorejs.org/#debounce"&gt;underscorejs library&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;This is a&lt;/strong&gt;  &lt;strong&gt;summarized view of the Odoo Fields Widget inheritance graph&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// the super class&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;AbstractField&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="c1"&gt;// handle debouncing&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;DebouncedField&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;AbstractField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt;
        &lt;span class="c1"&gt;// handle keystroke evnts, state and other things&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;InputField&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;DebouncedField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt;
            &lt;span class="c1"&gt;// more specific implementations using InputField logic&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;FieldText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;InputField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;FieldChar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;InputField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;FieldDate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;InputField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;FieldDate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;InputField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Most of all the field inheriting InputField are overriding this &lt;code&gt;_getValue()&lt;/code&gt; function to return more than the basic &lt;code&gt;this.value&lt;/code&gt; property of a widget and we will do the same.&lt;/p&gt;

&lt;p&gt;Running the tests in the current state of our widget expectedly fail.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pxzoIesz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/phildl-cloudinary/image/upload/v1617185184/codingdodo/tdd-markdown-widget-part-two-error-tests.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pxzoIesz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/phildl-cloudinary/image/upload/v1617185184/codingdodo/tdd-markdown-widget-part-two-error-tests.png" alt="Create an Odoo 14 Markdown Widget Field with TDD - Part 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initialize-simplemde-editor-in-widget-edit-mode"&gt;
  &lt;/a&gt;
  Initialize SimpleMDE editor in widget Edit mode
&lt;/h2&gt;

&lt;p&gt;As we wrote our tests earlier, we know that we need to have &lt;code&gt;simplemde&lt;/code&gt; as a property of our widget, let's then extend the &lt;code&gt;init&lt;/code&gt; function of our widgetto do so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
* @constructor
*/&lt;/span&gt;
&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;simplemde&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#attaching-simplemde-to-our-widget-dom-root-element"&gt;
  &lt;/a&gt;
  Attaching SimpleMDE to our Widget dom root element.
&lt;/h3&gt;

&lt;p&gt;And in the &lt;code&gt;start&lt;/code&gt; function &lt;em&gt;(available in all Odoo Widgets)&lt;/em&gt; we will do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * When the the widget render, check view mode, if edit we
 * instanciate our SimpleMDE
 * 
 * @override
 */&lt;/span&gt;
&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;edit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;simplemde&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SimpleMDE&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we instantiate SimpleMDE we need to at least give him the &lt;code&gt;element&lt;/code&gt; option or else it will attach itself to any &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; existing &lt;em&gt;(this the the default behavior of the library)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is &lt;code&gt;this.$el[0]&lt;/code&gt; ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;this.$el&lt;/code&gt; is a JQuery object and &lt;strong&gt;not a pure dom&lt;/strong&gt; Element as required by SimpleMDE, so by doing &lt;code&gt;this.$el[0]&lt;/code&gt; we get the proper dom element.&lt;/p&gt;

&lt;p&gt;Keep in mind that we inherit FieldText, and FieldText has some original logic about the HTML element it uses to render itself. In read-only mode, it is a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; and in edit mode the tag change, as seen here in the &lt;u&gt;source code&lt;/u&gt; of the &lt;code&gt;FieldText&lt;/code&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
* @constructor
*/&lt;/span&gt;
&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;edit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tagName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;textarea&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#running-the-tests-and-analyzing-the-error"&gt;
  &lt;/a&gt;
  Running the tests and analyzing the error
&lt;/h3&gt;

&lt;p&gt;Now if we run the tests we will see this error&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Cannot read property 'insertBefore' of null@ 121 ms&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;TypeError: Cannot &lt;span class="nb"&gt;read &lt;/span&gt;property &lt;span class="s1"&gt;'insertBefore'&lt;/span&gt; of null
    at http://localhost:8069/web_widget_markdown/static/lib/simplemde.min.js:12:1240
    at new t &lt;span class="o"&gt;(&lt;/span&gt;http://localhost:8069/web_widget_markdown/static/lib/simplemde.min.js:7:31640&lt;span class="o"&gt;)&lt;/span&gt;
    at new e &lt;span class="o"&gt;(&lt;/span&gt;http://localhost:8069/web_widget_markdown/static/lib/simplemde.min.js:7:29476&lt;span class="o"&gt;)&lt;/span&gt;
    at e &lt;span class="o"&gt;(&lt;/span&gt;http://localhost:8069/web_widget_markdown/static/lib/simplemde.min.js:7:29276&lt;span class="o"&gt;)&lt;/span&gt;
    at Function.e.fromTextArea &lt;span class="o"&gt;(&lt;/span&gt;http://localhost:8069/web_widget_markdown/static/lib/simplemde.min.js:12:1213&lt;span class="o"&gt;)&lt;/span&gt;
    at B.render &lt;span class="o"&gt;(&lt;/span&gt;http://localhost:8069/web_widget_markdown/static/lib/simplemde.min.js:15:4157&lt;span class="o"&gt;)&lt;/span&gt;
    at new B &lt;span class="o"&gt;(&lt;/span&gt;http://localhost:8069/web_widget_markdown/static/lib/simplemde.min.js:14:28861&lt;span class="o"&gt;)&lt;/span&gt;
    at Class.start &lt;span class="o"&gt;(&lt;/span&gt;http://localhost:8069/web_widget_markdown/static/src/js/field_widget.js:34:30&lt;span class="o"&gt;)&lt;/span&gt;
    at Class.prototype.&amp;lt;computed&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;as start] &lt;span class="o"&gt;(&lt;/span&gt;http://localhost:8069/web/static/src/js/core/class.js:90:38&lt;span class="o"&gt;)&lt;/span&gt;
    at http://localhost:8069/web/static/src/js/core/widget.js:440:25
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The error actually comes &lt;strong&gt;from the simplemde library&lt;/strong&gt; trying to insert itself into the DOM. We gave him &lt;code&gt;$el[0]&lt;/code&gt; as an element. And as seen in the source code, the actual element given is a &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;, this is due to us inheriting FieldText.&lt;/p&gt;

&lt;p&gt;But the problem actually comes from the surrounding of the &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; element. &lt;strong&gt;SimpleMDE will actually use&lt;/strong&gt; &lt;code&gt;parentNode&lt;/code&gt; &lt;strong&gt;on the element given to place itself.&lt;/strong&gt; The element given as &lt;code&gt;$el[0]&lt;/code&gt; as is has &lt;strong&gt;no parent&lt;/strong&gt; due to the way the Odoo Framework inserts it in the DOM.&lt;/p&gt;

&lt;p&gt;So the base &lt;strong&gt;template&lt;/strong&gt; of our field cannot be as simple as a span, it has to be encapsulated by another div or something else.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#moving-to-a-dedicated-qweb-template-for-our-widget"&gt;
  &lt;/a&gt;
  Moving to a dedicated Qweb Template for our widget
&lt;/h3&gt;

&lt;p&gt;To create a Template for a widget we need to create an XML file containing our template then explicitly use it in our javascript widget declaration.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-qweb-template"&gt;
  &lt;/a&gt;
  The Qweb template
&lt;/h4&gt;

&lt;p&gt;Create the file &lt;code&gt;static/src/xml/qweb_template.xml&lt;/code&gt; with this content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;templates&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;t&lt;/span&gt; &lt;span class="na"&gt;t-name=&lt;/span&gt;&lt;span class="s"&gt;"FieldMarkdown"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"o_field_markdown"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"o_field_markdown"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"o_field_markdown"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/t&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/templates&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We gave our template the same name &lt;code&gt;t-name="FieldMarkdown&lt;/code&gt; as the name we export in our JavaScript file for consistency.&lt;br&gt;&lt;br&gt;
Inside it is just a wrapper div class with the same class &lt;code&gt;.o_field_markdown&lt;/code&gt; we used before and inside it a &lt;code&gt;&amp;lt;textare&amp;gt;&lt;/code&gt; for SimpleMDE to attach to.&lt;/p&gt;

&lt;p&gt;Add it to your &lt;code&gt;__manifest__.py&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="s"&gt;"qweb"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; 
    &lt;span class="s"&gt;'static/src/xml/qweb_template.xml'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#using-the-template-in-our-javascript-field-widget"&gt;
  &lt;/a&gt;
  Using the template in our JavaScript field widget
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;markdownField&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;basicFields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FieldText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;supportedFieldTypes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;// className: 'o_field_markdown',&lt;/span&gt;
    &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FieldMarkdown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// name of template in xml Qweb file&lt;/span&gt;
    &lt;span class="na"&gt;jsLibs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/web_widget_markdown/static/lib/simplemde.min.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We removed the &lt;code&gt;className&lt;/code&gt; attribute because it is no longer useful.&lt;/p&gt;

&lt;p&gt;Run the tests again and surely it fails again because we still tell SimpleMDE to attach itself to the &lt;strong&gt;root&lt;/strong&gt; $el of our widget.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#refactoring-our-widget-to-use-the-new-template"&gt;
  &lt;/a&gt;
  Refactoring our widget to use the new template
&lt;/h4&gt;

&lt;p&gt;Inside the start function of the widget, we will target the &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; &lt;strong&gt;inside&lt;/strong&gt; the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; we created in the template.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;edit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;$textarea&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;textarea&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;simplemde&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SimpleMDE&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$textarea&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if we run the tests again:   &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Markdown Widget Tests: web_widget_markdown SimpleMDE is present &lt;strong&gt;(1)&lt;/strong&gt;  &lt;strong&gt;✅&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Markdown Widget Tests: web_widget_markdown edit SimpleMDE (3, 0, 3) ❌&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It means &lt;strong&gt;our SimpleMDE is well initialized&lt;/strong&gt; but there is no communication of value between the widget and SimpleMDE editor.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#communication-between-simplemde-and-the-widget"&gt;
  &lt;/a&gt;
  Communication between SimpleMDE and the widget
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#initialize-simplemde-with-data-value"&gt;
  &lt;/a&gt;
  Initialize SimpleMDE with data value
&lt;/h4&gt;

&lt;p&gt;The first test we will try to pass is &lt;em&gt;Initial Value of SimpleMDE should be set.&lt;/em&gt; To do so, we will refer to the &lt;a href="https://github.com/sparksuite/simplemde-markdown-editor#getset-the-content"&gt;SimpleMDE documentation on setting and getting value&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We see that there is a simple method &lt;code&gt;set("value")&lt;/code&gt; but also an &lt;code&gt;initialValue&lt;/code&gt; that can be passed at instantiation. We will choose the second solution and make these changes to the &lt;code&gt;start&lt;/code&gt; function of our widget:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;edit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;$textarea&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;textarea&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;simplemde&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SimpleMDE&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$textarea&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="na"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// this.value represents widget data&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Now we run the tests again and surely see that our first test passed ✅&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the first part, we handled the &lt;code&gt;_renderReadonly&lt;/code&gt; function, now that we work on edit mode we will override the function &lt;code&gt;_renderEdit&lt;/code&gt; to set the value into SimpleMDE, add these methods to the widget&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;_formatValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="nx"&gt;_renderEdit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;newValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_formatValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;simplemde&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;simplemde&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;SimpleMDE &lt;strong&gt;can't handle false or null value&lt;/strong&gt; so the function &lt;code&gt;_formatValue&lt;/code&gt; is there to help us return an empty string when there is nothing in the field.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;_renderEdit&lt;/code&gt; and &lt;code&gt;_renderReadonly&lt;/code&gt; are called by the main &lt;code&gt;_render&lt;/code&gt; function that is defined in &lt;code&gt;odoo/addons/web/static/src/js/fields/abstract_field.js&lt;/code&gt;. This main render function handles the conditional logic of the widget being in Edit or Readonly mode and call the correct function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;

    &lt;span class="nx"&gt;_render&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;decorations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_applyDecorations&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;edit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_renderEdit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;readonly&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_renderReadonly&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again we run the tests and everything is still green ✅ so we can go to the next step.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#listening-to-change-in-simplemde-to-update-our-widget-value"&gt;
  &lt;/a&gt;
  Listening to change in SimpleMDE to update our widget value.
&lt;/h3&gt;

&lt;p&gt;In our previous test, we wrote that &lt;code&gt;markdownField._getValue()&lt;/code&gt; should be equal to what we write inside the SimpleMDE editor.&lt;/p&gt;

&lt;p&gt;Naturally we will add that &lt;code&gt;_getValue()&lt;/code&gt; function and make it return the inner value of SimpleMDE.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * return the SimpleMDE value
 *
 * @private
 */&lt;/span&gt;
&lt;span class="nx"&gt;_getValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;simplemde&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we have access to the property &lt;code&gt;simplemde&lt;/code&gt; that we initialize in our widget it is very easy to get the data.&lt;/p&gt;

&lt;p&gt;Then, to listen to changes, we have to get the CodeMirror instance of our SimpleMDE and listen to its &lt;code&gt;change&lt;/code&gt; events that CodeMirror is triggering.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;edit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;$textarea&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;textarea&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;simplemde&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SimpleMDE&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$textarea&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="na"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;simplemde&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;codemirror&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;simplemde&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;We had to declare &lt;code&gt;var self = this&lt;/code&gt; to be able to use it in the callback function.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With that change made let's run the tests again&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The initial Value of SimpleMDE should be set@ 75 ms ✅&lt;/li&gt;
&lt;li&gt;If we change the value in SimpleMDE, the value of the odoo widget should be updated@ 81 ms ✅&lt;/li&gt;
&lt;li&gt;After Save, b should be present@ 380 ms ✅&lt;/li&gt;
&lt;li&gt;After Save, &lt;strong&gt; should contain 'bold content' ✅&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Victory !&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that our tests passed we can try the module from the user perspective&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ma2S8xFT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/phildl-cloudinary/image/upload/v1617616816/codingdodo/testing-the-ui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ma2S8xFT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/phildl-cloudinary/image/upload/v1617616816/codingdodo/testing-the-ui.png" alt="Create an Odoo 14 Markdown Widget Field with TDD - Part 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, we can see that there is some problem with the aspect of our Markdown Editor.&lt;/p&gt;

&lt;p&gt;It seems that the height is fixed so there is not enough space for it. This is coming from the fact that we are extending the &lt;strong&gt;FieldText widget and it has built-in auto-resize features&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the next part, we will see how to deal with that as we improve our widget.&lt;/p&gt;

&lt;p&gt;The source code for this tutorial &lt;a href="https://github.com/Coding-Dodo/web_widget_markdown/tree/web-widget-markdown-tutorial-part-two"&gt;is available here on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading, if you liked this article please consider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;☕️ &lt;a href="https://www.buymeacoffee.com/CodingDodo"&gt;Buying me a Coffee&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🥳 Register on &lt;a href="https://codingdodo.com"&gt;Codingdodo.com&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>tdd</category>
      <category>javascript</category>
      <category>odoo</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>25 GitHub Repos you can't miss to bookmark</title>
      <author>Dev Write Ups</author>
      <pubDate>Wed, 12 May 2021 04:52:43 +0000</pubDate>
      <link>https://dev.to/devwriteups/25-github-repos-you-can-t-miss-to-bookmark-1ek1</link>
      <guid>https://dev.to/devwriteups/25-github-repos-you-can-t-miss-to-bookmark-1ek1</guid>
      <description>&lt;p&gt;Github is more than a version control service, it's place where developer contributes to the Community. Github is the ultimate place where you'll find some amazing free and ultimate resources for everything, from eBook to tutorials to lectures to projects and more. I have gathered list of some of the amazing Github Repository you can't miss to bookmark. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#bestwebsitesaprogrammershouldvisit"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/sdmg15/Best-websites-a-programmer-should-visit"&gt;Best-websites-a-programmer-should-visit&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nAsBX5Yh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620228648101/2__MJzwy5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nAsBX5Yh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620228648101/2__MJzwy5.png" alt="1221.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When learning CS, there are some useful sites you must know to get always informed to do your technologies even better and learn new things. Here is a non-exhaustive list of some sites you should visit. Contains: Articles, tutorials, jobs, eBooks, english improvement, podcasts and more. &lt;/p&gt;

&lt;p&gt;Visit -&amp;gt;  &lt;a href="https://github.com/sdmg15/Best-websites-a-programmer-should-visit"&gt;Best-websites-a-programmer-should-visit&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#big-list-of-naughty-strings"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/minimaxir/big-list-of-naughty-strings"&gt;Big list of naughty strings&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JW4hS-3J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620271829088/MY_QMqcC0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JW4hS-3J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620271829088/MY_QMqcC0.png" alt="frame_generic_dark (1).png"&gt;&lt;/a&gt;&lt;br&gt;
The Big List of Naughty Strings is an evolving list of strings which have a high probability of causing issues when used as user-input data. This is intended for use in helping both automated and manual QA testing; useful for whenever your QA engineer walks into a bar.&lt;/p&gt;

&lt;p&gt;Visit -&amp;gt;  &lt;a href="https://github.com/minimaxir/big-list-of-naughty-strings"&gt;Big list of naughty strings&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#awesome-talks"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/JanVanRyswyck/awesome-talks"&gt;Awesome talks&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eN9oZpwO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620228718919/u07bH8psj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eN9oZpwO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620228718919/u07bH8psj.png" alt="12222.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A curated list of screencasts, recordings of user group gatherings and conference talks available online.&lt;/p&gt;

&lt;p&gt;Visit -&amp;gt; &lt;a href="https://github.com/JanVanRyswyck/awesome-talks"&gt;Awesome talks&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thebookofsecretknowledge"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/trimstray/the-book-of-secret-knowledge"&gt;the-book-of-secret-knowledge&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q5i-8mQP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620228844501/9arvEjtzp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q5i-8mQP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620228844501/9arvEjtzp.png" alt="toc.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This repository is a collection of various materials and tools that many people use every day in my work. It contains a lot of useful information gathered in one piece. &lt;/p&gt;

&lt;p&gt;Visit -&amp;gt;  &lt;a href="https://github.com/trimstray/the-book-of-secret-knowledge"&gt;the-book-of-secret-knowledge&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#codinginterviewuniversity"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/jwasham/coding-interview-university"&gt;coding-interview-university&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is my multi-month study plan for going from web developer (self-taught, no CS degree) to software engineer for a large company.&lt;/p&gt;

&lt;p&gt;Visit -&amp;gt; &lt;a href="https://github.com/jwasham/coding-interview-university"&gt;coding-interview-university&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#awesome"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/sindresorhus/awesome"&gt;Awesome&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oiUoMNmy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620229197980/UvL4iKuWY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oiUoMNmy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620229197980/UvL4iKuWY.png" alt="logo(1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is technically awesome. Front software development to hardware contains everything. &lt;/p&gt;

&lt;p&gt;Visit -&amp;gt; &lt;a href="https://github.com/sindresorhus/awesome"&gt;Awesome&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nodejs-best-practice"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/goldbergyoni/nodebestpractices"&gt;NodeJS Best practice&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aXLzHWf0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620272641824/EXfwmAXvf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aXLzHWf0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620272641824/EXfwmAXvf.png" alt="frame_generic_dark (7).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;this repository is a summary and curation of the top-ranked content on Node.js best practices, as well as content written here by collaborators.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Visit -&amp;gt; &lt;a href="https://github.com/goldbergyoni/nodebestpractices"&gt;NodeJS Best practice&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wtfjs"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/denysdovhan/wtfjs"&gt;WTFjs&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V5fnFFe8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620273152443/LwWphebX-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V5fnFFe8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620273152443/LwWphebX-.png" alt="frame_safari_light.png"&gt;&lt;/a&gt;&lt;br&gt;
JavaScript is a great language. It has a simple syntax, large ecosystem and, what is most important, a great community.&lt;/p&gt;

&lt;p&gt;At the same time, we all know that JavaScript is quite a funny language with tricky parts. Some of them can quickly turn our everyday job into hell, and some of them can make us laugh out loud.&lt;/p&gt;

&lt;p&gt;Visit -&amp;gt; &lt;a href="https://github.com/denysdovhan/wtfjs"&gt;WTFjs&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#real-world"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/gothinkster/realworld"&gt;Real World &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_gNRHZnH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620272849075/Z7JYg1QFg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_gNRHZnH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620272849075/Z7JYg1QFg.png" alt="frame_generic_dark (8).png"&gt;&lt;/a&gt;&lt;br&gt;
"The mother of all demo apps" — Exemplary fullstack Medium.com clone powered by React, Angular, Node, Django, and many more 🏅&lt;/p&gt;

&lt;p&gt;Visit -&amp;gt; &lt;a href="https://github.com/gothinkster/realworld"&gt;Real World &lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#free-for-dev"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/ripienaar/free-for-dev"&gt;Free For DEV&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Developers and Open Source authors now have a massive amount of services offering free tiers, but it can be hard to find them all to make informed decisions.&lt;/p&gt;

&lt;p&gt;This is a list of software (SaaS, PaaS, IaaS, etc.) and other offerings that have free tiers for developers.&lt;/p&gt;

&lt;p&gt;Visit -&amp;gt; &lt;a href="https://github.com/ripienaar/free-for-dev"&gt;Free For DEV&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-algorithmspython"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/TheAlgorithms/Python"&gt;The Algorithms/Python&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AmKdV6WC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620271896222/lpP_41Opn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AmKdV6WC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620271896222/lpP_41Opn.png" alt="frame_generic_dark (2).png"&gt;&lt;/a&gt;&lt;br&gt;
All of the computer science algorithms implemented in Python.&lt;/p&gt;

&lt;p&gt;Visit -&amp;gt; &lt;a href="https://github.com/TheAlgorithms/Python"&gt;The Algorithms/Python&lt;/a&gt;  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-algorithms"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;JavaScript Algorithms&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p_d_mXUu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620271601889/TYuzSG1qL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p_d_mXUu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620271601889/TYuzSG1qL.png" alt="frame_generic_light (3).png"&gt;&lt;/a&gt;&lt;br&gt;
This repository contains JavaScript based examples of many popular algorithms and data structures.&lt;br&gt;
Visit -&amp;gt;  &lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;JavaScript Algorithms&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#awesome-python"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/vinta/awesome-python"&gt;Awesome Python&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A curated list of awesome Python frameworks, libraries, software, and resources.&lt;/p&gt;

&lt;p&gt;Visit -&amp;gt; &lt;a href="https://github.com/vinta/awesome-python"&gt;Awesome Python&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#awesomelearningresources"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/lauragift21/awesome-learning-resources"&gt;awesome-learning-resources&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gZSU2IU_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620271255096/Rt_s-yaah.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gZSU2IU_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620271255096/Rt_s-yaah.png" alt="frame_generic_light.png"&gt;&lt;/a&gt;&lt;br&gt;
🔥 Awesome list of resources on Web Development.&lt;/p&gt;

&lt;p&gt;Visit -&amp;gt;  &lt;a href="https://github.com/lauragift21/awesome-learning-resources"&gt;awesome-learning-resources&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tech-interview-handbook"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/yangshun/tech-interview-handbook"&gt;Tech Interview Handbook&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g5YXgac1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620229762272/JcUXpQE4e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g5YXgac1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620229762272/JcUXpQE4e.png" alt="asas.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Carefully curated content to help you ace your next technical interview, with a focus on algorithms. System design questions are in-progress. Besides the usual algorithm questions, other awesome stuffs.&lt;/p&gt;

&lt;p&gt;Visit -&amp;gt;  &lt;a href="https://github.com/yangshun/tech-interview-handbook"&gt;Tech Interview Handbook&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clean-code-javascript"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/ryanmcdermott/clean-code-javascript"&gt;Clean Code JavaScript&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XaCUySim--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620273385612/3x1tdrWof.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XaCUySim--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620273385612/3x1tdrWof.png" alt="frame_safari_light (2).png"&gt;&lt;/a&gt;&lt;br&gt;
🛁 Clean Code concepts adapted for JavaScript&lt;/p&gt;

&lt;p&gt;Visit -&amp;gt; &lt;a href="https://github.com/ryanmcdermott/clean-code-javascript"&gt;Clean Code JavaScript&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#frontendchecklist"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/thedaviddias/Front-End-Checklist"&gt;Front-End-Checklist&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o47EEiey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620270974250/NUOzoy7iH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o47EEiey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620270974250/NUOzoy7iH.png" alt="fc.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Front-End Checklist is an exhaustive list of all elements you need to have / to test before launching your website / HTML page to production.&lt;/p&gt;

&lt;p&gt;Visit -&amp;gt; &lt;a href="https://github.com/thedaviddias/Front-End-Checklist"&gt;Front-End-Checklist&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#33-javascript-concepts"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/leonardomso/33-js-concepts"&gt;33 JavaScript Concepts&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r8t0-9Sc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620272204797/9pr3FN5Jg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r8t0-9Sc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620272204797/9pr3FN5Jg.png" alt="frame_generic_dark (5).png"&gt;&lt;/a&gt;&lt;br&gt;
This repository was created with the intention of helping developers master their concepts in JavaScript. It is not a requirement, but a guide for future studies. It is based on an article written by Stephen Curtis.&lt;/p&gt;

&lt;p&gt;Visit -&amp;gt; &lt;a href="https://github.com/leonardomso/33-js-concepts"&gt;33 JavaScript Concepts&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-guidelines"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/elsewhencode/project-guidelines"&gt;Project guidelines&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--deZB24yV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620271628393/A3h4rYeCS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--deZB24yV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620271628393/A3h4rYeCS.png" alt="frame_generic_light (2).png"&gt;&lt;/a&gt;&lt;br&gt;
Here's a list of guidelines we've found, written and gathered that (we think) works really well with most JavaScript projects here at elsewhen. &lt;/p&gt;

&lt;p&gt;Visit -&amp;gt;  &lt;a href="https://github.com/elsewhencode/project-guidelines"&gt;Project guidelines&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#30-seconds-of-code"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/30-seconds/30-seconds-of-code"&gt;30 Seconds of Code&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DHxlgduJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620271991352/mIFEA74ox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DHxlgduJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620271991352/mIFEA74ox.png" alt="frame_generic_dark (3).png"&gt;&lt;/a&gt;&lt;br&gt;
Short JavaScript code snippets for all your development needs&lt;/p&gt;

&lt;p&gt;Visit -&amp;gt; &lt;a href="https://github.com/30-seconds/30-seconds-of-code"&gt;30 Seconds of Code&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-secure-anything"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/veeral-patel/how-to-secure-anything"&gt; How to secure anything&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BlcJC_k_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620271711243/sLorgdTM5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BlcJC_k_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620271711243/sLorgdTM5.png" alt="frame_generic_dark.png"&gt;&lt;/a&gt;&lt;br&gt;
Security engineering is the discipline of building secure systems.&lt;br&gt;
Its lessons are not just applicable to computer security. In fact, in this repo, I aim to document a process for securing anything, whether it's a medieval castle, an art museum, or a computer network.&lt;/p&gt;

&lt;p&gt;Visit -&amp;gt; &lt;a href="https://github.com/veeral-patel/how-to-secure-anything"&gt; How to secure anything&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-protips"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/AllThingsSmitty/css-protips"&gt;CSS ProTips&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jQ5bnhGv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620272103170/RNMGSPbI5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jQ5bnhGv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620272103170/RNMGSPbI5.png" alt="frame_generic_dark (4).png"&gt;&lt;/a&gt;&lt;br&gt;
A collection of tips to help take your CSS skills pro.&lt;/p&gt;

&lt;p&gt;Visit -&amp;gt; &lt;a href="https://github.com/AllThingsSmitty/css-protips"&gt;CSS ProTips&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-dont-know-javascript"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/getify/You-Dont-Know-JS"&gt;You Don't Know JavaScript&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HkKHuVl7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620272367097/uBnGfBM2g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HkKHuVl7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620272367097/uBnGfBM2g.png" alt="hero.png"&gt;&lt;/a&gt;&lt;br&gt;
This is a series of books diving deep into the core mechanisms of the JavaScript language. &lt;/p&gt;

&lt;p&gt;Visit -&amp;gt;  &lt;a href="https://github.com/getify/You-Dont-Know-JS"&gt;You Don't Know JavaScript&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#public-apis"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p-pONLl6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620272521219/_XIyW5kZg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p-pONLl6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620272521219/_XIyW5kZg.png" alt="frame_generic_dark (6).png"&gt;&lt;/a&gt;&lt;br&gt;
A collective list of free APIs for use in software and web development.&lt;/p&gt;

&lt;p&gt;Visit -&amp;gt;  &lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#airbnb-javascript-guide"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/airbnb/javascript"&gt;AirBnB JavaScript Guide&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r1YfkDYs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620272957009/VBrZgoURg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r1YfkDYs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620272957009/VBrZgoURg.png" alt="frame_generic_dark (9).png"&gt;&lt;/a&gt;&lt;br&gt;
A mostly reasonable approach to JavaScript&lt;/p&gt;

&lt;p&gt;Visit -&amp;gt; &lt;a href="https://github.com/airbnb/javascript"&gt;AirBnB JavaScript Guide&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-questions"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/lydiahallie/javascript-questions"&gt;JavaScript Questions&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3QzP8gG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620273264145/VIZOyoTan.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3QzP8gG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620273264145/VIZOyoTan.png" alt="frame_safari_light (1).png"&gt;&lt;/a&gt;&lt;br&gt;
From basic to advanced: test how well you know JavaScript, refresh your knowledge a bit, or prepare for your coding interview! 💪 🚀. &lt;br&gt;
Visit -&amp;gt; &lt;a href="https://github.com/lydiahallie/javascript-questions"&gt;JavaScript Questions&lt;/a&gt; &lt;/p&gt;

</description>
      <category>github</category>
      <category>javascript</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>🤖 How to create a Telegram Crypto Bot in Javascript</title>
      <author>Dmytro Olefyrenko</author>
      <pubDate>Wed, 12 May 2021 04:50:21 +0000</pubDate>
      <link>https://dev.to/olefyrenko/how-to-create-a-telegram-crypto-bot-in-javascript-57cg</link>
      <guid>https://dev.to/olefyrenko/how-to-create-a-telegram-crypto-bot-in-javascript-57cg</guid>
      <description>&lt;p&gt;Cryptocurrencies and blockchain technology are very hot topics right now. Bitcoin and Ethereum are hitting new all-time highs and more and more companies invest their assets in Bitcoin. Taking these facts as an opportunity to be involved in the crypto world, we will write a bot 🤖 for Telegram to monitor the prices on the cryptocurrency market. Below you can see the screenshot of such a bot. You can send to the bot the crypto token (or token pair) and get its trading price on the largest in terms of trading volume crypto exchange Binance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8kNpl5GL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5pyc5voxjosi2z7du93f.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8kNpl5GL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5pyc5voxjosi2z7du93f.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initializing-the-nodejs-project"&gt;
  &lt;/a&gt;
  Initializing the Node.js project
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Please make sure that you have Node.js installed on your machine. You can get the latest version from the &lt;a href="https://nodejs.org/en/"&gt;official website&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;First of all, we need to create a folder where the code of our bot will be located. By executing the following commands, you can create the folder and initialize the Node.js project there:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;cryptobot
&lt;span class="nb"&gt;cd &lt;/span&gt;cryptobot
npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please answer the questions in the command line questionnaire. After it is done you should see the terminal output similar to mine:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j522i1u---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8uee4yqn71d4h04dvar.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j522i1u---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8uee4yqn71d4h04dvar.png" alt="Npm Console"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the successful project initialization, the &lt;code&gt;package.json&lt;/code&gt; should be created inside the project folder and contain the information about your project metadata.&lt;/p&gt;

&lt;p&gt;Now we need to install three npm packages required for our application. By executing this command, you will get them into the project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;binance-api-node node-telegram-bot-api dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.npmjs.com/package/binance-api-node"&gt;binance-api-node&lt;/a&gt; — interacts with the official Binance API&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/node-telegram-bot-api"&gt;node-telegram-bot-api&lt;/a&gt; — interacts with the official Telegram Bot API&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/dotenv"&gt;dotenv&lt;/a&gt; — loads environment variables from a .env file into process.env&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-the-crypto-prices-from-binance"&gt;
  &lt;/a&gt;
  Getting the Crypto prices from Binance
&lt;/h2&gt;

&lt;p&gt;As a first step, we will get the prices for the cryptocurrencies from Binance API. To use the Binance API, you need to have a Binance account (you can register a new one &lt;a href="http://bit.ly/binance-telegram-bot"&gt;here&lt;/a&gt;). The code for retrieving Bitcoin price from Binance you can find in the following listing. To get the &lt;code&gt;BTC&lt;/code&gt; price, we need to pass the symbol &lt;code&gt;BTCUSDT&lt;/code&gt; as a parameter (&lt;code&gt;USDT&lt;/code&gt; is a stablecoin, 1 USDT ≈ 1 USD).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Binance&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;binance-api-node&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;formatMoney&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./utils/money.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// API keys can be generated here https://www.binance.com/en/my/settings/api-management&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;binanceClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Binance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BINANCE_API_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;apiSecret&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BINANCE_API_SECRET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cryptoToken1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;BTC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cryptoToken2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;USDT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;binanceClient&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;avgPrice&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;cryptoToken1&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;cryptoToken2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="c1"&gt;// example, { symbol: "BTCUSTD" }&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;avgPrice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formatMoney&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;avgPrice&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;price&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Error retrieving the price for &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;cryptoToken1&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;cryptoToken2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can run &lt;code&gt;node index.js&lt;/code&gt; in the terminal and get the latest price for the &lt;code&gt;BTC&lt;/code&gt; token as an output of the &lt;strong&gt;console.log&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are getting &lt;em&gt;SyntaxError: Cannot use import statement outside a module&lt;/em&gt; please add &lt;code&gt;”type”: “module”&lt;/code&gt; into your package.json to be able to import ESModules in Node.js.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the listing above, firstly, we initialize the Binance API client &lt;code&gt;binanceClient&lt;/code&gt; by providing API key and API secret. These keys you can generate in your Binance account in the &lt;a href="https://www.binance.com/en/my/settings/api-management"&gt;API Management&lt;/a&gt; page. Then we call the API method &lt;code&gt;binanceClient.avgPrice&lt;/code&gt; to get the price by providing the object with the symbol key &lt;code&gt;{ symbol: "BTCUSTD" }&lt;/code&gt; as a parameter.&lt;br&gt;
The API keys are stored in the &lt;code&gt;.env&lt;/code&gt; file as a separation of config from code and as a security measure.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-the-telegram-bot"&gt;
  &lt;/a&gt;
  Creating the Telegram Bot
&lt;/h2&gt;

&lt;p&gt;Since now we are able to get the cryptocurrency prices from the Binance API, it is time to integrate our application with the Telegram Bot API. After doing so, we will send the cryptocurrency price into the Telegram chat instead of sending it to the terminal, as we did on the previous code listing.&lt;/p&gt;

&lt;p&gt;To create a Telegram Bot we need (can you guess :-)?) to talk to another bot, &lt;a href="https://t.me/botfather"&gt;BotFather&lt;/a&gt;. By following simple steps, we can specify the name and the username for the bot and get the token after the creation is successful. This token should be kept secure and stored safely in &lt;code&gt;.env&lt;/code&gt; file with a key &lt;code&gt;TELEGRAMM_BOT_TOKEN&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sXdIPbd0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnoabsut2fxvo94xa4ys.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sXdIPbd0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnoabsut2fxvo94xa4ys.png" alt="Bot Father in Telegram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now having the token for our Telegram bot, we can create its instance using &lt;code&gt;node-telegram-bot-api&lt;/code&gt; package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TelegramBot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TELEGRAMM_BOT_TOKEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;polling&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we need to add the handlers for &lt;code&gt;onText&lt;/code&gt; and &lt;code&gt;message&lt;/code&gt; events. When the bot receives the message that matches the following pattern &lt;code&gt;/price [symbol]&lt;/code&gt;, our code will call Binance API to get the latest price for the provided symbol. The final code for the main file of the project &lt;code&gt;index.js&lt;/code&gt; you can find below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Binance&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;binance-api-node&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;TelegramBot&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;node-telegram-bot-api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;formatMoney&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./utils/money.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// API keys can be generated here https://www.binance.com/en/my/settings/api-management&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;binanceClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Binance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BINANCE_API_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;apiSecret&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BINANCE_API_SECRET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// The bot token can be obtained from BotFather https://core.telegram.org/bots#3-how-do-i-create-a-bot&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TelegramBot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TELEGRAMM_BOT_TOKEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;polling&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Matches "/price [symbol]"&lt;/span&gt;
&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\/&lt;/span&gt;&lt;span class="sr"&gt;price &lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;.+&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;chatId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;

  &lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chatId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Wait...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// data[1] can be single token (i.e. "BTC") or pair ("ETH BTC")&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;cryptoToken1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cryptoToken2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;USDT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;binanceClient&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;avgPrice&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;cryptoToken1&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;cryptoToken2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="c1"&gt;// example, { symbol: "BTCUSTD" }&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;avgPrice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chatId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;formatMoney&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;avgPrice&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;price&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;chatId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;`Error retrieving the price for &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;cryptoToken1&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;cryptoToken2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;chatId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;

  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chatId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hi there! I am Alice Crypto Bot.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;

    &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you run the project locally &lt;code&gt;node index.js&lt;/code&gt; you should be able to send commands to your bot and get the responses with cryptocurrency price from it 🚀. You can check the source code of the ready project &lt;a href="https://github.com/olefirenko/crypto-telegram-bot"&gt;in this Github repository&lt;/a&gt;. And, of course, you can interact with the real Alice Crypto bot here - &lt;a href="http://t.me/alice_crypto_bot"&gt;http://t.me/alice_crypto_bot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Please follow me on Twitter &lt;a href="https://twitter.com/olefyrenko"&gt;@olefyrenko&lt;/a&gt; to get updates about how to add new functionality for our bot, like price changes alert (i.e., the price for the cryptocurrency went down or up). Also, feel free to ask me any questions in DM on Twitter. Thank you!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>telegram</category>
      <category>cryptocurrency</category>
      <category>javascript</category>
      <category>binance</category>
    </item>
    <item>
      <title>3 types of people in software development without skin in the game</title>
      <author>Sandor Dargo</author>
      <pubDate>Wed, 12 May 2021 04:36:12 +0000</pubDate>
      <link>https://dev.to/sandordargo/3-types-of-people-in-software-development-without-skin-in-the-game-2mh6</link>
      <guid>https://dev.to/sandordargo/3-types-of-people-in-software-development-without-skin-in-the-game-2mh6</guid>
      <description>&lt;p&gt;I read the really valuable &lt;a href="https://dev.to/sandordargo/skin-in-the-game-hidden-asymmetries-in-daily-life-by-nassim-taleb-9i"&gt;Skin in the game, by Nassim Taleb a few months ago&lt;/a&gt;. If you haven't read it yet, you might ask &lt;em&gt;who are people without skin in the game?&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;There are people who take no real responsibility for making the wrong calls. We mentioned non-founder CEOs, football coaches. When they fail, they just dance around finding their next similar position. Often after taking a hefty severance package.&lt;/p&gt;

&lt;p&gt;In the comments section, &lt;a href="https://dev.to/raddevus"&gt;raddevus&lt;/a&gt; mentioned that there are developers without skin in the game as well. People who produce some features and then off they go, he called them &lt;strong&gt;Mic Drop Devs&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Inspired by &lt;a href="https://dev.to/raddevus"&gt;raddevus&lt;/a&gt;, I collected a set of roles in our industry where you'll have a higher chance to find people without &lt;em&gt;skin in the game&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Beware of them!&lt;/p&gt;

&lt;p&gt;I'll start from the lower levels.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drop-the-mic-devs"&gt;
  &lt;/a&gt;
  Drop The Mic Devs
&lt;/h2&gt;

&lt;p&gt;They are the ones &lt;a href="https://dev.to/raddevus"&gt;raddevus&lt;/a&gt; mentioned. They work on real projects, they produce real code, sometimes usable code, but they are never taking responsibility for maintaining it.&lt;/p&gt;

&lt;p&gt;I identified 3 subtypes of &lt;em&gt;Drop The Mic Devs&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#devs-with-one-leg-out"&gt;
  &lt;/a&gt;
  Devs with one leg out
&lt;/h3&gt;

&lt;p&gt;There are often some colleagues who don't enjoy working for the company and &lt;a href="https://dev.to/sandordargo/how-not-to-quit-1hmo"&gt;concentrate on leaving&lt;/a&gt;. Maybe they already started to do some interviews, or maybe they are already on the notice period and you just don't know about it. In certain countries, the length of the notice is up to 3 months. It's way more than necessary for a proper handover, so obviously they are expected to perform some real work during those months. &lt;/p&gt;

&lt;p&gt;Due to some reasons of conscience, most of them will do some work, but they don't have a skin in the game anymore.&lt;/p&gt;

&lt;p&gt;Whatever long term consequences their code will have, that will be the problem of someone else. It doesn't mean that everyone will produce crap on their notice period. Not all of them will produce crap, but there is a fair chance that they won't do their best. Who could blame them?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#job-hoppers"&gt;
  &lt;/a&gt;
  Job hoppers
&lt;/h3&gt;

&lt;p&gt;The case for job hoppers is similar, but there are some key differences. I don't want to clearly define who is a job hopper based on time spent in a job. Someone who changes every 6 months? Maybe 12? Maybe 24? I don't know and I don't care. That's not the point here.&lt;/p&gt;

&lt;p&gt;Regardless of the time, they enter a job without even giving the mental possibility for staying there for a longer undefined period of time. They don't plan to make long term effects on the project they work or to deeply influence the company they work for.&lt;/p&gt;

&lt;p&gt;They only join to build their CV to be able to add a few sexy names and logos. They come to take, not to give. They are interested in getting some experience in certain technologies, to try some patterns, but they are not interested in how the product will be maintained. Of course not, they will be soon somewhere else.&lt;/p&gt;

&lt;p&gt;One could argue that their reputation will suffer by producing code that is difficult to maintain. But with the pace people move around between positions or jobs, it's hardly the case. It's very difficult to identify individuals who contributed above average to make a product too difficult to maintain.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#feature-team-developers"&gt;
  &lt;/a&gt;
  Feature team developers
&lt;/h3&gt;

&lt;p&gt;The last group of people among the &lt;em&gt;Drop The Mic Devs&lt;/em&gt; are the feature team developers. &lt;/p&gt;

&lt;p&gt;What do I mean by a feature team?&lt;/p&gt;

&lt;p&gt;In certain organizations you will find teams who are solely responsible for developing new features for a product, but they don't take care of their maintenance.&lt;/p&gt;

&lt;p&gt;Usually, these teams take responsibility for problems identified before the production activation. Once it's in production, they wash their hands and start delivering the next feature.&lt;/p&gt;

&lt;p&gt;Why should they make maintainability their main concern? What would motivate them?&lt;/p&gt;

&lt;p&gt;Apart from hoards of maintenance people with sticks, pitchforks in their hands...&lt;/p&gt;

&lt;p&gt;Maybe a rotation between the feature and the maintenance teams... Often there is no such rotation or it's very limited on purpose. Due to the context switches people would be less productive, they'd have to learn different processes and in addition people &lt;del&gt;might&lt;/del&gt; do have strong preferences.&lt;/p&gt;

&lt;p&gt;Another solution is to have teams owning the product they work on during its whole lifecycle. If you don't have such teams, you'll easily end up with people not taking responsibility for the long term maintainability of the product.&lt;/p&gt;

&lt;p&gt;This doesn't mean that the delivered product will be subpar with full of bugs. Maybe it will seem quite good at the time of delivery. Yet there is a fair chance that with the evolution of the product, the maintenance costs will be much higher than optimal as it was not an important aspect for the developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#noncoding-architects"&gt;
  &lt;/a&gt;
  Non-coding Architects
&lt;/h2&gt;

&lt;p&gt;After the Drop The Mic Devs let's mention one of returning characters of Uncle Bob's works. The infamous non-coding architect.&lt;/p&gt;

&lt;p&gt;A person with a long and usually aged experience of building software projects. He (or she) is in a distant position from the coding teams, his hands-on coding skills are rusty.&lt;/p&gt;

&lt;p&gt;He's responsible to design the architecture of complex systems, yet I say often he has no skin in the game. He is rarely an owner of a project. He is definitely not someone who is responsible for making the system lucrative, and he is not responsible for delivering the product either.&lt;/p&gt;

&lt;p&gt;He delivers blueprints and based on those documents the (feature) teams have to build the product.&lt;/p&gt;

&lt;p&gt;If the product doesn't sell it will be the failure of either the business or - if the implementation was low quality - of the implementation teams. They did the manual labour and if the results are crappy it's their fault instead of the person who made bad plans...&lt;/p&gt;

&lt;p&gt;With enough time, with enough projects, probably the people around could realize what's going on, but it might be too late or simply nobody has such a long visibility on the non-coding architect's work to draw such consequences.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nontech-agile-coaches"&gt;
  &lt;/a&gt;
  (Non-tech) Agile coaches
&lt;/h2&gt;

&lt;p&gt;Agile coaches are usually the ultimate people without skin in the game. There are good agile coaches for sure, I've also worked with one, but the vast majority based on my experience didn't do anything special, and didn't care that much about the projects.&lt;/p&gt;

&lt;p&gt;Let's put it this way. They were like not so experienced martial arts students who know a couple of moves and know only those therefore they use only those. The agile coaches I met with knew a few things about agilish project management, they learnt a few techniques to popularize and teach them and that's all they knew, therefore that's all they did.&lt;/p&gt;

&lt;p&gt;Unlike martial arts students, these agile coaches are not really learning new things. When someone asks them about techniques they don't know about, they fend off the questions with the professionalism of a politician who is asked some cumbersome questions.&lt;/p&gt;

&lt;p&gt;As the scope of their coaching is limited, as the length of the coaching is way shorter than the projects themselves they will not be held responsible for any failures.&lt;/p&gt;

&lt;p&gt;In the case of successful projects for sure, they will be invited to the celebrations but when things don't go well they will not be held responsible. After all, they didn't do the plannings, they didn't do the code... They have no skin in the game.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Don't feel attacked if you belong to any of these groups. You can still have skin in the game or maybe you prefer not to have any skin in the game... &lt;/p&gt;

&lt;p&gt;I used to be part of a feature team myself, and I do sympathize with coaching roles. Yet these groups will give a home to more people without skin in the game because of the reasons I explained above.&lt;/p&gt;

&lt;p&gt;If you are someone who is fully owning (as part of a team at least) a product for its full lifecycle, it's hard not to have any skin in the game.&lt;/p&gt;

&lt;p&gt;People leaving or wanting to leave, people who are not part of the maintenance or maybe not even the implementation are usually people who don't face the consequences of bad design/implementation decisions. They have &lt;em&gt;no skin in the game&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Do you?&lt;/p&gt;

</description>
      <category>career</category>
      <category>watercooler</category>
      <category>management</category>
      <category>books</category>
    </item>
    <item>
      <title>7 JavaScript Data Structures you must know</title>
      <author>Neha Soni</author>
      <pubDate>Wed, 12 May 2021 04:07:52 +0000</pubDate>
      <link>https://dev.to/nehasoni__/7-javascript-data-structures-you-must-know-57ah</link>
      <guid>https://dev.to/nehasoni__/7-javascript-data-structures-you-must-know-57ah</guid>
      <description>&lt;p&gt;Data Structures is one of the most frequently tested subjects by a lot of companies. It is the base of IT industries and is largely used in the areas of Artificial Intelligence, operating systems, graphics, etc.&lt;br&gt;
In this blog post, I will cover the seven most used JavaScript data structures that every JS developer should know.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#this-blog-post-will-cover"&gt;
  &lt;/a&gt;
  This Blog Post will cover:-
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- What are Data Structures?
- 7 most used data structures
  - Arrays
  - Stack
  - Queues
  - Linked List
  - Trees
  - Graphs
  - Hashtable
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#what-is-data-structures"&gt;
  &lt;/a&gt;
  What is Data Structures?
&lt;/h2&gt;

&lt;p&gt;Data Structure is the way of storing and organizing the data in such a way that it can be used efficiently.  More precisely, Data Structure refers to a group of data values, how they relate to each other, and the operations or functions that can be carried out on them.&lt;br&gt;&lt;br&gt;
&lt;code&gt;Data structures= group of data values+allowed operations on that data&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Data structure enables us to manage and utilize large datasets, handle multiple requests from users at once, and speed up the data processing. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Types of data structures in JS:-&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_nqttmjZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619611250125/8tZFEKg3Y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_nqttmjZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619611250125/8tZFEKg3Y.png" alt="Screenshot (210).png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-array"&gt;
  &lt;/a&gt;
  1.) Array
&lt;/h2&gt;

&lt;p&gt;Arrays are the most basic data structure. It is a group of similar types of elements stored together at contiguous memory locations and each cell has a corresponding numeric index used to select its data. Like all scripting languages​​, JavaScript has &lt;strong&gt;dynamic arrays&lt;/strong&gt; i.e their size is not predetermined, nor the type of data.&lt;/p&gt;

&lt;p&gt;An array literal is the easiest way to create a JavaScript Array. &lt;br&gt;
Let's see the simple example of creating an array using an array literal:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;  
var users=["neha","ayushi","gauri"];  // creating an array
//iterate over an array 
for (i=0;i&amp;lt;user.length;i++){  
document.write(emp[i] + ", ");  
}  
&amp;lt;/script&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:-&lt;/strong&gt; &lt;code&gt;neha, ayushi, gauri&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#common-javascript-array-methods"&gt;
  &lt;/a&gt;
  Common JavaScript Array Methods:-
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pLKNRmT_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619523636447/hCdUdd-wA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pLKNRmT_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619523636447/hCdUdd-wA.png" alt="Screenshot (205).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linked-list"&gt;
  &lt;/a&gt;
  Linked List
&lt;/h2&gt;

&lt;p&gt;The linked list is a linear data structure in which elements are not in contiguous memory locations. It consists of a group of nodes and each node has its own &lt;strong&gt;data&lt;/strong&gt; and &lt;strong&gt;address to the next node&lt;/strong&gt;. In an array, the elements are indexed and you can instantly get to an element but in a linked list, you have to start with the head and work your way through until you get to the desired element. The advantage of the linked list is that the insertion and deletion in linked list are easier than array, as the elements in an array are stored in a consecutive location. Also, its memory consumption is efficient as the size of the linked list can grow or shrink according to our requirements.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gukqRKbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619623950414/hFovrOEhj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gukqRKbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619623950414/hFovrOEhj.png" alt="Screenshot (216).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-operations-on-linked-list"&gt;
  &lt;/a&gt;
  Basic Operations on Linked List
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RkhmIm6g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619625266982/xq4I6d54B.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RkhmIm6g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619625266982/xq4I6d54B.png" alt="Screenshot (218).png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Check the implementation of the linked list in JS &lt;a href="https://www.freecodecamp.org/news/implementing-a-linked-list-in-javascript/#:~:text=A%20linked%20list%20is%20a%20linear%20data%20structure%20similar%20to%20an%20array.&amp;amp;text=Rather%20each%20element%20is%20a,be%20any%20valid%20data%20type."&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stack"&gt;
  &lt;/a&gt;
  Stack
&lt;/h2&gt;

&lt;p&gt;Stack is a linear data structure that follows the &lt;strong&gt;LIFO&lt;/strong&gt;(Last In First Out) or &lt;strong&gt;FILO&lt;/strong&gt;(First In Last Out) principle. It contains only one pointer the &lt;strong&gt;top pointer&lt;/strong&gt; that points to the topmost element of the stack. Whenever we add an element to the stack, it is added at the top of the stack and also whenever we delete an element from the stack it is deleted from the top of the stack.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZQVb0uUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619525079548/nmLn6pEVy.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZQVb0uUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619525079548/nmLn6pEVy.jpeg" alt="stack exaamples.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#common-operations-implemented-on-the-stack"&gt;
  &lt;/a&gt;
  Common operations implemented on the stack:-
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9cTWdwcp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619526090516/2P5WskswF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9cTWdwcp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619526090516/2P5WskswF.png" alt="Screenshot (207).png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Check the implementation of stack in JS  &lt;a href="https://betterprogramming.pub/implementing-a-stack-in-javascript-73d1aa0483c1"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#queues"&gt;
  &lt;/a&gt;
  Queues
&lt;/h2&gt;

&lt;p&gt;Queue is a linear data structure that follows the &lt;strong&gt;FIFO&lt;/strong&gt;(First In First Out) principle. It contains two-pointers, 1) &lt;strong&gt;front pointer&lt;/strong&gt;, 2) &lt;strong&gt;rear pointer&lt;/strong&gt;. The front pointer contains the address of the starting element and the rear pointer contains the address of the last element of the queue. The two main methods used for the implementation of the queue are the &lt;strong&gt;enqueue&lt;/strong&gt; and &lt;strong&gt;dequeue&lt;/strong&gt; method. Enqueuing is the process of adding an element in the queue and dequeuing is the process of removing an element from the queue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I2JzCIZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619612564546/wKa7IZvmD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I2JzCIZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619612564546/wKa7IZvmD.png" alt="queue example.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basic-operations"&gt;
  &lt;/a&gt;
  Basic operations:-
&lt;/h3&gt;

&lt;p&gt;A queue is an object that allows the following operations-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e3W8a_Sd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619613224843/jiUo18FFX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e3W8a_Sd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619613224843/jiUo18FFX.png" alt="Screenshot (212).png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Check the implementation of queue in JS  &lt;a href="https://dmitripavlutin.com/javascript-queue/"&gt;here&lt;/a&gt;.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#trees"&gt;
  &lt;/a&gt;
  Trees
&lt;/h2&gt;

&lt;p&gt;The tree is a non-linear hierarchical data structure consists of nodes connected by edges. Each node contains some data and the link of other nodes that can be called children. The topmost node of the tree is known as a &lt;strong&gt;root&lt;/strong&gt; node. Nodes with linked child nodes are called internal nodes while those without child nodes are external nodes(leaf nodes).&lt;br&gt;
There are a number of different types of trees:-&lt;br&gt;&lt;br&gt;
1.) Binary Tree&lt;br&gt; 2.) Binary Search Tree &lt;br&gt;3.) AVL Tree&lt;br&gt;4.) Balanced tree &lt;br&gt;5.) Red black tree&lt;br&gt;6.) 2-3 tree&lt;br&gt;7.) N-ary tree&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Binary Tree&lt;/strong&gt; and &lt;strong&gt;Binary Search Tree&lt;/strong&gt; are typically the most often used.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tree Representation:-&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9CQr3s2m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619673843805/_hGOGZEAT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9CQr3s2m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619673843805/_hGOGZEAT.png" alt="Screenshot (224).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basic-terminology"&gt;
  &lt;/a&gt;
  Basic Terminology
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Node =&amp;gt;&lt;/strong&gt; A &lt;strong&gt;node&lt;/strong&gt; is an entity that contains a data and pointer to its child nodes.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Edge =&amp;gt;&lt;/strong&gt; The connecting link between any two nodes is called as &lt;strong&gt;Edge.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Root =&amp;gt;&lt;/strong&gt; It is the topmost node of a tree.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Parent =&amp;gt;&lt;/strong&gt;  The node which is a predecessor of any node is called as &lt;strong&gt;Parent Node.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Child =&amp;gt;&lt;/strong&gt; The node which is a descendant of any node is called as &lt;strong&gt;Child Node.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Siblings =&amp;gt;&lt;/strong&gt; Nodes that belong to the same parent are called &lt;strong&gt;Siblings.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Leaf =&amp;gt;&lt;/strong&gt; The node which does not have a child is called &lt;strong&gt;Leaf Node.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Internal Nodes =&amp;gt;&lt;/strong&gt; The node which has atleast one child is called &lt;strong&gt;Internal Node.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Degree =&amp;gt;&lt;/strong&gt; The total number of children of a node is called as &lt;strong&gt;DEGREE&lt;/strong&gt; of that Node.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Level =&amp;gt;&lt;/strong&gt; Each step from top to bottom is called the &lt;strong&gt;Level&lt;/strong&gt; of a tree. The root node is said to be at Level 0 and the children of the root node are at Level 1 and the children of the nodes which are at Level 1 will be at Level 2 and so on...&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Height of a Node =&amp;gt;&lt;/strong&gt; The &lt;strong&gt;Height of a Node&lt;/strong&gt; is the number of edges from the node to the deepest leaf (ie. the longest path from the node to a leaf node).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Height of a Tree =&amp;gt;&lt;/strong&gt; The &lt;strong&gt;Height of a Tree&lt;/strong&gt; is the height of the root node or the depth of the deepest node.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Depth of a Node =&amp;gt;&lt;/strong&gt; The &lt;strong&gt;Depth of a Node&lt;/strong&gt; is the number of edges from the root to the node.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Depth of a Tree =&amp;gt;&lt;/strong&gt; The &lt;strong&gt;Depth of a Tree&lt;/strong&gt; is the total number of edges from the root node to a leaf node in the longest path.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Check the implementation of tree in JS  &lt;a href="https://code.tutsplus.com/articles/data-structures-with-javascript-tree--cms-23393"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#graphs"&gt;
  &lt;/a&gt;
  Graphs
&lt;/h2&gt;

&lt;p&gt;A graph is a common data structure consists of a finite set of &lt;strong&gt;nodes&lt;/strong&gt; and &lt;strong&gt;edges.&lt;/strong&gt;  A graph can be seen more like a network. The interconnected objects are represented by points known as vertices, and the links that connect the vertices are called edges. A vertex is just similar to the linked list nodes and the pair (x,y) referred as an edge which means that the &lt;strong&gt;x&lt;/strong&gt; vertex connects to the &lt;strong&gt;y&lt;/strong&gt; vertex.  The graphs can be represented using an &lt;strong&gt;adjacency matrix&lt;/strong&gt; or &lt;strong&gt;adjacency list.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Graphs are the ultimate abstraction for many real-world problems. Some of the best use cases for Graph Data Structures include Social Graph APIs(like LinkedIn, Facebook, etc.), Path Optimization Algorithms(like Google maps), Web Analytics and Scientific Computations.&lt;/p&gt;

&lt;p&gt;There are two common types of graphs:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Undirected Graphs =&amp;gt;&lt;/strong&gt; In an undirected graph, edges are not associated with the directions with them. It means if an edge exists between vertex &lt;strong&gt;X&lt;/strong&gt; and &lt;strong&gt;Y&lt;/strong&gt; then the vertices can be traversed from &lt;strong&gt;Y&lt;/strong&gt; to &lt;strong&gt;X&lt;/strong&gt; as well as &lt;strong&gt;X&lt;/strong&gt; to &lt;strong&gt;Y&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Directed Graphs =&amp;gt;&lt;/strong&gt; In a directed graph, edges are associated with the directions with them. It means if an edge exists between vertex &lt;strong&gt;X&lt;/strong&gt; and &lt;strong&gt;Y&lt;/strong&gt; then the vertices can be traversed from &lt;strong&gt;X&lt;/strong&gt; to &lt;strong&gt;Y&lt;/strong&gt; only. Here, vertex A is called the initial node while vertex B is called the terminal node.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--phbRt-pX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619682270680/KHwQoSq_Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--phbRt-pX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619682270680/KHwQoSq_Q.png" alt="Screenshot (226).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basic-terminology"&gt;
  &lt;/a&gt;
  Basic Terminology
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Path =&amp;gt;&lt;/strong&gt;  Path represents a sequence of edges between the two vertices.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Simple Path =&amp;gt;&lt;/strong&gt; A simple path is a path in which all the nodes of the graph are distinct with an exception0=VN.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Closed Path =&amp;gt;&lt;/strong&gt; A simple path is a path in which the initial node is same as a terminal node. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cycle =&amp;gt;&lt;/strong&gt; A cycle can be defined as the path which has no repeated edges or vertices except the first and last vertices.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Complete Graph =&amp;gt;&lt;/strong&gt; A graph in which every vertex is directly connected to all other vertices.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Connected Graph =&amp;gt;&lt;/strong&gt; A Connected graph has a path between every pair of vertices&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Weighted Graph =&amp;gt;&lt;/strong&gt; A weighted graph associates a value (weight) with every edge in the graph.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Loop =&amp;gt;&lt;/strong&gt; An edge that is associated with similar endpoints can be called a Loop.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Degree =&amp;gt;&lt;/strong&gt; The degree of a vertex in a graph is the total number of edges incident to it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Adjacent Nodes(vertices) =&amp;gt;&lt;/strong&gt; Two vertices are called adjacent if they are connected via same edge.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#basic-operations-on-graph"&gt;
  &lt;/a&gt;
  Basic Operations on Graph
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pceC6j66--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619689452989/44OkV4BZV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pceC6j66--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619689452989/44OkV4BZV.png" alt="Screenshot (228).png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Check the implementation of graph in JS  &lt;a href="https://www.freecodecamp.org/news/8-essential-graph-algorithms-in-javascript/"&gt;here&lt;/a&gt;.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hash-tables"&gt;
  &lt;/a&gt;
  Hash Tables
&lt;/h2&gt;

&lt;p&gt;Hash Table(also called a hash, hash map) is a data structure that stores the data in an associative manner using hashing. &lt;strong&gt;Hashing&lt;/strong&gt; is the technique of mapping keys, values into the hash table by using a hash function.  Here “&lt;strong&gt;key&lt;/strong&gt;” is a searched string and the “&lt;strong&gt;value&lt;/strong&gt;” is the data paired with that key. By using a good hash function, hashing can work well. In the hash table, the insertion and search operations are very fast irrespective of the size of the data. Hash tables are built using arrays. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A0x8BqVS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619693189772/3q-I1nCBt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A0x8BqVS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619693189772/3q-I1nCBt.png" alt="Screenshot (230).png"&gt;&lt;/a&gt;&lt;br&gt;
Real-life examples of the hash table:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In school/universities, each student is assigned a unique roll number that can be used to retrieve information about them.&lt;/li&gt;
&lt;li&gt;In libraries, each book is assigned a unique number that can be used to determine information about the book,&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#basic-operations"&gt;
  &lt;/a&gt;
  Basic Operations
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Insert:-&lt;/strong&gt; inserts an element in a hash table.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Delete:-&lt;/strong&gt; Deletes an element from a hash table.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Search:-&lt;/strong&gt; Searches an element in a hash table.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Check the implementation of hash tables in JS  &lt;a href="https://www.educative.io/blog/data-strucutres-hash-table-javascript"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts-on-data-structures"&gt;
  &lt;/a&gt;
  Final Thoughts on Data Structures
&lt;/h2&gt;

&lt;p&gt;For many developers and programmers, data structures are most important for cracking Javascript coding interviews. Each data structure has a number of different applications and uses. So, having a basic understanding of data structures is a critical first step to becoming a good programmer.&lt;/p&gt;

&lt;p&gt;In this blog, we have just scratched the surface of data structures in JavaScript. If you enjoyed learning and find it useful please do like and share so that, it reaches others as well 🤝&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading 😃
&lt;/h3&gt;

&lt;p&gt;I would ❤ to connect with you at  &lt;a href="https://twitter.com/nehasoni__"&gt;Twitter&lt;/a&gt;  |  &lt;a href="https://www.linkedin.com/in/neha-soni-70a6231b1/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/nehasoni05"&gt;GitHub&lt;/a&gt;&lt;br&gt;
Let me know in the comment section if you have any doubt or feedback.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/javascript-data-structures"&gt;https://www.educative.io/blog/javascript-data-structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.devmountain.com/what-you-should-know-about-data-structures/"&gt;https://blog.devmountain.com/what-you-should-know-about-data-structures/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/siliconwat/data-structures-in-javascript-1b9aed0ea17c"&gt;https://medium.com/siliconwat/data-structures-in-javascript-1b9aed0ea17c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.bitsrc.io/data-structures-you-should-know-as-a-javascript-developer-9a35eb3b319c"&gt;https://blog.bitsrc.io/data-structures-you-should-know-as-a-javascript-developer-9a35eb3b319c&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out the  &lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt; JavaScript Algorithms and Data Structures &lt;/a&gt; repository on GitHub. It has a collection of classic algorithms and data structures implemented in ES6 JavaScript with explanations and links to further readings and YouTube videos.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>datastructures</category>
    </item>
    <item>
      <title>HASH.JS | A JavaScript library ( easy to use)</title>
      <author>Raghav Yadav</author>
      <pubDate>Wed, 12 May 2021 04:02:31 +0000</pubDate>
      <link>https://dev.to/raghav9official/hash-js-a-javascript-library-easy-to-use-2f6p</link>
      <guid>https://dev.to/raghav9official/hash-js-a-javascript-library-easy-to-use-2f6p</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FZDdjarD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://netopa.github.io/hash.js/logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FZDdjarD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://netopa.github.io/hash.js/logo.png"&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#hashjs"&gt;
  &lt;/a&gt;
  &lt;a href="https://netopa.github.io/hash.js"&gt;hash.js&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Link to the file&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://netopa.github.io/hash.js/hashtag_1.0.1.js"&gt;https://netopa.github.io/hash.js/hashtag_1.0.1.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
size: 1/6&lt;sup&gt;th&lt;/sup&gt; of jQuery!&lt;br&gt;&lt;br&gt;
(when completed)&lt;br&gt;
&lt;br&gt;&lt;br&gt;
how to use&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Just use it like jQuery :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;hide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animationName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.class&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animationName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;by tag&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: you must first enable animation by&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;enableAnime&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which enables it for all element on the page&lt;br&gt;&lt;br&gt;
Then enable it for an element&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.body&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jackInTheBox&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1s&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1s&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//animation name, duration ,delay&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;We use animate.css engine for animating elements so the list could be a whole lot familiar...&lt;br&gt;
&lt;br&gt;&lt;br&gt;
list of animation inclues : &lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Attention seekers:

bounce
flash
pulse
rubberBand
shakeX
shakeY
headShake
swing
tada
wobble
jello
heartBeat

Back entrances:

backInDown
backInLeft
backInRight
backInUp
Back exits
backOutDown
backOutLeft
backOutRight
backOutUp

Back exits:

backOutDown
backOutLeft
backOutRight
backOutUp
Bouncing entrances
bounceIn
bounceInDown
bounceInLeft
bounceInRight
bounceInUp

Bouncing exits:

bounceOut
bounceOutDown
bounceOutLeft
bounceOutRight
bounceOutUp

Fading entrances:

fadeIn
fadeInDown
fadeInDownBig
fadeInLeft
fadeInLeftBig
fadeInRight
fadeInRightBig
fadeInUp
fadeInUpBig
fadeInTopLeft
fadeInTopRight
fadeInBottomLeft
fadeInBottomRight

Fading exit:

fadeOut
fadeOutDown
fadeOutDownBig
fadeOutLeft
fadeOutLeftBig
fadeOutRight
fadeOutRightBig
fadeOutUp
fadeOutUpBig
fadeOutTopLeft
fadeOutTopRight
fadeOutBottomRight
fadeOutBottomLeft

Flippers:

flip
flipInX
flipInY
flipOutX
flipOutY

Lightspeed:

lightSpeedInRight
lightSpeedInLeft
lightSpeedOutRight
lightSpeedOutLeft

Rotating entrances:

rotateIn
rotateInDownLeft
rotateInDownRight
rotateInUpLeft
rotateInUpRight

Rotating exits:

rotateOut
rotateOutDownLeft
rotateOutDownRight
rotateOutUpLeft
rotateOutUpRight

Specials:

hinge
jackInTheBox
rollIn
rollOut

Zooming entrances:

zoomIn
zoomInDown
zoomInLeft
zoomInRight
zoomInUp

Zooming exits:

zoomOut
zoomOutDown
zoomOutLeft
zoomOutRight
zoomOutUp

Sliding entrances:

slideInDown
slideInLeft
slideInRight
slideInUp

Sliding exits:

slideOutDown
slideOutLeft
slideOutRight
slideOutUp

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adding an event listener:&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.body&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
   &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;clicked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Append text:&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;someText&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Prepend text: &lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;someText&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Set or get attributes:&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// returns body&lt;/span&gt;
&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// sets I'd to body&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change the style of an element:&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;background&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//changes the css to background: black;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ajax: change the content of an element with remote file content:&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://url-to-file.com/TXT.txt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;get&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//the second one is the method&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Set a cookie 🍪:&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;setCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hashtag&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;session&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//key, value, expires, path&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Get a cookie by name:&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//returns "hashtag"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add an element:&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addElm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;element name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id of elm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// You can use the set attribute function to add attributes or to change text into the element&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Configure local storage:&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// action list:&lt;/span&gt;
&lt;span class="c1"&gt;//     "clear" clears the local storage&lt;/span&gt;
&lt;span class="c1"&gt;//     "get".  Gets the iten with specified key&lt;/span&gt;
&lt;span class="c1"&gt;//     "set"   set the key with the respective value&lt;/span&gt;
&lt;span class="c1"&gt;//     "remove" remove the item with the specified key&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Toogle hide and show:&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.element&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toogle&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More features comming soon!!!&lt;/p&gt;

&lt;p&gt;If you liked this article don't forget to hit a like.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>library</category>
      <category>showdev</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
