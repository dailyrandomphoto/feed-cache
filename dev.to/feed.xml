<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Getting started with Node JS</title>
      <author>Pooja Gupta</author>
      <pubDate>Tue, 16 Mar 2021 15:27:13 +0000</pubDate>
      <link>https://dev.to/poojagupta/getting-started-with-node-js-5f4l</link>
      <guid>https://dev.to/poojagupta/getting-started-with-node-js-5f4l</guid>
      <description>&lt;p&gt;Hey folks! I just started learning node JS and thought to share with all of you who are new to node JS and wanted to learn node JS.&lt;br&gt;
so we are gonna see little insights of node JS and after that we will write our first code in node JS.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#so-what-is-node-js" class="anchor"&gt;
  &lt;/a&gt;
  So What is Node JS?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Node.js is a cross-platform JavaScript runtime environment that allows developers to build server-side and network applications with JavaScript.&lt;/li&gt;
&lt;li&gt;NPM is a package manager which comes bundled with node JS which helps in downloading packages into a node_modules folder.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can use npm init command to initialize your project which will ask basic information about your project and creates one file package.json which will have all information you provide.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;So package.json file is face of your project which will contain all the information about your project as well as all those dependencies needed for your project with their version name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Their are a lot of frameworks available which will ease our work while writing our code like express, sails, Hapi, Koa etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;But first let we use simple Node JS without any framework to understand it in depth.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In your folder create index.js and do npm init after that write this code in index.js file and do node index.js from the command line from the same path where your index file exists.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const http = require("http");
const port = 8000;

function requestHandler(request, response) {
  console.log("Request received.");
  response.writeHead(200, {"Content-Type": "text/plain"});
  response.write("Welcome to node.js World");
  response.end();
}

const server = http.createServer(requestHandler);
server.listen(port, function(err){
    if(err){
        console.log(err);
        return;
    }

    console.log("Server is up and running:", port);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In this case, on each and every url, you found ‚Äúwelcome to node.js world‚Äù. Now we will send different response, according to requested url.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const http = require("http");
const port = 8000;

function requestHandler(req, res) {
    if (req.url == "/") {
        res.writeHead(200, { "Content-Type": "text/html" });
        res.end("Welcome to the homepage!");
    }

    // About page
    else if (req.url == "/contact") {
        res.writeHead(200, { "Content-Type": "text/html" });
        res.end("Welcome to the contact page!");
    }

    // 404'd!
    else {
        res.writeHead(404, { "Content-Type": "text/plain" });
        res.end("404 error! File not found.");
    }
}

const server = http.createServer(requestHandler);
server.listen(port, function(err){
    if(err){
        console.log(err);
        return;
    }

    console.log("Server is up and running:", port);
});
console.log("Server has started.");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we track requested url and respectively show that content on that url, and handle 404 condition in all other cases. &lt;br&gt;
I hope this article helps you getting started with node JS, don't forget to tell me in comment section how much you liked this post and in case any query reach me out !&lt;br&gt;
Happy Coding!&lt;/p&gt;

</description>
      <category>node</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to Add Tailwind CSS to Your Angular Application 2021</title>
      <author>Godwin Daniel</author>
      <pubDate>Tue, 16 Mar 2021 14:47:52 +0000</pubDate>
      <link>https://dev.to/godwindaniel10/how-to-add-tailwind-css-to-your-angular-application-2021-32gj</link>
      <guid>https://dev.to/godwindaniel10/how-to-add-tailwind-css-to-your-angular-application-2021-32gj</guid>
      <description>&lt;p&gt;According to the official documentation, Tailwind CSS is a utility-first CSS framework for rapidly building custom user interfaces. I like to think of it as a cool way to write inline styling and achieve an awesome interface without writing a single line of your own CSS.   Angular, on the other hand, is a platform that allows you to build high-quality enterprise applications. Combine Angular with Tailwind CSS and you have a perfect stack for building top-notch web applications.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In this article, I will walk you through how you can add &lt;br&gt;
       Tailwind CSS to your Angular application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;üö©  This article assumes that you're using the Angular CLI &lt;br&gt;
       version 11.2.0 or higher.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#1-generate-a-new-angular-application" class="anchor"&gt;
  &lt;/a&gt;
  1. Generate a new Angular application
&lt;/h1&gt;

&lt;p&gt;Let's start by creating a new Angular project using the ng new command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   ng new my-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the CLI asks you "which stylesheet format would you like to use?" choose CSS because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;With Tailwind, you don't need a CSS preprocessor like Sass. &lt;br&gt;
 You'll rarely need to write custom CSS anyway.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your CSS will compile much faster because it won't need to &lt;br&gt;
 pass through multiple compilation pipelines.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#2-install-the-needed-tailwind-dependencies" class="anchor"&gt;
  &lt;/a&gt;
  2. Install the needed tailwind dependencies
&lt;/h1&gt;

&lt;p&gt;Now, install the required dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   ng add @ngneat/tailwind
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;follow the instructions below:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   ? Would you like to enable dark mode?

     none
     class
     media
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;select &lt;strong&gt;class&lt;/strong&gt;  then click (enter)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   ? Would you like to use tailwind directives and functions in 
     component styles? (might increase build time) (y/N) y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   ? What @tailwindcss plugins do you want to enable?

     ‚≠ï aspect-ratio
     ‚≠ï forms ‚úî
     ‚≠ï Line-clamp
     ‚≠ï typography ‚úî
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;select &lt;strong&gt;forms&lt;/strong&gt; &amp;amp; &lt;strong&gt;typography&lt;/strong&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The command above install all needed packages and update the &lt;br&gt;
  project files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#3-enjoy" class="anchor"&gt;
  &lt;/a&gt;
  3. Enjoy
&lt;/h1&gt;

&lt;p&gt;You can now start your Angular application and enjoy using Tailwind:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   ng serve --open
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;code&gt;If you enjoyed this article, follow [@CodeBase__](https://twitter.com/CodeBase__) on Twitter for more content like this.&lt;/code&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>angular</category>
      <category>tailwindcss</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Rails validations: unique within a certain scope</title>
      <author>matt swanson</author>
      <pubDate>Tue, 16 Mar 2021 13:00:00 +0000</pubDate>
      <link>https://dev.to/swanson/rails-validations-unique-within-a-certain-scope-41p2</link>
      <guid>https://dev.to/swanson/rails-validations-unique-within-a-certain-scope-41p2</guid>
      <description>&lt;p&gt;It‚Äôs a great idea to make your database and application validations match. If you have &lt;code&gt;validates :name, presence: true&lt;/code&gt; in your model, you should pair it with a &lt;code&gt;not null&lt;/code&gt; database constraint. Unique validations should be paired with a &lt;code&gt;UNIQUE&lt;/code&gt; database index.&lt;/p&gt;

&lt;p&gt;In real-world applications, you often have more complicated validations, but you should continue this practice whenever you can.&lt;/p&gt;

&lt;p&gt;Something I encounter regularly is the need to have records that are unique, but within a certain scope.&lt;/p&gt;

&lt;p&gt;Imagine you were building a typical project management tool. You might want &lt;code&gt;Project&lt;/code&gt;s to have a unique name so they can be distinguished within your UI ‚Äì but you don‚Äôt want the name to be globally unique. If I make a project called ‚ÄúOnboarding‚Äù, another customer should not be restricted from using that name as well.&lt;/p&gt;

&lt;p&gt;Luckily, Rails has got us covered with a handy feature called &lt;strong&gt;validation scopes&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;scope&lt;/code&gt; option to the Rails uniqueness validation rule allows us to specify additional columns to consider when checking for uniqueness.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Project&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:account&lt;/span&gt;

  &lt;span class="n"&gt;has_many&lt;/span&gt; &lt;span class="ss"&gt;:tasks&lt;/span&gt;

  &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;presence: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;uniqueness: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;scope: :account_id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This rule says that ‚Äúthe name of this project must unique, within the scope of this account‚Äù. In other words, the combination of a &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;account_id&lt;/code&gt; must be unique ‚Äì but you can have projects with the same name in different accounts.&lt;/p&gt;

&lt;p&gt;As we discussed earlier, you really want to back-up your application level validations with database constraints.&lt;/p&gt;

&lt;p&gt;In this case, you‚Äôll want to do a multiple column index. You can do this in a normal Rails migration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CreateProject&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;6.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;
    &lt;span class="n"&gt;create_table&lt;/span&gt; &lt;span class="ss"&gt;:projects&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;add_index&lt;/span&gt; &lt;span class="ss"&gt;:projects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:account_id&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;unique: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#options" class="anchor"&gt;
  &lt;/a&gt;
  Options
&lt;/h2&gt;

&lt;p&gt;You can pass multiple columns to &lt;code&gt;scope&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you were building a dining app and wanted to enforce that a guest could only have one reservation at a restaurant per day.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Reservation&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:guest&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:restaurant&lt;/span&gt;

  &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:guest_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;uniqueness: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;scope: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:restaurant_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:reservation_date&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may wish to change the message since the defaults error message will be fairly spartan: ‚Äú{field} has already been taken‚Äù&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:guest_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;uniqueness: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;scope: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:restaurant_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:reservation_date&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="ss"&gt;message: &lt;/span&gt;&lt;span class="s2"&gt;"Only one reservation per guest per day is permitted"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: In PostgreSQL, the default limit for index names is 63 characters so you may find yourself needing to change the index name if your model or column names are longer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;add_index&lt;/span&gt; &lt;span class="ss"&gt;:reservations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:guest_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:restaurant_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:reservation_date&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="ss"&gt;unique: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"idx_reserveration_guest_date_uniq"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#additional-resources" class="anchor"&gt;
  &lt;/a&gt;
  Additional Resources
&lt;/h2&gt;

&lt;p&gt;Rails API: &lt;a href="https://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_uniqueness_of"&gt;Uniqueness Validations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PostgreSQL Docs: &lt;a href="https://www.postgresql.org/docs/current/ddl-constraints.html"&gt;Postgres Constraints&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MySql Docs: &lt;a href="https://dev.mysql.com/doc/refman/8.0/en/multiple-column-indexes.html"&gt;Multi-column Indexes&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://twitter.com/_swanson"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0llgMsYy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://boringrails.com/images/twitter-banner.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Object Design Style Guide Summary</title>
      <author>MiguelDevelopez</author>
      <pubDate>Tue, 16 Mar 2021 10:55:29 +0000</pubDate>
      <link>https://dev.to/migueldevelopez/object-design-style-guide-summary-42bl</link>
      <guid>https://dev.to/migueldevelopez/object-design-style-guide-summary-42bl</guid>
      <description>&lt;h1&gt;
  &lt;a href="#how-you-should-create-and-use-your-objects" class="anchor"&gt;
  &lt;/a&gt;
  How you should create and use your objects
&lt;/h1&gt;

&lt;p&gt;I‚Äôm currently reading an interesting book called Object Design Style Guide, wrote by Matthias Noback, about how to create objects as best as possible, so I decided to bring it up here and show you some tips and directives I found more interesting. Of course, I recommend you read the whole book if you want to go deep into this topic.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DVcNnh58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m821vcaguihcytxktwzx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DVcNnh58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m821vcaguihcytxktwzx.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1%C2%BA-introduction-to-some-oop-concepts" class="anchor"&gt;
  &lt;/a&gt;
  1¬∫ Introduction to some OOP concepts
&lt;/h2&gt;

&lt;p&gt;In this book, inheritance plays a small role, even though it‚Äôs supposed to be one of the pillars of object-oriented programming. In practice, using inheritance mostly leads to a confusing design.&lt;br&gt;
In this book, we‚Äôll use inheritance mainly in two situations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When defining interfaces for dependencies &lt;em&gt;(dependency injection and inversion)&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;When defining a hierarchy of objects, such as when defining custom exceptions that extend from built-in exception classes.
In most other cases we‚Äôd want to actively prevent developers to extend from our classes. You can do so by adding the final keyword in front of the class. It will be more explained later.
The &lt;strong&gt;composition is highly recommended&lt;/strong&gt; over the inheritance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A little space to the test about that the basic structure of the unit test is:&lt;br&gt;
The basic structure of each test method is Arrange - Act - Assert:&lt;br&gt;
1 &lt;strong&gt;Arrange&lt;/strong&gt;: Bring the object that we‚Äôre testing (also known as the SUT, or Subject Under Test) into a certain known state.&lt;br&gt;
2 &lt;strong&gt;Act&lt;/strong&gt;: Call one of its methods.&lt;br&gt;
3 &lt;strong&gt;Assert&lt;/strong&gt;: Make some assertions about the end state.&lt;/p&gt;

&lt;p&gt;Shit's getting real. &lt;strong&gt;There are 2 types of objects:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Service objects that either perform a task or return a piece of information. Objects of the first type will be created once, and then be used any number of times, but nothing can be changed about them. They have a very simple lifecycle. Once they‚Äôve been created, they can run forever, like &lt;strong&gt;little machines with specific tasks&lt;/strong&gt;. These kinds of services are &lt;strong&gt;immutables&lt;/strong&gt;.
Service objects are do-ers, and they often have names indicating what they do: renderer, calculator, repository, dispatcher, etc. &lt;/li&gt;
&lt;li&gt;Objects that will hold some data, and optionally expose some behavior for manipulating or retrieving that data, this kind is used by the first type to complete their tasks. These objects are the materials that the services work with. There are two subtypes: value objects and models/entities, but don't get ahead of ourselves.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#2%C2%BA-focus-on-services" class="anchor"&gt;
  &lt;/a&gt;
  2¬∫ Focus on Services
&lt;/h2&gt;

&lt;p&gt;There is a pile of suggestions about how a service should be, I‚Äôll make the list hiper-summarizing them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To create a service use dependency injection to make the service ready for use immediately after instantiation and test double. So the dependencies should be declared &lt;em&gt;explicitly&lt;/em&gt;.
Here is an example of this, you can see how the parameter $appConfig is only used to get the directory of the cache so‚Ä¶ Instead of injecting the whole configuration object, make sure you only inject the values that the service actually needs.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Logger&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FileLogger&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;Logger&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;Formatter&lt;/span&gt; &lt;span class="nv"&gt;$formatter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Formatter is a dependency of FileLogger&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__&lt;/span&gt; &lt;span class="n"&gt;construct&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Formatter&lt;/span&gt; &lt;span class="nv"&gt;$formatter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;formatter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$formatter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;formattedMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;formatter&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// ‚Ä¶.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;When possible you should keep together all the related configuration values that belong together. Service shouldn‚Äôt get the entire global configuration object injected, only the values that it needs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;WRONG WAY&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MySQLTableGateway&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$database&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;GOOD WAY&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MySQLTableGateway&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;ConnectionConfiguration&lt;/span&gt; &lt;span class="nv"&gt;$connectionConfiguration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// $table is the name of the table, It isn‚Äôt necessary to make the connection &lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Avoid service locators (a service from which you can retrieve other services) and inject the dependencies that you need explicitly.&lt;/li&gt;
&lt;li&gt;All the constructor arguments should be required because the code will be unnecessarily complicated. If you have the temptation to put it as an optional dependency you can use the &lt;a href="https://refactoring.guru/es/introduce-null-object"&gt;null object&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Services should be &lt;strong&gt;immutable&lt;/strong&gt;, that is, impossible to change after they have been fully instantiated because the behavior could be so unpredictable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So... avoid something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EventDispatcher&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$listeners&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;addListener&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;callable&lt;/span&gt; &lt;span class="nv"&gt;$listener&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;listeners&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;][]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$listener&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Only assign properties or throw exceptions because of some validation error in the constructor.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FileLogger&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;Logger&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$logFilePath&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$logFilePath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// $logFilePath should be properly set up, so we just need a safety check&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nb"&gt;is_writable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$logFilePath&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;InvalidArgumentException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;Log&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="err"&gt;‚Äô&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$logFilePath&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="err"&gt;‚Äò&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;writable&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;logFilePath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$logFilePath&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Ideally, create objects to avoid the hidden dependencies, for example, the function json_encode() or a class from PHP like DateTime&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;WRONG WAY&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ResponseFactory&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;createApiResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;Response&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// json_encode is a hidden dependency&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Response&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nb"&gt;json_encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="no"&gt;JSON_THROW_ON_ERROR&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="no"&gt;JSON_FORCE_OBJECT&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Content-Type'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'application/json'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;GOOD WAY&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JsonEncoder&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;throws&lt;/span&gt; &lt;span class="nc"&gt;RuntimeException&lt;/span&gt;
    &lt;span class="o"&gt;*/&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;encode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;json_encode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="no"&gt;JSON_THROW_ON_ERROR&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="no"&gt;JSON_FORCE_OBJECT&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// we can throw our own exception, with more specific info&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;RuntimeException&lt;/span&gt; &lt;span class="n"&gt;previous&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;RuntimeException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s1"&gt;'Failed to encode data: '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;var_export&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;previous&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ResponseFactory&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;JsonEncoder&lt;/span&gt; &lt;span class="nv"&gt;$jsonEncoder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// JsonEncoder can be injected as a dependency&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;JsonEncoder&lt;/span&gt; &lt;span class="nv"&gt;$jsonEncoder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;jsonEncoder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$jsonEncoder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;createApiResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;Response&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Response&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;jsonEncoder&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you can do the same with the date() and big core utilities of your language, and your application layer will be so decoupled.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3%C2%BA-other-objects" class="anchor"&gt;
  &lt;/a&gt;
  3¬∫ other objects
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#31-value-object-and-modelentity" class="anchor"&gt;
  &lt;/a&gt;
  3.1 value object and model/entity
&lt;/h3&gt;

&lt;p&gt;The main suggestions are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Validate the objects in the constructor, it will assure you that you only have valid objects in your application, every object will be what it was intended to be. You should throw exceptions in the constructor in case the data is not valid. The book suggests avoiding using custom exceptions for invalid argument exceptions, for this kind of RuntimeExceptions indicates that‚Ä¶ more about it below.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Coordinates&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;_construct&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nv"&gt;$latitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nv"&gt;$longitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$latitude&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;$latitude&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;InvalidArgumentException&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s1"&gt;'Latitude should be between -90 and 90'&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;latitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$latitude&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Don't use property fillers, later we‚Äôll see where you can use them with an example.&lt;/li&gt;
&lt;li&gt;Entity/model should be identifiable with a unique id, value objects don‚Äôt because they only wrap one or more primitive-type values.&lt;/li&gt;
&lt;li&gt;To add more semantic to a constructor the named constructors appear, those are static methods with domain-specific names that allow your code to have a better name than the typical new class(). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Standard way&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$salesOrder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;SalesOrder&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Better way&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$salesOrder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;SalesOrder&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;place&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can put the __construct method as private to avoid using it and call the constructor inside the place() method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DecimalValue&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;precision&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;  &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$precision&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nc"&gt;Assertion&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;greaterOrEqualThan&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$precision&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;precision&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$precision&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;fromInt&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$precision&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;DecimalValue&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;DecimalValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$precision&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;fromFloat&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$precision&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;DecimalValue&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;DecimalValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;precision&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
            &lt;span class="nv"&gt;$precision&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;One of the best points of the value objects is that, if you validate in their constructor, when you see a value object you will know that it contains validated information and you will not have to validate this information in other points of the code.&lt;/li&gt;
&lt;li&gt;Test the behavior of an object and the constructor in the way it will fail, don't create a test just to check if the values are correct.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;it_can_be_constructed&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$coordinates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Coordinates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;60.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;100.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nf"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;60.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$coordinates&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="nf"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;100.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$coordinates&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In summary, a value object does not only represent domain concepts. They can occur anywhere in the application. A value object is an immutable object that wraps primitive-type values.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#32-dto-data-transfer-object" class="anchor"&gt;
  &lt;/a&gt;
  3.2 DTO (Data transfer object)
&lt;/h2&gt;

&lt;p&gt;The rules of 3.1 don't fit well with this type of object, the DTO. While in the value object and model we want consistency and validity of the data, in the DTO we just want (nobody expected it by the name) to transfer data from one point to another.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A DTO can be created using a regular constructor. &lt;/li&gt;
&lt;li&gt;Its properties can be set one by one.&lt;/li&gt;
&lt;li&gt;All of its properties are exposed, so make them public and access them directly without getters.&lt;/li&gt;
&lt;li&gt;Its properties contain only primitive-type values.&lt;/li&gt;
&lt;li&gt;Properties can optionally contain other DTOs or simple arrays of DTOs.&lt;/li&gt;
&lt;li&gt;You can use property fillers when needed.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ScheduleMeetup&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;fromFormData&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$formData&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;ScheduleMeetup&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$scheduleMeetup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ScheduleMeetupl&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$scheduleMeetup&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$formData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nv"&gt;$scheduleMeetup&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$formData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'date'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$scheduleMeetup&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, the objects have methods where they contain the behavior, there are two kinds of methods, queries to retrieve information and commands to perform a task, but both of them could be designed with the same ‚Äòtemplate‚Äô, that is:&lt;br&gt;
1¬∫ Checking parameters, throwing errors if there is something wrong.&lt;br&gt;
2¬∫ Do what the method has to do, throwing errors if necessary.&lt;br&gt;
3¬∫ Check postcondition checks. This won‚Äôt be necessary if you have good tests, but for example, if you are working with legacy code it could be good for safety checks.&lt;br&gt;
4¬∫ Returns if is a query method.&lt;/p&gt;

&lt;p&gt;You‚Äôve seen that the exceptions are a good part of a code, some cases where using a custom exception is very useful:&lt;br&gt;
1¬∫ If you want to catch a specific exception type higher up&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// possibly throws ‚ÄòSomeSpecific‚Äô exception&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;SomeSpecific&lt;/span&gt; &lt;span class="nv"&gt;$exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ‚Ä¶&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2¬∫ If there are multiple ways to instantiate a single type of exception&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CouldNotDeliverOrder&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;RuntimeException&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;itWasAlreadyDelivered&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;CouldNotDeliverOrder&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;insufficientQuantitiesInStock&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;CouldNotDeliverOrder&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3¬∫ If you want to use named constructors for instantiating the exception&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CouldNotFindProduct&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;RuntimeException&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;withId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;ProductId&lt;/span&gt; &lt;span class="nv"&gt;$productld&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;CouldNotFindProduct&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CouldNotFindProduct&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;Could&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="no"&gt;ID&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$productld&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nc"&gt;CouldNotFindProduct&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;withId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you don‚Äôt have to put ‚ÄòException‚Äô in the name of the exception class, instead, use explicit names like InvalidEmailAddress or CouldNotFindProduct.&lt;/p&gt;

&lt;p&gt;And &lt;em&gt;that‚Äôs all folks&lt;/em&gt;, there are soooo many more examples in the book, so I encourage you to take a look at it. &lt;strong&gt;If you want the second part of the book, let me know in the comments&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Sources and more info&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://amzn.to/38wURcK"&gt;The book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://matthiasnoback.nl/"&gt;Blog of the book author&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://verraes.net/2014/06/named-constructors-in-php/"&gt;Named constructors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/49002/prefer-composition-over-inheritance?page=1&amp;amp;tab=votes#tab-top"&gt;Composition over inheritance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>php</category>
      <category>beginners</category>
      <category>java</category>
      <category>programming</category>
    </item>
    <item>
      <title>Underrated Articles on Dev.to from Last Week</title>
      <author>Manpreet virk</author>
      <pubDate>Tue, 16 Mar 2021 10:42:07 +0000</pubDate>
      <link>https://dev.to/xenoxdev/underrated-articles-on-dev-to-from-last-week-5a13</link>
      <guid>https://dev.to/xenoxdev/underrated-articles-on-dev-to-from-last-week-5a13</guid>
      <description>&lt;p&gt;Hello! I'm back with another installment of underrated articles from last week! &lt;/p&gt;

&lt;p&gt;Let's check them out üî• -&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-vs-code-extensions" class="anchor"&gt;
  &lt;/a&gt;
  1. VS Code Extensions
&lt;/h2&gt;

&lt;p&gt;VS Code is popular because we can add additional features by adding extensions. In this article, Sparsh mentions 10 extensions on VS Code that will immediately help you in your development journey üíØ.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/akathecoder" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4KjpUi9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--eKdIghSN--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/435183/1b03b8fc-76cb-4542-8f76-2b6cc1a53814.jpg" alt="akathecoder image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/akathecoder/top-10-vs-code-extensions-to-level-up-your-development-game-18i" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Top 10 VS Code Extensions to level up your development game&lt;/h2&gt;
      &lt;h3&gt;Sparsh Agarwal „Éª Mar 11 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#vscode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#extensions&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#2-list-of-resources" class="anchor"&gt;
  &lt;/a&gt;
  2. List of Resources
&lt;/h2&gt;

&lt;p&gt;Lary recommended some YouTube channels that will guide you through each step of the web development journey. Beginners must check this article out üíõ.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/larymak" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YIX4f4qJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8stqw_Sm--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/495100/39cbe2a8-7358-45a1-bfad-83f6fb4b7e80.jpeg" alt="larymak image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/larymak/useful-resources-for-programmers-and-web-developers-512c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Useful Resources for Programmers and Web Developers&lt;/h2&gt;
      &lt;h3&gt;lary mak „Éª Mar 12 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#3-the-secret-to-skyrocket-your-career" class="anchor"&gt;
  &lt;/a&gt;
  3. The secret to skyrocket your Career
&lt;/h2&gt;

&lt;p&gt;In this post, Arctype team demonstrates that while working as a team, developers should cultivate a mindset that includes a business perspective, and think like a PM. &lt;br&gt;
He further noted things they learned moving from software engineering to product management.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/rettx" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CW9truaf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--sJy9DBTG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/573089/c66c6aa6-b080-474e-ab8b-c49175222c5a.PNG" alt="rettx image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/arctype/the-secret-to-growing-your-career-is-not-being-a-better-engineer-3m0h" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The Secret to Growing Your Career is Not Being a Better Engineer&lt;/h2&gt;
      &lt;h3&gt;Arctype Team „Éª Mar 10 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#startup&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#4-software-job-in-6-months" class="anchor"&gt;
  &lt;/a&gt;
  4. Software Job in 6 Months
&lt;/h2&gt;

&lt;p&gt;A simple roadmap for becoming a web application developer is penned down by Phillip in this article. Resources are also shared at each step.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/ninan_phillip" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NvQrJMLF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--K6psAe3O--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/457375/cc433bf0-64b1-4bf5-9659-80a8496f49de.png" alt="ninan_phillip image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ninan_phillip/land-a-software-job-in-6-months-8c9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Land a Software Job in 6 Months!&lt;/h2&gt;
      &lt;h3&gt;Phillip Ninan „Éª Mar 11 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#typescript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#5-create-registration-app-with-animation-using-the-mern-stack" class="anchor"&gt;
  &lt;/a&gt;
  5. Create Registration App With Animation Using the MERN Stack
&lt;/h2&gt;

&lt;p&gt;Yogesh wrote the process of building an amazing Multi Step Registration form with smooth animated transitions using MERN(MongoDB, Express, React, Node.js) stack.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/myogeshchavan97" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--742238ti--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--oy7iRf6a--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/361592/385c82bb-b96c-4cd6-83a3-ffea25be1d8d.jpeg" alt="myogeshchavan97 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/myogeshchavan97/how-to-create-a-full-stack-multi-step-registration-app-with-nice-animations-using-the-mern-stack-12gp" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Create A Full Stack Multi-Step Registration App with nice animations using the MERN Stack &lt;/h2&gt;
      &lt;h3&gt;Yogesh Chavan „Éª Mar 11 „Éª 43 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#mongodb&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's all folks! These were our personal favorite underrated posts from last week, and we hope you liked them. Tell us about your favorite posts that went underrated in the comments below!&lt;/em&gt; ‚ù§Ô∏è&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Tips on Preparing a Great Developer Resume</title>
      <author>Linda</author>
      <pubDate>Tue, 16 Mar 2021 10:08:06 +0000</pubDate>
      <link>https://dev.to/lindaojo/tips-on-preparing-a-great-developer-resume-ag8</link>
      <guid>https://dev.to/lindaojo/tips-on-preparing-a-great-developer-resume-ag8</guid>
      <description>&lt;p&gt;If you are just starting out on your job search and have been wondering about how to prepare a great resume, then you will love these tips! Remember, the goal of your resume is to sell yourself enough to get a meeting with a recruiter.&lt;/p&gt;

&lt;h3&gt;Tailor your resume to the role&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yhFS7HGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1615839972/customise_k8qzvv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yhFS7HGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1615839972/customise_k8qzvv.jpg" alt="'Chef adding toppings to Pasta'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Research the role you are applying for and focus all your points around the criteria listed.&lt;/p&gt;

&lt;p&gt;Different companies have different needs. Tailoring your resume to reflect that you meet the required needs not only improves your chance of getting a callback but also shows you have a genuine interest in working at that company.&lt;/p&gt;

&lt;p&gt;You should use the job description as a guide by mirroring keywords and requirements in your resume.&lt;/p&gt;

&lt;p&gt;For instance, if the major tool for the available role is mentioned, you should reference projects built with that tool.&lt;/p&gt;

&lt;h3&gt;Optimise for readability&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---4UTgkA1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1615839910/readable_cgqtzo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---4UTgkA1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1615839910/readable_cgqtzo.jpg" alt="'Blurry text with glasses'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On average, most single-page resumes would be scanned through within a minute. It's important to ensure that one can read through your resume within a minute with ease and leave with a good understanding of who you are.&lt;/p&gt;

&lt;p&gt;A great way to improve readability is by having a simple layout that lets you communicate effectively.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.canva.com"&gt;Canva&lt;/a&gt; has great templates which you can use to create beautiful resumes.&lt;/p&gt;

&lt;h3&gt;Relevant things first, Relevant things only&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xPNMmeOo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1615840193/relevance_kefotj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xPNMmeOo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1615840193/relevance_kefotj.jpg" alt="'Relevance'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You have the task of making a good impression within a short period of time. Every point should signal to the recruiter that you are a good fit for the team.&lt;/p&gt;

&lt;p&gt;You should only write things on your resume that would improve your chances by sharing useful information with the recruiter. You should not write skills on your resume that are not relevant to the present role you are applying to.&lt;/p&gt;

&lt;p&gt;You can have multiple resumes that contain different sets of skills if you are applying to different roles at once. For instance, you should not use the same resume to apply for a Technical Writer and Frontend Developer role.&lt;/p&gt;

&lt;h3&gt;Use numbers and results&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NkSPp6cT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1615839907/results_llmfpk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NkSPp6cT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1615839907/results_llmfpk.png" alt="'Charts'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using numbers and outlining the impact you had in past roles does a better job at communicating your relevance to a team instead of listing vague responsibilities.&lt;/p&gt;

&lt;p&gt;For instance, instead of saying:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;" Built complex software features, while working directly with the product owner."&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You should state a major feature you built and the effect it had on the company profits or user experience e.t.c.&lt;/p&gt;

&lt;p&gt;E.g&lt;br&gt;
&lt;strong&gt;"Implemented a new payment feature with a team of UI designers and product managers which lead to a 11% increase in monthly revenue."&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;Don't Quantify your skills&lt;/h3&gt;

&lt;p&gt;Simply list the skills that you possess and let the recruiter be the judge of your proficiency. Don't cut yourself short by quantifying for skills e.g&lt;/p&gt;

&lt;p&gt;‚ùå JavaScript - 60%&lt;/p&gt;

&lt;p&gt;‚ùå HTML - 70%&lt;/p&gt;

&lt;p&gt;‚ùå Angular - 60%&lt;/p&gt;

&lt;p&gt;‚ùå React - 70%&lt;/p&gt;

&lt;p&gt;Please don't do this üëÜüèæ. Not only does it reduce readability it could also reduce your chances.&lt;/p&gt;

&lt;h3&gt;Be honest&lt;/h3&gt;

&lt;p&gt;You should never lie on your resume. If you are going to get that role, you want to get it the right way.&lt;/p&gt;

&lt;p&gt;You shouldn't lie about your years of experience, skills, or interests. Honesty saves everyone's time. &lt;/p&gt;

&lt;h3&gt;Be confident&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Ma_Drq2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1615840345/confidence_tzkktx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Ma_Drq2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1615840345/confidence_tzkktx.jpg" alt="'Confidence'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Be confident in your skills no matter what level you are on. The presence or absence of confidence can be sensed through your resume. You have to believe in yourself&lt;/p&gt;

&lt;h3&gt;Pay attention to details&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YRfWexvI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1615840459/details_znej9l.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YRfWexvI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1615840459/details_znej9l.jpg" alt="'Attention to Details'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure to proofread your resume and also bring on a second set of eyes.&lt;br&gt;
Having multiple grammatical errors in your resume does not speak well of you and could indicate that you don't pay attention to details.&lt;/p&gt;

&lt;p&gt;You would be required to communicate effectively in any job role. Having good writing skills is always a plus.&lt;/p&gt;

&lt;h3&gt;Always save your resume as a PDF file&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EmWuK5Dv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1615839907/pdf_ebif6u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EmWuK5Dv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1615839907/pdf_ebif6u.png" alt="'PDF'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Can you imagine doing all this work and it shows up all scrambled up on the recruiter's screen? To avoid this, always have your resume with the pdf format. That way you can be sure the recruiter would be viewing your resume exactly how you designed it.&lt;/p&gt;

&lt;p&gt;That's all folks, If this was helpful, share it!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>career</category>
      <category>siliconvalley</category>
      <category>programming</category>
    </item>
    <item>
      <title>The process behind creating a ruby gem</title>
      <author>Abeid Ahmed</author>
      <pubDate>Tue, 16 Mar 2021 09:39:57 +0000</pubDate>
      <link>https://dev.to/abeidahmed/the-process-behind-creating-a-ruby-gem-492j</link>
      <guid>https://dev.to/abeidahmed/the-process-behind-creating-a-ruby-gem-492j</guid>
      <description>&lt;p&gt;Lately, especially in the rails community, we've been witnessing lots of new stuff like the &lt;a href="https://github.com/hotwired"&gt;hotwire&lt;/a&gt;, and the new encryption system.&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZjByp3vJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EwJ4wmnXIAEKl_Z.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--AsBXLX9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1176398908983042048/CbStYFS7_normal.jpg" alt="Jorge Manrubia profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jorge Manrubia
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @jorgemanru
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Excited about finally sharing the encryption system we cooked for HEY. Will happen this week. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      23:19 PM - 10 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1369790017724375048" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1369790017724375048" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1369790017724375048" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;If you notice carefully, all of these have been extracted from pre-existing applications.&lt;/p&gt;

&lt;p&gt;So you might be wondering, what's the deal with extractions? Why can't I just start writing the gem?&lt;/p&gt;

&lt;p&gt;The most obvious answer that I can give you is that it is difficult to visualize the usage of the gem itself. For example, say you're building an authorization library gem. You would probably need some &lt;code&gt;method&lt;/code&gt; that would run before the &lt;code&gt;controller&lt;/code&gt; actions and pass in some &lt;code&gt;attributes&lt;/code&gt; like the &lt;code&gt;current_user&lt;/code&gt;, &lt;code&gt;role&lt;/code&gt;, &lt;code&gt;action&lt;/code&gt; name, etc to the &lt;code&gt;policy&lt;/code&gt;. Also, should the policies be scoped to the &lt;code&gt;model&lt;/code&gt;? But if you do that, how would you deal with policies that do not have a &lt;code&gt;model&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;In order to answer all of these questions, it would be much easier to first implement the functionality into your existing rails application and then extract it if you wish to do so.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-story-behind" class="anchor"&gt;
  &lt;/a&gt;
  The story behind
&lt;/h2&gt;

&lt;p&gt;Recently, I was working on a project that had the traditional dashboard design; plenty of &lt;code&gt;SVG&lt;/code&gt; icons, user avatar, unnecessary graphs, and charts, etc. The Figma wireframes used icons from &lt;a href="https://heroicons.com/"&gt;heroicons&lt;/a&gt;, and naturally, the first thought that came to my mind was to look for a gem that provided a &lt;code&gt;views&lt;/code&gt; helper method for rendering out the icons. &lt;/p&gt;

&lt;p&gt;I found a couple of gems that did this, and I quickly installed one of them and started using it. After some time, I realized the gem that I installed wasn't extensible. I wasn't able to pass other &lt;code&gt;HTML&lt;/code&gt; attributes other than the ones supported by the gem. So the only thought that came into my mind was to create a helper method that would take in any &lt;code&gt;HTML&lt;/code&gt; attribute like the &lt;code&gt;styles&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;aria&lt;/code&gt;, &lt;code&gt;data&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;The first thing that I did was to look for other &lt;code&gt;ruby&lt;/code&gt; gems that did something like this. I came across &lt;a href="https://github.com/primer/octicons/tree/master/lib/octicons_gem"&gt;octicons&lt;/a&gt; by GitHub and liked how they implemented the gem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-figuring-out-the-syntax-of-the-helper-method" class="anchor"&gt;
  &lt;/a&gt;
  Step 1 - Figuring out the syntax of the helper method
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;heroicon&lt;/span&gt; &lt;span class="s2"&gt;"user"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="s2"&gt;"custom-class"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;aria: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;label: &lt;/span&gt;&lt;span class="s2"&gt;"user icon"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first argument is the icon name, and the rest of the options are &lt;code&gt;HTML&lt;/code&gt; attributes. Rails already provides a neat helper method called the &lt;code&gt;content_tag&lt;/code&gt;, so it was a no-brainer for me to utilize it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-setting-up-the-defaults" class="anchor"&gt;
  &lt;/a&gt;
  Step 2 - Setting up the defaults
&lt;/h3&gt;

&lt;p&gt;Each icon library has some defaults, like &lt;code&gt;stroke-width&lt;/code&gt;, &lt;code&gt;viewBox&lt;/code&gt;, etc. In the case of &lt;a href="https://heroicons.com/"&gt;heroicon&lt;/a&gt;, they had two variants, namely: outline and solid. So I came up with the following syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;heroicon&lt;/span&gt; &lt;span class="s2"&gt;"user"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;variant: &lt;/span&gt;&lt;span class="s2"&gt;"solid"&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or, just&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;heroicon&lt;/span&gt; &lt;span class="s2"&gt;"user"&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;for rendering the &lt;code&gt;outline&lt;/code&gt; version of the icon.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-implementing-the-logic" class="anchor"&gt;
  &lt;/a&gt;
  Step 3 - Implementing the logic
&lt;/h3&gt;

&lt;p&gt;After you come with a syntax that you like, the next step would be to test out the helper method and write the logic for it. You're pretty much done now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-bundling-into-a-gem" class="anchor"&gt;
  &lt;/a&gt;
  Step 4 - Bundling into a gem
&lt;/h3&gt;

&lt;p&gt;What's on this step? Initialize the gem repo, copy and paste all the logic and the tests, write your gem's description, and publish it to the world.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selfpromotion" class="anchor"&gt;
  &lt;/a&gt;
  Self-promotion
&lt;/h2&gt;

&lt;p&gt;This is the gem (&lt;a href="https://github.com/abeidahmed/rails-heroicon"&gt;rails_heroicon&lt;/a&gt;) that I implemented following this process. Be sure to stargaze it and use it in your next project if you feel the need to use &lt;code&gt;SVG&lt;/code&gt; icons.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I was so satisfied with this process that I created another gem for &lt;a href="https://feathericons.com/"&gt;feathericons&lt;/a&gt;. The gem is called &lt;a href="https://github.com/abeidahmed/rails_feather"&gt;rails_feather&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I agree that there isn't one way of doing the right thing. Especially in software engineering, it's all about trial and error. I found this process quite productive and useful and thought I would share it with you all.&lt;br&gt;
I hope you find it useful. &lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
    </item>
    <item>
      <title>Getting started with Tailwind and React: Implementing responsiveness.</title>
      <author>Yogini Bende</author>
      <pubDate>Tue, 16 Mar 2021 07:14:03 +0000</pubDate>
      <link>https://dev.to/ms_yogii/getting-started-with-tailwind-and-react-implementing-responsiveness-3a</link>
      <guid>https://dev.to/ms_yogii/getting-started-with-tailwind-and-react-implementing-responsiveness-3a</guid>
      <description>&lt;p&gt;Hello folks,&lt;/p&gt;

&lt;p&gt;In my &lt;a href="https://dev.to/ms_yogii/getting-started-with-tailwind-and-react-a-simple-login-form-tutorial-1lk8"&gt;last article&lt;/a&gt;, I explained how you can get started with Tailwind and React by creating a simple login form. In that, we started with a bare minimum form structure. In this article, let's work on the same login form and implement responsiveness.&lt;/p&gt;

&lt;p&gt;Before we get started, this was the form which we developed earlier -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ISOeM8Qh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tgpp9gr5bqjbe99mhuds.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ISOeM8Qh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tgpp9gr5bqjbe99mhuds.png" alt="Login Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We had developed this considering only the desktop version of that form. But now the requirement comes and we need to make it responsive. The code for the above form looks like this -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PrimaryButton&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../components/FormElements/Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../components/FormElements/Input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleFormSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;pageBody&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;h-screen flex bg-gray-bg1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;formContainer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;w-full max-w-md m-auto bg-white rounded-lg border border-primaryBorder shadow-default py-10 px-16&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;formHeading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-2xl font-medium text-primary mt-4 mb-12 text-center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;btnContainer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex justify-center items-center mt-6&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageBody&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;formContainer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;formHeading&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nx"&gt;Log&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt; &lt;span class="err"&gt;üîê&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleFormSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Input&lt;/span&gt;
                        &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                        &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                        &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Your email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                    &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Input&lt;/span&gt;
                        &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                        &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                        &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Your Password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                    &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;btnContainer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PrimaryButton&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class="nx"&gt;Continue&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;Email&lt;/span&gt;
                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/PrimaryButton&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;classes&lt;/code&gt; object contains a list of all the classes applied to the below elements. Till now, we have very well understood that Tailwind is a utility first library and it has a class for every utility. We will be implementing responsiveness in a similar manner, by applying classes whenever required. &lt;/p&gt;

&lt;p&gt;For any webpage, responsiveness is achieved considering the different breakpoints for the browser and Tailwind supports quite a good range of screen sizes, sufficient enough to add responsiveness to your site. Here is the list of breakpoints supported by Tailwind -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--etOJ2H5M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twxz2uqnr882egq4pf4d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--etOJ2H5M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twxz2uqnr882egq4pf4d.png" alt="Tailwind Breakpoints List"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Though this list looks sufficient, Tailwind provides you different ways to customise the breakpoints by adding them to the &lt;code&gt;tailwind.config.js&lt;/code&gt; file. &lt;/p&gt;

&lt;p&gt;There are two ways you can add custom breakpoints to your project. &lt;br&gt;
1- Overwrite Tailwind defaults and completely add your custom breakpoints.&lt;br&gt;
2- Extend tailwind defaults and add the breakpoints which are not already included in the list. &lt;/p&gt;

&lt;p&gt;For first approach, you can add the breakpoint list as below&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// tailwind.config.js&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;screens&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tablet&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;640px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="c1"&gt;// =&amp;gt; @media (min-width: 640px) { ... }&lt;/span&gt;

      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;laptop&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1024px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="c1"&gt;// =&amp;gt; @media (min-width: 1024px) { ... }&lt;/span&gt;

      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;desktop&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1280px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="c1"&gt;// =&amp;gt; @media (min-width: 1280px) { ... }&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;For the second approach, you will add the breakpoints which are not already present in the default list. It will look something like this -&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// tailwind.config.js&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;screens&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3xl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1600px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Pay attention to how we have added screen-list inside &lt;code&gt;extend&lt;/code&gt; key of the tailwind theme object.&lt;/p&gt;

&lt;p&gt;Apart from this, Tailwind provides even more customisations for breakpoints which you can read &lt;a href="https://tailwindcss.com/docs/breakpoints"&gt;here&lt;/a&gt;. I am not covering them in detail in this article as I think the above mentioned points are good enough for most of the use-cases. &lt;/p&gt;

&lt;p&gt;This was all about customisations and some basic properties of how Tailwind handles responsiveness. Now let‚Äôs try to understand the actual implementation of this. Tailwind will ask you to use &lt;strong&gt;mobile first&lt;/strong&gt; approach while developing your page. In mobile first approach, we consider mobile devices by default and change only those properties which have different values on the larger screens.  &lt;/p&gt;

&lt;p&gt;For e.g. Suppose a font-size of a heading for a mobile device should be &lt;code&gt;1rem&lt;/code&gt;. So we will give &lt;code&gt;1rem&lt;/code&gt; as the default font-size to it and add &lt;code&gt;2.5rem&lt;/code&gt; as a font-size inside the media query for larger screens. &lt;/p&gt;

&lt;p&gt;For the above page, we will just need to consider the form title for responsiveness as all other elements looks good in mobile devices as well. So for heading currently have font-size as &lt;code&gt;text-2xl&lt;/code&gt; and for mobile devices we want to give apply &lt;code&gt;text-lg&lt;/code&gt;. Hence we will modify the heading classes to look something like this - &lt;br&gt;
&lt;code&gt;text-lg lg:text-2xl font-medium text-primary mt-4 mb-8 lg:mb-12 text-center&lt;/code&gt;&lt;br&gt;
Notice, we have also changed the bottom margin to make it look suitable for the small font size adapted for mobile devices. &lt;/p&gt;

&lt;p&gt;This is one of the most simple approach you can use to implement responsiveness into your website. You may find Tailwind CSS messy initially as we are not used to adding such a huge class list to our html elements, but everything start making sense after you use it for a little while. Also for some more tips on Tailwind, there is a &lt;a href="https://dev.to/joserfelix/6-tips-for-tailwind-css-development-with-resources-33i4"&gt;great article&lt;/a&gt; by &lt;/p&gt;
&lt;div class="ltag__user ltag__user__id__124616"&gt;
  
    .ltag__user__id__124616 .follow-action-button {
      background-color: #0786b0 !important;
      color: #ffffff !important;
      border-color: #0786b0 !important;
    }
  
    &lt;a href="/joserfelix" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ga9w5mPq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--koqgjZFR--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/124616/c89c6686-c589-4c17-bafb-92bfb682fd3f.png" alt="joserfelix image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/joserfelix"&gt;Jose Felix &lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/joserfelix"&gt;React Developer passionate in building clean user interfaces.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;So that's it about responsiveness with Tailwind. If you follow some different patterns, please share them in comments section. I would love to hear about this too!!&lt;br&gt;
Keep learning :)&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Storybook Talk / Live Coding</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Tue, 16 Mar 2021 03:43:46 +0000</pubDate>
      <link>https://dev.to/nickytonline/storybook-talk-live-coding-klp</link>
      <guid>https://dev.to/nickytonline/storybook-talk-live-coding-klp</guid>
      <description>&lt;p&gt;Last week, I gave a talk on &lt;a href="https://storybook.js.org/"&gt;Storybook&lt;/a&gt; at a The Collab Lab meetup.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--P11PQVAz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1152392593042485249/M7M0YZ4j_normal.jpg" alt="Nick Taylor (he/him) profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Nick Taylor (he/him)
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/nickytonline"&gt;@nickytonline&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I had a lot of fun giving my talk on &lt;a href="https://twitter.com/storybookjs"&gt;@storybookjs&lt;/a&gt; last night at the &lt;a href="https://twitter.com/_collab_lab"&gt;@_collab_lab&lt;/a&gt; meetup. Thanks for having me!&lt;br&gt;&lt;br&gt;Here‚Äôs the video and slide deck. &lt;a href="https://t.co/UQigiz8Ae2"&gt;iamdeveloper.com/pages/talks/#h‚Ä¶&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/webdevelopment"&gt;#webdevelopment&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/ui"&gt;#ui&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/ux"&gt;#ux&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:00 PM - 11 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1370056928383090689" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1370056928383090689" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1370056928383090689" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#what-is-storybook" class="anchor"&gt;
  &lt;/a&gt;
  What is Storybook?
&lt;/h2&gt;

&lt;p&gt;Think of it as a workbench for building out components that your application consumes without the burden of running your application. It is also living interactive documentation for your entire team/consumers of components.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--meY0N3oB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6x3jsi7yoj9id3xyhgg3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--meY0N3oB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6x3jsi7yoj9id3xyhgg3.png" alt="Describing building components in Storybook vs. your applciation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By building out your components in isolation, it forces you (in a good way) to really think about how you are building your component. Building things in Storybook will potentially (hopefully) help you avoid tightly coupling things together. &lt;/p&gt;

&lt;p&gt;For example, at Forem, we use &lt;a href="https://www.elastic.co/"&gt;Elastic Search&lt;/a&gt; for search results including the list of users returned in the mention autocomplete component below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jOpYJO4w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3s1qbca47opj18adanwh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jOpYJO4w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3s1qbca47opj18adanwh.png" alt="The Forem mention autocomplete component in action in Forem's Storybook"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This component knows nothing about Elastic Search. All it knows is that it gets a list of users from a function &lt;a href="https://reactjs.org/docs/components-and-props.html"&gt;prop&lt;/a&gt; called &lt;code&gt;fetchSuggestions&lt;/code&gt; and renders them. In Storybook, we mock that prop by creating a function that returns some mocked data.&lt;/p&gt;

&lt;p&gt;A Storybook story is view of a component in a certain state. A component can have many stories. Here we show a button component with different variants.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TmSoHEsu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mw0e2cmaf72ybu2t78e4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TmSoHEsu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mw0e2cmaf72ybu2t78e4.png" alt="Different views of a button component in different states in Storybook"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Storybook was originally built for React only but has since evolved to support most of today‚Äôs popular frameworks like Vue, Angular, and Svelte etc.&lt;/p&gt;

&lt;p&gt;There's more, including incorporating Storybook into a The Collab Lab project, so check out the full talk and &lt;a href="https://iamdeveloper.com/storybook2021"&gt;slide deck&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ypsD-9qQzYg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you aren't already, give The Collab Lab a follow on DEV!&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__1697"&gt;
  
    .ltag__user__id__1697 .follow-action-button {
      background-color: #FFFFFF !important;
      color: #000000 !important;
      border-color: #000000 !important;
    }
  
  &lt;a href="/the-collab-lab" class="ltag__user__link profile-image-link"&gt;
    &lt;div class="ltag__user__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VPJQXYDx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--SVFSIHEJ--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/1697/e2bad778-2065-472e-b0f8-0bf17dda80f9.jpg" alt="the-collab-lab image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a href="/the-collab-lab" class="ltag__user__link"&gt;The Collab Lab&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a href="/the-collab-lab" class="ltag__user__link"&gt;
        The Collab Lab is collaborative, remote project practice for early-career developers. We‚Äôre volunteer-driven and free for participants.
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>javascript</category>
      <category>react</category>
      <category>ui</category>
      <category>ux</category>
    </item>
    <item>
      <title>The Shocking Immaturity of JavaScript</title>
      <author>Jared White</author>
      <pubDate>Tue, 16 Mar 2021 01:45:53 +0000</pubDate>
      <link>https://dev.to/jaredcwhite/the-shocking-immaturity-of-javascript-c70</link>
      <guid>https://dev.to/jaredcwhite/the-shocking-immaturity-of-javascript-c70</guid>
      <description>&lt;p&gt;This is going to come across as a rant, so I'll do my best to refrain from blaming any one project or source and just make a generalized statement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The ecosystem of JavaScript frameworks is almost unbelievably unstable.&lt;/strong&gt; Yes, even now in the year 2021.&lt;/p&gt;

&lt;p&gt;From backend ORMs and headless APIs to frontend site generators, package managers, and build tools‚Äîit's a miracle any of it actually works properly in production!&lt;/p&gt;

&lt;p&gt;Some weeks I spend literally &lt;em&gt;hours&lt;/em&gt; debugging and researching all kinds of weird, arcane bugs or conceptual hurdles related to performance, hosting, payload sizes, full-stack architectural gotchas, and the list goes on and on and on. And it's not just me. I'm on a team that is in a constant mode of struggle and churn due to dealing with largely obvious issues related to the most popular tools for backend &amp;amp; frontend JavaScript (at least according to their massive star counts on GitHub).&lt;/p&gt;

&lt;p&gt;Now the reason this really grinds my gears isn't just related to my particular project. In a purely cynical sense, what do I care? I'm getting paid the same whether I'm writing code or debugging it.&lt;/p&gt;

&lt;p&gt;The thing that bothers me is how awful of an experience this is for people with &lt;em&gt;far&lt;/em&gt; less experience than me. I've been in this industry for over 20 years. However, other people are attempting to get into web development &lt;strong&gt;this year&lt;/strong&gt;. And they're being told in order to do so they have to learn X, Y, and Z tools‚Ä¶all JavaScript of course. The problem is if they run into major issues‚Äîand they do, believe me, they do‚Äîthey don't know enough to grasp just how buggy and incomplete the tooling is. Instead, they think they must have just made a mistake, or simply haven't learned enough yet. The cognitive load required is staggering.&lt;/p&gt;

&lt;p&gt;Or perhaps they haven't run into too many issues yet. (Lucky!) That's possible, because &lt;em&gt;the vast majority&lt;/em&gt; of tutorials and examples out there for the top JavaScript frameworks are laughably simplistic. If I see yet another example of how to use a GraphQL query to pull a blog post from a headless CMS to statically render an article using a component tree built with You-Know-What.js, I'm going to rip my hair out of my skull. This isn't where any real-world applications of any reasonable size get tripped up. The devil is &lt;em&gt;always&lt;/em&gt; in the details. The problems typically arise well beyond the scope of clickbait-y "Build THIS in 10 minutes" articles.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-do-we-fix-this" class="anchor"&gt;
  &lt;/a&gt;
  How Do We Fix This?
&lt;/h3&gt;

&lt;p&gt;The path to correcting any sort of systemic problem is to first acknowledge it and then to define its scope with honest and sober reflection.&lt;/p&gt;

&lt;p&gt;We all need to start being forthcoming about just how shockingly buggy and incomplete most of the JavaScript tooling is across the board. &lt;em&gt;Compared to what&lt;/em&gt;, you might ask? Maybe this is just an artifact of web development, period. It's the nature of the beast.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wrong.&lt;/strong&gt; You can hop the fence over to other programming languages, frameworks, and ecosystems, and discover that the tooling there is &lt;strong&gt;far more stable and usable&lt;/strong&gt; over the long haul. I don't wish to turn this into a pitch for Ruby, but let's just say in my many years of &lt;em&gt;extensive engagement&lt;/em&gt; with the Rails framework and related projects, I've never encountered the sheer volume of bugs, glitches, gotchas, and limitations which I encounter &lt;em&gt;on a regular basis&lt;/em&gt; in JS land. And it's not just me‚Ä¶I'm in chat rooms and Twitter threads all the time where other folks are losing their minds over some latest craziness. All we can do is shake our heads and go take a walk or something to relieve the pressure.&lt;/p&gt;

&lt;p&gt;So how do we fix this? Here's one suggestion:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#start-telling-the-truth" class="anchor"&gt;
  &lt;/a&gt;
  Start Telling the Truth
&lt;/h3&gt;

&lt;p&gt;Get off the off-the-charts hype machine, stat. Enough with hyperbolic statements like "this is the modern way to build the web" or "this gives you the best developer experience with all the features you need for production" or "write high quality, loosely coupled, scalable, maintainable applications the most productive way". (These are all real quotes, BTW.) The constant marketing is not only exhausting, it also feeds newbies a bunch of malarkey.&lt;/p&gt;

&lt;p&gt;Start by being honest about what &lt;em&gt;doesn't&lt;/em&gt; work as much as what does work. Warn people about building battle-hardened, production-level code on top of your buggy and incomplete foundations. Steer people towards other, better solutions‚Äîeven other languages and frameworks‚Äîif you know your tool-du-jour isn't quite up to snuff yet. Slow down your progress on shiny new features and fix the features you've already shipped.&lt;/p&gt;

&lt;p&gt;Label releases and techniques properly. It's perfectly serviceable to have something in alpha or beta state for quite some time, or to say a particular technique is probably only suitable for the stout-hearted with time to kill. Also, stop with the "old-school code" shaming. The world isn't going to end if you write something in a manner that's been proven to work for several years by now, rather than the "flavor-of-the-month" according to some code-school blog. We snicker at one person's &lt;code&gt;var&lt;/code&gt; or another person's &lt;code&gt;$.get&lt;/code&gt; to fix the fire extinguisher and meanwhile the house is on fire.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#feel-the-users-pain" class="anchor"&gt;
  &lt;/a&gt;
  Feel the Users' Pain
&lt;/h3&gt;

&lt;p&gt;This all mainly boils down to something we learn in the world of UX (User Experience) design‚Äîyou have to feel the pain your users go through when they use your software. In the case of developer tools, developers are the users! That's why the term DX (Developer Experience) gets thrown around a lot now. The thing is, good DX isn't just some whiz-bang &lt;em&gt;ooo, that's cool&lt;/em&gt; reaction to a new blog post. It's "how well will this work for me and my team over the next several years??!" In that sense, the DX of the JavaScript ecosystem has a &lt;em&gt;lot&lt;/em&gt; to answer for. Sometimes you even see it in GitHub issue and PR comments: rude, curt dismissals of genuine problems people are having in the real world. RTFM is &lt;em&gt;never&lt;/em&gt; the correct response to DX issues.&lt;/p&gt;

&lt;p&gt;Again, I come from the world of Ruby‚Äînot perfect by any means. But we have a saying, MINASWAN, which stands for Matz-is-nice-and-so-we-are-nice. In other words, the creator of Ruby (known as Matz) is in most respects a pretty genteel fellow. So let's also be nice and help out our fellow developers, particularly the newbies. That doesn't just mean in terms of sharing ideas or providing education. It means &lt;em&gt;the tools we build should themselves be pretty nice!&lt;/em&gt; Crappy code smell and lousy DX often gets called out in the Ruby community because we've been handed a high bar. Name your variables well. Reduce boilerplate. Use a small surface area for your API whenever possible. Cultivate well-organized codebases. Convention over configuration. Maximize programmer happiness. And so on and so forth.&lt;/p&gt;

&lt;p&gt;The result of all this is I sometimes look at the bugs or issues with I deal with when using JavaScript tooling and my initial reaction is: &lt;strong&gt;this would &lt;em&gt;never&lt;/em&gt; fly in Ruby&lt;/strong&gt;. Developers would simply laugh and quickly move on to a better tool. I'm not saying this to prop up Ruby. I'm saying this to convince you that &lt;em&gt;you need to demand more of your JS tools&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demand more stability.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demand more clarity.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demand more honesty and less marketing fluff.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demand higher standards.&lt;/strong&gt; (Heck, demand standards at all! The ecosystem churn around ES modules right now is driving even the top authors of frontend bundlers absolutely nuts!)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stop putting up with the nonsense.&lt;/strong&gt; The excuses have run out. How long have we had Node? How long has ES6+ JavaScript been with us? How long have we had other, more stable ecosystems to be inspired by?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;You might conclude, after such a rant, that I hate JavaScript and just want to leave. Actually, I don't! üòÖ There are JS projects I &lt;em&gt;love&lt;/em&gt; which offer great APIs in my opinion. &lt;a href="https://lit-element.polymer-project.org"&gt;LitElement&lt;/a&gt; for example is one of the best developer tools I've ever used in any language. Native ESM support in browsers and modern CDNs like SkyPack are wildly exciting. I've actually written a Webpack plugin and found the experience enjoyable. In fact, unlike some fellow Rails devs I know, I rather like configuring Webpack. (Now who's the crazy one?!) PostCSS is a nifty Node project I benefit from every day. &lt;a href="https://shoelace.style"&gt;Shoelace web components&lt;/a&gt; are the bees' knees.&lt;/p&gt;

&lt;p&gt;So I don't hate JS. I don't hate frontend engineering, and I don't hate Node. What I hate is developer tools with awful DX due to hacks upon hacks upon endless modules of widely-varying quality as a result of constant churn in "best practices" and what's compatible with what, where, when. I simply no longer have the patience to deal.&lt;/p&gt;

&lt;p&gt;Thus I'm begging you‚Äî&lt;em&gt;imploring you&lt;/em&gt;‚Äîif you build or maintain any tool in the JS ecosystem, pause for a moment and consider how you can reorient yourself around upping the long-term quality level of the tools you produce. And if you are a newbie, DEMAND your tools give you the quality you deserve. And if you &lt;em&gt;do&lt;/em&gt; work on a tool that's actually pretty stable, fun to work with, and hasn't tried to take over the world with ridiculous claims‚Äî&lt;em&gt;kudos to you!&lt;/em&gt; &lt;strong&gt;You're breathing rarified air.&lt;/strong&gt; üòú&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Code Fast &amp; Code Smart: Productivity Tools for PHP</title>
      <author>Mary Jeykle</author>
      <pubDate>Tue, 16 Mar 2021 00:47:25 +0000</pubDate>
      <link>https://dev.to/mjdsunas/code-fast-code-smart-using-productivity-tools-for-php-1ekf</link>
      <guid>https://dev.to/mjdsunas/code-fast-code-smart-using-productivity-tools-for-php-1ekf</guid>
      <description>&lt;p&gt;Development tools plays an important role in the entire web development process. They say, your web app is only as good as your dev tool(s)! So, it is important to choose and study your Dev Tools before jumping in to web development. As it wil save you both in time and financial resources.&lt;/p&gt;

&lt;p&gt;To help you out, here are a list of essential tools for PHP web development to get you started. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visual-studio-code" class="anchor"&gt;
  &lt;/a&gt;
  Visual Studio Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://code.visualstudio.com/"&gt;https://code.visualstudio.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Visual Studio Code is a lightweight but powerful source code editor which runs on your desktop and is available for Windows, macOS and Linux. It comes with built-in support for JavaScript, TypeScript and Node.js and has a rich ecosystem of extensions for other languages (such as C++, C#, Java, Python, PHP, Go) and runtimes (such as .NET and Unity). Begin your journey with VS Code with these &lt;a href="https://code.visualstudio.com/docs/getstarted/introvideos"&gt;introductory videos&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7YIfIfDa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wwcodemanila.github.io/WWCodeManila-PHP/contents/vsc.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7YIfIfDa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wwcodemanila.github.io/WWCodeManila-PHP/contents/vsc.PNG" alt="Visual Studio Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#codeigniter-user-guide" class="anchor"&gt;
  &lt;/a&gt;
  CodeIgniter USER GUIDE
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.codeigniter.com/user_guide/"&gt;https://www.codeigniter.com/user_guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are using CodeIgniter framework in your PHP projects, before trying to search for 'answers' in your coding problems in W3Schools or stackoverflow, try reading the CodeIgniter User Guide first. It is the primary documentation for CodeIgniter, included in the package downloads. The User Guide can also be read online. It contains an introduction, tutorial, a number of "how to" guides, and then reference documentation for the components that make up the framework.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-generator" class="anchor"&gt;
  &lt;/a&gt;
  Data Generator
&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://generatedata.com"&gt;http://generatedata.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ever needed custom formatted sample / test data, like, bad? Well, that's the idea of this script. It's a free, open source tool written in JavaScript, PHP and MySQL that lets you quickly generate large volumes of custom data in a variety of formats for use in testing software, populating databases, and... so on and so forth.&lt;/p&gt;

&lt;p&gt;This site also offers an online demo where you're welcome to tinker around to get a sense of what the script does, what features it offers and how it works. Then, once you've whet your appetite, there's a free, fully functional, GNU-licensed version available for download. Alternatively, if you want to avoid the hassle of setting it up on your own server, you can donate $20 or more to get an account on the site, letting you generate up to 5,000 records at a time (instead of the maximum 100), and let you save your data sets. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XPAOQJGs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wwcodemanila.github.io/WWCodeManila-PHP/contents/generate.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XPAOQJGs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wwcodemanila.github.io/WWCodeManila-PHP/contents/generate.PNG" alt="Generate Data"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bootstrap-builder" class="anchor"&gt;
  &lt;/a&gt;
  Bootstrap Builder
&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://getbootstrap.com/docs/3.3/components/"&gt;http://getbootstrap.com/docs/3.3/components&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bootstrap is the most popular HTML, CSS, and JS framework for developing responsive, mobile first projects on the web. This site give developers over a dozen of reusable components built to provide iconography, dropdowns, input groups, navigation, alerts, and much more. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bootstrap-components-generator" class="anchor"&gt;
  &lt;/a&gt;
  Bootstrap Components Generator
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://bootsnipp.com"&gt;https://bootsnipp.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bootsnipp is an element gallery for web designers and web developers, anybody using Bootstrap will find this website essential in their craft. It is a free to use web service that provides code snippets for design elements on webpages. You can search for a particular webpage design element or simply browse them through the homepage. Clicking on an element opens its page where you can preview it and copy its code snippet. The code can be edited on the page and the preview is updated in real time.&lt;/p&gt;

&lt;p&gt;You can then copy the code and use it in your projects if you are using Bootstrap HTML / CSS / JS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sweet-alerts" class="anchor"&gt;
  &lt;/a&gt;
  Sweet Alerts!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://sweetalert.js.org/guides/"&gt;https://sweetalert.js.org/guides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SweetAlert makes popup messages easy and pretty. It is a beautiful replacement for success messages, error messages, warning modals, and a lot more. You can customize SweetAlert to fit your needs. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G3_HS0Zv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wwcodemanila.github.io/WWCodeManila-PHP/contents/alerts.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G3_HS0Zv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wwcodemanila.github.io/WWCodeManila-PHP/contents/alerts.PNG" alt="Sweet Alert"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#json-format-viewer" class="anchor"&gt;
  &lt;/a&gt;
  JSON Format viewer
&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://jsonviewer.stack.hu/"&gt;http://jsonviewer.stack.hu/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JSON, short for JavaScript Object Notation, is a lightweight computer data interchange format. JSON is a text-based, human-readable format for representing simple data structures and associative arrays (called objects).&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "firstName": "John",
  "lastName": "Smith",
  "gender": "man",
  "age": 32,
  "address": {
    "streetAddress": "21 2nd Street",
    "city": "New York",
    "state": "NY",
    "postalCode": "10021"
  },
  "phoneNumbers": [
    {
      "type": "home",
      "number": "212 555-1234"
    },
    {
      "type": "fax",
      "number": "646 555-4567"
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This site convert JSON Strings to a Friendly Readable Format. Like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lUV70AJ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wwcodemanila.github.io/WWCodeManila-PHP/contents/json.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lUV70AJ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wwcodemanila.github.io/WWCodeManila-PHP/contents/json.PNG" alt="JSON Viewer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#datatables" class="anchor"&gt;
  &lt;/a&gt;
  DataTables
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.datatables.net"&gt;https://www.datatables.net&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DataTables is a powerful jQuery plugin for creating table listings and adding interactions to them. It provides searching, sorting and pagination without any configuration. Help developers save time in creating advance and interactive HTML Tables.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PKajIDnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wwcodemanila.github.io/WWCodeManila-PHP/contents/datatables.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PKajIDnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wwcodemanila.github.io/WWCodeManila-PHP/contents/datatables.PNG" alt="DataTables"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#phpmaker-rapid-application-development-rad-tool-for-php" class="anchor"&gt;
  &lt;/a&gt;
  PHPMAKER: Rapid Application Development (RAD) Tool for PHP
&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://www.hkvstore.com/phpmaker"&gt;http://www.hkvstore.com/phpmaker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PHPMaker is a powerful automation tool that can generate a full set of PHP quickly from MySQL, PostgreSQL, Microsoft Access, Microsoft SQL Server, Oracle and SQLite databases. Using PHPMaker, you can instantly create web sites that allow users to view, edit, search, add and delete records on the web. PHPMaker is designed for high flexibility, numerous options enable you to generate PHP applications that best suits your needs. The generated codes are clean, straightforward and easy-to-customize. The PHP scripts can be run on Windows servers or Linux servers (except Microsoft Access). PHPMaker can save you tons of time and is suitable for both beginners and experienced develpers alike.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#make-and-receive-phone-calls-and-send-and-receive-text-messages-using-web-service-apis" class="anchor"&gt;
  &lt;/a&gt;
  Make and receive phone calls and send and receive text messages using web service APIs
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.twilio.com/"&gt;https://www.twilio.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Twilio is a cloud communications platform as a service (CPaaS) company based in San Francisco, California. Twilio allows software developers to programmatically make and receive phone calls, send and receive text messages, and perform other communication functions using its web service APIs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#halt-bots-using-recaptcha" class="anchor"&gt;
  &lt;/a&gt;
  Halt bots using reCAPTCHA
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.google.com/recaptcha/intro/v3beta.html"&gt;https://www.google.com/recaptcha/intro/v3beta.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;reCAPTCHA is a free service that protects your website from spam and abuse. reCAPTCHA uses an advanced risk analysis engine and adaptive CAPTCHAs to keep automated software from engaging in abusive activities on your site. It does this while letting your valid users pass through with ease.&lt;/p&gt;

&lt;p&gt;reCAPTCHA offers more than just spam protection. Every time our CAPTCHAs are solved, that human effort helps digitize text, annotate images, and build machine learning datasets. This in turn helps preserve books, improve maps, and solve hard AI problems.&lt;/p&gt;

&lt;p&gt;You can find a reCAPTCHA &lt;a href="https://codelabs.developers.google.com/codelabs/reCAPTCHA/index.html#0"&gt;codelab here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#google-charts-for-data-visualization" class="anchor"&gt;
  &lt;/a&gt;
  Google Charts for Data Visualization
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://developers.google.com/chart/"&gt;https://developers.google.com/chart/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Google Charts provides a perfect way to visualize data on your website. From simple line charts to complex hierarchical tree maps, the chart gallery provides a large number of ready-to-use chart types.&lt;/p&gt;

&lt;p&gt;The most common way to use Google Charts is with simple JavaScript that you embed in your web page. You load some Google Chart libraries, list the data to be charted, select options to customize your chart, and finally create a chart object with an id that you choose. Then, later in the web page, you create a &lt;/p&gt; with that id to display the Google Chart.

&lt;p&gt;That's all you need to &lt;a href="https://developers.google.com/chart/interactive/docs/quick_start"&gt;get started&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ek8v9il1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wwcodemanila.github.io/WWCodeManila-PHP/contents/charts.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ek8v9il1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wwcodemanila.github.io/WWCodeManila-PHP/contents/charts.PNG" alt="Google Chart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-audit-tool" class="anchor"&gt;
  &lt;/a&gt;
  Web Audit Tool
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://web.dev/measure"&gt;https://web.dev/measure&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Measure you website performance with this tool. It uses Lighthouse, is an open-source, automated tool for improving the quality of your web apps. It is integrated directly into the Chrome DevTools Audits panel. See your site's performance across the areas you care about. And get tips for improving your website.&lt;/p&gt;

</description>
      <category>php</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Deployment Walkthrough: Microservice Communication Interface</title>
      <author>DarrylBryson</author>
      <pubDate>Mon, 15 Mar 2021 21:45:46 +0000</pubDate>
      <link>https://dev.to/darrylbrysondev0/deployment-walkthrough-microservice-communication-interface-moi</link>
      <guid>https://dev.to/darrylbrysondev0/deployment-walkthrough-microservice-communication-interface-moi</guid>
      <description>&lt;h1&gt;
  &lt;a href="#deployment-walkthrough-microservice-communication-interface" class="anchor"&gt;
  &lt;/a&gt;
  Deployment Walkthrough: Microservice Communication Interface
&lt;/h1&gt;

&lt;p&gt;The purpose of this article is to walkthrough the setting up of infrastructure for containerized applications to communicate and access files.  Containerizing an application gives great flexibility in how, where, and at what scale it‚Äôs deployed. A drawback to this versatility is the problem of discoverability. Microservice applications often rely on accessing remote files and the ability to communicate with other apps. How does an app find these resources when being deployed into different data centers and dynamically assign IP addresses?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hard-coded-solution-configuration-files" class="anchor"&gt;
  &lt;/a&gt;
  Hard Coded Solution: Configuration files
&lt;/h2&gt;

&lt;p&gt;One way to resolve this, is to collect deployment environment differences into a configuration file. A new config. file is needed per deployment environment and app. This solution is straight forward but has a significant maintenance cost as the number of apps increases or are reused in multiple locations (1 Config per Env per App). This can really add up when an enterprise solution can rely on several dozen microservices.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rZzT4Wj7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wt1lojx3wkf48l1ofsw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rZzT4Wj7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wt1lojx3wkf48l1ofsw.png" alt="Solution Diagram: Direct hard coded addressing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Diagram 1-1: Direct hard coded addressing&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generalized-solution-communication-interfaces" class="anchor"&gt;
  &lt;/a&gt;
  Generalized Solution: Communication Interfaces
&lt;/h2&gt;

&lt;p&gt;A solution for generalized deployment scenarios is to deploy containerizes that can interface between the microservices and the environments they're deployed into. Interfaces deployed as containers are instantly discoverable to other apps in the same &lt;a href="https://docs.docker.com/network/"&gt;Docker ‚Äúnetwork‚Äù&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The general concept is to utilize an sftp server and a messaging queue to provide applications with file access and intra-app communication, respectively. These components are able to service all other apps in the same environment This simplifies maintenance by focusing deployment specific configurations to a single file per environment (1 Config per Env).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PQMt9m6q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g8vj07zirzlkk0hhlj11.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PQMt9m6q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g8vj07zirzlkk0hhlj11.png" alt="Solution Diagram: Communication Interface"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Diagram 1-2: Communication Interface&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#sftp-server" class="anchor"&gt;
  &lt;/a&gt;
  SFTP Server
&lt;/h2&gt;

&lt;p&gt;An sftp file server allows for applications to securely access files from a directory addressed on the file server but stored physically somewhere else. The advantages of accessing files through a server is that extremely complex or changing network mappings can be statically addressed by an app.&lt;/p&gt;

&lt;p&gt;The below example uses the &lt;a href="https://github.com/atmoz/sftp"&gt;atmoz sftp image&lt;/a&gt; to create a file server with 2 directories. Directories are defined under the &lt;code&gt;volume&lt;/code&gt; tag and match the pattern &lt;em&gt;&lt;code&gt;&amp;lt;Host_Path&amp;gt; : &amp;lt;Container_Path&amp;gt; : &amp;lt;Permission&amp;gt;&lt;/code&gt;&lt;/em&gt;. The first directory points to &lt;code&gt;/mnt/d/GenStore/sample-data-set/survey-results&lt;/code&gt; on the host machine. On the file server this address becomes &lt;code&gt;/home/admin/upload/raw&lt;/code&gt;. Likewise the second directory appears under the same parent even though it's location on the host is on a different drive. In addition the &lt;code&gt;ro&lt;/code&gt; suffix makes the first directory read only, very useful in safe guarding source files from alteration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;2'&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;sftp-server&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;atmoz/sftp&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;/mnt/d/GenStore/sample-data-set/survey-results:/home/admin/upload/raw:ro&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;/mnt/f/dept010/data-store/1mk3f5-e5ltb4-4r56yh/01/02:/home/admin/upload/weather-set&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;22:22"&lt;/span&gt;
    &lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;microservice-network&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;admin:pass:1001&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#messaging-queue" class="anchor"&gt;
  &lt;/a&gt;
  Messaging Queue
&lt;/h2&gt;

&lt;p&gt;Messaging queues are standard design concepts for microservice applications. Queues allow for applications to be ‚Äúloosely‚Äù connected. Meaning, that each app communicates with the queue instead of with each other. A message queue, in a way, is a running list of small messages. Messages are posted by one app (publishers) and then read by another (subscribers). This example uses an image created by RabbitMQ. RabbitMQ makes connectors for lots of different languages and is efficient for general purpose use cases.&lt;br&gt;
Below is the docker-compose yaml for deploying the RabbitMQ broker.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;2'&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;rabbit-queue&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rabbitmq:3-management&lt;/span&gt;
    &lt;span class="na"&gt;hostname&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rabbit-1&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;RABBITMQ_ERLANG_COOKIE='Key_Link_k1'&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;15672:15672'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;5672:5672'&lt;/span&gt;
    &lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;microservice-network&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can follow a detailed ‚ÄúHello World‚Äù walkthrough in your language of choice from the &lt;a href="https://www.rabbitmq.com/tutorials/tutorial-one-python.html"&gt;RabbitMQ site&lt;/a&gt;. Below are simple python scripts for a publisher and a subscriber.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;publish&lt;/span&gt; &lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;source_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'/mnt/d/GenStore/sample-data-set/survey-results'&lt;/span&gt;
    &lt;span class="n"&gt;rbt_srv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'rabbit-queue'&lt;/span&gt;
    &lt;span class="n"&gt;trgt_queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'new_files'&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Get list of file paths to publish
&lt;/span&gt;        &lt;span class="n"&gt;fAr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;source_path&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Connecting to rabbit '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;rbt_srv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlockingConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionParameters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rbt_srv&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Connected'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;# Create queue if it doesn't
&lt;/span&gt;            &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue_declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;trgt_queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;durable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;# Clear queue
&lt;/span&gt;            &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue_purge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;trgt_queue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fAr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# Publish file name to queue
&lt;/span&gt;                &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                    &lt;span class="n"&gt;routing_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;trgt_queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                    &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" [x] Sent"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"files to the queue"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"An error occurred while retrieving the file."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_tb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__traceback__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;RabbitMQ Publisher&lt;/em&gt;&lt;/strong&gt; &lt;a href="https://github.com/DarrylBrysonDev0/cookbook/blob/0777df343556355c219f82b776e08537d4215e18/assets/2021-02-08/rabbit-queue-pub-sub.py"&gt;&lt;em&gt;rabbit-queue-pub-sub.py&lt;/em&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;consume&lt;/span&gt; &lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;rbt_srv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'rabbit-queue'&lt;/span&gt;
    &lt;span class="n"&gt;src_queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'new_files'&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;' [-] Connecting to RabbitMQ server'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;rbt_srv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlockingConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionParameters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rbt_srv&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;' [+] Connected to RabbitMQ'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;# Declare source queue
&lt;/span&gt;            &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue_declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;src_queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;durable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" [*] Retrieved file path {0}"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="c1"&gt;# Ack to the queue message has been recieved successfuly
&lt;/span&gt;                &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_ack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delivery_tag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delivery_tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_qos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefetch_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;src_queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on_message_callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auto_ack&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;' [*] Waiting for messages. To exit press CTRL+C'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_consuming&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"An error occurred while retrieving the file."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_tb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__traceback__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;RabbitMQ Subscriber&lt;/em&gt;&lt;/strong&gt; &lt;a href="https://github.com/DarrylBrysonDev0/cookbook/blob/0777df343556355c219f82b776e08537d4215e18/assets/2021-02-08/rabbit-queue-pub-sub.py"&gt;&lt;em&gt;rabbit-queue-pub-sub.py&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#complete-script" class="anchor"&gt;
  &lt;/a&gt;
  Complete Script
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;2'&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;sftp-srv&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;atmoz/sftp&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;/mnt/d/GenStore/sample-data-set/survey-results:/home/admin/upload/raw:ro&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;/mnt/f/dept010/data-store/1mk3f5-e5ltb4-4r56yh/01/02:/home/admin/upload/weather-set&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;22:22"&lt;/span&gt;
    &lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;microservice-network&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;admin:pass:1001&lt;/span&gt;

  &lt;span class="na"&gt;rabbit-queue&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rabbitmq:3-management&lt;/span&gt;
    &lt;span class="na"&gt;hostname&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rabbit-1&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;RABBITMQ_ERLANG_COOKIE='Key_Link_k1'&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;15672:15672'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;5672:5672'&lt;/span&gt;
    &lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;microservice-network&lt;/span&gt;
&lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;microservice-network&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;external&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Interface hosts:&lt;/em&gt;&lt;/strong&gt; &lt;a href="https://github.com/DarrylBrysonDev0/cookbook/blob/0777df343556355c219f82b776e08537d4215e18/assets/2021-02-08/docker-compose.yml"&gt;&lt;em&gt;docker-compose.yaml&lt;/em&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Python Requirements:&lt;/em&gt;&lt;/strong&gt; &lt;a href="https://github.com/DarrylBrysonDev0/cookbook/blob/0777df343556355c219f82b776e08537d4215e18/assets/2021-02-08/requirements.txt"&gt;&lt;em&gt;requirements.txt&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>docker</category>
      <category>devops</category>
      <category>python</category>
      <category>rabbitmq</category>
    </item>
  </channel>
</rss>
