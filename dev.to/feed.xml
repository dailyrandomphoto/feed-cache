<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Adding Support for Multi-Audio Tracks in The Eyevinn Channel Engine</title>
      <author>Nicholas Frederiksen</author>
      <pubDate>Thu, 01 Jul 2021 07:57:06 +0000</pubDate>
      <link>https://dev.to/video/adding-support-for-multi-audio-tracks-in-the-eyevinn-channel-engine-2bii</link>
      <guid>https://dev.to/video/adding-support-for-multi-audio-tracks-in-the-eyevinn-channel-engine-2bii</guid>
      <description>&lt;p&gt;In this blog post, I'll describe how I extended the current demuxed audio feature so that the Channel Engine could play multiple audio tracks. I will also assume that reader is somewhat familiar with the HLS straming format and Channel Engine or has at least read the documentation in the Channel Engine git repo &lt;a href="https://github.com/Eyevinn/channel-engine"&gt;link&lt;/a&gt;, or this article &lt;a href="https://eyevinntechnology.medium.com/server-less-ott-only-playout-bc5a7f2e6d04"&gt;link&lt;/a&gt; beforehand.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;The Eyevinn Channel Engine is an Open-Source service that works well with muxed VODs, but when it comes to demuxed VODs, it does the bare minimum at the moment, namely just using the first audio track it could find. This demuxed support feature can certainly be extended. &lt;/p&gt;

&lt;p&gt;But before we get into it, I need to clarify what I mean when I say "audio tracks" and "audio groups", as I will be using these words throughout this post. &lt;/p&gt;

&lt;p&gt;In an HLS master manifest, you can have a media item with the attribute &lt;code&gt;TYPE=AUDIO&lt;/code&gt; with a reference to a media playlist manifest containing the audio segments. This is what I will be referring to as an "audio track". Multiple audio tracks can exist in the HLS master manifest. These tracks can be grouped/categorized, by the media item's GROUP-ID attribute. Audio tracks that have the same GROUP-ID value is what I will refer as an "audio group". In other words, an audio group consists of one or more audio tracks. GROUP-IDs are an HLS requirement for media items.&lt;/p&gt;

&lt;p&gt;Now, a quick overview as to how the old demuxed audio feature worked.&lt;/p&gt;

&lt;p&gt;The Channel Engine would create a master manifest for its channel stream based on the specifications detailed in the &lt;code&gt;ChannelManager&lt;/code&gt; object, which one passes as an option to the Channel Engine instance. If we passed a variable signaling the Channel Engine that we want to use demuxed content then the Channel Engine will do the following extra steps when creating the master manifest.&lt;/p&gt;

&lt;p&gt;The Channel Engine will add 1 media item of type audio to the master manifest with the GROUP-ID attribute set to the first GROUP-ID found in a stream item in the VOD asset's master manifest.&lt;/p&gt;

&lt;p&gt;Then when the audio track is requested by the player/client, the Channel Engine will respond with an audio playlist manifest. The playlist will have references to audio segments belonging to the VOD asset's first available audio track for that audio group. Even if there are multiple audio groups in the VOD, they won't be used. Even if there are multiple audio tracks within the audio groups, they won't be used. There is clearly potential here to add support for using more than one specific audio track and audio group.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#challenges"&gt;
  &lt;/a&gt;
  Challenges
&lt;/h3&gt;

&lt;p&gt;The task in question will have some implementation challenges. &lt;br&gt;
A few things needed to be taken into account. Namely:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to have the client select a track of a certain audio group.&lt;/li&gt;
&lt;li&gt;How to have the client select a certain language/audio track within the selected audio group.&lt;/li&gt;
&lt;li&gt;How to handle the case where the requested audio group is not present in the current VOD.&lt;/li&gt;
&lt;li&gt;How to handle the case where the requested language is not present amongst the current VOD's audio tracks for that audio group.&lt;/li&gt;
&lt;li&gt;How to handle VOD stitching when VODs have a different set of audio groups.&lt;/li&gt;
&lt;li&gt;How to handle VOD stitching when VODs have a different set of languages/audio tracks.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#delimitations"&gt;
  &lt;/a&gt;
  Delimitations
&lt;/h3&gt;

&lt;p&gt;My implemented solution in its current state did not cover every edge case. Meaning that some points mentioned in &lt;strong&gt;Challenges&lt;/strong&gt; have yet to be addressed. However, the implementation works fairly well for the most basic case and can be extended in the future to handle more edge cases.&lt;/p&gt;

&lt;p&gt;My solution will assume that every VOD uses the same audio GROUP-ID and uses mostly the same languages in their audio tracks.&lt;/p&gt;

&lt;p&gt;As a side-note, the effects of VODs not using the same GROUP-ID will result in an error. A proposed solution is mentioned in the &lt;strong&gt;Future Work&lt;/strong&gt; chapter.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h3&gt;

&lt;p&gt;The following steps give an overview of how I added support for multi-audio in the Channel Engine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Adding audio media items to the master manifest based on a set of predefined audio languages.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To address the challenge of how the client is to select a certain audio group and audio track, I extended the current method in place, which became a reiteration of the method used for selecting different VOD profiles.&lt;/p&gt;

&lt;p&gt;The plan was to let the client select a track based on what's been predefined. So to have it work like it does for VOD profiles, I needed to extend the &lt;code&gt;ChannelManager&lt;/code&gt; class with an extra function.&lt;/p&gt;

&lt;p&gt;Media Items are added to the Master Manifest with attribute values set according to a predefined JSON object, defined in a &lt;code&gt;_getAudioTracks()&lt;/code&gt; function in the &lt;code&gt;ChannelManager&lt;/code&gt; class/object.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t0B-euqH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9psssbj99ot492wk9oh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t0B-euqH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9psssbj99ot492wk9oh.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now the resulting master manifest may look something like this...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#EXTM3U
#EXT-X-VERSION:4
## Created with Eyevinn Channel Engine library (version=2.19.3)
##    https://www.npmjs.com/package/eyevinn-channel-engine
#EXT-X-SESSION-DATA:DATA-ID="eyevinn.tv.session.id",VALUE="1"
#EXT-X-SESSION-DATA:DATA-ID="eyevinn.tv.eventstream",VALUE="/eventstream/1"

# AUDIO groups
#EXT-X-MEDIA:TYPE=AUDIO,GROUP-ID="audio",LANGUAGE="en", NAME="English",AUTOSELECT=YES,DEFAULT=YES,CHANNELS="2",URI="master-audio_en.m3u8;session=1"
#EXT-X-MEDIA:TYPE=AUDIO,GROUP-ID="audio",LANGUAGE="sv", NAME="Swedish",AUTOSELECT=YES,DEFAULT=NO,CHANNELS="2",URI="master-audio_sv.m3u8;session=1"

#EXT-X-STREAM-INF:BANDWIDTH=6134000,RESOLUTION=1024x458,CODECS="avc1.4d001f,mp4a.40.2",AUDIO="audio"
master6134000.m3u8;session=1
#EXT-X-STREAM-INF:BANDWIDTH=2323000,RESOLUTION=640x286,CODECS="avc1.4d001f,mp4a.40.2",AUDIO="audio"
master2323000.m3u8;session=1
#EXT-X-STREAM-INF:BANDWIDTH=1313000,RESOLUTION=480x214,CODECS="avc1.4d001f,mp4a.40.2",AUDIO="audio"
master1313000.m3u8;session=1

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: Notice that GROUP-ID is not a field in the audioTrack JSON, and so the GROUP-ID in the master manifest's media items are actually permanently set to the first GROUP-ID found in the very first VOD. This is how it worked before, and my feature extension has kept it that way for now. See &lt;strong&gt;Delimitations&lt;/strong&gt;. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next was to make some small adjustments to the route handler (specifically &lt;code&gt;_handleAudioManifest()&lt;/code&gt;) for the endpoint of a URI in a media item. &lt;br&gt;
The Channel Engine reads parameter values from the client request in a clever way. Values can be extracted from the request path itself.&lt;br&gt;
Values extracted are the audio group Id and language. This tells us what segments we are to include in the media manifest response.      &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Make it possible in HLS-vodtolive, to load in all audio groups, and also all audio tracks for each audio group.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that we know what segments the client is looking for, how do we find them? This is where the Eyevinn dependency package &lt;code&gt;hls-vodtolive&lt;/code&gt; comes into play.&lt;/p&gt;

&lt;p&gt;In short, the &lt;code&gt;hls-vodtolive&lt;/code&gt; package creates an HLSVod class/object which given a VOD master manifest as input, will load and store all segments referenced in that manifest into a JSON object organized by profiles. An HLSVod object will also divide the segments into an array of subsets, that we call media sequences. So each subset/media sequence will be used to create a pseudo-live looking media manifest.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1-BotvSC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1htiuqwel07br58rueji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1-BotvSC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1htiuqwel07br58rueji.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This class however, did not properly load segments from audio media manifests. An extension was needed. &lt;/p&gt;

&lt;p&gt;Not going into detail, I can say that it was changed so that the HLSVod would load all audio segments from every audio media manifest and organize them by audio groups, then by languages.&lt;br&gt;
Effectively, storing all audio segments possible from the original VOD manifest.    &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Make it so that you can stitch audio tracks between two HLSVods.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This step involves more expansions to the &lt;code&gt;hls-vodtolive&lt;/code&gt; package. Expansions are done to the HLSVod class function &lt;code&gt;_loadPrevious()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You see, an HLSVod can load after another when using the function &lt;code&gt;loadAfter()&lt;/code&gt;, and when doing so will inherit some segments from the HLSVod before it. This basically makes it possible to create media sequences that smoothly go from the contents of one VOD to the other, using HLS discontinuity tags. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Look at the Channel Engine chapter in Server-less OTT-Only Playout article for more info on it &lt;a href="https://eyevinntechnology.medium.com/server-less-ott-only-playout-bc5a7f2e6d04"&gt;Link&lt;/a&gt;.    &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The tricky part is deciding who inherits what from who. &lt;br&gt;
Ideally, if the 2 HLSVods in question have the same set of languages and audio group names, then it's fairly straightforward who gets what. But if they have nothing in common, then it suddenly becomes ambiguous. However, it is probably more likely that the Channel Engine User is using VOD assets that have at least some common languages/audio tracks.  &lt;/p&gt;

&lt;p&gt;That being said, it is a possibility that the VOD assets may have named their GROUP-IDs differently. However, as of now, it is assumed that this is not the case. This addressed in the &lt;strong&gt;Delimitations&lt;/strong&gt; chapter, and then again in the &lt;strong&gt;Future Work&lt;/strong&gt; chapter below.&lt;/p&gt;

&lt;p&gt;See the figures below for a visual representation of the challenge. The figure depicts a scenario where the prior HLSVod has audio tracks for the languages English, Swedish, and Russian. While the current HLSVod has audio tracks for English, Swedish, and Norwegian. &lt;br&gt;
The outer box represents the current HLSVod object, and the inner colored boxes represent audio tracks in the HLSVod.&lt;br&gt;
The blue and red represent the prior VOD segments and current VOD segments respectively. Again it is assumed that both HLSVods have the same audio group.&lt;/p&gt;

&lt;p&gt;So... matching languages inherit segments from each other, but what segments does the unique languages inherit? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9GHlI4cA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9kgo2iuhk6mxmunxuk2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9GHlI4cA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9kgo2iuhk6mxmunxuk2.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The answer is... any segments really. What is important is that we can enable generating media sequences that transition smoothly and that the client gets the proper audio for the VOD. Sure it might not be in the expected language, but at least the HLS player will not be confused. &lt;/p&gt;

&lt;p&gt;However, I thought it would be best for the unique languages to inherit segments from the previous VOD's default language, or more specifically the first loaded language (which usually corresponds to the default language in a demuxed VOD).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eMCk4o10--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9b2m1grsfv31h8369pal.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eMCk4o10--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9b2m1grsfv31h8369pal.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lastly, in case a loaded language from the previous VOD did not get inherited at all, then we simply remove it from our collection of audio tracks for an audio group, so that we do not evoke any false positives when a request comes for that language.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s0imneuN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wvnc8wapa5qxko8n8amy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s0imneuN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wvnc8wapa5qxko8n8amy.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But this brings up an interesting question. What do we do if a request comes for a language that is not in the HLSVod's collection? &lt;/p&gt;

&lt;p&gt;Well, we simply provide a fallback track. In other words, let's say the client is requesting an audio track in the language of Russian but the current VOD only has English and Swedish, then we will respond with the English audio track instead, assuming that English was the first loaded audio track for the HLSVod.&lt;/p&gt;

&lt;p&gt;And that's all there was to it! &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7U5h1zmo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xncnqubaahd9gyrq28ks.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7U5h1zmo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xncnqubaahd9gyrq28ks.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
After these steps it now became possible to play, select, and transition between audio tracks for demuxed VODs in the Channel Engine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#future-work"&gt;
  &lt;/a&gt;
  Future Work
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add support for a fallback audio group&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adding a fallback audio group when an audio group is not found will help to ensure that the Channel Engine stream will always have audio to play. Doing this, it is important to make sure that every audio track in the fallback audio group has segments from the prior VOD stitched in front of it. It would probably work again to distribute segments from the prior VODs first loaded audio track for its first loaded audio group. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add support for presetting, selecting, and using multiple audio groups.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As of now, we only support the use of a single audio group. If there ever is a need to want to use more than one audio group at a time in Channel Engine, then we would need to expand channel options in the &lt;code&gt;ChannelManager&lt;/code&gt;. However, there will be a challenge in how we then deal with mapping between audio groups of different names among VODs.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Loading audio tracks that have the same language in a single VOD.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We do not support the loading of duplicate languages, but they do occur in HLS manifests. For example, a VOD could have an English track and an English Commentary track in it, both setting their language value to "en". In our current state, only the first English track would be loaded.&lt;br&gt;
Now the use case for having an English commentary track as a preset track is not very common, I'd imagine. But it could be nice to have support for it if it ever became a desired feature in Channel Engine.&lt;br&gt;
That said... An immediate workaround would be to prepare the HLS manifest beforehand and just make sure that every media item has a unique language value. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nicholas Frederiksen is a developer at Eyevinn Technology, the European leading independent consultancy firm specializing in video technology and media distribution.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you need assistance in the development and implementation of this, our team of video developers are happy to help you out. If you have any questions or comments just drop a line in the comments section to this post.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>streaming</category>
      <category>hls</category>
    </item>
    <item>
      <title>Throttling and Debouncing in ReactJS</title>
      <author>Manish Kumar Sahu</author>
      <pubDate>Thu, 01 Jul 2021 07:18:26 +0000</pubDate>
      <link>https://dev.to/trex777/throttling-and-debouncing-in-reactjs-1gil</link>
      <guid>https://dev.to/trex777/throttling-and-debouncing-in-reactjs-1gil</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;This article talks about how these two techniques can be applied to optimize website performance and covers how to make a optimized searchbar.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Suppose there is a program in which the programmer gives users to run any function, users can run them by firing events such as &lt;code&gt;click&lt;/code&gt;, &lt;code&gt;change&lt;/code&gt;, &lt;code&gt;resize&lt;/code&gt;, &lt;code&gt;scroll&lt;/code&gt; etc. So it's upto the user that how many times they want to run that function. The user can spam any number of times which is not good for the website, because those functions maybe going through heavy computations which may slow the website.&lt;/p&gt;

&lt;p&gt;Let's consider an example in which whenever user types in searchbar, &lt;code&gt;function&lt;/code&gt; is called which returns the total number of letter changes. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---0TEsA9h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s7hybjclcut49qkflnig.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---0TEsA9h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s7hybjclcut49qkflnig.gif" alt="search"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now imagine, if there is a program in which for each change there is an function call which have heavy computations, this will slow down the website.&lt;/p&gt;

&lt;p&gt;To prevent this kind of scenario, programmers use &lt;strong&gt;Throttling&lt;/strong&gt; and &lt;strong&gt;Debouncing&lt;/strong&gt; to limit the number of function calls so that even if the user spams, the performance will not be affected.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h1&gt;

&lt;p&gt;These two techniques are not something which is provided by javascript itself.&lt;br&gt;
These are the two techniques which uses web APIs i.e. &lt;code&gt;setTimeout()&lt;/code&gt; and &lt;code&gt;clearTimeout()&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;setTimeout()&lt;/code&gt; function takes a function and a time delay as parameters, call that function after the given delay and returns us a &lt;code&gt;timerId&lt;/code&gt; which we can store. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;clearTimeout()&lt;/code&gt; function takes that &lt;code&gt;timerId&lt;/code&gt; as a parameter and clears the timeout set by the &lt;code&gt;setTimeout()&lt;/code&gt; function.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#throttling"&gt;
  &lt;/a&gt;
  Throttling
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Throttling is a technique in which no matter how many times user fires the event, the function will run once in a given interval of time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Suppose there is an API which fetches some data from the server.&lt;br&gt;
Whenever the user searches something in the searchbar, then the &lt;code&gt;function&lt;/code&gt; searches the letters typed by the user and returns the data accordingly. By using &lt;code&gt;throttling&lt;/code&gt; here, the &lt;code&gt;function&lt;/code&gt; will be called once in every 1 second.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/throttling-prrcq?module=/src/App.jsx&amp;amp;runonclick=1"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let's examine what is happening in the code.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Whenever user types something, &lt;code&gt;handleChange()&lt;/code&gt; function is called which contains a &lt;code&gt;search()&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;search()&lt;/code&gt; function returns the data according to user typed letters, but it is not yet called.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;search()&lt;/code&gt; function is passed to &lt;code&gt;throttlingFunc()&lt;/code&gt; as a parameter with delay of 1 second.&lt;/li&gt;
&lt;li&gt;Inside &lt;code&gt;throttlingFunc()&lt;/code&gt;, it checks if there is some value in &lt;code&gt;timerId&lt;/code&gt; which is a global variable, if true it don't call &lt;code&gt;setTimeout()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If there is some value in &lt;code&gt;timerId&lt;/code&gt;, it calls the &lt;code&gt;setTimeout()&lt;/code&gt; which calls the &lt;code&gt;search()&lt;/code&gt; and sets previous value of &lt;code&gt;timerId&lt;/code&gt; as undefined.&lt;/li&gt;
&lt;li&gt;In this way the &lt;code&gt;search()&lt;/code&gt; function will be called only after 1 seconds when user types something.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#debouncing"&gt;
  &lt;/a&gt;
  Debouncing
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Debouncing is a technique in which no matter how many times user fires an event, the function will run only after a certain time after user stops firing events.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We will use the same API to fetch some data from the server and the same function which searches the data according to the letters typed by the user.But here, we will use &lt;code&gt;debouncing&lt;/code&gt; and the &lt;code&gt;function&lt;/code&gt; will be called after 1 second after user stops typing.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/debouncing-frtw4?module=/src/App.jsx&amp;amp;runonclick=1"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let's examine what is happening in the code.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Whenever user types something &lt;code&gt;handleChange()&lt;/code&gt; function is called which contains a &lt;code&gt;search()&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;search()&lt;/code&gt; function returns the data according to user typed letters, but it is not yet called.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;search()&lt;/code&gt; function is passed to &lt;code&gt;debouncingFunc()&lt;/code&gt; as a parameter with delay of 1 second.&lt;/li&gt;
&lt;li&gt;Inside &lt;code&gt;debouncingFunc()&lt;/code&gt;, &lt;code&gt;clearTimeout()&lt;/code&gt; clears the previous timeout by taking previous &lt;code&gt;timerId&lt;/code&gt; value.&lt;/li&gt;
&lt;li&gt;Then calls &lt;code&gt;setTimeout()&lt;/code&gt; which calls &lt;code&gt;search()&lt;/code&gt; and gives new &lt;code&gt;timerId&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In this way the &lt;code&gt;search()&lt;/code&gt; function will be called only after 1 seconds when user stops typing something.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In this article we understood how &lt;code&gt;debouncing&lt;/code&gt; and &lt;code&gt;throttling&lt;/code&gt; technique works while implementing it on a search function.&lt;/p&gt;

&lt;p&gt;Hope you find it helpful 😄 .&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.telerik.com/blogs/debouncing-and-throttling-in-javascript"&gt;https://www.telerik.com/blogs/debouncing-and-throttling-in-javascript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.ytimg.com/vi/mD-TCX2LWls/maxresdefault.jpg"&gt;Cover image&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>performance</category>
      <category>react</category>
    </item>
    <item>
      <title>How to create confetti animations using a button with tsParticles 🎉 </title>
      <author>Matteo Bruni</author>
      <pubDate>Thu, 01 Jul 2021 06:53:40 +0000</pubDate>
      <link>https://dev.to/matteobruni/how-to-create-confetti-animations-using-a-button-with-tsparticles-56nf</link>
      <guid>https://dev.to/matteobruni/how-to-create-confetti-animations-using-a-button-with-tsparticles-56nf</guid>
      <description>&lt;p&gt;tsParticles recently has been updated to version &lt;code&gt;1.30&lt;/code&gt; with new beautiful and realistic confetti animations.&lt;/p&gt;

&lt;p&gt;They are awesome but there's a lot to configure, right?&lt;/p&gt;

&lt;p&gt;Don't worry, there's a simpler way using the tsParticles confetti preset.&lt;/p&gt;

&lt;p&gt;Here a sample starting the animation when a button is clicked&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/matteobruni/embed/zYwYEgg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/matteobruni"&gt;
        matteobruni
      &lt;/a&gt; / &lt;a href="https://github.com/matteobruni/tsparticles"&gt;
        tsparticles
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      tsParticles - Easily create highly customizable particles animations and use them as animated backgrounds for your website. Ready to use components available for React, Vue.js (2.x and 3.x), Angular, Svelte, jQuery, Preact, Inferno.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://particles.js.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/58f22f0a546d5d7f34b4668dc842ac91b3a4cf9a5de72346559b7d15b13e587e/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f62616e6e6572322e706e67" alt="banner"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
tsParticles - TypeScript Particles&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;A lightweight TypeScript library for creating particles. Dependency free (*), browser ready and compatible with React, Vue, Angular, Svelte, jQuery, Preact, Inferno&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://openbase.com/js/tsparticles?utm_source=embedded&amp;amp;utm_medium=badge&amp;amp;utm_campaign=rate-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/303db015a31c411aee869f57d55a44a53cd2f5380d0de5ee8abecb337a9452a6/68747470733a2f2f6261646765732e6f70656e626173652e636f6d2f6a732f726174696e672f74737061727469636c65732e737667" alt="Rate on Openbase"&gt;&lt;/a&gt; &lt;a href="https://www.jsdelivr.com/package/npm/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8c64088d02effc095dd7386325d216ce6d6bd46513a88ed2274e0ec4e6d876cf/68747470733a2f2f646174612e6a7364656c6976722e636f6d2f76312f7061636b6167652f6e706d2f74737061727469636c65732f62616467653f7374796c653d726f756e646564" alt="jsDelivr"&gt;&lt;/a&gt; &lt;a href="https://cdnjs.com/libraries/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e9e5a7a72f7cbc65eedd0e4d7431e4d4762c472ad4a66b6648a8e74c2b6be331/68747470733a2f2f696d672e736869656c64732e696f2f63646e6a732f762f74737061727469636c6573" alt="Cdnjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e18baafcedd7efbbd13d6e2b1cf738c07ea898383c946e6e7b16400f813d70cb/68747470733a2f2f62616467652e667572792e696f2f6a732f74737061727469636c65732e737667" alt="npmjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bc16ec38506bbab6f6b729850ad28fd94a5643f1633b4356647033c3aa3fe102/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f74737061727469636c6573" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://lerna.js.org/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3bc63f921dd60bac6d91aa900ef570c928b2aa4c2124ed23647e8fe9d2232853/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d61696e7461696e6564253230776974682d6c65726e612d6363303066662e737667" alt="lerna"&gt;&lt;/a&gt; &lt;a href="https://www.codefactor.io/repository/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ce969771f1502f57861fe8ce7c787c209c50ef17c2e19f35cb1de0c960eba94a/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f6d617474656f6272756e692f74737061727469636c65732f6261646765" alt="CodeFactor"&gt;&lt;/a&gt; &lt;a href="https://www.codacy.com/manual/ar3s/tsparticles?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=matteobruni/tsparticles&amp;amp;utm_campaign=Badge_Grade" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f96d4d0dccc9c7491f3ed07af70a808b0fd4d2e4d863a1f7bb9e51e10ae526e/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6239383361616633343631613463343862316532656563636531666631643734" alt="Codacy Badge"&gt;&lt;/a&gt; &lt;a href="https://gitpod.io/#https://github.com/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/daadb4894128d1e19b72d80236f5959f1f2b47f9fe081373f3246131f0189f6c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f476974706f642d72656164792d2d746f2d2d636f64652d626c75653f6c6f676f3d676974706f64" alt="Gitpod Ready-to-Code"&gt;&lt;/a&gt; &lt;a href="https://repl.it/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/64adf1bd83058aa64f848245f74bef77cd7cc2a3f36343ac44d6d0c39cc41bc3/68747470733a2f2f7265706c2e69742f62616467652f6769746875622f6d617474656f6272756e692f74737061727469636c6573" alt="Run on Repl.it"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Do you want to use it on your website?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;This library is available on the two most popular CDNs and it's easy and ready to use, if you were using particles.js it's even easier&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You'll find the instructions &lt;a href="https://github.com/matteobruni/tsparticles/blob/main/README.md#library-installation"&gt;below&lt;/a&gt;, with all the links you need, and &lt;em&gt;don't be scared by &lt;strong&gt;TypeScript&lt;/strong&gt;, it's just the source language&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The output files are just JavaScript&lt;/strong&gt;. 🤩&lt;/p&gt;
&lt;p&gt;CDNs and &lt;code&gt;npm&lt;/code&gt; have all the sources you need in &lt;strong&gt;Javascript&lt;/strong&gt;, a bundle browser ready (tsparticles.min.js) and all files splitted for &lt;code&gt;import&lt;/code&gt; syntax.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you are still interested&lt;/strong&gt; some lines below there are some instructions for migrating from the old particles.js library.&lt;/p&gt;
&lt;h2&gt;
&lt;strong&gt;&lt;em&gt;Library installation&lt;/em&gt;&lt;/strong&gt;
&lt;/h2&gt;
&lt;h3&gt;
&lt;strong&gt;&lt;em&gt;Hosting / CDN&lt;/em&gt;&lt;/strong&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Please use this hosts or your own to&lt;/em&gt;&lt;/strong&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/matteobruni/tsparticles"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#how-to-use-it"&gt;
  &lt;/a&gt;
  How to use it
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#cdn-vanilla-js-jquery"&gt;
  &lt;/a&gt;
  CDN / Vanilla JS / jQuery
&lt;/h3&gt;

&lt;p&gt;The first step is installing &lt;a href="https://github.com/matteobruni/tsparticles"&gt;tsParticles&lt;/a&gt; following the instructions for&lt;br&gt;
vanilla javascript in the main project &lt;a href="https://github.com/matteobruni/tsparticles"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once added the script you need one more script to be included in your page (or you can download that&lt;br&gt;
from &lt;a href="https://www.jsdelivr.com/package/npm/tsparticles-preset-confetti"&gt;jsDelivr&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/tsparticles"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/tsparticles-preset-confetti"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;tsParticles&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tsparticles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;loadConfettiPreset&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tsparticles-preset-confetti&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This script &lt;strong&gt;MUST&lt;/strong&gt; be placed after the &lt;code&gt;tsParticles&lt;/code&gt; one.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#bundle"&gt;
  &lt;/a&gt;
  Bundle
&lt;/h4&gt;

&lt;p&gt;A bundled script can also be used, this will include every needed plugin needed by the preset.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/tsparticles-preset-confetti/dist/tsparticles.preset.confetti.bundle.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;

&lt;p&gt;Once the scripts are loaded you can set up &lt;code&gt;tsParticles&lt;/code&gt; like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;loadConfettiPreset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tsParticles&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;tsParticles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tsparticles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;preset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;confetti&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#alternative-usage"&gt;
  &lt;/a&gt;
  Alternative Usage
&lt;/h4&gt;

&lt;p&gt;This module exports another method for using the confetti preset&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;confetti&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tsparticles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/**
   * @deprecated use count property instead
   */&lt;/span&gt;
  &lt;span class="na"&gt;particleCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="cm"&gt;/**
   * @deprecated use position property instead
   */&lt;/span&gt;
  &lt;span class="na"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="c1"&gt;//------------------------------------------&lt;/span&gt;
  &lt;span class="na"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;spread&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;startVelocity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;decay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;gravity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;drift&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;ticks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ffffff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ff0000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;shapes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;square&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;circle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;scalar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;zIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;disableForReducedMotion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function is available for &lt;code&gt;import&lt;/code&gt; too in the &lt;code&gt;tsparticles-preset-confetti&lt;/code&gt; package&lt;/p&gt;

&lt;p&gt;This method doesn't need to call the &lt;code&gt;loadConfettiPreset&lt;/code&gt; method since it's called automatically.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#options"&gt;
  &lt;/a&gt;
  Options
&lt;/h5&gt;

&lt;p&gt;The &lt;code&gt;confetti&lt;/code&gt; first parameter is the &lt;code&gt;tsParticles&lt;/code&gt; container id and the second parameter is a single &lt;code&gt;options&lt;/code&gt; object,&lt;br&gt;
which has the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;count&lt;/code&gt; &lt;em&gt;Integer (default: 50)&lt;/em&gt;: The number of confetti to launch. More is always fun... but be cool, there's a lot of
math involved. (&lt;code&gt;particleCount&lt;/code&gt; can be used too, but it's deprecated)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;angle&lt;/code&gt; &lt;em&gt;Number (default: 90)&lt;/em&gt;: The angle in which to launch the confetti, in degrees: 90 is straight up.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;spread&lt;/code&gt; &lt;em&gt;Number (default: 45)&lt;/em&gt;: How far off center the confetti can go, in degrees. 45 means the confetti will launch
at the defined &lt;code&gt;angle&lt;/code&gt; plus or minus 22.5 degrees.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;startVelocity&lt;/code&gt; &lt;em&gt;Number (default: 45)&lt;/em&gt;: How fast the confetti will start going, in pixels.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;decay&lt;/code&gt; &lt;em&gt;Number (default: 0.9)&lt;/em&gt;: How quickly the confetti will lose speed. Keep this number between 0 and 1, otherwise
the confetti will gain speed. Better yet, just never change it.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;gravity&lt;/code&gt; &lt;em&gt;Number (default: 1)&lt;/em&gt;: How quickly the particles are pulled down: 1 is full gravity, 0.5 is half gravity,
etc., but there are no limits. You can even make particles go up if you'd like.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;drift&lt;/code&gt; &lt;em&gt;Number (default: 0)&lt;/em&gt;: How much to the side the confetti will drift. The default is 0, meaning that they will
fall straight down. Use a negative number for left and positive number for right.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ticks&lt;/code&gt; &lt;em&gt;Number (default: 200)&lt;/em&gt;: How many times the confetti will move. This is abstract... but play with it if the
confetti disappear too quickly for you.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;position&lt;/code&gt; &lt;em&gt;Object&lt;/em&gt;: Where to start firing confetti from. Feel free to launch off-screen if you'd like. (&lt;code&gt;origin&lt;/code&gt; can
be used too, but it's deprecated)

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;position.x&lt;/code&gt; &lt;em&gt;Number (default: 0.5)&lt;/em&gt;: The &lt;code&gt;x&lt;/code&gt; position on the page, with &lt;code&gt;0&lt;/code&gt; being the left edge and &lt;code&gt;1&lt;/code&gt; being the
right edge.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;position.y&lt;/code&gt; &lt;em&gt;Number (default: 0.5)&lt;/em&gt;: The &lt;code&gt;y&lt;/code&gt; position on the page, with &lt;code&gt;0&lt;/code&gt; being the top edge and &lt;code&gt;1&lt;/code&gt; being the
bottom edge.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;colors&lt;/code&gt; &lt;em&gt;Array&amp;lt;String&amp;gt;&lt;/em&gt;: An array of color strings, in the HEX format... you know, like &lt;code&gt;#bada55&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;shapes&lt;/code&gt; &lt;em&gt;Array&amp;lt;String&amp;gt;&lt;/em&gt;: An array of shapes for the confetti. The possible values are &lt;code&gt;square&lt;/code&gt; and &lt;code&gt;circle&lt;/code&gt;.
The default is to use both shapes in an even mix. You can even change the mix by providing a value such
as &lt;code&gt;['circle', 'circle', 'square']&lt;/code&gt; to use two third circles and one third squares.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;scalar&lt;/code&gt; &lt;em&gt;Number (default: 1)&lt;/em&gt;: Scale factor for each confetti particle. Use decimals to make the confetti smaller. Go
on, try teeny tiny confetti, they are adorable!&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;zIndex&lt;/code&gt; &lt;em&gt;Integer (default: 100)&lt;/em&gt;: The confetti should be on top, after all. But if you have a crazy high page, you
can set it even higher.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;disableForReducedMotion&lt;/code&gt; &lt;em&gt;Boolean (default: true)&lt;/em&gt;: Disables confetti entirely for users
that &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion"&gt;prefer reduced motion&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#customization"&gt;
  &lt;/a&gt;
  Customization
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Important ⚠️&lt;/strong&gt;&lt;br&gt;
You can override all the options defining the properties like in any standard &lt;code&gt;tsParticles&lt;/code&gt; installation. This works&lt;br&gt;
only with the classic &lt;code&gt;loadConfettiPreset&lt;/code&gt; method, the &lt;code&gt;confetti&lt;/code&gt; function has its own parameters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;tsParticles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tsparticles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;particles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#0000ff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#00ff00&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;preset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;confetti&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Like in the sample above, the white and red colors will be replaced by blue and lime.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reactjs-preact-inferno"&gt;
  &lt;/a&gt;
  React.js / Preact / Inferno
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;The syntax for &lt;code&gt;React.js&lt;/code&gt;, &lt;code&gt;Preact&lt;/code&gt; and &lt;code&gt;Inferno&lt;/code&gt; is the same&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This sample uses the class component syntax, but you can use hooks as well (if the library supports it).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Particles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-tsparticles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Main&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tsparticles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;loadConfettiPreset&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tsparticles-preset-confetti&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ParticlesContainer&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PureComponent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IProps&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// this customizes the component tsParticles installation&lt;/span&gt;
  &lt;span class="nx"&gt;customInit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// this adds the preset to tsParticles, you can safely use the&lt;/span&gt;
    &lt;span class="nx"&gt;loadConfettiPreset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;preset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;confetti&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Particles&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customInit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#vue-2x-and-3x"&gt;
  &lt;/a&gt;
  Vue (2.x and 3.x)
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;The syntax for &lt;code&gt;Vue.js 2.x&lt;/code&gt; and &lt;code&gt;3.x&lt;/code&gt; is the same&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;Particles&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"tsparticles"&lt;/span&gt; &lt;span class="na"&gt;:particlesInit=&lt;/span&gt;&lt;span class="s"&gt;"particlesInit"&lt;/span&gt; &lt;span class="na"&gt;url=&lt;/span&gt;&lt;span class="s"&gt;"http://foo.bar/particles.json"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;particlesInit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;loadConfettiPreset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#angular"&gt;
  &lt;/a&gt;
  Angular
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ng-particles&lt;/span&gt;
  &lt;span class="na"&gt;[id]=&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;
  &lt;span class="na"&gt;[options]=&lt;/span&gt;&lt;span class="s"&gt;"particlesOptions"&lt;/span&gt;
  &lt;span class="na"&gt;(particlesLoaded)=&lt;/span&gt;&lt;span class="s"&gt;"particlesLoaded($event)"&lt;/span&gt;
  &lt;span class="na"&gt;(particlesInit)=&lt;/span&gt;&lt;span class="s"&gt;"particlesInit($event)"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ng-particles&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;particlesInit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;loadConfettiPreset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#svelte"&gt;
  &lt;/a&gt;
  Svelte
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&amp;lt;Particles
        id="tsparticles"
        url="http://foo.bar/particles.json"
        on:particlesInit="{onParticlesInit}"
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;onParticlesInit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;loadConfettiPreset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>showdev</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 Blog Layout and Design Tips</title>
      <author>Alex Sanders</author>
      <pubDate>Thu, 01 Jul 2021 06:27:37 +0000</pubDate>
      <link>https://dev.to/alexsan28195851/5-blog-layout-and-design-tips-2ok2</link>
      <guid>https://dev.to/alexsan28195851/5-blog-layout-and-design-tips-2ok2</guid>
      <description>&lt;p&gt;When most businesses think about blogging, content is their only focus. And while content is obviously important, design and user experience (UX) matter as well. Ignore this element of the equation at your own risk.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-blog-layout-matters"&gt;
  &lt;/a&gt;
  Why Blog Layout Matters
&lt;/h2&gt;

&lt;p&gt;People don’t read. This might sound like an odd admission in an article discussing blogging, but it’s the truth.&lt;/p&gt;

&lt;p&gt;Then what do they do, you may ask? They skim, observe, and make immediate judgments about your brand, credibility, and trustworthiness based on how your blog looks. More specifically, they care about how it makes them feel.&lt;/p&gt;

&lt;p&gt;Will some people read your content and sink their teeth into the meatier aspects of each post? Certainly. (After all, you’re reading this article right here.) But the majority will form their first (and lasting) opinions based on how the blog looks and feels.&lt;/p&gt;

&lt;p&gt;If your blog looks unprofessional, chaotic, or inconsistent with the rest of your brand, you’ll experience a laundry list of negatives, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Low engagement. Roughly &lt;a href="https://www.shiftelearning.com/blog/bid/350326/studies-confirm-the-power-of-visuals-in-elearning"&gt;90 percent of information&lt;/a&gt; transmitted to the brain is visual. If a visitor finds your blog visually unappealing, then it’s automatically going to suppress their overall engagement. They’ll be less prone to actually read the content and evaluate the blog from an objective vantage point.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;High bounce rate. As you likely know, your bounce rate is simply a measurement of the number of people who enter your blog and then click away very quickly before clicking any other internal links or pages. If your blog layout looks like a hot mess, your bounce rate will be significantly higher than usual.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Low rate of return. When someone leaves your blog because of a bad user experience, it’s very unlikely that they’ll return again in the future. This means your blog is actively and permanently repelling potential readers/customers.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the other hand, if your blog looks professional, appealing, and consistent, people will engage with the content, stick around longer, return more frequently, and show a willingness to follow through on your calls-to-action (like subscribing to your email list, downloading a lead magnet, or purchasing a product).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-tips-for-a-blog-layout-that-flat-out-works"&gt;
  &lt;/a&gt;
  5 Tips for a Blog Layout That Flat Out Works
&lt;/h2&gt;

&lt;p&gt;Your blog’s layout and design are important factors that deserve more attention. But if you take the time to perfect this individual element of the big picture, it’ll only amplify your results.&lt;/p&gt;

&lt;p&gt;Here are a few tips for effective and high-converting blog layouts:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-keep-it-clean"&gt;
  &lt;/a&gt;
  1. Keep it Clean
&lt;/h3&gt;

&lt;p&gt;Clutter is the enemy of focus. If you want to increase engagement and get people to actually interact with your content, the layout has to be simple and clean.&lt;/p&gt;

&lt;p&gt;Generally speaking, a minimalist blog post layout is the way to go. This means lots of white space, simple contrast, and absolutely no unnecessary content, flashy graphics, or disruptive elements. &lt;/p&gt;

&lt;p&gt;Minimalist blog design is not the only option. There are other ways to achieve a clean look – so long as you’re strategic about how you do it. There’s a fine line between being creative and creating chaos. If a reader visits your blog and can’t find the content they’re looking for in a matter of seconds, you’re doing yourself a disservice. &lt;/p&gt;

&lt;p&gt;If you’d prefer to have your own custom layout coded and designed, more power to you. However, as &lt;a href="https://www.theblogstarter.com/"&gt;The Blog Starter&lt;/a&gt; mentions, there are much simpler and more cost-effective ways to achieve a clean look. WordPress bloggers, for example, can download a basic WordPress theme and install it on their blog.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-design-for-scannability"&gt;
  &lt;/a&gt;
  2. Design for Scannability
&lt;/h3&gt;

&lt;p&gt;Social media has trained people to be scanners rather than readers. Scrolling is now second nature. If you’re developing content and designing your blog with the expectation that people will read in a linear fashion, you’re missing an opportunity to engage your visitors. The key to successful blogging in 2021 and beyond is to design for scannability. &lt;/p&gt;

&lt;p&gt;A scannable blog is a blog that allows visitors to quickly scroll and still get a feel for what the content is all about. The best way to achieve a scannable blog is to incorporate a variety of elements like subheadings, bullets, pullout quotes, graphics, tables, and charts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-choose-a-font-you-can-read"&gt;
  &lt;/a&gt;
  3. Choose a Font You Can Read
&lt;/h3&gt;

&lt;p&gt;The right typography can make all the difference in the world. And like everything else, this element has the ability to either help or hamper your overall blog engagement.&lt;/p&gt;

&lt;p&gt;When it comes to typography, there are a few factors to consider. First off, consider the side. Generally speaking, you want the font size to be big enough to read without having to squint, but not so large that it consumes the entire screen. Somewhere between 16px and 18px is ideal for body text.&lt;/p&gt;

&lt;p&gt;As far as fonts go, avoid anything that has a novel feel (like cursive and exotic fonts). Good options include Arial, Georgia, and Helvetica Neue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-use-a-blog-card-layout"&gt;
  &lt;/a&gt;
  4. Use a Blog Card Layout
&lt;/h3&gt;

&lt;p&gt;At the moment, the most popular (and effective) blog layout is card-based design. &lt;a href="https://dribbble.com/tags/blog_card"&gt;A blog card layout&lt;/a&gt; uses digital “cards'' or containers to organize each individual post in the blog’s main navigation. It makes it easy for visitors to identify and separate different pieces of content for clarity. (Almost every major website, including Pinterest, Twitter, and Google’s search results now use some type of card layout.)&lt;/p&gt;

&lt;p&gt;When designing cards, the key is to include as much relevant information in the card as possible – without overcrowding or overwhelming. Some elements to consider: featured image, headline, author, post date, category, blog excerpt/preview, and a “read more” button.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-always-give-a-reader-somewhere-to-go"&gt;
  &lt;/a&gt;
  5. Always Give a Reader Somewhere to Go
&lt;/h3&gt;

&lt;p&gt;If a reader makes it all the way to the end of a blog post, it indicates that they’ve been hooked. Don’t miss the opportunity to capitalize on their engagement. Always offer somewhere else for the reader to and/or a specific action for them to take. This may include downloading a lead magnet, opting into your weekly newsletter, checking out related posts, or purchasing a related product. Just make sure there’s something for them to do. Otherwise, you risk having them leave with nothing to show for their time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#give-your-blog-an-unfair-advantage"&gt;
  &lt;/a&gt;
  Give Your Blog an Unfair Advantage
&lt;/h2&gt;

&lt;p&gt;Your blog’s layout will either help or hinder your blog’s copy. And while you certainly don’t need to be a world-class web designer, implementing a few of the tips outlined in this article will give you a massive head start in the right direction.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>ML in Golang</title>
      <author>Salah Elhossiny</author>
      <pubDate>Thu, 01 Jul 2021 06:25:40 +0000</pubDate>
      <link>https://dev.to/salah856/ml-in-go-3d2h</link>
      <guid>https://dev.to/salah856/ml-in-go-3d2h</guid>
      <description>&lt;h3&gt;
  &lt;a href="#calculating-simple-statistical-properties"&gt;
  &lt;/a&gt;
  Calculating simple statistical properties
&lt;/h3&gt;

&lt;p&gt;Statistical learning is a branch of applied statistics that is related to machine learning.&lt;/p&gt;

&lt;p&gt;Machine learning, which is closely related to computational statistics, is an area of computer science that tries to learn from data and make predictions about it without being specifically programmed to do so. &lt;/p&gt;

&lt;p&gt;In this article, you are going to learn how to calculate basic statistical properties such as the mean value, the minimum and the maximum values of your sample, the median value, and the variance of the sample. These values give you a good overview of your sample without going into too much detail. However, generic values that try to describe your sample can easily trick you by making you believe that you know your sample well without this being true.&lt;/p&gt;

&lt;p&gt;All these statistical properties will be computed in stats.go , which will be presented in five parts. Each line of the input file contains a single number, which means that the input file is read line by line. Invalid input will be ignored without any warning messages.&lt;/p&gt;

&lt;p&gt;Notice that input will be stored in a slice in order to use a separate function for calculating each property. Also, as you will see shortly, the values of the slice will be sorted before processing them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;"bufio"&lt;/span&gt;
  &lt;span class="s"&gt;"flag"&lt;/span&gt;
  &lt;span class="s"&gt;"fmt"&lt;/span&gt;
  &lt;span class="s"&gt;"io"&lt;/span&gt;
  &lt;span class="s"&gt;"math"&lt;/span&gt;
  &lt;span class="s"&gt;"os"&lt;/span&gt;
  &lt;span class="s"&gt;"sort"&lt;/span&gt;
  &lt;span class="s"&gt;"strconv"&lt;/span&gt;
  &lt;span class="s"&gt;"strings"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;meanValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;medianValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

 &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="c"&gt;// Odd&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;// Even&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;variance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

 &lt;span class="n"&gt;mean&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;meanValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"usage: stats filename&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

 &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#regression"&gt;
  &lt;/a&gt;
  Regression
&lt;/h2&gt;

&lt;p&gt;Regression is a statistical method for calculating relationships among variables. This section will implement linear regression, which is the most popular and simplest regression technique and a very good way to understand your data. Note that regression techniques are not 100% accurate, even if you use higher-order (nonlinear) polynomials. The key with regression, as with most machine learning techniques, is to find a good enough technique and not the perfect technique and model.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#linear-regression"&gt;
  &lt;/a&gt;
  Linear regression
&lt;/h3&gt;

&lt;p&gt;The idea behind linear regression is simple: you are trying to model your data using a first-degree equation. A first-degree equation can be represented as y = a x + b .&lt;/p&gt;

&lt;p&gt;There are many methods that allow you to find out that first-degree equation that will model your data – all techniques calculate a and b .&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementing-linear-regression"&gt;
  &lt;/a&gt;
  Implementing linear regression
&lt;/h3&gt;

&lt;p&gt;The Go code of this section will be saved in regression.go , which is going to be presented in three parts. The output of the program will be two floating-point numbers that define a and b in the first-degree equation.&lt;/p&gt;

&lt;p&gt;The first part of regression.go contains the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;


&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;"encoding/csv"&lt;/span&gt;
  &lt;span class="s"&gt;"flag"&lt;/span&gt;
  &lt;span class="s"&gt;"fmt"&lt;/span&gt;
  &lt;span class="s"&gt;"gonum.org/v1/gonum/stat"&lt;/span&gt;
  &lt;span class="s"&gt;"os"&lt;/span&gt;
  &lt;span class="s"&gt;"strconv"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;xy&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;
  &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"usage: regression filename&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt;

 &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;xy&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;records&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Expected two elements"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;continue&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ParseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="m"&gt;64&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ParseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="m"&gt;64&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LinearRegression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%.4v x + %.4v&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a = %.4v b = %.4v&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#classification"&gt;
  &lt;/a&gt;
  Classification
&lt;/h2&gt;

&lt;p&gt;In statistics and machine learning, classification is the process of putting elements into existing sets that are called categories. In machine learning, classification is considered a supervised learning technique, which is where a set that is considered to contain correctly identified observations is used for training before working with the actual data.&lt;/p&gt;

&lt;p&gt;A very popular and easy-to-implement classification method is called k-nearest neighbors (k-NN). The idea behind k-NN is that we can classify data items based on their similarity with other items. The k in k-NN denotes the number of neighbors that are going to be included in the decision, which means that k is a positive integer that is usually pretty small.&lt;/p&gt;

&lt;p&gt;The input of the algorithm consists of the k-closest training examples in the feature space. An object is classified by a plurality vote of its neighbors, with the object being assigned to the class that is the most common among its k-NN. If the value of k is 1 , then the element is simply assigned to the class that is the nearest neighbor according to the distance metric used. The distance metric depends on the data you are dealing with. As an example, you will need a different distance metric when working with complex numbers and another when working with points in three-dimensional space.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;


&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;

 &lt;span class="s"&gt;"flag"&lt;/span&gt;
 &lt;span class="s"&gt;"fmt"&lt;/span&gt;
 &lt;span class="s"&gt;"strconv"&lt;/span&gt;
 &lt;span class="s"&gt;"github.com/sjwhitworth/golearn/base"&lt;/span&gt;
 &lt;span class="s"&gt;"github.com/sjwhitworth/golearn/evaluation"&lt;/span&gt;
 &lt;span class="s"&gt;"github.com/sjwhitworth/golearn/knn"&lt;/span&gt;

&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"usage: classify filename k&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;dataset&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;rawData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ParseCSVToInstances&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;cls&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;knn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewKnnClassifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"euclidean"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"linear"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The knn.NewKnnClassifier() method returns a new classifier. The last parameter of the function is the number of neighbors that the classifier will have.&lt;/p&gt;

&lt;p&gt;The final part of classify.go is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;
&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InstancesTrainTestSplit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rawData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;confusionMat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;evaluation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetConfusionMatrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;evaluation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetSummary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;confusionMat&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#working-with-tensorflow"&gt;
  &lt;/a&gt;
  Working with tensorflow
&lt;/h2&gt;

&lt;p&gt;TensorFlow is a rather famous open-source platform for machine learning. In order to use TensorFlow with Go, you will first need to download a Go package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
 $ go get github.com/tensorflow/tensorflow/tensorflow/go

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, for the aforementioned command to work, the C interface for TensorFlow should be already installed. On a macOS Mojave machine, this can be installed as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew install tensorflow

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the C interface is not installed, and you try to install the Go package for TensorFlow, you will get the following error message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
$ go get github.com/tensorflow/tensorflow/tensorflow/go
# github.com/tensorflow/tensorflow/tensorflow/go

ld: library not found for -ltensorflow clang: error: linker command failed with exit code 1 (use -v to see invocation)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As TensorFlow is pretty complex, it would be good to execute the following command in order to validate your installation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go test github.com/tensorflow/tensorflow/tensorflow/go

ok github.com/tensorflow/tensorflow/tensorflow/go  0.109s

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's begin with some code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;tf&lt;/span&gt; &lt;span class="s"&gt;"github.com/tensorflow/tensorflow/tensorflow/go"&lt;/span&gt;
  &lt;span class="s"&gt;"github.com/tensorflow/tensorflow/tensorflow/go/op"&lt;/span&gt;
  &lt;span class="s"&gt;"fmt"&lt;/span&gt;
 &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewScope&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Const&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Using TensorFlow version: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

 &lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Finalize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;sess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewSession&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;sess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.amazon.com/Mastering-production-applications-concurrency-structures-ebook/dp/B07WC24RTQ"&gt;&lt;br&gt;
Mastering Go Book&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Amazon Web Services- An Overview</title>
      <author>Neha Soni</author>
      <pubDate>Thu, 01 Jul 2021 06:24:05 +0000</pubDate>
      <link>https://dev.to/nehasoni__/amazon-web-services-an-overview-2okc</link>
      <guid>https://dev.to/nehasoni__/amazon-web-services-an-overview-2okc</guid>
      <description>&lt;p&gt;Amazon Web Services(AWS) is a secure cloud services platform that offers a broad set of cloud-based products including compute services, storage, analytics, networking, databases, developer tools, IoT, security, and management tools, with pay-as-you-go pricing. In this blog post, I am going to give an Overview of AWS.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#amazon-web-services-overview"&gt;
  &lt;/a&gt;
  Amazon Web Services Overview
&lt;/h1&gt;

&lt;p&gt;AWS is a cloud services platform provided by Amazon. In 2002, the AWS platform was launched and it kept on evolving. In 2006, AWS began offering IT infrastructure services to businesses in the form of web services. Today, it provides nearly 175 services to the developers so they can access them from anywhere at the time of need. It has customers in over 190 countries worldwide. Many companies like Netflix, Twitch, LinkedIn, Facebook, ESPN, BBC, etc., use AWS services. &lt;/p&gt;

&lt;p&gt;Amazon offers many services for application development and analytics. Here is the snapshot of the products offered by AWS:-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AB5IZwNI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625032013015/ifg4Bzxdq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AB5IZwNI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625032013015/ifg4Bzxdq.png" alt="Screenshot 2021-06-29 at 10.43.02 PM.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Note: These are just domains and each domain has several services.&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
Let's talk about the domains which are widely used:-&lt;br&gt;
&lt;strong&gt;1.) Compute&lt;/strong&gt;&lt;br&gt;
Compute domain includes the services related to high-end servers that are used to host a website, process backend data, etc. It includes the following services:-&lt;br&gt;
a.) EC2 (Elastic Compute Cloud)&lt;br&gt;
b.) Lambda&lt;br&gt;
c.) Elastic Beanstalk&lt;br&gt;
d.) Amazon LightSail&lt;br&gt;
e.) Elastic Load Balancer&lt;br&gt;
f.) Autoscaling&lt;br&gt;
...etc&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.) Storage Services&lt;/strong&gt;&lt;br&gt;
AWS provides highly available, and highly durable storage services for backing up information, archiving, and disaster recovery. It includes the following services:&lt;br&gt;
a.) S3 (Simple Storage Service)&lt;br&gt;
b.) Amazon Glacier&lt;br&gt;
c.) AWS Snowball&lt;br&gt;
d.) Amazon Elastic File System ( EFS )&lt;br&gt;
e.) Amazon Elastic Block Store ( EBS )&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.) Database Services&lt;/strong&gt;&lt;br&gt;
AWS provides services that can help you monitor and manage your databases for better productivity. It includes the following services:&lt;br&gt;
a.) Amazon Aurora &lt;br&gt;
b.) Amazon RDS&lt;br&gt;
c.) Amazon DynamoDB &lt;br&gt;
d.) Amazon RedShift &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.) Migration Services&lt;/strong&gt;&lt;br&gt;
This domain deals with the transferring of data to and from the AWS infrastructure. It includes the following services:&lt;br&gt;
a.) AWS Database Migration Service &lt;br&gt;
b.) AWS SnowBall&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.) Networking and Content Delivery Services&lt;/strong&gt;&lt;br&gt;
The Networking and Content Delivery domain offers the highest network availability amongst all cloud service providers, scales your request, handling capacity, and connects your physical network to your virtual network. It includes the following services:&lt;br&gt;
a.) Amazon Route 53 &lt;br&gt;
b.) AWS CloudFront&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6.) Management Tools&lt;/strong&gt;&lt;br&gt;
The Management Tools domain allows you to manage all of your AWS resources on AWS infrastructure. It includes the following services:&lt;br&gt;
a.) AWS CloudWatch &lt;br&gt;
b.) AWS CloudFormation&lt;br&gt;
c.) AWS CloudTrail&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7.) Security &amp;amp; Identity, Compliance Services&lt;/strong&gt;&lt;br&gt;
The Security &amp;amp; Identity, Compliance Services deals with user rights and authenticity. It is used to provide security to your AWS resources. It includes the following services:&lt;br&gt;
a.) AWS IAM &lt;br&gt;
b.) AWS KMS&lt;br&gt;
c.) AWS Shield&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#set-up-free-tier-account"&gt;
  &lt;/a&gt;
  Set up Free Tier account
&lt;/h1&gt;

&lt;p&gt;AWS provides 12 months of Free Tier account to new subscribers to get hands-on experience with all the AWS cloud services. But if you consume more than the Free Tier thresholds you are charged at the standard Amazon rates for that service.&lt;br&gt;
If you have any queries regarding  AWS Free Tier visit  &lt;a href="https://aws.amazon.com/free/free-tier-faqs/"&gt;Amazon AWS Free Tier FAQs&lt;/a&gt;&lt;br&gt;
Ok, let’s get started on creating your Amazon AWS Free Tier account.&lt;br&gt;
&lt;strong&gt;Step 1:-&lt;/strong&gt; Open your favorite browser and navigate to  &lt;a href="https://aws.amazon.com/free/?all-free-tier.sort-by=item.additionalFields.SortRank&amp;amp;all-free-tier.sort-order=asc&amp;amp;awsf.Free%20Tier%20Types=*all&amp;amp;awsf.Free%20Tier%20Categories=*all"&gt;AWS Free Tier Page&lt;/a&gt; &lt;br&gt;
&lt;strong&gt;Step 2:-&lt;/strong&gt; Choose &lt;strong&gt;Create an AWS Account.&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xuxnh7OL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625043789271/JEbt1aklV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xuxnh7OL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625043789271/JEbt1aklV.png" alt="Screenshot 2021-06-30 at 1.57.19 AM.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Step 3:-&lt;/strong&gt; It will ask for your email address, create a password, and give your AWS account a name. After entering your account information, click Continue.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0LPpmPN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625044034769/OmqyTyRhG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0LPpmPN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625044034769/OmqyTyRhG.png" alt="Screenshot 2021-06-30 at 2.04.25 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:-&lt;/strong&gt; Select your account type (Profesional/ Personal). Fill in the correct information to validate your account if you’re going to create personal use then click on “personal Account” else use “Company Account”, Accept the Terms and&lt;br&gt;
conditions and then click on Create Account and Continue.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KuI9e3mi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625044364369/vr8DsY8yu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KuI9e3mi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625044364369/vr8DsY8yu.png" alt="Screenshot 2021-06-30 at 2.10.10 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5:-&lt;/strong&gt;  To be able to create a Free Tier account, you will need to enter your credit card details. This is in case you use more than what the free tier allows. As mentioned at the beginning of this article, if you use more than the Free Tier thresholds, Amazon will start to bill you. Make sure to provide proper contact details to get the Verification code from AWS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UNoSTnj4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625044540189/pv3SfHcm3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UNoSTnj4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625044540189/pv3SfHcm3.png" alt="Screenshot 2021-06-30 at 2.13.55 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 6:-&lt;/strong&gt; In this step, it will take you to the payment gateway to validate your payment information and for your credit card verification, Amazon will charge the minimum price based on Country. Here I have provided India, so Amazon charged 2 INR.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 7:-&lt;/strong&gt;  Amazon will confirm your identity by sending you a text message or giving you a voice call. Fill in the details and click on Send SMS.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rUDTr4-R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625045339126/EomQrLDvm.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rUDTr4-R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625045339126/EomQrLDvm.jpeg" alt="06-amazon-aws-free-tier-account.jpeg"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Step 8:-&lt;/strong&gt; After clicking on Send SMS or Call me Now, you will immediately receive a call or SMS from Amazon, for verification code, Enter your code then click on Verify Code.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rfO4s8LM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625045409919/4XWNSjGkwa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rfO4s8LM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625045409919/4XWNSjGkwa.png" alt="verification.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Step 9:-&lt;/strong&gt; There are 3 Support Plans you can choose. For the free tier, we will be selecting the Basic Plan. Click on Free.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--THanqlP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625045511835/hQUpTAVcH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--THanqlP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625045511835/hQUpTAVcH.png" alt="select-plan.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And Congratulations, Your Amazon AWS Free Tier account has now been created.&lt;/strong&gt;&lt;br&gt;
Now simply login to your AWS account. Click on ‘Sign in to the Console’. Choose the root user and enter the email address that you used for your Free Tier account. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RAJPw5QZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625045791032/vuaBViXUH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RAJPw5QZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625045791032/vuaBViXUH.png" alt="Screenshot 2021-06-30 at 2.35.31 AM.png"&gt;&lt;/a&gt;&lt;br&gt;
Enter the captcha and click done.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ty8HuWTb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625045854030/0YBKyXZtV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ty8HuWTb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625045854030/0YBKyXZtV.png" alt="Screenshot 2021-06-30 at 2.36.46 AM.png"&gt;&lt;/a&gt;&lt;br&gt;
Then enter in your password and click submit.&lt;br&gt;
You have now successfully signed in to the AWS Management Console&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T4Z3o7rh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625045976615/Rks8lzqHZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T4Z3o7rh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625045976615/Rks8lzqHZ.png" alt="Screenshot 2021-06-30 at 2.38.18 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all for this blog post. In the next blog post, I will try to explain the IAM concept.&lt;br&gt;
If you enjoyed learning and find it useful please do like and share so that, it reaches others as well 🤝&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading 😃
&lt;/h3&gt;

&lt;p&gt;I would ❤ to connect with you at  &lt;a href="https://twitter.com/nehasoni__"&gt;Twitter&lt;/a&gt;  |  &lt;a href="https://www.linkedin.com/in/neha-soni-70a6231b1/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/nehasoni05"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me know in the comment section if you have any doubts or feedback.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You should definitely check out my other Blogs:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/cloud-computing-an-overview-4ib3"&gt;Cloud Computing- An Overview&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/how-to-build-a-strong-professional-network-online-b7k"&gt;How to Build a Strong Professional Network Online&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/plasma-donation-website-using-mern-stack-26f5"&gt;Plasma Donation Website&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/random-quote-generator-using-html-css-and-javascript-3gbp"&gt;Random Quote Generator Using HTML, CSS, and JavaScript&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/digital-clock-using-javascript-2648"&gt;Digital Clock using JavaScript&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/introduction-to-javascript-basics-g6n"&gt;Introduction to JavaScript: Basics&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/playing-with-javascript-objects-k4h"&gt;Playing with JavaScript Objects&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nehasoni__/7-javascript-data-structures-you-must-know-57ah"&gt;7 JavaScript Data Structures you must know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/digital-clock-using-javascript-2648"&gt;Digital Clock using JavaScript&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/introduction-to-reactjs-3553"&gt;Introduction to ReactJS
&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See you in my next Blog article, Take care!!&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Happy Learning😃😃&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>cloudskills</category>
      <category>devops</category>
    </item>
    <item>
      <title>Redis Streams in Action - Part 4 (Serverless Go app to monitor tweets processor)</title>
      <author>Abhishek Gupta</author>
      <pubDate>Thu, 01 Jul 2021 06:10:03 +0000</pubDate>
      <link>https://dev.to/azure/redis-streams-in-action-part-4-serverless-go-app-to-monitor-tweets-processor-2n4a</link>
      <guid>https://dev.to/azure/redis-streams-in-action-part-4-serverless-go-app-to-monitor-tweets-processor-2n4a</guid>
      <description>&lt;p&gt;Welcome to this series of blog posts which covers &lt;a href="https://redis.io/topics/streams-intro"&gt;Redis Streams&lt;/a&gt; with the help of a practical example. We will use a sample application to make Twitter data available for search and query in real-time. &lt;a href="https://redisearch.io/"&gt;RediSearch&lt;/a&gt; and &lt;a href="https://redis.io/topics/streams-intro"&gt;Redis Streams&lt;/a&gt; serve as the backbone of this solution that consists of several co-operating components, each of which will we covered in a dedicated blog post. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The code is available in this GitHub repo - &lt;a href="https://github.com/abhirockzz/redis-streams-in-action"&gt;https://github.com/abhirockzz/redis-streams-in-action&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We will continue from where we left off in the previous blog post and see how to build a monitoring app to make the overall system more robust in the face of high load or failure scenarios. This is because our very often, data processing applications either slow down (due to high data volumes) or may even crash/stop due to circumstances beyond our control. If this happens with our Tweets processing application, the messages that were assigned to a specific instance will be left unprocessed. The monitoring component covered in this blog post, checks pending Tweets (using &lt;code&gt;XPENDING&lt;/code&gt;), claims (&lt;code&gt;XCLAIM&lt;/code&gt;), processes (store them as &lt;code&gt;HASH&lt;/code&gt; using &lt;code&gt;HSET&lt;/code&gt;) and finally acknowledges them (&lt;code&gt;XACK&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OsKixZqe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zcbm6qyuz6ub6bh7yznq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OsKixZqe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zcbm6qyuz6ub6bh7yznq.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a Go application which will be deployed to Azure Functions - yes, we will be using a Serverless model, wherein the monitoring system will execute based on a pre-defined Timer trigger. As always, we will first configure and deploy it to Azure, see it working and finally walk through the code.&lt;/p&gt;

&lt;p&gt;Before we move on, here is some background about Go support in Azure Functions. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serverless-go-apps-on-azure-thanks-to-custom-handlers"&gt;
  &lt;/a&gt;
  Serverless Go apps on Azure, thanks to Custom Handlers
&lt;/h2&gt;

&lt;p&gt;Those who have worked with Azure Functions might recall that Go is &lt;em&gt;not&lt;/em&gt; one of the language handlers that is supported by default. That's where &lt;a href="https://docs.microsoft.com/azure/azure-functions/functions-custom-handlers?WT.mc_id=data-17927-abhishgu"&gt;Custom Handlers&lt;/a&gt; come into the picture.&lt;/p&gt;

&lt;p&gt;In a nutshell, a Custom Handler is a lightweight web server that receive events from the Functions host. The only thing you need to implement a Custom Handler in your favorite runtime/language is - HTTP support! &lt;/p&gt;

&lt;p&gt;An event trigger (via HTTP, Storage, Event Hubs etc.) invokes the Functions host. The way Custom Handlers differ from traditional functions is that the Functions host acts as a middle man: it issues a request payload to the web server of the Custom Handler (the function) along with a &lt;em&gt;payload&lt;/em&gt; that contains trigger, input binding data and other metadata for the function. The function returns a response back to the Functions host which passes data from the response to the function's output bindings for processing.&lt;/p&gt;

&lt;p&gt;Here is a summary of how Custom Handlers work at a high level (the diagram below has been picked from the documentation)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yivf32Hn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.microsoft.com/en-us/azure/azure-functions/media/functions-custom-handlers/azure-functions-custom-handlers-overview.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yivf32Hn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.microsoft.com/en-us/azure/azure-functions/media/functions-custom-handlers/azure-functions-custom-handlers-overview.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alright, let's move on to the practical bits now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h2&gt;

&lt;p&gt;Please make sure that you read part 2, 3 of this series and have the respective applications up and running. Our monitoring application will build on top of the Tweets producer and processor services that you deploy.&lt;/p&gt;

&lt;p&gt;You will need an Azure account which &lt;a href="(https://azure.microsoft.com/free/?WT.mc_id=data-17927-abhishgu)"&gt;you can get for free&lt;/a&gt; and the &lt;a href="https://docs.microsoft.com/cli/azure/install-azure-cli?WT.mc_id=data-17927-abhishgu"&gt;Azure CLI&lt;/a&gt;. Make sure to &lt;a href="https://golang.org/dl/"&gt;download and install Go&lt;/a&gt; if you don't have it already and also install the &lt;a href="https://docs.microsoft.com/azure/azure-functions/functions-run-local?tabs=macos%2Ccsharp%2Cbash&amp;amp;WT.mc_id=data-17927-abhishgu#v2"&gt;Azure functions Core Tools&lt;/a&gt; - this will allow you to deploy the function using a CLI (and also run it test and debug it locally)&lt;/p&gt;

&lt;p&gt;The upcoming sections will guide you how to deploy and configure the Azure Function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploy-the-monitoring-service-to-azure-functions"&gt;
  &lt;/a&gt;
  Deploy the monitoring service to Azure Functions
&lt;/h2&gt;

&lt;p&gt;You will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create the an Azure Functions app&lt;/li&gt;
&lt;li&gt;Configure it&lt;/li&gt;
&lt;li&gt;Deploy the Function to the app that you created&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Start by creating a &lt;a href="https://docs.microsoft.com/azure/azure-resource-manager/management/manage-resource-groups-portal?WT.mc_id=data-17927-abhishgu"&gt;Resource Group&lt;/a&gt; to host all the components of the solution.&lt;/p&gt;

&lt;p&gt;Search for &lt;strong&gt;Function App&lt;/strong&gt; in the Azure Portal and click &lt;strong&gt;Add&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xHGSGylL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqft9fui63f2lyp4adda.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xHGSGylL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqft9fui63f2lyp4adda.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter the required details: you should select &lt;strong&gt;Custom Handler&lt;/strong&gt; as the &lt;strong&gt;Runtime stack&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vj-B1et2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56jbqmm49i69a0wk0rbh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vj-B1et2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56jbqmm49i69a0wk0rbh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;Hosting&lt;/strong&gt; section, choose &lt;strong&gt;Linux&lt;/strong&gt; and &lt;strong&gt;Consumption (Serverless)&lt;/strong&gt; for &lt;strong&gt;Operating system&lt;/strong&gt; and &lt;strong&gt;Plan type&lt;/strong&gt; respectively.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e3fV50AA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqwnpp28kcfw45at8gcb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e3fV50AA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqwnpp28kcfw45at8gcb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enable Application Insights (if you need to)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fsONlF-h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7v5tula7t83xwwsz6zqt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fsONlF-h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7v5tula7t83xwwsz6zqt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Review the final settings and click &lt;strong&gt;Create&lt;/strong&gt; to proceed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--91TNgHoV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39ptz8ytwxuab85f4ztk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--91TNgHoV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39ptz8ytwxuab85f4ztk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the process is complete, the following resource will also be created along with the Function App:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.microsoft.com/azure/app-service/overview-hosting-plans?WT.mc_id=data-17927-abhishgu"&gt;App Service plan&lt;/a&gt; (a Consumption/Serverless plan in this case)&lt;/li&gt;
&lt;li&gt;An &lt;a href="https://docs.microsoft.com/azure/storage/common/storage-account-overview?WT.mc_id=data-17927-abhishgu"&gt;Azure Storage account&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;An &lt;a href="https://docs.microsoft.com/azure/azure-monitor/app/app-insights-overview?WT.mc_id=data-17927-abhishgu"&gt;Azure Application Insights&lt;/a&gt; function)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#update-the-function-app-configuration"&gt;
  &lt;/a&gt;
  Update the Function App configuration
&lt;/h3&gt;

&lt;p&gt;Our function needs a few environment variables to work properly - these can be added as Function Configuration using the Azure portal. Here is the list:&lt;/p&gt;

&lt;p&gt;Redis connectivity details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;REDIS_HOST&lt;/code&gt; - host and port for Redis instance e.g. myredis:10000&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;REDIS_PASSWORD&lt;/code&gt; - access key (password) for Redis instance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Redis Stream info:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;STREAM_NAME&lt;/code&gt; - the name of the Redis Stream (use &lt;code&gt;tweets_stream&lt;/code&gt; as the value)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;STREAM_CONSUMER_GROUP_NAME&lt;/code&gt; - name of the Redis Streams consumer group (use &lt;code&gt;redisearch_app_group&lt;/code&gt; as the value)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Monitoring app metadata:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;MONITORING_CONSUMER_NAME&lt;/code&gt; - name of the consumer instance represented by the monitoring app (it is part of the aforementioned consumer group)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;MIN_IDLE_TIME_SEC&lt;/code&gt; - only pending messages that are older than the specified time interval will be claimed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tkRtzaKe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lh1qej0pur744qaw7ok9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tkRtzaKe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lh1qej0pur744qaw7ok9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#were-now-ready-to-deploy-the-function"&gt;
  &lt;/a&gt;
  We're now ready to deploy the function
&lt;/h3&gt;

&lt;p&gt;First, clone the GitHub repo and build the function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/abhirockzz/redis-streams-in-action
&lt;span class="nb"&gt;cd &lt;/span&gt;redis-streams-in-action/monitoring-app

&lt;span class="nv"&gt;GOOS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;linux go build &lt;span class="nt"&gt;-o&lt;/span&gt; processor_monitor cmd/main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;GOOS=linux&lt;/code&gt; is used to build a &lt;code&gt;Linux&lt;/code&gt; executable since we chose a &lt;code&gt;Linux&lt;/code&gt; OS for our Function App&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To deploy, use the Azure Functions core tools CLI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;func azure functionapp publish &amp;lt;enter name of the Azure Function app&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once completed, you should see the following logs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Getting site publishing info...
Uploading package...
Uploading 3.71 MB &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="c"&gt;###############################################################################]&lt;/span&gt;
Upload completed successfully.
Deployment completed successfully.
Syncing triggers...
Functions &lt;span class="k"&gt;in &lt;/span&gt;streams-monitor:
    monitor - &lt;span class="o"&gt;[&lt;/span&gt;timerTrigger]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see the function in the Azure portal as well:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O5MyvFDu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/apotjm8lyer6737t00xs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O5MyvFDu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/apotjm8lyer6737t00xs.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The function is configured to trigger every &lt;code&gt;20&lt;/code&gt; seconds (as per &lt;a href="https://github.com/abhirockzz/redis-streams-in-action/blob/master/monitoring-app/monitor/function.json"&gt;function.json&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"bindings"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"timerTrigger"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"direction"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"in"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"req"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"schedule"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"*/20 * * * * *"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#monitoring-the-monitoring-app"&gt;
  &lt;/a&gt;
  Monitoring the monitoring app!
&lt;/h2&gt;

&lt;p&gt;As before, can introspect the state of our system using &lt;code&gt;redis-cli&lt;/code&gt; - execute the &lt;a href="https://redis.io/commands/XPENDING"&gt;XPENDING&lt;/a&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;XPENDING tweets_stream redisearch_app_group
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will an output similar to this (the numbers will differ in your case depending on how many tweets processor instances you were running and for how long):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;1&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;integer&lt;span class="o"&gt;)&lt;/span&gt; 209
2&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"1620973121009-0"&lt;/span&gt;
3&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"1621054539960-0"&lt;/span&gt;
4&lt;span class="o"&gt;)&lt;/span&gt; 1&lt;span class="o"&gt;)&lt;/span&gt; 1&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"consumer-1f20d41d-e63e-40d2-bc0f-749f11f15026"&lt;/span&gt;
      2&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"3"&lt;/span&gt;
   2&lt;span class="o"&gt;)&lt;/span&gt; 1&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"monitoring_app"&lt;/span&gt;
      2&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"206"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As explained before, the monitoring app will &lt;em&gt;claim&lt;/em&gt; pending messages which haven't been processed by the other consumers (active or inactive). In the output above, notice that the no. messages currently being processed by &lt;code&gt;monitoring_app&lt;/code&gt; (name of our consumer) is &lt;code&gt;206&lt;/code&gt; - it actually claimed these from another consumer instance(s). Once these messages have been claimed, their ownership moves from their original consumer to the &lt;code&gt;monitoring_app&lt;/code&gt; consumer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can check the same using &lt;code&gt;XPENDING tweets_stream redisearch_app_group&lt;/code&gt; again, but it might be hard to detect since the messages actually get processed pretty quickly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Out of the &lt;code&gt;206&lt;/code&gt; messages that were claimed, only the ones that have not being processed in the last &lt;code&gt;10&lt;/code&gt; seconds (this is the &lt;code&gt;MIN_IDLE_TIME_SEC&lt;/code&gt; we had specified) will be processed - others will be ignored and picked up in the next run by &lt;code&gt;XPENDING&lt;/code&gt; call (if they are still in an unprocessed state). This is because we want to give some time for our consumer application to finish their work - 10 seconds is a pretty generous time-frame for the processing that involves saving to &lt;code&gt;HASH&lt;/code&gt; using &lt;code&gt;HSET&lt;/code&gt; followed by &lt;code&gt;XACK&lt;/code&gt;. . &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please note that the 10 second time interval used above has been used as example and you should determine these figures based on the end to end latencies required for your data pipelines/processing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You have complete flexibility in terms of how you want to run/operate such a "monitoring" component. I chose a serverless function but you could run it as standalone program, as a scheduled Cron job or even as a Kubernetes Job!&lt;/p&gt;

&lt;p&gt;Don't forget to execute &lt;code&gt;RediSearch&lt;/code&gt; queries to validate that you can search for tweets based on multiple criteria:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;FT.SEARCH tweets-index hello
FT.SEARCH tweets-index hello|world
FT.SEARCH tweets-index &lt;span class="s2"&gt;"@location:India"&lt;/span&gt;

FT.SEARCH tweets-index &lt;span class="s2"&gt;"@user:jo* @location:India"&lt;/span&gt;
FT.SEARCH tweets-index &lt;span class="s2"&gt;"@user:jo* | @location:India"&lt;/span&gt;

FT.SEARCH tweets-index &lt;span class="s2"&gt;"@hashtags:{cov*}"&lt;/span&gt;
FT.SEARCH tweets-index &lt;span class="s2"&gt;"@hashtags:{cov*|Med*}"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have seen things in action, let's explore the code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-walk-through"&gt;
  &lt;/a&gt;
  Code walk through
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Please refer to the &lt;a href="https://github.com/abhirockzz/redis-streams-in-action/tree/master/monitoring-app/cmd"&gt;code on GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The app uses the excellent &lt;a href="https://github.com/go-redis/redis"&gt;go-redis client library&lt;/a&gt;. As usual, it all starts with connecting to Redis (note the usage of &lt;code&gt;TLS&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Options&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Addr&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Password&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TLSConfig&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;tls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;MinVersion&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VersionTLS12&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;

    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then comes the part where bulk of the processing happens - think of it as workflow with sub-parts:&lt;/p&gt;

&lt;p&gt;We call &lt;code&gt;XPENDING&lt;/code&gt; to detect no. of pending messages e.g. &lt;code&gt;XPENDING tweets_stream group1&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;numPendingMessages&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XPending&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;streamName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumerGroupName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Val&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To get the pending messages, we invoke a different variant of &lt;code&gt;XPENDING&lt;/code&gt;, to which we pass on the no. of messages we obtained in previous call&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;xpendingResult&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XPendingExt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XPendingExtArgs&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;streamName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Group&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;consumerGroupName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;End&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"+"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;numPendingMessages&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now claim the pending messages - the ownership of these will be changes from the previous consumer to the new consumer (&lt;code&gt;monitoringConsumerName&lt;/code&gt;) whose name we specified&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;xclaim&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XClaim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XClaimArgs&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;streamName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Group&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;consumerGroupName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Consumer&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;monitoringConsumerName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MinIdle&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minIdleTimeSec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Messages&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;toBeClaimed&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the ownership is transferred, we can process them. This involves, adding tweet info to &lt;code&gt;HASH&lt;/code&gt; (using &lt;code&gt;HSET&lt;/code&gt;) and acknowledging successful processing (&lt;code&gt;XACK&lt;/code&gt;). &lt;code&gt;goroutine&lt;/code&gt;s are used to keep things efficient for e.g. if we get &lt;code&gt;100&lt;/code&gt; claimed messages in a batch, a scatter-gather process is folloeed where a &lt;code&gt;goroutine&lt;/code&gt; is spawned to process each of these message. A &lt;a href="https://golang.org/pkg/sync/#WaitGroup"&gt;sync.WaitGroup&lt;/a&gt; is used to "wait" for the current batch to complete before looking for next set of pending messages (if any).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;claimed&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;xclaim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Val&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;exitSignalled&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;waitGroup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweetFromStream&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;hashName&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s%s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indexDefinitionHashPrefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tweetFromStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

                &lt;span class="n"&gt;processed&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
                &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;waitGroup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;}()&lt;/span&gt;

                &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;hashName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;claimed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="c"&gt;// don't proceed (ACK) if HSET fails&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XAck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;streamName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumerGroupName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tweetFromStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="n"&gt;processed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
            &lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="n"&gt;claimed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;waitGroup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before we dive into the other areas, it might help to understand the nitty gritty by exploring the code (which is relatively simple by the way)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-note-on-the-application-structure"&gt;
  &lt;/a&gt;
  Quick note on the application structure
&lt;/h3&gt;

&lt;p&gt;Here is how the app is setup (folder structure):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
├── cmd
│   └── main.go
├── monitor
│   └── &lt;span class="k"&gt;function&lt;/span&gt;.json
├── go.mod
├── go.sum
├── host.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;host.json&lt;/code&gt; tells the Functions host where to send requests by pointing to a web server capable of processing HTTP events. Notice the &lt;code&gt;customHandler.description.defaultExecutablePath&lt;/code&gt; which defines that &lt;code&gt;processor_monitor&lt;/code&gt; is the name of the executable that'll be used to run the web server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"extensionBundle"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Microsoft.Azure.Functions.ExtensionBundle"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"[1.*, 2.0.0)"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"customHandler"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"defaultExecutablePath"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"processor_monitor"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"enableForwardingHttpRequest"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"logging"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"logLevel"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Trace"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#thats-a-wrap"&gt;
  &lt;/a&gt;
  That's a wrap!
&lt;/h2&gt;

&lt;p&gt;this brings us to the end of this blog series. let's recap what we learnt:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the first part you got an overview of the use case, architecture, it's components, along with an introduction to Redis Streams and &lt;code&gt;RediSearch&lt;/code&gt;. It setup the scene for rest of the series.&lt;/li&gt;
&lt;li&gt;Part two dealt with the specifics of the Rust based tweets consumer app that consumed from the Twitter Streaming API and queued up the tweets in Redis Streams for further processing.&lt;/li&gt;
&lt;li&gt;Third part was all about the Java app that processed these tweets using by leveraging the Redis Streams Consumer Group feature and scaling out processing across multiple instances.&lt;/li&gt;
&lt;li&gt;... and final part (this one) was all about the Go app to monitor tweets that have been abandoned (in the pending entry list) either due to processing failure or consumer instance failure.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you found this useful and apply it to building scalable solutions with Redis Streams. Happy coding!&lt;/p&gt;

</description>
      <category>redis</category>
      <category>database</category>
      <category>programming</category>
      <category>serverless</category>
    </item>
    <item>
      <title>CSS- The Cascade !</title>
      <author>Garima</author>
      <pubDate>Thu, 01 Jul 2021 05:49:58 +0000</pubDate>
      <link>https://dev.to/garimasharma/css-the-cascade-8i0</link>
      <guid>https://dev.to/garimasharma/css-the-cascade-8i0</guid>
      <description>&lt;p&gt;Sometimes two or more competing CSS rules are applied to a particular element. In this post we will find out how browser choose which property to use for the element and how to control it.&lt;/p&gt;

&lt;p&gt;CSS stands for Cascading Stylesheets. The Cascade is the algorithm for solving conflicts where multiple CSS rules are applied to an HTML element. If we have this &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; Let's Check which color is chosen by the browser &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/garima-sharma814/embed/QWvwRRq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So why this happened ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Understanding the cascade algorithm helps us understand how the browser resolves the conflicts like these .. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-cascade-can-split-into-4-stages"&gt;
  &lt;/a&gt;
  The Cascade can split into 4 stages
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. Position and order of appearance&lt;/strong&gt; :- The order in which the CSS rule appear in the Stylesheet. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Specificity&lt;/strong&gt; :- An algorithm which determines which CSS property have strongest preference.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Origin:&lt;/strong&gt; the order of when CSS appears and where it comes from, whether that is a browser style, CSS from a browser extension, or your authored CSS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Importance&lt;/strong&gt; :- some CSS rules are weighted more heavily than others, especially with the &lt;code&gt;!important&lt;/code&gt; rule type.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#position-and-order-of-appearance"&gt;
  &lt;/a&gt;
  Position and Order of Appearance
&lt;/h2&gt;

&lt;p&gt;The order in which our CSS rules appear in the Stylesheet and their appearance is always taken into consideration by the cascade to calculate the conflicts if any. &lt;/p&gt;

&lt;p&gt;The demo right at the start of this blog is the most straightforward example of positioning. There are two rules that have selectors of identical specificity, so the last one to be declared won.&lt;/p&gt;

&lt;p&gt;Styles can come from various sources on an HTML page, such as a &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag, an embedded &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag, and inline CSS as defined in an element's style attribute.&lt;/p&gt;

&lt;p&gt;If you have a &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; that includes CSS at the top of your HTML page, then another &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; that includes CSS at the bottom of your page, the bottom &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; will have the most preference. The same thing happens with embedded &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; elements, too. They get more specific, the further down the page they are.&lt;/p&gt;

&lt;p&gt;This ordering also applies to embedded &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; elements. If they are declared before a &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;, the linked stylesheet's CSS will have the most specificity.&lt;/p&gt;

&lt;p&gt;An inline style attribute with CSS declared in it will override all other CSS, regardless of its position, unless a declaration has &lt;code&gt;!important&lt;/code&gt; defined.&lt;/p&gt;

&lt;p&gt;Position also applies in the order of your CSS rule. In this example, the element will have a purple background because background: purple was declared last. Because the green background was declared before the purple background, it is now ignored by the browser.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.my-element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;purple&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#specificity"&gt;
  &lt;/a&gt;
  Specificity
&lt;/h2&gt;

&lt;p&gt;Specificity is an algorithm which determines which CSS selector is the most specific, those calculations. By making a rule more specific, you can cause it to be applied even if some other CSS that matches the selector appears later in the CSS.&lt;/p&gt;

&lt;p&gt;Suppose that we are working this HTML and CSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hello, Specificity!&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's two competing rules here. One will color the button red and the other will color it blue. &lt;/p&gt;

&lt;p&gt;Which rule gets applied to the element? &lt;br&gt;
Understanding the CSS specification's algorithm about specificity is the key to understanding how CSS decides between competing rules.&lt;/p&gt;

&lt;p&gt;Specificity is one of the four distinct stages of the cascade.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#preference-of-selectors-from-lowest-to-highest"&gt;
  &lt;/a&gt;
  Preference of Selectors from lowest to highest
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. Universal Selector&lt;/strong&gt;&lt;br&gt;
A universal selector (*) has no specificity and gets 0 points. This means that any rule with 1 or more points will override it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We usually use this to reset the default properties of CSS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Element or pseudo-element selector&lt;/strong&gt;&lt;br&gt;
An element (type) or &lt;a href="https://dev.to/garimasharma/pseudo-classes-and-pseudo-elements-npp"&gt;pseudo-element&lt;/a&gt; selector gets 1 point of specificity .&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#type-selector"&gt;
  &lt;/a&gt;
  Type selector
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#pseudoelement-selector"&gt;
  &lt;/a&gt;
  Pseudo-element selector
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;::selection&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;3. Class, pseudo-class, or attribute selector&lt;/strong&gt;&lt;br&gt;
A class, pseudo-class or attribute selector gets 10 points of specificity.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#class-selector"&gt;
  &lt;/a&gt;
  Class selector
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.my-class&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#pseudoclass-selector"&gt;
  &lt;/a&gt;
  Pseudo-class selector
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#attribute-selector"&gt;
  &lt;/a&gt;
  Attribute selector
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;'#'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The :not() pseudo-class itself adds nothing to the specificity calculation. However, the selectors passed in as arguments do get added to the specificity calculation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;.my-class&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This example would have 11 points of specificity because it has one type selector (div) and one class inside the :not().&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. ID selector&lt;/strong&gt;&lt;br&gt;
An ID selector gets 100 points of specificity, as long as you use an ID selector (#myID) and not an attribute selector ([id="myID"]).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#myID&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;5. Inline style attribute&lt;/strong&gt;&lt;br&gt;
CSS applied directly to the style attribute of the HTML element, gets a specificity score of 1,000 points. This means that in order to override it in CSS, you have to write an extremely specific selector.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: red"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;6. !important rule&lt;/strong&gt;&lt;br&gt;
Lastly, an !important at the end of a CSS value gets a specificity score of 10,000 points. This is the highest specificity that one individual item can get.&lt;/p&gt;

&lt;p&gt;An !important rule is applied to a CSS property, so everything in the overall rule (selector and properties) does not get the same specificity score.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.my-class&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* 10,000 points */&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* 10 points */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are a lot of &lt;a href="https://dev.to/garimasharma/css-selectors-3co4"&gt;Selectors&lt;/a&gt; with their specificities for more go to references.&lt;/p&gt;

&lt;p&gt;References&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity"&gt;MDN specificity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://specifishity.com/"&gt;CSS SpciFISHity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Top software for download paid and premium bootstrap templates</title>
      <author>Shivam Rohilla</author>
      <pubDate>Thu, 01 Jul 2021 05:34:20 +0000</pubDate>
      <link>https://dev.to/shivamrohilla/top-software-for-download-paid-and-premium-bootstrap-templates-1ghb</link>
      <guid>https://dev.to/shivamrohilla/top-software-for-download-paid-and-premium-bootstrap-templates-1ghb</guid>
      <description>&lt;p&gt;Hello, guys in this post, you will see how to download a paid templates for free, you don't need to pay anyone for these templates, just copy the link and paste it into the software and set the root directory or path, and then start the progress your template download within 5 minutes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;My Linkedin:- https://www.linkedin.com/in/shivamrohillaa/

Post Link:- https://webdevcodes.com/python/top-software-for-download-paid-and-premium-bootstr/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the top software.&lt;/p&gt;

&lt;p&gt;1) HTTrack Website Copier.&lt;br&gt;
Download Link:- &lt;a href="https://www.httrack.com/"&gt;https://www.httrack.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Download this software from the website.&lt;/p&gt;

&lt;p&gt;Steps for download the bootstrap template&lt;/p&gt;

&lt;p&gt;Step 1&lt;/p&gt;

&lt;p&gt;Enter the name of your project or whatever you want to enter the name.&lt;/p&gt;

&lt;p&gt;then, select the path where your website is download.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r1f7hgFW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jotz4hzrg9sv6krpy5xi.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r1f7hgFW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jotz4hzrg9sv6krpy5xi.gif" alt="snap1_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 2&lt;br&gt;
Copy the link of the template and paste it into this box.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AfgnZSAR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvjve8gs5lgj3ewvb82b.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AfgnZSAR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvjve8gs5lgj3ewvb82b.gif" alt="snap2_b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 3&lt;br&gt;
then click on next and your download is started and after 3 to 5 minutes your download will be complete.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aE7Mo_s5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2a5g6azdvbegqjd1eank.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aE7Mo_s5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2a5g6azdvbegqjd1eank.gif" alt="snap4_a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now this is working &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JxHZU-24--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3bvybvp49yo3lueoihz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JxHZU-24--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3bvybvp49yo3lueoihz.gif" alt="snap5_a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and finally, your paid template is downloaded to your computer.&lt;br&gt;
If you face any error and this software shows some error, so there is another software name and this is NCollector Studio and guys this software is more powerful than this if you want a link so please comment so contact me on linkedin&lt;/p&gt;

&lt;p&gt;Thank You&lt;/p&gt;

&lt;p&gt;Shivam Rohilla | Python Developer&lt;/p&gt;

</description>
      <category>programming</category>
      <category>html</category>
      <category>css</category>
      <category>career</category>
    </item>
    <item>
      <title>Learning Python-Basic course: Day 8, Unicode in Python</title>
      <author>Aatmaj</author>
      <pubDate>Thu, 01 Jul 2021 05:07:07 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-basic-course-day-8-unicode-in-python-4pdc</link>
      <guid>https://dev.to/aatmaj/learning-python-basic-course-day-8-unicode-in-python-4pdc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#welcome-till-now-we-have-dealt-enough-with-numbers-now-is-the-time-to-add-unicode-to-our-arsenal"&gt;
  &lt;/a&gt;
  🤟 Welcome! Till now, we have dealt enough with numbers. Now is the time to add Unicode to our arsenal.😎
&lt;/h2&gt;




&lt;p&gt;&lt;strong&gt;Unicode in Python&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Python and Java support Unicode characters.😃 The &lt;code&gt;ord()&lt;/code&gt; method converts a character into its Unicode code. It takes one argument: a string containing a single Unicode character. In other words, given string of length 1, the function returns an integer giving it's corresponding Unicode value. For example, &lt;code&gt;ord('a')&lt;/code&gt; returns the integer 97, &lt;code&gt;ord('€')&lt;/code&gt; (Euro sign) returns 8364.&lt;br&gt;
Here is a sample which takes 10 characters and prints their Unicode values-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="c1"&gt;#same as (0,10)
&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Please enter any character "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is a output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter any character Z
90
Please enter any character e
101
Please enter any character p
112
Please enter any character h
104
Please enter any character y
121
Please enter any character r
114
Please enter any character 1
49
Please enter any character 2
50
Please enter any character #
35
Please enter any character $
36
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try it out with your names too!!!&lt;/p&gt;




&lt;p&gt;The &lt;code&gt;chr()&lt;/code&gt; function does just the opposite as the &lt;code&gt;ord()&lt;/code&gt; function. It converts integers into Unicode characters. Example if we input 97, the output will be 'a', and &lt;code&gt;chr(€)=8364&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is a sample program print Unicode characters-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
 &lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Please enter lower limit "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
 &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Please enter upper limit "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let us input some values. OUTPUT-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter lower limit 33
Please enter upper limit 37
33   !
34   "
35   #
36   $
Please enter lower limit 57
Please enter upper limit 62
57   9
58   :
59   ;
60   &amp;lt;
61   =
Please enter lower limit 85
Please enter upper limit 89
85   U
86   V
87   W
88   X
Please enter lower limit 97
Please enter upper limit 103
97   a
98   b
99   c
100   d
101   e
102   f
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is another sample to prove that &lt;code&gt;ord()&lt;/code&gt; and &lt;code&gt;chr()&lt;/code&gt; are absolutely opposite of each other&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;Istrue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="c1"&gt;#Istrue is a boolean value with value default True
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
 &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
     &lt;span class="n"&gt;Istrue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Istrue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Exercise 1) If we interchange &lt;code&gt;ord()&lt;/code&gt; and &lt;code&gt;chr()&lt;/code&gt;, will the program still work? &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/e3b422f89dca0694d7376aebc2a222675515f4c5/Basic/Day%208/Exercise%20solutions/Exercise%201.md"&gt;Answer: NO&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) Write a program to give the following output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter any capital letter G
A B C D E F G 
A B C D E F G 
A B C D E F G 
A B C D E F G 
A B C D E F G 
A B C D E F G 
A B C D E F G 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/66648cf59324f2510524ca855e06084df6484bf0/Basic/Day%208/Exercise%20solutions/Exercise%202.py"&gt;Answer here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3) Modify the above program slightly to give the following output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter any capital letter G
A 
A B 
A B C 
A B C D 
A B C D E 
A B C D E F 
A B C D E F G 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/6e4ee4362ba48198d34ef068da0b9105dfb55c93/Basic/Day%208/Exercise%20solutions/Exercise%203.py"&gt;Answer here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4) Modify the above program to give the following output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter any capital letter K
A 
B A 
C B A 
D C B A 
E D C B A 
F E D C B A 
G F E D C B A 
H G F E D C B A 
I H G F E D C B A 
J I H G F E D C B A 
K J I H G F E D C B A 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/d081c79ed7bcb1393777e367c944524054233621/Basic/Day%208/Exercise%20solutions/Exercise%204.py"&gt;Answer here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The programs may look repetitive, but trust me, they provide a good practice for practicing nested for loops.&lt;/p&gt;




&lt;p&gt;✌️So friends that's all for now. 😊 Hope you all are having fun.😎 Please let me know in the comment section below 👇. And don't forget to like the post if you did. 😍 I am open to any suggestions or doubts. 🤠 Just post in the comments below or gmail me. 😉&lt;br&gt;
Thank you all👍&lt;/p&gt;

</description>
      <category>python</category>
      <category>learningpython</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Easily Update npm Packages Without the Fear of Breaking the Application</title>
      <author>Yogesh Chavan</author>
      <pubDate>Thu, 01 Jul 2021 05:06:19 +0000</pubDate>
      <link>https://dev.to/myogeshchavan97/easily-update-npm-packages-without-the-fear-of-breaking-the-application-3670</link>
      <guid>https://dev.to/myogeshchavan97/easily-update-npm-packages-without-the-fear-of-breaking-the-application-3670</guid>
      <description>&lt;p&gt;In this article, we'll explore how you can easily update npm packages used in your application without worrying about breaking the application functionality.&lt;/p&gt;

&lt;p&gt;So let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#semantic-versioning"&gt;
  &lt;/a&gt;
  Semantic Versioning
&lt;/h2&gt;

&lt;p&gt;Semantic versioning is such an important thing that, every developer needs to understand it whether you are a Node, React or Angular developer.&lt;/p&gt;

&lt;p&gt;It’s also one of the frequently asked interview questions.&lt;/p&gt;

&lt;p&gt;It defines how to manage the dependencies of npm packages that we install.&lt;/p&gt;

&lt;p&gt;So let's understand some basics.&lt;/p&gt;

&lt;p&gt;When we create any new Node or React project from scratch we execute the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;

&lt;span class="nx"&gt;OR&lt;/span&gt; 

&lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a basic &lt;code&gt;package.json&lt;/code&gt; file where we can manage the dependencies of packages.&lt;/p&gt;

&lt;p&gt;Normally, the &lt;code&gt;package.json&lt;/code&gt; will look like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vTCSOt5C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624438862534/A81yJK88J.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTCSOt5C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624438862534/A81yJK88J.png" alt="image_1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, &lt;code&gt;package.json&lt;/code&gt; has a specified version property that starts with 1.0.0 for a new project.&lt;/p&gt;

&lt;p&gt;Let’s say we install the specific version of the &lt;code&gt;express&lt;/code&gt; package using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;17.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will get added to the dependencies section of &lt;code&gt;package.json&lt;/code&gt; as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dependencies&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^4.17.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, you will see that a new &lt;code&gt;package-lock.json&lt;/code&gt; file will also be created. It's a very important file that contains the exact version and download URL of the main package and its dependent packages installed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You should never edit or delete the &lt;code&gt;package-lock.json&lt;/code&gt;. It will be updated automatically when packages are installed or removed.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-semantic-versioning"&gt;
  &lt;/a&gt;
  Understanding Semantic Versioning
&lt;/h2&gt;

&lt;p&gt;As you have seen, the dependencies mentioned in &lt;code&gt;package.json&lt;/code&gt; file is an object with key-value pairs.&lt;/p&gt;

&lt;p&gt;The value is a combination of 3 digits separated by the dot operator. Let's say the version is a.b.c.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First value (&lt;code&gt;a&lt;/code&gt; in &lt;code&gt;a.b.c&lt;/code&gt;) specifies the major version of the package — It means this version has Major code changes and it might contain breaking API changes.&lt;/li&gt;
&lt;li&gt;Second value (&lt;code&gt;b&lt;/code&gt; in &lt;code&gt;a.b.c&lt;/code&gt;) specifies the minor version which contains minor changes but will not contain breaking API changes.&lt;/li&gt;
&lt;li&gt;Third value (&lt;code&gt;c&lt;/code&gt; in &lt;code&gt;a.b.c&lt;/code&gt;) specifies the patch version which usually contains bug fixes.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are creating your own npm packages, you should also follow these version rules.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If there is a major change in the package, increment the 1st digit of the version property in &lt;code&gt;package.json&lt;/code&gt; by one while publishing the package to the npm repository. &lt;/p&gt;

&lt;p&gt;For minor changes increment the second digit and for bug fixes increment the third digit value by one.&lt;/p&gt;

&lt;p&gt;You can also notice that there is a caret symbol (^) just before the version number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^3.17.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are two mostly used symbols that have specific meanings. Let’s understand them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;^ : This symbol means when we want to update all the packages mentioned in &lt;code&gt;package.json&lt;/code&gt;, using &lt;code&gt;npm update&lt;/code&gt; command, will update only patch and minor released version. So if your current version is 3.16.1 and there is a minor version released so the package will be updated to 3.17.1. If there is only a patch version released then it will be updated to the latest available patch version like 3.16.3.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that, If there is a ^ symbol before the version number, the package will never be updated to a major version if you run &lt;code&gt;npm update&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;If you want to installl the major available version you can specify that version using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;17.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to install the latest available version of the package execute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;latest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;~ : This symbol means the package will be updated to only patch releases i.e only the last digit so from 4.16.1 to 4.16.2 or 4.16.3 but not 4.17.1 or 5.16.1.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can install only those versions which are provided by that npm package (express package in our case).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UCVlRvyB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624438873230/WVM35qIHT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UCVlRvyB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624438873230/WVM35qIHT.png" alt="image_2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you go to the npm repository of the express package &lt;a href="https://www.npmjs.com/package/express"&gt;HERE&lt;/a&gt;, you can see all the versions of the package If you click on the &lt;code&gt;264 Versions&lt;/code&gt; tab. In this case, 264 versions as of today.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iwuu1w5q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624438890137/mSC-CJyDz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iwuu1w5q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624438890137/mSC-CJyDz.png" alt="image_3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-useful-commands"&gt;
  &lt;/a&gt;
  Some useful commands
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;If you want to see the current and latest versions of all the packages from &lt;code&gt;package.json&lt;/code&gt;, you can execute the &lt;code&gt;npm outdated&lt;/code&gt; command&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aOISNbI2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624438899834/jPhNMkFx4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aOISNbI2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624438899834/jPhNMkFx4.png" alt="image_4.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To get a list of all the globally installed packages, execute the following command:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;depth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lmUb6tkt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624438905479/xAKY66Vn_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lmUb6tkt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624438905479/xAKY66Vn_.png" alt="image_5.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To get the report of all the vulnerable packages in your project and instructions on how to fix them, execute the &lt;code&gt;npm audit&lt;/code&gt; command. If you are on Mac, you may need to add a sudo in front of it like:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;audit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;This command will list out all the vulnerable packages, link with more information about the vulnerability, its severity (low, medium or high) and command that need to be executed to fix the vulnerability.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You should run the &lt;code&gt;npm audit&lt;/code&gt; command for your project once in a while, to see if there are any vulnerabilities reported recently and fix them whenever required to keep the packages up-to-date for the security of your application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h3&gt;

&lt;p&gt;Check out my recently published &lt;a href="https://master-redux.yogeshchavan.dev/"&gt;Mastering Redux&lt;/a&gt; course.&lt;/p&gt;

&lt;p&gt;In this course, you will learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic and advanced Redux&lt;/li&gt;
&lt;li&gt;How to manage the complex state of array and objects&lt;/li&gt;
&lt;li&gt;How to use multiple reducers to manage complex redux state&lt;/li&gt;
&lt;li&gt;How to debug Redux application&lt;/li&gt;
&lt;li&gt;How to use Redux in React using react-redux library to make your app reactive.&lt;/li&gt;
&lt;li&gt;How to use redux-thunk library to handle async API calls and much more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and then finally we'll build a complete &lt;a href="https://www.youtube.com/watch?v=2zaPDfCKAvM"&gt;food ordering app&lt;/a&gt; from scratch with stripe integration for accepting payments and deploy it to the production.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/3w0DGum"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Taa9-Eif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gist.github.com/myogeshchavan97/98ae4f4ead57fde8d47fcf7641220b72/raw/c3e4265df4396d639a7938a83bffd570130483b1/banner.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Want to stay up to date with regular content regarding JavaScript, React, Node.js? &lt;a href="https://www.linkedin.com/in/yogesh-chavan97/"&gt;Follow me on LinkedIn&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/myogeshchavan97"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xG4nnUnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-yellow.png"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>node</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>6 science based advices for better work and learning</title>
      <author>Abhinav Pandey</author>
      <pubDate>Thu, 01 Jul 2021 04:57:22 +0000</pubDate>
      <link>https://dev.to/abh1navv/6-science-based-advices-for-better-work-and-learning-39pl</link>
      <guid>https://dev.to/abh1navv/6-science-based-advices-for-better-work-and-learning-39pl</guid>
      <description>&lt;p&gt;Today I'm going to talk about some tiny habits which can go a long way in improving your daily work and motivating you for long-term learning. Each of the principles is backed by science because understanding the "why" is more important before doing the "what" or learning the "how".&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Focus vs Diffuse mode&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Focus - concentrate on one thing. No multitasking.&lt;/li&gt;
&lt;li&gt;Diffuse - let the brain wander freely. E.g. exercise, sleep, going out.&lt;/li&gt;
&lt;li&gt;Go back and forth. Focus for a while and diffuse for a while.&lt;/li&gt;
&lt;li&gt;Grows your brain just like exercise and rest grows your muscles&lt;/li&gt;
&lt;li&gt;taking breaks is good for high performance&lt;/li&gt;
&lt;li&gt;&lt;a href="https://delanceyplace.com/view-archives.php?p=3150"&gt;The science behind it&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Sleep&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/eKITkdsoZzRN4WomFO/source.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/eKITkdsoZzRN4WomFO/source.gif" alt="Sleeping Chandler"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sleep clears toxins from the brain&lt;/li&gt;
&lt;li&gt;Long deep sleep is important. Toxin cleaning is an energy intensive process. It does not happen unless body is at rest for a long time.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nih.gov/news-events/news-releases/brain-may-flush-out-toxins-during-sleep"&gt;Check out this article&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Brain training&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Practice something to create strong memory &lt;/li&gt;
&lt;li&gt;exercise your brain by repeating what you learn&lt;/li&gt;
&lt;li&gt;give your brain enough diffuse mode&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3191246/"&gt;Too much biology to prove it&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Regular Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;prevents depression and anxiety&lt;/li&gt;
&lt;li&gt;elevates mood&lt;/li&gt;
&lt;li&gt;gives rest to the brain (diffuse mode)&lt;/li&gt;
&lt;li&gt;Here's a &lt;a href="https://www.apa.org/monitor/2011/12/exercise"&gt;study&lt;/a&gt; to back it up&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Feedback&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;negative -&amp;gt; "You're doing this wrong" (criticism)&lt;/li&gt;
&lt;li&gt;positive -&amp;gt; "If you do this, I will give you this" or "I like how you did this" (motivation)&lt;/li&gt;
&lt;li&gt;criticism is usually more actionable - enjoy criticism when you are in the middle of your learning or towards a high career stage&lt;/li&gt;
&lt;li&gt;motivation is important at the beginning - gives you power to battle the obstacles&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5239721/"&gt;Some science&lt;/a&gt; for the nerds&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Procrastination&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o84hrZZ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.chzbgr.com/full/7586032128/h94BFB767/costanzas-can-keeper-chair" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o84hrZZ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.chzbgr.com/full/7586032128/h94BFB767/costanzas-can-keeper-chair" alt="Procrastination Costanza"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you don't want to do something right now because is isn't going to feel good. You brain automatically suggests something more positive - like watching YT videos or playing games&lt;/li&gt;
&lt;li&gt;it is &lt;em&gt;an issue with managing our emotion and not our time&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;you could be a good time manager but still not feel like doing some tasks (I relate strongly)&lt;/li&gt;
&lt;li&gt;Understand that by delaying an important task we are just delaying the mental pain&lt;/li&gt;
&lt;li&gt;Best way to tackle this is to be strong and do that important task right away - Get rid of the pain and feel better.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.deprocrastination.co/blog/3-tricks-to-start-working-despite-not-feeling-like-it"&gt;Some tricks&lt;/a&gt; for the affected. &lt;strong&gt;Must read&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Screw it, let's do it&lt;br&gt;
-- &lt;cite&gt;Richard Branson&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;This is not a complete list. A few more coming soon. &lt;/p&gt;

&lt;p&gt;These principles are notes from the course &lt;a href="https://www.udemy.com/course/learning-to-learn-efficient-learning-zero-to-mastery/"&gt;Learning to Learn [Efficient Learning] : Zero to Mastery&lt;/a&gt;. Do check it out if it sparks your interest.&lt;/p&gt;

&lt;p&gt;Happy Learning!!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GfWm4ehZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://img.buzzfeed.com/buzzfeed-static/static/2020-09/24/0/asset/19b0de03aa06/anigif_sub-buzz-23179-1600908429-13.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GfWm4ehZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://img.buzzfeed.com/buzzfeed-static/static/2020-09/24/0/asset/19b0de03aa06/anigif_sub-buzz-23179-1600908429-13.gif" alt="Learning"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can connect with me at  &lt;br&gt;
&lt;a href="https://www.linkedin.com/in/abh1navv"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.twitter.com/abh1navv"&gt;Twitter/@abh1navv&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>learning</category>
      <category>career</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
