<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Simple JavaScript Clock!</title>
      <author>CristoferK</author>
      <pubDate>Fri, 09 Apr 2021 12:34:17 +0000</pubDate>
      <link>https://dev.to/cristoferk/simple-javascript-clock-2i7k</link>
      <guid>https://dev.to/cristoferk/simple-javascript-clock-2i7k</guid>
      <description>&lt;p&gt;Hello! If you want to see the video:&lt;a href="https://www.youtube.com/watch?v=SibpZL6dgbE&amp;amp;t=55s"&gt;https://www.youtube.com/watch?v=SibpZL6dgbE&amp;amp;t=55s&lt;/a&gt;&lt;br&gt;
Don't forget to subscribe!&lt;/p&gt;

&lt;p&gt;But here is the code:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;JS Clock&amp;lt;/title&amp;gt;
&amp;lt;link rel="preconnect" href="https://fonts.gstatic.com"&amp;gt;
&amp;lt;link href="https://fonts.googleapis.com/css2?family=Montserrat+Alternates:wght@300&amp;amp;display=swap" rel="stylesheet"&amp;gt;
&amp;lt;style&amp;gt;
* {
    color: white;
    margin: 0;
    font-family: 'Montserrat Alternates', sans-serif;
}
p {
    font-size: 200px;
    position: absolute;
    color: #9999ff;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-shadow: 0px 0px 200px darkblue;
}
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p id="clock"&amp;gt;&amp;lt;/p&amp;gt;


&amp;lt;script&amp;gt;
setInterval(displayclock, 500);
function displayclock() {
    var time = new Date();
    var hrs = time.getHours();
    var min = time.getMinutes();
    var sec = time.getSeconds();

    document.getElementById('clock').innerHTML = hrs + ":" + min + ":" + sec;
}
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>clock</category>
    </item>
    <item>
      <title>Memory Consumption In Linux</title>
      <author>Vu Dao</author>
      <pubDate>Fri, 09 Apr 2021 12:26:01 +0000</pubDate>
      <link>https://dev.to/vumdao/memory-consumption-in-linux-3b55</link>
      <guid>https://dev.to/vumdao/memory-consumption-in-linux-3b55</guid>
      <description>&lt;p&gt;&lt;em&gt;In the world of devops, there are many tools support us to monitor memory usage with metrics such Datadogs, Grafana, etc. but traditional people still asking for the knowledge and skills of monitoring Memory Consumption manually.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This article explains a reasonable method to measure memory consumption of a process on Linux. Linux is equipped with virtual memory management and, therefore, measuring the memory consumption of a single process is not as simple as most users think. This article explains what information you can get from each indicator related to memory consumption.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Linux tools most commonly used are the &lt;strong&gt;VSZ (Virtual Memory Size)&lt;/strong&gt; and &lt;strong&gt;RSS (Resident Set Size)&lt;/strong&gt;, and the new one is &lt;strong&gt;PSS (Proportional set size)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#whats-in-this-document"&gt;
  &lt;/a&gt;
  What’s In This Document
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#-Technical-Terms"&gt;Technical Terms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-VSZ-(Virtual-Memory-Size)-and-Demand-Paging"&gt;VSZ (Virtual Memory Size) and Demand Paging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-RSS-(Resident-Set-Size)-and-Shared-Libraries"&gt;RSS (Resident Set Size) and Shared Libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-PSS-(Proportional-Set-Size)"&gt;PSS (Proportional Set Size)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Python-script-to-get-PSS-(Proportional-Set-Size)"&gt;Python script to get PSS (Proportional Set Size)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#technical-terms"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Technical Terms&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. page&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is a block of memory that is used in memory management on Linux. One page is 4096 bytes in typical Linux systems.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2. physical memory&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is the actual memory, typically the RAM, that is on the computer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3. virtual memory&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is a memory space given to a process that lets the process think it has its own continuous memory that is isolated from other processes regardless of the actual memory amount on the computer or the situation of other processes memory consumption. A virtual memory page can be mapped to a physical memory page, and hence, processes only need to think about the virtual memory.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#vsz-virtual-memory-size-and-demand-paging"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;VSZ (Virtual Memory Size) and Demand Paging&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Considering the VSZ (virtual memory size) to measure memory consumption of a process does not make much sense. This is due to the feature called demand paging, which suppresses unnecessary memory consumption.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For example, a text editor named emacs has functions that can handle XML files. These function, however, are not used all the time. Loading these functions on to the physical memory is not necessary when the user just wants to edit a plain text. The demand paging feature does not load pages unless they are used by the process.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is how it works. First, when the program starts, Linux gives a virtual memory space to the process but does not actually load pages that have functions on to the physical memory. When the program actually calls a function in the virtual memory, the MMU in the CPU tells Linux that the page is not loaded. Then Linux pauses the process, loads the page on to the physical memory, maps the page to the virtual memory of the process, then lets the process run again from where it got paused. The process, therefore, does not need to know that it got paused, and just simply assume the function was loaded on the virtual memory and use it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;VSZ (virtual memory size) describes the entire virtual memory size of the process regardless of pages being loaded on the actual memory or not. This is, therefore, not a realistic indicator to measure memory consumption since it includes pages that are not actually consumed.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#rss-resident-set-size-and-shared-libraries"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;RSS (Resident Set Size) and Shared Libraries&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;RSS (Resident Set Size) describes the total amount of the pages for a process that are actually loaded on the physical memory. This may sound like the real amount of memory being consumed by the process, and is better than VSZ (virtual memory size), but it is not that simple due to the feature called shared libraries or dynamic linking libraries.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A library is a module that can be used by programs to handle a certain feature. For example, libpng.so takes care of compressing and decompressing PNG image files, and libxml2.so takes care of handling XML files. Instead of making each programmer write these functions, they can use libraries developed by others and achieve the result they want.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A shared object is a library that can be shared by multiple programs or processes. For example, let's say there are two processes running at the same time that want to use XML handling functions that are in the shared library libxml2.so. Instead of loading the pages that have the exact same functions multiple times, Linux loads it once on to the physical memory and maps it to both processes virtual memory. Both processes do not need to care if they are sharing the functions with somebody else because they can access the functions and use them inside their own virtual memory. Due to this feature, Linux suppresses unnecessary duplication of memory pages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, let us go back to the same example above. Emacs, a text editor, has functions that can handle XML files. This is taken care of by the shared library libxml2.so. This time, the user that is running emacs is actually working with XML files and emacs is using the functions in libxml2.so. Meanwhile, there are two more process running in the background that are using libxml2.so too. Since libxml2.so is a shared library, Linux only loads it once on the physical memory and maps it to all three processes virtual memory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you see the RSS (Resident Set Size) of emacs, it will include the pages of libxml2.so. This is not wrong because emacs is actually using it. But what about the other two processes? It is not just emacs that is using those functions. If you sum the RSS (Resident Set Size) of all three processes, libxml2.so will be counted three times even though it is only loaded on the physical memory once.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RSS (Resident Set Size), therefore, is an indicator that will show the memory consumption when the process is running by it self without sharing anything with other processes. For practical situations where libraries are being shared, RSS (Resident Set Size) will over estimate the amount of memory being consumed by the process. Using to measure memory consumption of a process is not wrong but you may want to keep in mind of this behaviour.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#pss-proportional-set-size"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;PSS (Proportional Set Size)&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;PSS (Proportional Set Size) is a relatively new indicator that can be used to measure memory consumption of a single process. It is not be available on all Linux systems yet but if it is available, it may come in handy. The concept is to split the memory amount of shared pages evenly among the processes that are using them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is how PSS (Proportional Set Size) calculates memory consumption: If there are N processes that are using a shared library, each process is consuming one N-th of the shared libraries pages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For the example above, emacs and two other processes were sharing the pages of libxml2.so. Since there are three processes, PSS will consider each process is consuming one third of libxml2.so's pages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I consider PSS (Proportional Set Size) as a more realistic indicator compared to RSS (Resident Set Size). It works well especially when you want to consider the memory consumption of an entire system all together, and not each process individually. For example, when you are developing a system that has multiple processes and daemons and you want to estimate how much memory you should install on the device, PSS (Proportional Set Size) works better than RSS (Resident Set Size).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#python-script-to-get-pss-proportional-set-size"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Python script to get PSS (Proportional Set Size&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/vumdao/pss-memory-get/pss.py"&gt;https://github.com/vumdao/pss-memory-get/pss.py&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#! /usr/bin/env python3
# coding: utf-8
##-----------------------------------------------------------------------------
## pss.py --- Print the PSS (Proportional Set Size) of accessable processes
##-----------------------------------------------------------------------------
import os, sys, re, pwd
from functools import cmp_to_key as cmp


##-----------------------------------------------------------------------------
def pss_main():
    '''
    Print the user name, pid, pss, and the command line for all accessable
    processes in pss descending order.
    '''
    # Get the user name, pid, pss, and the command line information for all
    # processes that are accessable. Ignore processes where the permission is
    # denied.
    ls = []   # [(user, pid, pss, cmd)]
    for pid in filter(lambda x: x.isdigit(), os.listdir('/proc')):
        try:
            ls.append((owner_of_process(pid), pid, pss_of_process(pid), cmdline_of_process(pid)))
        except IOError:
            pass

    # Calculate the max length of the user name, pid, and pss in order to
    # print them in aligned columns.
    userlen = 0
    pidlen = 0
    psslen = 0
    for (user, pid, pss, cmd) in ls:
        userlen = max(userlen, len(user))
        pidlen = max(pidlen, len(pid))
        psslen = max(psslen, len(str(pss)))

    # Get the width of the terminal.
    with os.popen('tput cols') as fp:
        term_width = int(fp.read().strip())

    # Print the information. Ignore kernel modules since they allocate memory
    # from the kernel land, not the user land, and PSS is the memory
    # consumption of processes in user land.
    fmt = '%%-%ds  %%%ds  %%%ds  %%s' % (userlen, pidlen, psslen)
    print(fmt % ('USER', 'PID', 'PSS', 'COMMAND'))
    for (user, pid, pss, cmd) in sorted(ls, key=cmp(lambda x, y: (y[2] - x[2]))):
        if cmd != '':
            print((fmt % (user, pid, pss, cmd))[:term_width - 1])


##-----------------------------------------------------------------------------
def pss_of_process(pid):
    '''
    Return the PSS of the process specified by pid in KiB (1024 bytes unit)

    @param pid  process ID
    @return     PSS value
    '''
    with open('/proc/%s/smaps' % pid) as fp:
        return sum([int(x) for x in re.findall('^Pss:\s+(\d+)', fp.read(), re.M)])


##-----------------------------------------------------------------------------
def cmdline_of_process(pid):
    '''
    Return the command line of the process specified by pid.

    @param pid  process ID
    @return     command line
    '''
    with open('/proc/%s/cmdline' % pid) as fp:
        return fp.read().replace('\0', ' ').strip()


##-----------------------------------------------------------------------------
def owner_of_process(pid):
    '''
    Return the owner of the process specified by pid.

    @param pid  process ID
    @return     owner
    '''
    try:
        owner_pid = pwd.getpwuid(os.stat('/proc/%s' % pid).st_uid).pw_name
    except Exception:
        return 'docker'
    return owner_pid


##-----------------------------------------------------------------------------
if __name__ == '__main__':
    pss_main()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How to run&lt;br&gt;
&lt;code&gt;sudo python pss.py&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the server/instance running &lt;code&gt;docker&lt;/code&gt; then it would show userID &lt;code&gt;999&lt;/code&gt; &lt;a href="https://stackoverflow.com/questions/55241474/why-docker-compose-creates-directories-files-with-usergroup-999999"&gt;ref&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://web.archive.org/web/20120520221529/http://emilics.com/blog/article/mconsumption.html"&gt;Refs&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="https://dev.to/vumdao"&gt;🌠 Blog&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://github.com/vumdao/"&gt;Github&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://vumdao.hashnode.dev/"&gt;Web&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://www.linkedin.com/in/vu-dao-9280ab43/"&gt;Linkedin&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://www.linkedin.com/groups/12488649/"&gt;Group&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://www.facebook.com/CloudOpz-104917804863956"&gt;Page&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://twitter.com/VuDao81124667"&gt;Twitter 🌠&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>linux</category>
      <category>devops</category>
      <category>cloudopz</category>
      <category>monitoring</category>
    </item>
    <item>
      <title>Get your streak on...!</title>
      <author>Travis Elkins</author>
      <pubDate>Fri, 09 Apr 2021 12:24:58 +0000</pubDate>
      <link>https://dev.to/r4nkt/get-your-streak-on-3fc6</link>
      <guid>https://dev.to/r4nkt/get-your-streak-on-3fc6</guid>
      <description>&lt;h3&gt;
  &lt;a href="#get-your-streak-on"&gt;
  &lt;/a&gt;
  Get your streak on...! 🚀
&lt;/h3&gt;

&lt;p&gt;While this feature wasn't considered necessary for r4nkt's initial release, it was always considered a must-have. Well, over the last week, initial support for streaks has been deployed to production. This makes it very easy for you to define achievement criteria in terms of streaks.&lt;/p&gt;

&lt;p&gt;We are very excited to have rolled this functionality out and hope that you and your users will enjoy the new possibilities that are now available.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-streaks"&gt;
  &lt;/a&gt;
  What are streaks? 🤔
&lt;/h3&gt;

&lt;p&gt;In terms of r4nkt achievement criteria, a streak is when a player has performed some sort of action(s) over a consecutive series of time intervals. Some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A salesperson has closed at least one sale for 10 days in a row.&lt;/li&gt;
&lt;li&gt;A student has passed the daily quiz 5 days in a row.&lt;/li&gt;
&lt;li&gt;A user has walked at least 100 steps 8 hours in a row. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work? 😯
&lt;/h3&gt;

&lt;p&gt;R4nkt's streaks are defined on the individual criteria. The criterion resource has a new property: &lt;code&gt;streak&lt;/code&gt;. Like similar properties, it takes a string that matches the following pattern: &lt;code&gt;interval:amount&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;interval&lt;/code&gt; can be one of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;days&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hours&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both require an amount, which indicates the number of days or hours that the streak should be.&lt;/p&gt;

&lt;p&gt;So, if we take some of the examples from above, we can see how easy it is to define streaks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;days:10&lt;/code&gt;: 10 days in a row.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;days:5&lt;/code&gt;: 5 days in a row.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;hours:8&lt;/code&gt;: 8 hours in a row. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Very simple and straightforward...! 🤓&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#take-it-to-the-next-level"&gt;
  &lt;/a&gt;
  Take it to the next level
&lt;/h3&gt;

&lt;p&gt;For many, the basic use of streak criteria will be sufficient, but when you combine them with &lt;a href="https://docs.r4nkt.com/concepts/criteria-conditions"&gt;criteria conditions&lt;/a&gt; and &lt;a href="https://docs.r4nkt.com/concepts/custom-data-reference"&gt;custom data references&lt;/a&gt;, then you can really start to come up with very complex and interesting achievements. There are &lt;strong&gt;so&lt;/strong&gt; many possibilities...! 😃&lt;/p&gt;

&lt;p&gt;Imagine that you develop an e-learning application or service and your students are allowed to take a daily quiz. You could define an achievement for students that pass the daily quiz by 95% or more for three straight days.&lt;/p&gt;

&lt;p&gt;To do so, you would need your achievement, which we'll call &lt;a href="https://en.wikipedia.org/wiki/Triple_(baseball)"&gt;The Triple&lt;/a&gt;, your primary &lt;a href="https://docs.r4nkt.com/concepts/criteria-groups"&gt;criteria group&lt;/a&gt;, and a single &lt;a href="https://docs.r4nkt.com/concepts/criteria"&gt;criterion&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You'll also have an &lt;a href="https://docs.r4nkt.com/concepts/actions"&gt;action&lt;/a&gt;, which might be called Pass Quiz and give a custom ID of &lt;code&gt;pass.quiz&lt;/code&gt;. You will &lt;a href="https://docs.r4nkt.com/concepts/activities"&gt;report it&lt;/a&gt; whenever a player passes a quiz. And, you'll want to pass the result in the activity's custom data, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"custom_data"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;"result"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, your criterion will have the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;custom_action_id&lt;/code&gt;: &lt;code&gt;pass.quiz&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;rule&lt;/code&gt;: &lt;code&gt;gte:1&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;streak&lt;/code&gt;: &lt;code&gt;days:3&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These properties let r4nkt know that the criterion is met when the player has passed at least one quiz each day for three (or more) consecutive days.&lt;/p&gt;

&lt;p&gt;But what if they don't get a result of 95 or more...?&lt;/p&gt;

&lt;p&gt;Well, that's where criteria conditions come into play. For this scenario, you'll have a criteria condition on either your criteria group or your criterion with the following definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"conditions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"groups"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"conditions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"activityData:result,gte,95"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, by defining the &lt;code&gt;activityData&lt;/code&gt; criteria condition, you make sure that only activities that have a custom data &lt;code&gt;result&lt;/code&gt; of 95 or greater will be considered. This is applied and then the criterion's rule and streak are considered. That is, once all "Pass Quiz" activities for the player that did &lt;em&gt;not&lt;/em&gt; meet the criteria conditions (result &amp;gt;= 95) have been filtered out, then r4nkt will look to see if at least one such activity exists per day for three (or more) consecutive days.&lt;/p&gt;

&lt;p&gt;That's pretty great, don't you think. 😜&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-want-to-learn-more"&gt;
  &lt;/a&gt;
  I want to learn more
&lt;/h3&gt;

&lt;p&gt;You can check out &lt;a href="https://docs.r4nkt.com/concepts/criteria#streak"&gt;our ever-improving documentation&lt;/a&gt; or you can also join our &lt;a href="https://discord.gg/3gMfd3eyHY"&gt;Discord server&lt;/a&gt; and ask for help or make suggestions. ⚡️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coming-soon"&gt;
  &lt;/a&gt;
  Coming Soon
&lt;/h3&gt;

&lt;p&gt;There are still more streak-related features that are in the pipeline. Obviously, we're going to expand the available time intervals and you will soon have the ability to define streaks in terms of the following time intervals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;weekly&lt;/li&gt;
&lt;li&gt;monthly&lt;/li&gt;
&lt;li&gt;yearly&lt;/li&gt;
&lt;li&gt;minutely...? 😜&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More may be added, but we'll allow your needs to drive those efforts. 🤓&lt;/p&gt;

&lt;p&gt;If you want to be notified when these new features are added, if you'd like to suggest one, or if you'd just like to be kept abreast of what we're doing, then &lt;a href="https://twitter.com/r4nkt"&gt;follow us on twitter&lt;/a&gt;. We'll keep you posted. 😎&lt;/p&gt;

</description>
      <category>saas</category>
      <category>gamification</category>
      <category>achievements</category>
      <category>startup</category>
    </item>
    <item>
      <title>Solving the FizzBuzz Interview Question with JavaScript</title>
      <author>Rithik Samanthula</author>
      <pubDate>Fri, 09 Apr 2021 11:59:31 +0000</pubDate>
      <link>https://dev.to/code2rithik/solving-the-fizzbuzz-interview-question-with-javascript-fl</link>
      <guid>https://dev.to/code2rithik/solving-the-fizzbuzz-interview-question-with-javascript-fl</guid>
      <description>&lt;p&gt;Hey There!&lt;/p&gt;

&lt;p&gt;When I was a kid everyone used to play a game called FizzBuzz. I personally loved playing it with my family members.&lt;/p&gt;

&lt;p&gt;Anyways, the game goes like this:&lt;/p&gt;

&lt;p&gt;1, 2, fizz, 4, Buzz, fizz, 7, 8, fizz, Buzz&lt;/p&gt;

&lt;p&gt;For every multiple of 3. you have to replace it with Fizz.&lt;/p&gt;

&lt;p&gt;For every multiple of 5, you have to replace it with Buzz.&lt;/p&gt;

&lt;p&gt;Now, during web development interviews, the most common question that interviewers ask are: "Write a program in JavaScript that prints the order of FizzBuzz"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sAAfUeTZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lu8rxsfl3yctppsyt24u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sAAfUeTZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lu8rxsfl3yctppsyt24u.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see in this donut chart, 90% of the interviewees fail and 10% pass to do so.&lt;/p&gt;

&lt;p&gt;Don't want to be part of that 90%?&lt;/p&gt;

&lt;p&gt;Today, we will be learning how to write a program that prints FizzBuzz in JavaScript.&lt;/p&gt;

&lt;p&gt;First, create a variable called output, and set it to an empty array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, create a function called fizzBuzz and create a for if condition wrapped around a for loop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;


&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fizzBuzz&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

 &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then type this in the for and if commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fizzBuzz&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

 &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FizzBuzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, use &lt;code&gt;else if&lt;/code&gt; statements. Like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These else and else if should still be in the fizzbuzz function.&lt;/p&gt;

&lt;p&gt;Finally, console log the output by using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how the final code should look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;


&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fizzBuzz&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

 &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FizzBuzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;



&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Test the output by running the JS Code in the console.&lt;/p&gt;

&lt;p&gt;To run the code, paste the code and hit enter. Then, use &lt;code&gt;fizzBuzz();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you get an output like this, then HOORAY! It works.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6bmr3fxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01x4h8p6wo4wo5hfmud0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6bmr3fxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01x4h8p6wo4wo5hfmud0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, you've learned how to solve the FizzBuzz challenge and you will not be part of the 90% anymore!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus
&lt;/h1&gt;

&lt;p&gt;Here is an alternate and easier way to solve the FizzBuzz challenge:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4CqgjZxV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5gglt8za6d0jyh7mrv2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4CqgjZxV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5gglt8za6d0jyh7mrv2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading and remember...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#keep-coding-yall"&gt;
  &lt;/a&gt;
  Keep Coding Y'All 👨🏻‍💻
&lt;/h1&gt;

</description>
      <category>fizzbuzz</category>
      <category>javascript</category>
      <category>challenge</category>
      <category>solve</category>
    </item>
    <item>
      <title>Spice up your console logs with styling</title>
      <author>Chris Bongers</author>
      <pubDate>Fri, 09 Apr 2021 11:46:30 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/spice-up-your-console-logs-with-styling-3moj</link>
      <guid>https://dev.to/dailydevtips1/spice-up-your-console-logs-with-styling-3moj</guid>
      <description>&lt;p&gt;Sometimes normal console logs just don't cut it. You might want to warn people to not paste random scripts they found online like Facebook.&lt;/p&gt;

&lt;p&gt;Or maybe you want to hire them and shout in the console to potential devs?&lt;/p&gt;

&lt;p&gt;Whatever your reasons might be, you can spice up your console logs with some styling!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GrzboHhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617635687647/cXhhoSijg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GrzboHhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617635687647/cXhhoSijg.png" alt="Facebook console log styled"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-some-styles-to-our-console-logs"&gt;
  &lt;/a&gt;
  Adding some styles to our console logs
&lt;/h2&gt;

&lt;p&gt;To get right in, there are several specifiers we can use in the front of our console logs to state whatever it should render.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;%s&lt;/code&gt;: Format as a string&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;%i&lt;/code&gt;/&lt;code&gt;%d&lt;/code&gt;: Format as integer&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;%f&lt;/code&gt;: Format as a float&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;%o&lt;/code&gt;: Format as expendable DOM element&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;%O&lt;/code&gt;: Format as an expendable JavaScript element&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;%c&lt;/code&gt;: Apply CSS rules (taken from the second parameter)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Today we will be focussing on the last rule.&lt;/p&gt;

&lt;p&gt;It looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%cI'm blue, da ba dee da ba daa&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color: blue;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will result in the following.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZC6sS7o0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617635319039/yruRiKwqe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZC6sS7o0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617635319039/yruRiKwqe.png" alt="Styled console logs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But that's not all. You can write as many rules of CSS as you like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%cI'm so super stylish&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color: #bc2e1e; font-size: 2rem; background: #edde9c; text-shadow: 0 1px 0px #378ab4, 1px 0 0px #5dabcd, 1px 2px 1px #378ab4, 2px 1px 1px #5dabcd, 2px 3px 2px #378ab4, 3px 2px 2px #5dabcd, 3px 4px 2px #378ab4, 4px 3px 3px #5dabcd, 4px 5px 3px #378ab4, 5px 4px 2px #5dabcd, 5px 6px 2px #378ab4, 6px 5px 2px #5dabcd, 6px 7px 1px #378ab4, 7px 6px 1px #5dabcd, 7px 8px 0px #378ab4, 8px 7px 0px #5dabcd;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And it will give us this result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rhXskr8H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617635620678/srmxcef5q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rhXskr8H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617635620678/srmxcef5q.png" alt="Fully styled console log"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the possibilities are endless, maybe even over the top!&lt;/p&gt;

&lt;p&gt;But it might help you to make your console logs just a bit more appealing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>testing</category>
    </item>
    <item>
      <title>How to deal with  Missing Values in Machine Learning</title>
      <author>atultyagi612</author>
      <pubDate>Fri, 09 Apr 2021 11:15:48 +0000</pubDate>
      <link>https://dev.to/atultyagi612/how-to-deal-with-missing-values-in-machine-learning-hjo</link>
      <guid>https://dev.to/atultyagi612/how-to-deal-with-missing-values-in-machine-learning-hjo</guid>
      <description>&lt;p&gt;When you work on real-world data it is often to have lots of missing values. There is much cause of missing data may be People do not respond to specific questions in the survey, Data entry errors, The individual drops out before sampling or many more reasons. The handling of data is very important during the preprocessing of the dataset because most machine learning algorithms do not support missing values.&lt;/p&gt;

&lt;p&gt;In this article, I try to cover many ways to handle missing values in the dataset.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Variable Deletion&lt;/li&gt;
&lt;li&gt;Replacing missing values with Mean/Median/Mode

&lt;ul&gt;
&lt;li&gt;Impute missing values for continuous variable&lt;/li&gt;
&lt;li&gt;Impute missing values for categorical variable&lt;/li&gt;
&lt;li&gt;Assigning An Unique Category&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Predicting The Missing Values&lt;/li&gt;
&lt;li&gt;Using Algorithms that Support missing values&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#1-variable-deletion"&gt;
  &lt;/a&gt;
  1. Variable Deletion
&lt;/h2&gt;

&lt;p&gt;This method commonly used to handle the null values. In this variable Deletion method, we delete a whole column with missing values and it depends on case to case. We use this method only when there are lots of missing values in a particular column than variables. Let's see it with an example&lt;/p&gt;

&lt;p&gt;For this example, we are going to use the famous Kaggle dataset &lt;a href="https://www.kaggle.com/c/house-prices-advanced-regression-techniques"&gt;house price prediction&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;data=pd.read_csv('house_price.csv')
total = data.isnull().sum().sort_values(ascending=False)
percent =total/len(data)*100
pd.concat([total,percent], axis=1, keys=['Total','Percent']).head(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3dMlgQvu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iku643fhi64cmbnzyg7e.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3dMlgQvu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iku643fhi64cmbnzyg7e.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Here you can clearly see that 4 columns have Null values higher than 80% so it is good to drop those columns from our data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;data=data[data.columns[data.isnull().mean() &amp;lt; 0.80]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also drop specific rows with a higher number of missing values. This may increase the accuracy of your model rather than filling these columns. This is beneficial only when you have a large amount of data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;data.isnull().sum(axis=1).sort_values(ascending=False).head()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gLgGVMT5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ame17io2w1z7zm4vwth.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gLgGVMT5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ame17io2w1z7zm4vwth.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Complete removal of data with missing values results in a robust and highly accurate model if it does not have a high weightage. But if the column has a high correlation with the output we recommend not to delete it because it may lead to less accuracy and Loss of a lot of information.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-replacing-missing-values-with-meanmedianmode"&gt;
  &lt;/a&gt;
  2. Replacing missing values with Mean/Median/Mode
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#impute-missing-values-for-continuous-variable"&gt;
  &lt;/a&gt;
  Impute missing values for continuous variable
&lt;/h4&gt;

&lt;p&gt;This is another common technique use to handle missing data. In this method we replace missing values of numerical data like age, a salary of a person with the mean/median of the column, that's why it can prevent the loss of data compared to the previous method.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--15u2-ICs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/scee8g54p46tgz7fwur9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--15u2-ICs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/scee8g54p46tgz7fwur9.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# The missing values are replaced by the mean value 
&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'MSSubClass'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'MSSubClass'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;fillna&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'MSSubClass'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#impute-missing-values-for-categorical-variable"&gt;
  &lt;/a&gt;
  Impute missing values for categorical variable
&lt;/h4&gt;

&lt;p&gt;The above code is only for numerical values for catagirical values we replacing the missing values with the maximum occurred value in a feature.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r0rPqKsN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4xsqoug3x8y2cdrp5et.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r0rPqKsN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4xsqoug3x8y2cdrp5et.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# The missing values are replaced by the median value.
&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'SaleCondition'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'SaleCondition'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;fillna&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'SaleCondition'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#assigning-an-unique-category"&gt;
  &lt;/a&gt;
  Assigning An Unique Category
&lt;/h4&gt;

&lt;p&gt;If the number of missing values is very large then it can be replaced with a new category. Let's understand it with an example&lt;br&gt;
For this example, we are going to use the &lt;a href="https://www.kaggle.com/c/titanic"&gt;Titanic&lt;/a&gt; dataset from Kaggle.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Read data from CSV
&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'titanic.csv'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Cabin'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i4OfCVp7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y33as35jbc5b6rdmhy77.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i4OfCVp7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y33as35jbc5b6rdmhy77.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Replace null values with New category 'U'
&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Cabin'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Cabin'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;fillna&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'U'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Cabin'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lByAcie3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bw2378xnrf5ujvke2a9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lByAcie3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bw2378xnrf5ujvke2a9.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
This method is an approximation that may lead to variance in our data but it is better than dropping a whole column/row that's why it Prevent data loss and work better with a small dataset. this method works better on linear data but may cause data leakage.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-predicting-the-missing-values"&gt;
  &lt;/a&gt;
  3. Predicting The Missing Values
&lt;/h2&gt;

&lt;p&gt;In this method, we use the features which have not null values and train a model to predict missing values. This method may give us better accuracy than replacing it with the mean/mode/median if the null values are less. let see it with an example.&lt;/p&gt;

&lt;p&gt;In this example, we are going to Kaggle the Stroke dataset and train a RandomForestRegressor model using other available features to predict the missing values in 'bmi' feature.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Load dataset 
&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'healthcare-dataset-stroke-data.csv'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Find Column with null values
&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isnull&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;sort_values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ascending&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zIaN3hnw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fr4k8y5vgeyrg58ixfmt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zIaN3hnw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fr4k8y5vgeyrg58ixfmt.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Predict null values and replace null values with predicted values in data
&lt;/span&gt;&lt;span class="n"&gt;data1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'bmi'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;notnull&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="n"&gt;data2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'bmi'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;isnull&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="n"&gt;temp1_Y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'bmi'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;temp1_X&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;'bmi'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;temp2_X&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;'bmi'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.ensemble&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RandomForestRegressor&lt;/span&gt;
&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;RandomForestRegressor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp1_X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;temp1_Y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pred&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp2_X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'bmi'&lt;/span&gt;&lt;span class="p"&gt;])):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'bmi'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'bmi'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pred&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It gives a better result than earlier methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-using-algorithms-that-support-missing-values"&gt;
  &lt;/a&gt;
  4. Using Algorithms that Support missing values
&lt;/h2&gt;

&lt;p&gt;All the machine learning algorithms don’t support missing values but some may. The k-nearest neighbors (KNN) algorithm is a simple, supervised machine learning algorithm that can be used to solve both classification and regression problems. It works on the principle of a distance measure that's why it can ignore a column when a value is missing. Naive Bayes can also support missing values when making a prediction. But in python, The sklearn implementations of naive Bayes and k-Nearest Neighbors do not support missing values. In these both algorithms you no need to handle missing values in each column as ML algorithms will handle them efficiently&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, I discuss many ways to deal with missing values and I try my best to explain these methods but there is no perfect method to handle missing data, all the methods give the best performance on different conditions depend on data. now let it stop here I hope you find this article useful and able to learn new things from it.&lt;/p&gt;

&lt;p&gt;Thank you for reading👏&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Country Code to Flag Emoji </title>
      <author>Jorik</author>
      <pubDate>Fri, 09 Apr 2021 11:03:21 +0000</pubDate>
      <link>https://dev.to/jorik/country-code-to-flag-emoji-a21</link>
      <guid>https://dev.to/jorik/country-code-to-flag-emoji-a21</guid>
      <description>&lt;p&gt;Instead of showing boring country codes like US, CH, NL, it is much nicer to show the flag emojis, 🇺🇸 🇨🇭 and 🇳🇱, right? This isn't hard to do with some JavaScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getFlagEmoji&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;countryCode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;codePoints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;countryCode&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="mh"&gt;0x1F1E6&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromCodePoint&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;codePoints&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The flag emoji is a combination of the two characters, starting at unicode position &lt;code&gt;0x1F1E6&lt;/code&gt; for the letter A. For CH (Switzerland), we want the output to be &lt;code&gt;0x1F1E9 0x1F1ED&lt;/code&gt;. These are hexadecimal numbers, which we can compute just like decimal numbers.&lt;/p&gt;

&lt;p&gt;Run down of what happens in this little function;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, uppercase the country code input.&lt;/li&gt;
&lt;li&gt;Split into an array, to iterate over each character.&lt;/li&gt;
&lt;li&gt;Receive the UTF-16 index from the character using &lt;code&gt;charCodeAt&lt;/code&gt;. We substract the index from the letter A (A = 65) from the returned index to get the index of the character in the alphabet (A = 0). Now, simply add this to the flag starting index (&lt;code&gt;0x1F1E6&lt;/code&gt;) and return this value.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;String.fromCodePoint&lt;/code&gt; function will return the final emoji characters for the computed indexes.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;getFlagEmoji&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;US&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;🇺🇸&lt;/span&gt;
&lt;span class="nx"&gt;getFlagEmoji&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NL&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;🇳🇱&lt;/span&gt;
&lt;span class="nx"&gt;getFlagEmoji&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CH&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;🇨🇭&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instant flags without additional resources!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Inspired by the &lt;a href="https://dev.to/younginnovations/get-instant-country-flags-22pe"&gt;Get Instant Country Flags&lt;/a&gt; post.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The Superlative Guide to Data Structures in JavaScript</title>
      <author>Jared Nielsen</author>
      <pubDate>Fri, 09 Apr 2021 11:03:02 +0000</pubDate>
      <link>https://dev.to/nielsenjared/the-superlative-guide-to-data-structures-in-javascript-5edj</link>
      <guid>https://dev.to/nielsenjared/the-superlative-guide-to-data-structures-in-javascript-5edj</guid>
      <description>&lt;p&gt;At some point in your career (today?!) you will want to learn data structures. It’s not just to ace the technical interview and land your dream job. Learning data structures in JavaScript will help you understand how software works and improve your problem-solving skills. &lt;/p&gt;




&lt;p&gt;If you want to stay in the loop, sign up for my newsletter, &lt;a href="http://eepurl.com/cP8CMn"&gt;The Solution&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#data-structures-in-javascript"&gt;
  &lt;/a&gt;
  Data Structures in JavaScript
&lt;/h2&gt;

&lt;p&gt;The following list is a ‘table of contents’ of my articles about data structures in JavaScript. If you think there’s something missing, let me know on Twitter &lt;a href="https://twitter.com/jarednielsen"&gt;@jarednielsen&lt;/a&gt;. And there’s more on the way!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://jarednielsen.com/data-structure-array-javascript/"&gt;Data Structures in JavaScript: Array&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://jarednielsen.com/data-structure-stack-javascript/"&gt;Data Structures in JavaScript: Stack&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://jarednielsen.com/data-structure-queue-javascript/"&gt;Data Structures in JavaScript: Queue&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://jarednielsen.com/data-structure-linked-list-javascript/"&gt;Data Structures in JavaScript: Linked List&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://jarednielsen.com/data-structure-tree-javascript/"&gt;Data Structures in JavaScript: Tree&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://jarednielsen.com/data-structure-tree-traversal/"&gt;Data Structures in JavaScript: Tree Traversal&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://jarednielsen.com/data-structure-tree-search/"&gt;Data Structures in JavaScript: Tree Search&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://jarednielsen.com/data-structure-tree-node-removal/"&gt;Data Structures in JavaScript: Tree Node Removal&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://jarednielsen.com/data-structure-graph-javascript/"&gt;Data Structures in JavaScript: Graph&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://jarednielsen.com/data-structure-graph-breadth-first-search/"&gt;Data Structures in JavaScript: Breadth-First Search Graph Traversal&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://jarednielsen.com/data-structure-graph-shortest-path/"&gt;Data Structures in JavaScript: Shortest Path Graph Traversal&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://jarednielsen.com/data-structure-graph-depth-first-search/"&gt;Data Structures in JavaScript: Depth-First Search Graph Traversal&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://jarednielsen.com/data-structure-graph-topological-sort/"&gt;Data Structures in JavaScript: Topological Sort with Depth-First Search Graph Traversal&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://jarednielsen.com/data-structure-hash-table-javascript/"&gt;Data Structures in JavaScript: Hash Table&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://jarednielsen.com/data-structure-hash-table-separate-chaining/"&gt;Data Structures in JavaScript: Separate Chaining Hash Table Collisions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://jarednielsen.com/data-structure-hash-table-linear-probing/"&gt;Data Structures in JavaScript: Linear Probing Hash Table Collisions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want all this (and more!) in one package, pick up a copy of &lt;a href="https://gum.co/data-structures"&gt;The 7 Data Structures of Highly Effective Developers&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>algorithms</category>
      <category>career</category>
      <category>beginners</category>
    </item>
    <item>
      <title>5 Ways to become a better coder</title>
      <author>Arul Prasad J</author>
      <pubDate>Fri, 09 Apr 2021 10:58:06 +0000</pubDate>
      <link>https://dev.to/arulprasadj/5-ways-to-become-a-better-coder-3p6h</link>
      <guid>https://dev.to/arulprasadj/5-ways-to-become-a-better-coder-3p6h</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Always Keep learning&lt;br&gt;
Telling yourself that you don’t know something is the first step towards learning something new. Often experienced programmers find it hard to identify areas where they lack because they believe that they know everything. Learn from everyone and everything that comes your way as it will help you become a better coder.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Improve with experience&lt;br&gt;
To be great at something you must learn from your mistakes. We become better at a task with experience. However, it is true only when we learn from our experience and try to improve on ourselves. Staying with the same mindset and beliefs won’t make you any better. As a programmer always strive to do better than before as it will help you gain experience in a real sense.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Seek for perfection&lt;br&gt;
Often we stop once we think that we have achieved the goal. Programmers often focus only on writing quality codes and most of them stop when they feel it is done. However, to be a better programmer you must understand that codes are never perfect, work is required to make them perfect. Always strive to look for perfection, it might mean making the product faster, reliable, feature-packed but there is always room for improvement.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write it thrice&lt;br&gt;
Good programmers usually write codes many times till they are satisfied that they have achieved their goals to some extent. It is advised that you work on your codes thrice at least. The first time you write you make yourself believe that the idea can be out to practice. The second time when you work on it you actually strive to bring out all that is expected from the solution. The third time should be focused on making it perfect. There are always many approaches to the problem but there is always the best solution. Work till you find the perfect way out.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Read codes&lt;br&gt;
Just like reading is important to expand your wisdom. In coding, reading what other programmers have written is quite important. Codes can be written in many ways, and there is of course no one right way. When you read others code you learn about other possibilities that you may otherwise be not aware of. It is also a great way to brush up and improve your programming skills. Interact with other coders whenever possible, participate in coding forums and learn from these experiences.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Simple trapping rainwater</title>
      <author>Santiago Salazar Pavajeau</author>
      <pubDate>Fri, 09 Apr 2021 10:24:23 +0000</pubDate>
      <link>https://dev.to/santispavajeau/simple-trapping-rainwater-21eg</link>
      <guid>https://dev.to/santispavajeau/simple-trapping-rainwater-21eg</guid>
      <description>&lt;p&gt;This is a fast and simple solution for the trapping rainwater problem. We just use two pointers, for the start and end of the list. Then keep track of the highest columns so far from the start &lt;code&gt;sMax&lt;/code&gt; and the end &lt;code&gt;eMax&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;        &lt;span class="nx"&gt;sMax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sMax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="nx"&gt;eMax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eMax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, the pointer that is higher stays in its position, and the other moves.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sMax&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;eMax&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="c1"&gt;// move start pointer&lt;/span&gt;
            &lt;span class="nx"&gt;water&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;sMax&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="c1"&gt;// highest left yet, minus current &lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// move end pointer&lt;/span&gt;
            &lt;span class="nx"&gt;water&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;eMax&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="c1"&gt;// highest right yet, minus current&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This allows calculating the water by subtracting the current height from the max height. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YHnFZ6ld--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1438449805896-28a666819a20%3Fixid%3DMXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%253D%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1350%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YHnFZ6ld--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1438449805896-28a666819a20%3Fixid%3DMXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%253D%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1350%26q%3D80" alt="by Inge Maria in Unsplash"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// [0,1,0,2,1,0,1,3,2,1,2,1] result: 6&lt;/span&gt;
&lt;span class="c1"&gt;// [4,2,0,3,2,5] result : 9&lt;/span&gt;

&lt;span class="c1"&gt;// calculate the water between the columns of height -&amp;gt; height[current]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;trapRainWater&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="nx"&gt;water&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="nx"&gt;sMax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="nx"&gt;eMax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;sMax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sMax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="nx"&gt;eMax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eMax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sMax&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;eMax&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="c1"&gt;// move start pointer&lt;/span&gt;
            &lt;span class="nx"&gt;water&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;sMax&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="c1"&gt;// highest left yet, minus current &lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// move end pointer&lt;/span&gt;
            &lt;span class="nx"&gt;water&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;eMax&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="c1"&gt;// highest right yet, minus current&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;water&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Feel more than welcome to reach out with any ideas/comments at &lt;a href="https://www.linkedin.com/in/santiago-salazar-pavajeau/"&gt;Linkedin&lt;/a&gt; or &lt;a href="https://twitter.com/santispavajeau"&gt;Twitter&lt;/a&gt;, and check out my &lt;a href="https://www.santiagosalazarpavajeau.live"&gt;portfolio!&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Learn CSS positions with Elon Musk</title>
      <author>Atul Prajapati</author>
      <pubDate>Fri, 09 Apr 2021 10:19:08 +0000</pubDate>
      <link>https://dev.to/atulcodex/learn-css-positions-with-elon-musk-31pl</link>
      <guid>https://dev.to/atulcodex/learn-css-positions-with-elon-musk-31pl</guid>
      <description>&lt;p&gt;When I was a newbie in 2017 and just started learning web development. CSS position is one of the most confusing concepts for me to understand, mostly relative position and absolute. Is that something similar happening with you ha ha ha ha. So don't worry and take a long breath. For this article, I can bet that you will never forget or confuse CSS position again in your entire life But only if you will follow all the steps and practice with prebuild codepen projects. So what are you waiting for, let's learn CSS position with Elon Musk.&lt;/p&gt;

&lt;p&gt;In CSS we have the following values like&lt;br&gt;
-Static&lt;br&gt;
-Relative&lt;br&gt;
-Absolute&lt;br&gt;
-Fixed&lt;br&gt;
-Sticky&lt;/p&gt;

&lt;p&gt;Let's understand these position values on-by-one. CSS position property has some helping property like&lt;br&gt;
-Left&lt;br&gt;
-Right&lt;br&gt;
-Top&lt;br&gt;
-Bottom&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#static-position"&gt;
  &lt;/a&gt;
  static position
&lt;/h3&gt;

&lt;p&gt;By default, every element on the web page is a static position and static is a default property of CSS. But we haven't ignored it you can play with CSS codepen project here.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/atulcodex/embed/mdRWVEN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#relative-position"&gt;
  &lt;/a&gt;
  Relative position
&lt;/h3&gt;

&lt;p&gt;If we'll just set the CSS position to relative only, it will be in the default position and to make changes in Elon's avatar we have to use CSS position's helper properties like a top, right, bottom, left. At this position, our CSS file looks like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AT39B1oe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89pcsjca3bs52k3jgjhy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AT39B1oe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89pcsjca3bs52k3jgjhy.png" alt="Relative position"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now Let's set-top and left position of Elon to 100 px. At this moment our Output will look like this.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/atulcodex/embed/xxgqobV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;You can see that in the CSS relative position Elon's pic has changed his default position 100px from left and top. But keep in mind, His at this level default position of Elon pic will be blank. Other elements(paragraph) will not take his position, every element will stay at his default position except Elon Musk. If you want to be an Elon musk of CSS position I recommend you to play around with this codepen project. Ex. set left and right to -100px and share your result snapshot in a comment :) I appreciate it.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://www.eduonix.com/css-bootcamp-master-in-css-including-css-grid-css-flexbox/UHJvZHVjdC0xMzE1MDIw"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qs7hUkF8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u78t4dapehap8rs5atm8.png" alt="CSS Bootcamp"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#absolute-position"&gt;
  &lt;/a&gt;
  Absolute position
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8mSrxQ8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgnguvqb1uz9jxpdvcck.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8mSrxQ8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgnguvqb1uz9jxpdvcck.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The unique feature of CSS absolute position, the element will leave its default position, his position will take the next element of that web page and it will scroll with page content. At this level, our web page will look like this.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/atulcodex/embed/qBRrzQV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Now our Elon Musk(absolute property) z-index will automatically change to z-index: 1;. If you will set the top position to 10px Mr Elon Musk will leave 10px top from starting point of the device screen not from the default position like this one.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/atulcodex/embed/OJWpKxP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;That's all for CSS absolute position but I recommend you to play with this codepen project because reading blog posts will create lot's of mess in your brain about the core fundamental so please don't ignore to practice and share your results snapshot in a comment it means a lot for both of us.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#how-to-use-absolute-position-in-relative"&gt;
  &lt;/a&gt;
  How to use Absolute position in relative
&lt;/h3&gt;

&lt;p&gt;CSS absolute position working according to the device screen but when we want to control it we can put it in the main div or element which has a relative position. For example, let's put Elon musk in box div and the box element has already set a relative position. Now the Elon musk will get the starting position of the box element, not the device screen. I hope you are clear with this example and if not, please please please play around with this codepen, it will help you to understand the core concepts ie. comment out the position property of box class which is in the CCS file.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/atulcodex/embed/mdRmNgN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#fixed-position"&gt;
  &lt;/a&gt;
  Fixed position
&lt;/h3&gt;

&lt;p&gt;If we will set an element position to fixed it will fixed at that position and his z-index value will set automatically to 1, which will look like this.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/atulcodex/embed/NWdjQRK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;when we add top, left, right or bottom property Elon musk will accept those values from starting point of the screen and our elon musk will stay at its fixed position it will not scroll with page content. Let's see how it will look like in codepen&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/atulcodex/embed/abpWepL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#css-sticky-position"&gt;
  &lt;/a&gt;
  CSS sticky position
&lt;/h3&gt;

&lt;p&gt;CSS sticky position is something similar to the fixed position but it has some difference like his initial location will be blank. Elon will sticky on some specific position and when we scroll the page then the sticky element will stick to the starting point of the device screen. I know it seems a little bit confusing so please make some changes in this codepen CSS file and feel the behaviour will help you to understand the core concepts.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/atulcodex/embed/eYgWqeW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Hey dear if you are completed learning and practising all the steps I have mentioned here for the CSS position, So congratulation you have invested your time to learn something. Very few peoples are there who invest their time and effort to learn something, you can also waste your time by watching Netflix and some porn videos too but you are not that kind of guy. Keep doing, keep growing. &lt;/p&gt;

&lt;p&gt;Disclaimer: Now if want to learn CSS from industry experts then can enrol for a &lt;a href="https://www.eduonix.com/css-bootcamp-master-in-css-including-css-grid-css-flexbox/UHJvZHVjdC0xMzE1MDIw"&gt;CSS course at Eduonix. Eduonix is a learning platform for those learners&lt;/a&gt; who are curious to learn and grow.&lt;/p&gt;

&lt;p&gt;Please don't forget to give you feeling at this moment and feedback about this article. I'll love to here from you guys, Thank you, Love you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/atulcodex"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9jkkH6N0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/7rR9S4L/buy-me-a-coffee.png" alt="Atul - Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>todayilearned</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Making A Custom Protocol Handler and URI Scheme! - Part 1</title>
      <author>PyBash</author>
      <pubDate>Fri, 09 Apr 2021 10:18:00 +0000</pubDate>
      <link>https://dev.to/pybash/making-a-custom-protocol-handler-and-uri-scheme-part-1-37mh</link>
      <guid>https://dev.to/pybash/making-a-custom-protocol-handler-and-uri-scheme-part-1-37mh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In this miniseries, I will be telling you, how to make a custom URI scheme or URI and a Protocol Handler for that URI. An example of one such URI is &lt;code&gt;vscode:///&lt;/code&gt;! You might have seen this when you try to sign in to GitHub using VS Code, right? But we are not going to be making exactly this, slightly different! The Finished Product is given below!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-finished-product"&gt;
  &lt;/a&gt;
  The Finished Product?
&lt;/h2&gt;

&lt;p&gt;Well, so what are we actually, going to make? Well, we will be making a protocol &lt;code&gt;python://&lt;/code&gt; that will enable us to execute any python script on our computer right from our browser! Isn't that cool? And maybe in the future, we could make it so that it could run any python file on the internet! A video of the finished product is given below! Sorry for the bad quality, I had to reduce it for Hashnode to fit inside the article!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-are-we-making-today"&gt;
  &lt;/a&gt;
  So, what are we making today?
&lt;/h2&gt;

&lt;p&gt;Today we are going to be making the basic handler in Python using urllib! I will be using Python 3, but this can easily be translated into Python 2 using the urllib2 module! So, let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;urllib module - included in the standard library&lt;/li&gt;
&lt;li&gt;StringIO - included in the standard library&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#actual-code"&gt;
  &lt;/a&gt;
  Actual Code!
&lt;/h2&gt;

&lt;p&gt;Well, in this post we will just be making the basic handler, the script execution will be in the next post!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#imports"&gt;
  &lt;/a&gt;
  Imports
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import urllib.request as urlreq
from io import StringIO as strio

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need a urllib.request for parsing the protocol address and creating the handler! We will not be needing StringIO, from the next post, it's just for this post!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-handler"&gt;
  &lt;/a&gt;
  The Handler
&lt;/h3&gt;

&lt;p&gt;Alright, so the imports are done, now let's move on to the actual handler! This will use some very basic Object-Oriented Programming(OOP), so even if you are not familiar with it there will be no problem, but if you are familiar, it will help!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class PyProtoHandler(urlreq.BaseHandler):
    def python_open(self, req):
        fullUrl = req.get_full_url()
        return strio(fileUrl)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, in the above code, we made a class named &lt;code&gt;PyProtoHandler&lt;/code&gt; which inherits from &lt;code&gt;urllib.request.BaseHandler&lt;/code&gt;. &lt;strong&gt;Inside this class we define a new function named &lt;code&gt;python_open&lt;/code&gt;, which takes in 1 parameter &lt;code&gt;req&lt;/code&gt;, but here comes the crucial bit, This function has to be named in a specific way, i.e., &lt;code&gt;{the protocol name}_open&lt;/code&gt;. If you for example define the function as &lt;code&gt;myproto_open&lt;/code&gt; and your actual protocol is &lt;code&gt;protomy&lt;/code&gt;, then it is just going to give an error, so keep this in mind!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Then, we store the full URL returned by &lt;code&gt;req.get_full_url()&lt;/code&gt; in fullUrl. And finally return &lt;code&gt;fullUrl&lt;/code&gt; wrapped in StringIO.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-the-handler"&gt;
  &lt;/a&gt;
  Installing the Handler
&lt;/h3&gt;

&lt;p&gt;Alright, so the handler is made, let's install and build it. This step is really simple, we just need to call 2 built-in functions of urllib!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;opener = urlreq.build_opener(PyProtoHandler())
urlreq.install_opener(opener)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, we build the opener using &lt;code&gt;urlreq.build_opener(PyProtoHandler)&lt;/code&gt; and store the returned result or output in the variable &lt;code&gt;opener&lt;/code&gt;. Next, we install the &lt;code&gt;opener&lt;/code&gt; using &lt;code&gt;urlreq.install_opener(opener)&lt;/code&gt;. And we are done! viola! So, let's test it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-the-handler"&gt;
  &lt;/a&gt;
  Testing the Handler
&lt;/h3&gt;

&lt;p&gt;We will be using another line of code with this file to test it!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print(urlreq.urlopen("python://something/random/file.txt").read())

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now to test, we have to run the file from our Terminal or Bash or Command Prompt, whatever you wish! You might have to use &lt;code&gt;python&lt;/code&gt; or &lt;code&gt;python3&lt;/code&gt; depending on your system.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python protoHandler.py
python://something/random/file.txt

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the file once again with changes to the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print(urlreq.urlopen("python://hashnode/non-existing/dir/non/existing/file.py").read())

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And, output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python protoHandler.py
python://hashnode/non-existing/dir/non/existing/file.py

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-end-get-the-file-path"&gt;
  &lt;/a&gt;
  &lt;del&gt;The End&lt;/del&gt; Get the file path!?
&lt;/h2&gt;

&lt;p&gt;I didn't think I would include this here, but finally, I did! so, enjoy, everyone!&lt;/p&gt;

&lt;p&gt;Well, Now that, we can get the whole protocol, we can now extract the path to the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class PyProtoHandler(urlreq.BaseHandler):
    def python_open(self, req):
        fullUrl = req.get_full_url()
        filePath = "".join(fullUrl.split("://")[1:])
        return filePath

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, as you can see, I have just added a line to the &lt;code&gt;python_open&lt;/code&gt; function. Which splits the protocol into a list, where, the 1st element is the protocol("python") and the second element is the file path. And we wrap that up in &lt;code&gt;"".join()&lt;/code&gt; to convert the path into a string and join all the elements from and after element at the index 1 with "" as the separator. Even though there should be one element at index 1 if a correct path is entered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finally-the-end"&gt;
  &lt;/a&gt;
  Finally, The End
&lt;/h2&gt;

&lt;p&gt;I should not refer to this as the end, since part 2 is still to come! Anyway, goodbye for today, and subscribe to the mailing list to get notified when I post part 2! Good byeeeeeeee!&lt;/p&gt;

</description>
      <category>python</category>
      <category>pythonprojects</category>
      <category>projects</category>
    </item>
  </channel>
</rss>
