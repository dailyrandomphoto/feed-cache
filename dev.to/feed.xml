<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Best Tutorials On VSCODE Editor</title>
      <author>niksin</author>
      <pubDate>Sat, 24 Jul 2021 10:31:48 +0000</pubDate>
      <link>https://dev.to/stuffsuggested/best-tutorials-on-vscode-editors-14ip</link>
      <guid>https://dev.to/stuffsuggested/best-tutorials-on-vscode-editors-14ip</guid>
      <description>&lt;p&gt;Recently VS code has become so much popular among developers. It has lots of useful plugins, It has very good theme and interface like dark mode etc.&lt;/p&gt;

&lt;p&gt;IDE is very important things for any developer / programmers.&lt;/p&gt;

&lt;p&gt;Here I am listing some the best tutorials which are available on google for VS code IDE.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/07/7-best-vs-code-themes-2021-you-should.html"&gt;BEST VS CODE THEMES 2021&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-use-git-integration-in-visual-studio-code"&gt;GIT Connect&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/03/13-vscode-extensions-that-every-web.html"&gt;USEFUL VSCODE EXTENSIONS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://morioh.com/p/fc50cc45927f"&gt;VSCODE THEMES&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://css-tricks.com/creating-a-vs-code-theme"&gt;CREATING VSCODE THEME&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>vscode</category>
      <category>ides</category>
      <category>webdev</category>
      <category>php</category>
    </item>
    <item>
      <title>Quick CSS : Make infinity loading animation for your next website.</title>
      <author>Modern Web</author>
      <pubDate>Sat, 24 Jul 2021 10:20:10 +0000</pubDate>
      <link>https://dev.to/kunaal438/quick-css-make-infinity-loading-animation-for-your-next-website-187k</link>
      <guid>https://dev.to/kunaal438/quick-css-make-infinity-loading-animation-for-your-next-website-187k</guid>
      <description>&lt;p&gt;Hello, welcome. Today we'll see a quick CSS tutorial on how to make gradient loading animation. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#loading-animation"&gt;
  &lt;/a&gt;
  Loading Animation
&lt;/h1&gt;

&lt;p&gt;Wonder, how to make a loading animation ? Let's see how you can make one very easily.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#video-tutorial"&gt;
  &lt;/a&gt;
  Video Tutorial
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/89IFrt_Unj0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-start"&gt;
  &lt;/a&gt;
  Let's start
&lt;/h1&gt;

&lt;p&gt;So, start with basic HTML structure. And after that, create a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with class &lt;code&gt;loading-box&lt;/code&gt; it will contain our loader. And inside that, create another &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with class &lt;code&gt;loader&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"loading-box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"loader"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And for styling first, give basic style.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fefefe&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.loading-box&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#ededed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In above CSS, we are using flex box to center our loading box.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OAoYtE9Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y2pvrgscvegit051bnea.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OAoYtE9Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y2pvrgscvegit051bnea.PNG" alt="Capture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, style loader.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.loader&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#b6b5ff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#ff9797&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--45qr7OLk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5m3qxr2dj3sr5u90oe3a.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--45qr7OLk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5m3qxr2dj3sr5u90oe3a.PNG" alt="Capture-2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see we are done with the loader, Now let's animate this. As you can notice, we have &lt;code&gt;left&lt;/code&gt; property set to &lt;code&gt;0%&lt;/code&gt; change it to &lt;code&gt;-100%&lt;/code&gt; and give animation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.loader&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt; &lt;span class="m"&gt;3s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LttRrcjg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0tksqdo2zzis9afoekn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LttRrcjg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0tksqdo2zzis9afoekn.gif" alt="Untitled design (2)"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;So, it's done. I hope you understood each and everything. If you have doubt or I missed some point let me know in the comments.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#articles-you-may-found-useful"&gt;
  &lt;/a&gt;
  Articles you may found Useful
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/css-position-everything-you-need-for-good-developer-pfh"&gt;CSS Positions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/media-query-everything-you-need-for-responsive-design-b8g"&gt;CSS Media Query&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/display-flex-complete-guide-on-css-flex-box-2021-5bi2"&gt;CSS flex box&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you like, you can subscribe my youtube channel. I create awesome web contents. &lt;a href="https://www.youtube.com/c/modern_web?sub_confirmation=1"&gt;Subscribe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks For reading.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Writing a function in Javascript</title>
      <author>anjan-dutta</author>
      <pubDate>Sat, 24 Jul 2021 09:24:02 +0000</pubDate>
      <link>https://dev.to/anjandutta/writing-a-function-in-javascript-35cf</link>
      <guid>https://dev.to/anjandutta/writing-a-function-in-javascript-35cf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-a-function"&gt;
  &lt;/a&gt;
  What is a function
&lt;/h2&gt;

&lt;p&gt;It is a way of writing a set of logic separately from the rest of the code. Functional coding is a clean, readable and reusable approach of programming.&lt;/p&gt;

&lt;p&gt;It is also assigned a name for the ease of accessibility. Can we write functions without names? The answer is yes. We call those anonymous functions. I have discussed it later in this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#declaration-of-a-function-in-javascript"&gt;
  &lt;/a&gt;
  Declaration of a function in Javascript
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parameter1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parameter2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;....)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;statement1&lt;/span&gt;
  &lt;span class="nx"&gt;statement2&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-write-a-function-in-javascript"&gt;
  &lt;/a&gt;
  How to write a function in Javascript
&lt;/h2&gt;

&lt;p&gt;A function declaration has three parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Name&lt;/li&gt;
&lt;li&gt;Parameters&lt;/li&gt;
&lt;li&gt;Statements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://anjandutta.com/function-in-javascript"&gt;Read more...&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>frontend</category>
      <category>programming</category>
    </item>
    <item>
      <title>What are Video on Demand API (Vod Api)?</title>
      <author>Sagar Kava</author>
      <pubDate>Sat, 24 Jul 2021 09:16:08 +0000</pubDate>
      <link>https://dev.to/sagarkava/what-are-video-on-demand-vod-4gag</link>
      <guid>https://dev.to/sagarkava/what-are-video-on-demand-vod-4gag</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cQ5aYFT2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://eastceylon.com/images/2021/07/24/Upload-video-from-anywhere.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cQ5aYFT2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://eastceylon.com/images/2021/07/24/Upload-video-from-anywhere.jpg" alt="Upload-video-from-anywhere.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.videosdk.live/"&gt;Video on Demand&lt;/a&gt; (VoD) creates an online video library for the viewers, which they can access anytime at their ease with any compatible device. Unlike the traditional media broadcasting channels, which demanded viewers to watch videos at the time of broadcast only, VoD is different. It allows viewers to view content at their comfort.&lt;/p&gt;

&lt;p&gt;Video on Demand technology, the future of online content delivery has witnessed a rapid engagement in the current times. Today, the majority of the content is found attractive when it is in video format. There comes the idea of VoD. VoD is an abbreviation for Video on Demand. This system provides the technology of storing video content on the cloud in a compressed file format. Researchers have found that more than a written article or an e-mail, today, video content looks more alluring to the reader who has turned into a viewer. It is well said that whatever we visualize has more worth than whatever we read or listen to. The content visualized always holds more significance.&lt;/p&gt;

&lt;p&gt;With the increasing global population, the use of smartphones and internet connection has also increased. This has in turn led to an increase in demand for online digital content. Today the businesses have witnessed a rise in demand for videos, and to assure you, this is a never-ending demand which is creating endless opportunities. Video on Demand is a technology that serves to reap benefits to the content creators as well. It allows users to view videos at their comfort, whenever they want, and in whatsoever manner they choose to view them. Video on Demand allows flexible viewing facilities to the users. This blog explains the term Video on Demand in detail, about what it is, how it works, and its benefits.&lt;/p&gt;

&lt;p&gt;On a Video on Demand platform, one can play videos, seek the video forward and backward, pause and play, and watch later. It helps in managing videos, and deliver the content with the help of CDNs, which helps in providing fast and reliable content delivery to the businesses. Professionally, it also helps businesses to have full control over the content delivery and its distribution. It helps to customize the content delivery for businesses to deliver the apt data consensual by them. It sets an arrangement of pre-recorded data, which can be reviewed in the future.&lt;/p&gt;

&lt;p&gt;Often live streaming and VoD are considered similar but in reality, they are pretty different. Let us understand what is live streaming.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-live-streaming"&gt;
  &lt;/a&gt;
  What is Live Streaming?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.videosdk.live/"&gt;Live streaming&lt;/a&gt; is a concept that allows businesses to stream their content online. Viewers can watch the content on a real-time basis. The viewers can watch the streaming which is happening live and can also watch them later, if recorded, using VoD. &lt;/p&gt;

&lt;p&gt;live stream, the viewers can also pause, play, and make the videos play backward. Live streaming is valuable as it connects to its customers, creating a live bond with them. It also allows live chat with the viewers. VoD lacks a live chat facility, though it allows a well-versed playback video facility for the same recorded live stream.&lt;/p&gt;

&lt;p&gt;Live streaming helps businesses to make announcements for the public, media releases, and press conferences to increase their PR activity with the external environment. Live streaming is a beneficial tool as it helps businesses to boost their marketing and branding strategies too. A live stream can be later accessed as a VoD. the stream can also be accessed later with the help of the VoD facility.&lt;br&gt;
Content creators can reach out to audiences by live streaming:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#a-behindthescenes-look-at-your-business-or-daily-routine"&gt;
  &lt;/a&gt;
  A behind-the-scenes look at your business or daily routine.
&lt;/h4&gt;

&lt;p&gt;Q&amp;amp;A session.&lt;br&gt;
Tutorials (makeup, yoga poses).&lt;br&gt;
Skills demonstrations (cooking, eLearning).&lt;br&gt;
Tips, tricks, and advice.&lt;br&gt;
Webinars.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-choose-an-ideal-video-on-demand-facility"&gt;
  &lt;/a&gt;
  How to choose an ideal Video on Demand facility?
&lt;/h3&gt;

&lt;p&gt;Choosing an ideal VoD facility is a must as it helps in making engagements better. The viewers are generally consumer-oriented which leads to a raised concern of security and a good system workforce, which doesn’t lag or create unusual issues for the general viewers. Analyzing business trends, good branding is necessary, but in the current trends, businesses have turned customer-oriented, where the features have been designed in accordance to the customer ease.&lt;/p&gt;

&lt;p&gt;Videosdk.live makes the client experience better. We infuse all the features of live streaming as well as video-on-demand at one platform. We make your experience worth sharing with others. We keep up with a huge product range, starting from&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Customizable API and SDK with UI library&lt;/li&gt;
&lt;li&gt;Low-latency scalable live streaming&lt;/li&gt;
&lt;li&gt;Video-on-demand facility&lt;/li&gt;
&lt;li&gt;Content Delivery Networks and more&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;All these products we serve to our clients on a single platform enhancing the consumer-development opportunities and user-friendly approach.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#video-on-demand-facilities"&gt;
  &lt;/a&gt;
  video on demand facilities
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;(1) Whitelabel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can host your videos on live streaming with the Whitelabel facility, engaging the screen with your branding and logo&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(2) Scalable streaming&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We cater to flawless, uninterrupted streaming, with the stream recording facility. We help you engage a million users&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(3) Compatibility&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We are compatible with 98% of devices, including Android, iOS, and more. All we aim is to provide maximum engagement to your application&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(4) Customizable APIs and SDKs&lt;/strong&gt;&lt;br&gt;
Videosdk.live develop APIs and SDKs designed on the demand of its clients in any manner they wish&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(5) Video on demand facility&lt;/strong&gt;&lt;br&gt;
With the facility of live streaming, videosdk.live also allows a flexible VoD feature, where the clients can view the content at their ease.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(6) Video playback&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We also offer a facility of video playback, where the viewers get an option to loop the video, play and pause, and make their video fasten or slow as for their comfort.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(7) Secured accessibility&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We ensure secured access to your platform for your customers to make a better engagement platform for you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(8) Adaptive Live Streaming&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Videosdk.live caters to scalable streaming based on the device, supportive quality, and  internet bandwidth&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;(9) Adaptive Video Streaming&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We also provide services for streaming videos, with effective scalability and VoD facility, supporting the majority of devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(10) Encoding&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Videosdk.live helps in encoding videos and images, compressing them into digital format, saving them as fluid data making them compatible with all mobile devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(11) Hosting&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We provide the facility of hosting videos, which are uploaded by the clients with us. We help in uploading the videos and hosting them to online platforms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(12) Content Delivery Network&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We provide a global CDN with global geo-replication and edge location delivery. Protected with DDos, we ensure faster delivery with enterprise-grade security.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(13) Multi-platform Streaming&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Stream live on several social media platforms all at once. Enjoy going live, consuming less time. Build a strong branding strategy with us.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tips-for-starting-a-successful-vod-business"&gt;
  &lt;/a&gt;
  Tips for Starting a Successful VOD Business
&lt;/h4&gt;

&lt;p&gt;Whether you’re a professional content creator considering a video-based business or transitioning your company online to keep up with the times, streaming video can work for you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vod-business-models"&gt;
  &lt;/a&gt;
  VOD Business Models
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#1-svod-subscription-videoondemand"&gt;
  &lt;/a&gt;
  (1) SVOD (Subscription Video-On-Demand)
&lt;/h4&gt;

&lt;p&gt;The SVOD, or Subscription Video-On-Demand, model gives viewers full access to a video library for a recurring monthly or annual fee.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Netflix&lt;br&gt;
Amazon Prime &lt;br&gt;
Disney+&lt;br&gt;
Hulu&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-tvod-transactional-videoondemand"&gt;
  &lt;/a&gt;
  (2) TVOD (Transactional Video-On-Demand)
&lt;/h4&gt;

&lt;p&gt;TVOD, or Transactional Video-On-Demand, uses a pay-per-view format. Customers make one-time purchases to access specific content. &lt;/p&gt;

&lt;p&gt;For example, buying full seasons or individual episodes of your favorite tv shows through Amazon Prime or iTunes.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-avod-advertising-videoondemand"&gt;
  &lt;/a&gt;
  (3) AVOD (Advertising Video-On-Demand)
&lt;/h4&gt;

&lt;p&gt;AVOD, or Advertising Video-On-Demand, is essentially “free” for viewers because there’s no up-front cost to watch.&lt;/p&gt;

&lt;p&gt;AVOD revenue comes from businesses paying to advertise with short commercials throughout your videos.&lt;/p&gt;

&lt;p&gt;For viewers, this is a familiar setup because it feels like cable TV,  where they tune in to watch shows for the “price” of watching ads. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.videosdk.live/"&gt;Videosdk.live&lt;/a&gt; is an ideal platform for users to develop their streaming platforms flawless with no extra effort. We customize our APIs and SDKs according to client preferences to increase their app engagement. The CDNs we use for storing the digital content are exclusively secured enabling reliable and scalable streaming.Videosdk.live excels in its features.&lt;/p&gt;

&lt;p&gt;Apart from the above facilities, we also deliver some additional features making ourselves a reliable platform to use. Connect with us and explore what you never explored before.&lt;/p&gt;

&lt;p&gt;Reach us and get enriched with more such value content and an everlasting business corporate relation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-your-own-netflix"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.videosdk.live/"&gt;(Build Your Own Netflix)&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>webdev</category>
      <category>devops</category>
      <category>rails</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Adding a detail data fetching screen in Flutter</title>
      <author>Chris Bongers</author>
      <pubDate>Sat, 24 Jul 2021 09:13:39 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/adding-a-detail-data-fetching-screen-in-flutter-3c41</link>
      <guid>https://dev.to/dailydevtips1/adding-a-detail-data-fetching-screen-in-flutter-3c41</guid>
      <description>&lt;p&gt;In today's article, I want to show you a combination of a couple of elements to create a functional app in Flutter.&lt;/p&gt;

&lt;p&gt;The basis of this application will be the &lt;a href="https://daily-dev-tips.com/posts/top-anime-shows-flutter-app/"&gt;Anime app in Flutter&lt;/a&gt; we built a couple of days ago.&lt;br&gt;
But then we'll use the option to &lt;a href="https://daily-dev-tips.com/posts/sending-data-to-a-new-screen-in-flutter/"&gt;send data to a new screen&lt;/a&gt; to get a detailed episode list per anime series.&lt;br&gt;
Lastly, we top it off by &lt;a href="https://daily-dev-tips.com/posts/how-to-import-a-local-widget-in-flutter/"&gt;moving these pages to their widgets in Flutter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Making the result look like this example below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hal7QZrC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627117999713/TtBPC56jf_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hal7QZrC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627117999713/TtBPC56jf_.png" alt="Adding a detail data fetching screen in Flutter"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#architectural-changes"&gt;
  &lt;/a&gt;
  Architectural changes
&lt;/h2&gt;

&lt;p&gt;Before we get started, if you do want to follow along, you should download the &lt;a href="https://github.com/rebelchris/flutter/tree/fetch-anime-shows"&gt;Anime app from GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first code we need to change is our main application. We want this to be a routed application.&lt;/p&gt;

&lt;p&gt;Change the &lt;code&gt;AnimeApp&lt;/code&gt; class to reflect this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AnimeApp&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MaterialApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="s"&gt;'Anime app'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;debugShowCheckedModeBanner:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;initialRoute:&lt;/span&gt; &lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;routes:&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;HomePage&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
        &lt;span class="s"&gt;'/detail'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;DetailPage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;item:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;},&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By doing this, we create an app that contains multiple routes. The initial route is set to our &lt;code&gt;HomePage&lt;/code&gt;, which was our previous main application.&lt;/p&gt;

&lt;p&gt;The detailed route is added and comes with two parameters being the &lt;code&gt;item&lt;/code&gt; and the &lt;code&gt;title&lt;/code&gt;. We use these to render the top bar and fetch the details for this show.&lt;/p&gt;

&lt;p&gt;Now let's change the old anime app class to be the new home page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HomePage&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatefulWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;HomePage&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;_HomePageState&lt;/span&gt; &lt;span class="n"&gt;createState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_HomePageState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_HomePageState&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HomePage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Same as before&lt;/span&gt;

    &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;appBar:&lt;/span&gt; &lt;span class="n"&gt;AppBar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Anime app'&lt;/span&gt;&lt;span class="o"&gt;)),&lt;/span&gt;
      &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="c1"&gt;// Same&lt;/span&gt;
      &lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nothing major changed here. I just changed the class names to be more representing of the widget they render.&lt;br&gt;
Also, we can return the Scaffold and not the whole material app in the body since we have that in our anime app widget now.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#retrieving-data-on-the-detail-page"&gt;
  &lt;/a&gt;
  Retrieving data on the detail page
&lt;/h2&gt;

&lt;p&gt;With the structure fixed, we can make a new widget that will be our detailed page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DetailPage&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatefulWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;DetailPage&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;
      &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;_DetailPageState&lt;/span&gt; &lt;span class="n"&gt;createState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_DetailPageState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, this looks a little bit different than the home page widget, as it contains two variables that we can pass to it.&lt;/p&gt;

&lt;p&gt;The state looks pretty similar to the homepage state, but it uses a different future.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_DetailPageState&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DetailPage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;late&lt;/span&gt; &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Episode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;episodes&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;initState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;initState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;episodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetchEpisodes&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some minor things to note here is that we use the same idea to retrieve data using a future.&lt;br&gt;
However, we now pass a variable to this function that will fetch the data, the id of this series we clicked on.&lt;br&gt;
We retrieve this data by using the &lt;code&gt;widget.{variable}&lt;/code&gt; call.&lt;/p&gt;

&lt;p&gt;Let's quickly go ahead and make the Episode class, just as we made the &lt;code&gt;Show&lt;/code&gt; class in the previous article.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Episode&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;episodeId&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;Episode&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;episodeId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;factory&lt;/span&gt; &lt;span class="n"&gt;Episode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromJson&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Episode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;episodeId:&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'episode_id'&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, an episode will have an id and title, which is all we need.&lt;/p&gt;

&lt;p&gt;The future also looks pretty similar to what we've seen before:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Episode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fetchEpisodes&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'https://api.jikan.moe/v3/anime/&lt;/span&gt;&lt;span class="si"&gt;${id}&lt;/span&gt;&lt;span class="s"&gt;/episodes/1'&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;statusCode&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;episodesJson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jsonDecode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;)[&lt;/span&gt;&lt;span class="s"&gt;'episodes'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;episodesJson&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;episode&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Episode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromJson&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;episode&lt;/span&gt;&lt;span class="o"&gt;)).&lt;/span&gt;&lt;span class="na"&gt;toList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Failed to load episodes'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here you can see that we merge the id of the series in the URL we are fetching.&lt;/p&gt;

&lt;p&gt;By this point, our state can call the API and retrieve the data into the episodes variable.&lt;/p&gt;

&lt;p&gt;Let's look at how the widget will be styled.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Scaffold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nl"&gt;appBar:&lt;/span&gt; &lt;span class="n"&gt;AppBar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;)),&lt;/span&gt;
  &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;FutureBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;builder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AsyncSnapshot&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Episode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasData&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;separated&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;padding:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;EdgeInsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="nl"&gt;itemCount:&lt;/span&gt; &lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="o"&gt;!.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;itemBuilder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ListTile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="nl"&gt;leading:&lt;/span&gt; &lt;span class="n"&gt;CircleAvatar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                    &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;${snapshot.data![index].episodeId}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;)),&lt;/span&gt;
                &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="o"&gt;![&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;},&lt;/span&gt;
            &lt;span class="nl"&gt;separatorBuilder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
                &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Divider&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasError&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Something went wrong :('&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;CircularProgressIndicator&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;},&lt;/span&gt;
    &lt;span class="nl"&gt;future:&lt;/span&gt; &lt;span class="n"&gt;episodes&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;)),&lt;/span&gt;
&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, this code looks pretty similar to what we did on the home page. However, it renders slightly different.&lt;/p&gt;

&lt;p&gt;Note how we use the &lt;code&gt;widget.title&lt;/code&gt; to get the parameter title and set this as the AppBar title text.&lt;/p&gt;

&lt;p&gt;This will also create a list view based on the future builder.&lt;br&gt;
Inside the list, it will check if the future has data and return that.&lt;br&gt;
If it has an error, we also display that to the end-user.&lt;br&gt;
And while it's loading, we show a loader.&lt;/p&gt;

&lt;p&gt;In the list, we render a list tile, with a circle avatar containing the number of this episode and the title of the episode. Which will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7nUqT4jo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626592626153/wX-leRtWA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7nUqT4jo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626592626153/wX-leRtWA.png" alt="ListTile circle avatar in Flutter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To navigate to this page, we must add a tap listener to our home page items.&lt;/p&gt;

&lt;p&gt;Inside the list tile, add the following function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="nl"&gt;onTap:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Navigator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;MaterialPageRoute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;builder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;DetailPage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;item:&lt;/span&gt; &lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="o"&gt;![&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="na"&gt;malId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="o"&gt;![&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#moving-page-widgets-to-their-own-file-in-flutter"&gt;
  &lt;/a&gt;
  Moving page widgets to their own file in Flutter
&lt;/h2&gt;

&lt;p&gt;We have our functional application ready. However, our &lt;code&gt;main.dart&lt;/code&gt; file is getting quite big.&lt;/p&gt;

&lt;p&gt;So let's go ahead and move some data to their own files.&lt;/p&gt;

&lt;p&gt;I've created a folder called screens inside the &lt;code&gt;lib&lt;/code&gt; folder.&lt;br&gt;
In there create these two files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;home.dart&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;detail.dart&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we can move everything related to the homepage into that &lt;code&gt;home.dart&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;That includes all these items: (Note I've minimized the functions)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter/material.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter_app/screens/detail.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:http/http.dart'&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'dart:convert'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HomePage&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatefulWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Widget code&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_HomePageState&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HomePage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// State code&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Show&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Class code&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Show&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fetchShows&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Future code&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the same can be done for the detail page. Place that into the &lt;code&gt;detail.dart&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter/material.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:http/http.dart'&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'dart:convert'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DetailPage&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatefulWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Widget code&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_DetailPageState&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DetailPage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// State code&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Episode&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Class code&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Episode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fetchEpisodes&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Future code&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our &lt;code&gt;main.dart&lt;/code&gt; file now should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter/material.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter_app/screens/home.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter_app/screens/detail.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;runApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AnimeApp&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AnimeApp&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MaterialApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="s"&gt;'Anime app'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;debugShowCheckedModeBanner:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;initialRoute:&lt;/span&gt; &lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;routes:&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;HomePage&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
        &lt;span class="s"&gt;'/detail'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;DetailPage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;item:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;},&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More maintainable, right?&lt;br&gt;
If you are looking for the complete code for any references, you can find the code on this &lt;a href="https://github.com/rebelchris/flutter/tree/anime-detail-page"&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
    </item>
    <item>
      <title>Python basic skills: Lets create an 8 characters random password generator.</title>
      <author>Martin N Thuo</author>
      <pubDate>Sat, 24 Jul 2021 09:09:22 +0000</pubDate>
      <link>https://dev.to/mertoenjosh/python-basic-skills-lets-create-an-8-characters-random-password-generator-3bk</link>
      <guid>https://dev.to/mertoenjosh/python-basic-skills-lets-create-an-8-characters-random-password-generator-3bk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-python"&gt;
  &lt;/a&gt;
  What is python?
&lt;/h2&gt;

&lt;p&gt;According to the official &lt;a href="https://www.python.org/"&gt;&lt;code&gt;python&lt;/code&gt;&lt;/a&gt; website, &lt;strong&gt;Python is a programming language that lets you work quickly and integrate systems more effectively&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;A much more specific meaning would be: &lt;em&gt;its an &lt;code&gt;interpreted&lt;/code&gt;, &lt;code&gt;object-oriented&lt;/code&gt;, &lt;code&gt;high-level&lt;/code&gt; programming language with dynamic semantics&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;In this article we will code a python program that generates a random 8 characters long password.&lt;/p&gt;

&lt;p&gt;A password is a secret phrase that must be used to allow access to a computer system or service.&lt;/p&gt;

&lt;p&gt;To ensure each password generated is strong, it must contain each of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2 random lower case letters&lt;/li&gt;
&lt;li&gt;2 random upper case letters&lt;/li&gt;
&lt;li&gt;2 random numeric characters&lt;/li&gt;
&lt;li&gt;2 random symbols&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#breaking-down-the-process-"&gt;
  &lt;/a&gt;
  Breaking down the process ?
&lt;/h3&gt;

&lt;p&gt;The process involves generating two characters of each type (letters, numbers and symbols), combine them in a &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;shuffle&lt;/code&gt; them randomly and &lt;code&gt;join&lt;/code&gt; them to a string.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;List&lt;/strong&gt;: A list is a python data type used to store multiple items in a single variable.&lt;/p&gt;

&lt;p&gt;To begin writing the program, its important we understand the requirements.&lt;/p&gt;

&lt;p&gt;We need to make the password as unique and random as possible. For this we need to import &lt;code&gt;random&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Module&lt;/strong&gt;: A module is a Python file that's intended to be imported into scripts &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;library&lt;/strong&gt; : Python Libraries are a set of useful functions that eliminate the need for writing codes from scratch.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-code-shall-we"&gt;
  &lt;/a&gt;
  Let's code, shall we?
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Importing the required modules.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;String module has a pre-initialized string used as string constant, &lt;code&gt;string.printable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a helper function for slitting a string.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;split&lt;/code&gt; helper function will split &lt;code&gt;string.printable&lt;/code&gt; into a list of all the individual charters of ascii.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;all_strings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Split returns a list containing all of the ascii characters, which we store in a variable &lt;code&gt;all_strings&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Extract new lists for each type of ascii characters&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;all_strings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;lowerCase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;all_strings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;upperCase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;all_strings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;syms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;all_strings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;94&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use the indexing of each of the characters in the &lt;code&gt;all_strings&lt;/code&gt; list to extract from and to the required index of each type of character.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Indexing in python starts from 0.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Create helpers functions to generate random characters of each type&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# create helper functions to generate two random characters of each
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;randomLower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lowerCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lowerCase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;randomUpper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;upperCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;upperCase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;randomDigits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;randomSyms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;syms&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;syms&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;random.choices&lt;/strong&gt;: The &lt;code&gt;choices()&lt;/code&gt; method returns a list with the randomly selected element from the specified sequence&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Concatenate the random strings in one list&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;randomSyms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;syms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;randomDigits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;randomLower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lowerCase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;randomUpper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;upperCase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;passwd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We &lt;code&gt;concatenate&lt;/code&gt; the generated string in one list and use the &lt;code&gt;shuffle()&lt;/code&gt; method to shuffle the list.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;join()&lt;/code&gt; method is used to join items in a list by a delimiter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now we can print out the result&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;passwd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>python</category>
      <category>datascience</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Dockerize your Go app</title>
      <author>Karan Pratap Singh</author>
      <pubDate>Sat, 24 Jul 2021 09:08:50 +0000</pubDate>
      <link>https://dev.to/karanpratapsingh/dockerize-your-go-app-46pp</link>
      <guid>https://dev.to/karanpratapsingh/dockerize-your-go-app-46pp</guid>
      <description>&lt;p&gt;Go is quickly becoming one of my favorite languages to work with. So, today we'll dockerize our Go app by taking advantage of builder pattern and multistage builds to reduce our docker image from &lt;code&gt;850mb&lt;/code&gt; to just &lt;code&gt;15mb&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article is part of the Dockerize series, make sure to checkout the &lt;a href="https://dev.to/karanpratapsingh/introduction-to-dockerize-series-28l1"&gt;Introduction&lt;/a&gt; where I go over some concepts which we are going to use. Code from this article is available &lt;a href="https://github.com/karanpratapsingh/tutorials/tree/master/go"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/zUc2LihXjlw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I've also made a video, if you'd like to follow along&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project setup
&lt;/h3&gt;

&lt;p&gt;I've initialized a simple api using &lt;a href="https://github.com/gorilla/mux"&gt;Mux&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── main.go
├── go.mod
└── go.sum
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's our &lt;code&gt;main.go&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;encoding/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;log&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;net/http&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;github.com/gorilla/mux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;router&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mux&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rw&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;response&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello Docker!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewEncoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rw&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Server is running!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:4000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#for-development"&gt;
  &lt;/a&gt;
  For development
&lt;/h3&gt;

&lt;p&gt;We'll be using &lt;a href="https://github.com/cespare/reflex"&gt;Reflex&lt;/a&gt; as part of our development workflow. If you're not familiar, Refelx provides live reload when developing.&lt;/p&gt;

&lt;p&gt;Let's continue our docker setup by adding a &lt;code&gt;Dockerfile&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; golang:1.16.5 as development&lt;/span&gt;
&lt;span class="c"&gt;# Add a work directory&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;
&lt;span class="c"&gt;# Cache and install dependencies&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; go.mod go.sum ./&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;go mod download
&lt;span class="c"&gt;# Copy app files&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;span class="c"&gt;# Install Reflex for development&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;go &lt;span class="nb"&gt;install &lt;/span&gt;github.com/cespare/reflex@latest
&lt;span class="c"&gt;# Expose port&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 4000&lt;/span&gt;
&lt;span class="c"&gt;# Start app&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; reflex -g '*.go' go run api.go --start-service&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's create a &lt;code&gt;docker-compose.yml&lt;/code&gt;. Here we'll also mount our code in a &lt;a href="https://www.cloudsavvyit.com/7500/what-are-docker-volumes-and-how-do-you-use-them/"&gt;volume&lt;/a&gt; so that we can sync our changes with the container while developing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.8"&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app-dev&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app-dev&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
      &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;development&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.:/app&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;4000:4000&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Start! Start! Start!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;we can also use the &lt;code&gt;-d&lt;/code&gt; flag to run in daemon mode&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Great, our dev server is up!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app-dev  | Starting service...
app-dev  | 2021/07/04 12:50:06 Server is running!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's checkout our image using &lt;code&gt;docker images&lt;/code&gt; command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;REPOSITORY          TAG                   IMAGE ID       CREATED         SIZE
app-dev             latest                3063740d56d8   7 minutes ago   872MB
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Over &lt;code&gt;850mb&lt;/code&gt; for a hello world! While this might be okay for development, but for production let's see how we can reduce our image size&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-production"&gt;
  &lt;/a&gt;
  For production
&lt;/h3&gt;

&lt;p&gt;Let's update our &lt;code&gt;Dockerfile&lt;/code&gt; by adding a &lt;code&gt;builder&lt;/code&gt; and &lt;code&gt;production&lt;/code&gt; stage&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; golang:1.16.5 as builder&lt;/span&gt;
&lt;span class="c"&gt;# Define build env&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; GOOS linux&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; CGO_ENABLED 0&lt;/span&gt;
&lt;span class="c"&gt;# Add a work directory&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;
&lt;span class="c"&gt;# Cache and install dependencies&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; go.mod go.sum ./&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;go mod download
&lt;span class="c"&gt;# Copy app files&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;span class="c"&gt;# Build app&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;go build &lt;span class="nt"&gt;-o&lt;/span&gt; app

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; alpine:3.14 as production&lt;/span&gt;
&lt;span class="c"&gt;# Add certificates&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;apk add &lt;span class="nt"&gt;--no-cache&lt;/span&gt; ca-certificates
&lt;span class="c"&gt;# Copy built binary from builder&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=builder app .&lt;/span&gt;
&lt;span class="c"&gt;# Expose port&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 4000&lt;/span&gt;
&lt;span class="c"&gt;# Exec built binary&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ./app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's add a build our production image&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker build -t app-prod . --target production
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's check out our built production image&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker images
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using builder pattern we reduced out image size to just &lt;code&gt;~15mb&lt;/code&gt;!!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;REPOSITORY                    TAG                   IMAGE ID       CREATED          SIZE
app-prod                      latest                ed84a3896251   50 seconds ago   14.7MB
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;let's start our production container on port &lt;code&gt;80&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -p 80:4000 --name app-prod app-prod
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also add a &lt;a href="https://opensource.com/article/18/8/what-how-makefile"&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/a&gt; to make our workflow easier&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight make"&gt;&lt;code&gt;&lt;span class="nl"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="err"&gt;docker-compose&lt;/span&gt; &lt;span class="err"&gt;up&lt;/span&gt;

&lt;span class="nl"&gt;build&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="err"&gt;docker&lt;/span&gt; &lt;span class="err"&gt;build&lt;/span&gt; &lt;span class="err"&gt;-t&lt;/span&gt; &lt;span class="err"&gt;app-prod&lt;/span&gt; &lt;span class="err"&gt;.&lt;/span&gt; &lt;span class="err"&gt;--target&lt;/span&gt; &lt;span class="err"&gt;production&lt;/span&gt;

&lt;span class="nl"&gt;start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="nl"&gt;docker run -p 80&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;4000 --name app-prod app-prod &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h2&gt;

&lt;p&gt;With that, we should be able to take advantage of docker in our workflow and deploy our production images faster to any platform of our choice.&lt;/p&gt;

&lt;p&gt;Feel free to reach out to me on &lt;a href="https://twitter.com/karan_6864"&gt;Twitter&lt;/a&gt; if you face any issues.&lt;/p&gt;

</description>
      <category>go</category>
      <category>docker</category>
      <category>devops</category>
    </item>
    <item>
      <title>ClearCut Fullstack Developer Roadmap 2021 with 300+ Resources 🤩🚀</title>
      <author>Mohammed Junaid</author>
      <pubDate>Sat, 24 Jul 2021 09:07:56 +0000</pubDate>
      <link>https://dev.to/mdjunaidap/clearcut-fullstack-developer-roadmap-2021-with-300-resources-2690</link>
      <guid>https://dev.to/mdjunaidap/clearcut-fullstack-developer-roadmap-2021-with-300-resources-2690</guid>
      <description>&lt;h2&gt;
  &lt;a href="#frontend-developer-backend-developer-full-stack-developer"&gt;
  &lt;/a&gt;
  Frontend Developer + Backend Developer = Full Stack Developer.🤩😍🚀
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#frontend-developer-roadmap-2021"&gt;
  &lt;/a&gt;
  ⭕ Frontend Developer Roadmap 2021
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#1-internet"&gt;
  &lt;/a&gt;
  1. Internet
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources-from-youtube-website"&gt;
  &lt;/a&gt;
  - Free learning Resources from Youtube, Website
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#2-html"&gt;
  &lt;/a&gt;
  2. HTML
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources-from-youtube-website-twitter-thread"&gt;
  &lt;/a&gt;
  - Free learning Resources from Youtube, Website, Twitter Thread.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#3-css"&gt;
  &lt;/a&gt;
  3. CSS
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources-from-youtube-website-twitter-thread"&gt;
  &lt;/a&gt;
  - Free learning Resources from Youtube, Website, Twitter Thread.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-paid-courses-to-learn-html-and-css"&gt;
  &lt;/a&gt;
  - Paid Courses to Learn HTML and CSS.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-improve-css-skills-by-playing-games"&gt;
  &lt;/a&gt;
  - Improve CSS Skills By Playing GAMES.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-build-projects-using-html-and-css-for-practice"&gt;
  &lt;/a&gt;
  - Build Projects Using HTML and CSS for PRACTICE.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-websites-to-practice-front-end-skills"&gt;
  &lt;/a&gt;
  - Websites to Practice front end Skills.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#4-javascript"&gt;
  &lt;/a&gt;
  4. JavaScript
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources-from-youtube-website-twitter-thread"&gt;
  &lt;/a&gt;
  - Free learning Resources from Youtube, Website, Twitter Thread.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-paid-courses-to-master-javascript"&gt;
  &lt;/a&gt;
  - Paid Courses to Master JavaScript
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-build-projects-using-javascript"&gt;
  &lt;/a&gt;
  - Build Projects Using JavaScript.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#5-git"&gt;
  &lt;/a&gt;
  5. Git
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources-from-youtube-website"&gt;
  &lt;/a&gt;
  - Free learning Resources from Youtube, Website.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-git-cheat-sheets"&gt;
  &lt;/a&gt;
  - Git Cheat sheets
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#6-css-frameworks"&gt;
  &lt;/a&gt;
  6. CSS Frameworks.
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#61-tailwind-css"&gt;
  &lt;/a&gt;
  6.1. Tailwind CSS.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources-from-youtube-website"&gt;
  &lt;/a&gt;
  - Free learning Resources from Youtube, Website.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-projects-to-practice-tailwind-css"&gt;
  &lt;/a&gt;
  - Projects to Practice Tailwind CSS.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#62-bootstrap"&gt;
  &lt;/a&gt;
  6.2. Bootstrap.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources-from-youtube-website"&gt;
  &lt;/a&gt;
  - Free learning Resources from Youtube, Website.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-projects-to-practice-bootstrap"&gt;
  &lt;/a&gt;
  - Projects to practice Bootstrap.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#63-bulma-css-framework"&gt;
  &lt;/a&gt;
  6.3. Bulma CSS Framework.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources-from-youtube-website"&gt;
  &lt;/a&gt;
  - Free learning Resources from Youtube, Website.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-projects-to-practice-bulma-css"&gt;
  &lt;/a&gt;
  - Projects to Practice BULMA CSS.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#7-javascript-frameworks"&gt;
  &lt;/a&gt;
  7. JavaScript Frameworks.
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#71-reactjs"&gt;
  &lt;/a&gt;
  7.1. REACTJs
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-paid-courses-to-learn-react-js"&gt;
  &lt;/a&gt;
  - Paid courses to learn React Js
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-build-projects-to-practice-reactjs"&gt;
  &lt;/a&gt;
  - Build Projects to Practice ReactJs.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#72-vue-js"&gt;
  &lt;/a&gt;
  7.2. Vue Js.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-paid-courses-for-vuejs"&gt;
  &lt;/a&gt;
  - Paid Courses for Vue.js
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-projects-to-practice-vuejs"&gt;
  &lt;/a&gt;
  - Projects to Practice VueJs
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#73-angular"&gt;
  &lt;/a&gt;
  7.3 Angular
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-paid-courses-to-learn-angular"&gt;
  &lt;/a&gt;
  - Paid Courses to Learn Angular.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-projects-to-practice-angular"&gt;
  &lt;/a&gt;
  - Projects to Practice Angular.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#74-svelte"&gt;
  &lt;/a&gt;
  7.4. Svelte
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-paid-course-to-learn-svelte-js"&gt;
  &lt;/a&gt;
  - Paid Course to Learn Svelte Js.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-projects-to-practice-svelte-js"&gt;
  &lt;/a&gt;
  - Projects to Practice Svelte Js.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#backend-developer-roadmap-2021"&gt;
  &lt;/a&gt;
  ⭕Backend Developer Roadmap 2021
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#learn-basics-of-html-css-amp-javascript"&gt;
  &lt;/a&gt;
  Learn basics of HTML CSS &amp;amp; Javascript
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#learn-git-amp-github"&gt;
  &lt;/a&gt;
  Learn Git &amp;amp; Github
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#1-apis"&gt;
  &lt;/a&gt;
  1. APIs
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources"&gt;
  &lt;/a&gt;
  - Free Learning Resources.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-projects-to-practise-api"&gt;
  &lt;/a&gt;
  - Projects to Practise API
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#2-nodejs"&gt;
  &lt;/a&gt;
  2. NodeJS
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources"&gt;
  &lt;/a&gt;
  - Free Learning Resources.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-projects-to-practice-nodejs"&gt;
  &lt;/a&gt;
  - Projects to Practice NodeJS
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#3-expressjs"&gt;
  &lt;/a&gt;
  3. ExpressJs
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources"&gt;
  &lt;/a&gt;
  - Free Learning Resources.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-projects-to-practice-expressjs"&gt;
  &lt;/a&gt;
  - Projects to Practice ExpressJS
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#4-sql-vs-nosql"&gt;
  &lt;/a&gt;
  4. SQL Vs NoSQL
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#5-sql"&gt;
  &lt;/a&gt;
  5. SQL
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources"&gt;
  &lt;/a&gt;
  - Free Learning Resources.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#6-postgresql"&gt;
  &lt;/a&gt;
  6. PostgreSQL
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#7-nosql"&gt;
  &lt;/a&gt;
  7. NoSQL
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources"&gt;
  &lt;/a&gt;
  - Free Learning Resources.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#8-mongodb"&gt;
  &lt;/a&gt;
  8. MongoDB
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources"&gt;
  &lt;/a&gt;
  - Free Learning Resources.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-projects-to-practice-mongodb"&gt;
  &lt;/a&gt;
  - Projects to Practice MongoDB
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#9-firebase"&gt;
  &lt;/a&gt;
  9. Firebase
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources"&gt;
  &lt;/a&gt;
  - Free Learning Resources.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-projects-for-practice-firebase"&gt;
  &lt;/a&gt;
  - Projects for Practice Firebase
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-paid-courses-for-above-technologies"&gt;
  &lt;/a&gt;
  - Paid Courses for Above Technologies
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#10-docker"&gt;
  &lt;/a&gt;
  10. Docker
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources"&gt;
  &lt;/a&gt;
  - Free Learning Resources.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#11-cicd"&gt;
  &lt;/a&gt;
  11. CI/CD
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources"&gt;
  &lt;/a&gt;
  - Free Learning Resources.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#12-devops"&gt;
  &lt;/a&gt;
  12. DevOps
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-free-learning-resources"&gt;
  &lt;/a&gt;
  - Free Learning Resources.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-devops-projects"&gt;
  &lt;/a&gt;
  - DevOps Projects
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#above-mentioned-resources-at-one-place"&gt;
  &lt;/a&gt;
  Above Mentioned Resources at One Place..🤩❤️
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#grab-your-copy-now-now-now"&gt;
  &lt;/a&gt;
  Grab Your Copy Now Now Now👇👇
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mdjunaidap.gumroad.com/l/fullstack-dev-roadmap"&gt;Full Stack Developer Roadmap 2021&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to Fix Brightness Controller Missing on Linux XFCE Desktop?</title>
      <author>Mir Rahed Uddin</author>
      <pubDate>Sat, 24 Jul 2021 08:53:33 +0000</pubDate>
      <link>https://dev.to/rahedmir/how-to-fix-brightness-controller-missing-on-linux-xfce-desktop-269o</link>
      <guid>https://dev.to/rahedmir/how-to-fix-brightness-controller-missing-on-linux-xfce-desktop-269o</guid>
      <description>&lt;p&gt;XFCE is one of the most lightweight desktop environment among other Linux desktops, resource-friendly suitable for old PC/Computers. XFCE removed most of the non-essential elements such as glossy desktop design, animations, etc in terms of making it more resource-friendly. But the problem is, in the process of doing that sometimes they also removed some essential components, and one of the such components is &lt;code&gt;brightness controller&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you are also not able to adjust your screen brightness due to this missing component follow these steps below to fix it.   &lt;/p&gt;

&lt;p&gt;1| Open your terminal and execute the following command...&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo apt-get install xfce4-power-manager-plugins&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Git_sHNK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6jbo8dteazaezun5veqs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Git_sHNK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6jbo8dteazaezun5veqs.png" alt="Linux Terminal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2| Enter your password and press the &lt;code&gt;y&lt;/code&gt; key to continue (if asked)&lt;/p&gt;

&lt;p&gt;3| Now, Right-click on the panel, Panel-&amp;gt; Add New Items...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bUtUACyo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mstginb461dtfjdsjsjq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bUtUACyo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mstginb461dtfjdsjsjq.png" alt="Add New Items"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4| From the "Add New Items" list, search for &lt;code&gt;Power Manager Plugin&lt;/code&gt;, select it then click on the Add button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7ygC_bru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbkwdqv8wvvhxkyyibfa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7ygC_bru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbkwdqv8wvvhxkyyibfa.png" alt="Power Manager Plugins"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5| Now, you will see the &lt;code&gt;Power Manager icon&lt;/code&gt; appear on your panel, just click on that to begin adjusting your screen brightness. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rzOhXS6d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c19kke2ecrcdus2yvoi1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rzOhXS6d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c19kke2ecrcdus2yvoi1.png" alt="Adjust screen brightness"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Share your thoughts if you find any other essential components which are missing from the XFCE desktop...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#watch-on-youtube"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=237Sngl9N2I"&gt;Watch on YouTube&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Thanks for reading. Have a great day :)&lt;/p&gt;

&lt;p&gt;Coffee &lt;a href="https://www.buymeacoffee.com/rahedmir"&gt;https://www.buymeacoffee.com/rahedmir&lt;/a&gt; &lt;/p&gt;

</description>
      <category>linux</category>
      <category>devops</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>AngularJs Fully Explained</title>
      <author>Rocky</author>
      <pubDate>Sat, 24 Jul 2021 08:30:02 +0000</pubDate>
      <link>https://dev.to/codelivly/angularjs-fully-explained-26bp</link>
      <guid>https://dev.to/codelivly/angularjs-fully-explained-26bp</guid>
      <description>&lt;h3&gt;What is AngularJS?&lt;/h3&gt;
&lt;p&gt;AngularJS is an open source Model-View-Controller framework which is similar to the JavaScript framework.&lt;/p&gt;
&lt;p&gt;Angular JS is probably one of the most popular modern day web frameworks available today. This framework is used for developing mostly Single Page applications. This framework has been developed by a group of developers from Google itself.&lt;/p&gt;
&lt;p&gt;Because of the sheer support of Google and ideas from a wide community forum, the framework is always kept up to date. Also, it always incorporates the latest development trends in the market.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;b&gt;Read More&lt;/b&gt;: &lt;/span&gt;&lt;a href="https://bit.ly/3BF157E"&gt;&lt;b&gt;&lt;span&gt;Angular Js Explained&lt;/span&gt;&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Absorb Knowledge in 30 Seconds | Brain Bytes #3</title>
      <author>Loïc Boset</author>
      <pubDate>Sat, 24 Jul 2021 08:27:48 +0000</pubDate>
      <link>https://dev.to/loicboset/absorb-knowledge-in-30-seconds-brain-bytes-3-4del</link>
      <guid>https://dev.to/loicboset/absorb-knowledge-in-30-seconds-brain-bytes-3-4del</guid>
      <description>&lt;h1&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap 🧠
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.brainbytes.dev/"&gt;Brain Bytes&lt;/a&gt; is a knowledge platform where you can learn new things about software development in less than 30 seconds.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bytes-of-the-week"&gt;
  &lt;/a&gt;
  Bytes of the Week
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#dont-forget-about-raw-finally-endraw-in-your-promises"&gt;
  &lt;/a&gt;
  Don't forget about &lt;code&gt;.finally()&lt;/code&gt; in your Promises
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;.finally()&lt;/code&gt; method is useful to execute any function that needs to be executed after a Promise has been resolved (whether successfully or not).&lt;/p&gt;

&lt;p&gt;As an example for a React app, it can be used to update the loading state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;getData()
  .then((res) =&amp;gt; {
    setData(res.data);
  })
  .catch((err) =&amp;gt; {
    setError(err);
  })
  .finally(() =&amp;gt; {
    setIsLoading(false);
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#javascript-variable-assignment-value-vs-reference"&gt;
  &lt;/a&gt;
  Javascript variable assignment (value vs reference)
&lt;/h3&gt;

&lt;p&gt;JS has 5 primitive types: &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, and &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When you assign a primitive type to a variable, the actual value is assigned, such as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let string1 = 'hello world'
let string2 = string1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, &lt;code&gt;string2&lt;/code&gt; is assigned the value of &lt;code&gt;string1&lt;/code&gt;, being hello world.&lt;/p&gt;

&lt;p&gt;Assigning a new value to &lt;code&gt;string2&lt;/code&gt; won't affect &lt;code&gt;string1&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;string2 = 'foor bar'

console.log(string1)
// 'hello world'
console.log(string2)
// 'foo bar'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, when the assigned value is an &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Function&lt;/code&gt;, or &lt;code&gt;Object&lt;/code&gt; a reference to the object in memory is assigned.&lt;/p&gt;

&lt;p&gt;Leading to unexpected situations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let object1 = { name: 'Alan Grant' }
let object2 = object1

object2.name = 'John Wick'

console.log(object1)
// { name: 'John Wick' }
console.log(object2)
// { name: 'John Wick' }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#javascript-closures-advanced-concept"&gt;
  &lt;/a&gt;
  Javascript Closures (Advanced Concept)
&lt;/h3&gt;

&lt;p&gt;Closures are frequently used in JavaScript for object data privacy, in event handlers and callback functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A closure gives you access to an outer function’s scope from an inner function.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To use a closure, define a function inside another function and expose it. To expose a function, return it or pass it to another function.&lt;/p&gt;

&lt;p&gt;Closures can be useful to create private variables or functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function OuterFunction() {

    let outerVariable = 1;

    function InnerFunction() {
        console.log(outerVariable);
    }

    return InnerFunction;
}

const innerFunc = OuterFunction();

innerFunc(); 
// 100
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you call &lt;code&gt;innerFunc()&lt;/code&gt;, it can still access &lt;code&gt;outerVariable&lt;/code&gt; which is declared in &lt;code&gt;OuterFunction()&lt;/code&gt;. This is called Closure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#type-coercion"&gt;
  &lt;/a&gt;
  Type coercion
&lt;/h3&gt;

&lt;p&gt;In javascript, type coercion is the automatic process of converting a value from one type to another (for example, from string to integer).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2 * "3"
// 6

"12" / 4
// 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#crosssite-request-forgery-csrf"&gt;
  &lt;/a&gt;
  Cross-Site Request Forgery (CSRF)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/First_steps/Website_security"&gt;CSRF attacks&lt;/a&gt; allow a malicious user to execute actions using the credentials of another user.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; John is evil. He knows that a particular site allows logged-in users to transfer money using an HTTP POST request that includes the account name and an amount of money.&lt;/p&gt;

&lt;p&gt;John builds a form that includes his bank details and an amount of money as hidden fields, and emails it to other site users (with the Submit button disguised as a link to a "get rich quick" site).&lt;/p&gt;

&lt;p&gt;Each time a user clicks on the submit button, an HTTP POST request is sent to the server containing the transaction details and any client-side cookies that the browser associated with the site (adding associated site cookies to requests is normal browser behavior). The server will check the cookies, and use them to determine whether or not the user is logged in and will authorize the transaction if so.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#progressive-web-app-pwa"&gt;
  &lt;/a&gt;
  Progressive Web App (PWA)
&lt;/h3&gt;

&lt;p&gt;A PWA is a web application that displays a website in the form of an app on smartphones. It is fast and can work with a poor internet connection.&lt;/p&gt;

&lt;p&gt;Part of the magic of a PWA is based on &lt;em&gt;Service Workers&lt;/em&gt;. Thanks to them, a PWA can store HTML files, CSS files, and images in the browser cache, and developers can fully control network communications, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps/Offline_Service_workers"&gt;making PWAs work offline&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Twitter, Airbnb and Spotify are examples of PWAs.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#come-and-participate"&gt;
  &lt;/a&gt;
  Come and participate!
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.brainbytes.dev/"&gt;Brain Bytes&lt;/a&gt; is an open source project, so reach out to me to participate in its development! There is plenty to do!&lt;/p&gt;

&lt;p&gt;Come now and &lt;a href="https://www.brainbytes.dev/"&gt;share your knowledge&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Thanks for reading 🙏 ❤️&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Convert python 2 to python 3 [In 1 Single Click]</title>
      <author>Rohit Nishad</author>
      <pubDate>Sat, 24 Jul 2021 07:46:04 +0000</pubDate>
      <link>https://dev.to/rohitnishad613/convert-python-2-to-python-3-in-1-single-click-2a8p</link>
      <guid>https://dev.to/rohitnishad613/convert-python-2-to-python-3-in-1-single-click-2a8p</guid>
      <description>&lt;p&gt;After 1 January 2020 many companies and individuals are worried about their Python 2 code because Python’s organization stops support for Python 2, and the new development era was moving to python3 to solve this problem. There. They are few packages developed over time, one of them is official and extremely powerful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#three-library-that-is-used-to-convert-your-python-2-code-to-python-3-code"&gt;
  &lt;/a&gt;
  Three Library that is used to convert your Python 2 code to Python 3 code.
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;2to3 (Offical, recommended)&lt;/li&gt;
&lt;li&gt;Python Future + Futurize&lt;/li&gt;
&lt;li&gt;Six + Modernize&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now at this point, you definitely thinking well, what’s the difference between, 2to3, Python Future + Futurize, and Six + Modernize.&lt;/p&gt;

&lt;p&gt;Here’s your answer!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-the-difference-between"&gt;
  &lt;/a&gt;
  What’s the difference between
&lt;/h2&gt;

&lt;p&gt;Automated tools for PY2 to PY3 conversion/compatibility?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JVd-9sIj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hp4o1qrnf22mwnmqld1e.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JVd-9sIj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hp4o1qrnf22mwnmqld1e.jpg" alt="2to3, Python Future + Futurize, and Six + Modernize"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-convert-python-2-to-python-3"&gt;
  &lt;/a&gt;
  How to convert Python 2 to Python 3
&lt;/h2&gt;

&lt;p&gt;This can be very easy if you use any of the above libraries (do not forget to make sure the compatibility)&lt;br&gt;
There are two approaches for converting Python 2 to python 3.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-1-convert-python-2-to-python-3-using-webtool"&gt;
  &lt;/a&gt;
  Method #1: Convert Python 2 to python 3 using web-tool.
&lt;/h3&gt;

&lt;p&gt;There is a simple tool for converting python 2 to python 3.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#you-can-use-a-web-application-to-convert-python-2-to-3"&gt;
  &lt;/a&gt;
  you can use a &lt;a href="https://360techexplorer.com/tools/python-2-to-3-converter/"&gt;web application to convert python 2 to 3&lt;/a&gt;.
&lt;/h4&gt;

&lt;p&gt;This tool is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;100% FREE&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compatible with All versions of Python&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Actively maintained&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#method-2-convert-python-2-to-python-3-using-a-python-library"&gt;
  &lt;/a&gt;
  Method #2: Convert Python 2 to python 3 using a python library.
&lt;/h3&gt;

&lt;p&gt;We can convert Python2 scripts to Python3 scripts by using the 2to3 module. It changes Python2 syntax to Python3 syntax. We can change all the files in a particular folder from python2 to python3.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-1-open-your-terminal-and-navigate-to-your-file"&gt;
  &lt;/a&gt;
  Step 1: Open your terminal and navigate to your File
&lt;/h4&gt;

&lt;p&gt;Open your terminal or CMD depend on whatever you are using Windows or Linux.&lt;/p&gt;

&lt;p&gt;Navigate to the directory where your python file(s) is/are located. (of course, using the “cd” command)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-2-install-the-library"&gt;
  &lt;/a&gt;
  Step 2: Install the library
&lt;/h4&gt;

&lt;p&gt;As usable, use pip to install 2to3, use can use any other library as well, I like 2to3&lt;/p&gt;

&lt;p&gt;Commnd: pip install 2to3&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-3-convert-the-files"&gt;
  &lt;/a&gt;
  Step 3: Convert the files
&lt;/h4&gt;

&lt;p&gt;Excute: 2to3 [file or folder] -w&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>tooling</category>
    </item>
  </channel>
</rss>
