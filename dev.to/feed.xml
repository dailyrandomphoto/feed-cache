<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Cross Cutting Concerns in Spring Framework</title>
      <author>Pramuda Liyanage</author>
      <pubDate>Tue, 02 Nov 2021 18:06:48 +0000</pubDate>
      <link>https://dev.to/pramudaliyanage/cross-cutting-concerns-in-spring-framework-9fo</link>
      <guid>https://dev.to/pramudaliyanage/cross-cutting-concerns-in-spring-framework-9fo</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zQEz9JVn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzy2ihxfoexfw4q7g10f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQEz9JVn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzy2ihxfoexfw4q7g10f.png" alt="Image description" width="557" height="315"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What is a Concern?&lt;br&gt;
The concern is behavior that we want to have in a particular module of an application. A concern may be defined as a functionality we want to implement.&lt;/p&gt;

&lt;p&gt;What is Cross Cutting Concerns?&lt;/p&gt;

&lt;p&gt;In any application, there is some generic functionality that is needed in many places. But this functionality is not related to the application's business logic. Suppose you perform a role-based security check before every business method in your application. Here security is a cross-cutting concern. It is required for any application but it is not necessary from the business point of view, it is a simple generic functionality we have to implement in many places in the application. The following are examples of the cross-cutting concerns for the enterprise application.&lt;/p&gt;

&lt;p&gt;** Logging and tracing&lt;br&gt;
** Transaction management&lt;br&gt;
** Security&lt;br&gt;
** Caching&lt;br&gt;
** Error handling&lt;br&gt;
** Performance monitoring&lt;br&gt;
** Custom business rules&lt;/p&gt;

&lt;p&gt;Spring Aspect Oriented Programming Overview&lt;/p&gt;

&lt;p&gt;Most of the enterprise applications have some common crosscutting concerns that are applicable to different types of Objects and modules. Some of the common crosscutting concerns are logging, transaction management, data validation, etc.&lt;br&gt;
In Object Oriented Programming, modularity of application is achieved by Classes whereas in Aspect Oriented Programming application modularity is achieved by Aspects and they are configured to cut across different classes.&lt;br&gt;
Spring AOP takes out the direct dependency of crosscutting tasks from classes that we can't achieve through normal object oriented programming model. For example, we can have a separate class for logging but again the functional classes will have to call these methods to achieve logging across the application.&lt;/p&gt;

&lt;p&gt;What IS AOP?&lt;/p&gt;

&lt;p&gt;AOP is a programming paradigm that aims to increase modularity by allowing the separation of cross-cutting concerns.&lt;br&gt;
Before we dive into the implementation of Spring AOP implementation, we should understand the core concepts of AOP.&lt;/p&gt;

&lt;p&gt;Aspect =&amp;gt; An aspect is a modularization of a concern that cuts across multiple classes&lt;/p&gt;

&lt;p&gt;Joinpoint =&amp;gt; A Joinpoint is a point during the execution of a program, such as the execution of a method or the handling of an exception.&lt;/p&gt;

&lt;p&gt;Pointcut =&amp;gt; A Pointcut is a predicate that helps match an Advice to be applied by an Aspect at a particular JoinPoint.We often associate the Advice with a Pointcut expression, and it runs at any Joinpoint matched by the Pointcut.&lt;/p&gt;

&lt;p&gt;Advice =&amp;gt; An Advice is an action taken by an aspect at a particular Joinpoint. Different types of advice include "around," "before," and "after."In Spring, an Advice is modelled as an interceptor, maintaining a chain of interceptors around the Joinpoint.&lt;/p&gt;

&lt;p&gt;Proxy =&amp;gt; Proxy is the object which is created by the framework after applying the advice on the target object.&lt;/p&gt;

&lt;p&gt;Target =&amp;gt; Target is the application object on which the advice will be applied.&lt;/p&gt;

&lt;p&gt;Sources : &lt;a href="https://www.baeldung.com/spring-aop"&gt;https://www.baeldung.com/spring-aop&lt;/a&gt; &lt;a href="https://www.codejava.net/frameworks/spring/understanding-spring-aophttps://www.journaldev.com/2583/spring-aop-example-tutorial-aspect-advice-pointcut-joinpoint-annotations"&gt;https://www.codejava.net/frameworks/spring/understanding-spring-aophttps://www.journaldev.com/2583/spring-aop-example-tutorial-aspect-advice-pointcut-joinpoint-annotations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank You….&lt;/p&gt;

</description>
      <category>java</category>
      <category>springframework</category>
    </item>
    <item>
      <title>React Components #day32
</title>
      <author>Al Siam</author>
      <pubDate>Tue, 02 Nov 2021 18:00:03 +0000</pubDate>
      <link>https://dev.to/alsiamworld/1-1odn</link>
      <guid>https://dev.to/alsiamworld/1-1odn</guid>
      <description>&lt;h1&gt;
  &lt;a href="#100daysofcode-day32"&gt;
  &lt;/a&gt;
  100daysofcode #day32
&lt;/h1&gt;

&lt;p&gt;React Components and Props&lt;br&gt;
=&amp;gt;Components let you split the UI into independent, reusable pieces, and think about each piece in isolation.&lt;br&gt;
Conceptually, components are like JavaScript functions. They accept arbitrary inputs (called “props”) and return React elements describing what should appear on the screen.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---zzukhFh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6807ptjpfgatxi3grsju.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---zzukhFh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6807ptjpfgatxi3grsju.png" alt="Image description" width="880" height="504"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#devcommunity"&gt;
  &lt;/a&gt;
  DEVcommunity
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#javascript-react-programming"&gt;
  &lt;/a&gt;
  javascript #react #programming
&lt;/h1&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>React interview questions answered and explained #1</title>
      <author>Adam Nagy</author>
      <pubDate>Tue, 02 Nov 2021 17:41:16 +0000</pubDate>
      <link>https://dev.to/javascriptacademy/react-interview-questions-answered-and-explained-1-1b95</link>
      <guid>https://dev.to/javascriptacademy/react-interview-questions-answered-and-explained-1-1b95</guid>
      <description>&lt;h2&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h2&gt;

&lt;p&gt;If you'd prefer a video with animated examples, you can check out the video that I made on this topic &lt;a href="https://www.youtube.com/channel/UCicOwFWkuMX0ddFaKCc_E5Q"&gt;on my YouTube channel:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8RBkkyOLWPc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-react"&gt;
  &lt;/a&gt;
  What is React?
&lt;/h3&gt;

&lt;p&gt;React is an open-source frontend JavaScript library which is used for building user interfaces especially for single page applications. It uses a component based approach to create reusable UI pieces. It was developed at facebook, and published to open-source in 2013.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-the-major-features-of-react"&gt;
  &lt;/a&gt;
  What are the major features of React?
&lt;/h3&gt;

&lt;p&gt;React uses a &lt;strong&gt;virtual DOM&lt;/strong&gt; to track changes in the document object model, and only updates the changed parts in the real DOM. It supports both client-side and server-side rendering and it uses unidirectional data flow with props. We can create composable or reusable UI elements with it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-jsx"&gt;
  &lt;/a&gt;
  What is JSX?
&lt;/h3&gt;

&lt;p&gt;The acronym itself stands for JavaScript XML. It  is an extension to the JavaScript language syntax. It has a similar appearance like HTML, we can use html tags in it, and we can also use javascript expressions, and read javascript variables, if we put them into curly braces. JSX provides a good way to structure component rendering. We typically write React components using JSX, however it is not necessary at all. You can write React components using pure JavaScript.&lt;br&gt;
React component without jsx, only javascript:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rQJBjHfZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/brg4w8foa01xfcv4uuzd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rQJBjHfZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/brg4w8foa01xfcv4uuzd.png" alt="React component without jsx, only javascript" width="880" height="598"&gt;&lt;/a&gt;&lt;br&gt;
React component with JSX:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k9cxtR6f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfy4cii11cspninn96r6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k9cxtR6f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfy4cii11cspninn96r6.png" alt="React component with JSX" width="880" height="568"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-difference-between-react-elements-and-components"&gt;
  &lt;/a&gt;
  What is the difference between React Elements and Components?
&lt;/h3&gt;

&lt;p&gt;An Element is a plain object describing DOM nodes or other components. They describe what you want to render in the browser. Elements can contain other Elements in their props. Creating a React element is cheap. After its creation, it is never mutated.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GWjif2NL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00c91mdpe981258pvswk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GWjif2NL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00c91mdpe981258pvswk.png" alt="React element" width="880" height="523"&gt;&lt;/a&gt;&lt;br&gt;
A component on the other hand can be declared in several different ways. It can be an ES6 class with a render method or a simple function. Components can have an inner state unlike elements.In both cases it takes its input object called props and returns a JSX tree.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_9zDAdTO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/40hkuqp5rm148mn8u5sq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_9zDAdTO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/40hkuqp5rm148mn8u5sq.png" alt="React component" width="880" height="326"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-the-two-main-ways-to-create-components"&gt;
  &lt;/a&gt;
  What are the two main ways to create components?
&lt;/h3&gt;

&lt;p&gt;We can create components using  functions or ES6 classes. If we choose to use the ES6 class approach we need to extend the Component or PureComponent classes provided by React.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lRDtbo_l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5j4j4nrgskgwag1ytz50.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lRDtbo_l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5j4j4nrgskgwag1ytz50.png" alt="Class component" width="880" height="586"&gt;&lt;/a&gt; &lt;br&gt;
The other approach, which is getting more and more popular, is to create a component by using a function. We can create it with the function keyword or by creating a function expression, even with arrow functions.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_hQDrsUW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8997c1ou55y4p04dxed7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_hQDrsUW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8997c1ou55y4p04dxed7.png" alt="Functional component" width="880" height="552"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use-a-class-component-over-a-function-component"&gt;
  &lt;/a&gt;
  When to use a Class Component over a Function Component?
&lt;/h3&gt;

&lt;p&gt;The short answer is if you are using a fresh version of React, it is up to you. However before the release of version 16.8, if your component needed state or you wanted to do something in a specific life cycle of the component you had to use class based components. Hooks came with version 16.8 and they started to conquer the world at a fast pace. Now you can do everything using hooks, no need for class based components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-pure-components"&gt;
  &lt;/a&gt;
  What are Pure Components?
&lt;/h3&gt;

&lt;p&gt;A React component is considered pure if it renders the same output for the same state and props. If we declare Pure components, React will only re-render the component when the state or the props change, which results in rendering and performance boost.&lt;/p&gt;

&lt;p&gt;When using class based components we can create Pure components by extending the PureComponent class instead of the Component. This way React will implement the shouldComponentUpdate lifecycle method, and will do a shallow comparison of the props and state to determine if it should re-render.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WwZGnoPe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvdpz24h5mt4w8ydhdpa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WwZGnoPe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvdpz24h5mt4w8ydhdpa.png" alt="Pure component" width="880" height="508"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;As of today we can also create pure components using functional components. We can do so by wrapping our component into the Memo Higher Order Component provided by React.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QfYUXpBc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vn7wlxf7mk8lb3j8pq3h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QfYUXpBc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vn7wlxf7mk8lb3j8pq3h.png" alt="Pure functional component" width="880" height="590"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-state-in-react"&gt;
  &lt;/a&gt;
  What is ‘state’ in React?
&lt;/h3&gt;

&lt;p&gt;The state is private data of the component, which can change during its lifetime. If the state of the component changes the component re-renders.&lt;br&gt;
While using class based components, state is represented by an object, and we can modify it with the setState method.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kf7XL6UB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plpx75tnh6yaj28wdn0o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kf7XL6UB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plpx75tnh6yaj28wdn0o.png" alt="State in class components" width="880" height="710"&gt;&lt;/a&gt;&lt;br&gt;
In functional components we can use the useState Hook. It gives back 2 variables in an array, the first one is the stateful data and the second one is the setter for it. We can set the default state, by providing it in the useState function call.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OZMiPyBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7cmhe060ttan9dqp8h1q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OZMiPyBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7cmhe060ttan9dqp8h1q.png" alt="State in functional components" width="880" height="489"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-props-in-react"&gt;
  &lt;/a&gt;
  What are props in React?
&lt;/h3&gt;

&lt;p&gt;Props are input data to components, they can be primitive values or objects. They are unidirectional, which means props can only be passed down from parent to child. Props are passed to components on creation. We can provide them in JSX with a naming convention similar to HTML tag attributes. The child components receive all the provided props in the props object. In class based components we can reach them in this.props, in functional components they are passed as parameters, and we can extract them from there.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-difference-between-state-and-props"&gt;
  &lt;/a&gt;
  What is the difference between state and props?
&lt;/h3&gt;

&lt;p&gt;Both props and state are plain JavaScript objects. While both of them hold information that influences the output of render, they are different in their functionality with respect to components. Props get passed to the component similar to function parameters whereas state is managed within the component similar to variables declared within a function.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UilSILgd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eygldxb4wty6eceanulq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UilSILgd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eygldxb4wty6eceanulq.png" alt="Passing props" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-should-we-not-update-the-state-directly-using-class-based-components"&gt;
  &lt;/a&gt;
  Why should we not update the state directly using class based components?
&lt;/h3&gt;

&lt;p&gt;By directly modifying the state, the component won’t be aware of the state change, and therefore won’t re-render. We should use the setState method instead, it schedules an update to a component's state object, and when the state changes the component will re-render.&lt;br&gt;
🚨 Bad way of updating state, directly:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RdObJ6Fl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zr61et4upwxdlw65xc0t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RdObJ6Fl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zr61et4upwxdlw65xc0t.png" alt="Direct state update" width="880" height="367"&gt;&lt;/a&gt;&lt;br&gt;
✅ Setting state asynchronously:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0nUVfQsc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2tfyrjpgm35olekg6u2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0nUVfQsc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2tfyrjpgm35olekg6u2.png" alt="Setting state asynchronously" width="880" height="303"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-purpose-of-the-callback-function-in-setstate"&gt;
  &lt;/a&gt;
  What is the purpose of the callback function in setState()?
&lt;/h3&gt;

&lt;p&gt;The setState method is asynchronous, and the callback we provide in the arguments gets invoked when the state modification is done and the component gets re-rendered. It is used to make any post-modification changes, but we should use the componentDidUpdate lifecycle method instead.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Z2ZH0fZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mqxns96is6vxnxi8lrz1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Z2ZH0fZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mqxns96is6vxnxi8lrz1.png" alt="setState callback" width="880" height="360"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-difference-between-html-and-react-event-handling"&gt;
  &lt;/a&gt;
  What is the difference between HTML and React event handling?
&lt;/h3&gt;

&lt;p&gt;In HTML, event names are all lowercase by convention, but in React, more precisely in JSX, event names are written in camelCase. Also note that the callback function is provided between doublequotes in HTML, but within curly braces in React.&lt;br&gt;
&lt;code&gt;&amp;lt;button onclick="handleClick()"&amp;gt;&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;br&gt;
In HTML, false can be returned to prevent default behavior, whereas in React preventDefault has to be called explicitly.&lt;br&gt;
The last difference is that in HTML, the callback function has to be called, so you have to write the parentheses at the end, while in react we only pass the reference of the callback function.&lt;/p&gt;

&lt;p&gt;Event handling in HTML:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d_zAylWt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3z4u771a50pv4y61fy6k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d_zAylWt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3z4u771a50pv4y61fy6k.png" alt="Event handling in HTML" width="876" height="480"&gt;&lt;/a&gt;&lt;br&gt;
Event handling in React:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--swf9rI3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsa88xqynq3o3g0gufkq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--swf9rI3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsa88xqynq3o3g0gufkq.png" alt="Event handling in React" width="876" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-pass-a-parameter-to-an-event-handler"&gt;
  &lt;/a&gt;
  How to pass a parameter to an event handler?
&lt;/h3&gt;

&lt;p&gt;You can pass an arrow function which returns the desired function call with the parameters provided.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DFxFSoFd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6zbh1myj9055sq4ae902.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DFxFSoFd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6zbh1myj9055sq4ae902.png" alt="Passing param via an arrow function" width="880" height="349"&gt;&lt;/a&gt; &lt;br&gt;
Or you can achieve the same behavior by calling the bind method on the passed callback function. The first value is the desired ‘this’ value, but starting from the second parameter, all further parameters will be passed to the function.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A64-J0ng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o69m2a881j98z14q7np9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A64-J0ng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o69m2a881j98z14q7np9.png" alt="Passing params with bind" width="880" height="325"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-synthetic-events-in-react"&gt;
  &lt;/a&gt;
  What are synthetic events in React?
&lt;/h3&gt;

&lt;p&gt;SyntheticEvent is a cross-browser wrapper around the browser's native event. It's API is the same as the browser's native event, including stopPropagation() and preventDefault(), except the events work identically across all browsers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-inline-conditional-expressions"&gt;
  &lt;/a&gt;
  What are inline conditional expressions?
&lt;/h3&gt;

&lt;p&gt;You can use inline conditional expressions to conditionally render React components or elements. You can use the ternary operator, which is a simplified if else statement that always returns a value. If you choose this approach, you need to provide the condition first, then after a question mark you have to provide what should be returned when the condition evaluates to true, and you can define what should be returned otherwise after a colon.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XByrHuG_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxoipb5zutepbold0ltw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XByrHuG_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxoipb5zutepbold0ltw.png" alt="Ternary operator" width="880" height="391"&gt;&lt;/a&gt;&lt;br&gt;
If you don’t need the else branch of the if statement you can use the short circuit evaluation of the AND operator. If the left side of the AND operator evaluates to true it returns its left side operand. We can use this behavior if we want to render something when a specific condition is true and we don’t want to render anything if the condition evaluates to false.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_TGbbntq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qm2uwzajsg25pb9olnd1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_TGbbntq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qm2uwzajsg25pb9olnd1.png" alt="&amp;amp;&amp;amp; operator" width="880" height="553"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-key-prop-and-why-do-we-use-it"&gt;
  &lt;/a&gt;
  What is the key prop and why do we use it?
&lt;/h3&gt;

&lt;p&gt;When we render multiple components based on arrays, we use key props. Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity.The best way to pick a key is to use a string that uniquely identifies a list item among its siblings. Most often you would use IDs from your data as keys.When you don’t have stable IDs for rendered items, you may use the item index as a key as a last resort. You shouldn’t use indexes for keys if the order of items may change.&lt;br&gt;
List with keys:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eTjzaHhP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5aeimmc5ov0ii978htte.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eTjzaHhP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5aeimmc5ov0ii978htte.png" alt="List with key" width="880" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-you-can-learn-more-from-me"&gt;
  &lt;/a&gt;
  Where you can learn more from me?
&lt;/h2&gt;

&lt;p&gt;I create education content covering web-development on several platforms, feel free to 👀 check them out.&lt;/p&gt;

&lt;p&gt;I also create a newsletter where I share the week's or 2 week's educational content that I created. No bull💩 just educational content.&lt;/p&gt;

&lt;p&gt;🔗 Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;💬 Join our &lt;a href="https://discord.gg/GuxmcEgAjB"&gt;community on Discord&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📧 Newsletter &lt;a href="https://www.getrevue.co/profile/dev_adamnagy"&gt;Subscribe here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🎥 YouTube &lt;a href="https://www.youtube.com/channel/UCicOwFWkuMX0ddFaKCc_E5Q"&gt;Javascript Academy&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🐦 Twitter: &lt;a href="https://twitter.com/dev_adamnagy"&gt;@dev_adamnagy&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📷 Instagram &lt;a href="https://www.instagram.com/javascriptacademy/"&gt;@javascriptacademy&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Turning Complex Lists into Flatten Lists in Python Without Using Any Libraries</title>
      <author>Turan Kılıç</author>
      <pubDate>Tue, 02 Nov 2021 17:30:42 +0000</pubDate>
      <link>https://dev.to/toour/turning-complex-lists-into-flatten-lists-in-python-without-using-any-libraries-31c4</link>
      <guid>https://dev.to/toour/turning-complex-lists-into-flatten-lists-in-python-without-using-any-libraries-31c4</guid>
      <description>&lt;p&gt;Hello there Turan here, today I'm going to share a algorithm that turns complex lists into simple lists (flatten lists). &lt;/p&gt;

&lt;p&gt;First of all, what is a complex list? It is a list that contains different type lists inside it, looks so complex and make it hard to read. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;l = [[1,'a',['cat'],2],[[[3]],'dog'],4,5]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above list is an example of complex list, we are going to turn it into this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[1, 'a', 'cat', 2, 3, 'dog', 4, 5]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me show you the code and explain it to you ^^&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from typing import List

l = [[1,'a',['cat'],2],[[[3]],'dog'],4,5]
flat_list2 = []

def lookInside(l):                  # Takes the list type element
    for x in l:                     # For each sub-element of it
        if type(x) is not list:     # If the sub-element is not list, 
            flat_list2.append(x)    # Then add it to flat_list
        else:                       
            lookInside(x)           # Else, look inside of it again

# WE ARE STARTING HERE !!!
def makeFlat(l):                    # Getting the list 
    for e in l:                     # Checking the elements of the list
        if type(e) is list:         # If element's type is list then
            lookInside(e)           # send that element to lookInside function 
        else:
            flat_list2.append(e)    # Else, (if it is not list) append it to our new flat_list

makeFlat(l)                         # Function call, the complex list has been given to function
print(flat_list2)                   # Printing the flatten list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the code above, we can turn complex lists into simple (flatten) lists, whatever complex list contains 2nd, 3rd, 4th... degree lists. It doesn't matter for us because we are using recursive function that makes everything easier.&lt;/p&gt;

&lt;p&gt;Here how our recursive function works:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;[ 1, [2], [[3]] ] ==&amp;gt; Our function takes 1 as a normal element&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[ [2], [[3]] ] ==&amp;gt; Then for [2] we are going to our recursive function, this function looks inside of it then sees that "2" is not list, then add it to new list&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[ [[3]] ] ==&amp;gt; Then for [[3]] we are going to our recursive function, function looks at it and says that [3] is a list then send it to itself again just as [3]. After that (like [2]) it looks inside of [3] and sees that 3 is not list then add it into new list.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This goes like that :)&lt;/p&gt;

&lt;p&gt;I hope it was easy to understand for you, and i hope it helped. Thanks for reading, please leave a like and comment if you want ^^ &lt;/p&gt;

&lt;p&gt;@Publisher : &lt;a href="https://dev.to/toour"&gt;https://dev.to/toour&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Got verified on Polywork</title>
      <author>Abid</author>
      <pubDate>Tue, 02 Nov 2021 17:28:36 +0000</pubDate>
      <link>https://dev.to/kingabzpro/got-verified-on-polywork-4j41</link>
      <guid>https://dev.to/kingabzpro/got-verified-on-polywork-4j41</guid>
      <description>&lt;p&gt;I am excited to share that I am finally verified on Polywork.&lt;/p&gt;

</description>
      <category>verified</category>
      <category>socialmedia</category>
    </item>
    <item>
      <title>VSCode Setup for development</title>
      <author>Willane Paiva</author>
      <pubDate>Tue, 02 Nov 2021 17:21:31 +0000</pubDate>
      <link>https://dev.to/wps13/vscode-setup-for-development-4cd5</link>
      <guid>https://dev.to/wps13/vscode-setup-for-development-4cd5</guid>
      <description>&lt;p&gt;This article is a compilation of setup that I made in VSCode to look better and have the functionalities that I consider the minimum necessary to development.&lt;/p&gt;

&lt;p&gt;The final result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6GzUZFrO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i08gybkbk0n6q95zfemd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6GzUZFrO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i08gybkbk0n6q95zfemd.png" alt="Screenshot for visual studio code on personal computer" width="880" height="484"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Table of Contents&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#visual"&gt; Improving visual hiding lateral bar, title bar and minimap&lt;/a&gt;&lt;br&gt;
1.1. &lt;a href="#keyboard-shortcuts"&gt;Adding keyboard shortcuts&lt;/a&gt;&lt;br&gt;
1.2. &lt;a href="#hiding-bars"&gt;Hiding the bars in settings&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#font"&gt;Adding JetBrains Mono with ligatures&lt;/a&gt;&lt;br&gt;
2.1. &lt;a href="#install-font"&gt;Installing the font on your computer&lt;/a&gt;&lt;br&gt;
2.2. &lt;a href="#using-font"&gt;Using it on VSCode&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#extra"&gt;Additional Settings&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#extensions"&gt;Adding extensions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;4.1 &lt;a href="#general"&gt;General&lt;/a&gt;&lt;br&gt;
4.2 &lt;a href="#react"&gt;React Development&lt;/a&gt;&lt;br&gt;
4.3 &lt;a href="#themes"&gt;Themes&lt;/a&gt;&lt;br&gt;
4.4 &lt;a href="#flutter"&gt;Flutter&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;PS: If you are using macbook, replace ctrl with cmd.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-improving-visual-hiding-lateral-bar-title-bar-and-minimap"&gt;
  &lt;/a&gt;
  1. Improving visual hiding lateral bar, title bar and minimap &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#11-adding-keyboard-shortcuts"&gt;
  &lt;/a&gt;
  1.1. Adding keyboard shortcuts &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Open the command search using the shortcut &lt;code&gt;ctrl + shift + p&lt;/code&gt; and type 'keyboard shortcuts', then select 'Preferences: Open Keyboard Shortcuts (JSON)' as showed in the image bellow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j980G5zo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrfj608ojmcuvr45ihi1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j980G5zo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrfj608ojmcuvr45ihi1.png" alt="Screenshot for visual studio code command option, showing an input field and the option 'Preferences: Open Keyboard Shortcuts (JSON)' highlighted" width="607" height="155"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then add the following code in the opened file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Place&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;bindings&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;override&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;defaults&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;/**&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Activity&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Bar&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="err"&gt;**/&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ctrl+k ctrl+e"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"workbench.view.explorer"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ctrl+k ctrl+g"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"workbench.view.scm"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ctrl+k ctrl+d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"workbench.view.debug"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ctrl+k ctrl+x"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"workbench.extensions.action.showInstalledExtensions"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#12-hiding-the-bars-in-settings"&gt;
  &lt;/a&gt;
  1.2 Hiding the bars in settings &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Open the settings similar to how we did previously, using the shortcut &lt;code&gt;ctrl + shift + p&lt;/code&gt; and searching for 'Preferences: Open Settings (JSON).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OJF-BUhu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ev00gskk1zichyjzg1go.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OJF-BUhu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ev00gskk1zichyjzg1go.png" alt="Screenshot for visual studio code command option, showing an input field and the option 'Preferences: Open Settings (JSON)' highlighted" width="603" height="227"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the JSON file, add the following options:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;"window.titleBarStyle"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"custom"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"workbench.activityBar.visible"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"editor.minimap.enabled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-adding-jetbrains-mono-with-ligatures"&gt;
  &lt;/a&gt;
  2. Adding JetBrains Mono with ligatures &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#21-installing-the-font-on-your-computer"&gt;
  &lt;/a&gt;
  2.1 Installing the font on your computer &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Head to &lt;a href="https://www.jetbrains.com/lp/mono/"&gt;https://www.jetbrains.com/lp/mono/&lt;/a&gt;, download the font and install it according to your operating system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#22-using-it-on-vscode"&gt;
  &lt;/a&gt;
  2.2. Using it on VSCode &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Open the settings.json (explained in step 1.2) and add the following content inside the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;"editor.fontLigatures"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.fontFamily"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"'JetBrains Mono','Droid Sans Mono', 'monospace', monospace, 'Droid Sans Fallback'"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-additional-settings"&gt;
  &lt;/a&gt;
  3. Additional settings &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The following settings are for improving git usage, editor update import, enable bracket pair (&lt;a href="https://code.visualstudio.com/updates/v1_60#_high-performance-bracket-pair-colorization"&gt;Check VSCode update for more info&lt;/a&gt;), format on save, define default formatter. "Compact folders" is for when the folder only have one nested folder, when disabled, won't show inline.&lt;/p&gt;

&lt;p&gt;Compact Folders disabled: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WlA1le5Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ly75ji2adr05ehv90shk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WlA1le5Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ly75ji2adr05ehv90shk.png" alt="Compact folder disabled on vscode" width="211" height="48"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Compact Folders enabled:&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FE4g2gMG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rdkjp5sz7famad4k2iwt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FE4g2gMG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rdkjp5sz7famad4k2iwt.png" alt="Compact folder enabled on vscode" width="341" height="26"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;"editor.suggestSelection"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"first"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"vsintellicode.modify.editor.suggestSelection"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"automaticallyOverrodeDefaultValue"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"git.enableSmartCommit"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"git.confirmSync"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"git.autofetch"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"explorer.compactFolders"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.wordWrap"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"on"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"extensions.ignoreRecommendations"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"javascript.updateImportsOnFileMove.enabled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"always"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"typescript.updateImportsOnFileMove.enabled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"always"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"diffEditor.ignoreTrimWhitespace"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.bracketPairColorization.enabled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.codeActionsOnSave"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"source.fixAll.eslint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eslint.validate"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"javascript"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eslint.format.enable"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"[typescriptreact]"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"editor.defaultFormatter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dbaeumer.vscode-eslint"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"[javascript]"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"editor.defaultFormatter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dbaeumer.vscode-eslint"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-adding-extensions"&gt;
  &lt;/a&gt;
  4. Adding extensions &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;These are the main extensions that I'm currently using:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#41-general"&gt;
  &lt;/a&gt;
  4.1 General: &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=naumovs.color-highlight"&gt;Color Highlight&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MoZRg8vq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1uqjk2dv22x9p7vyvpih.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MoZRg8vq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1uqjk2dv22x9p7vyvpih.png" alt="Screenshot for Color Highlight on Marketplace vscode" width="873" height="314"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig"&gt;EditorConfig for VSCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z3uulKM1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lfz34f69c7e3y9hz7z79.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z3uulKM1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lfz34f69c7e3y9hz7z79.png" alt="Screenshot for EditorConfig on Marketplace vscode" width="837" height="318"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint"&gt;ESLint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w3zNx4vA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnv6r09lzr3zp1duy7le.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w3zNx4vA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnv6r09lzr3zp1duy7le.png" alt="Screenshot for Eslint on Marketplace vscode" width="815" height="324"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=vincaslt.highlight-matching-tag"&gt;Highlight Matching Tag&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0USKvA9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7fn4wlxejbtfo8osnaxk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0USKvA9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7fn4wlxejbtfo8osnaxk.png" alt="Screenshot for Highlight Matching Tag on Marketplace vscode" width="836" height="313"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=kisstkondoros.vscode-gutter-preview"&gt;Image Preview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4gP7ACie--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnwfrups605ju77tj2r7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4gP7ACie--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnwfrups605ju77tj2r7.png" alt="Screenshot for Image Preview on Marketplace vscode" width="810" height="311"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost"&gt;Import Cost&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hopdRwnR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czby6ixmbo0wa1nmn3ho.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hopdRwnR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czby6ixmbo0wa1nmn3ho.png" alt="Screenshot for Imoport Cost on Marketplace vscode" width="799" height="328"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"&gt;Gitlens&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--utHcZCf3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mq5rv59qz1rhenyzyu44.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--utHcZCf3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mq5rv59qz1rhenyzyu44.png" alt="Screenshot for GitLens on Marketplace vscode" width="800" height="348"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=jpoissonnier.vscode-styled-components"&gt;vscode-styled-components&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gaJ6Wu1W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8xhcf4fhmqmofsl5xnfy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gaJ6Wu1W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8xhcf4fhmqmofsl5xnfy.png" alt="Screenshot for vscode-styled-components on Mricrosoft store " width="792" height="309"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#42-react-development"&gt;
  &lt;/a&gt;
  4.2 React Development: &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets"&gt;ES7 React/Redux/GraphQL/React-Native snippets&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pU6TbwmI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q1m83hubfcz5y0b6h6fz.png" alt="Screenshot for Snippets on Marketplace vscode" width="814" height="307"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#43-themes"&gt;
  &lt;/a&gt;
  4.3 Themes: &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=tinkertrain.theme-panda"&gt;Panda Theme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GQAqUhIE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oil1byuutjz09y7modmh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GQAqUhIE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oil1byuutjz09y7modmh.png" alt="Screenshot for Panda Theme on Marketplace vscode" width="861" height="322"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=lukinco.lukin-vscode-theme"&gt;Lukin Theme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s9pszCeJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wj2mgk3qobjak3xktxir.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s9pszCeJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wj2mgk3qobjak3xktxir.png" alt="Screenshot for Lukin Theme on Marketplace vscode" width="795" height="320"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=fisheva.eva-theme"&gt;Eva Theme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5wjCmdbs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h58nq9fuphy26gfhfyx1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5wjCmdbs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h58nq9fuphy26gfhfyx1.png" alt="Screenshot for Eva Theme on Marketplace vscode" width="786" height="314"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme"&gt;Material Icon Theme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NTs83WFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3rqbp9yqc9igcvd9m0yv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NTs83WFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3rqbp9yqc9igcvd9m0yv.png" alt="Screenshot for Material Icon Theme on Marketplace vscode" width="839" height="310"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#44-flutter"&gt;
  &lt;/a&gt;
  4.4 Flutter: &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=Nash.awesome-flutter-snippets"&gt;Awesome Flutter Snippets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--foJW5LjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uvfptom9l0fja6ecllrw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--foJW5LjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uvfptom9l0fja6ecllrw.png" alt="Screenshot for Awesome Flutter Snippets on Marketplace vscode" width="777" height="323"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=Dart-Code.dart-code"&gt;Dart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XSExtb8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdzogumg96591rssx8bb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XSExtb8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdzogumg96591rssx8bb.png" alt="Screenshot for Dart on Marketplace vscode" width="766" height="295"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>setup</category>
      <category>development</category>
    </item>
    <item>
      <title>jQuery and You: Learning the Basics</title>
      <author>rileydaviskatz</author>
      <pubDate>Tue, 02 Nov 2021 17:19:35 +0000</pubDate>
      <link>https://dev.to/rileydaviskatz/jquery-and-you-learning-the-basics-24mc</link>
      <guid>https://dev.to/rileydaviskatz/jquery-and-you-learning-the-basics-24mc</guid>
      <description>&lt;p&gt;jQuery is a powerful tool that lets you add functionality to what would otherwise be hard-coded HTML scripts by injecting javascript into it.&lt;/p&gt;

&lt;p&gt;This works by "wrapping" HTML code in dynamic Javascript that can be manipulated.&lt;/p&gt;

&lt;p&gt;The power of $:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I hope you appreciate the pun I just made.&lt;/li&gt;
&lt;li&gt;The hidden abilities of jQuery are unlocked with the $ and paired with (). Once you create the $('') you can start to inject the HTML code within it. For instance:
$('&lt;h1&gt;Hello World!&lt;/h1&gt;') will create a header in the HTML document that says "Hello World!"&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Adding content to tags with jQuery:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;While we can declare tags easily with jQuery, there are steps we can use to add content to tags later on.
Example:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;//declare an empty set of tags&lt;br&gt;
let $empty = $('&lt;/p&gt;
&lt;h6&gt;&lt;/h6&gt;');&lt;br&gt;
//add content&lt;br&gt;
$empty.text('This headline is no longer empty!');

&lt;ol&gt;
&lt;li&gt;We can also manipulate and add content to entire types of HTML code by using .html(). This method tells the interpreter to apply changes to all tags of the same type&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;$('ul').html('Placeholder Text');&lt;/p&gt;

&lt;p&gt;This example takes all instances of unordered lists and applies the "Placeholder Text" content to all instances instead of just one.&lt;/p&gt;

&lt;p&gt;Methods for combining tags:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Since jQuery is similar to Javascript, it comes with methods we can use to manipulate the code we are writing. For instance, we can create a body tag, and then later on, add code to the body by using appendTo or prepend.
Example:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;let $body = $('&lt;/p&gt;');

&lt;p&gt;let $paragraph = $('&lt;/p&gt;
&lt;p&gt;This is an example of how we can write a line of jQuery code and add it to another tag&lt;/p&gt;')

&lt;p&gt;$paragraph.appendTo($body);&lt;br&gt;
This makes the browser interpret the HTML as &lt;/p&gt;
&lt;p&gt;This is an example of how we can write a line of jQuery code and add it to another tag&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Also like Javascript, we can chain together different methods. So if we wanted to add a class to the paragraph while we appended it to the body, we could do this:
$paragraph.appendTo($body).addClass('examples');&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Conclusion:&lt;/p&gt;

&lt;p&gt;jQuery is a powerful tool that takes HTML up a notch and makes, what would normally be hardcoded, dynamic and adjustable and lively. It's worth learning to make your websites less static.&lt;/p&gt;

</description>
      <category>jquery</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>How to hide something on different screen sizes with Bootstrap?</title>
      <author>Ekim Cem Ülger</author>
      <pubDate>Tue, 02 Nov 2021 17:15:37 +0000</pubDate>
      <link>https://dev.to/ekimcem/how-to-hide-something-on-different-screen-sizes-with-bootstrap-3ha7</link>
      <guid>https://dev.to/ekimcem/how-to-hide-something-on-different-screen-sizes-with-bootstrap-3ha7</guid>
      <description>&lt;p&gt;Let's look at the display features with bootstrap, which is the most popular one of the frameworks when the subject is responsive web design.&lt;/p&gt;

&lt;p&gt;In order to understand the architecture of the display options of bootstrap, let’s check breakpoints.&lt;/p&gt;

&lt;p&gt;Breakpoints are the exact width pixel values that decide the screen size of the browser. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GzO3kMA1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/leg8bbegx81tt37vax78.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GzO3kMA1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/leg8bbegx81tt37vax78.png" alt="Table of Breakpoints in Bootstrap" width="632" height="246"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Table 1: Dimensions regarding the screen size.&lt;/code&gt;&lt;br&gt;
&lt;a href="https://getbootstrap.com/docs/5.1/layout/breakpoints/"&gt;Bootstrap Source Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can check the breakpoints in the table above. Those dimensions mean that if you are under 576px it means that your screen size is x-small, if your width pixel is higher than 576px it means that your screen size is small (until you reach 769 px), and it continues like this.&lt;/p&gt;

&lt;p&gt;Since Bootstrap developers used &lt;code&gt;min-width&lt;/code&gt; property of CSS while adding those breakpoints, if you only apply a display property to a small screen, it means that it will affect screen sizes small and larger than small screens. &lt;br&gt;
&lt;a href="https://getbootstrap.com/docs/5.1/layout/breakpoints/#min-width"&gt;Bootstrap min-width&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This means that; if you add &lt;code&gt;d-lg-flex&lt;/code&gt; to a class, flexbox property will be applied to lg, xl, and xxl screen sizes.&lt;/p&gt;

&lt;p&gt;In Bootstrap there is a display property called none.&lt;br&gt;
If you add a class named &lt;code&gt;d-none&lt;/code&gt; to your element it will not show the element.&lt;/p&gt;

&lt;p&gt;So if you want to hide something only on small devices, we need to assign two display classes to the HTML element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For example, you want to use a flex display property on the container:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class= container d-flex&amp;gt; … &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;code&gt;d-flex&lt;/code&gt; property will affect whole screen sizes since it has no screen class infix (check Table-1). It means that you are applying that property to x-small and larger screens.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What if we want to hide something in x-small and small screens?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So now, we want to “hide” the container unless it is a medium or larger screen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class= container d-none d-md-flex&amp;gt; … &amp;lt;div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, &lt;code&gt;d-md-flex&lt;/code&gt; property will override the d-none property after screen size reaches 769px ( which is breakpoint of medium screen)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What if we want to display something on small screens but not on large screens?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this situation, unless it is a medium screen, we want to show it as flex. If it is a medium or larger screen, we want it to be hidden.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class= container d-flex d-md-none&amp;gt; … &amp;lt;div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above, you may see that &lt;code&gt;d-flex&lt;/code&gt; property will be applied to whole screen types unless it reaches the medium screen. Since &lt;code&gt;d-md-none&lt;/code&gt; will affect medium or larger screens, you will be able to hide container for those screens.&lt;/p&gt;

&lt;p&gt;If you want to apply different display properties for every different screen sizes, it means that you need to add individually display properties with all breakpoint class infixes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/ekimcem/"&gt;Ekim&lt;/a&gt;&lt;br&gt;
Batch Sagittarius&lt;br&gt;
trainee @ &lt;a href="https://www.archisacademy.com/"&gt;Archi's Academy&lt;/a&gt;&lt;/p&gt;

</description>
      <category>bootstrap</category>
      <category>webdev</category>
      <category>responsivedesign</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Developer Burnout — Signs, Impact, and Prevention</title>
      <author>Geoff Stevens</author>
      <pubDate>Tue, 02 Nov 2021 16:58:14 +0000</pubDate>
      <link>https://dev.to/thegeoffstevens/developer-burnout-signs-impact-and-prevention-47a8</link>
      <guid>https://dev.to/thegeoffstevens/developer-burnout-signs-impact-and-prevention-47a8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-burnout"&gt;
  &lt;/a&gt;
  What is burnout?
&lt;/h2&gt;

&lt;p&gt;Burnout is an increasingly widespread and destructive mental health challenge for knowledge workers across professions and industries. Left unchecked, it is a silent killer of productivity, happiness, and team success.&lt;/p&gt;

&lt;p&gt;Unlike other types of stress, burnout is typically chronic and workplace-related. It is a result of unresolved and persistent stress that leaves workers feeling drained and unable to reach their full potential. According to the &lt;a href="https://www.who.int/news/item/28-05-2019-burn-out-an-occupational-phenomenon-international-classification-of-diseases"&gt;World Health Organization&lt;/a&gt;:  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Burn-out is a syndrome conceptualized as resulting from chronic workplace stress that has not been successfully managed."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Burnout manifests in different ways for different people. For many workers, burnout is often associated with feelings of tiredness, helplessness, cynicism, and a drop in performance and motivation. &lt;/p&gt;

&lt;p&gt;The World Health Organization's definition of burnout specifies three key dimensions of burnout: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;feelings of energy depletion or exhaustion;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;increased mental distance from one's job, or feelings of negativism or cynicism related to one's job; and&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;reduced professional efficacy.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-common-is-software-engineer-burnout"&gt;
  &lt;/a&gt;
  How common is software engineer burnout?
&lt;/h2&gt;

&lt;p&gt;Burnout is an especially prevalent challenge for engineering teams and tech workers. Developers frequently navigate fast-paced and high-growth work environments, building mission-critical software—often without the systems, processes, and culture needed to support their work. &lt;/p&gt;

&lt;p&gt;Recent &lt;a href="https://www.gallup.com/workplace/288539/employee-burnout-biggest-myth.aspx"&gt;Gallup surveys&lt;/a&gt; reveal most workers, about 76%, experience burnout. More specifically, 28% of workers responded that they experience burnout very often or always. Less than a quarter of workers feel they rarely or never experience burnout.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--taWTV6_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6527hysgck1qrnj508wc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--taWTV6_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6527hysgck1qrnj508wc.png" alt="Developer burnout" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In certain industries, such as game development, engineers are expected to work long hours and against strict deadlines. They often need to make last-minute changes before launch during a frenzied period of work infamously dubbed "crunch time." In one example at Rockstar Games, management admits to perpetuating a culture of burnout and hardship. According to &lt;a href="https://time.com/5603329/e3-video-game-creators-union/"&gt;Time&lt;/a&gt;: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The chief executive of Rockstar Games, publisher of the hugely popular Red Dead Redemption 2, bragged in an interview last year that people there were working 100-hour weeks to finish that game in time for its scheduled release date.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Chaotic release schedules and deployment setbacks are surprisingly prevalent across the world of software development. Companies rely heavily on engineers to ship code faster and provide value to customers, but often lack the DevOps practices to support them. Instead, developers often face delays, deployment pains, and organizational fear and mistrust that disrupt their team's flow. &lt;/p&gt;

&lt;p&gt;Such recurring organizational hurdles lead to chronic frustration—and ultimately developer burnout.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-causes-software-engineer-burnout"&gt;
  &lt;/a&gt;
  What causes software engineer burnout?
&lt;/h2&gt;

&lt;p&gt;Burnout often arises from issues within the organization, rather than the individual. Many engineering teams fail to sufficiently address the causes of burnout because they focus on fixing people and not the systems that support them—or fail to support them. &lt;/p&gt;

&lt;p&gt;According to &lt;em&gt;Accelerate&lt;/em&gt;, a research-backed guide to building high performing technology teams, the six main organizational risk factors for developer burnout are work overload, lack of control, insufficient rewards, breakdown of community, absence of fairness, and value conflicts. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Work overload&lt;/strong&gt; arises from unrealistic expectations about the quantity or quality of work developers need to satisfy. Impossible deadlines, poor project timeline estimates, and insufficient planning push developers to work beyond what is physically and mentally sustainable. Developers who work long hours, nights, and weekends are more likely to burn out than those with better work-life balance.&lt;/p&gt;

&lt;p&gt;Workload, however, is not the only risk factor for burnout. Contrary to popular belief, teams with balanced workloads can still experience serious developer burnout. Developers can burn out working 100 hours per week, but they can also burn out working just 20 or 30 hours per week.&lt;/p&gt;

&lt;p&gt;In situations with manageable workloads but poor workplace culture, other organizational risk factors can lead to chronic stress and create unpleasant work environments. These risk factors disrupt an individual or team's development flow, making work consistently and unnecessarily difficult or challenging. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lack of control&lt;/strong&gt; in decision making processes leads to detachment from an organization's mission. When developers feel an inability to influence or contribute to decisions that affect them and their work, it breeds mistrust and creates distance between workers and managers.&lt;/p&gt;

&lt;p&gt;For example, developers are sometimes  forced to use tools they find ineffective. Developers can be at the mercy of slow workflows across the stack, from change approval boards to code reviews to data requests. In some organizations, development and operations may be making decisions about team practices without input from each other, creating organizational tension. &lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;breakdown of community&lt;/strong&gt; also leads to an unsupportive, hypercompetitive, and stressful workplace. Moreover, harassment and bullying leave developers feeling isolated and fearful. Without community support or unbiased feedback, developers must grapple with additional stressors that detract from their quality of life.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Absence of fairness&lt;/strong&gt; (a lack of fairness in decision making) and &lt;strong&gt;insufficient rewards&lt;/strong&gt;, (a lack of positive reinforcement and feedback) also leave developers feeling not in control of their work and outcomes. &lt;/p&gt;

&lt;p&gt;Cultures that rely on blame—not organizational learning—perpetuate a lack of fairness and recognition. Rather than solving underlying system weaknesses, organizations sometimes blame and shame developers for engineering challenges, such as buggy code, change failures, or missed deadlines. &lt;/p&gt;

&lt;p&gt;Lastly, &lt;strong&gt;value conflicts&lt;/strong&gt; that result in a mismatch between organization, team, and individual values create chronic stress. For example, a developer who values individual privacy working on ad tracking software can be worn down by the constant internal tug-of-war between her personal values and her company's mission.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-cost-of-developer-burnout"&gt;
  &lt;/a&gt;
  What is the cost of developer burnout?
&lt;/h2&gt;

&lt;p&gt;Stanford researchers &lt;a href="https://www.gsb.stanford.edu/insights/why-your-workplace-might-be-killing-you"&gt;estimate&lt;/a&gt; burnout leads to nearly $190 billion in healthcare costs each year and contributes to more than 120,000 deaths.&lt;/p&gt;

&lt;p&gt;In addition to healthcare costs, burnout leads to lost productivity, sick time, costly disabilities, and turnover. It's estimated that &lt;a href="https://hbr.org/2019/12/burnout-is-about-your-workplace-not-your-people"&gt;workplace stress costs&lt;/a&gt; the U.S. economy more than $500 billion per year. Researchers believe nearly 550 million work days each year are lost due to stress and burnout.&lt;/p&gt;

&lt;p&gt;For engineering teams, developer burnout leads to slower delivery speed, lower quality code, poorer project outcomes, and higher turnover. In the long run, burnout can also stifle innovation, creativity, and organizational learning.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-managers-spot-signs-of-developer-burnout"&gt;
  &lt;/a&gt;
  How can managers spot signs of developer burnout?
&lt;/h2&gt;

&lt;p&gt;It's important to understand that people react differently to burnout. Workers can experience several symptoms all at once, or just one or two at a time. Some workers experience mostly mental symptoms, while others experience physical and bodily changes. &lt;/p&gt;

&lt;p&gt;It's also important to remember that burnout is not a binary state. Instead, workers move up and down a 'burnout gradient' depending on their changing environment and workload. &lt;/p&gt;

&lt;p&gt;Mental and emotional symptoms of burnout include: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tiredness or exhaustion&lt;/strong&gt;: You feel too emotionally drained to engage fully with your work or coworkers. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cynicism or negativism&lt;/strong&gt;: You view your role as increasingly stressful and frustrating. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Detachment and alienation&lt;/strong&gt;: You feel distant from coworkers and the company mission. You feel "numb" about your work. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Reduced performance or productivity&lt;/strong&gt;: You are less effective at completing tasks on time. Your quality of work noticeably decreases. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Physical symptoms are also common. Developers experiencing burnout may notice that they are more fatigued and exhausted than normal, yet may also suffer from sleeplessness. They may also be experiencing frequent headaches, loss of appetite, gastrointestinal issues, or dizziness. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#can-you-detect-burnout-through-metrics-and-data-sources"&gt;
  &lt;/a&gt;
  Can you detect burnout through metrics and data sources?
&lt;/h2&gt;

&lt;p&gt;By looking more closely at their DevOps metrics, teams can spot early signs of burnout, developer frustration, and deployment pain.&lt;/p&gt;

&lt;p&gt;Teams should watch for indicators that their work is needlessly challenging or painful to complete. They should watch for signs that their engineering systems—i.e. organizational workflows and processes—are ineffective at providing developers with fast feedback, avoiding delays, and preventing toil. &lt;/p&gt;

&lt;p&gt;Long &lt;a href="https://www.software.com/1000x-system/lead-time"&gt;lead time&lt;/a&gt;, low &lt;a href="https://www.software.com/1000x-system/commit-frequency"&gt;delivery frequency&lt;/a&gt;, and low &lt;a href="https://www.software.com/1000x-system/lines-of-code-merged"&gt;code volume&lt;/a&gt; can reveal friction during the development process. In such scenarios, engineers are likely experiencing roadblocks and bottlenecks disrupting their development flow.&lt;/p&gt;

&lt;p&gt;At the DevOps Enterprise Summit 2014, David Ashman, former Chief Architect at Blackboard, recalls how his engineering organization became less agile and stagnant due to mounting technical debt. Ashman's red flag was &lt;a href="https://www.youtube.com/watch?v=SSmixnMpsI4"&gt;a significant change&lt;/a&gt; in the number of code commits.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[The codebase] is growing at such a pace that is becoming this enormous product with so much complexity, so much insurmountable debt that we were running into problems both in development and operations of significant failures in releases and problems with developers taking far too long for these products to get built out.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Such challenges can leave developers struggling to achieve their goals, fighting against the system, and potentially working longer hours to overcome it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6oY94n7I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zta79vkxc48furmzzb1n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6oY94n7I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zta79vkxc48furmzzb1n.png" alt="Engineering team burnout danger" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;
An example of developers fighting the system, &lt;a href="https://www.youtube.com/watch?v=SSmixnMpsI4"&gt;David Ashman&lt;/a&gt;



&lt;p&gt;Teams should also watch for signs of high workloads and disruptive schedules. High &lt;a href="https://www.software.com/1000x-system/meeting-time"&gt;meeting time&lt;/a&gt; can pull developers away from meaningful work and fragment their day, leading to dissatisfaction with daily work. Spending less time in flow during the workday and more time coding on nights and weekends puts teams at risk of burnout and poor work-life balance.&lt;/p&gt;

&lt;p&gt;Operating above 100% of team capacity for too long—without breaks or downtime—can wear down even the most productive team. Code volume, measured by pull requests and commits, can be one approximation for workload.  &lt;/p&gt;

&lt;p&gt;Similar to other engineering metrics, context matters. It's important to understand teams and individuals in their day-to-day life to attain a clearer understanding of the situation. There is no single 'burnout' metric. Instead, teams should rely on several indicators of team frustration and pain. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-prevent-developer-burnout"&gt;
  &lt;/a&gt;
  How to prevent developer burnout
&lt;/h2&gt;

&lt;p&gt;Avoiding burnout requires teams to reduce firefighting, hardship, and toil. The goal should be to alleviate deployment pain and enable the fast flow of work from code to production, as well as to create a culture of learning, psychological safety, and fairness. &lt;/p&gt;

&lt;p&gt;It starts with improving the organization's DevOps practices. According to &lt;em&gt;Accelerate&lt;/em&gt;: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Burnout can be prevented or reversed, and DevOps can help. Organizations can fix the conditions that lead to burnout by fostering a supportive work environment, by ensuring work is meaningful, and ensuring employees understand how their own work ties to strategic objectives. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Investments in DevOps strengthen the organization's developer experience, improving daily work. Over the long-term, better DevOps minimize several key risk factors for developer burnout. &lt;/p&gt;

&lt;p&gt;To prevent burnout, teams should first embrace the principle of &lt;em&gt;continuous improvement&lt;/em&gt;. Continuous improvement is a core idea in Lean methodology that advocates for incremental improvement in an organization's performance through continuous measuring, learning, and experimentation. It creates a culture that measures and improves daily work, identifying potential development pains and prioritizing their fixes. &lt;/p&gt;

&lt;p&gt;Second, teams should create an environment that prioritizes psychological safety. They should provide engineers with the safety needed to experiment and learn from mistakes, instead of resorting to blame or finger pointing. Developers must be a part of the decision making process when it directly affects their work. &lt;/p&gt;

&lt;p&gt;Third, teams must invest in the developer experience. Doing so requires teams to enable fast feedback, minimize thrash, and reduce fear. &lt;/p&gt;

&lt;p&gt;In particular, organizations can reduce chronic stress by providing guardrails that improve the flow of work and remove fear and pain from deployments. Developers can quickly and confidently make changes to code when they have automated tests and environments, telemetry for performance visibility, loosely coupled architecture to isolate failures, and version control for fast rollbacks. Teams can also tackle technical debt on a recurring basis to avoid development stagnation and fear. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#can-hybrid-or-remote-work-help-prevent-burnout"&gt;
  &lt;/a&gt;
  Can hybrid or remote work help prevent burnout?
&lt;/h2&gt;

&lt;p&gt;Workplaces are quickly changing as the world grapples with a shift from office to remote or hybrid work. Such a seismic shift will likely change how teams identify and prevent burnout. &lt;/p&gt;

&lt;p&gt;Remote work reduces time spent commuting and provides workers with greater control over their schedules. They benefit from more flexibility, which allows them to spend more time with family and friends or pursue activities outside of work. &lt;/p&gt;

&lt;p&gt;Remote work can also lead to fewer distractions and more time spent in flow to work on meaningful tasks. Developers are interrupted less frequently by shoulder taps and open offices. &lt;/p&gt;

&lt;p&gt;While remote and hybrid workplaces can remove certain stressors, they can also create new ones. Workers may face unfamiliar challenges, such as a lack of face time with coworkers and less rigid work-life boundaries. Without cultural changes to grapple with their new work environment, newly remote teams increase their risk for burnout.&lt;/p&gt;

&lt;p&gt;Engineering teams switching to remote work can also face DevOps issues during their transition. They need to grapple with new requirements, particularly around hardware and team communication. &lt;/p&gt;

&lt;p&gt;For a successful transition, teams should monitor for changes in the development process to ensure their tools and practices still work well in their new workplace. If not, they should adopt new ones that cater better to asynchronous communication and remote development.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>development</category>
    </item>
    <item>
      <title>How JavaScript Works_01</title>
      <author>Alok Kumar</author>
      <pubDate>Tue, 02 Nov 2021 16:45:59 +0000</pubDate>
      <link>https://dev.to/thecoollearner/how-javascript-works01-38e1</link>
      <guid>https://dev.to/thecoollearner/how-javascript-works01-38e1</guid>
      <description>&lt;p&gt;Hey all 👋&lt;/p&gt;

&lt;p&gt;Now that I’m finished with the JavaScript ES6 concepts series ( expect an e-book soon 🙂 ), I’ll be writing articles covering some fundamentals of JavaScript. And in this article, we’ll be talking about how JavaScript works and about execution context, so let’s start.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;Before we start, we should know JavaScript is an &lt;strong&gt;interpreted language&lt;/strong&gt;, which means it is not compiled before sending it to the browser. &lt;/p&gt;

&lt;p&gt;After the code is sent to the browser, it is executed by the &lt;strong&gt;JavaScript Engine&lt;/strong&gt;. JavaScript Engine is a computer program provided by browsers ( Example - V8 JavaScript Engine used by Google Chrome ).&lt;/p&gt;

&lt;p&gt;JavaScript Engine creates &lt;strong&gt;Execution contexts&lt;/strong&gt; to run the JavaScript code.&lt;/p&gt;

&lt;p&gt;So let’s talk about what is an execution context?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#execution-context"&gt;
  &lt;/a&gt;
  Execution Context
&lt;/h2&gt;

&lt;p&gt;To define it simply -&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The environment in which your code is running is the Execution context. It gets created when your code is executed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s imagine it as a container with two components -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Memory Component&lt;/li&gt;
&lt;li&gt;Code Component&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;strong&gt;memory component&lt;/strong&gt; stores all the variables, and functions which are stored as objects(key: value pairs). It is called &lt;strong&gt;Variable Environment&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The code is executed line by line in the &lt;strong&gt;code component&lt;/strong&gt;. It is called &lt;strong&gt;Thread of Execution&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9_fS3-Qv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvjeba4y16pbtq50kf76.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9_fS3-Qv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvjeba4y16pbtq50kf76.png" alt="execution context" width="592" height="371"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s understand how Execution Context works with one small example -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;addA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To execute this JS code, a global execution context is created. It contains two components as we discussed earlier i.e. memory component and code component -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ej6nPozM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pu29skofbb8rb7raqlaq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ej6nPozM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pu29skofbb8rb7raqlaq.png" alt="execution context" width="580" height="381"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code is executed in two phases -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Memory allocation phase&lt;/li&gt;
&lt;li&gt;Code execution phase&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#memory-allocation-phase"&gt;
  &lt;/a&gt;
  Memory Allocation phase
&lt;/h3&gt;

&lt;p&gt;In this phase, &lt;strong&gt;memory is allocated&lt;/strong&gt; to all the variables and functions.&lt;/p&gt;

&lt;p&gt;As for the above code -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_1EQ7UtI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/olr8kzjwl0ve6wwx5m0f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_1EQ7UtI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/olr8kzjwl0ve6wwx5m0f.png" alt="execution context" width="571" height="366"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see here that during the first phase, &lt;strong&gt;undefined&lt;/strong&gt; is stored against the variables declared with keyword &lt;strong&gt;var&lt;/strong&gt;, while in the case of functions, the whole function code is stored against the function name. We’ll see how this is executed in the next phase.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-execution-phase-"&gt;
  &lt;/a&gt;
  Code Execution phase -
&lt;/h3&gt;

&lt;p&gt;JavaScript is a &lt;strong&gt;single-threaded&lt;/strong&gt; language which means that the code will be executed line-by-line( but we know sometimes we have to handle asynchronous code, and that I’ll cover in some other article ). &lt;/p&gt;

&lt;p&gt;Let’s see how the above code is executed step-by-step -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mKQzuiyS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/makqae6mxsknxy3y2lxw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mKQzuiyS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/makqae6mxsknxy3y2lxw.png" alt="execution context" width="799" height="449"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here when the first line is executed it assigns value &lt;strong&gt;5&lt;/strong&gt; to &lt;strong&gt;a&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There is nothing to execute for the lines from 3 to 6, so it moves to the last line, line number 8. And in the last line, there is a function invocation, and whenever a new function is invoked a new execution context gets created called &lt;strong&gt;Functional Execution Context&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CnbHOFPa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ykf2kiqldzg3fjxbel0j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CnbHOFPa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ykf2kiqldzg3fjxbel0j.png" alt="execution context" width="800" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we can see a new execution context is created when the &lt;strong&gt;add()&lt;/strong&gt; function is invoked.  And similar to what we have talked about, it goes through the same two phases: memory allocation and code execution.&lt;/p&gt;

&lt;p&gt;Here we can see that after the first phase, memory is allocated for &lt;strong&gt;num&lt;/strong&gt; and &lt;strong&gt;res&lt;/strong&gt;. Let’s see what happens in the second phase -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QYC05vt7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h47au8a09ucoau9tzc0j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QYC05vt7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h47au8a09ucoau9tzc0j.png" alt="execution context" width="800" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the second phase, the add() function is executed line by line -&lt;/p&gt;

&lt;p&gt;In the third line, the value of &lt;strong&gt;a&lt;/strong&gt; i.e. &lt;strong&gt;5&lt;/strong&gt; which is passed as an argument, is allocated to &lt;strong&gt;num&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the fourth line, &lt;strong&gt;num + num&lt;/strong&gt; is executed, and the result is allocated to the variable &lt;strong&gt;res&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the fifth line, the &lt;strong&gt;return&lt;/strong&gt; keyword gives back the control to the execution context where the function was invoked ( which is the global context in this case ). Also, it returns the value of the res variable.&lt;/p&gt;

&lt;p&gt;As it completes the second phase and the control is back to the previous execution context, then this functional execution context is deleted.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bynvjiW5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7j4mhg149ybiz2f4cao9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bynvjiW5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7j4mhg149ybiz2f4cao9.png" alt="Execution context" width="800" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we can see that the functional execution context is deleted, and the control is back to line number 8, where the returned value of the res variable is allocated to the &lt;strong&gt;addA&lt;/strong&gt; variable.&lt;/p&gt;

&lt;p&gt;And thus, there is no more code to execute so finally the whole global execution context is deleted.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rYCE-X2Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57abnltme01riqr5vagu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rYCE-X2Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57abnltme01riqr5vagu.png" alt="execution context" width="800" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So we just saw how a JavaScript code is executed, but what we have seen so far is an abstract of how everything works, and there are other things that work under the hood like JavaScript runtime, a CallStack which is used to manage all the execution contexts , etc. which I’ll cover in my next article, So stay tuned :)&lt;/p&gt;




&lt;p&gt;I have tried to keep it simple and precise, and if you find any typo/error please report it to me so that I can correct it 🙂&lt;/p&gt;

&lt;p&gt;Thanks for reading it till last 🙏&lt;/p&gt;

&lt;p&gt;If you find this useful then you can share it with others :)&lt;/p&gt;

&lt;p&gt;Let's Connect, drop a &lt;a href="//www.twitter.com/thecoollearner"&gt;Hi and let's chat 👋👋👋&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>100daysofcode</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Tips to become a great programmer [ Beginner - Pro]</title>
      <author>John</author>
      <pubDate>Tue, 02 Nov 2021 16:39:55 +0000</pubDate>
      <link>https://dev.to/jdks/tips-to-become-a-great-programmer-beginner-pro-5coi</link>
      <guid>https://dev.to/jdks/tips-to-become-a-great-programmer-beginner-pro-5coi</guid>
      <description>&lt;p&gt; A good programmer is someone who always looks both ways before crossing a one-way street. ~Doug Linder&lt;/p&gt;

&lt;p&gt;Let me start by saying that I do not consider myself to be a competent coder. I consider my coding abilities to be mediocre, and I am still learning and have a long way to go before I am even remotely satisfied with them.Yes, I am better at programming than a lot of others, but that is just because they are lazy and choose to sit about idle all day instead of programming. Their dreadful abilities make my less dreadful abilities appear fantastic.&lt;/p&gt;

&lt;p&gt;So most of the tips I will mention below are lessons learnt from failed endeavours, they are what I have wanted to be and I am not. So lets dive in. &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/tips-to-become-a-great-programmer/"&gt;Tips to become a great programmer [ Beginner - Pro]&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>100+ AI Projects for Beginners – Easy Ideas to Get Started [Beginners - Advance]</title>
      <author>John</author>
      <pubDate>Tue, 02 Nov 2021 16:38:13 +0000</pubDate>
      <link>https://dev.to/jdks/100-ai-projects-for-beginners-easy-ideas-to-get-started-beginners-advance-1lj</link>
      <guid>https://dev.to/jdks/100-ai-projects-for-beginners-easy-ideas-to-get-started-beginners-advance-1lj</guid>
      <description>&lt;p&gt;Artificial Intelligence has made a significant impact on our daily lives. Every time you scroll through social media, open Spotify, or do a quick Google search, you are using an application of AI. The AI industry has expanded massively in the past few years and is predicted to grow even further, reaching around 126 billion U.S. dollars by 2025. Multinational companies like IBM, Accenture, and Apple are actively hiring AI practitioners. The median salary of an AI engineer as of 2021 is $171, 715 that can go over $250,000.&lt;/p&gt;
&lt;p&gt;The field of AI is vast, and there are many areas within the industry that you can choose to specialise. Say , if you are intrigued by facial recognition systems and image generation, you can choose to work in the field of computer vision. If you’d like to build models that can converse with people and learn human language, you can work in the field of NLP (Natural Language Processing).&lt;/p&gt;
&lt;p&gt;There is a lot of work being done today for the advancement of Artificial Intelligence. Companies need AI specialists who can build and deploy scalable models to meet growing industry demands. It isn’t tough to get started in the field of AI. While there is the complexity involved in building machine learning models from scratch, most AI jobs in the industry today don’t require you to know the math behind these models. Many companies require individuals who can build AI solutions, scale them, and deploy them for the end-user. Many high-level libraries and frameworks can help you do this without an in-depth knowledge of how the models work. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/artificial-intelligence-project-for-beginners/"&gt;100+ AI Projects for Beginners – Easy Ideas to Get Started [Beginners - Advance]&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
