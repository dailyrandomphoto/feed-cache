<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Mock static methods with Mockito - Java Unit Testing</title>
      <author>Maxime Guilbert</author>
      <pubDate>Tue, 11 May 2021 20:46:52 +0000</pubDate>
      <link>https://dev.to/adaendra/mock-static-methods-with-mockito-java-unit-testing-189</link>
      <guid>https://dev.to/adaendra/mock-static-methods-with-mockito-java-unit-testing-189</guid>
      <description>&lt;p&gt;One of the most frustrating element when I am doing the Unit tests in Java is to not be able to mock static methods. &lt;/p&gt;

&lt;p&gt;Sure, during a long time we got PowerMock. But, since JUnit5, PowerMock wasn't compatible and we were unable to continue with it.&lt;/p&gt;




&lt;p&gt;But now, we have this feature included in Mockito! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dependencies"&gt;
  &lt;/a&gt;
  Dependencies
&lt;/h2&gt;

&lt;p&gt;First, you have to add the &lt;strong&gt;mockito-inline&lt;/strong&gt; library. &lt;em&gt;(You can use any version up to 3.4.0)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Here is an exemple with Maven&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.mockito&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;mockito-inline&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.9.0&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class="nt"&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#writing-test"&gt;
  &lt;/a&gt;
  Writing test
&lt;/h2&gt;

&lt;p&gt;To mock a static method, you have to create a &lt;strong&gt;mockStatic&lt;/strong&gt; of the class with the static method, and declare the event you want to apply to your mock.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;example&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Test&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;MockedStatic&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LoggerFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;loggerFactoryMock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Mockito&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;mockStatic&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;LoggerFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;loggerFactoryMock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;when&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;LoggerFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getLogger&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;any&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;))).&lt;/span&gt;&lt;span class="na"&gt;thenReturn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loggerMock&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;
            &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loggerMock&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)).&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Err message test"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, you just have to run your tests!&lt;/p&gt;




&lt;p&gt;I hope it will help you!&lt;/p&gt;

</description>
      <category>java</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>First week of the 365 Days Of Blogging Challenge!</title>
      <author>Patryk Jeziorowski</author>
      <pubDate>Tue, 11 May 2021 19:53:30 +0000</pubDate>
      <link>https://dev.to/pjeziorowski/first-week-of-the-365-days-of-blogging-challenge-4f18</link>
      <guid>https://dev.to/pjeziorowski/first-week-of-the-365-days-of-blogging-challenge-4f18</guid>
      <description>&lt;p&gt;So, &lt;a href="https://dev.to/pjeziorowski/365-days-of-blogging-challenge-or-i-transfer-1000-to-your-bank-account-5dj9"&gt;in the previous post&lt;/a&gt; I announced the challenge of blogging daily for the next 365 days or sending $1000 to a random person chosen from the comments section. &lt;/p&gt;

&lt;p&gt;After doing it I received tons of comments (hopefully not just because of the potential easy $ you may win if I fail :D) about what am I going to write about, about the quantity and quality of the articles and so on. &lt;/p&gt;

&lt;p&gt;A few fellow dev.to members suggested that I should substitute the goal of "1 article daily" by "x words daily" to make sure the published articles are high quality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quality-over-quantity"&gt;
  &lt;/a&gt;
  Quality over quantity
&lt;/h2&gt;

&lt;p&gt;I agree that goal of writing "X amount of words daily" may lead to higher quality posts, so I decided to follow the suggestions I got in the comments section, and instead of publishing 1 article a day, I'll be writing 500 words daily, or 3500 words weekly. &lt;/p&gt;

&lt;p&gt;This is a quite aggressive goal - as @InHuoOfficial mentioned &lt;a href="https://dev.to/inhuofficial/comment/1ecdi"&gt;in his comment&lt;/a&gt;, this would result in writing basically two novels in one year (over 180K words!).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#topics-of-the-posts"&gt;
  &lt;/a&gt;
  Topics of the posts
&lt;/h2&gt;

&lt;p&gt;To answer all the questions I had about topics of the articles - I'll be writing about things I'm currently working on at &lt;a href="https://www.qovery.com/"&gt;startup I help to build&lt;/a&gt;, about things I'm currently learning, about things I'm interested in. &lt;/p&gt;

&lt;p&gt;I'm a pretty geeky tech person, so it's going to all revolve around software, programming and tech topics. You may also expect stuff about productivity, biohacking, and basically anything that may help you in your tech journey.&lt;/p&gt;

&lt;p&gt;If this challenge goes well, I'll also describe my case study and show you how I managed to write and publish consistently over such a long time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-in-public-amp-transparency"&gt;
  &lt;/a&gt;
  Writing in Public &amp;amp; Transparency
&lt;/h2&gt;

&lt;p&gt;To keep the challenge fair and give you visibility into the process, besides publishing articles, I'll be publishing drafts of posts to a &lt;a href="https://github.com/pjeziorowski/cyberwritings/tree/main/content/drafts"&gt;public Github repository&lt;/a&gt; (which is the repo of my private blog BTW). &lt;/p&gt;

&lt;p&gt;You'll be able to track what I'm working on, topics of following articles, number of words or whatever you want to know about my writing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#changes-in-the-challenge"&gt;
  &lt;/a&gt;
  Changes in the challenge
&lt;/h2&gt;

&lt;p&gt;So, as I previously mentioned, I'm changing the numbers in the challenge - instead of publishing 1 article a day, I'll write 500 words a day, 3500 words a week, over 180k words (2 novels!) a year. I'll do the counting, reporting and tracking if I meet the challenge's goals every week during the weekend. &lt;/p&gt;

&lt;p&gt;If you want to be informed about progress and the results (and also about the potential $1000 winner in case I fail), you can &lt;a href="https://app.getresponse.com/site2/patrykjeziorowski/?u=yXSNe&amp;amp;webforms_id=BaviR"&gt;sign up to the newsletter&lt;/a&gt; I quickly created for the purpose of this challenge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stay-up-to-date"&gt;
  &lt;/a&gt;
  Stay up to date
&lt;/h2&gt;

&lt;p&gt;Besides the newsletter, I'll publish all the articles (and challenge updates) here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/pjeziorowski"&gt;https://dev.to/pjeziorowski&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cyberwritings.com"&gt;https://cyberwritings.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.cyberwritings.com"&gt;https://medium.cyberwritings.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hashnode.cyberwritings.com"&gt;https://hashnode.cyberwritings.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And drafts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pjeziorowski/cyberwritings/tree/main/content/drafts"&gt;https://github.com/pjeziorowski/cyberwritings/tree/main/content/drafts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#it-all-starts-this-week"&gt;
  &lt;/a&gt;
  It all starts this week!
&lt;/h2&gt;

&lt;p&gt;Please let me know what do you think about the changes and the form of the challenge. I'll try to constantly improve the process, but I'd also like to start the challenge ASAP (this week), so any feedback now is highly appreciated! &lt;/p&gt;

</description>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>First Job As A Web Developer</title>
      <author>Michael Duffy</author>
      <pubDate>Tue, 11 May 2021 19:45:41 +0000</pubDate>
      <link>https://dev.to/michaelduffy1/first-job-as-a-web-developer-3l92</link>
      <guid>https://dev.to/michaelduffy1/first-job-as-a-web-developer-3l92</guid>
      <description>&lt;p&gt;Since my first few posts here I was in the last few months of my HND Software Development course at college. My next steps were to apply for university and try my luck at applying for any developer positions that were available. (just chancing my luck to even get an interview)&lt;/p&gt;

&lt;p&gt;After many different applications I got a conditional offer for a course at university and i got an interview for a web developer position.&lt;/p&gt;

&lt;p&gt;The 1st interview was fairly relaxed and just about getting to know me as a person and what I was doing at that moment in time.&lt;/p&gt;

&lt;p&gt;I got offered a 2nd interview and this was more technical as I had to design and code a homepage for them and then present my designs. (both interviews were done remotely as COVID)&lt;/p&gt;

&lt;p&gt;I got mixed up with the interview times due to a MS Teams meeting error which said my meeting was an hour earlier than i first knew. Panic set in as I emailed the employer telling them I had made a mistake and got mixed up but it turned out was just a mixup on MS Teams.&lt;/p&gt;

&lt;p&gt;After the stress wore off I presented my designs and all went well. I was told that I would be informed later that day of any decisions regarding the web developer position.&lt;/p&gt;

&lt;p&gt;I got called a few hours later and was offered the job !!! &lt;br&gt;
I am just beginning my professional career within web development and will be journalling it through this forum.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>motivation</category>
      <category>career</category>
    </item>
    <item>
      <title>Iniciar en el mundo del TESTING AUTOMATIZADO ✍</title>
      <author>Pablo Hernández Castillo</author>
      <pubDate>Tue, 11 May 2021 19:21:59 +0000</pubDate>
      <link>https://dev.to/pablotz/iniciar-en-el-mundo-del-testing-automatizado-3n1h</link>
      <guid>https://dev.to/pablotz/iniciar-en-el-mundo-del-testing-automatizado-3n1h</guid>
      <description>&lt;p&gt;Ahhhh... El mundo del &lt;strong&gt;testing&lt;/strong&gt;, es un lugar que a veces puede estar lleno de caos y algunas otras es el lugar más pacifico del mundo.&lt;/p&gt;

&lt;p&gt;No podemos negar que las pruebas en el desarrollo son nuestro pan de cada día, todo añadido o cambio realizado en nuestro software debería de ser probado (en teoría 😝), en todo flujo de desarrollo las pruebas debería de ser algo implícito y no ser algo que se tome a la ligera o se deje para el final.&lt;/p&gt;

&lt;p&gt;Entonces teniendo esto en consideración, de aquí parten las pruebas automatizadas. Todos hemos realizado pruebas después de algún cambio y validar si este se había hecho correctamente; lo que nos proporcionan las pruebas automatizadas es que en el caso de que estemos intentando validar un login por ejemplo, el ingresar usuario y contraseña cientos de veces para comprobar que este funcionando, puede ser una cuestión que nos lleve, si bien no mucho tiempo, se puede acumular causando que nos retrasemos en alguna otra de nuestras tareas.&lt;/p&gt;

&lt;p&gt;Las pruebas automatizadas nos ayudan a manejar esto de forma sencilla, con un simple script (ahora conoceremos un poco más de esto), podemos crear una prueba la cual haga nuestras tareas de validaciones mucho más sencillas. Y tal vez podamos pensar que este tipo de pruebas solo sean necesarias para sistemas los cuales sean muy grandes, pero esto no puede estar más alejado de la verdad, pues aunque tengamos un sistema sencillo el cual solo consulta a una API y la muestra, las pruebas automatizadas nos pueden permitir que se ejecute X cantidad de veces en un lapso, y con esto validamos si la llamada y la consulta a la API está funcionando correctamente.&lt;/p&gt;

&lt;p&gt;La automatización pues no es más alejado a como lo conocemos, esta se encargara de hacer los pasos que normalmente nosotros haríamos, eso significa que debemos de tener un flujo de pasos a seguir para completar una prueba, esto es importante a mencionar, ya que cuando nosotros normalmente realizamos pruebas, no tomamos en cuenta que pasos estamos siguiendo para validar esa acción, el crear estas pruebas también nos permite darnos cuenta de los flujos que tienen nuestros sistemas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conocimientos-previos"&gt;
  &lt;/a&gt;
  Conocimientos previos 🧠
&lt;/h2&gt;

&lt;p&gt;La creación de pruebas es algo sumamente importante por lo tanto, debemos conocer que flujos vamos a aplicar y que pasos se van a seguir, si no definimos esto desde antes puede llevarnos aun más tiempo el querer desarrollar pruebas de forma improvisada.&lt;/p&gt;

&lt;p&gt;Afortunadamente las pruebas automatizadas puedes desarrollarse en múltiples lenguajes, podemos usar desde Python hasta Javascript, así que con tan solo tener algunos conocimientos en alguno de estos lenguajes podemos comenzar a desarrollar esta automatización.&lt;/p&gt;

&lt;p&gt;En el caso de las pruebas que se realizan sobre Front-End podemos investigar acerca de &lt;a href="https://www.javatpoint.com/what-is-xpath"&gt;X-Path&lt;/a&gt; o &lt;a href="https://developer.mozilla.org/es/docs/Learn/CSS/Building_blocks/Selectors"&gt;CSS Selector&lt;/a&gt; Para hacer uso de la automatización de elementos que se encuentren en nuestra pagina.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#herramientas-para-la-realizaci%C3%B3n-de-pruebas"&gt;
  &lt;/a&gt;
  Herramientas (para la realización de pruebas) 🔨
&lt;/h2&gt;

&lt;p&gt;El framework para la realización de pruebas más famoso, es &lt;a href="https://www.guru99.com/introduction-to-selenium.html"&gt;SELENIUM&lt;/a&gt; este framework se encuentra en múltiples lenguajes. Algunas ventajas de Selenium sobre otro tipo de frameworks es el uso de Selenium Grid, el cual nos permite ejecutar múltiples pruebas de forma simultanea de forma muy sencilla.&lt;/p&gt;

&lt;p&gt;Para el lado de Javascript si bien tenemos Selenium existen diferentes tipos de herramientas tal vez un poco más actualizadas, como es el caso de Cypress, el cual es una herramienta que se encuentra en constante actualización y nos proporciona una ayuda visual para la creación de las pruebas y la selección de elementos de nuestra página.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NBq77s7s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l6lb5v5z71q8k9cm6695.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NBq77s7s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l6lb5v5z71q8k9cm6695.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cypress de igual manera que Selenium nos da la capacidad de ejecutar pruebas de manera paralela con su &lt;a href="https://www.cypress.io/dashboard/"&gt;Dashboard&lt;/a&gt; pero ese tema para otro articulo.&lt;/p&gt;

&lt;p&gt;Otras herramientas que también recomiendo conocer un poco son &lt;a href="https://mochajs.org/"&gt;Mocha&lt;/a&gt; y &lt;a href="https://cucumber.io/"&gt;Cucumber&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusiones"&gt;
  &lt;/a&gt;
  Conclusiones 🔴
&lt;/h2&gt;

&lt;p&gt;Como hemos visto existen diferentes herramientas de automatización y el que se encuentren en múltiples lenguajes, nos ayuda a que podamos adentrarnos mucho más en aprender este tipo de tecnologías.&lt;/p&gt;

&lt;p&gt;Las pruebas en el flujo de desarrollo puede llegar a ser algo muy infravalorado sin embargo, estas nos pueden llegar a asegurar la calidad de nuestros sistemas.&lt;/p&gt;

&lt;p&gt;Así pues, que esperas, la automatización es un mundo muy divertido y con mucha información para conocer mucho más.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keep coding&lt;/strong&gt; 😎&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>selenium</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Integrating Chatbot into your next project</title>
      <author>lary mak</author>
      <pubDate>Tue, 11 May 2021 19:09:19 +0000</pubDate>
      <link>https://dev.to/larymak/integrating-chatbot-into-your-next-project-3gk</link>
      <guid>https://dev.to/larymak/integrating-chatbot-into-your-next-project-3gk</guid>
      <description>&lt;p&gt;Am sure by now we have all interacted with a different site where whenever we visit the site there is a pop-up at the bottom asking on how it can help us right,&lt;br&gt;&lt;br&gt;
Now that's an easier way to describe a chatbot, an online assistant programmed to help us with different tasks as programmed.&lt;br&gt;&lt;br&gt;
Most companies nowadays have turned to chatbots hence reducing the dependency on humans.&lt;br&gt;&lt;br&gt;
Person-to-person conversations can be long and may end up causing maybe conflicts among two people which may result in a bad reputation to the company, but with these bots, they are straight to the point, you ask a question, and they answer accordingly as instructed by its developer.&lt;/p&gt;

&lt;p&gt;Perhaps you might be wondering, Do I have to create a chatbot for my website or channel? &lt;br&gt;
Well, now you don't. With lots of software companies today it's easier for you by the use of an Application Programming Interface (API).&lt;/p&gt;

&lt;p&gt;Let's say for instance you are running a hotel or a business that has a booking service enabled, you may want your clients to do bookings early in advance and let the information be relayed back to you for recording.&lt;br&gt;&lt;br&gt;
To make this a success, we can add a chatbot that allows visitors on our site or page to do the booking there. &lt;br&gt;
And for our bot to work we will need an API integration, we have lots of companies with services, and you need the one that will perfectly suit your needs.&lt;br&gt;&lt;br&gt;
Let's have a look at the Spurwing API for instance. It allows you to add different functionalities into your projects, like appointment scheduling via voice command, isn't that amazing all you do is give commands via voice, and they are executed. &lt;br&gt;
Also you can embed a chatbot too, &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lets-have-a-look-how"&gt;
  &lt;/a&gt;
  Lets have a look how:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mrwmzA6k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qm2atkemrlpg0tgi629f.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mrwmzA6k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qm2atkemrlpg0tgi629f.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
For detailed documentation check out their &lt;a href="https://github.com/Spurwing/Chat-Bot-Integrations/tree/main/Facebook/NodeJS"&gt;GitHub&lt;/a&gt; for detailed documentation.  &lt;/p&gt;

&lt;p&gt;Also check out my other article on: &lt;br&gt;
&lt;a href="https://dev.to/larymak/must-have-themes-and-extensions-for-every-developers-visual-studio-code-setup-2igi"&gt;Must have Themes and Extensions for every Developers - Visual studio code setup&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/larymak/7-best-visual-studio-code-extensions-every-web-developer-should-have-2m1c"&gt;7 Best Visual Studio Code Extensions Every Web Developer Should Have.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Connect With me at &lt;a href="https://twitter.com/larymak1"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.instagram.com/nextgencoders/"&gt;Insta&lt;/a&gt; | &lt;a href="https://www.youtube.com/channel/UCrT1ARRZfLOuf6nc_97eXEg"&gt;YouTube&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/hillary-nyakundi-3a64b11ab/"&gt;LinkedIn&lt;/a&gt;  | &lt;a href="https://github.com/larymak"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>javascript</category>
      <category>productivity</category>
      <category>python</category>
    </item>
    <item>
      <title>How I Use Vim for Productivity and Efficiency</title>
      <author>jones268</author>
      <pubDate>Tue, 11 May 2021 19:04:57 +0000</pubDate>
      <link>https://dev.to/jones268/how-i-use-vim-for-productivity-and-efficiency-15mh</link>
      <guid>https://dev.to/jones268/how-i-use-vim-for-productivity-and-efficiency-15mh</guid>
      <description>&lt;p&gt;I use vim (a text editor) for my product development work, which is full of repetitive tasks. For example, I’m currently working on a project that has many, many files and many, many lines of code. In total, there are over 10,000 lines of code that I have to navigate through. It would take me forever if I didn’t have vim on my side.&lt;/p&gt;

&lt;p&gt;I have used a variety of text editors in my career. I started with pico on my workstations, worked briefly with joe on &lt;a href="https://en.wikipedia.org/wiki/Solaris_(operating_system)"&gt;Solaris&lt;/a&gt; and then moved to emacs and nano. When I moved to Linux as my primary operating system, I started using vim to edit text files. Then I learned about vim and how to use it and that is when I really fell in love with vim.&lt;/p&gt;

&lt;p&gt;I am not going to go into all of the details about vim but if you are new to vim I recommend &lt;a href="https://vim.is/"&gt;this tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vim-tricks"&gt;
  &lt;/a&gt;
  Vim Tricks
&lt;/h3&gt;

&lt;p&gt;I am just going to highlight some tricks that I have found useful.&lt;/p&gt;

&lt;p&gt;So how exactly does a guy like me get used to typing commands left and right? It took some time and patience, but it was well worth it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;keyboard macros&lt;/strong&gt;  You can start recording your keys with &lt;code&gt;ESC&lt;/code&gt; followed by &lt;code&gt;qh&lt;/code&gt;. Then whatever you type in vim (including commands) will be recorded. Press &lt;code&gt;ESC&lt;/code&gt; &lt;code&gt;q&lt;/code&gt; to stop recording. Now press &lt;code&gt;@h&lt;/code&gt; to replay your key strokes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;repeat action&lt;/strong&gt; if you want to repeat an action, just type a number followed by the action. To delete 10 lines press &lt;code&gt;10dd&lt;/code&gt;. To press 50 lines type &lt;code&gt;50dd&lt;/code&gt;. You can do this for keyboard recording too, &lt;code&gt;50@h&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;run commands&lt;/strong&gt; you can run commands right from within vim. &lt;code&gt;!ls&lt;/code&gt; runs the command ls in your terminal. You can do this for any command.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;scrolling&lt;/strong&gt; you can scroll inside vim with the keys &lt;code&gt;ctrl+e&lt;/code&gt; and &lt;code&gt;ctrl+y&lt;/code&gt;, no need to use the mouse&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;move to end/begin&lt;/strong&gt; you can use the keys &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; to move to the beginning and end of a line. No need to hold down the cursor key for several seconds.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;jump to line&lt;/strong&gt; press the keys &lt;code&gt;140G&lt;/code&gt; to jump to line 140. You can also use &lt;code&gt;:140&lt;/code&gt; if you prefer those keys.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;set your .vimrc&lt;/strong&gt; you should have a good .vimrc file in place so that you have all the settings ready to go. This means options for colours, font, tab settings etc. You can put this on git and pull whenever you access another computer. That way your settings stay in sync no matter what computer you use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;vim mode&lt;/strong&gt; if you have to use an IDE for work, you can enable vim emulation. This works in visual studio, jetbrains IDEs and probably tons of others. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>vim</category>
      <category>linux</category>
      <category>productivity</category>
      <category>vscode</category>
    </item>
    <item>
      <title>The simple tricks to change your website theme based on day and night</title>
      <author>lakshmanan-arumugam</author>
      <pubDate>Tue, 11 May 2021 18:53:42 +0000</pubDate>
      <link>https://dev.to/lakshmananarumugam/the-simple-tricks-to-change-your-website-theme-based-on-day-and-night-23l0</link>
      <guid>https://dev.to/lakshmananarumugam/the-simple-tricks-to-change-your-website-theme-based-on-day-and-night-23l0</guid>
      <description>&lt;p&gt;Hi everyone, every website have a theme options. so, a website user able to choose their preferred theme like dark, light..etc., This is existing followed approach in everyone website.&lt;/p&gt;

&lt;p&gt;how is it (we show the website theme based on the user day and night). I just tried. if you like it use in your website. give some different experience to your website user.&lt;/p&gt;

&lt;p&gt;Let's jump into the implementation part:&lt;/p&gt;

&lt;p&gt;For now, I take a simple coming soon html template for with dark and light theme.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/explore-free-projects/embed/zYZvewO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The above page theme change based on body attribute data-theme: "dark-theme" / "light-theme". &lt;/p&gt;

&lt;p&gt;by default show &lt;code&gt;light-theme&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Now, coming to main point how we change website theme based on day and night.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function setThemePreference() {
  var d = new Date();
  /*
  * The getHours() method returns the hour (from 0 to 23) of the specified date and time.
  * Day = 0 - 11
  * Night = 12 - 23
  */
  var currentHour = d.getHours();

  /*
  * The dark theme load early morning and night
  * The light theme load morning and evening
  */

  if(currentHour &amp;gt;= 19 || currentHour &amp;lt;= 6) {
    document.body.setAttribute("data-theme", "dark_theme") 
  }else {
    document.body.setAttribute("data-theme", "light_theme") 
  }
}

window.onload = setThemePreference;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all. &lt;/p&gt;

&lt;p&gt;The workable version of the &lt;a href="https://codepen.io/explore-free-projects/pen/zYZvewO"&gt;codepen URL&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>How to Ace the Behavioural Interview</title>
      <author>Sandra Spanik</author>
      <pubDate>Tue, 11 May 2021 18:42:34 +0000</pubDate>
      <link>https://dev.to/sanspanic/how-to-ace-the-behavioural-interview-15g1</link>
      <guid>https://dev.to/sanspanic/how-to-ace-the-behavioural-interview-15g1</guid>
      <description>&lt;p&gt;As you might have already guessed, this article is not about technical interviews, coding challenges, let alone about (&lt;em&gt;shudders&lt;/em&gt;) algorithms. I'm not qualified to give anyone advice on above, but having transitioned to tech from mental health, I do know a thing or two about human behaviour. By extension, I'm declaring myself qualified to dish out advice on behavioural interviews. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This article is about all aspects of the interview process that are NOT strictly coding-related, and will be particularly useful to those who are transitioning careers to tech from a different industry.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's go!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-tech-recruitment-process"&gt;
  &lt;/a&gt;
  The Tech Recruitment Process
&lt;/h3&gt;

&lt;p&gt;Typically, interviews in the tech industry have at least 4 rounds, although of course the exact schedule will vary from company to company.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The Application/Recruiter Email&lt;/li&gt;
&lt;li&gt;The Recruiter Screening Call &lt;/li&gt;
&lt;li&gt;The Technical Interview/The Takeaway Coding Challenge&lt;/li&gt;
&lt;li&gt;The Behavioural Interview&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Rounds 1, 2 and 4 all have to do with who you are as a person, as much as they have to do with your skills. There is a 100% likelihood you will have to tell your interviewers about yourself and your background, and unless you come across as someone your interviewers would enjoy working with, no amount of skills will help you land your dream role. It's not easy to get an offer, especially if you're switching careers from a different industry, so being prepared to talk about yourself eloquently might well be what distinguishes you from your competition. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/XtB0qy4kx8jCM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/XtB0qy4kx8jCM/giphy.gif" alt="https://media.giphy.com/media/XtB0qy4kx8jCM/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interviewing-well-is-a-skill"&gt;
  &lt;/a&gt;
  Interviewing Well is a Skill.
&lt;/h3&gt;

&lt;p&gt;The good news is that just like any other skill, it's one you can improve with practice. It certainly took me a lot of practice to sound confident and convincing in interview situations - I'm still not amazing at it. The last in-person interview I went to pre-career-switch to tech ended in tears - not only did I come across as an idiot, I also knocked over a glass of water onto the interviewer sat across me. &lt;/p&gt;

&lt;p&gt;Why was it such a nightmare? Because I hated the sound of the job, and, as a result, was woefully underprepared to talk about myself and my motivation for applying to it. &lt;em&gt;Why did you apply for it, if you hated the sound of it&lt;/em&gt;, I hear you ask? &lt;em&gt;Excellent&lt;/em&gt; &lt;em&gt;question. I had no idea what I was doing with my life&lt;/em&gt;, I hear myself answer. &lt;/p&gt;

&lt;p&gt;This brings me to my first piece of advice, which I'll kick the useful part of this article off with. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-make-sure-you-like-what-youre-applying-to"&gt;
  &lt;/a&gt;
  1. Make Sure You Like What You're Applying To.
&lt;/h3&gt;

&lt;p&gt;If you don't show enthusiasm for the role or find yourself having to fake it, your interviewers will sense this and offer the role to a more motivated candidate. If you hate the way social media has contributed to the polarisation of society, try not to apply for a job at Facebook, unless you believe you can fix it (&lt;em&gt;please... someone fix it. anyone..?&lt;/em&gt; ). If the sound of working for a local start-up that creates a productivity management tool sounds boring beyond belief to you, manage your own productivity better by saving yourself the hassle of an application. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-ten-applications-a-day-keep-the-salary-at-bay"&gt;
  &lt;/a&gt;
  2. Ten Applications A Day Keep the Salary At Bay.
&lt;/h3&gt;

&lt;p&gt;I see a lot of well-intentioned advice encouraging candidates to apply to ten positions a day. In my potentially controversial opinion, this is complete nonsense. In the best case scenario, you'll hear back from numerous companies, which will mean that you're now involved in too many recruitment processes at once. This won't give you enough time to do your due diligence and bring your best self to each interview. In the worst case scenario, you've spread yourself too thin and given each application so little thought that you barely hear back from anyone. I'd recommend you go for quality instead of quantity. One or two applications per day are plenty, especially if you're tailoring your CVs and cover letters uniquely to each position you apply to. And if that's something you're not doing, then you're doing it wrong.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-prepare-answers-to-common-questions-in-advance"&gt;
  &lt;/a&gt;
  3. Prepare Answers to Common Questions in Advance.
&lt;/h3&gt;

&lt;p&gt;The chance of you not hearing the following words from an interviewer at some point during the process is precisely zero : &lt;strong&gt;so, could you please tell us a bit about yourself&lt;/strong&gt;... Knowing this gives you the power to absolutely ace this question. Below is a list of other guaranteed questions you might want to prepare for. The list should be particularly relevant to those who are transitioning careers, i.e. the target audience of this article. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tell us a bit about yourself.&lt;/li&gt;
&lt;li&gt;What prompted you to start coding? &lt;/li&gt;
&lt;li&gt;What do you particularly like about front-end/back-end/data science/whatever-the-job-is? &lt;/li&gt;
&lt;li&gt;Tell me about a time in your life when you successfully worked as part of a team.&lt;/li&gt;
&lt;li&gt;Tell me about a time in your life when you successfully dealt with a challenging situation. &lt;/li&gt;
&lt;li&gt;What made you apply to this particular position, in our particular company? &lt;/li&gt;
&lt;li&gt;What are your favourite coding-related resources? &lt;/li&gt;
&lt;li&gt;Do you have any questions for us? &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;I can pretty much guarantee that most of above questions, or some permutations thereof, will be asked.&lt;/strong&gt; There is no reason you should have to think about these on the spot and struggle with a coherent reply. Take your time to think about these questions beforehand, and write your answers out. Read them, tweak them for maximum impact, commit them to memory. &lt;/p&gt;

&lt;p&gt;Every interview is slightly different so you will still get ample space to improvise, but &lt;strong&gt;pre-empting as many questions as you can will make you a better candidate&lt;/strong&gt;. This seems like extremely obvious advice, but many still don't follow it - make sure you slot yourself into the category of those who do to capitalise on this opportunity. I'd argue that preparing replies to commonly asked questions is &lt;strong&gt;the one easiest and most impactful step&lt;/strong&gt; any candidate can take to stand out.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-talk-to-yourself-out-loud-seriously"&gt;
  &lt;/a&gt;
  4. Talk to Yourself. Out Loud. Seriously.
&lt;/h3&gt;

&lt;p&gt;When preparing for your interview, don't do it in silence. Practice your replies out loud, and get more familiar with what and how you want to convey your points. &lt;strong&gt;Interviews are by default a performative action, and like every performance, the more you do it, the better you get at it&lt;/strong&gt;. Some even go as far as to advise candidates to record themselves and analyse how they come across - I'd say that's a step too far, but there's nothing wrong with standing in front of a mirror (or a willing other) and rattling your script down until you're happy with your "act". &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o7aD0QILFVJQEOb2E/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o7aD0QILFVJQEOb2E/giphy.gif" alt="https://media.giphy.com/media/3o7aD0QILFVJQEOb2E/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-do-some-detective-work"&gt;
  &lt;/a&gt;
  5. Do Some Detective Work.
&lt;/h3&gt;

&lt;p&gt;In this situation only, being a stalker is a perfectly acceptable way to be. Researching your interview panel is useful for two reasons. Firstly, you might get a better idea of what life at the company you're applying to is like, and what your job might entail. Having this knowledge will help you craft better answers during the interview.  You might even pick up an impressive tidbit of information that you can impress the panel with during your interview. Secondly, you might get a better sense of the type of person the company hires. If you see any red flags here, run. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3ohc0Rnm6JE0cg0RvG/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3ohc0Rnm6JE0cg0RvG/giphy.gif" alt="https://media.giphy.com/media/3ohc0Rnm6JE0cg0RvG/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-leverage-your-nontech-background"&gt;
  &lt;/a&gt;
  6. Leverage Your Non-Tech Background.
&lt;/h3&gt;

&lt;p&gt;No CS degree? No problem! Whatever it is you've been doing with your life, you must have learned a thing or two. The trick is to tailor your story towards the job you want and make your diverse background sound like a benefit, rather than a drawback of hiring you. &lt;/p&gt;

&lt;p&gt;Did you work in hospitality before? You must know how to deal with people and be able to spontaneously improvise solutions to tricky situations really effectively! Were you in customer service? Your communication skills must be off the charts. Were you an athlete or a musician? Wow, I bet you have a tons of discipline and will code us all under the table in a couple of years. Did you spend a couple of years traveling? How resourceful and adaptive that must make you! Are you perhaps a parent? You win by default, you literally created a human being. You must be incredibly organised and excellent at time management to juggle all that AND change your career. &lt;/p&gt;

&lt;p&gt;Soft skills are important in any environment, and software engineering is no exception. Make your background work for you! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/l0ExghDSRxU2g55sc/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l0ExghDSRxU2g55sc/giphy.gif" alt="https://media.giphy.com/media/l0ExghDSRxU2g55sc/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-bring-your-whole-self"&gt;
  &lt;/a&gt;
  7. Bring Your Whole Self.
&lt;/h3&gt;

&lt;p&gt;Don't hide your personality - display it proudly! &lt;em&gt;Unless your personality sucks, in which case, definitely hide your personality&lt;/em&gt;. But seriously, your future employers are interested in who you are as a person as much as they are interested in your skills. You won't exist in a vacuum, on the contrary, you will constantly be interacting with others and contributing to a team, so being a person who's easy to get on with will go a long way. &lt;/p&gt;

&lt;p&gt;You don't have to rely on solely professional examples to illustrate who you are - you are way more than just your previous jobs or studies. Feel free to draw on other areas of your life for examples of what makes you uniquely you. For example, I have a thing for acrobatics and enjoy balancing people on my shoulders. During my interview, I used the example of acrobatics to illustrate my approach to teamwork - in acrobatics, communication is just as important as skill and no human pyramid would ever go up would the entire team not be on the same page regarding effective communication. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/SGsdST7lHYafsTQ1j4/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/SGsdST7lHYafsTQ1j4/giphy.gif" alt="https://media.giphy.com/media/SGsdST7lHYafsTQ1j4/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-the-fear-wont-persevere"&gt;
  &lt;/a&gt;
  8. The Fear Won't Persevere.
&lt;/h3&gt;

&lt;p&gt;There is an aspect of interviewing that is unique to the interview itself and cannot be replicated during solo practice in front of a mirror -  I mean the nerve-wracking, anxiety-inducing, "this-is-a-live-situation-and-I-only-have-one-chance" part of it all. I don't know about you, but I'm pretty much shaking before any interview. Even if on the surface I look calm and ready, my knees are weak, my palms are sweaty, there's vomit on my sweater already (mom's spaghetti). &lt;/p&gt;

&lt;p&gt;Jokes aside, some adrenaline is helpful and leads you to think clearer, but too much of it can muddle your thoughts. I've found it helpful to internally reframe The Fear™  as simply Extreme Excitement™. &lt;em&gt;I'm not dreading this and shaking out of fear, I just can't wait to seize this opportunity, that's all!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This, too, is a practicable skill. Even if you tend to get very unsettled by interviews at the moment, it doesn't mean you always will. The more interview processes you go through, the more practice you get with regulating your interview feelings, meaning you will interview better in the future. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/xT0xey2FaDj3GQmFs4/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/xT0xey2FaDj3GQmFs4/giphy.gif" alt="https://media.giphy.com/media/xT0xey2FaDj3GQmFs4/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-normalise-rejection"&gt;
  &lt;/a&gt;
  9. Normalise Rejection.
&lt;/h3&gt;

&lt;p&gt;If you get rejected, you're just one interview closer to the interview that will result in a job offer. I know, this is easier said than done. But try to bear in mind that you're not alone. The struggle is real for all of us. Rejection is tough, but completely normal - just another day at the office, even for experienced developers. But equally importantly, don't beat yourself up over feeling down. We all have different emotional spans, and being someone who takes rejection to heart more significantly than others does not make you a worse (or better) candidate. Your feelings are valid, so accept them and let yourself experience them fully, prior to moving on. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/12EFa8Vc5kVlOU/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/12EFa8Vc5kVlOU/giphy.gif" alt="https://media.giphy.com/media/12EFa8Vc5kVlOU/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-always-ask-for-feedback"&gt;
  &lt;/a&gt;
  10. Always Ask For Feedback.
&lt;/h3&gt;

&lt;p&gt;If you've spent weeks of your life interviewing for a company and made it all the way through to the behavioural interview, the least the company can do after deciding to offer the job to someone else is provide you with useful feedback. &lt;strong&gt;If they don't do this, it means you likely dodged a bullet anyways&lt;/strong&gt;. Frequently, the feedback you will receive will be useful and inform your next attempt. Other times, the feedback will be that you were &lt;strong&gt;this&lt;/strong&gt; close to getting an offer, but someone else with the slightest bit of more directly relevant experience was in the end deemed a better choice. Whilst this type of feedback is not super useful, it should hopefully serve to raise your spirits and reassure you that you're very, very close. Either way, asking for feedback can only result in positive outcomes. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3otPoScZw3enH8ZGKY/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3otPoScZw3enH8ZGKY/giphy.gif" alt="https://media.giphy.com/media/3otPoScZw3enH8ZGKY/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-dont-lie"&gt;
  &lt;/a&gt;
  11. Don't Lie.
&lt;/h3&gt;

&lt;p&gt;Last but not least, be honest - with yourself and with your interviewers. Instead of pretending you are really into animations, when in reality you've barely ever encountered an SVG before, is unnecessary. At best, you might get offered the job and realise you've sold yourself as an expert when in reality you have no idea what you're doing, in which case you'll be found out immediately. At worst, faking expertise might lead to you coming across as cocky and never getting offered the job in the first place. &lt;/p&gt;

&lt;p&gt;Nobody, I repeat, NOBODY, is an expert at everything. Senior devs get better at knowing exactly what it is they don't know, which makes it easier to ask the right questions and seek out answers in the right places. But even seniors would be lying if they claimed they're the absolute bee's knees at every single topic. If you're only just starting your tech career, it's much wiser to openly admit your technical gaps and frame them as areas of growth you are aware of and excited to explore.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/Q9kgQp6ptfcLS/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Q9kgQp6ptfcLS/giphy.gif" alt="https://media.giphy.com/media/Q9kgQp6ptfcLS/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#still-with-me"&gt;
  &lt;/a&gt;
  Still with me?
&lt;/h3&gt;

&lt;p&gt;Wow, you must really want that job. Now go get it! Let me know if you found this article useful in the comments, and feel free to connect with me on &lt;a href="https://twitter.com/sansPanicDev"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/sandra-spanikova-6738aa1b7/"&gt;LinkedIn&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>motivation</category>
    </item>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>dev.to staff</author>
      <pubDate>Tue, 11 May 2021 18:17:11 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-322d</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-322d</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now-this-is-preparation"&gt;
  &lt;/a&gt;
  Now this is preparation
&lt;/h2&gt;

&lt;p&gt;Wow, &lt;a class="mentioned-user" href="https://dev.to/suprabhasupi"&gt;@suprabhasupi&lt;/a&gt;
! What a thorough guide to some of the React/Redux interview questions our community might encounter in the future. Thanks for this! &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/suprabhasupi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qdOZR6Yq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Oa9V032i--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/80451/3034728c-5307-4467-a67e-b9c00d6d33ed.png" alt="suprabhasupi image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/suprabhasupi/react-redux-interview-questions-with-answers-13ba" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;React/Redux Interview Questions with answers 🚀&lt;/h2&gt;
      &lt;h3&gt;Suprabha ・ May 7 ・ 21 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#an-evergreen-solution-to-a-common-web-dev-problem"&gt;
  &lt;/a&gt;
  An evergreen solution to a common web dev problem
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/bholmesdev"&gt;@bholmesdev&lt;/a&gt;
 has put together some "easy wins" for optimizing image file formats and sizes with the picture element &lt;em&gt;and&lt;/em&gt;  an automation process that you can use to your build setup of choice. Super helpful. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/bholmesdev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8-zQ0THr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--othUiuX3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/142865/eae5c7d3-b7c3-44b1-ae9f-00e87ffc2d2c.jpg" alt="bholmesdev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/bholmesdev/picture-perfect-image-optimization-for-any-web-framework-2o77" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Picture perfect image optimization for any web framework&lt;/h2&gt;
      &lt;h3&gt;Ben Holmes ・ May 5 ・ 11 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#eleventy&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-next-step"&gt;
  &lt;/a&gt;
  The Next step
&lt;/h2&gt;

&lt;p&gt;If you're comfortable with the React framework library, this post by &lt;a class="mentioned-user" href="https://dev.to/olenadrugalya"&gt;@olenadrugalya&lt;/a&gt;
 is a fantastic way of familiarizing yourself with NextJS and its features.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/olenadrugalya" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hA7FvS0u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--exTrSsNL--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/443240/50a350f7-8199-4912-9add-bb54336cf107.jpg" alt="olenadrugalya image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/olenadrugalya/introduction-to-nextjs-3gi4" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Introduction to NextJS&lt;/h2&gt;
      &lt;h3&gt;Olena Drugalya ・ May 4 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#nextjs&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#golden-rules-for-code-reviews"&gt;
  &lt;/a&gt;
  Golden rules for code reviews
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/pavel_polivka"&gt;@pavel_polivka&lt;/a&gt;
 provides some really useful things to keep in mind the next time you are conducting a code review. You might even start enjoying them 😉 &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/pavel_polivka" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c-38J5xr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--4IMf8hkB--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/459371/ca45340e-2896-45d6-9cfa-c5d5a075b161.jpg" alt="pavel_polivka image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pavel_polivka/how-to-be-good-at-code-reviews-2lpl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to be good at Code Reviews&lt;/h2&gt;
      &lt;h3&gt;Pavel Polívka ・ May 5 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codereview&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#java&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-lookback"&gt;
  &lt;/a&gt;
  The lookback
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/adriantwarog"&gt;@adriantwarog&lt;/a&gt;
's mantra (&lt;em&gt;"1) Always improve, 2) Learn with projects, 3) Stay healthy, 4) Apply yourself, 5) Network, 6) Don't Burnout&lt;/em&gt;), gained from years of being a dev, is relevant to all of us. Thanks, Adrian!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/adriantwarog" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---c448bcB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--MyCRR8L9--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/315465/bf5cc9f2-09da-451d-95dd-110563cf0a62.jpg" alt="adriantwarog image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/adriantwarog/what-i-learned-after-10-years-of-development-3an" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What I learned after 10 years of development&lt;/h2&gt;
      &lt;h3&gt;Adrian Twarog ・ May 9 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#opening-the-door-to-open-source"&gt;
  &lt;/a&gt;
  Opening the door to open source
&lt;/h2&gt;

&lt;p&gt;This is a fantastic "who, what, when, where, why" of contributing to open source by &lt;a class="mentioned-user" href="https://dev.to/ceeoreo"&gt;@ceeoreo&lt;/a&gt;
. Whether you've been meaning to contribute to open source projects for a while or you want to convince someone else in your life to do so, this post is a great resource. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ceeoreo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CnpPqWlY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--xZCqZv2b--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/102841/e1a65308-9b86-49be-8dec-3a6ecac71489.jpeg" alt="ceeoreo image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/codesandboxio/how-to-make-your-first-open-source-contribution-2oim" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Make Your First Open Source Contribution&lt;/h2&gt;
      &lt;h3&gt;Ceora Ford ・ May 6 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#coding&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#mastering-puppeteer"&gt;
  &lt;/a&gt;
  Mastering Puppeteer
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/sudarshansb143"&gt;@sudarshansb143&lt;/a&gt;
 thinks Puppeteer is one of the greatest tools available on the web in order to perform the automation regarding website or In-Browser Activities. By the end of this article, you might agree!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/sudarshansb143" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cGhxdEMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--JJHy9OW4--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/618863/6be21068-6dfc-4fbb-808a-fa8b696b717c.jpg" alt="sudarshansb143 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/sudarshansb143/productivity-hacks-using-puppeteer-81d" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Productivity Hacks Using Puppeteer  &lt;/h2&gt;
      &lt;h3&gt;Sudarshan Sawandkar ・ May 5 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>TCP handshake</title>
      <author>Gealber Morales</author>
      <pubDate>Tue, 11 May 2021 18:11:19 +0000</pubDate>
      <link>https://dev.to/gealber/tcp-handshake-3ac</link>
      <guid>https://dev.to/gealber/tcp-handshake-3ac</guid>
      <description>&lt;h1&gt;
  &lt;a href="#tcp"&gt;
  &lt;/a&gt;
  TCP
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;This articles will be about two important networking protocols; &lt;strong&gt;TCP&lt;/strong&gt; and &lt;strong&gt;UDP&lt;/strong&gt;. I will try to make it concise, given the amount of information that there is related to these two particular protocols. I will try to approach this subject in a graphical way, trying to appeal to your love for pretty sketches.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Python  3.&lt;/li&gt;
&lt;li&gt;Wireshark or any other packet sniffer, choose one that you know how to use it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I will be using python for simplicity, but this can be achieved with any other programming language of your choice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-protocol"&gt;
  &lt;/a&gt;
  What is a protocol?
&lt;/h2&gt;

&lt;p&gt;Well, a protocol is a standard set of rules that allow the communication between electronic devices. So at the end, &lt;strong&gt;TCP&lt;/strong&gt; is just a set of rules that is used by electronic devices to communicate between each other. Let's see some of these rules.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#description-of-tcp-handshake"&gt;
  &lt;/a&gt;
  Description of TCP handshake
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#establishing-connection"&gt;
  &lt;/a&gt;
  Establishing connection
&lt;/h3&gt;

&lt;p&gt;Suppose we have two parts, and one is trying to reach out the other one using the &lt;strong&gt;rules&lt;/strong&gt; of &lt;strong&gt;TCP&lt;/strong&gt;, how could we achieve that? If you've read some information about &lt;strong&gt;TCP&lt;/strong&gt;, then I'm sure you've read that &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A &lt;strong&gt;TCP&lt;/strong&gt; connection uses a three-way handshake to introduce both parts on the conversation...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Or something similar to that, right? Let's call one part the &lt;strong&gt;client&lt;/strong&gt;, which is the node or part that start the communication, while the other node will be called &lt;strong&gt;server&lt;/strong&gt;. Now, when the &lt;strong&gt;client&lt;/strong&gt; try to start the conversation, he first sends a &lt;strong&gt;SYN&lt;/strong&gt; flag to the server. If you are a curious person I'm sure you wonder what information goes on this first packet, so let's find out.&lt;/p&gt;

&lt;p&gt;In order to be able to reproduce this situation, a simple &lt;strong&gt;TCP&lt;/strong&gt; connection, I'm going to create an extremely simple &lt;strong&gt;server&lt;/strong&gt; and &lt;strong&gt;client&lt;/strong&gt; with &lt;strong&gt;Python&lt;/strong&gt; using the &lt;strong&gt;socket&lt;/strong&gt; library, which is part of the Python Standard Library so just having Python is good enough.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# server.py
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# creating the socket
&lt;/span&gt;    &lt;span class="n"&gt;sck&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# binding the socket to the port 7456
&lt;/span&gt;    &lt;span class="c1"&gt;# notice that bind() take a tuple as argument
&lt;/span&gt;    &lt;span class="n"&gt;sck&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;'localhost'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7456&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# now is time to say, I'm ready for connection OS, could you let me please?
&lt;/span&gt;    &lt;span class="c1"&gt;# the 1 specified how many connection it will queue up, until
&lt;/span&gt;    &lt;span class="c1"&gt;# start rejecting attempts of connections.
&lt;/span&gt;    &lt;span class="n"&gt;sck&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hey you I'm listening on 7456...weird port by the way"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# accepting the incoming connection
&lt;/span&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_sock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sck&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# 1024 is a magic number used on every networking tutorial out there
&lt;/span&gt;        &lt;span class="c1"&gt;# so here I also make use of it. Also in this case means that the socket
&lt;/span&gt;        &lt;span class="c1"&gt;# will process up to 1024 bytes of the incoming message from the client
&lt;/span&gt;        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client_sock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"FROM: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; MSG: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# good bye socket
&lt;/span&gt;    &lt;span class="n"&gt;client_sock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is more comments than code itself, so don't freak out. This is the part corresponding to the &lt;code&gt;server.py&lt;/code&gt; file, nothing fancy here, we create the socket, bind the socket, etc... read the comments. Now for the &lt;code&gt;client.py&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# client.py
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# creating the socket
&lt;/span&gt;    &lt;span class="n"&gt;sck&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# just connecting
&lt;/span&gt;    &lt;span class="n"&gt;sck&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7456&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Sending data..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sck&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s"&gt;"Hola server, are you bored?"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# I don't care about your response server, I'm closing
&lt;/span&gt;    &lt;span class="n"&gt;sck&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even simpler, the client just send one message to the server, a pretty silly message but a message we don't need to be serious now.&lt;/p&gt;

&lt;p&gt;The idea is to reproduce the situation as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Open Wireshark, you may need to use &lt;code&gt;sudo&lt;/code&gt; command in order to be able to sniff a network interface.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Given that the traffic that we want to sniff it is only local, we will be sniffing the &lt;a href="https://askubuntu.com/questions/247625/what-is-the-loopback-device-and-how-do-i-use-it#:~:text=The%20loopback%20device%20is%20a,running%20on%20the%20local%20machine"&gt;&lt;strong&gt;loopback&lt;/strong&gt;&lt;/a&gt; interface, here is a photo just in case.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jCY_RXcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkkkw8gymd7ffjtxkg92.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jCY_RXcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkkkw8gymd7ffjtxkg92.png" alt="Wireshark loopback interface"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We need to filter the traffic, given that we are using &lt;strong&gt;TCP&lt;/strong&gt; on port &lt;strong&gt;7456&lt;/strong&gt;, so &lt;code&gt;tcp.port == 7456&lt;/code&gt; would be an appropriate filter for our case.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qwQEHye5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/esvgh6odn7zxog1idzdt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qwQEHye5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/esvgh6odn7zxog1idzdt.png" alt="TCP filter Wireshark"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now we are good to go, start the script with the server code. If you take a look at Wireshark right now, it won't be any traffic given that the client haven't tried to connect.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   python server.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Run the client script,
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   python client.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you should see something like this,&lt;br&gt;
   &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jKYOCeBB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l45n4veqercfiz17rcx4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jKYOCeBB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l45n4veqercfiz17rcx4.png" alt="Wireshark traffic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-syn-packet"&gt;
  &lt;/a&gt;
  First SYN packet
&lt;/h3&gt;

&lt;p&gt;If you look back, all this was done with the idea of looking at the first &lt;strong&gt;SYN&lt;/strong&gt; packet sent by the client, right? Now let's look at it. If you give click on this first packet, Wireshark will show you all the info related to it, and let me tell you it's a lot. In order to simplify the analysis let's focus on &lt;strong&gt;Sequence&lt;/strong&gt; number, &lt;strong&gt;Acknowledge&lt;/strong&gt; number, &lt;strong&gt;Flags&lt;/strong&gt; and &lt;strong&gt;Window&lt;/strong&gt; size value.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ixLLkj_R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dou9jf932vqqzq47ohkc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ixLLkj_R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dou9jf932vqqzq47ohkc.png" alt="SYN Packet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sequence number&lt;/strong&gt;: Is a number identifying a TCP segment, this is used to ensure that part of the data is not missed. It is like a way to keep track of the order in which the packets were sent.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Acknowledge number&lt;/strong&gt;: The sequence number that is expected in the next packet from the other device.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flags&lt;/strong&gt;: Used to identify the type of TCP packet that is been transmitted. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Window size&lt;/strong&gt;: The size of the TCP receiver buffer in bytes. This is a really tricky one, I didn't get it at first, I actually had a hard time trying to understand it. So I use the master of knowledge(Google or any other search engine), and found this question, &lt;a href="https://networkengineering.stackexchange.com/questions/12485/window-size-and-ack-number?newreg=b2fb52d5b29844ef8c6ad2f2226cf3a6"&gt;Window Size and ACK&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Window Size(that the Receiver sets) is a hard limit on how many bytes the Sender can send without being forced to stop to wait for an &lt;strong&gt;acknowledgement&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I recommend you to read the whole question, because it clarifies some misunderstanding related to the &lt;strong&gt;Window size&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;All this is handled by the library that you are using, so you won't need to handle this by yourself. So this first &lt;strong&gt;SYN&lt;/strong&gt; packet sent by the &lt;strong&gt;client&lt;/strong&gt; to the server, act like a simple presentation&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vaWKN5Wt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/teex02kro237rtruy45a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vaWKN5Wt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/teex02kro237rtruy45a.png" alt="SYN Packet Sketch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syn-ack-by-the-server"&gt;
  &lt;/a&gt;
  SYN, ACK by the server
&lt;/h3&gt;

&lt;p&gt;In response to this &lt;strong&gt;SYN&lt;/strong&gt; the &lt;strong&gt;server&lt;/strong&gt; respond with a &lt;strong&gt;SYN, ACK&lt;/strong&gt; packet. If you take a look at the same info mentioned before, you will notice that in this case the &lt;strong&gt;Flags&lt;/strong&gt; &lt;strong&gt;Syn&lt;/strong&gt; and &lt;strong&gt;Acknowledgement&lt;/strong&gt; were marked as set&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d2X9-TFV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89d39rmjv7o29shfw8zk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d2X9-TFV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89d39rmjv7o29shfw8zk.png" alt="SYN and ACK set"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The server say, "ok I saw you, this is &lt;strong&gt;my&lt;/strong&gt; Sequence number(Seq), and I expect this sequence number from &lt;strong&gt;you&lt;/strong&gt;(Ack)"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j37ysv8x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2zr5b0ou1n2qmckuqyy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j37ysv8x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2zr5b0ou1n2qmckuqyy.png" alt="SYN/ACK server"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ack-from-client"&gt;
  &lt;/a&gt;
  ACK from client
&lt;/h3&gt;

&lt;p&gt;This is the last part of the handshake, in this part the client reply with its current Seq  which is the previous plus one, and also include the expected sequence number from the server(Ack).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fFF3KIPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nkqsh54f85p6yfe06pwo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFF3KIPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nkqsh54f85p6yfe06pwo.png" alt="ACK Packet"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rsHRMIlU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vb5lizsxvasaiyx394t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rsHRMIlU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vb5lizsxvasaiyx394t.png" alt="ACK"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Understanding a protocol is not an easy task, even here we try to simplify this task to the most, focusing only on the connection of the two parts and analyzing the packets involved on this connection. Still knowing the ins and outs of the protocol worth it. Next time I will try to to the same with &lt;strong&gt;UDP&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Until the next time folks 👋.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bibliography"&gt;
  &lt;/a&gt;
  Bibliography
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;em&gt;Practical packet analysis&lt;/em&gt;, third edition by Chris Sanders.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Network Programming with Go Learn to Code Secure and Reliable Network Services from Scratch&lt;/em&gt; by Adam Woodbeck.&lt;/li&gt;
&lt;li&gt;Socket Programming HOWTO. Release 3.7.3rc1. From the Python Standard Library documentation.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://networkengineering.stackexchange.com/questions/12485/window-size-and-ack-number?newreg=b2fb52d5b29844ef8c6ad2f2226cf3a6"&gt;Window size and ACK&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://askubuntu.com/questions/247625/what-is-the-loopback-device-and-how-do-i-use-it#:~:text=The%20loopback%20device%20is%20a,running%20on%20the%20local%20machine"&gt;Loopback Ubuntu&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.cs.miami.edu/home/burt/learning/Csc524.032/notes/tcp_nutshell.html#:~:text=The%20sequence%20number%20is%20the,the%20receiver%20expects%20to%20receive"&gt;TCP in a nutshell&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>linux</category>
      <category>python</category>
      <category>networking</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What is BEM in CSS?</title>
      <author>Salma Alam-Naylor</author>
      <pubDate>Tue, 11 May 2021 18:04:57 +0000</pubDate>
      <link>https://dev.to/whitep4nth3r/what-is-bem-in-css-43c7</link>
      <guid>https://dev.to/whitep4nth3r/what-is-bem-in-css-43c7</guid>
      <description>&lt;p&gt;Have you ever worked on an application with one huge CSS file and found that when you changed a style rule in one place, something unexpected happened somewhere else? I had this problem &lt;em&gt;a lot&lt;/em&gt; in my early days of front end development. It was frustrating! So what can you do to stop this from happening?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-need-to-scope-your-style-rules"&gt;
  &lt;/a&gt;
  You need to scope your style rules!
&lt;/h2&gt;

&lt;p&gt;To &lt;strong&gt;scope your CSS&lt;/strong&gt; means to encapsulate style rules in a systematic way so that they apply to one particular chunk of HTML only. CSS-in-JS solutions such as &lt;a href="https://styled-components.com/"&gt;Styled Components&lt;/a&gt; or &lt;a href="https://github.com/css-modules/css-modules"&gt;CSS modules&lt;/a&gt; that ship with front end frameworks have largely solved this problem by scoping styles to your component templates as standard. This means you don't need to worry about classes in one component affecting the styling of another component — even if you use the same class name. Nice!&lt;/p&gt;

&lt;p&gt;But what if you're just starting out, and you want to focus on building out pure CSS in a systematic way without getting bogged down with CSS-in-JS?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-in-pure-css"&gt;
  &lt;/a&gt;
  Working in pure CSS
&lt;/h2&gt;

&lt;p&gt;In order to scope your styles in pure CSS, the aim is to declare your CSS classes specifically and solely for individual HTML components. Style rules should be purposefully verbose and self-documenting, without relying on inheritance or default browser behaviour. This type of system discourages the use of utility classes reused across multiple components because this is where you can run into the problems described at the beginning of the post. If you change the style properties of a utility class used in multiple components, &lt;em&gt;it could affect the layout of your whole application&lt;/em&gt; — sometimes with very undesirable results!&lt;/p&gt;

&lt;p&gt;Let's take a look at how we can harness the power of a system like &lt;strong&gt;BEM&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-bem-stand-for"&gt;
  &lt;/a&gt;
  What does BEM stand for?
&lt;/h2&gt;

&lt;p&gt;BEM stands for &lt;strong&gt;block, element, modifier&lt;/strong&gt;, and it's a super-handy system to help you scope CSS style properties to blocks of HTML. What's more, it encourages you to make your HTML and CSS descriptive and self-documenting — helping identify the purpose and intended function of the CSS classes in the code itself.&lt;/p&gt;

&lt;p&gt;Other class naming conventions exist alongside BEM to help you scope styles when writing HTML and CSS — such as OOCSS and SMACSS. You can even roll your own system! But the most important thing to remember is to use a system, stick to that system, and &lt;em&gt;make it work for you&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So, how do we work with BEM?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#block-element-modifier"&gt;
  &lt;/a&gt;
  Block, element, modifier
&lt;/h2&gt;

&lt;p&gt;Let's take a look at the building blocks of BEM.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#block-a-chunk-of-html-to-which-you-want-to-scope-styles"&gt;
  &lt;/a&gt;
  Block: a chunk of HTML to which you want to scope styles
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.block&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#element-any-element-inside-that-block-namespaced-with-your-block-name"&gt;
  &lt;/a&gt;
  Element: any element inside that block, namespaced with your block name
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.block__elementOne&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.block__elementTwo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#modifier-a-flag-to-add-styles-to-an-element-without-creating-a-separate-css-class"&gt;
  &lt;/a&gt;
  Modifier: a flag to add styles to an element, without creating a separate CSS class
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.block__elementOne--modifier {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#bem-syntax-conventions"&gt;
  &lt;/a&gt;
  BEM syntax conventions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use one or two underscores to separate the block name from the element name&lt;/li&gt;
&lt;li&gt;Use one or two dashes to separate the element name and its modifier&lt;/li&gt;
&lt;li&gt;Use descriptive class names in camelCase&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#bem-in-context"&gt;
  &lt;/a&gt;
  BEM in context
&lt;/h2&gt;

&lt;p&gt;In context, your HTML using the above class names might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"block"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"block__elementOne"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This is an element inside a block.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"block__elementOne block__elementOne--modifier"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This is an element inside a block, with a modifier.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In a real-life example, with more realistic class names, this might look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container__paragraph"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This is a paragraph inside a container.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container__paragraph container__paragraph--bold"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    This is a paragraph inside a container, with a modifier that adds bold styling.
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the fully-declarative approach, where you don't rely on inheritance or default browser styles, your CSS classes might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container__paragraph&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Helvetica&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container__paragraph--bold&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how any default browser behaviour we might take for granted has been declared in the above classes — such as &lt;code&gt;display: block&lt;/code&gt; on the &lt;code&gt;.container &amp;lt;div&amp;gt;&lt;/code&gt; element. This is an extremely useful way to ensure that if you need to switch up the HTML elements in your components — for example swapping the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; (default &lt;code&gt;display: block&lt;/code&gt;) for a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; (default &lt;code&gt;display: inline&lt;/code&gt;) in the above example — the resulting styles of your components are not affected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;Using BEM is not going to solve &lt;em&gt;all&lt;/em&gt; your CSS problems (good luck with centring those &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements in your layouts!), but it can help you take a step in the right direction to making your CSS readable, descriptive, and safe from any unexpected results. Again, the most important thing to remember is to use a system, stick to that system, and &lt;em&gt;make it work for you&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Check out my latest YouTube video that supports this post. Subscribe for more regular front end web development tips!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/SND9SDdY0UM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And remember — build stuff, learn things, love what you do!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>CCS: Call for Papers</title>
      <author>Pachi 🪐 (she/her/ela)</author>
      <pubDate>Tue, 11 May 2021 17:50:11 +0000</pubDate>
      <link>https://dev.to/newrelic/ccs-call-for-papers-f9f</link>
      <guid>https://dev.to/newrelic/ccs-call-for-papers-f9f</guid>
      <description>&lt;p&gt;Hello and welcome back to our Content Creation Series!&lt;br&gt;
Today we will be talking about Call for Papers. What is a call for paper you ask?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It is your ticket to speak in a conference!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nowadays with most events happening online, you can apply to speak in any conference as long as you speak the language. Public speaking is a great way to create not only content, but connections as well.&lt;/p&gt;

&lt;p&gt;Public speaking was one of my 2020 goals, but not on the top list because the idea of actually doing it was &lt;em&gt;scary&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;But when my favorite conference, &lt;a href="https://codelandconf.com/"&gt;Codeland&lt;/a&gt; opened their call for papers, I really wanted to give it a try.&lt;/p&gt;

&lt;p&gt;Did I get accepted? &lt;strong&gt;Nope,&lt;/strong&gt; also, they went all online.&lt;/p&gt;

&lt;p&gt;But I learned a lot in the process and more after, and I wanted to share some advice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-dont-have-to-be-an-expert"&gt;
  &lt;/a&gt;
  You don't have to be an Expert
&lt;/h2&gt;

&lt;p&gt;And this is usually the first thing that stops us. Like, I am not good enough at anything, so what will I talk about?&lt;/p&gt;

&lt;p&gt;Truth is, there will be always someone that knows more than you, but guess what? It goes the other way around too! People start in tech every day, so there is always someone learning from 0 and they may learn from you.&lt;/p&gt;

&lt;p&gt;Don't think about what you are an expert of, think in the lines of what you are passionate about, what are you comfortable with, what would you like to share?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#brainstorm"&gt;
  &lt;/a&gt;
  Brainstorm
&lt;/h2&gt;

&lt;p&gt;Now, the first actual step is the Brainstorm.&lt;/p&gt;

&lt;p&gt;I know it seems obvious, but we often overthink this.&lt;/p&gt;

&lt;p&gt;So here is a little exercise:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Get a pen and paper (yes, the real stuff),&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Put a timer on for 15 minutes,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write down ANYTHING and everything that comes in mind that you could possibly talk about.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-Try to have at least 20 items on your list, but the more the merrier friend!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remember, you don't have to be a PRO.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You may even use something You would like to learn more about, and working on this talk/workshop will help you to learn more about it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In case you need some help, here are some inspiring questions:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What got you into Programming?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What keeps you in it?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What do you love about it?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What do you want to learn next?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What are you learning currently?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What sorts of things do you love sharing with others about Programming?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What cool things have you built?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Which tools do you use all the time?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#classifying-your-ideas-and-picking-the-topic"&gt;
  &lt;/a&gt;
  Classifying your ideas and picking THE topic
&lt;/h2&gt;

&lt;p&gt;Okay, so now you have a nice long list full of ideas.&lt;br&gt;
&lt;a href="https://i.giphy.com/media/lx7AtejahSmgIWmLX5/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/lx7AtejahSmgIWmLX5/giphy.gif" alt="Person making a decision"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good ideas, random ideas, bad ideas... &lt;br&gt;
I bet some don't even make much sense at all and that is OK, that is why we brainstorm to begin with.&lt;/p&gt;

&lt;p&gt;But Pachi, now I have a gigantic list, how do I choose?&lt;/p&gt;

&lt;p&gt;How, indeed?&lt;/p&gt;

&lt;p&gt;Now you can get your laptop out if you want, or just keep the pen and paper, either is fine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We are going to classify your ideas.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First, let's write out the ideas you think are bad ideas or the ones that don't make much sense.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now write down the ones that you think are good and you feel can actually lead somewhere.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Last but not least, what is left? Probably topics you can improve or work in the near future. &lt;strong&gt;Save those.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How many "good" ideas do you have?&lt;/p&gt;

&lt;p&gt;If you have one or two, congrats, &lt;strong&gt;you have found your Topic&lt;/strong&gt; if not...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choosing-based-on-where-you-wanna-present-it"&gt;
  &lt;/a&gt;
  Choosing based on where you wanna present it
&lt;/h2&gt;

&lt;p&gt;If you have more than that, we may still want to narrow it down.&lt;/p&gt;

&lt;p&gt;For that, let's now think about the conference you wanna speak.&lt;/p&gt;

&lt;p&gt;For the sake of this example, Codeland is the conference, and we will focus on Talk rather than a workshop.&lt;/p&gt;

&lt;p&gt;Let's go to their website, check their CFP and see what they are looking for:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Talks are 15 minutes. Pick from our themes below:&lt;br&gt;
&lt;strong&gt;Be Amazed&lt;/strong&gt;&lt;br&gt;
Exciting applications for new (non-proprietary) technologies.&lt;br&gt;
&lt;strong&gt;The Big Picture&lt;/strong&gt;&lt;br&gt;
Thought-provoking stories about how code is affecting society&lt;br&gt;
&lt;strong&gt;Deep Dive&lt;/strong&gt;&lt;br&gt;
Dives into fundamental concepts that could affect how we think about software development.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So now we know that the talks are 15 minutes and have an idea of what they are looking for. Which of our topics fits in? And from those, which one can you talk more comfortably about?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And ta daaaan, you have your topic! YEY!!!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-review"&gt;
  &lt;/a&gt;
  Let's review
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;We brainstorm and come up with as many ideas as we can, even if some are terrible, that is ok (check that list of questions for extra help), &lt;/li&gt;
&lt;li&gt;Classify those ideas, and see what you can work with right now,&lt;/li&gt;
&lt;li&gt;Think about where you want to present, and see which of your ideas fit their requirements and audience,&lt;/li&gt;
&lt;li&gt;Choose the one topic you will work with! (&lt;em&gt;Save the rest for later&lt;/em&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In conclusion
&lt;/h2&gt;

&lt;p&gt;All you need to get started is a topic!&lt;/p&gt;

&lt;p&gt;I hope this will help you to find the one!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Yey, I am soo happy for you.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/XbxZ41fWLeRECPsGIJ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/XbxZ41fWLeRECPsGIJ/giphy.gif" alt="happy child"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are still in doubt in between a few, feel free to shout out and maybe I can help you to validate your ideas.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#speaking-of-conferences"&gt;
  &lt;/a&gt;
  Speaking of conferences...
&lt;/h1&gt;

&lt;p&gt;I will be speaking on Future Stack this Month, and I would love for you to come watch! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/futurestack-relicans"&gt;FutureStack 2021&lt;/a&gt; is a free, online conference where New Relic is bringing together Data Nerds to learn, share, and get inspired about observability — while we have fun! &lt;br&gt;
&lt;a href="https://bit.ly/futurestack-relicans"&gt;You can sign up here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Xoxo,&lt;/p&gt;

&lt;p&gt;Pachi&lt;/p&gt;

</description>
      <category>devrel</category>
      <category>events</category>
      <category>career</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
