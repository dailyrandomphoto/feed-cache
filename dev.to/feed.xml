<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Finding shortest social connection path</title>
      <author>Santhosh Balasa</author>
      <pubDate>Fri, 25 Jun 2021 15:53:35 +0000</pubDate>
      <link>https://dev.to/sbalasa/finding-path-in-graph-4kp8</link>
      <guid>https://dev.to/sbalasa/finding-path-in-graph-4kp8</guid>
      <description>&lt;p&gt;Human connections are like networks, I know someone, and they know someone else etc, It could be friendship, relationship etc. &lt;/p&gt;

&lt;p&gt;Let's assume that I need to find the shortest social connection path from me to Queen of England.&lt;/p&gt;

&lt;p&gt;We represent this in a graph format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{'ali': ['mo'],
 'angela': ['queen', 'anna'],
 'anna': [],
 'dave': [],
 'dog': ['liea', 'dave'],
 'jimbo': [],
 'lee': [],
 'liea': ['lee'],
 'me': ['mum', 'dog', 'teacher'],
 'mo': [],
 'mum': ['angela', 'liea'],
 'queen': [],
 'teacher': ['ali', 'jimbo']}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now lets find the shortest social connection path:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def find_path(start, end, graph, path=[]):
    path = path + [start]
    if start == end:
        return path
    if start not in graph:
        return None
    for node in graph[start]:
        if node not in path:
            newpath = find_path(node, end, graph, path)
            if newpath:
                return path
    return None
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; find_path("me", "queen", graph)
['me', 'mum', 'angela', 'queen']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This solution is loosely based on bread-first search graph algorithm to find the shortest path.&lt;/p&gt;

</description>
      <category>algorithms</category>
    </item>
    <item>
      <title>I was gone from tech social media for almost half a year. Here is why. (Yes, it was burnout.)</title>
      <author>Mateusz Podlasin</author>
      <pubDate>Fri, 25 Jun 2021 15:46:16 +0000</pubDate>
      <link>https://dev.to/mpodlasin/i-was-gone-from-tech-social-media-for-almost-half-a-year-here-is-why-yes-it-was-burnout-44ia</link>
      <guid>https://dev.to/mpodlasin/i-was-gone-from-tech-social-media-for-almost-half-a-year-here-is-why-yes-it-was-burnout-44ia</guid>
      <description>&lt;p&gt;I've posted my last tech article on January 24th, 2021.&lt;/p&gt;

&lt;p&gt;I've made my last tweet on January 28th.&lt;/p&gt;

&lt;p&gt;Since then I became silent for almost half a year.&lt;/p&gt;

&lt;p&gt;This article is very important to me because I want to achieve a few things with it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Explain why I was gone for so long.&lt;/li&gt;
&lt;li&gt;Use it as an opportunity to talk about an &lt;em&gt;extreme&lt;/em&gt; burnout and how to fight it.&lt;/li&gt;
&lt;li&gt;Test with this article if I even want to go back to writing tech-related content.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you've ever experienced - or are currently experiencing - burnout, work-related depression, or anything similar, you might find this article relatable. You won't find easy answers in it, because I don't have them. But it may give you some ideas and suggestions to explore further on your own. At least I hope.&lt;/p&gt;

&lt;p&gt;So let's begin!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-happened"&gt;
  &lt;/a&gt;
  What happened?
&lt;/h1&gt;

&lt;p&gt;Instead of turning this section into an overly long, verbose description of the events, let's focus on the timeline more. I find it quite revealing how things had progressed:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;January 11th, 2021&lt;/strong&gt; - I am making a Twitter thread about burnout. &lt;/p&gt;

&lt;p&gt;This is fascinating to me because at that moment I am still convinced that I am completely and absolutely fine. And yet you can see that my brain is already circulating around the topic of burnout.&lt;/p&gt;

&lt;p&gt;It's as if it is trying to warn me: "man, you have to slow down, otherwise I am going into a shutdown mode soon!".&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;January 14th&lt;/strong&gt; - I am making a Twitter thread about my recent failures related to trying to get into Machine Learning.&lt;/p&gt;

&lt;p&gt;This one is less obvious, but you can still see that my brain continued to focus on negative topics at that time. Burnout, failure, and depression were clearly on my mind. &lt;/p&gt;

&lt;p&gt;And yet, again, at that point I sincerely believed I am "A-okay", not seeing the storm looming just above my head.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;January 24th&lt;/strong&gt; - I am publishing a tech article - the last one in a 3-part series.&lt;/p&gt;

&lt;p&gt;I explicitly state on Twitter that this one was a slog to finish. It's the first article that felt like a pain to get done. I felt no joy in the process and was no longer interested in the topics described in the series.&lt;/p&gt;

&lt;p&gt;Note also that at that time I started making YouTube videos associated with the articles, covering the same concepts in a video form.&lt;/p&gt;

&lt;p&gt;The sheer amount of work - creating an article &lt;em&gt;and&lt;/em&gt; a video almost every week - was so big, that I was basically working all the time. I was spending 8 hours coding at my day job, and then, after the day job was done, I was creating programming-related content.&lt;/p&gt;

&lt;p&gt;So the structure of my day was:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;wake up&lt;/li&gt;
&lt;li&gt;code&lt;/li&gt;
&lt;li&gt;have a meeting about code&lt;/li&gt;
&lt;li&gt;code&lt;/li&gt;
&lt;li&gt;eat crappy takeaway&lt;/li&gt;
&lt;li&gt;write about code&lt;/li&gt;
&lt;li&gt;record talking about code&lt;/li&gt;
&lt;li&gt;sleep&lt;/li&gt;
&lt;li&gt;repeat&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Absolutely unsustainable. And yet even at that point - January 24th - I mostly believed that I am okay. Maybe less motivated and a bit more tired than usual, but nothing crazy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;February 2nd&lt;/strong&gt; - my team leader writes to me: "Hey I've noticed you seem less energetic &amp;amp; cheerful than you usually are. Is everything going alright? I'm here if there's anything you would like to share."&lt;/p&gt;

&lt;p&gt;I am essentially brushing off his question, saying that I indeed felt less motivated recently, but I will probably feel better after resting on the weekend. &lt;/p&gt;

&lt;p&gt;Oh, how wrong was I...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;February 8th&lt;/strong&gt; - Monday. I wake up extremely late. Around 3 pm. And I still can't get out of bed. I am just laying there, unable to move at all. Complete shutdown. &lt;/p&gt;

&lt;p&gt;I guess my brain incapacitated me to prevent me from continuing my insane work routine.&lt;/p&gt;

&lt;p&gt;I sleep a bit more, wake up at 5 pm. Since it's winter, it's already getting dark. I am still unable to perform any meaningful tasks. I can't even get out of the bed and wash myself. &lt;/p&gt;

&lt;p&gt;I don't really remember the rest of that day very well. It's likely that I just turned on YouTube or Netflix and that's how I finished the day.&lt;/p&gt;

&lt;p&gt;I provided no info - or even sign of life for that matter - to my team or managers, even though it was a regular workday.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;February 9th&lt;/strong&gt; - Tuesday. The same situation. Waking up late. Not being able to move and do anything meaningful. No shower. No food. Just laying there.&lt;/p&gt;

&lt;p&gt;I manage to motivate myself to contact my boss and ask him for an unpaid leave till the end of the week.&lt;/p&gt;

&lt;p&gt;Everyone at work is super concerned with my situation - I am having conversations with a few people, some on Slack, some on Zoom. Thankfully actually getting a week off turns out to not be a problem at all.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-i-got-out-of-my-burnout"&gt;
  &lt;/a&gt;
  How I got out of my burnout
&lt;/h1&gt;

&lt;p&gt;So I hope that by now you realize just how serious my situation was.&lt;/p&gt;

&lt;p&gt;Burnout is a popular word recently, used for a wide variety of conditions. But you can see that in my case it wasn't just simply feeling a bit less motivated or something similar.&lt;/p&gt;

&lt;p&gt;I literally couldn't move or perform the most basic life functions, like cleaning myself, preparing a meal, or even going for a walk.&lt;/p&gt;

&lt;p&gt;I was in some deep, deep s...&lt;/p&gt;

&lt;p&gt;At that point, I was luckily very much aware of the severity of my situation (hard not to be, I guess). &lt;/p&gt;

&lt;p&gt;During my week off I decided to deliberately stay away from anything tech or programming related. No coding, no writing about coding, no twitting about coding. No tech social media at all. Even such little thing as browsing Hacker News - absolutely forbidden.&lt;/p&gt;

&lt;p&gt;I was hoping that this cold turkey tech detox would help. But I was also prepared to seek professional help if after a week I wouldn't feel any better.&lt;/p&gt;

&lt;p&gt;Luckily I did.&lt;/p&gt;

&lt;p&gt;A week later I communicated to my boss that I feel well enough to at least attempt coming back.&lt;/p&gt;

&lt;p&gt;I still took things very, very slow, however. After I came back, I only did coding for work - no side projects or anything like that. &lt;/p&gt;

&lt;p&gt;I was also taking only simpler tasks - the ones I knew I could implement fairly fast and with minimal effort. A complex, big new feature? - pass. A tricky bug to investigate? - pass.&lt;/p&gt;

&lt;p&gt;I also kept staying away from tech social media - both producing content and consuming it. I stopped coding or even thinking about coding after work. Instead, I focused on my non-tech hobbies, which I previously neglected, such as photography.&lt;/p&gt;

&lt;p&gt;And I believe this last thing the most important decision that contributed to my mental health and well-being in the long run.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#where-i-am-now-and-whats-next"&gt;
  &lt;/a&gt;
  Where I am now and what's next?
&lt;/h1&gt;

&lt;p&gt;Avoiding tech social media and coding beyond the day job worked for me so well, that I did it for nearly half a year. I haven't coded a single side project in that time. I didn't create or read a single tech article (unless it was at work and necessary to do my job). Hell, I haven't even made a single tweet since January!&lt;/p&gt;

&lt;p&gt;And during those last few months, I felt absolutely... amazing. I am now more energetic and effective at my work than before my burnout. I am cranking out issue after issue, solving difficult bugs, contributing to architectural decisions. If you'd see me at my day job, you would never, ever guess that I was in such a bad place just a few months ago.&lt;/p&gt;

&lt;p&gt;Writing this article is the first time I am breaking my "no coding-related activities in my spare time" unspoken rule since my sudden burnout attack.&lt;/p&gt;

&lt;p&gt;If I am being honest, it feels both weird and scary to write this article.&lt;/p&gt;

&lt;p&gt;I know that I have this overly ambitious, creative bug in me. And I am terrified I am awaking it again with this article. I am seriously scared that writing and publishing this single article will again send me on a path of unsustainable workloads and being consumed by programming.&lt;/p&gt;

&lt;p&gt;It seems that some people are more resilient than others and can handle more stress and higher workloads. I see people who work 10 hours a day, create side projects, and write articles regularly on top of that. For someone, it might be funny that I burned out so badly only because I wrote a few articles after work.&lt;/p&gt;

&lt;p&gt;Maybe that's the ultimate lesson though. You have to know yourself and be aware of how much you can handle. And stay honest with yourself to not start biting more than you can chew. &lt;/p&gt;

&lt;p&gt;That's why recreating the timeline of my burnout was so important to me. You can see that as early as few weeks before an actual burnout there were already warning signs present, which I completely ignored. I should have paid more attention to what my brain was telling me.&lt;/p&gt;

&lt;p&gt;So what's next? I don't know. I can say that writing this article felt very good. I guess it was something that I just needed to get off my chest.&lt;/p&gt;

&lt;p&gt;Will I go back to creating actual tech content, however? It's possible. Especially if I manage to find a sustainable tempo and topics which I enjoy writing about.&lt;/p&gt;

&lt;p&gt;But it's also entirely possible that this is the last article I'll ever write.&lt;/p&gt;

&lt;p&gt;And that's fine too.&lt;/p&gt;

&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@jluebke?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Justin Luebke&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/crossroads?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>mentalhealth</category>
      <category>productivity</category>
      <category>career</category>
    </item>
    <item>
      <title>JSConfetti is now could be downloaded from CDN 🎉</title>
      <author>Vladimir Nikitin</author>
      <pubDate>Fri, 25 Jun 2021 15:29:52 +0000</pubDate>
      <link>https://dev.to/loonywizard/jsconfetti-is-now-could-be-downloaded-from-cdn-3i10</link>
      <guid>https://dev.to/loonywizard/jsconfetti-is-now-could-be-downloaded-from-cdn-3i10</guid>
      <description>&lt;p&gt;Hi everyone!&lt;/p&gt;

&lt;p&gt;Wanted to share, that my open-source library &lt;a href="https://github.com/loonywizard/js-confetti"&gt;JSConfetti&lt;/a&gt; is now could be downloaded from CDN:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/js-confetti@latest/dist/js-confetti.browser.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, &lt;code&gt;JSConfetti&lt;/code&gt; class could be accessed as global variable, and you can fire confetti by calling method &lt;code&gt;addConfetti()&lt;/code&gt; on JSConfetti class instance&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jsConfetti&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;JSConfetti&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;jsConfetti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addConfetti&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;JSConfetti works without any config, but could be configurable, check out &lt;a href="https://github.com/loonywizard/js-confetti"&gt;documentation on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Links: &lt;a href="https://github.com/loonywizard/js-confetti"&gt;GitHub&lt;/a&gt; | &lt;a href="https://www.npmjs.com/package/js-confetti"&gt;NPM&lt;/a&gt; | &lt;a href="https://loonywizard.github.io/js-confetti/"&gt;Library Website&lt;/a&gt; | &lt;a href="https://codesandbox.io/s/confetti-vanilla-js-r5kqi"&gt;CodeSandbox Playground&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>frontend</category>
    </item>
    <item>
      <title>How to Deploy a Python Flask App on Heroku Using Docker</title>
      <author>Evan J</author>
      <pubDate>Fri, 25 Jun 2021 15:19:42 +0000</pubDate>
      <link>https://dev.to/ejach/how-to-deploy-a-python-flask-app-on-heroku-using-docker-mpc</link>
      <guid>https://dev.to/ejach/how-to-deploy-a-python-flask-app-on-heroku-using-docker-mpc</guid>
      <description>&lt;p&gt;Hello!&lt;br&gt;
Today I will demonstrate how to deploy a containerized Python Flask application to Heroku using Docker.&lt;br&gt;
This tutorial is separated into four parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#prerequisites"&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#creating-the-flask-application-using-python"&gt;Creating the Flask application using Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#containerizing-the-application-using-docker"&gt;Containerizing the application using Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploying-the-container-to-heroku"&gt;Deploying the container to Heroku&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/Flask/"&gt;Flask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://docs.docker.com/get-docker/"&gt;Docker&lt;/a&gt; installation&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://signup.heroku.com/"&gt;Heroku&lt;/a&gt; Account / &lt;a href="https://devcenter.heroku.com/articles/heroku-cli"&gt;Heroku CLI&lt;/a&gt; installation&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#creating-the-flask-application-using-python"&gt;
  &lt;/a&gt;
  Creating the Flask application using Python
&lt;/h3&gt;

&lt;p&gt;We will be creating a "Hello World!" application to maintain simplicity.&lt;br&gt;
The file structure by the end of this tutorial will look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├───FlaskApp
  └───app.py           # Our main application
  └───main.py          # Used by gunicorn to run the app
  └───requirements.txt # The packages we will be using
  └───Dockerfile       # Used to create the Docker container
  └───Procfile         # Used to deploy the container to Heroku
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To start out, create an empty directory using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo mkdir FlaskApp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And &lt;code&gt;cd&lt;/code&gt; into the directory using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd FlaskApp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create two files called &lt;code&gt;app.py&lt;/code&gt; and &lt;code&gt;requirements.txt&lt;/code&gt;.&lt;br&gt;
In requirements.txt, insert the line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;flask==2.0.1
gunicorn==20.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, to install the required packages, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then open up &lt;code&gt;app.py&lt;/code&gt; in your favorite code editor and add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#Import the flask module
from flask import Flask

app = Flask(__name__)

@app.route('/')
def hello_world():
    statement = 'Hello World!'
    return statement

if __name__ == '__main__':
    #Calls the run method, runs the app on port 5000
    app.run(host='0.0.0.0', port='5000')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, create a file called &lt;code&gt;main.py&lt;/code&gt; and add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from app import app

# Gets the app from app.py and runs it
if __name__ == "__main__":
    app.run()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run the program using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ gunicorn --bind 0.0.0.0:5000 main:app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you should get an output that looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[2021-06-25 10:33:51 -0400] [1607] [INFO] Starting gunicorn 20.1.0
[2021-06-25 10:33:51 -0400] [1607] [INFO] Listening at: http://0.0.0.0:5000 (1607)
[2021-06-25 10:33:51 -0400] [1607] [INFO] Using worker: sync
[2021-06-25 10:33:51 -0400] [1609] [INFO] Booting worker with pid: 1609
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After accessing the URL that was provided upon executing at &lt;code&gt;http://yourip:5000&lt;/code&gt;, the page should look something like:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FwPz-9Us--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e064agz7vhti6c22pigi.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FwPz-9Us--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e064agz7vhti6c22pigi.PNG" alt="Example Output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that your Python Application is up and running, let's go over how to containerize it using Docker.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#containerizing-the-application-using-docker"&gt;
  &lt;/a&gt;
  Containerizing the application using Docker
&lt;/h3&gt;

&lt;p&gt;In your &lt;code&gt;FlaskApp&lt;/code&gt; directory, create a file with &lt;em&gt;no file extension&lt;/em&gt; called &lt;code&gt;Dockerfile&lt;/code&gt; and add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#Create a ubuntu base image with python 3 installed.
FROM python:3.8

#Set the working directory
WORKDIR /

#copy all the files
COPY . .

#Install the dependencies
RUN apt-get -y update
RUN apt-get update &amp;amp;&amp;amp; apt-get install -y python3 python3-pip
RUN pip3 install -r requirements.txt

#Expose the required port
EXPOSE 5000

#Run the command
CMD gunicorn main:app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this, build the Docker image by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker build -t flask-app .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then run it using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker run flask-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you should get the same output as if you were running it normally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2021-06-25T15:08:47.958205+00:00 app[web.1]: [2021-06-25 15:08:47 +0000] [5] [INFO] Starting gunicorn 20.1.0
2021-06-25T15:08:47.958983+00:00 app[web.1]: [2021-06-25 15:08:47 +0000] [5] [INFO] Listening at: http://0.0.0.0:5000 (5)
2021-06-25T15:08:47.958983+00:00 app[web.1]: [2021-06-25 15:08:47 +0000] [5] [INFO] Using worker: sync
2021-06-25T15:08:47.962897+00:00 app[web.1]: [2021-06-25 15:08:47 +0000] [7] [INFO] Booting worker with pid: 7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you should get the expected output at the given IP address at &lt;code&gt;http://yourip:5000&lt;/code&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FwPz-9Us--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e064agz7vhti6c22pigi.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FwPz-9Us--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e064agz7vhti6c22pigi.PNG" alt="Example Output"&gt;&lt;/a&gt;&lt;br&gt;
Congratulations! You have successfully created a Flask application and containerized it using Docker!&lt;br&gt;
Now we will go over how to deploy this container to Heroku using their container registry.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#deploying-the-container-to-heroku"&gt;
  &lt;/a&gt;
  Deploying the container to Heroku
&lt;/h3&gt;

&lt;p&gt;Given that the Heroku CLI is installed as stated in the &lt;a href="#prerequisites"&gt;prerequisites&lt;/a&gt;, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ heroku login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you will be prompted to enter your Heroku credentials.&lt;br&gt;
Once logged in, create an application by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ heroku create &amp;lt;your_app_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, login to the Heroku container registry by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ heroku container:login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which should produce:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Login Succeeded
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In your &lt;code&gt;FlaskApp&lt;/code&gt; directory, create a file with &lt;em&gt;no extension&lt;/em&gt; called &lt;code&gt;Procfile&lt;/code&gt; and add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;web: gunicorn main:app 0.0.0.0:$PORT
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, in our &lt;code&gt;app.py&lt;/code&gt; file, we need to add/modify the following lines marked with arrows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Import OS to get the port environment variable from the Procfile
import os # &amp;lt;-----
# Import the flask module
from flask import Flask

# Create a Flask constructor. It takes name of the current module as the argument
app = Flask(__name__)

@app.route('/')
def hello_world():
    statement = 'Hello World!'
    return statement


# Create the main driver function
if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000)) # &amp;lt;-----
    app.run(host='0.0.0.0', port=port)       # &amp;lt;-----
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After editing the file, we must push the container to Heroku using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ heroku container:push web --app &amp;lt;your_app_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After your app's container builds, release it to Heroku using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ heroku container:release web --app &amp;lt;your_app_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which will produce the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Releasing images web to &amp;lt;your_app_name&amp;gt;... done
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once it is released, you can access the logs of your new container using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ heroku logs --tail --app &amp;lt;your_app_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you should see something along the lines of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2021-06-25T15:08:45.662062+00:00 heroku[web.1]: Starting process with command `/bin/sh -c gunicorn\ main:app`
2021-06-25T15:08:47.958205+00:00 app[web.1]: [2021-06-25 15:08:47 +0000] [5] [INFO] Starting gunicorn 20.1.0
2021-06-25T15:08:47.958983+00:00 app[web.1]: [2021-06-25 15:08:47 +0000] [5] [INFO] Listening at: http://0.0.0.0:34683 (5)
2021-06-25T15:08:47.958983+00:00 app[web.1]: [2021-06-25 15:08:47 +0000] [5] [INFO] Using worker: sync
2021-06-25T15:08:47.962897+00:00 app[web.1]: [2021-06-25 15:08:47 +0000] [7] [INFO] Booting worker with pid: 7
2021-06-25T15:08:48.409823+00:00 heroku[web.1]: State changed from starting to up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you should now be able to access your application through your new app's URL with the expected output of:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cmiEBtn2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qf1kc2iwyo7daanohdej.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cmiEBtn2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qf1kc2iwyo7daanohdej.PNG" alt="Heroku Output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! This tutorial has taught you how to create a Python Flask application, containerize it, and then deploy it to Heroku.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>heroku</category>
      <category>python</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>8 Amazing Instant Button Hover Effect </title>
      <author>Nikhil Bobade </author>
      <pubDate>Fri, 25 Jun 2021 15:07:26 +0000</pubDate>
      <link>https://dev.to/nikhil27b/8-amazing-instant-button-hover-effect-2kf9</link>
      <guid>https://dev.to/nikhil27b/8-amazing-instant-button-hover-effect-2kf9</guid>
      <description>&lt;p&gt;Hello,&lt;/p&gt;

&lt;p&gt;Today I have written post about the 8 Amazing Instant Button Hover Effect With using HTML &amp;amp; CSS. This is a very useful effect you can use that in your code. I hope you like this also comments about your thoughts.&lt;br&gt;
For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#checkout-recent-post-"&gt;
  &lt;/a&gt;
  Checkout recent post :
&lt;/h5&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/nikhil27b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L13Hplw---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--DVAuMQ0j--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/481802/ff897af1-c333-4e04-8f08-d6d1356a1c14.jpeg" alt="nikhil27b"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/nikhil27b/amazing-button-animation-using-html-js-2ga1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Amazing Button Animation Using HTML &amp;amp; JS&lt;/h2&gt;
      &lt;h3&gt;Nikhil Bobade  ・ Jun 22 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/ZEePZrg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;


&lt;div class="instagram-position"&gt;
  &lt;iframe id="instagram-liquid-tag" src="https://www.instagram.com/p/CPn2eUwBTUp/embed/captioned"&gt;
  &lt;/iframe&gt;
  
&lt;/div&gt;


</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Where do You Belong in Tech</title>
      <author>Firangiz Ganbarli</author>
      <pubDate>Fri, 25 Jun 2021 14:58:14 +0000</pubDate>
      <link>https://dev.to/firangizg/where-do-you-belong-in-tech-29b7</link>
      <guid>https://dev.to/firangizg/where-do-you-belong-in-tech-29b7</guid>
      <description>&lt;p&gt;From what I have seen, majority of the blog posts on dev.to are written by web devs. That may be because of the increasing popularity of it, however, there are dozens of other career possibilities within the tech industry and I would like to introduce them in this blog post so that you too can explore different areas of the technology world. &lt;/p&gt;

&lt;p&gt;And this is not an exhausting list, there are many more careers that I have not included. Research further if interested.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#list-of-careers"&gt;
  &lt;/a&gt;
  List of Careers
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;      Cyber Security Engineer&lt;/li&gt;
&lt;li&gt;      Front-End Web Developer&lt;/li&gt;
&lt;li&gt;      Backend Web Developer&lt;/li&gt;
&lt;li&gt;      UI/UX Designer&lt;/li&gt;
&lt;li&gt;      DevOps&lt;/li&gt;
&lt;li&gt;      Mobile Engineer&lt;/li&gt;
&lt;li&gt;      QA Engineer&lt;/li&gt;
&lt;li&gt;      Product Manager&lt;/li&gt;
&lt;li&gt;      Data Scientist &lt;/li&gt;
&lt;li&gt;     Embedded Software Engineer&lt;/li&gt;
&lt;li&gt;  Systems Administrator&lt;/li&gt;
&lt;li&gt;  Database Administrator &lt;/li&gt;
&lt;li&gt;  Networking Engineer&lt;/li&gt;
&lt;li&gt;  Hardware Engineer&lt;/li&gt;
&lt;li&gt;  OS Developer&lt;/li&gt;
&lt;li&gt;  Video Game Developer&lt;/li&gt;
&lt;li&gt;  Technical Account Manager&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#how-to-know-which-one-is-for-you"&gt;
  &lt;/a&gt;
  How to Know Which One is For You
&lt;/h3&gt;

&lt;p&gt;You can never know for sure unless you have tried it all. But that takes time to experiment, so here is a little tip that helped me. &lt;/p&gt;

&lt;p&gt;Select top 3 from the list above. Now, choose one from them and try out a side project or learn it for a month. If you like it, continue. If you don't, move on to the second. &lt;/p&gt;

&lt;p&gt;If you are done with your top three, rinse and repeat. I still advise you to learn about other fields even if you liked your first selection though. &lt;/p&gt;

&lt;p&gt;Good luck fellas! &lt;/p&gt;

</description>
      <category>beginners</category>
      <category>career</category>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Trigger an AWS Lambda from SNS</title>
      <author>Alex Kates</author>
      <pubDate>Fri, 25 Jun 2021 14:49:21 +0000</pubDate>
      <link>https://dev.to/aws-builders/how-to-trigger-an-aws-lambda-from-sns-4c3a</link>
      <guid>https://dev.to/aws-builders/how-to-trigger-an-aws-lambda-from-sns-4c3a</guid>
      <description>&lt;p&gt;In this post we are going to use the AWS CDK to build an AWS Lambda Function that triggers from an AWS SNS message.&lt;/p&gt;

&lt;p&gt;All of the code &lt;a href="https://github.com/alexkates/how-to-trigger-lambda-from-sns"&gt;can be found in this repository&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;We need to run a few commands to setup our CDK app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;how-to-trigger-lambda-from-sns
&lt;span class="nb"&gt;cd &lt;/span&gt;how-to-trigger-lambda-from-sns
npx cdk init app &lt;span class="nt"&gt;--language&lt;/span&gt; typescript

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should give you the following directory structure.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GjPCpld2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3yf4dh4g8i09ww91719.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GjPCpld2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3yf4dh4g8i09ww91719.png" alt="Directory structure after running the CDK init command"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also make sure you have your AWS CLI configured. For more information follow &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html"&gt;the AWS CLI quickstart guide&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-an-sns-topic"&gt;
  &lt;/a&gt;
  Create an SNS Topic
&lt;/h2&gt;

&lt;p&gt;Install the SNS CDK package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i @aws-cdk/aws-sns
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open &lt;code&gt;lib/how-to-trigger-lambda-from-sns-stack.ts&lt;/code&gt;, add a new SNS topic, and deploy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;sns&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-sns&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;HowToTriggerLambdaFromSnsStack&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stack&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Construct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StackProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;topic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;sns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Topic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;OurSnsTopic&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Our SNS Topic&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nice! Let's deploy the stack.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm run cdk deploy&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-lambda"&gt;
  &lt;/a&gt;
  Create a Lambda
&lt;/h2&gt;

&lt;p&gt;Install the Lambda CDK package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i @aws-cdk/aws-lambda
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Deploying a Lambda function requires bootstrapping your CDK app which gives us an S3 bucket where our Lambda's source code will live. This is a one time operation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run cdk bootstrap
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create src/index.js and paste the following code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Records&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;record&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Record: %j&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;record&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open &lt;code&gt;lib/how-to-trigger-lambda-from-sns-stack.ts&lt;/code&gt;, add a new Lambda function, and deploy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;sns&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-sns&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-lambda&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;HowToTriggerLambdaFromSnsStack&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stack&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Construct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StackProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;topic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;sns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Topic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;OurSnsTopic&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Our SNS Topic&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lambdaFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromAsset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index.handler&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;functionName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SnsMessageHandler&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODEJS_12_X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Deploy again ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run cdk deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may need to confirm some IAM changes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mybku6CA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4hmlx6dwx73y6l6uicxy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mybku6CA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4hmlx6dwx73y6l6uicxy.png" alt="IAM changes after deploying stack with Lambda function"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-the-event-source"&gt;
  &lt;/a&gt;
  Create the Event Source
&lt;/h2&gt;

&lt;p&gt;Install the Lambda Event Sources CDK package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i @aws-cdk/aws-lambda-event-sources
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open lib/how-to-trigger-lambda-from-s3-stack.ts, add a new S3EventSource to the Lambda Function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;sns&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-sns&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-lambda&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;lambdaEventSources&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-lambda-event-sources&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;HowToTriggerLambdaFromSnsStack&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stack&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Construct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StackProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;topic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;sns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Topic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;OurSnsTopic&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Our SNS Topic&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lambdaFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromAsset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index.handler&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;functionName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SnsMessageHandler&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODEJS_12_X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;eventSource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;lambdaEventSources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SnsEventSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;topic&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;lambdaFunction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventSource&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One more deployment ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run cdk deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One last time, you may need to approve IAM changes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8igq6C8g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vc1t36m54ue4v8w4qwbk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8igq6C8g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vc1t36m54ue4v8w4qwbk.png" alt="IAM changes approval after deploying the SNS event source"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h2&gt;

&lt;p&gt;We are going to make use of the AWS CLI to test our stack.&lt;/p&gt;

&lt;p&gt;First, we need the ARN of our SNS topic, which you can get using the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws sns list-topics &lt;span class="nt"&gt;--query&lt;/span&gt; &lt;span class="s2"&gt;"Topics[?contains(TopicArn, 'OurSnsTopic')]"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, using the TopicArn from the previous command, use the AWS CLI to publish a new message to Our SNS Topic. Your topic ARN may vary, but for me this command looks like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws sns publish &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--topic-arn&lt;/span&gt; &lt;span class="s2"&gt;"arn:aws:sns:us-east-2:472331918655:HowToTriggerLambdaFromSnsStack-OurSnsTopic2ED19057-1GAA1XT2U6XXH"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--message&lt;/span&gt; &lt;span class="s2"&gt;"Hello from SNS"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Verify that the Lambda executed by looking in CloudWatch. Find the LogGroup named &lt;code&gt;/aws/lambda/SnsMessageHandler&lt;/code&gt; and open up the latest LogStream. You should see some log messages that look similar to this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yiCBnDkY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w1qwuh60kekg2mcchnsp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yiCBnDkY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w1qwuh60kekg2mcchnsp.png" alt="CloudWatch results after publish a new SNS message"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clean-up"&gt;
  &lt;/a&gt;
  Clean Up
&lt;/h2&gt;

&lt;p&gt;Don't forget to delete your stack when you are finished!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run cdk destroy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks for reading! If you found this useful, please follow me here &lt;br&gt;
&lt;a href="https://dev.to/thealexkates"&gt;https://dev.to/thealexkates&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/thealexkates"&gt;https://twitter.com/thealexkates&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>tutorial</category>
      <category>eventdriven</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Restart your rails server automatically</title>
      <author>Kelly Stannard</author>
      <pubDate>Fri, 25 Jun 2021 14:20:50 +0000</pubDate>
      <link>https://dev.to/kwstannard/restart-your-rails-server-automatically-5g57</link>
      <guid>https://dev.to/kwstannard/restart-your-rails-server-automatically-5g57</guid>
      <description>&lt;p&gt;I have been working on changes to my config files and testing some middleware and it gets tedious trying remembering to stop and restart the server for each change. Enter fswatch to the rescue.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fswatch -o config other/paths | ruby -e '
while (pid=fork{ exec("be rails s") }) &amp;amp;&amp;amp; gets do
  Process.kill("TERM", pid); Process.wait
end'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;fswatch sends a message into the pipe anytime the files change. The -o flag batches all changes found into a single message so that we aren't restarting excessively.&lt;/p&gt;

&lt;p&gt;The ruby process controls the rails subprocess. &lt;code&gt;fork&lt;/code&gt; will create a Ruby subprocess and then &lt;code&gt;exec&lt;/code&gt; replaces the Ruby process with a Rails subprocess. Any time fswatch sees changes, it will send a string into the pipe and ruby picks it up with gets and sends a TERM signal to Rails to shut it down. Once Rails has shut down, we loop back and start a new Rails subprocess.&lt;/p&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
    </item>
    <item>
      <title>Login and Registration Form in HTML and CSS</title>
      <author>codinglabweb</author>
      <pubDate>Fri, 25 Jun 2021 14:11:38 +0000</pubDate>
      <link>https://dev.to/codinglabweb/login-and-registration-form-in-html-and-css-3cb4</link>
      <guid>https://dev.to/codinglabweb/login-and-registration-form-in-html-and-css-3cb4</guid>
      <description>&lt;p&gt;Hello friends, today we are going to learn How to Create a Responsive Login and Registration Form in HTML and CSS. There are a lot of Forms Design that I have created before but, to date, I have not created a login and registration forms together or on one page. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is the Login and Registration Form&lt;/strong&gt;&lt;br&gt;
Login Form means the login page or section where users need to enter their login details like email, phone number, and password. Registration form is the process to register user details to make login details for entry in the particular page or website.  &lt;/p&gt;

&lt;p&gt;In the login form section, we can make two input fields one is for the user email address or phone number and another for password and this is mandatory and in the registration form we have to add some extra input field like the input field of name, phone number, password and other.&lt;/p&gt;

&lt;p&gt;Let's have a look at the image of the Login and Registration Form. There you can see only Login Form but when you click on the Signup now the right side image smoothly flips into the left side then the Signup form appears and Login Form Hides.&lt;/p&gt;

&lt;p&gt;I have made this Responsive Login and Registration Form in HTML and CSS only and I have not used any single code of javascript for building this Login and Registration Form. I promise that you can easily understand all the HTML CSS code that I have used to make this Form.&lt;/p&gt;

&lt;p&gt;To see the real example of this Login and Registration, please do watch the video tutorial of this design. After watching the tutorial you will definitely understand that how HTML and CSS code is working to make this Login and Registration Page Perfectly.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#login-and-registration-form-in-html-and-css-source-code"&gt;
  &lt;/a&gt;
  Login and Registration Form in HTML and CSS | Source Code
&lt;/h1&gt;

&lt;p&gt;You can download all source code from the given link. &lt;a href="https://www.codinglabweb.com/2021/06/login-and-registration-form-in-html-css.html"&gt;Click Here To Download All Source Code&lt;/a&gt;&lt;/p&gt;

</description>
      <category>loginform</category>
      <category>registrationform</category>
      <category>signupform</category>
      <category>htmlcss</category>
    </item>
    <item>
      <title>Software Development Life Cycle: Beginners Guide </title>
      <author>Rishabhraghwendra18</author>
      <pubDate>Fri, 25 Jun 2021 14:04:11 +0000</pubDate>
      <link>https://dev.to/rishabhraghwendra/software-development-life-cycle-beginners-guide-k8p</link>
      <guid>https://dev.to/rishabhraghwendra/software-development-life-cycle-beginners-guide-k8p</guid>
      <description>&lt;p&gt;You may have heard the term Software Development Life Cycle (SDLC) and are curious to know what it means and it’s benefits?&lt;br&gt;
My Blog will provide all that information in a simplified way for the beginners. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is SDLC?&lt;/strong&gt;&lt;br&gt;
SDLC stands for software development life cycle.It’s a systematic process for building software that ensures the quality &amp;amp; correctness of the software build .In simple terms , it’s a planning process before developing the software .&lt;/p&gt;

&lt;p&gt;You may have heard of the quote &lt;em&gt;“Think twice, code once.”&lt;/em&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dHuOwqKx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0y3p08uyzor7barhgsoe.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dHuOwqKx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0y3p08uyzor7barhgsoe.jpg" alt="Think twice code once"&gt;&lt;/a&gt;&lt;br&gt;
It’s true , we should follow this approach and such an approach can be achieved with the help of SDLC.&lt;/p&gt;

&lt;p&gt;We plan each and every step like requirements, coding conventions, design patterns, etc in SDLC . We do so to achieve goals in less time , save money and prevent chaos .&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SDLC Phases&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5esn8dHn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/22wqjhzbpebokzic8jdy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5esn8dHn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/22wqjhzbpebokzic8jdy.jpg" alt="SDLC Phases"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Phase 1: Planning&lt;/strong&gt;&lt;br&gt;
This is the most important or crucial stage of the process . It defines the success or failure of the project . If a project is not thoroughly planned , we are likely to fail to build it.&lt;/p&gt;

&lt;p&gt;Here the senior members take input about the project from the customer , then domain experts analyse it and estimate the cost of the project as well as the risk factors .&lt;/p&gt;

&lt;p&gt;With the help of experts , marketing team and surveys they are able to minimize the risk factors and the cost to the team . &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Phase 2: Defining&lt;/strong&gt;&lt;br&gt;
After the planning phase is complete , now it’s time to document it . This document is called &lt;strong&gt;SRS( Software Requirement Specification )&lt;/strong&gt; .It includes all the product requirements needed during the life cycle process . Later on the SRS is sent to the customer or the market analyst for approval .&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Phase 3: Designing&lt;/strong&gt;&lt;br&gt;
After the approval of the SRS document, a &lt;strong&gt;DDS( Design Document Specification )&lt;/strong&gt; is proposed at this stage. It contains all the architecture (follow &amp;amp; managing of data) and design patterns (paradigms to follow while coding) proposed considering all the requirements and risk factors involved . &lt;/p&gt;

&lt;p&gt;Later on, all the stakeholders review the DDS and select a good fit architecture &amp;amp; pattern for the project . &lt;/p&gt;

&lt;p&gt;DDS contains the data flow structure from different modules (if any) . The more DDS is detailed about every step, the easier the development phase.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Phase 4:Building&lt;/strong&gt;&lt;br&gt;
This is the stage where real fun begins - coding. DDS is sent to developers . Developers follow the layed out patterns in the document.&lt;/p&gt;

&lt;p&gt;It includes tools a developer needs while developing like compiler , interpreter , debugger , etc . It also includes in which high level languages like C, JavaScript , Python,etc  he/she should code .&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Phase 5:Testing&lt;/strong&gt;&lt;br&gt;
We can say it’s a subset of coding . In the real world we follow TDD -  Test Driven Development , it means we test every piece of code that we have written . Same process here is also followed.&lt;/p&gt;

&lt;p&gt;Here each piece of function is tested rigorously . We perform tests on each and every function and part of the application . This helps us to identify bugs , unexpected errors at an early stage . &lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you have testing skills as a developer then you have an edge over other developers so it’s recommended to learn this skill too to get high chances of your resume getting shortlisted.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Phase 6: Deployment &amp;amp; Maintenance&lt;/strong&gt;&lt;br&gt;
After testing (removing each and every bug), your application is ready to be deployed for the public.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Before deploying there is a staging environment where Testers test applications under heavy load but we are not going into much details right now .&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Regular feedback is taken from the public - who are using their application to spot any bug or error that is not spotted in the testing phase . Afterwards the team analyzes the problem and solves the bug and redeploy it .This process of feedback &amp;amp; resolving bugs continues .&lt;/p&gt;

&lt;p&gt;Our newly deployed application is also monitored . It helps us to get insight out how much load we are getting on our application and what should be our next task to manage this load much more efficiently .&lt;/p&gt;

&lt;p&gt;This whole process of SDLC repeatedly  &lt;em&gt;goes-on-and-on&lt;/em&gt;  - forever till the application gets outdated -  adding new features , resolving new bugs , etc.&lt;/p&gt;

&lt;p&gt;Here we have only discussed what SDLC is , it’s benefits and phases . But it’s not the end . There are different models/methodologies we follow in SDLC for eg Agile, Iterative, Waterfall Model, etc . Each of these models have their pros and cons. We will discuss this in the next blog.&lt;/p&gt;

&lt;p&gt;Thanks for reading,&lt;br&gt;
Written with  ❤️ &amp;amp; passion 🔥 by &lt;em&gt;Rishabh Raghwendra&lt;/em&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>sdlc</category>
      <category>softwaredevelopment</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Why I love creating simple languages</title>
      <author>Phu Minh</author>
      <pubDate>Fri, 25 Jun 2021 14:03:01 +0000</pubDate>
      <link>https://dev.to/freakcdev297/why-i-love-creating-simple-languages-3l4m</link>
      <guid>https://dev.to/freakcdev297/why-i-love-creating-simple-languages-3l4m</guid>
      <description>&lt;p&gt;First of all, who am I? I'm just a random coder who like programming languages and love to create some (mostly *esolangs). In the past, I've built some small *esoteric languages which I will mention while we progress through the article.&lt;/p&gt;

&lt;p&gt;(*) Languages that are created for fun, or with mind-challenging rules, or to just be a joke.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-i-like-creating-them"&gt;
  &lt;/a&gt;
  Why I like creating them?
&lt;/h1&gt;

&lt;p&gt;I've always wondered how a programming language just magically works and brings my dreamt projects to reality. Now that I actually try to create one, I have gained a lot of knowledge about how they actually functions. Furthermore, it has come in handy in some of my work (in creating tools and extensions for coders specifically), where I can just copy my old parser or lexer and paste it into the new codebase (lol).&lt;/p&gt;

&lt;p&gt;Or it's just somewhat amazing to proudly say "I created my own programming language".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#esolangs"&gt;
  &lt;/a&gt;
  Esolangs
&lt;/h2&gt;

&lt;p&gt;When talking about esolangs, it's a whole different story. It's just fun coming up with weird and quirky ideas and just throw them into a language. It's also fun making extremely hard ones, sometimes challenges can be interesting :D&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-it-for-your-own-projects"&gt;
  &lt;/a&gt;
  Use it for your own projects
&lt;/h2&gt;

&lt;p&gt;For this section only, I'll target both "you" and "I" as it's kind of an opened thread.&lt;/p&gt;

&lt;p&gt;If you like your own language syntactically or for how it works, or just because it just serves you better in some special cases comparing to ones that are popular, then you can totally use it with little doubts.&lt;br&gt;
In my case, me and my teammates have created "Cassidy", which is basically just C# on the web. It brings safety and precision to our projects.&lt;/p&gt;

&lt;p&gt;Besides, if you just create a superset of another language, then it can stick into the whole codebase without damaging your project anyway, so it's probably usable. &lt;em&gt;Speaking from experiences&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#languages-i-have-created"&gt;
  &lt;/a&gt;
  Languages I have created
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/FreakC-Foundation/FreakC"&gt;FreakC (18+)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nguyenphuminh/Jellyscript"&gt;Jellyscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nguyenphuminh/brainfuckjs"&gt;A brainf*ck implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nguyenphuminh/VNC"&gt;VNC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cassidy (not public)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's all, hope you would share your thoughts in the comment section :D&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>languages</category>
    </item>
    <item>
      <title>What was your win this week?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 25 Jun 2021 14:00:51 +0000</pubDate>
      <link>https://dev.to/devteam/what-was-your-win-this-week-10c6</link>
      <guid>https://dev.to/devteam/what-was-your-win-this-week-10c6</guid>
      <description>&lt;p&gt;Hey there!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Looking back on your week, what was something you're proud of?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All wins count — big or small 🎉&lt;/p&gt;

&lt;p&gt;Examples of 'wins' include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a new project&lt;/li&gt;
&lt;li&gt;Fixing a tricky bug&lt;/li&gt;
&lt;li&gt;Cooking something delicious... or whatever else might spark joy ❤️ &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Congrats on your wins this week!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/5wFUyB8MfaXthrK3OT/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/5wFUyB8MfaXthrK3OT/giphy.gif" alt="Kid in headphones doing a cartwheel"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
  </channel>
</rss>
