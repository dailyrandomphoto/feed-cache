<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top 7 Featured DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 21 Dec 2021 14:49:39 +0000</pubDate>
      <link>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-4aah</link>
      <guid>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-4aah</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#remote-pairing-tips"&gt;
  &lt;/a&gt;
  Remote pairing tips
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/felvct"&gt;@felvct&lt;/a&gt; has some great tips for making your remote pairing sessions as productive as possible ‚Äî super helpful in these times of remote work and social distancing!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/felvct" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DzmRAca_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7QjpBTfD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/184651/04814e27-25cb-437e-977d-d5bfd8462b36.jpeg" alt="felvct"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/felvct/get-the-most-out-of-your-remote-pair-programming-sessions-2l7g" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Get the most out of your (remote) pair programming sessions&lt;/h2&gt;
      &lt;h3&gt;Felix Vaucourt „Éª Dec 14 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codequality&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#happy-engineers-are-more-productive"&gt;
  &lt;/a&gt;
  "Happy engineers are more productive"
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/apkoponen"&gt;@apkoponen&lt;/a&gt; has been in IT for 10 years and picked up a &lt;em&gt;few&lt;/em&gt; tips along the way. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/apkoponen" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nyx90Xz_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Lb87kkYo--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/341672/1a9fcadb-7312-4a42-9a41-404653df1b54.jpg" alt="apkoponen"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/apkoponen/100-tips-on-software-developer-productivity-36if" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;100 Tips on Software Developer Productivity&lt;/h2&gt;
      &lt;h3&gt;Ari Koponen „Éª Dec 15 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#avoiding-tutorial-hell"&gt;
  &lt;/a&gt;
  Avoiding tutorial hell
&lt;/h2&gt;

&lt;p&gt;Do you have some spare time to develop a project? &lt;a class="mentioned-user" href="https://dev.to/yuridevat"&gt;@yuridevat&lt;/a&gt; has a great framework for figuring out what to build. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/yuridevat" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mqqgu1hQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7pt2folr--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/384066/81336f86-4113-4ace-a390-210f80c1b5ac.png" alt="yuridevat"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/yuridevat/how-i-come-up-with-project-ideas-and-never-faced-tutorial-hell-3287" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How I come up with project ideas (and never faced tutorial hell)&lt;/h2&gt;
      &lt;h3&gt;ùïÅùï¶ùïùùïöùïí üë©üèª‚Äçüíª „Éª Dec 14 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#gotta-catch-em-all"&gt;
  &lt;/a&gt;
  Gotta catch 'em all!
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/fidalmathew"&gt;@fidalmathew&lt;/a&gt; shows us how to build a Pokedex using React.js. Super cool!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/fidalmathew" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9CN2G9fG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--JgdVRviV--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/714983/063558c2-23c2-45e9-b7ca-85ee33e62af8.png" alt="fidalmathew"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/fidalmathew/build-pokemon-finder-using-react-and-pokeapi-5b5k" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Build Pokemon Finder using React and Pokeapi&lt;/h2&gt;
      &lt;h3&gt;Fidal Mathew „Éª Dec 18 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#getting-closure-with-javascript"&gt;
  &lt;/a&gt;
  Getting closure with Javascript
&lt;/h2&gt;

&lt;p&gt;In this post, &lt;a class="mentioned-user" href="https://dev.to/aruna"&gt;@aruna&lt;/a&gt; presents a great primer on closures in JS and their purpose.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/aruna" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s2Uujvez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--6Ln-mF0r--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/744146/9920abb3-d96c-4003-918f-382230018c7d.jpg" alt="aruna"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aruna/the-wacky-world-of-closures-what-makes-them-useful-24a7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The Wacky World of Closures &amp;amp; What Makes Them Useful&lt;/h2&gt;
      &lt;h3&gt;aruna-x „Éª Dec 16 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-power-of-graphql-amp-apis"&gt;
  &lt;/a&gt;
  The power of GraphQL &amp;amp; APIs
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/whitep4nth3r"&gt;@whitep4nth3r&lt;/a&gt; shows us how to get data from a GraphQL API (and shares some helpful definitions along the way). &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/whitep4nth3r" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xCrpC75f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uqkZs4wv--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/492757/3e8de3e2-8172-4cf6-958c-ed1221225d6a.jpg" alt="whitep4nth3r"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/whitep4nth3r/an-introduction-to-graphql-and-how-to-use-graphql-apis-13i" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;An introduction to GraphQL and how to use GraphQL APIs&lt;/h2&gt;
      &lt;h3&gt;Salma Alam-Naylor „Éª Dec 14 „Éª 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#graphql&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#showing-the-world-your-skills-when-github-is-not-an-option"&gt;
  &lt;/a&gt;
  Showing the world your skills when GitHub is not an option
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/deleteman123"&gt;@deleteman123&lt;/a&gt; wrote this post for anyone who lives in a country that is unable to access GitHub. Nobody should be excluded from getting noticed as a developer just because of US export laws! &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/deleteman123" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Do_cmJ1i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--fcDG_uU4--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/77392/2434afcd-acef-4b1f-a3fb-eeab4acec940.jpg" alt="deleteman123"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/deleteman123/how-can-you-get-noticed-without-a-github-account-2h1h" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How Can You Get Noticed Without a Github Account?&lt;/h2&gt;
      &lt;h3&gt;Fernando Doglio „Éª Dec 18 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>What is 10DLC, and Why Should You Care?</title>
      <author>Michael Bogan</author>
      <pubDate>Tue, 21 Dec 2021 14:44:15 +0000</pubDate>
      <link>https://dev.to/mbogan/what-is-10dlc-and-why-should-you-care-16j8</link>
      <guid>https://dev.to/mbogan/what-is-10dlc-and-why-should-you-care-16j8</guid>
      <description>&lt;p&gt;10DLC stands for Ten Digit Long Code. Those who are familiar with United States phone numbers know that they‚Äôre made up of ten digits: a three-digit area code followed by a seven-digit number that identifies a person or business. A 10DLC is, essentially, a phone number in the United States. But more accurately, it is a phone number specifically sanctioned by telecom carriers for use in business messaging.&lt;/p&gt;

&lt;p&gt;In this post, we‚Äôll look at the benefits of 10DLC for your business and the necessary steps to get started with 10DLC. Along the way, we‚Äôll consider options for leveraging existing services to simplify the process of starting your 10DLC journey.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10dlc-numbers-for-customer-communication"&gt;
  &lt;/a&gt;
  10DLC: numbers for customer communication
&lt;/h3&gt;

&lt;p&gt;The use of 10DLC for business messaging is championed by the major telecoms to help protect their customers from spam and the misuse of traditional phone numbers and toll-free text numbers. 10DLC is designed for businesses that want to communicate directly with their customers for low-volume use cases like notifications, reminders, or multi-factor authentications.&lt;/p&gt;

&lt;p&gt;Sometimes, 10DLC is used interchangeably with A2P, which stands for application-to-person. Other times, you‚Äôll see A2P and 10DLC used together. They all refer to the same thing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-benefits-do-you-get-with-10dlc"&gt;
  &lt;/a&gt;
  What benefits do you get with 10DLC?
&lt;/h2&gt;

&lt;p&gt;The major benefit you get with 10DLC is &lt;strong&gt;consistency&lt;/strong&gt;. You‚Äôre contacting your customer base because you need to provide information or get them to take action in some way. Examples include the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provide a login code for two-factor authentication&lt;/li&gt;
&lt;li&gt;Remind a patient of a scheduled appointment&lt;/li&gt;
&lt;li&gt;Notify meet-up attendees of a change in location&lt;/li&gt;
&lt;li&gt;Send an updated home value for a recently completed appraisal&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On these occasions, it would certainly be a poor user experience for your text to be flagged as spam and prevented from arriving. To use 10DLC for this communication, however, businesses go through an application process (that we‚Äôll discuss in more detail below) to verify their identity and document their use case. By going through this verification process, you get the support and assurance from major carriers that your communication over 10DLC won‚Äôt be throttled or flagged as spam.&lt;/p&gt;

&lt;p&gt;In addition to stability and support from your provider, you also get another key aspect of customer communication: &lt;strong&gt;recognition&lt;/strong&gt;. Especially with the uptick in spam calls and texts (&lt;em&gt;By the way, your extended car warranty is expiring soon, so press 2 to speak with a representative&lt;/em&gt;), ensuring your business communication won‚Äôt get blocked is critical to a successful customer-business interaction. You even have the option to pick a local number so your customers know that it‚Äôs coming from a legitimate place.&lt;/p&gt;

&lt;p&gt;A 10DLC also brings &lt;strong&gt;centralization&lt;/strong&gt; to your business communication. Because 10DLC is text &lt;em&gt;and&lt;/em&gt; voice enabled, you can make calls and send texts from the same number. This is a great benefit to your customers; they can text your 10DLC if they‚Äôre unable to talk or call if they‚Äôre unable to text. You do, however, have the option to limit the communication channels if you‚Äôd like. For example, if you have two 10DLCs, then it‚Äôd be reasonable to reserve one for texting and another for calls, with voicemail enabled. This approach provides continuity on both communication paths for your business, providing a better experience for your customers.&lt;/p&gt;

&lt;p&gt;The last notable benefit of 10DLC is &lt;strong&gt;cost savings&lt;/strong&gt;. 10DLCs generally cost around the same as a traditional long code or a toll-free number: around $1 per month. This is in sharp contrast to a short code, which can range from $500 to $1000 per month!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-you-get-started-with-10dlc"&gt;
  &lt;/a&gt;
  How do you get started with 10DLC?
&lt;/h2&gt;

&lt;p&gt;If you plan to use a provider like T-Mobile or AT&amp;amp;T, your first step for using 10DLC will be to &lt;strong&gt;apply for a 10DLC status&lt;/strong&gt;. A status is a designation recognized by telecom providers that acts as a verification for your business or use case. After you apply, your status will be either unverified or verified.&lt;/p&gt;

&lt;p&gt;An unverified status generally indicates that there was a problem with your application causing your business to not be registered with &lt;a href="https://www.campaignregistry.com/"&gt;The Campaign Registry&lt;/a&gt; (TCR), which is the reputation authority for business messaging. A verified status indicates that your application went through successfully. Having successfully registered with TCR, you can purchase 10DLC numbers and submit applications for messaging use cases (which are called ‚Äúcampaigns‚Äù).&lt;/p&gt;

&lt;p&gt;Above, we mentioned that this application for status applies if you want to use T-Mobile or AT&amp;amp;T.&lt;/p&gt;

&lt;p&gt;At the time of writing, Verizon is a bit of a special case, in that they don‚Äôt require you to apply for a status. Instead, Verizon uses its own filtering mechanism to determine what communication is spam and what isn‚Äôt.&lt;/p&gt;

&lt;p&gt;Each provider has different message throughput limits, and the throughput given to your business also depends on its size. For example, small- to medium-sized businesses using AT&amp;amp;T have a throughput of 75-240 messages per minute. With T-Mobile, throughput for small-ish businesses might be around 2000-10000 messages per day.&lt;/p&gt;

&lt;p&gt;While applying for a 10DLC status is straightforward, where you go from there can quickly become complicated. You also need to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Purchase (and manage) your 10DLC numbers&lt;/li&gt;
&lt;li&gt;Send campaign applications to providers to let them know what kinds of messages you plan on sending&lt;/li&gt;
&lt;li&gt;Connect your 10DLC numbers to your messaging application&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#go-it-alone-or-leverage-a-service"&gt;
  &lt;/a&gt;
  Go it alone, or leverage a service?
&lt;/h3&gt;

&lt;p&gt;The adventurous types might try to do all of the above on their own, cobbling all the pieces together themselves. In my opinion, it‚Äôs probably a better use of your time to leverage existing services that can help you manage these low-level concerns. That way, you can focus on building business value‚Äîdeveloping your messaging application and fine-tuning your customer experience.&lt;/p&gt;

&lt;p&gt;There are different services out there that can help bootstrap your 10DLC initiative. Some offerings assist you through the application process with TCR, ensuring you get the best possible messaging throughput for your type of business. You can also get campaign management and a REST API for managing 10DLC numbers and messages.&lt;/p&gt;

&lt;p&gt;One of the tools I found out there is called &lt;a href="https://www.openmarket.com/resources/how-to-get-started-with-10dlc-messaging/"&gt;Numbers&lt;/a&gt;, which comes from OpenMarket (Infobip). It‚Äôs an all-encompassing tool, starting with the first step of brand registration all the way through messaging application integrations and APIs.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.infobip.com/docs/api#platform-&amp;amp;-connectivity/numbers"&gt;Numbers API from Infobip&lt;/a&gt; lets you handle all of your number management (purchasing, setting up, configuring), while the &lt;a href="https://www.infobip.com/docs/api#channels/sms"&gt;SMS API&lt;/a&gt; lets you programmatically handle sending, receiving, and scheduling messages, along with coordinating two-factor authentication. Overall, these third-party APIs free up developers from having to roll their own solutions so they can keep their attention on core business needs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-it-up"&gt;
  &lt;/a&gt;
  Wrapping it up
&lt;/h3&gt;

&lt;p&gt;We started with this question: &lt;em&gt;Why should you care about 10DLC?&lt;/em&gt; Ultimately, 10DLC provides some key benefits to help your business succeed. A 10DLC gives you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A supported path to communicate with your customers. Using a 10DLC helps you avoid getting flagged as spam which will negatively impact your customer communication. You also get the support of the major telecom providers.&lt;/li&gt;
&lt;li&gt;Savings. 10DLCs cost less to operate than other options like an SMS short code or a toll-free number. Not only is a 10DLC the right tool for communicating with your customers, but it also helps your bottom line!&lt;/li&gt;
&lt;li&gt;Improved reach and recognition. 10DLCs can be local numbers that are recognizable to your customers, and they can be voice &lt;em&gt;and&lt;/em&gt; text enabled. This gives you multiple options for communicating with your customers and also ensures a higher probability of reaching them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With advantages ranging from reputable pathways to cost savings and even improved reach, it‚Äôs no wonder so many businesses rely on 10DLCs. Perhaps your company will now join the many others who are already dialing and texting their customers!&lt;/p&gt;

</description>
      <category>webdev</category>
    </item>
    <item>
      <title>4 Kubernetes Anti-Patterns to Avoid</title>
      <author>Michael Bogan</author>
      <pubDate>Tue, 21 Dec 2021 14:32:47 +0000</pubDate>
      <link>https://dev.to/mbogan/4-kubernetes-anti-patterns-to-avoid-5ee7</link>
      <guid>https://dev.to/mbogan/4-kubernetes-anti-patterns-to-avoid-5ee7</guid>
      <description>&lt;p&gt;An &lt;em&gt;anti-pattern&lt;/em&gt; is a high-risk solution to a problem that‚Äôs usually ineffective. At first glance, these types of solutions appear appropriate and effective. However, any gains from these patterns tend to be short-term, with the consequences showing anti-patterns to be more trouble than they‚Äôre worth.&lt;/p&gt;

&lt;p&gt;When a developer adopts an anti-pattern, there is usually the intention to come back and &lt;em&gt;do it properly&lt;/em&gt; down the road, unless other more pressing needs get in the way (and they always do). Deviating from best-practice design patterns creates &lt;a href="https://en.wikipedia.org/wiki/Technical_debt"&gt;technical debt&lt;/a&gt;, which, sooner or later, must be paid‚Äîeither in time and effort for refactoring or money due to system unavailability.&lt;/p&gt;

&lt;p&gt;Anti-patterns exist in the Kubernetes world. Container orchestrator solutions, particularly Kubernetes, are used with cloud-native workloads in mind, working best when employing particular design patterns.&lt;/p&gt;

&lt;p&gt;In this article, we‚Äôll cover some common Kubernetes anti-patterns, some design patterns to use instead, and how &lt;a href="https://konghq.com/solutions/kubernetes-ingress/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;Kong Ingress Controller&lt;/a&gt; can help implement the recommended design patterns.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#antipattern-examples"&gt;
  &lt;/a&gt;
  Anti-pattern Examples
&lt;/h3&gt;

&lt;p&gt;Cloud-native workloads‚Äîparticularly those running on Kubernetes‚Äîassume elasticity (for example, horizontal scaling), fault-tolerance, and highly heterogeneous environments for maintainability and debugging. Developing new distributed systems or migrating legacy systems to Kubernetes without care can lead to several anti-patterns. Here are some anti-patterns you should be aware of:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-lack-of-health-checks"&gt;
  &lt;/a&gt;
  1. Lack of health checks
&lt;/h3&gt;

&lt;p&gt;A health check allows you to validate the status of a service. It helps assess key information like service availability, system metrics, or available database connections. A service can report its status through health endpoints like &lt;code&gt;healthz&lt;/code&gt;, &lt;code&gt;livez&lt;/code&gt;, or &lt;code&gt;readyz&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Kubernetes supports &lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes"&gt;Container probes&lt;/a&gt;‚Äînamely &lt;code&gt;livenessProbe&lt;/code&gt;, &lt;code&gt;readinessProbe&lt;/code&gt;, and &lt;code&gt;startupProbe&lt;/code&gt;‚Äîthat allow monitoring services and take actions when the probe is successful. Services without health monitoring cannot take advantage of a lot of functionality that orchestrator solutions can automatically provide.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-not-using-bluegreen-or-canary-deployments-models"&gt;
  &lt;/a&gt;
  2. Not using blue/green or canary deployments models
&lt;/h3&gt;

&lt;p&gt;Most application owners prefer zero downtime for change deployments. This is a necessity for most mission-critical applications. Kubernetes allows you to define &lt;code&gt;Recreate&lt;/code&gt; and &lt;code&gt;RollingUpdate&lt;/code&gt; deployment strategies. &lt;code&gt;Recreate&lt;/code&gt; will kill all the Pods before creating new ones, while &lt;code&gt;RollingUpdate&lt;/code&gt; will update Pods in a rolling fashion and permit configuring &lt;code&gt;maxUnavailable&lt;/code&gt; and &lt;code&gt;maxSurge&lt;/code&gt; to control the process.&lt;/p&gt;

&lt;p&gt;While these &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy"&gt;deployment strategies&lt;/a&gt; can serve many use cases, they also have limitations. For example, &lt;code&gt;Recreate&lt;/code&gt; causes downtime while &lt;code&gt;RollingUpdate&lt;/code&gt; can make rollback harder. None of these methods allows rapid experimentation and feedback on new versions of your services.&lt;/p&gt;

&lt;p&gt;A blue/green deployment is a deployment model that creates copies of your service‚Äîthe old version being &lt;em&gt;blue&lt;/em&gt; and the new version being &lt;em&gt;green&lt;/em&gt;‚Äîwith both services running in parallel. Once you‚Äôre confident the new version (green) is ready for release, you can route all production traffic to the new version while keeping the old version (blue) up and running. If there are issues, you can quickly route the traffic back to the previous version, preventing user dissatisfaction or downtime. After some time, with everything running as expected, you can remove the old version of your service.&lt;/p&gt;

&lt;p&gt;Canary deployment is a technique that only routes the traffic to the new service for a subset of users. This pattern allows introducing a new version of your service in production while you closely monitor its behavior. If successful, you can expose the new version to more users, eventually migrating everyone to the new code version.&lt;/p&gt;

&lt;p&gt;Both techniques are essential in cloud-native environments since they increase service reliability and enable rapid experimentation and development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-not-using-circuit-breakers"&gt;
  &lt;/a&gt;
  3. Not using circuit breakers
&lt;/h3&gt;

&lt;p&gt;Services running on a Kubernetes cluster talk to one another by making remote calls. Because it‚Äôs not uncommon for these services to run on different machines, these remote calls are more prone to failures or unresponsiveness. This can lead to issues like cascading failures.&lt;/p&gt;

&lt;p&gt;In electronics, a circuit breaker is a switch designed to protect an electrical circuit from damage. An excess of electric current through the circuit breaker will cause the circuit to break, preventing an overload or short circuit. The goal of the circuit breaker is to prevent failure after identifying a fault. Similarly, in software, a circuit breaker monitors services for failures and, once identified, prevents further calls to it. This allows systems to deal with the failure and route requests to healthy instances of the same service.&lt;/p&gt;

&lt;p&gt;Without such mechanisms in place, a Kubernetes cluster running a distributed, service-based application will be prone to failures.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-not-collecting-enough-metrics"&gt;
  &lt;/a&gt;
  4. Not collecting enough metrics
&lt;/h3&gt;

&lt;p&gt;Observability is key to understanding system behavior, and effective observability depends on the proper collection of metrics. Metrics provide the pieces of information when you want to know: what your services are doing, how well they are performing, why something went wrong, and, possibly, how to debug the issue. In complex distributed systems, metrics coupled with other forms of observability (such as traces) allow you to understand your systems holistically through a single pane of glass.&lt;/p&gt;

&lt;p&gt;A lack of key metrics will severely limit your ability to understand how your services are performing and if they're performing at the desired level. As the complexity of your system increases, it‚Äôs necessary to collect more data points from more endpoints.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introducing-the-kong-ingress-controller-kic"&gt;
  &lt;/a&gt;
  Introducing the Kong Ingress Controller (KIC)
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://docs.konghq.com/kubernetes-ingress-controller/"&gt;Kong Ingress Controller (KIC)&lt;/a&gt; is an &lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress/"&gt;Ingress&lt;/a&gt; implementation for Kubernetes. It enables configuration of routing, health checks, and load balancing, and it supports a variety of &lt;a href="https://docs.konghq.com/hub/"&gt;plugins&lt;/a&gt; that provide advanced functionality.&lt;/p&gt;

&lt;p&gt;KIC can help address the anti-patterns we‚Äôve discussed above.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#health-checks"&gt;
  &lt;/a&gt;
  Health checks
&lt;/h4&gt;

&lt;p&gt;The KIC can be configured for &lt;a href="https://docs.konghq.com/kubernetes-ingress-controller/2.0.x/guides/configuring-health-checks/#setup-passive-health-checking"&gt;passive health checks&lt;/a&gt; and &lt;a href="https://docs.konghq.com/kubernetes-ingress-controller/2.0.x/guides/configuring-health-checks/#setup-active-health-checking"&gt;active health checks&lt;/a&gt;. Passive health checks will monitor your services on each request and, upon a certain number of failures, will short-circuit requests to the failing Pods. Active health checks will periodically monitor services at predefined intervals, marking failing Pods as unavailable.&lt;/p&gt;

&lt;p&gt;Passive and active health checks will increase the reliability of your system by running regular health checks and taking proactive measures. KIC will use the information from the health checks to efficiently route requests to healthy replicas of the service.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#bluegreen-or-canary-deployments"&gt;
  &lt;/a&gt;
  Blue/green or canary deployments
&lt;/h4&gt;

&lt;p&gt;Code reviews and testing can only give you confidence that your services will work correctly. However, you can‚Äôt test every use case or boundary condition. Furthermore, many bugs are only found when the code is in the wild, and your application starts accepting actual user traffic. &lt;/p&gt;

&lt;p&gt;Blue/green and canary deployments reduce deployment risk by enabling fast rollbacks and reducing the impact of undesired results.&lt;/p&gt;

&lt;p&gt;By deploying both the old and new versions of your service behind the KIC, you can easily route traffic to the new version and roll back to the previous version if necessary. Similarly, using the &lt;a href="https://docs.konghq.com/hub/kong-inc/canary/"&gt;Canary Release plugin&lt;/a&gt; enables you to roll out new changes in a phased manner.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#circuit-breakers"&gt;
  &lt;/a&gt;
  Circuit Breakers
&lt;/h4&gt;

&lt;p&gt;You can configure KIC &lt;a href="https://docs.konghq.com/enterprise/2.6.x/health-checks-circuit-breakers/#passive-health-checks-circuit-breakers"&gt;with checks&lt;/a&gt; that will monitor service performance. Based on the results, it can mark unhealthy or unresponsive service replicas as unavailable, preventing any further requests from being routed to those service replicas. Instead, subsequent requests will be routed to healthy copies of the service. Once fixed, the original service replica can be brought back online.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#metrics"&gt;
  &lt;/a&gt;
  Metrics
&lt;/h4&gt;

&lt;p&gt;The KIC &lt;a href="https://docs.konghq.com/kubernetes-ingress-controller/2.0.x/guides/prometheus-grafana/"&gt;easily integrates&lt;/a&gt; with &lt;a href="https://prometheus.io/"&gt;Prometheus&lt;/a&gt; and &lt;a href="https://grafana.com/"&gt;Grafana&lt;/a&gt;‚Äîtwo industry-standard monitoring solutions‚Äîgiving you visibility into how your services respond to traffic. Moreover, access to these metrics doesn't require any service instrumentation. &lt;a href="https://docs.konghq.com/kubernetes-ingress-controller/2.0.x/references/prometheus/#main"&gt;Prometheus metrics&lt;/a&gt; can be exposed for service requests and configuration updates.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Re-architecting entire Kubernetes solutions is time-consuming and not always a viable option. By leveraging &lt;a href="https://konghq.com/solutions/kubernetes-ingress/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;Kong Ingress Controller&lt;/a&gt;, you'll be able to undo the effects of previously-adopted anti-patterns by replacing them with an implementation that adheres to Kubernetes best-practice design patterns. &lt;/p&gt;

&lt;p&gt;In addition, you can benefit from features like authentication, authorization, or request transformations. KIC &lt;a href="https://docs.konghq.com/kubernetes-ingress-controller/"&gt;documentation&lt;/a&gt; provides detailed information about its core concepts, production deployment scenarios, references, as well as an excellent &lt;a href="https://docs.konghq.com/kubernetes-ingress-controller/2.0.x/guides/overview/"&gt;guide&lt;/a&gt; on common and useful scenarios like &lt;a href="https://docs.konghq.com/kubernetes-ingress-controller/2.0.x/guides/configure-acl-plugin/"&gt;configuring ACL&lt;/a&gt; or &lt;a href="https://docs.konghq.com/kubernetes-ingress-controller/2.0.x/guides/redis-rate-limiting/"&gt;rate limiting&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Debugging JavaScript code - Day 20 of 100</title>
      <author>Arif Iqbal</author>
      <pubDate>Tue, 21 Dec 2021 14:29:16 +0000</pubDate>
      <link>https://dev.to/arifiqbal/debugging-javascript-code-day-20-of-100-30ol</link>
      <guid>https://dev.to/arifiqbal/debugging-javascript-code-day-20-of-100-30ol</guid>
      <description>&lt;p&gt;This post is a part of the &lt;a href="https://dev.to/arifiqbal/series/15795"&gt;Week X of 100DaysOfCode JavaScript Challenge&lt;/a&gt; series.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-debugging"&gt;
  &lt;/a&gt;
  What is debugging?
&lt;/h3&gt;

&lt;p&gt;Debugging is the process of going through your code, finding any issues, and fixing them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#types-of-errors"&gt;
  &lt;/a&gt;
  Types of Errors
&lt;/h3&gt;

&lt;p&gt;Issues in code can come in three forms:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Syntax errors&lt;/strong&gt; come when your code is written against the language rules. These errors will prevent your code from running.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Runtime errors&lt;/strong&gt; are those when your code behaves unexpectedly when you run it. These errors may stop the program execution.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Logical errors&lt;/strong&gt; are those when you get a result from your code that was not supposed to be.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this module we will learn how to use JavaScript console to debug JavaScript code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Use the JavaScript Console to Check the Value of a Variable:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;console.log()&lt;/code&gt; method will write the result of whatever is in the parenthesis to the browser console. Both &lt;em&gt;Chrome&lt;/em&gt; and &lt;em&gt;FireFox&lt;/em&gt; have very powerful browser consoles, also called DevTools. Both Chrome and FireFox, you can press the &lt;code&gt;F12&lt;/code&gt; key to open the DevTools then go the &lt;code&gt;console&lt;/code&gt; tab. &lt;code&gt;console.log("Hello World!")&lt;/code&gt; will write &lt;code&gt;Hello World!&lt;/code&gt; to the browser console.&lt;/p&gt;

&lt;p&gt;You can put this method in your code to see the output of a variable while debugging your program.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Understanding the Differences between the freeCodeCamp and Browser Console:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Friends who follow along with me know that I am following the FreeCodeCamp JavaScript course for this 100DaysOfCode challenge. FreeCodeCamp provides an online code editor that also shows the console window for some JavaScript lessons. This console window works slightly differently than a browser console window.&lt;/p&gt;

&lt;p&gt;Browser console windows will output all JavaScript log methods like &lt;code&gt;log()&lt;/code&gt;, &lt;code&gt;warn()&lt;/code&gt;, and &lt;code&gt;clear()&lt;/code&gt; etc. while the FreeCodeCamp console supports only the &lt;code&gt;log()&lt;/code&gt; method. FreeCodeCamp editor logs to the console in real-time as you change the code. Also, FreeCodeCamp console is cleared every time your code runs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Use typeof to Check the Type of a Variable:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This could be useful in debugging. It returns the datastructure or type of the following variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// number&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ntring&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ntring&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt; &lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt; &lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;JavaScript recognizes six immutable types (&lt;code&gt;Boolean&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, &lt;code&gt;Undefined&lt;/code&gt;, &lt;code&gt;Null&lt;/code&gt;, and &lt;code&gt;Symbol&lt;/code&gt;(added in ES6) ) and one mutable type (Object). In JavaScript arrays are considered to be a type of Object.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>How to observe your web page for scrolls with little calculations</title>
      <author>Ay oh</author>
      <pubDate>Tue, 21 Dec 2021 13:51:13 +0000</pubDate>
      <link>https://dev.to/ayomide_bajo/how-to-observe-your-web-page-for-scrolls-with-little-calculations-3dg5</link>
      <guid>https://dev.to/ayomide_bajo/how-to-observe-your-web-page-for-scrolls-with-little-calculations-3dg5</guid>
      <description>&lt;p&gt;Hi people, it's been over a year since I posted my first blog post. I was going through a lot of personal issues, so I had to take a long break from social media. I'm here now, thank God. Hopefully,this post helps you (the person reading this). Alright, back to the main topic of this post.&lt;/p&gt;

&lt;p&gt;A lot of devs struggle with observing the web page on scrolls and stuff. There are solutions, either by calculating the offset of the element or some other solution.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisities"&gt;
  &lt;/a&gt;
  Prerequisities
&lt;/h3&gt;

&lt;p&gt;you need to know HTML, CSS and JS. I'm not going to over that in this post.&lt;/p&gt;

&lt;p&gt;If you already know HTML, CSS and JS, you can continue reading this post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-intersection-observer-api"&gt;
  &lt;/a&gt;
  The Intersection Observer API
&lt;/h2&gt;

&lt;p&gt;According to mdn's definition, "The Intersection Observer API provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's view port".&lt;/p&gt;

&lt;p&gt;Many years ago, web developers had to do lots of calculations on observing the page's view port using tools like offset and the likes, which could get messy, as the user's experience starts to be unpleasant. The intersection Observer API can be used for the following: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lazy-loading images or page content&lt;/li&gt;
&lt;li&gt;CSS animations&lt;/li&gt;
&lt;li&gt;Infinite scrolling&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It can basically be used for observing the elements in the page or when the elements will be in view. Which can be handy because you don't really need much calculations, you just need the Intersection observer!.&lt;/p&gt;

&lt;p&gt;To demonstrate how to use the Intersection Observer API, We are going to build a simple web page with contents to observe and then we make our page react when elements are in view and also when they are not.&lt;/p&gt;

&lt;p&gt;Alright, let's write some code!&lt;/p&gt;

&lt;p&gt;Firstly, Create a folder named intersection-observe or &lt;em&gt;any name you like&lt;/em&gt;. In this directory, create a HTML file, a CSS file and a JS file.&lt;/p&gt;

&lt;p&gt;Like I said earlier, I'm not going to go over the tags and stuff, I assume you already have knowledge of that.&lt;/p&gt;

&lt;p&gt;Next, Copy the following code below to the html file, We are just going to display a list of post, with a navbar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8" /&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge" /&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&amp;gt;
    &amp;lt;title&amp;gt;Intersection Observer!&amp;lt;/title&amp;gt;
    &amp;lt;link rel="stylesheet" href="styles.css" /&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div class="main--container"&amp;gt;
      &amp;lt;div class="nav--wrapper"&amp;gt;
        &amp;lt;nav class="navbar--container nav-intersect"&amp;gt;
          &amp;lt;ul class="links--container"&amp;gt;
            &amp;lt;li class="navlink logo"&amp;gt;Logo&amp;lt;/li&amp;gt;
            &amp;lt;li class="navlink"&amp;gt;Home&amp;lt;/li&amp;gt;
            &amp;lt;li class="navlink"&amp;gt;About&amp;lt;/li&amp;gt;
            &amp;lt;li class="navlink"&amp;gt;Contact&amp;lt;/li&amp;gt;
          &amp;lt;/ul&amp;gt;
        &amp;lt;/nav&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class="posts--container"&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script src="script.js"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure you replace the style and script file names to your the custom names you created, so that you can see the changes.&lt;/p&gt;

&lt;p&gt;Currently the page will look like this:- &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tI7p08iQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ongfdwnub3b0aggt1e8i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tI7p08iQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ongfdwnub3b0aggt1e8i.png" alt="Image description" width="880" height="483"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then go to your css file and copy the following code into it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* {
  margin: 0;
  padding: 0;
}

.navbar--container {
  height: 7vh;
  background-color: white;

  position: fixed;
  width: 100%;
}

.nav--wrapper {
  height: 7.5vh;
  width: 100%;
}

.nav-intersect {
  position: fixed;
  z-index: 10;
  /* -webkit-box-shadow: 0px 1px 3px -1px rgba(105, 105, 105, 0.79);
  -moz-box-shadow: 0px 1px 3px -1px rgba(105, 105, 105, 0.79); */
  box-shadow: 0px 1px 3px -1px rgba(105, 105, 105, 0.79);
}

.links--container {
  padding-top: 20px;
  display: flex;
  list-style: none;
}

li:nth-child(2) {
  margin-left: auto;
}

.navlink {
  padding: 0 5px 0 5px;
  cursor: pointer;
}

.navlink:hover {
  color: brown;
}

.posts--container {
  position: relative;
  display: grid;
  max-width: 800px;
  margin: auto;
  padding-top: 100px;
  gap: 4em;
}

.card {
  height: 100%;
  -webkit-box-shadow: 0px 1px 5px 0px rgba(183, 192, 206, 0.4);
  -moz-box-shadow: 0px 1px 5px 0px rgba(183, 192, 206, 0.4);
  box-shadow: 0px 1px 5px 0px rgba(183, 192, 206, 0.4);
  width: 100%;
  border-radius: 5px;
  padding: 20px;
}


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the classname &lt;strong&gt;nav-intersect&lt;/strong&gt; I added an extra rule for old browsers that have issues with the box-shadow rule, but I commented it out, because my browser was fine the css rule, you can uncomment it of you like.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-we-going-to-do-in-this-example"&gt;
  &lt;/a&gt;
  what we going to do in this example.
&lt;/h4&gt;

&lt;p&gt;When a user enters the page, the navbar doesn't have a box-shadow, but when the user starts scrolling, the navbar is fixed and the box-shadows shows up and remains visible. We are going to implement this using the Intersection Observer API.&lt;br&gt;
P.S the layout isn't mobile responsive. &lt;/p&gt;

&lt;p&gt;The page is going to look like this:- &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L2eKtFaq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duv6b0rxc3ejo513htf5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L2eKtFaq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duv6b0rxc3ejo513htf5.png" alt="Image description" width="880" height="483"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, moving on the main part of this tutorial. For you to be able to observe an element properly, you'll need to simply wrap it with another element that is just slightly bigger than the child element, because the wrapper and the child can't be of the same height or width or even size. From the name wrapper means it has to be wrapped or contained. This is why in the classname &lt;code&gt;nav-wrapper&lt;/code&gt; the element height is slightly bigger than the child's height &lt;code&gt;navbar--container&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Let's go to the html file and scroll to &lt;strong&gt;main--container&lt;/strong&gt; in the next &lt;code&gt;div&lt;/code&gt; it's classname is empty, add this name &lt;code&gt;nav--wrapper&lt;/code&gt; to it. Nothing changes, this is the wrapper for the element we are going to observe, which is &lt;code&gt;navbar--container&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Let's go into the js file. &lt;br&gt;
We are going to create variables for saving parent wrapper and the child.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const parent = document.querySelector(".nav--wrapper");
const navbar = document.querySelector(".navbar--container");

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You call the Intersection Oberver by calling it's contructor,  &lt;code&gt;new IntersectionObserver()&lt;/code&gt; it takes in two arguments, a callback and options. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-callback"&gt;
  &lt;/a&gt;
  The callback
&lt;/h4&gt;

&lt;p&gt;This is the function executed whenever the target element is in view or not, it is influenced by the options object.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#options"&gt;
  &lt;/a&gt;
  options
&lt;/h4&gt;

&lt;p&gt;This is an object with properties for configuring when/where you want to react to the changes in the target element. it has the following properties:- &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;root&lt;br&gt;
The element that is used as the view port for observing the visibility of the target. Defaults to the view port if null.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rootMargin&lt;br&gt;
This is the margin around the root, it's usually in px or percentages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;threshold&lt;br&gt;
Either a single number or an array of numbers which indicate at what percentage of the target's visibility the observer's callback should be executed.  If you only want to detect when visibility of the element is 50%, i.e you can pass a a value of 0.5. if you want the callback to run every time the visibility passes another 10%, you would specify the array to be [0, 0.10, 0.20, 0.30, ... 1]. A value of 1.0 means that threshold isn't considered passed until every pixel is visible, this is why the parent wrapper has to be slightly bigger to that it can show the element accurately.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let's create an &lt;code&gt;options&lt;/code&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let options = {
  root: null,
  rootMargin: "0px",
  threshold: [0.0, 1.0],
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the callback, the takes in an a list of entries as an argument, I'm just going to call an arrow function, add this to your code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let navbarObserver = new IntersectionObserver((entries) =&amp;gt; {
  entries.forEach((entry) =&amp;gt; {
    if (!entry.isIntersecting) {
      navbar.classList.add("nav-intersect");
      return;
    }
    navbar.classList.remove("nav-intersect");
  });
}, options);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, we created an instance of the IntersectionObserver then put the callback and options as arguments in the instance we just created. Then in the callback, we have access to entries (it describes the intersection between the target element and its root container at a specific moment of transition) using properties to check for those description, for example when the target element is intersecting, we use the &lt;code&gt;isIntersecting&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;Next, we loop through those entries and we make an condition, since we are trying to show the navbar when it's no longer in view. we an negate the &lt;code&gt;isIntersecting&lt;/code&gt; property. This will check, if the navbar element is going to be no longer in view, simply add it back. &lt;/p&gt;

&lt;p&gt;Now we need to observe this element by calling the &lt;code&gt;observe&lt;/code&gt; property on the Intersection Observer instance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;navbarObserver.observe(document.querySelector(".nav--wrapper"));

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is all the code in js file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const parent = document.querySelector(".nav--wrapper");
const navbar = document.querySelector(".navbar--container");

let options = {
  root: null,
  rootMargin: "0px",
  threshold: [0.0, 1.0],
};

let navbarObserver = new IntersectionObserver((entries) =&amp;gt; {
  entries.forEach((entry) =&amp;gt; {
    if (!entry.isIntersecting) {
      navbar.classList.add("nav-intersect");
      return;
    }
    navbar.classList.remove("nav-intersect");
  });
}, options);

navbarObserver.observe(document.querySelector(".nav--wrapper"));

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see a box-shadow added to the navbar whenever you scroll through the page.&lt;/p&gt;

&lt;p&gt;I couldn't have done this post without mdn's docs on the Intersection Observer API, you should check it out too!, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"&gt;click here&lt;/a&gt;, it's pretty long but with the basic example we did here, you should be able to catch up.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this article!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Top 8 Programming Languages For Game Developers</title>
      <author>CodeWhiteWeb</author>
      <pubDate>Tue, 21 Dec 2021 13:50:00 +0000</pubDate>
      <link>https://dev.to/codewhiteweb/top-8-programming-languages-for-game-developers-1e27</link>
      <guid>https://dev.to/codewhiteweb/top-8-programming-languages-for-game-developers-1e27</guid>
      <description>&lt;p&gt;The choice of programming language depends on factors including the game type‚Äì console, computer game or mobile game; and the extent of interactivity. Here‚Äôs a list of top eight programming languages for game development: &lt;a href="https://analyticsindiamag.com/top-8-programming-languages-for-game-developers/"&gt;original article source...&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#c"&gt;
  &lt;/a&gt;
  &lt;strong&gt;C++&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yzqq3r2r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.educative.io/v2api/collection/10370001/5666073764429824/image/5739609443008512" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yzqq3r2r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.educative.io/v2api/collection/10370001/5666073764429824/image/5739609443008512" alt="cpp" width="732" height="434"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Despite its high entry barrier, C++ is one of the most popular and commonly used programming languages for game designers. It offers a high abstraction level for both fine object-oriented programming and generic programming, providing direct control over hardware and graphical processes. &lt;/p&gt;

&lt;p&gt;Additionally, C++ allows the optimisation of special parts to a very high level‚Äì a feature almost impossible to achieve with other languages. &lt;/p&gt;

&lt;p&gt;C++ is used to build most big console and Windows games. Apart from that, popular games built using C++ include Counter-Strike, Football Pro, Starcraft, Master of Orion III. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#java"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Java&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4X-X11wO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raysonline.in/wp-content/uploads/2020/03/banner-java.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4X-X11wO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raysonline.in/wp-content/uploads/2020/03/banner-java.jpg" alt="java" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Given Java‚Äôs versatility and rich collection of open-source material, it is popularly used for the development of indie and mobile games. It is easy-to-use, is beginner friendly and can write a range of reusable system-agnostic code. When compared with C++, Java offers easy writing, debugging, learning and compiling. &lt;/p&gt;

&lt;p&gt;Games including the likes of Mission Impossible III, Minecraft, FIFA 11, and Ferrari GT 3: WOrld Track, have all been created using Java. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html5"&gt;
  &lt;/a&gt;
  &lt;strong&gt;HTML5&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QUckhosX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcTZ-5ra82nnV080X2EAirNd8pThBwa4bXYixwikIEeWdefM43toRHAmtC_xS6pJuyPHLD8%26usqp%3DCAU" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QUckhosX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcTZ-5ra82nnV080X2EAirNd8pThBwa4bXYixwikIEeWdefM43toRHAmtC_xS6pJuyPHLD8%26usqp%3DCAU" alt="html" width="314" height="161"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HTML5 is one of the top choices by game developers to build cross-platform and cross-browser apps and games. Further, it can be interchangeably used with JavaScript. &lt;/p&gt;

&lt;p&gt;HTML5 is widely preferred for game development for its ultimate gaming engines. Game Frameworks including Construct 2, ImpactJS, Phaser, Turbulenz and Booty5 have taken the responsibility of the HTML5 Game Development process. &lt;/p&gt;

&lt;p&gt;Some popular games built with HTML5 include Cookie Clicker, Gods Will Be Watching, World Cup Penalty 2018. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  &lt;strong&gt;JavaScript&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;JavaScript is one of the best programming languages for interactive online games. It integrates with web technologies including CSS and HTML, allowing the development of cross-platform mobile games.&lt;/p&gt;

&lt;p&gt;JavaScript is often used along with HTML5 since the latter cannot create animation or interactivity. Additionally, contributing to its popularity is JavaScript‚Äôs humongous online community and large number of frameworks. &lt;/p&gt;

&lt;p&gt;Some popular games made with JavaScript include Hangman, HexGI, Little Alchemy, Swoop and Polycraft. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Python&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Uvu7srf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://fiverr-res.cloudinary.com/images/q_auto%2Cf_auto/gigs/108109754/original/36cde7008348d270132c92c712592d76d482062a/help-you-make-games-in-python-using-pygame.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Uvu7srf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://fiverr-res.cloudinary.com/images/q_auto%2Cf_auto/gigs/108109754/original/36cde7008348d270132c92c712592d76d482062a/help-you-make-games-in-python-using-pygame.jpg" alt="pygames" width="550" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although not as popular as Java or C++, Python is used for game development. Its PyGame library is developer-friendly, easy to use for building games and enables developers to prototype games quickly. Additionally, just like Java and C++, Python also runs on OOP principles. Its simple learning curve makes Python a go-to option for many game developers. &lt;/p&gt;

&lt;p&gt;Some popular games built using Python include Battlefield 2, Disney‚Äôs Toontown Online, Eve Online and Frets on Fire. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unrealscript"&gt;
  &lt;/a&gt;
  &lt;strong&gt;UnrealScript&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VXs9aDso--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.unrealengine.com/4.27/Images/WhatsNew/Builds/ReleaseNotes/4_16/DOCS_BANNER_416.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VXs9aDso--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.unrealengine.com/4.27/Images/WhatsNew/Builds/ReleaseNotes/4_16/DOCS_BANNER_416.jpg" alt="unrealengine" width="880" height="254"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unreal Engine has developed the programming language UnrealScript or UScript. Like Java, UnrealScript is object-oriented without multiple inheritance. Major gaming platforms including the likes of Microsoft Windows, Android, Linux and Playstation use UnrealScript. &lt;/p&gt;

&lt;p&gt;However, in 2014, Epic Games had announced that Unreal Engine 4 would not be supporting UnrealScript. &lt;/p&gt;

&lt;p&gt;Some popular games developed using UnrealScript include Advent Rising, America‚Äôs Army, The Wheel Of Time, Batman- Arkham Knight and its series. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lua"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Lua&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hNGZYI0u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.educba.com/academy/wp-content/uploads/2021/01/Lua-programming.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hNGZYI0u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.educba.com/academy/wp-content/uploads/2021/01/Lua-programming.jpg" alt="Lua" width="880" height="489"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lua is a light weight, high level and multi-platform programming language that is easy to run, making it fun and efficient to be used for video game development. It can be designed to embed into many applications, making it convenient for developers and players to alter the game. &lt;/p&gt;

&lt;p&gt;Game engines including the likes of Gideros mobile, Corona SDK, and CryEngine, use Lua as its primary programming language. &lt;/p&gt;

&lt;p&gt;Some popular games developed using Lua are Age of Conan, American Girl, Angry Birds, and Aquaria. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#c"&gt;
  &lt;/a&gt;
  &lt;strong&gt;C#&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UOgXfv9h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://elearn.lifelearners.ng/wp-content/uploads/2017/11/banner_programming01_1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UOgXfv9h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://elearn.lifelearners.ng/wp-content/uploads/2017/11/banner_programming01_1.jpg" alt="csharp" width="880" height="386"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Despite considered easier than C++, C# is a powerful language. Its XNA framework makes it perfect for building games on Windows and Xbox. Additionally, C#‚Äôs game engine Unity3D and Xamarin enables developers to build games on all platforms including iOS, Android, PlayStation and Windows.  &lt;/p&gt;

&lt;p&gt;C# is as popular in the gaming industry due to its efficiency and scalability. &lt;/p&gt;

&lt;p&gt;Popular games developed using C# include Pokemon Go and Super Mario Run.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uOG7dRA7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media2.giphy.com/media/RbDKaczqWovIugyJmW/200.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uOG7dRA7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media2.giphy.com/media/RbDKaczqWovIugyJmW/200.gif" alt="bye" width="356" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What I use :- Javascript , C#(very less) and Unrealscript&lt;br&gt;
Comment down what you guys mostly Use üëáüèº&lt;/p&gt;

&lt;p&gt;Happy Coding!!!&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>javascript</category>
      <category>csharp</category>
      <category>cpp</category>
    </item>
    <item>
      <title>Build a Pomodoro Timer using HTML, CSS and Javascript</title>
      <author>Sangy K</author>
      <pubDate>Tue, 21 Dec 2021 13:45:22 +0000</pubDate>
      <link>https://dev.to/sansk/build-a-pomodoro-timer-using-html-css-and-javascript-53do</link>
      <guid>https://dev.to/sansk/build-a-pomodoro-timer-using-html-css-and-javascript-53do</guid>
      <description>&lt;p&gt;In this tutorial, we are coding a Pomodoro timer. ‚è≤&lt;/p&gt;

&lt;p&gt;I Came across Advent Of CSS and Advent of JS challenges, created by Amy Dutton and James Q Quick for this holiday season.  I decided it would be a fun little challenge to participate this year!&lt;/p&gt;

&lt;p&gt;So here is my learning and challenges faced during the Day 1 challenge. üò•&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-pomodoro-timer"&gt;
  &lt;/a&gt;
  What is a Pomodoro Timer?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The Pomodoro Technique is a time management method developed by Francesco Cirillo in the late 1980s. It uses a timer to break work into intervals, traditionally 25 minutes in length, separated by short breaks. Each interval is known as a Pomodoro, from the Italian word for tomato, after the tomato-shaped kitchen timer Cirillo used as a university student.  -- Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LPf9vghO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j39rssiyfzaisrirfcwa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LPf9vghO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j39rssiyfzaisrirfcwa.png" alt="What is Pomodoro" width="800" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In simple words, a Pomodoro timer is a simple app that helps us to focus and be productive. It schedules alternate work and breaks sessions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#challenge-spec"&gt;
  &lt;/a&gt;
  Challenge Spec
&lt;/h2&gt;

&lt;p&gt;Users should be able to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start the timer by clicking on the 'START' link/button.&lt;/li&gt;
&lt;li&gt;Once the user clicks start, the word start will change to STOP. Then, the user can click on the 'STOP' button to make the timer stop.&lt;/li&gt;
&lt;li&gt;Click on the Gear icon to change the length (minutes and seconds) of the timer.&lt;/li&gt;
&lt;li&gt;Once the timer finishes, the ring should change from red to green.&lt;/li&gt;
&lt;li&gt;Can use any frameworks, libraries, tools or can stay with good old CSS and Vanilla JS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gGOvelTu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ncuxwzsvfnbhftgjjzme.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gGOvelTu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ncuxwzsvfnbhftgjjzme.gif" alt="Design Specification" width="800" height="500"&gt;&lt;/a&gt;&lt;br&gt;
I decided to stay with my old friends, &lt;strong&gt;plain CSS and Vanilla JS&lt;/strong&gt; ü§ûüèª&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So, it's time for some code!&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#approach-html"&gt;
  &lt;/a&gt;
  Approach: HTML
&lt;/h2&gt;

&lt;p&gt;We will start by creating a simple HTML structure to display a timer and Start/Stop and a Setting's Button(to adjust the time)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="container"&amp;gt;
    &amp;lt;div class="outerRing"&amp;gt;
        &amp;lt;div class="timer"&amp;gt;
            &amp;lt;!-- Timer elements --&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A &lt;code&gt;container&lt;/code&gt; contains everything for the timer. &lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;container&lt;/code&gt;, we have two &lt;code&gt;div&lt;/code&gt;'s.&lt;/p&gt;

&lt;p&gt;One for &lt;code&gt;outerRing&lt;/code&gt; displaying the progress bar.&lt;/p&gt;

&lt;p&gt;Second for the &lt;code&gt;timer&lt;/code&gt; to display the &lt;em&gt;Countdown, Start/Stop and the Settings button&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div id="time"&amp;gt;
    &amp;lt;span id="minutes"&amp;gt;00&amp;lt;/span&amp;gt;
    &amp;lt;span id="colon"&amp;gt;:&amp;lt;/span&amp;gt;
    &amp;lt;span id="seconds"&amp;gt;10&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div id="stsp"&amp;gt;START&amp;lt;/div&amp;gt;
&amp;lt;span id="setting"&amp;gt;&amp;lt;i class="fas fa-cog"&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;time&lt;/code&gt; div displays the countdown, with &lt;code&gt;minutes&lt;/code&gt; and &lt;code&gt;seconds&lt;/code&gt; &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Below is the complete HTML code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="container"&amp;gt;
    &amp;lt;div class="outerRing"&amp;gt;
        &amp;lt;div class="timer"&amp;gt;
            &amp;lt;div id="time"&amp;gt;
                &amp;lt;span id="minutes"&amp;gt;00&amp;lt;/span&amp;gt;
                &amp;lt;span id="colon"&amp;gt;:&amp;lt;/span&amp;gt;
                &amp;lt;span id="seconds"&amp;gt;10&amp;lt;/span&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div id="stsp"&amp;gt;START&amp;lt;/div&amp;gt;
            &amp;lt;span id="setting"&amp;gt;&amp;lt;i class="fas fa-cog"&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#approach-adding-css"&gt;
  &lt;/a&gt;
  Approach: Adding CSS
&lt;/h2&gt;

&lt;p&gt;First, set the &lt;code&gt;: root&lt;/code&gt; variables. Then add the &lt;code&gt;container&lt;/code&gt; layout to the centre of the page using &lt;code&gt;display: grid&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Set the outer ring and the timer to circle with a difference of &lt;code&gt;15px&lt;/code&gt; between &lt;code&gt;outerRing&lt;/code&gt; and &lt;code&gt;timer&lt;/code&gt; containers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.outerRing {
    display: grid;
    place-items: center;
    width: 415px;
    height: 415px;
    border-radius: 50%;
    box-shadow: -5px 14px 44px #000000, 
      5px -16px 50px rgba(255, 255, 255, 0.15);
    background: var(--normal-ring);
}

/* Width and Height difference btwn .outerRing &amp;amp; .timer is 15px, 
where our progress bar will be displayed */

.timer {
    width: 400px;
    height: 400px;
    border-radius: 50%;
    background: var(--timer-bg);
    box-shadow: inset 0px 0px 114px rgba(0, 0, 0, 0.45);
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    padding: 8rem;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;outerRing&lt;/code&gt; is where we will be displaying the progress bar using the &lt;code&gt;conic-gradient()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;How Conic Gradient Works using animation üëáüèªüëáüèª&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/skay/full/OJxRxjE"&gt;Codepen Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will be animating the progress bar using &lt;code&gt;conic-gradient()&lt;/code&gt; colours in Javascript.&lt;/p&gt;

&lt;p&gt;Below is the Complete CSS Code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@import url("https://fonts.googleapis.com/css2?
family=Bebas+Neue&amp;amp;family=Montserrat:wght@700&amp;amp;display=swap");

*,
*::before,
*::after {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

:root {
    --bg: #2b2a30;
    --normal-ring: #17171a;
    --red-ring: #9d0000;
    --green-ring: #00aa51;
    --timer-bg: radial-gradient(
        71.4% 71.4% at 51.7% 28.6%,
        #3a393f 0%,
        #17171a 100%
    );
    --font-timer: "Bebas Neue", cursive;
    --font-stsp: "Montserrat", sans-serif;
    --font-clr: #ffffff;
}

body {
    background: var(--bg);
    min-height: 100vh;
    overflow: hidden;
}

.container {
    height: 600px;
    width: 600px;
    background-color: transparent;
    position: absolute;
    transform: translate(-50%, -50%);
    top: 50%;
    left: 50%;
    display: grid;
    place-items: center;
}

.outerRing {
    display: grid;
    place-items: center;
    width: 415px;
    height: 415px;
    border-radius: 50%;
    box-shadow: -5px 14px 44px #000000, 
        5px -16px 50px rgba(255, 255, 255, 0.15);
    background: var(--normal-ring);
}

.timer {
    width: 400px;
    height: 400px;
    border-radius: 50%;
    background: var(--timer-bg);
    box-shadow: inset 0px 0px 114px rgba(0, 0, 0, 0.45);
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    padding: 8rem;
}

#time {
    width: 300px;
    text-align: center;
    margin: 3rem 0 0 0;
}

#time span {
    display: inline;
    color: var(--font-clr);
    font-family: var(--font-timer);
    font-size: 7rem;
    letter-spacing: 0.1em;
    text-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
}

#stsp {
    color: var(--font-clr);
    cursor: pointer;
    font-family: Montserrat;
    font-weight: bold;
    font-size: 1rem;
    line-height: 1.25rem;
    text-align: center;
    letter-spacing: 0.6em;
    margin: 1rem 0;
    text-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
}

#setting {
    cursor: pointer;
    margin-top: 1rem;
    width: 25px;
    height: 25px;
    color: #585858;
    box-shadow: 0px 0px 2px rgba(0, 0, 0, 0.25);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#approach-adding-javascript"&gt;
  &lt;/a&gt;
  Approach: Adding Javascript
&lt;/h2&gt;

&lt;p&gt;First, let us complete the timer ingredients like timer display, start/stop button &amp;amp; settings button.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Settings Button&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Get the &lt;code&gt;Setting&lt;/code&gt;, &lt;code&gt;Minutes&lt;/code&gt; and &lt;code&gt;Seconds&lt;/code&gt; elements. Also, declare a &lt;code&gt;toggleSettings&lt;/code&gt; variable to keep track of the click of the &lt;code&gt;Settings&lt;/code&gt; button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const minElem = document.querySelector("#minutes"),
    secElem = document.querySelector("#seconds"),
    setting = document.querySelector("#setting");

let toggleSettings = false;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Handle the &lt;code&gt;click&lt;/code&gt; event on the &lt;code&gt;Settings&lt;/code&gt; button. Also, handle the &lt;code&gt;onblur&lt;/code&gt; event for the &lt;code&gt;Minutes&lt;/code&gt; and &lt;code&gt;Seconds&lt;/code&gt; elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;setting.onclick = function () {
    if (!toggleSettings) {
        toggleSettings = true;
        minElem.contentEditable = true;
        minElem.style.borderBottom = `1px dashed #ffffff50`;
        secElem.contentEditable = true;
        secElem.style.borderBottom = `1px dashed #ffffff50`;
    } else {
        resetValues();
    }
};

minElem.onblur = function () {
    resetValues();
};

secElem.onblur = function () {
    resetValues();
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function &lt;code&gt;resetValues&lt;/code&gt; handles the values getting reassigned for &lt;code&gt;minutes&lt;/code&gt; and &lt;code&gt;seconds&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Start/Stop Button&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Declare &lt;code&gt;minutes&lt;/code&gt; and &lt;code&gt;seconds&lt;/code&gt; as &lt;code&gt;let&lt;/code&gt; variables, as we will manipulate these for the timer display.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const startStop = document.querySelector("#stsp");
let minutes = document.querySelector("#minutes").innerHTML,
    seconds = document.querySelector("#seconds").innerHTML;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we click the &lt;code&gt;START&lt;/code&gt; button, first will check for &lt;code&gt;minutes&lt;/code&gt; and &lt;code&gt;seconds&lt;/code&gt; not equal to 0. Then the text will change to &lt;code&gt;STOP&lt;/code&gt; and call the &lt;code&gt;startStopProgress&lt;/code&gt; function. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;startStopProgress&lt;/code&gt; function will check the timer progress and update the progress bar and the timer display. &lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;STOP&lt;/code&gt; button, use the same function to clear the progress and change the text back to &lt;code&gt;START&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;startStop.onclick = function () {
    if (startStop.innerHTML === "START") {
        if (!(parseInt(minutes) === 0 &amp;amp;&amp;amp; parseInt(seconds) === 0)) {
            startStop.innerHTML = "STOP";
            startStopProgress();
        } else {
            alert("Enter the Time Value in your Timer!");
        }
    } else {
        startStop.innerHTML = "START";
        startStopProgress();
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Progress Bar&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will be using &lt;code&gt;setInterval()&lt;/code&gt; to run our code that helps track the progress.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function startStopProgress() {
    if (!progress) {
        progress = setInterval(progressTrack, speed);
    } else {
        clearInterval(progress);
        progress = null;
        progressStart = 0;
        progressBar.style.background = `conic-gradient(
                #17171a 360deg,
                #17171a 360deg
          )`;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Calculate the Minutes Remaining and Seconds Remaining to update the timer. &lt;/p&gt;

&lt;p&gt;Also, depending on the total time of the timer, calculate the degree/second on the timer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Degree/Second = 360 / Total time of the timer in minutes.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using &lt;code&gt;conic-gradient()&lt;/code&gt; and the calculated deg/sec, update the DOM.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function progressTrack() {
    progressStart++;

    secRem = Math.floor((progressEnd - progressStart) % 60);
    minRem = Math.floor((progressEnd - progressStart) / 60);

    secElem.innerHTML = secRem.toString().length == 2 ? secRem : `0${secRem}`;
    minElem.innerHTML = minRem.toString().length == 2 ? minRem : `0${minRem}`;

    progressBar.style.background = `conic-gradient(
        #9d0000 ${progressStart * degTravel}deg,
        #17171a ${progressStart * degTravel}deg
        )`;
    if (progressStart == progressEnd) {
        progressBar.style.background = `conic-gradient(
                #00aa51 360deg,
                #00aa51 360deg
          )`;
        clearInterval(progress);
        startStop.innerHTML = "START";
        progress = null;
        progressStart = 0;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the complete Javascript code,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const progressBar = document.querySelector(".outerRing"),
    minElem = document.querySelector("#minutes"),
    secElem = document.querySelector("#seconds"),
    startStop = document.querySelector("#stsp"),
    setting = document.querySelector("#setting");

let minutes = document.querySelector("#minutes").innerHTML,
    seconds = document.querySelector("#seconds").innerHTML,
    progress = null,
    progressStart = 0,
    progressEnd = parseInt(minutes) * 60 + parseInt(seconds),
    speed = 1000,
    degTravel = 360 / progressEnd,
    toggleSettings = false,
    secRem = 0,
    minRem = 0;

function progressTrack() {
    progressStart++;

    secRem = Math.floor((progressEnd - progressStart) % 60);
    minRem = Math.floor((progressEnd - progressStart) / 60);

    secElem.innerHTML = secRem.toString().length == 2 ? secRem : `0${secRem}`;
    minElem.innerHTML = minRem.toString().length == 2 ? minRem : `0${minRem}`;

    progressBar.style.background = `conic-gradient(
        #9d0000 ${progressStart * degTravel}deg,
        #17171a ${progressStart * degTravel}deg
        )`;
    if (progressStart == progressEnd) {
        progressBar.style.background = `conic-gradient(
                #00aa51 360deg,
                #00aa51 360deg
          )`;
        clearInterval(progress);
        startStop.innerHTML = "START";
        progress = null;
        progressStart = 0;
    }
}

function startStopProgress() {
    if (!progress) {
        progress = setInterval(progressTrack, speed);
    } else {
        clearInterval(progress);
        progress = null;
        progressStart = 0;
        progressBar.style.background = `conic-gradient(
                #17171a 360deg,
                #17171a 360deg
          )`;
    }
}

function resetValues() {
    if (progress) {
        clearInterval(progress);
    }
    minutes = document.querySelector("#minutes").innerHTML;
    seconds = document.querySelector("#seconds").innerHTML;
    toggleSettings = false;
    minElem.contentEditable = false;
    minElem.style.borderBottom = `none`;
    secElem.contentEditable = false;
    secElem.style.borderBottom = `none`;
    progress = null;
    progressStart = 0;
    progressEnd = parseInt(minutes) * 60 + parseInt(seconds);
    degTravel = 360 / progressEnd;
    progressBar.style.background = `conic-gradient(
                #17171a 360deg,
                #17171a 360deg
          )`;
}

startStop.onclick = function () {
    if (startStop.innerHTML === "START") {
        if (!(parseInt(minutes) === 0 &amp;amp;&amp;amp; parseInt(seconds) === 0)) {
            startStop.innerHTML = "STOP";
            startStopProgress();
        } else {
            alert("Enter the Time Value in your Timer!");
        }
    } else {
        startStop.innerHTML = "START";
        startStopProgress();
    }
};

setting.onclick = function () {
    if (!toggleSettings) {
        toggleSettings = true;
        minElem.contentEditable = true;
        minElem.style.borderBottom = `1px dashed #ffffff50`;
        secElem.contentEditable = true;
        secElem.style.borderBottom = `1px dashed #ffffff50`;
    } else {
        resetValues();
    }
};

minElem.onblur = function () {
    resetValues();
};

secElem.onblur = function () {
    resetValues();
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wow, that's it!  ü§©ü§©&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion!
&lt;/h2&gt;

&lt;p&gt;We have successfully created the Pomodoro timer using HTML, CSS and Javascript. &lt;/p&gt;

&lt;p&gt;We can extend this to add more functionalities like the 'PAUSE' button etc.,&lt;/p&gt;

&lt;p&gt;If you have any issues, please refer to the full codepen below,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/skay/pen/xxXGKZy"&gt;Codepen Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more articles like this, visit &lt;a href="https://theintrovertcoder.hashnode.dev/"&gt;The Introvert Coder&lt;/a&gt; and Follow me on &lt;a href="https://twitter.com/sangyk_dev"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading, and happy coding!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>css</category>
    </item>
    <item>
      <title>What I Learned About the Log4j Vulnerability</title>
      <author>Tessa Kriesel</author>
      <pubDate>Tue, 21 Dec 2021 13:37:49 +0000</pubDate>
      <link>https://dev.to/lacework/what-i-learned-about-the-log4j-vulnerability-17l4</link>
      <guid>https://dev.to/lacework/what-i-learned-about-the-log4j-vulnerability-17l4</guid>
      <description>&lt;p&gt;I was excited to join Lacework for many reasons, but one of the most important was that it provided me with an opportunity to teach developers about security. Developers complete many different courses and training to prepare them for their careers, but security is often an afterthought. There is a subset of us writing lines and lines of code each day, without the background knowledge to ensure that code is secure. &lt;/p&gt;

&lt;p&gt;You‚Äôve likely heard the Log4j vulnerability mentioned over the past few days, or seen the memes floating around the internet‚Äîand if you‚Äôre like me, or not a Java dev, you may be wondering what it is and why so many people are concerned about it. Distinguished Cloud Strategist &lt;a href="https://dev.to/marknca"&gt;Mark Nunnikhoven&lt;/a&gt; broke it down in an easy-to-understand &lt;a href="https://www.linkedin.com/posts/marknca_hugops-cybersecurity-log4j-activity-6876932435272101888-l8Iz/"&gt;4-minute video&lt;/a&gt;, which helped bring things into perspective. &lt;strong&gt;Log4j&lt;/strong&gt; is an open-source library that developers use to help figure out what's going on with their applications that are written in the Java programming language. The reason why you‚Äôre hearing about it now is because there was a serious security issue and attackers could easily use one of the library‚Äôs features to run their code on your systems, and those attackers want to do that to profit from your resources and data. I‚Äôve heard so much information about this over the past few days‚Äîto narrow it down for you, here the things that I think are most important for developers to know: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You‚Äôre likely only affected if &lt;strong&gt;your projects are written in Java.&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;If you use Java, you should go through your Github repositories and &lt;strong&gt;check to see if they include Log4J&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;Use an open source vulnerability scanning tool to figure out if specific systems are affected. Jfrog &lt;a href="https://github.com/jfrog/log4j-tools"&gt;released a tool&lt;/a&gt; that can help you determine if your code includes Log4j and a script that helps you &lt;strong&gt;find where Log4j is within your code&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;It‚Äôs important to understand &lt;em&gt;why&lt;/em&gt; this vulnerability is a big deal. &lt;strong&gt;The attack is so damaging because it‚Äôs constantly changing&lt;/strong&gt;‚Äîit‚Äôs not a one-time thing. Even when you think you‚Äôve resolved it, there are updates to the software and therefore more vulnerabilities and attacks. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We know what it takes to maintain software. Especially during a vulnerability. Our team believes in the power and benefits of open-source software‚Äîwe recently donated to the Log4j project committers and the Apache Foundation to support those maintainers working tirelessly behind the scenes. Hopefully this additional backing, along with the support of other developers and companies who are committed to finding a resolution, will help us reach the end of this challenge sooner rather than later. &lt;/p&gt;

&lt;p&gt;If you‚Äôre interested in learning more about the Log4j vulnerability, &lt;a href="https://dev.to/yawaramin/the-human-toll-of-log4j-maintenance-35ap"&gt;this post about the human toll of Log4j maintenance&lt;/a&gt; provides a helpful overview and timeline of what‚Äôs occurred over the past few days.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Join Lacework's DevRel today as we host a Log4j Vulnerability AMA at 10am PT&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--5s0LVIop--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1410438511237337089/ncU7VrN5_normal.jpg" alt="Lacework profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Lacework
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @lacework
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Join our &lt;a href="https://twitter.com/hashtag/Log4j"&gt;#Log4j&lt;/a&gt; Vulnerability AMA Twitter Space tomorrow at 10 am PT with Lacework‚Äôs &lt;a href="https://twitter.com/hashtag/DevRel"&gt;#DevRel&lt;/a&gt; team and security experts to learn about the vulnerability.&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/kv1N5VTIMV"&gt;twitter.com/i/spaces/1gqxv‚Ä¶&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      11:23 AM - 21 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1473252852256681985" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1473252852256681985" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1473252852256681985" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


</description>
      <category>security</category>
      <category>log4j</category>
    </item>
    <item>
      <title>Php Constant</title>
      <author>Irfan Khan</author>
      <pubDate>Tue, 21 Dec 2021 13:33:36 +0000</pubDate>
      <link>https://dev.to/irfankhan177/php-constant-1i</link>
      <guid>https://dev.to/irfankhan177/php-constant-1i</guid>
      <description>&lt;p&gt;&lt;strong&gt;1.Constants&lt;/strong&gt;&lt;br&gt;
Constants are similar to variables except that they cannot be changed or undefined after they've been defined.&lt;br&gt;
Begin the name of your constant with a letter or an underscore.&lt;br&gt;
To create a constant, use the define() function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;insensitive&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;name: Specifies the name of the constant;&lt;br&gt;
value: Specifies the value of the constant;&lt;br&gt;
case-insensitive: Specifies whether the constant name should be case-insensitive. Default is false;&lt;/p&gt;

&lt;p&gt;The example below creates a constant with a case-sensitive name:&lt;br&gt;
&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"fruit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"Apple"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//output is "Apple"&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The example below creates a constant with a case-insensitive name:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"fruit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"Apple"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//output is "Apple"&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
    </item>
    <item>
      <title>Level Up Your JavaScript With These 60 Quick Fixes for VS Code</title>
      <author>Lars Grammel</author>
      <pubDate>Tue, 21 Dec 2021 13:33:35 +0000</pubDate>
      <link>https://dev.to/lgrammel/level-up-your-javascript-with-these-60-quick-fixes-for-vs-code-5390</link>
      <guid>https://dev.to/lgrammel/level-up-your-javascript-with-these-60-quick-fixes-for-vs-code-5390</guid>
      <description>&lt;p&gt;When programming, we often edit text directly to achieve our goals. Such manual editing can be slow and error-prone. For behavior-preserving changes (refactorings), &lt;strong&gt;automation can save you time, ensure the transformation is executed correctly, and warn about potential breakages&lt;/strong&gt;. You can communicate your intention, e.g., "I want to extract this expression into a variable" more directly, and let the machine figure out the details.&lt;/p&gt;

&lt;p&gt;I've written an &lt;a href="https://marketplace.visualstudio.com/items?itemName=p42ai.refactor"&gt;extension for Visual Studio Code called P42 JavaScript Assistant&lt;/a&gt; that adds 60 automated refactorings, quick fixes, and cleanups for JavaScript and TypeScript to make your life easier. This blog post provides an overview of the different code actions and their categories. But first, here is an example of how P42 works to give you an idea of how it can help you:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fvBYifxt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/vscode/vscode-intro.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fvBYifxt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/vscode/vscode-intro.gif" alt="P42 JavaScript Assistant" width="700" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#core-refactorings"&gt;
  &lt;/a&gt;
  Core Refactorings
&lt;/h2&gt;

&lt;p&gt;Visual Study Code already contains basic refactorings such as Rename and Extract Function. P42 adds additional refactorings or extended functionality such as safety checking.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/extract-variable"&gt;Extract Variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/extract-substring-to-variable"&gt;Extract Substring into Variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/inline-variable"&gt;Inline Variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/inline-into-template"&gt;Inline into Template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/inline-return"&gt;Inline Return&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#react-refactorings-and-quick-fixes"&gt;
  &lt;/a&gt;
  React Refactorings and Quick Fixes
&lt;/h2&gt;

&lt;p&gt;In &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;, components often contain &lt;a href="https://reactjs.org/docs/introducing-jsx.html"&gt;JSX&lt;/a&gt;, a syntax extension for JavaScript. P42 provides code actions that make working with JSX and React easier:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/extract-jsx-element"&gt;Extract React Function Component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://p42.ai/documentation/code-action/add-braces-to-jsx-attribute"&gt;Add {...} to JSX Attribute&lt;/a&gt; &amp;amp; &lt;a href="https://p42.ai/documentation/code-action/remove-braces-from-jsx-attribute"&gt;Remove {...} from JSX Attribute&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://p42.ai/documentation/code-action/collapse-jsx-element"&gt;Collapse JSX Element&lt;/a&gt; &amp;amp; &lt;a href="https://p42.ai/documentation/code-action/expand-self-closing-jsx-element"&gt;Expand JSX Element&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://p42.ai/documentation/code-action/surround-with-jsx-fragment"&gt;Surround with &amp;lt;&amp;gt;...&amp;lt;/&amp;gt;&lt;/a&gt; &amp;amp; &lt;a href="https://p42.ai/documentation/code-action/remove-unnecessary-jsx-fragment"&gt;Remove Unnecessary &amp;lt;&amp;gt;...&amp;lt;/&amp;gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#ecmascript-modernizations"&gt;
  &lt;/a&gt;
  ECMAScript Modernizations
&lt;/h2&gt;

&lt;p&gt;The Javascript ecosystem is progressing rapidly, thanks to the great work of &lt;a href="https://tc39.es/"&gt;TC39&lt;/a&gt;. However, it is hard to keep codebases up-to-date with the newer JavaScript features, and codemods are not always an option due to their significant churn and potential for breakages. P42 supports both codemod-like mass code refactoring and more opportunistic code modernization for the following upgrades:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#es2015"&gt;
  &lt;/a&gt;
  ES2015
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/collapse-property-into-shorthand"&gt;Collapse Object Property into Shorthand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/convert-apply-to-spread-syntax"&gt;Convert .apply() to Use Spread Syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/convert-function-to-arrow-function"&gt;Convert Function to Arrow Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/convert-function-to-object-method"&gt;Convert Function to Object Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/convert-loop-to-for-of"&gt;Convert Loop to For...Of&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/replace-var-with-let-and-const"&gt;Convert Var to Let &amp;amp; Const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/lift-default-into-parameter"&gt;Lift Default into Parameter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://p42.ai/documentation/code-action/use-string-starts-with"&gt;Use String.startsWith()&lt;/a&gt; &amp;amp; &lt;a href="https://p42.ai/documentation/code-action/use-string-ends-with"&gt;Use String.endsWith()&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/use-template-literal"&gt;Use Template Literal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#es2016"&gt;
  &lt;/a&gt;
  ES2016
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/convert-math-pow-to-exponentiation"&gt;Convert Math.pow to Exponentiation Operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/use-array-includes"&gt;Use Array.includes()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#es2020"&gt;
  &lt;/a&gt;
  ES2020
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/use-nullish-coalescence-in-default-expression"&gt;Use Nullish Coalescence in Default Expression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/use-optional-chaining"&gt;Use Optional Chaining&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#es2021"&gt;
  &lt;/a&gt;
  ES2021
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/add-numeric-separator"&gt;Add Numeric Separator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://p42.ai/documentation/code-action/push-operator-into-assignment"&gt;Push Operator into Assignment&lt;/a&gt; (for &lt;a href="https://p42.ai/blog/2021-11-25/short-circuiting-operators-and-assignments-in-javascript"&gt;short-circuiting&lt;/a&gt; expressions)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#actions-for-logical-expressions"&gt;
  &lt;/a&gt;
  Actions for Logical Expressions
&lt;/h2&gt;

&lt;p&gt;Boolean logic can be challenging to read, especially as expressions get more complex. P42 provides several refactorings that can help you simplify and tease apart logical expressions to make them easier to understand:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/flip-operator"&gt;Flip Operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/invert-condition"&gt;Invert Condition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://p42.ai/documentation/code-action/pull-up-negation"&gt;Pull Up Negation&lt;/a&gt; &amp;amp; &lt;a href="https://p42.ai/documentation/code-action/push-down-negation"&gt;Push Down Negation&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/simplify-binary-expression"&gt;Simplify Binary Expression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/remove-double-negation"&gt;Remove Double Negation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/use-eq-eq-null"&gt;Use == null Comparison&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/extract-variable"&gt;Extract Variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/use-optional-chaining"&gt;Use Optional Chaining&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#actions-for-ifelse-statements"&gt;
  &lt;/a&gt;
  Actions for If-Else Statements
&lt;/h2&gt;

&lt;p&gt;If-else statements are a central element in many programs. Restructuring them can increase the readability of your programs, often in combination with refactoring their conditions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/lift-statement-out-of-if-else"&gt;Lift Statement Out Of If-Else&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/merge-nested-if"&gt;Merge Nested If-Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/merge-nested-else-if"&gt;Merge Nested If Inside Else into Else-If&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/separate-condition-into-nested-if"&gt;Separate Condition into Nested If&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://p42.ai/documentation/code-action/remove-empty-if-block"&gt;Remove Empty If Block&lt;/a&gt; &amp;amp; &lt;a href="https://p42.ai/documentation/code-action/remove-empty-else-block"&gt;Remove Empty Else Block&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/remove-redundant-else"&gt;Remove Redundant Else&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/convert-if-else-to-guard-clause"&gt;Convert If-Else to Guard Clause&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.todocumentation/code-action/convert-conditional-expression-to-if-else"&gt;Convert Conditional Expression to If-Else&lt;/a&gt; &amp;amp; &lt;a href="https://p42.ai/documentation/code-action/convert-if-else-to-conditional-expression"&gt;Convert If-Else into Conditional Expression&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/convert-if-else-to-switch"&gt;Convert If-Else to Switch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#syntax-conversion"&gt;
  &lt;/a&gt;
  Syntax Conversion
&lt;/h2&gt;

&lt;p&gt;It is often annoying to make small syntactical changes by editing text. Often more than one position needs to be edited, and the code is broken during the edit, leading to incorrect errors and auto-completions that get in the way. You can execute the following syntax conversions with a single P42 quick fix: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://p42.ai/documentation/code-action/add-braces-to-arrow-function"&gt;Add {...} to Arrow Function&lt;/a&gt; &amp;amp; &lt;a href="https://p42.ai/documentation/code-action/remove-braces-from-arrow-function"&gt;Remove {...} from Arrow Function&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://p42.ai/documentation/code-action/add-braces-to-jsx-attribute"&gt;Add {...} to JSX Attribute&lt;/a&gt; &amp;amp; &lt;a href="https://p42.ai/documentation/code-action/remove-braces-from-jsx-attribute"&gt;Remove {...} from JSX Attribute&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://p42.ai/documentation/code-action/collapse-jsx-element"&gt;Collapse JSX Element&lt;/a&gt; &amp;amp; &lt;a href="https://p42.ai/documentation/code-action/expand-self-closing-jsx-element"&gt;Expand JSX Element&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://p42.ai/documentation/code-action/collapse-property-into-shorthand"&gt;Collapse Object Property into Shorthand&lt;/a&gt; &amp;amp; &lt;a href="https://p42.ai/documentation/code-action/expand-shorthand-property"&gt;Expand Shorthand Property&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://p42.ai/documentation/code-action/convert-bracket-notation-property-access-to-dot-notation"&gt;Convert Property Access to Dot Notation&lt;/a&gt; &amp;amp; &lt;a href="https://p42.ai/documentation/code-action/convert-dot-notation-property-access-to-bracket-notation"&gt;Convert Property Access to Bracket Notation&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/split-variable-declaration"&gt;Split Variable Declaration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#convert-language-elements"&gt;
  &lt;/a&gt;
  Convert Language Elements
&lt;/h2&gt;

&lt;p&gt;Sometimes you want to switch to a language element that is a better fit for what you are doing. For example, a &lt;code&gt;for..of&lt;/code&gt; loop is more concise and can replace a regular for loop in many situations.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.todocumentation/code-action/convert-conditional-expression-to-if-else"&gt;Convert Conditional Expression to If-Else&lt;/a&gt; &amp;amp; &lt;a href="https://p42.ai/documentation/code-action/convert-if-else-to-conditional-expression"&gt;Convert If-Else into Conditional Expression&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://p42.ai/documentation/code-action/convert-function-to-arrow-function"&gt;Convert Function to Arrow Function&lt;/a&gt; &amp;amp; &lt;a href="https://p42.ai/documentation/code-action/convert-function-to-object-method"&gt;Convert Function to Object Method&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/convert-if-else-to-switch"&gt;Convert If-Else to Switch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://p42.ai/documentation/code-action/convert-loop-to-for-of"&gt;Convert Loop to For...Of&lt;/a&gt; &amp;amp; &lt;a href="https://p42.ai/documentation/code-action/convert-loop-to-for-each"&gt;Convert Loop to ForEach&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://p42.ai/documentation/code-action/push-operator-into-assignment"&gt;Push Operator into Assignment&lt;/a&gt; &amp;amp; &lt;a href="https://p42.ai/documentation/code-action/pull-operator-out-of-assignment"&gt;Pull Operator Out of Assignment&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://p42.ai/documentation/code-action/replace-var-with-let-and-const"&gt;Convert Var to Let &amp;amp; Const&lt;/a&gt; &amp;amp; &lt;a href="https://p42.ai/documentation/code-action/convert-let-to-const"&gt;Convert Let to Const&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#code-cleanups"&gt;
  &lt;/a&gt;
  Code Cleanups
&lt;/h2&gt;

&lt;p&gt;Code cleanups remove unnecessary code. Such code can result from code churn, e.g., by applying other refactorings, adding new features, or fixing bugs. P42 shows hints and automates the cleanup for the following situations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/remove-double-negation"&gt;Remove Double Negation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://p42.ai/documentation/code-action/remove-empty-if-block"&gt;Remove Empty If Block&lt;/a&gt; &amp;amp; &lt;a href="https://p42.ai/documentation/code-action/remove-empty-else-block"&gt;Remove Empty Else Block&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/remove-redundant-else"&gt;Remove Redundant Else&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/remove-unnecessary-conditional-expression"&gt;Remove Unnecessary Conditional Expression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/remove-unnecessary-expression-statement"&gt;Remove Unnecessary Expression Statement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/remove-unnecessary-jsx-fragment"&gt;Remove Unnecessary JSX Fragment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/remove-unnecessary-template"&gt;Remove Unnecessary Template Literal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/simplify-binary-expression"&gt;Simplify Binary Expression&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#other-actions"&gt;
  &lt;/a&gt;
  Other Actions
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/insert-console-log"&gt;Insert console.log for Variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p42.ai/documentation/code-action/surround-with-try-catch"&gt;Surround with Try-Catch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you find these refactorings &amp;amp; actions useful, you can install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=p42ai.refactor"&gt;&lt;strong&gt;P42 JavaScript Assistant&lt;/strong&gt; from the VS Code marketplace&lt;/a&gt;.&lt;br&gt;
For feedback and updates, you can find P42 on &lt;a href="https://twitter.com/p42ai"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/company/p42-software/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>vscode</category>
      <category>typescript</category>
    </item>
    <item>
      <title>I Ran Away From Open Source</title>
      <author>Louis Grenard</author>
      <pubDate>Tue, 21 Dec 2021 13:33:24 +0000</pubDate>
      <link>https://dev.to/louistiti/i-ran-away-from-open-source-c2a</link>
      <guid>https://dev.to/louistiti/i-ran-away-from-open-source-c2a</guid>
      <description>&lt;p&gt;üëã Hey all, I mentioned in the previous blog posts that I'd share the reasons of my missing over the last few years, the vision I have for &lt;a href="https://github.com/leon-ai/leon"&gt;Leon&lt;/a&gt;, your open-source personal assistant, and more about what is going through my mind. So now is the time, let's get started!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-lost-focus"&gt;
  &lt;/a&gt;
  I Lost Focus
&lt;/h3&gt;

&lt;p&gt;In June 2019 I released the second beta version of Leon. On that moment, I was in a dynamic mindset that I wanted to build anything I had in mind. It was not exclusive to Leon. I went to bed, keep thinking about solutions to solve problems I was facing in life.&lt;/p&gt;

&lt;p&gt;I discovered the IoT world via my work on that time. It was fascinating. I love the whole concept of it. Building scalable architecture and most of all: pressing virtual or physical buttons to trigger actions that create physical impact on the other side of the globe.&lt;/p&gt;

&lt;p&gt;Back in time, I created our own IoT pipeline using Microsoft Azure. I built the PKI to deliver and verify devices certificates. It was possible to control devices (send messages, invoke methods, etc.) from a web browser to the device. And it was also possible for devices to request the cloud and handle millions of connections thanks to the IoT hub and device provisioning service. All the data were handled via a stream analytics processor and landed into a data lake like CosmosDB and can also replicate important data to a PostgreSQL one if necessary. The main protocol between our cloud and devices was AMQP, but MQTT was also supported.&lt;/p&gt;

&lt;p&gt;At that time, I wanted to build anything that was going through my mind, everyday. Well, we can say &lt;strong&gt;I lost focus&lt;/strong&gt;. In such interesting and noisy world where there are infinite of possibilities, staying focus is maybe one of the hardest thing to do.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-missing"&gt;
  &lt;/a&gt;
  My Missing
&lt;/h3&gt;

&lt;p&gt;On top of that, I was questionning my career. I wanted to explore new horizons.&lt;/p&gt;

&lt;p&gt;Also, having a girlfriend with an entrepreneurship mindset does not help. I wanted to show her real results. We all know how challenging it is to express what we are doing or share what we are able to do with someone who isn't in the tech industry.&lt;/p&gt;

&lt;p&gt;So I got trapped into the &lt;strong&gt;ego building&lt;/strong&gt; circle...&lt;/p&gt;

&lt;p&gt;Here is a list of the major things I did during my missing and the benefits I got for each of them:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2audio"&gt;
  &lt;/a&gt;
  2aud.io
&lt;/h4&gt;

&lt;p&gt;I built a SaaS that converts URLs (web scraping), documents and text files into audio.&lt;/p&gt;

&lt;p&gt;It was supporting 159 types of voice and 30 languages. I launched the private alpha version, collected feedback, got 230+ emails on the waiting list. Then I stopped for whatever reason.&lt;/p&gt;

&lt;p&gt;What's cool here is I may inject the core of 2aud.io into a Leon module. So Leon could read any resource for us like a podcast.&lt;/p&gt;





&lt;p&gt;&lt;strong&gt;Benefits&lt;/strong&gt;: strengthen my A to Z building skill.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#youtube-videos-community"&gt;
  &lt;/a&gt;
  YouTube Videos + Community
&lt;/h4&gt;

&lt;p&gt;I published web development videos on my &lt;a href="https://www.youtube.com/c/LouistitiFr"&gt;French YouTube channel&lt;/a&gt;, started a Node.js course by going in depth but with a language that everyone can understand, etc.&lt;/p&gt;

&lt;p&gt;Around that I put together a community with a Discord server. Today there are still 670+ applications lining up...&lt;/p&gt;

&lt;p&gt;In that community people started to build projects together to learn more about web development. I'd say 33% of the people where changing their career path to software engineering. It was composed of people with good experience and newcomers in the tech industry. This variety of profiles created interesting discussions.&lt;/p&gt;

&lt;p&gt;People were sharing their projects progress during monthly calls we were organizing. We were warmly welcoming new fellows with proper calls too.&lt;/p&gt;

&lt;p&gt;And we were working on our own projects during some immersive call sessions. The idea was to work during an hour in a row by muting microphones. Then we enabled back the mic to share our last hour progress and help each other if necessary for a few minutes. Then we kept going.&lt;/p&gt;

&lt;p&gt;Stay tuned because &lt;strong&gt;I'd love to recreate the same model of community but around Leon!&lt;/strong&gt; If you are interested in that then feel free to &lt;a href="https://www.getrevue.co/profile/leon"&gt;subscribe to the newsletter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learned how to build a private and active community from the green grass.&lt;/li&gt;
&lt;li&gt;Learned video making and video animation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#computer-vision"&gt;
  &lt;/a&gt;
  Computer Vision
&lt;/h4&gt;

&lt;p&gt;In December 2020, I challenged myself to learn a bit about computer vision within two days. To get started with this field that was new to me I trained a deep learning model that was recognizing rubik's cubes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ksqJf-ev--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.getleon.ai/static/ef9a8ce6d80394f1cc3369e947c070ac/0ede0/cv-rubiks-cube-1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ksqJf-ev--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.getleon.ai/static/ef9a8ce6d80394f1cc3369e947c070ac/0ede0/cv-rubiks-cube-1.jpg" alt="Rubik's cube recognition 1" width="880" height="436"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LZF-7aKr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.getleon.ai/static/00ae88c3558b671f91591ab3885d43ec/0ede0/cv-rubiks-cube-2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LZF-7aKr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.getleon.ai/static/00ae88c3558b671f91591ab3885d43ec/0ede0/cv-rubiks-cube-2.jpg" alt="Rubik's cube recognition 2" width="880" height="484"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then I created a PoC that was recognizing shapes on a whiteboard in the purpose of generating a UIDL to automatically create web components.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vPMY_wvf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.getleon.ai/static/c058a6215f050fa946e248fbc2459eb0/40601/aliframe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vPMY_wvf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.getleon.ai/static/c058a6215f050fa946e248fbc2459eb0/40601/aliframe.png" alt="Aliframe" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, waaay more data were needed and my time was very limited so the model wasn't super accurate.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Improved my learning skill.&lt;/li&gt;
&lt;li&gt;Today Leon has ears and mouth, why not add eyes later on? :)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Every benefit listed above will definitely help in my Leon journey.&lt;/p&gt;

&lt;p&gt;In 2020 I also ran a French web agency with a friend on the side of my job and mainly worked on a streaming platform with a customer who is managing French celebrities. Then I started to create a mobile application with React Native to help a relative. Here too, my React Native experience will help Leon growth, I let you think of the possibilities... Hence, by coming back on Leon, I migrated nodes (docs from VuePress to Docusaurus; the website from Nuxt.js to Next.js and this blog from Hexo to Gatsby) to the React ecosystem.&lt;/p&gt;

&lt;p&gt;I tried and learned many new things along the way. However, I knew my ultimate goal was to get back on track with Leon and make sure that I'm not missing anything I would like to explore more.&lt;/p&gt;

&lt;p&gt;You know what my biggest fear is? It is to be on my death bed, look back and regret to not even try and accomplish my goals. Sooner I realized it is not by focusing on so many things like this that I'm gonna escape that fear.&lt;/p&gt;

&lt;p&gt;Today I'm glad to say that I joined the Alibaba Group on the Lazada business several months ago. Don't worry, this does not mean I will have less time to work on Leon. Back in time, I was able to release the first beta version of Leon by having my full-time job. Organization is key.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-found-back-my-whys"&gt;
  &lt;/a&gt;
  I Found Back my Whys
&lt;/h3&gt;

&lt;p&gt;I needed to &lt;strong&gt;refocus on the why&lt;/strong&gt; of Leon before to refocus on the technical part. Why am I creating Leon? Why did I even get started at the first place?&lt;/p&gt;

&lt;p&gt;Here is how I see it: there is a &lt;strong&gt;practical why&lt;/strong&gt;, and a &lt;strong&gt;deep why&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#practical-why"&gt;
  &lt;/a&gt;
  Practical Why
&lt;/h4&gt;

&lt;p&gt;This why is specific to the project itself. What problems is Leon solving?&lt;/p&gt;

&lt;p&gt;The answer of this why is the value/result of what the outside world will see and use. You can take a look at the &lt;a href="https://docs.getleon.ai/#motivations"&gt;motivations here&lt;/a&gt;. And you can continue to read to the next section to know more.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#deep-why"&gt;
  &lt;/a&gt;
  Deep Why
&lt;/h4&gt;

&lt;p&gt;This one is a bit more personal. It is my source of energy to solve the practical why. It is the fuel of my practical why.&lt;/p&gt;

&lt;p&gt;To answer, I'd say:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I like solving problems, but most importantly the "how" I solve them is what makes me move forward. This is not specific to programming. It also requires talking with people, doing some so-called "marketing", designing, overall thinking, and more.&lt;/li&gt;
&lt;li&gt;Sharing your creations with the world is so exciting because you can let your blueprint behind you. The tech industry is very pleasant for that: you face an issue, you think of a way to solve it, then you can "quickly" build something to fix it and share it.&lt;/li&gt;
&lt;li&gt;Having my own vision and driving towards the direction that I have chosen allows me to discover and learn new fields.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#vision-for-leon"&gt;
  &lt;/a&gt;
  Vision for Leon
&lt;/h3&gt;

&lt;p&gt;Earlier this year I questionned myself to get back on track:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pjq24v2Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.getleon.ai/static/097a7553b9a4ef7cff30eedbda5bfdb3/0ede0/leon-questions.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pjq24v2Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.getleon.ai/static/097a7553b9a4ef7cff30eedbda5bfdb3/0ede0/leon-questions.jpg" alt="Leon questions" width="880" height="1160"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S7Ofx3By--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.getleon.ai/static/8fec152ef177fc04ab95fb7ca4bc31f1/0ede0/leon-keys.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S7Ofx3By--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.getleon.ai/static/8fec152ef177fc04ab95fb7ca4bc31f1/0ede0/leon-keys.jpg" alt="Leon keys" width="880" height="1159"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What I dream of for Leon is that we can interact with him via different clients (mobile, desktop, customized hardware, etc.). Today with the growth of voice and NLP technologies, it becomes way more accessible to create powerful personal/virtual assistant.&lt;/p&gt;

&lt;p&gt;With my IoT experience, I will also bring this field to Leon so we can do home automation and more.&lt;/p&gt;

&lt;p&gt;I'd like to bring a social aspect too. At the moment I prefer not to disclose this part.&lt;/p&gt;

&lt;p&gt;We can even imagine of using AR and/or VR, but that is a long term thing.&lt;/p&gt;

&lt;p&gt;The whole idea is that Leon becomes your virtual brain so he can handle all your virtual troubles and makes you feel that the technology disappears somehow.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#focus"&gt;
  &lt;/a&gt;
  Focus
&lt;/h4&gt;

&lt;p&gt;To do so, here are the big lines:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;strong&gt;core of Leon needs to be more powerful&lt;/strong&gt;. So I will be focusing on this part from now on. Like a way to easily support multi languages, create widgets, add support of JavaScript modules, etc. Check the &lt;a href="http://roadmap.getleon.ai/"&gt;roadmap&lt;/a&gt; to see more.&lt;/li&gt;
&lt;li&gt;Leon needs to &lt;strong&gt;cover most of the basic use cases of existing closed source assistants&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Growing the community&lt;/strong&gt;. I paused the project for too long. And without an active community, Leon cannot grow fast. I want to put together a special community of creative people like I mentioned earlier in this post.&lt;/li&gt;
&lt;li&gt;I have some ideas in mind that will &lt;strong&gt;make Leon smarter&lt;/strong&gt;. But I will keep those in the private roadmap at the moment and disclose them when the time comes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Along with the vision, a rebranding was necessary to have a atmosphere that aligns with the vision of Leon. You can take a look at a &lt;a href="https://getleon-ai.vercel.app/"&gt;preview of the new landing page here&lt;/a&gt;. In a next blog post I'll talk more about this rebranding. Explaining the reasons behind the "outter space" atmosphere and more...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap Up
&lt;/h3&gt;

&lt;p&gt;With all that said, the direction of Leon is quite clear. &lt;strong&gt;I've been missing working on Leon so much!&lt;/strong&gt; Today we can start again and move forward in a healthy way. Also, I'd like to use this moment to thanks all the &lt;a href="https://github.com/leon-ai/leon#-sponsors"&gt;sponsors&lt;/a&gt; and &lt;a href="https://vercel.com/?utm_source=leon-ai&amp;amp;utm_campaign=oss"&gt;Vercel&lt;/a&gt; for recently sponsoring Leon üñ§ &lt;/p&gt;

&lt;p&gt;It feels good to be back!&lt;/p&gt;

&lt;p&gt;I recently opened my GitHub Sponsor so you can now &lt;a href="http://sponsor.getleon.ai/"&gt;sponsor me on GitHub&lt;/a&gt; and get some perks.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>webdev</category>
      <category>news</category>
    </item>
    <item>
      <title>Optional: Handling NullPointer Graciously</title>
      <author>yash sugandh</author>
      <pubDate>Tue, 21 Dec 2021 13:30:53 +0000</pubDate>
      <link>https://dev.to/yashsugandh/optional-handling-nullpointer-graciously-107j</link>
      <guid>https://dev.to/yashsugandh/optional-handling-nullpointer-graciously-107j</guid>
      <description>&lt;p&gt;We all know about a billion dollar mistake known as the &lt;strong&gt;NullPointer Reference&lt;/strong&gt;, we all have regular encounters with Null Pointer and sometimes even had to face the wrath of &lt;strong&gt;NullPointer Exception&lt;/strong&gt;. The topic we are going to look into today &lt;strong&gt;Optional&lt;/strong&gt; is going to provide us a way to handle this issue much more graciously. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-optional-and-why-was-it-introduced"&gt;
  &lt;/a&gt;
  What is Optional and why was it introduced?
&lt;/h3&gt;

&lt;p&gt;Optional is class introduced in Java 8 under &lt;code&gt;java.util&lt;/code&gt; package that allows us to avoid NullPointer Exception that we encounter a lot of times.&lt;/p&gt;

&lt;p&gt;Optional provides us a way to check and use whether a value is null or not .This way we can save ourself from the wrath of NullPointers and handle them in a way that is &lt;strong&gt;elegant, easy to use and maintain&lt;/strong&gt; i.e. without using a ton of if-else everywhere to check if an object is null or not.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-can-we-find-optional-being-used"&gt;
  &lt;/a&gt;
  Where can we find Optional being used?
&lt;/h3&gt;

&lt;p&gt;Now we all know that we should never return null from a method, right?&lt;/p&gt;

&lt;p&gt;If you are one of those people who return null from a method and you know who you are don't hide it, please refrain from doing so.&lt;/p&gt;

&lt;p&gt;Jokes aside, there are other scenarios where we are not sure if we will receive a value or not, such as when we use Streams &lt;code&gt;findfirst()&lt;/code&gt; method i.e. a method that returns the first value of a Stream if the Stream is non-empty so there is possibility a value may not be returned in case the Stream is empty hence an Optional is returned.&lt;/p&gt;

&lt;p&gt;Another example that we generally use is the &lt;code&gt;findById()&lt;/code&gt; method which is used to get the data from database on the bases of an &lt;strong&gt;id&lt;/strong&gt; so the method may not return a value in case Id is not found in database hence provides us with an optional.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-do-we-create-an-optional"&gt;
  &lt;/a&gt;
  How do we create an Optional?
&lt;/h3&gt;

&lt;p&gt;There are three different ways of creating an Optional&lt;/p&gt;

&lt;p&gt;1.Creating an empty Optional&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Optional.empty()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The above method creates an empty Optional i.e. an optional with no value inside&lt;/p&gt;

&lt;p&gt;2.Creating an Optional some non null value &lt;br&gt;
&lt;code&gt;Optional.of(10)&lt;/code&gt; &lt;br&gt;
&lt;code&gt;Optional.of("abcd")&lt;/code&gt;&lt;br&gt;
and so on&lt;/p&gt;

&lt;p&gt;We can create Optional with different type of values integer, string or an object.&lt;/p&gt;

&lt;p&gt;For the cases where values can also be null we have the following&lt;/p&gt;

&lt;p&gt;3.Creating an Optional which can also contain null value&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Optioanl.ofNullable(10)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Optional.ofNullable(null)&lt;/code&gt;&lt;br&gt;
and so on.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Optional.ofNullable()&lt;/code&gt; can be used in the cases where there is a possibility of the value being a null reference. &lt;/p&gt;

&lt;p&gt;Now that we know how to create Optionals the next step is to check whether an Optional contains a value or not&lt;/p&gt;

&lt;p&gt;1.isPresent()&lt;/p&gt;

&lt;p&gt;In Java 8 the best way to check whether an Optional has a value or not is to use the method &lt;code&gt;isPresent()&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;This method structure is as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   public boolean isPresent() {
        return value != null;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The method return us a boolean after checking if a value is present inside an Optional or not.&lt;/p&gt;

&lt;p&gt;It returns a true if a value is present otherwise it returns false.&lt;/p&gt;

&lt;p&gt;Let's look at example on how to use the method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   final Optional&amp;lt;Integer&amp;gt; optionalInteger = Optional.of(10);
   final Optional&amp;lt;Object&amp;gt; emptyOptional = Optional.empty();

   System.out.println(emptyOptional.isPresent());
   System.out.println(optionalInteger.isPresent());
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output for &lt;strong&gt;emptyOptional&lt;/strong&gt; is be false and the &lt;strong&gt;optionalInteger&lt;/strong&gt; is true.&lt;/p&gt;

&lt;p&gt;2.isEmpty()&lt;/p&gt;

&lt;p&gt;In Java 11 another method was introduced for checking whether optional contains a value or not.&lt;/p&gt;

&lt;p&gt;This method structure is as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    public boolean isEmpty() {
        return value == null;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If a value is not present it returns true, otherwise it returns false.&lt;/p&gt;

&lt;p&gt;Let's look at example on how to use the &lt;code&gt;isEmpty()&lt;/code&gt; method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; final Optional&amp;lt;Integer&amp;gt; optionalInteger = Optional.of(10);
 final Optional&amp;lt;Object&amp;gt; emptyOptional = Optional.empty();
 System.out.println(emptyOptional.isEmpty());
 System.out.println(optionalInteger.isEmpty());
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output for &lt;strong&gt;emptyOptional&lt;/strong&gt; is be true and the &lt;strong&gt;optionalInteger&lt;/strong&gt; is false.&lt;/p&gt;

&lt;p&gt;From what we can see from examples both the &lt;code&gt;isPresent()&lt;/code&gt; and &lt;code&gt;isEmpty()&lt;/code&gt; work in kind of similar manner except that one checks whether the value is present in Optional and other checks for whether the Optional is empty or not.&lt;/p&gt;

&lt;p&gt;So based on the requirement we have we can use either or those.&lt;/p&gt;

&lt;p&gt;There are cases where we want to perform an operation if the value is present.&lt;/p&gt;

&lt;p&gt;In this scenario we can of course use the combination of &lt;code&gt;if(isPresent())&lt;/code&gt; but this will just lead us back to how we use to deal with null references before Optional using if-else statement which we don't want to do.&lt;/p&gt;

&lt;p&gt;So for use cases like this we have a method &lt;/p&gt;

&lt;p&gt;3.ifPresent()&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ifPresent()&lt;/code&gt; method will only execute the operation if the Optional contains some non null value.&lt;/p&gt;

&lt;p&gt;This method structure is as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    public void ifPresent(Consumer&amp;lt;? super T&amp;gt; action) {
        if (value != null) {
            action.accept(value);
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The method does not return anything and what it takes as a parameter is a &lt;code&gt;Consumer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's take an example on how to use &lt;code&gt;ifPresent()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; final Optional&amp;lt;Integer&amp;gt; optionalInteger = Optional.of(10);

 optionalInteger.ifPresent(integer -&amp;gt; System.out.println(integer + 10));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above we can see that the output will only be printed if the value is present and in other cases no output will be printed&lt;/p&gt;

&lt;p&gt;What if we want to print something or execute a different function if Optional does not contain any value?&lt;/p&gt;

&lt;p&gt;4.ifPresentOrElse()&lt;/p&gt;

&lt;p&gt;Introduced in Java 9, the &lt;code&gt;ifPresentOrElse()&lt;/code&gt; allows us to provide an alternative in which even if the Optional is empty we can perform an action&lt;/p&gt;

&lt;p&gt;This method structure is as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    public void ifPresentOrElse(Consumer&amp;lt;? super T&amp;gt; action, Runnable emptyAction) {
        if (value != null) {
            action.accept(value);
        } else {
            emptyAction.run();
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So if a value is present, it will perform the given action with the value, otherwise it will perform the given empty-based action.&lt;/p&gt;

&lt;p&gt;Let's take an example on how to use &lt;code&gt;ifPresentOrElse()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    final Optional&amp;lt;Object&amp;gt; emptyOptional = Optional.empty();

    emptyOptional.ifPresentOrElse(
        val -&amp;gt; System.out.println("The value present inside the optional is  " + val),
        () -&amp;gt; System.out.println("The optional is empty"));

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example we can see that the method will print the value if it is present else it will print "The optional is empty".&lt;/p&gt;

&lt;p&gt;Till now we have various methods that help us in checking whether the value is present or not bu what if we want to use the value.&lt;/p&gt;

&lt;p&gt;1.get()&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NEVER USE THIS METHOD&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;get()&lt;/code&gt; as the name suggest tries to get the value from the Optional and if the value is not present it will throw a &lt;strong&gt;NoSuchElementException&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Using this method after checking if the value is present or not is still considerable but using it without even checking defeats the whole purpose of using the Optional in the first place.&lt;/p&gt;

&lt;p&gt;The method structure is as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; public T get() {
   if (value == null) {
        throw new NoSuchElementException("No value present");
      }
        return value;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Methods that can be used instead of &lt;code&gt;get()&lt;/code&gt; if you just want to access the value inside the Optional are&lt;/p&gt;

&lt;p&gt;2.orElse()&lt;/p&gt;

&lt;p&gt;One of the way is that we can provide a default value to be used in case no value is found inside the Optional.&lt;/p&gt;

&lt;p&gt;The method structure is as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    public T orElse(T other) {
        return value != null ? value : other;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the name suggests the method &lt;code&gt;orElse()&lt;/code&gt; will return the value if a value is present inside the Optional if no value is present we can provide a &lt;strong&gt;default value&lt;/strong&gt; i.e. "other" parameter to be returned.&lt;/p&gt;

&lt;p&gt;Let's look at an example on how to use &lt;code&gt;orElse()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; final Optional&amp;lt;Object&amp;gt; emptyOptional = Optional.empty();

 System.out.println(emptyOptional.orElse(10));
System.out.println(emptyOptional.orElse(generateRandomNumber()));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example the first output will display &lt;strong&gt;10&lt;/strong&gt; as the Optional we used is an &lt;strong&gt;emptyOptional&lt;/strong&gt; so the default value we passed in orElse() will be used and for the second print statement a default value will be provide from the method "generateRandomNumber()".&lt;/p&gt;

&lt;p&gt;Another way we can get value without worrying about "NoSuchElementException" is &lt;/p&gt;

&lt;p&gt;3.orElseGet()&lt;/p&gt;

&lt;p&gt;The method &lt;code&gt;orElseGet()&lt;/code&gt; is very similar to the method we saw above &lt;code&gt;orElse()&lt;/code&gt;. We can provide both a default value directly as well call a function to provide us with a value.&lt;/p&gt;

&lt;p&gt;The method structure is as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    public T orElseGet(Supplier&amp;lt;? extends T&amp;gt; supplier) {
        return value != null ? value : supplier.get();
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see that the method &lt;code&gt;orElseGet()&lt;/code&gt; takes in a Supplier as an input which is used in cases where Optional does not contain any value.&lt;/p&gt;

&lt;p&gt;The difference between the structure of &lt;code&gt;orElse()&lt;/code&gt; and &lt;code&gt;orElseGet()&lt;/code&gt; is clear that orElse method accepts a generic parameter T where as orElseGet method accepts a supplier.&lt;/p&gt;

&lt;p&gt;Let's look at an example on how to use &lt;code&gt;orElseGet()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; final Optional&amp;lt;Object&amp;gt; emptyOptional = Optional.empty();

  System.out.println(emptyOptional.orElseGet(() -&amp;gt; 10));
  System.out.println(emptyOptional.orElseGet(() -&amp;gt; generateRandomNumber()));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example the first output will display &lt;strong&gt;10&lt;/strong&gt; as the Optional we used is an &lt;strong&gt;emptyOptional&lt;/strong&gt; so the default value we passed in orElseGet() will be used and for the second print statement a default value will be provide from the method "generateRandomNumber()".&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-difference-between-raw-orelse-endraw-and-raw-orelseget-endraw-"&gt;
  &lt;/a&gt;
  The difference between &lt;code&gt;orElse()&lt;/code&gt; and &lt;code&gt;orElseGet()&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;We were able to see that on the surface both the methods look and works almost the same but structure wise &lt;code&gt;orElse&lt;/code&gt; uses the generic parameter where as the &lt;code&gt;orElseGet&lt;/code&gt; uses the Supplier.&lt;/p&gt;

&lt;p&gt;The major difference between the two method which impacts the performance is when we use &lt;code&gt;orElse&lt;/code&gt; even in the cases where the default value is not used it will be created and stored in memory but in case of &lt;code&gt;orElseGet&lt;/code&gt; it will only be created if and when needed.&lt;/p&gt;

&lt;p&gt;If the default value is a simple int it may not such a big difference but imagine the cases where a method is being called it will not only take a place in call stack but also has the ability to affect the performance.&lt;/p&gt;

&lt;p&gt;Another case that may be possible is when we do not want to provide a default value but we want to throw an error in case a value is not present in Optional.&lt;/p&gt;

&lt;p&gt;4.orElseThrow()&lt;/p&gt;

&lt;p&gt;There are 2 different variants of orElseThow&lt;/p&gt;

&lt;p&gt;1.Default variant&lt;/p&gt;

&lt;p&gt;Introduced in Java 10 the default variant of &lt;code&gt;orElseThrow&lt;/code&gt; works similar to how get() works i.e. if will check whether an element is present or not and if an element is not present it will throw and "NoSuchElementException".&lt;/p&gt;

&lt;p&gt;The structure is as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  public T orElseThrow() {
     if (value == null) {
        throw new NoSuchElementException("No value present");
      }
     return value;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The difference between the&lt;code&gt;get()&lt;/code&gt; and &lt;code&gt;orElseThrow()&lt;/code&gt; method is that even though internally both will throw the same "NoSuchElementException" exception when a value is not present, the person going through the code will be able to understand that method &lt;code&gt;orElseThrow&lt;/code&gt; can throw an error by just looking at its name where as in the method &lt;code&gt;get&lt;/code&gt; it will be a side-effect.&lt;/p&gt;

&lt;p&gt;Let's look at an example on how to use &lt;code&gt;orElseThrow()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    final Optional&amp;lt;Object&amp;gt; emptyOptional = Optional.empty();

    emptyOptional.orElseThrow();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example we can see that an "NoSuchElementException" will be thrown.&lt;/p&gt;

&lt;p&gt;2.Parameterized variant&lt;/p&gt;

&lt;p&gt;Introduced in Java 8, in this variant we can define the error we want to throw if no value is present inside the Optional.&lt;/p&gt;

&lt;p&gt;The structure is as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    public &amp;lt;X extends Throwable&amp;gt; T orElseThrow(Supplier&amp;lt;? extends X&amp;gt; exceptionSupplier) throws X {
        if (value != null) {
            return value;
        } else {
            throw exceptionSupplier.get();
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's look at an example on how to use &lt;code&gt;orElseThrow()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   final Optional&amp;lt;Object&amp;gt; emptyOptional = Optional.empty();

    emptyOptional.orElseThrow(IllegalStateException::new);
    emptyOptional.orElseThrow(() -&amp;gt; new IllegalStateException("Data Not Found"));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example we can see that an "IllegalStateException" will be thrown if value is not present in Optional.&lt;/p&gt;

&lt;p&gt;We can either create an exception with default constructor or we can also pass in a message.&lt;/p&gt;

&lt;p&gt;Now we have gone through &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to create an Optional&lt;/li&gt;
&lt;li&gt;How to check if an Optional contains any value or not&lt;/li&gt;
&lt;li&gt;How to proceed if an Optional has a value &lt;/li&gt;
&lt;li&gt;How to provide a default value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What if we want to transform a value inside an Optional&lt;/p&gt;

&lt;p&gt;For the purpose of transformation Optional provides us with various functions such as map, flatmap and filter.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-an-optional"&gt;
  &lt;/a&gt;
  When To Use an Optional
&lt;/h2&gt;

&lt;p&gt;1.Return Value&lt;br&gt;
Optional is suitable to be a return value where expected that a value may or may not be present.&lt;/p&gt;

&lt;p&gt;For example the &lt;code&gt;findById&lt;/code&gt; method or the &lt;code&gt;findFirst&lt;/code&gt; method. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#when-not-to-use-an-optional"&gt;
  &lt;/a&gt;
  When Not To Use an Optional
&lt;/h2&gt;

&lt;p&gt;1.As a parameter&lt;/p&gt;

&lt;p&gt;I have seen some cases where someone has used Optional as a parameter of a method&lt;/p&gt;

&lt;p&gt;For example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  public void function1(Optional&amp;lt;Integer&amp;gt; val){
    if (val.isPresent()){
      function2(val);
    }else{
      function3();
    }
  } 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above we can see that optional is being misused.&lt;/p&gt;

&lt;p&gt;Issues in the above example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Single Responsibility Principle is being violated&lt;/li&gt;
&lt;li&gt;The parent function should have handled the choice instead of the child function&lt;/li&gt;
&lt;li&gt;Why would you want to check if a parameter exists or not, instead why not create 2 separate functions for each use case &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2.Wrapping a collection such as ArrayList in Optional&lt;/p&gt;

&lt;p&gt;I have seen some cases where an ArrayList is being passed wrapped inside an Optional and later is being checked where it is empty or not&lt;/p&gt;

&lt;p&gt;I don't know why would someone do it, if you want to check a collection is empty or not than there are already methods created for it so why would you need to wrap a collection in Optional.&lt;/p&gt;

&lt;p&gt;Let me know if you have some more use cases of when and when not use an Optional.&lt;/p&gt;

&lt;p&gt;See you in the funny papers üöÄ&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>computerscience</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
