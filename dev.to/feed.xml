<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>TypeScript is the Only Programming Language you Need to Learn. One language to rule them all!</title>
      <author>Remi W.</author>
      <pubDate>Tue, 12 Oct 2021 15:15:49 +0000</pubDate>
      <link>https://dev.to/ixartz/typescript-is-the-only-programming-language-you-need-to-learn-one-language-to-rule-them-all-1jb9</link>
      <guid>https://dev.to/ixartz/typescript-is-the-only-programming-language-you-need-to-learn-one-language-to-rule-them-all-1jb9</guid>
      <description>&lt;p&gt;TypeScript has become extremely popular among JavaScript developers and more and more projects use it as the primary programming language.&lt;/p&gt;

&lt;p&gt;Today, most frameworks or libraries have support for TypeScript, which makes it easy to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#typescript-everywhere"&gt;
  &lt;/a&gt;
  TypeScript Everywhere
&lt;/h2&gt;

&lt;p&gt;JavaScript/TypeScript can be executed on every platform. You can now use TypeScript for all your projects without any limitation: one programming language to rule them all!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7JV9B02r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/typescript-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7JV9B02r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/typescript-logo.png" alt="TypeScript programming language logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It also means you only need to learn one programming language for all your projects. For any senior developer learning a new programming language isn't difficult but the time to master one is time-consuming.&lt;/p&gt;

&lt;p&gt;You only need to use one ecosystem: one package manager, one linter, one code formatter, etc. You only need to configure once and share it across all your projects. Saving you a ton of time ;)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typescript-for-frontend"&gt;
  &lt;/a&gt;
  TypeScript for Frontend
&lt;/h3&gt;

&lt;p&gt;The most used framework to build user interfaces is React and Vue.js. Both now support TypeScript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lLYetDe8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/react-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lLYetDe8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/react-logo.png" alt="React frontend logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm a React developer, I won't be able to say much about Vue.js. But when I started to use TypeScript with React, it wasn't an easy process because I was doing two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learning TypeScript&lt;/li&gt;
&lt;li&gt;Applying TypeScript in React context&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the beginning, you'll definitively lose your time &lt;em&gt;fighting&lt;/em&gt; against TypeScript. But, once you understand the basics, it makes your developer life much easier. It helps you to write better code with fewer errors.&lt;/p&gt;

&lt;p&gt;I like to write small components and you should too if you want to make your React code more modular. By using TypeScript on top of React components makes the code easy to navigate and maintain.&lt;/p&gt;

&lt;p&gt;You can check out some React components written in TypeScript at this &lt;a href="https://github.com/ixartz/Next-js-Boilerplate" rel="noopener noreferrer"&gt;React Boilerplate&lt;/a&gt; repository. You can start your React projects with all modern tools like React, Next JS, TypeScript, Tailwind CSS with great tooling like ESLint, Prettier and Husky configured for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FIzRONs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/nextjs-boilerplate-tech-stack.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FIzRONs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/nextjs-boilerplate-tech-stack.png" alt="Next JS boilerplate tech stack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typescript-for-backend"&gt;
  &lt;/a&gt;
  TypeScript for Backend
&lt;/h3&gt;

&lt;p&gt;In the past, you need to write in different programming languages for the frontend and backend. The backend was mostly written in Java, PHP, Ruby, etc.&lt;/p&gt;

&lt;p&gt;It makes the development experience not so great and the developers need to do a lot of context switching between frontend development and backend. The experience wasn't unified.&lt;/p&gt;

&lt;p&gt;Node JS made it possible to write backend code with JavaScript. You can now write your REST API in the same language as your frontend.&lt;/p&gt;

&lt;p&gt;Not only do you get the same development tools for both environments, but you can also even share the same code between your two environments. You don't need to write the same logic twice.&lt;/p&gt;

&lt;p&gt;There are some edge cases where you aren't able to share the code due to the nature of the platform. Some packages or some APIs can only work in the browser. So, you couldn't run it with Node JS. On the opposite, some packages can only work in Node JS. This case is extremely rare but you need to be aware of it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tLUpU0Kf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/serverless-framework-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tLUpU0Kf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/serverless-framework-logo.png" alt="Serverless framework AWS lambda"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7dEgbYjc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/express-js-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7dEgbYjc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/express-js-logo.png" alt="Express js serverless"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have also build a &lt;a href="https://github.com/ixartz/Serverless-Boilerplate-Express-TypeScript" rel="noopener noreferrer"&gt;Serverless Express JS Boilerplate&lt;/a&gt; to quickly create a Serverless backend REST API faster with everything configured: TypeScript supports, Offline support, automatic reload, ESLint, Prettier, Husky, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typescript-for-infra-as-code"&gt;
  &lt;/a&gt;
  TypeScript for Infra as Code
&lt;/h3&gt;

&lt;p&gt;Several years ago, I used to rent a dedicated server to host my full-stack application based on the LAMP stack. It wasn't an easy task to manually configure everything from scratch.&lt;/p&gt;

&lt;p&gt;First, you need to install the dependencies, secure your server, update the configuration file, etc. The most annoying thing is to maintain it.&lt;/p&gt;

&lt;p&gt;The Infrastructure as Code (IaC) was the ideal solution to solve this issue. It makes the process smoother using definition files. For someone with a developer background, you want to version control your infrastructure resources and remove the repetitive task when configuring several servers. The IaC is the perfect tool.&lt;/p&gt;

&lt;p&gt;With recent development, a new wave of IaC has emerged where you can use your favorite programming language instead of using configuration/definition files. Recently, I started to use AWS CDK with TypeScript to define my cloud resources.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5iXu2dpw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/aws-cdk-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5iXu2dpw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/aws-cdk-logo.png" alt="AWS CDK infrastructure as code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS CDK makes learning extremely easy: you don't need to learn a new tool and new ecosystem. You can still use your favorite JavaScript package manager, tooling and it works perfectly well with your favorite editor (my favorite one is VSCode 😜). Because I use it with TypeScript, I know when there is an error or when I misuse a function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typescript-for-mobile-development"&gt;
  &lt;/a&gt;
  TypeScript for Mobile Development
&lt;/h3&gt;

&lt;p&gt;With hybrid application and React Native, JavaScript isn't limited to the web application. You can now start building iOS and Android applications with JavaScript. So, you can now use TypeScript without any issue to create your future apps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pidaoH2X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/react-native-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pidaoH2X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/react-native-logo.png" alt="React native TypeScript logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, I'm not able to share much about mobile development with TypeScript. In the past, I've done some native mobile development on iOS in objective-C (pretty old school, before Swift) but not on React Native.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Zgrfd8Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/expo-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Zgrfd8Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/expo-logo.png" alt="Expo JS React native logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If I had the opportunity to make a mobile development, I'll definitively try React Native with TypeScript because I'm already familiar with React and TypeScript. I hope it makes the process easier and smoother. And on top of that, I also want to use Expo, a React Native framework. The framework seems to be very promising and it's considering a NextJS-like for mobile development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typescript-for-machine-learning"&gt;
  &lt;/a&gt;
  TypeScript for Machine Learning
&lt;/h3&gt;

&lt;p&gt;Even if Python has a much larger ecosystem and community, you can also use TypeScript for Machine Learning. I've built a small OCR using React and Tensorflow.js for digits number.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--We8pEzNQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/tensorflow-js-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--We8pEzNQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/tensorflow-js-logo.png" alt="Machine learning TypeScript with Tensorflow.js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The user can draw any number on the screen and the application can guess the input. Here is an example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mvf6w9bQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://creativedesignsguru.com/assets/images/themes/digit-recognition-tensorflow-react.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mvf6w9bQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://creativedesignsguru.com/assets/images/themes/digit-recognition-tensorflow-react.gif" alt="Digit recognition with Tensorflow JS and React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's possible to train the model directly inside the browser, but the result wasn't great. It was slow to train the model and the accuracy of the prediction drop. You should train your model on a more powerful computer and only load the trained model when needed.&lt;/p&gt;

&lt;p&gt;It's still great to have the ability to run a machine learning model directly inside your browser, it makes your integration into your existing project easier.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In conclusion
&lt;/h2&gt;

&lt;p&gt;TypeScript can now be used everywhere and make the development much smoother with only one programming language to learn. No more context switching between programming language and all the stack is unified.&lt;/p&gt;

&lt;p&gt;If you are building a SaaS product and want this unified experience, you can try &lt;a href="https://nextlessjs.com"&gt;Next JS SaaS&lt;/a&gt; to start your TypeScript projects in seconds. We handle all the boring things for you like Auth, Payment, Landing Page, User Dashboard, form and error handling, database, CRUD operation, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextlessjs.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1qKLlCI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/nextless-react-saas-boilerplate.png" alt="Next JS SaaS Boilerplate Starter"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to print "Hello, World!"💻</title>
      <author>Aditya Priyadarshi</author>
      <pubDate>Tue, 12 Oct 2021 15:02:17 +0000</pubDate>
      <link>https://dev.to/foxy4096/how-to-print-hello-world-3ah4</link>
      <guid>https://dev.to/foxy4096/how-to-print-hello-world-3ah4</guid>
      <description>&lt;p&gt;Printing "Hello, World!" is a kind of ritual that start the journey every programmer.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GTKwMN_9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aknuugvj65jto2votbnx.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GTKwMN_9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aknuugvj65jto2votbnx.JPG" alt="DSC00019"&gt;&lt;/a&gt;&lt;br&gt;
According to Wikipedia:&lt;br&gt;
A "Hello, World!" program generally is a computer program that outputs or displays the message "Hello, World!". Such a program is very simple in most programming languages, and is often used to illustrate the basic syntax of a programming language. It is often the first program written by people learning to code.&lt;/p&gt;

&lt;p&gt;In this post I will show you how to print &lt;code&gt;"Hello, World!"&lt;/code&gt; in Python&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;small&gt;This is first post and I am scared&lt;/small&gt;&lt;/small&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#step-1-download-and-install-python-skip-this-step-if-you-have-already-installed-it"&gt;
  &lt;/a&gt;
  Step 1: Download and Install Python [skip this step if you have already installed it]
&lt;/h1&gt;

&lt;p&gt;Just head to &lt;a href="https://python.org/download/"&gt;https://python.org/download/&lt;/a&gt; and download the install the program supported by your os, i.e. .msi for windows and .dmg for mac &lt;/p&gt;

&lt;p&gt;In the windows you have to tick the check box saying Add Python3.xx to path&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1msuNZBx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nyrn71vwy39tme34y8a4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1msuNZBx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nyrn71vwy39tme34y8a4.jpg" alt="An image showing to check the box add to path in windows installer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For Linux you have to open an application named terminal and type the following command, make sure you are connected to internet and have &lt;code&gt;sudo&lt;/code&gt; privilege.&lt;/p&gt;

&lt;p&gt;Command to install python on Linux&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;python3.8
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-2-writing-the-program"&gt;
  &lt;/a&gt;
  Step 2: Writing the program
&lt;/h1&gt;

&lt;p&gt;Open a suitable text editor of your choice and type the following code and save it in &lt;code&gt;.py&lt;/code&gt; extension&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are printing the "Hello, World!" with &lt;code&gt;print&lt;/code&gt; function.&lt;br&gt;
It is a built-in function in python which helps to print thing in the console window&lt;/p&gt;

&lt;p&gt;If you wish you can skip this section&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;print&lt;/code&gt; function have the following arguments&lt;/p&gt;

&lt;p&gt;&lt;code&gt;print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Prints the values to a stream, or to sys.stdout by default.&lt;br&gt;
Optional keyword arguments:&lt;br&gt;
file:  a file-like object (stream); defaults to the current sys.stdout.&lt;br&gt;
sep:   string inserted between values, default a space.&lt;br&gt;
end:   string appended after the last value, default a newline.&lt;br&gt;
flush: whether to forcibly flush the stream.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#step-3-running-the-program"&gt;
  &lt;/a&gt;
  Step 3: Running the program
&lt;/h1&gt;

&lt;p&gt;In windows, open the folder in where is your program is located and press &lt;code&gt;shift + right click&lt;/code&gt; to open the context menu and select the &lt;code&gt;Open with powershell&lt;/code&gt; option&lt;/p&gt;

&lt;p&gt;In Linux/Unix, open the folder in where is your program is located and press &lt;code&gt;right click&lt;/code&gt; to open the context menu and select the &lt;code&gt;Open in Terminal&lt;/code&gt; option&lt;/p&gt;

&lt;p&gt;Now in the terminal type the following command&lt;/p&gt;

&lt;p&gt;For Windows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python app.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For Linux/Mac&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python3 app.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following thing will be print&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;So that was a simple tutorial on how to print "Hello, World!" in Python.&lt;br&gt;
Well then see you all next time.&lt;/p&gt;

&lt;p&gt;Peace ✌&lt;/p&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>$10M to optimize Kubernetes: CAST AI raises Series A and extends support to top 3 cloud providers</title>
      <author>CAST AI</author>
      <pubDate>Tue, 12 Oct 2021 14:17:00 +0000</pubDate>
      <link>https://dev.to/castai/10m-to-optimize-kubernetes-cast-ai-raises-series-a-and-extends-support-to-top-3-cloud-providers-52dj</link>
      <guid>https://dev.to/castai/10m-to-optimize-kubernetes-cast-ai-raises-series-a-and-extends-support-to-top-3-cloud-providers-52dj</guid>
      <description>&lt;p&gt;To deliver on our promise of fully automated cloud cost optimization for Kubernetes, we &lt;strong&gt;raised $10 million in a Series A round &lt;/strong&gt;led by the San Francisco-based &lt;a href="https://www.cotacapital.com/"&gt;Cota Capital&lt;/a&gt;, with &lt;a href="https://www.samsungnext.com/"&gt;Samsung Next&lt;/a&gt; and other investors participating.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Managing cloud deployments effectively to control costs has become a priority for organizations of all sizes, &lt;/p&gt;
&lt;cite&gt; Bobby Yazdani, Cota Capital founder, and partner&lt;/cite&gt;
&lt;/blockquote&gt;

&lt;p&gt;"We are excited to partner with the CAST AI team, as we believe in the company’s ability to address cloud-native optimization challenges," he added.&lt;/p&gt;

&lt;p&gt;And there's more news we'd like to share. CAST AI platform now supports all three major cloud service providers: Amazon Web Services, Google Cloud Platform, and Microsoft Azure.&lt;/p&gt;

&lt;h2&gt;Cloud cost management industry is ripe for disruption&lt;/h2&gt;

&lt;p&gt;In 2020 alone, companies around the world spent $17 billion of unnecessary cloud expenses due to inefficient tool selection and the inability to intelligently scale capacity to match the changing application requirements. &lt;/p&gt;

&lt;p&gt;Our platform solves this problem by using AI and machine learning to save our clients between 60% and 90% of total annual cloud expenditures for businesses in industries such as e-commerce, adtech, fintech, data analytics, cybersecurity, and SaaS application delivery. &lt;/p&gt;

&lt;p&gt;The new funding round will accelerate our product development initiatives in this direction.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We are thrilled to have Cota Capital lead our Series A round. As we continue on our mission to utilize artificial intelligence for optimizing cloud deployments, we will use the additional funds to further accelerate development and delivery of our platform and provide real and measurable value to our customers.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;Yuri Frayman, CAST AI co-founder and CEO&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;"The adoption of Kubernetes continues to grow as containers and microservice architecture become the defacto standard to serve modern applications at scale," said Raymond Liao, Managing Director, Samsung Next. "Our team is thrilled to participate in CAST AI's latest round, as the company advances its quest to make Infrastructure as a Service (IaaS) more efficient and on budget."&lt;/p&gt;

&lt;h2&gt;Towards autonomous Kubernetes&lt;/h2&gt;

&lt;p&gt;Our approach revolves around optimizing and autonomously managing Kubernetes for any cloud service. By connecting existing clusters to our platform with a single click, our users get a free instant savings report and instantly find cost-saving opportunities. CAST AI analyzes and learns more about the company's cloud environment to identify the resources required for maximum performance.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;With CAST AI, our applications are using a more efficient combination of cloud services, and we have already reduced our annualized cloud costs by millions of dollars. &lt;/p&gt;
&lt;cite&gt;Mark Weiler, SVP Engineering at Branch.io&lt;/cite&gt;
&lt;/blockquote&gt;

&lt;p&gt;The core value of CAST AI lies in complete automation that allows users to define their own optimization settings to handle low-level optimizations without any extra work for DevOps engineers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Curious to see optimization for your cloud in action? Join us at KubeCon &amp;amp; CloudNativeCon North America from October 13th through October 16th, 2021! &lt;a href="https://kubecon-cloudnativecon-na.com/virtual-exhibitor/?v0326b739525aaf6a5900c153ea6485e67109462e8db159b156161fc07c7e3d8016769932b4c0398e64b5ea52edb3d1c5=BF5652C502BBD106EFFEE4BD82C0EA0B6A6407578F8E39CF161E2FA105DC764D0466954DD8D33A026C364D8C16D58221" rel="noreferrer noopener"&gt;Visit our booth virtually&lt;/a&gt; or in-person if you’re attending the event.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>news</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Full Stack E-Commerce App (+8 hours free tutorial)</title>
      <author>Safak</author>
      <pubDate>Tue, 12 Oct 2021 14:11:38 +0000</pubDate>
      <link>https://dev.to/safak/full-stack-e-commerce-app-8-hours-free-tutorial-10pb</link>
      <guid>https://dev.to/safak/full-stack-e-commerce-app-8-hours-free-tutorial-10pb</guid>
      <description>&lt;p&gt;Hi, I'm Safak. I am a full-stack web developer and I'm sharing open source web projects on my YouTube channel. I want to share my +8 hours "MERN Stack E-Commerce App with an Admin Dashboard" tutorial for free. You can reach the playlist from &lt;a href="https://www.youtube.com/watch?v=c1xTDSIXit8&amp;amp;list=PLj-4DlPRT48mxPG8TAXOH4qqQ1ijuERO4"&gt;here&lt;/a&gt;. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-technologies-are-used"&gt;
  &lt;/a&gt;
  What technologies are used?
&lt;/h2&gt;

&lt;h6&gt;
  &lt;a href="#backend-server-nodejs-express-framework-jwt"&gt;
  &lt;/a&gt;
  Backend Server: Node.js Express Framework, JWT
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#database-mongodb"&gt;
  &lt;/a&gt;
  Database: MongoDB
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#payment-method-stripe-api"&gt;
  &lt;/a&gt;
  Payment Method: Stripe API
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#frontend-framework-reactjs-with-hooks"&gt;
  &lt;/a&gt;
  Front-End Framework: React.js with hooks
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#ui-library-styled-components"&gt;
  &lt;/a&gt;
  UI library: Styled Components
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#state-management-library-redux"&gt;
  &lt;/a&gt;
  State Management Library: Redux
&lt;/h6&gt;




&lt;h2&gt;
  &lt;a href="#design-part-of-the-ecommerce-app"&gt;
  &lt;/a&gt;
  Design Part of the E-Commerce App
&lt;/h2&gt;

&lt;p&gt;In this section, we are going to design an e-commerce app using React.js functional components, hooks and Styled Components. For now, we are going to be using a dummy data to display products but in the last part we'll fetch all data from MongoDb using a Rest API&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/c1xTDSIXit8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backend-part-of-the-ecommerce-app"&gt;
  &lt;/a&gt;
  Back-End Part of the E-Commerce App
&lt;/h2&gt;

&lt;p&gt;In this section, we are going to create a Rest API using Express server with MongoDB connection and create necessary models and routes in order to handle CRUD operations. We'll provide the security using JWT and authenticate and authorize users. And also you'll see how easy to get payment using Stripe API&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stripe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stripe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STRIPE_KEY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/payment&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;stripe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charges&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tokenId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;usd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stripeErr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stripeRes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stripeErr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stripeErr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stripeRes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rMiRZ1iRC0A"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mern-stack-part-of-the-ecommerce-app"&gt;
  &lt;/a&gt;
  MERN Stack Part of the E-Commerce App
&lt;/h2&gt;

&lt;p&gt;In this section, we are going to combine the API with the UI Design and make our application dynamic. We'll fetch data and make POST requests using &lt;strong&gt;axios&lt;/strong&gt;. And also we'll be covering &lt;strong&gt;Redux Toolkit&lt;/strong&gt; in depth.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createSlice&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@reduxjs/toolkit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;productSlice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSlice&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;product&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;products&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="na"&gt;isFetching&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//GET ALL&lt;/span&gt;
    &lt;span class="na"&gt;getProductStart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFetching&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;getProductSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFetching&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;//DELETE&lt;/span&gt;
    &lt;span class="na"&gt;deleteProductStart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFetching&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;deleteProductSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFetching&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;//UPDATE&lt;/span&gt;
    &lt;span class="na"&gt;updateProductStart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFetching&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;updateProductSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFetching&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;//ADD&lt;/span&gt;
    &lt;span class="na"&gt;addProductStart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFetching&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;addProductSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFetching&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFetching&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/y66RgYMAgSo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I hope it was useful. If you want to learn more about web development and practice with real-world projects, you can check out my channel and other posts.&lt;/p&gt;

&lt;p&gt;📺 &lt;a href="https://dev.to/safak/full-stack-netflix-app-7-hours-free-tutorial-1o6l"&gt;Full Stack Netflix App (+7 Hours free tutorial)&lt;/a&gt;&lt;br&gt;
🧑‍🤝‍🧑 &lt;a href="https://dev.to/safak/social-media-app-using-mern-stack-4ic6"&gt;Full Stack Social Media App (+7 Hours free tutorial)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔥 &lt;a href="https://www.youtube.com/c/lamadev"&gt;Lama Dev YouTube Channel&lt;/a&gt;&lt;br&gt;
⚡️ &lt;a href="https://www.facebook.com/groups/lamadev"&gt;Lama Dev Facebook&lt;/a&gt;&lt;br&gt;
👾 &lt;a href="https://github.com/safak/youtube/tree/mern-ecommerce-app"&gt;Source Code&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
    </item>
    <item>
      <title>How To Implement Heatmap In Tables Using Directives In Angular</title>
      <author>Adithya Sreyaj</author>
      <pubDate>Tue, 12 Oct 2021 14:11:37 +0000</pubDate>
      <link>https://dev.to/angular/how-to-implement-heatmap-in-tables-using-directives-in-angular-2f60</link>
      <guid>https://dev.to/angular/how-to-implement-heatmap-in-tables-using-directives-in-angular-2f60</guid>
      <description>&lt;p&gt;Let's see how easy it is to add heatmaps to tables in Angular using Directives. We'll go for a really simple and elegant solution to have separate heatmap colors to different columns in the table.&lt;/p&gt;

&lt;p&gt;As I always say, Directives are a really powerful feature of Angular. It can be used as an elegant solution to implement a lot of cool functionalities. You can clearly see why the directive approach makes more sense when you reach the end of the post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#heatmaps-in-table"&gt;
  &lt;/a&gt;
  Heatmaps in table
&lt;/h2&gt;

&lt;p&gt;Even though it's not that often we see heatmaps in tables, but heatmaps can really add some value in terms of visualization. It would make sense in data sets where there is some kind of comparison or range.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uxiMR6oa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q835doonjic4o3cloq85.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uxiMR6oa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q835doonjic4o3cloq85.png" alt="Table with Heatmap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-directives"&gt;
  &lt;/a&gt;
  Why Directives?
&lt;/h2&gt;

&lt;p&gt;If you have this question in mind, here are some reasons which justify why creating a directive for implementing this feature will make sense.&lt;br&gt;
The logic can be completely moved outside of the component, making it simpler and leaner. If the logic is separated from the component, that means it's more reusable.&lt;br&gt;
When something is built in a re-usable manner, it will be easy to scale and maintain.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#heatmap-logic"&gt;
  &lt;/a&gt;
  Heatmap Logic
&lt;/h2&gt;

&lt;p&gt;For implementing this functionality let's look at what exactly needs to be done here. So basically, heatmaps give the user idea of the magnitude of something by variation in color or hue.&lt;/p&gt;

&lt;p&gt;So If we have a set of numbers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here based on the value we can manipulate the intensity of a color. Meaning &lt;code&gt;1&lt;/code&gt; will be the lightest shade of the color and &lt;code&gt;10&lt;/code&gt; will be the color itself. So we just need to map the values to the intensity of the colors here. We can also have the opposite condition as well.&lt;/p&gt;

&lt;p&gt;There are different ways to implement this. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-using-alpha-channel"&gt;
  &lt;/a&gt;
  1. Using Alpha Channel
&lt;/h3&gt;

&lt;p&gt;We can easily implement heatmaps using &lt;strong&gt;RGBA&lt;/strong&gt; or &lt;strong&gt;HSLA&lt;/strong&gt; by just changing the alpha channel meaning the transparency of the color.&lt;/p&gt;

&lt;p&gt;I am not going with this approach as we are also trying to generate accessible text colors based on the background color. This will ensure the text will remain readable for all the color stops.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-using-hsl-color-expression"&gt;
  &lt;/a&gt;
  2. Using HSL Color Expression
&lt;/h3&gt;

&lt;p&gt;Here I am gonna be using HSL color expression to easily get the right color for each value by manipulating the &lt;code&gt;L (Lightness)&lt;/code&gt; parameter. &lt;br&gt;
&lt;strong&gt;HSL&lt;/strong&gt; is a really good way to express colors and manipulating the colors is very easy with it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HSL&lt;/strong&gt; stands for &lt;code&gt;Hue&lt;/code&gt; &lt;code&gt;Saturation&lt;/code&gt; &lt;code&gt;Lightness&lt;/code&gt; and it can also have an &lt;code&gt;Alpha&lt;/code&gt; channel with &lt;strong&gt;HSLA&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So the idea here is to find the &lt;code&gt;Lightness&lt;/code&gt; factor for each value. Here's how we can do it.&lt;/p&gt;

&lt;p&gt;So here the original color value is first parsed to HSLA:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hsla(234, 77%, 46%, 1)&lt;/code&gt; --&amp;gt; &lt;code&gt;Lightness = 46%&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We have the min possible value for Lightness ie 0.46. So the highest value will have a lightness of &lt;code&gt;46%&lt;/code&gt; and for other values, it will be higher. When lightness increases it moves nearer to &lt;code&gt;White&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is the formula:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#1b2dd0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseHSLA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- [234, 0.77,0.46,1]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;highestValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;maxLightness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- 1 - 0.46 = 0.54&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lightness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;maxLightness&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;highestValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// 1 --&amp;gt; 1 - (1 * 0.54 / 10) = (1 - 0.05) ~ 95% &lt;/span&gt;
&lt;span class="c1"&gt;// 5 --&amp;gt; 1 - (5 * 0.46 / 10) = (1 - 0.23) ~ 77%&lt;/span&gt;
&lt;span class="c1"&gt;// 10 -&amp;gt; 1 - (10 * 0.54 / 10) = (1 - 0.54) ~ 46%&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here 10 will be the lowest number and hence we need a very light color so 95% will make it very light.&lt;br&gt;
Lightness % as it increases makes the color whiter.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dhmN8_to--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0nmoynd38w87o48epet.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dhmN8_to--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0nmoynd38w87o48epet.png" alt="Lightness Palette"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So now we have the logic in place, let's start with the directives!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-heatmap-directives"&gt;
  &lt;/a&gt;
  Creating Heatmap Directives
&lt;/h2&gt;

&lt;p&gt;So I mentioned "Directives" (plural) as we will be creating multiple directives for this functionality. To be specific 3 of them. Out of the 3, two of them are just for tagging the element and setting some metadata:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Heatmap Table&lt;/li&gt;
&lt;li&gt;Heatmap Column&lt;/li&gt;
&lt;li&gt;Heatmap Cell&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is how we will use the directives in the template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;heatMapTable&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Company&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Manager&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;[heatMapColumn]=&lt;/span&gt;&lt;span class="s"&gt;"options.employees"&lt;/span&gt;  &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"employees"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Employees
    &lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;[heatMapColumn]=&lt;/span&gt;&lt;span class="s"&gt;"options.contractors"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"contractors"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Contractors
    &lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ng-container&lt;/span&gt; &lt;span class="na"&gt;*ngFor=&lt;/span&gt;&lt;span class="s"&gt;"let item of data"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{ item.company }}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{ item?.manager }}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;[heatMapCell]=&lt;/span&gt;&lt;span class="s"&gt;"item.employees"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"employees"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
         {{ item?.employees }}
      &lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;[heatMapCell]=&lt;/span&gt;&lt;span class="s"&gt;"item.contractors"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"contractors"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        {{ item?.contractors }}
      &lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ng-container&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#heatmap-cell-directive"&gt;
  &lt;/a&gt;
  Heatmap Cell Directive
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[heatMapCell]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;HeatmapCellDirective&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;heatMapCell&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;heatMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;colId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ElementRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have an input to pass the value into the directive and also accept the id of the column to which the cell belongs in the table. We inject the &lt;code&gt;ElementRef&lt;/code&gt; so that we can manipulate the element later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#heatmap-column-directive"&gt;
  &lt;/a&gt;
  Heatmap Column Directive
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[heatMapColumn]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;HeatmapColumnDirective&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;colId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;heatMapColumn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we can pass options for styling like the color etc and also the id of the column.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#heatmap-table-directive"&gt;
  &lt;/a&gt;
  Heatmap Table Directive
&lt;/h3&gt;

&lt;p&gt;This is the main directive where all the work is done. This directive is placed on the table. And the other directives are placed on the column and the cells.&lt;/p&gt;

&lt;p&gt;Here we can see how we can access child directives from the parent directive using &lt;a href="https://angular.io/api/core/ContentChildren#description"&gt;ContentChildren&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[heatMapTable]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;HeatmapTableDirective&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;AfterViewInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ContentChildren&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HeatmapCellDirective&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;descendants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;heatMapCells&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;QueryList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HeatmapCellDirective&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- Get all the cells&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ContentChildren&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HeatmapColumnDirective&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;descendants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;heatMapColumns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;QueryList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HeatmapColumnDirective&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- Get all the columns&lt;/span&gt;

  &lt;span class="nx"&gt;highestValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
  &lt;span class="nl"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HeatmapCellDirective&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nl"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HeatmapColumnDirective&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

  &lt;span class="nx"&gt;ngAfterViewInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;heatMapCells&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;heatMapColumns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setOptions&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calculateHighestValues&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applyHeatMap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;setOptions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;col&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;col&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colId&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;col&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;calculateHighestValues&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;colId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;heatMap&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;highestValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;colId&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;highestValues&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;colId&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heatMap&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;highestValues&lt;/span&gt;&lt;span class="p"&gt;?.[&lt;/span&gt;&lt;span class="nx"&gt;colId&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;highestValues&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;colId&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heatMap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;applyHeatMap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;bgColor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;heatMap&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bgColor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bgColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;getColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;textColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bgColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseToHsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;maxLightness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;percentage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;maxLightness&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;highestValues&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lightness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;bgColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;lightness&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;textColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;readableColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bgColor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;bgColor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;textColor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me break down the code.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#get-access-to-the-cells-and-columns"&gt;
  &lt;/a&gt;
  Get access to the cells and columns
&lt;/h4&gt;

&lt;p&gt;We get access to the cells to which the heatmap needs to be applied:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ContentChildren&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HeatmapCellDirective&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;descendants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;heatMapCells&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;QueryList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HeatmapCellDirective&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;code&gt;heatMapCells&lt;/code&gt; variable will have the list of &lt;code&gt;td&lt;/code&gt; to which the &lt;code&gt;heatMapCell&lt;/code&gt; was applied. Make sure to set &lt;code&gt;{ descendants: true }&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note: If true include all descendants of the element. If false then only query direct children of the element.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#save-the-options-for-each-column"&gt;
  &lt;/a&gt;
  Save the options for each column
&lt;/h4&gt;

&lt;p&gt;We can save the options provided for each column in an object. Currently, we are only configuring the color, but this object can be used for all kinds of different options for customizing the heatmap for each column.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;employees&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#000fff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;contractors&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#309c39&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#calculate-the-highest-value-for-each-column"&gt;
  &lt;/a&gt;
  Calculate the Highest Value for each column
&lt;/h4&gt;

&lt;p&gt;We can now calculate the highest value for each column and save it in an object with the &lt;code&gt;colId&lt;/code&gt; as the key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;highestValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;employees&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1239&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;contractors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;453&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#applying-the-heatmap-styles"&gt;
  &lt;/a&gt;
  Applying the Heatmap styles
&lt;/h4&gt;

&lt;p&gt;We can now loop through the cells and then apply &lt;code&gt;backgroundColor&lt;/code&gt; and &lt;code&gt;color&lt;/code&gt; to the cell. Since we have injected the &lt;code&gt;ElementRef&lt;/code&gt; in the cell, we can use the &lt;code&gt;el&lt;/code&gt; property to modify styles:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have a helper function which finds the color for each cell based on the logic we have discussed above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;getColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;textColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bgColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseToHsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;maxLightness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;percentage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;maxLightness&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;highestValues&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lightness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;bgColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;lightness&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;textColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;readableColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bgColor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;bgColor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;textColor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The color manipulation is done using a super simple library &lt;code&gt;color2k&lt;/code&gt; which provides a lot of utilities to mess with colors.&lt;/p&gt;

&lt;p&gt;We have used something called &lt;code&gt;readableColor()&lt;/code&gt; which returns black or white for best contrast depending on the luminosity of the given color. This will make our heatmap more accessible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo-and-code"&gt;
  &lt;/a&gt;
  Demo and Code
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/angular-ivy-ohdjff?embed=1&amp;amp;view=preview&amp;amp;" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackblitz.com/edit/angular-ivy-ohdjff?file=src/app/heatmap.directive.ts"&gt;Stackblitz Link&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;As you can see, there is not much code in the component. All the logic is beautifully handled inside the directive. The only complex stuff going on in the directive is finding the colors. Everything else is straightforward.&lt;/p&gt;

&lt;p&gt;This is a very basic implementation and not perfect too. To make it better, we might have to add some validation and error handling as well. Also, this can be extended by providing more options like Ascending/Descending heatmaps, color ranges, positive and negative heatmaps, and more.&lt;/p&gt;

&lt;p&gt;The whole idea of the blog post is to showcase how a directive can be used for implementing this feature.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  Connect with me
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/AdiSreyaj"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/adisreyaj"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/adithyasreyaj/"&gt;Linkedin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://compito.adi.so"&gt;Compito&lt;/a&gt; - Open source project management app&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.buymeacoffee.com/adisreyaj"&gt;Buy Me a Pizza&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do add your thoughts in the comments section.&lt;br&gt;
Stay Safe ❤️&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>angular</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Hacktoberfest ASCII Art</title>
      <author>Adrino Rosario</author>
      <pubDate>Tue, 12 Oct 2021 14:04:18 +0000</pubDate>
      <link>https://dev.to/adrinorosario/hacktoberfest-ascii-art-1cbp</link>
      <guid>https://dev.to/adrinorosario/hacktoberfest-ascii-art-1cbp</guid>
      <description>&lt;p&gt;ASCII art is intriguing and wonderful, yet feels sophisticated to create, especially by writing code. But it's not. &lt;/p&gt;

&lt;p&gt;Here is an open-source ASCII Art Generator project written in Python3 that can help you in understanding ASCII Art. You can find it at: &lt;a href="https://github.com/adrinorosario/ASCII_Art"&gt;https://github.com/adrinorosario/ASCII_Art&lt;/a&gt; . Do contribute to it if you find it helpful and star it on GitHub.&lt;/p&gt;

&lt;p&gt;ASCII art or keyboard art is a copy-pasteable digital age art form. It's about making text pictures with text symbols. Basically, the computer identifies each pixel in an image or images and then fills them with a character (example- $), based on various factors like density of pixels, color, etc.&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>python</category>
      <category>opensource</category>
      <category>github</category>
    </item>
    <item>
      <title>Big O Notation as a Mid-Level Developer Who Has Been Avoiding It Since Bootcamp: Arrays and Time Complexity</title>
      <author>Thuy Doan</author>
      <pubDate>Tue, 12 Oct 2021 13:41:15 +0000</pubDate>
      <link>https://dev.to/clearlythuydoan/big-o-notation-as-a-mid-level-developer-who-has-been-avoiding-it-since-bootcamp-arrays-and-time-complexity-np8</link>
      <guid>https://dev.to/clearlythuydoan/big-o-notation-as-a-mid-level-developer-who-has-been-avoiding-it-since-bootcamp-arrays-and-time-complexity-np8</guid>
      <description>&lt;p&gt;At the beginning of this year, I was promoted to intermediate developer 🎊&lt;/p&gt;

&lt;p&gt;At your company, that might be an IC2 - or whichever level is after your entry level developer, but right before the senior developer. In any case, I was now at a place in my career where computer science fundamentals needed to be stronger compared to the beginning when I could just throw myself into building things with what I learned in full-stack Javascript bootcamp.&lt;/p&gt;

&lt;p&gt;I decided I needed to better understand data structures and be more comfortable with algorithms. Not because I wanted to leetcode more. I really don't want to leetcode more. But I couldn't shake the feeling that I would be better off if I understood more why data structure A over data structure B.&lt;/p&gt;

&lt;p&gt;So I reached out to a friend for help and this is what I've learned 🤓&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-did-i-know-about-big-o-notation"&gt;
  &lt;/a&gt;
  What did I know about Big O notation?
&lt;/h2&gt;

&lt;p&gt;My mental model of Big O has always been this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1)&lt;/strong&gt; A unit of measurement&lt;br&gt;
&lt;strong&gt;2)&lt;/strong&gt; Related to computer science that&lt;br&gt;
&lt;strong&gt;3)&lt;/strong&gt; Describes the complexity of things&lt;/p&gt;

&lt;p&gt;From here, I needed to understand &lt;em&gt;why&lt;/em&gt;? 💭&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-must-we-measure-the-complexity-of-things"&gt;
  &lt;/a&gt;
  Why must we measure the complexity of things?
&lt;/h2&gt;

&lt;p&gt;As developers, we deal with data. &lt;/p&gt;

&lt;p&gt;Sometimes not very much of it, like on a static website. Sometimes a whole lot of it. The multi-millions of users kind. And most of the time, that data is not in a format that we need and we need to manipulate it. Sort it, filter it, or find something. Sometimes we even need to change it into an entirely different format! And how efficiently we do that matters at scale.&lt;/p&gt;

&lt;p&gt;What's also true is that there are many ways to solve a problem. This is especially true in programming. You can then think of Big O notation as a way to describe how efficient a solution is relative to another one.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-types-of-big-o-notation-are-there"&gt;
  &lt;/a&gt;
  What types of Big O notation are there?
&lt;/h2&gt;

&lt;p&gt;In this post, we'll focus just on the types that apply to arrays but know there are a number of them that you can see below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--POTr4wHv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/MDd1Nj0/Screen-Shot-2021-10-11-at-8-49-03-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--POTr4wHv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/MDd1Nj0/Screen-Shot-2021-10-11-at-8-49-03-PM.png" alt="Graph depicting different big o notation time complexities with O(n!), O(2^n), O(n^2) as horrible; O(n log n) as bad; O(n) as fair; and O(log n) or O(1) between good and excellent"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Source: &lt;a href="https://www.bigocheatsheet.com/"&gt;Big O Cheatsheet&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For arrays, you can have 2 types of time complexities (or Big O):&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1)&lt;/strong&gt; Constant time or O(1)&lt;br&gt;
&lt;strong&gt;2)&lt;/strong&gt; Linear time or O(n)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0dXRfE69--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/h26791X/Screen-Shot-2021-10-11-at-8-55-27-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0dXRfE69--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/h26791X/Screen-Shot-2021-10-11-at-8-55-27-PM.png" alt="Table with two columns with headings: Operation and Time Complexity, respectively. Under Operation, it lists 4 items: Searching, Access, Insertion, and Removal. Under Time Complexity, we have O(N) or linear time for searching; O(1) or constant time for access; O(N) for insertion unless it's inserting something at the end of the array, in which case it is O(1) or constant time; and lastly, O(N) for removal unless removing something at the end of the array, in which case it is also O(1) or constant time."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Source: &lt;a href="https://www.youtube.com/watch?v=jyGYhHOnFzU&amp;amp;ab_channel=KodingKevin"&gt;Big O Notation for Arrays by KodinKevin on YouTube&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With Big O, the n refers to the amount of data you are working with. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#practical-examples"&gt;
  &lt;/a&gt;
  Practical Examples
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#example-a-kanto-starter-pokemon"&gt;
  &lt;/a&gt;
  Example A. Kanto Starter Pokemon
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jM5U6ABF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/originals/d9/0e/5f/d90e5f91087da1b1faf2939b30d7b1ab.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jM5U6ABF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/originals/d9/0e/5f/d90e5f91087da1b1faf2939b30d7b1ab.png" alt="Kanto Starter Pokemon. There's a cute orange lizard, a grassy type of creature that has a flower bulb and walks on all fours, and a blue turtle that looks cheerful."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's say you're building a Pokemon app and you have an array of Pokemon.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;kantoStarters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Charmander&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bulbasaur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Squirtle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you know the index of Squirtle in the array, you can access it by simply doing &lt;code&gt;kantoStarters[index]&lt;/code&gt;. If this was instead an array of all 151 Kanto Pokemon, the number of steps it takes to access a Pokemon at a known index will be the &lt;strong&gt;same&lt;/strong&gt; as when there were only 3 starter Pokemon because you can go directly to the index of the Pokemon. Hence, access in an array is considered &lt;strong&gt;constant time&lt;/strong&gt; - also known as O(1).&lt;/p&gt;

&lt;p&gt;Because constant time takes the least number of steps to complete an operation, it is considered the most efficient. Check that first graph out again!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-b-all-kanto-pokemon"&gt;
  &lt;/a&gt;
  Example B. All Kanto Pokemon
&lt;/h3&gt;

&lt;p&gt;Let's say instead of knowing where exactly to look for a Pokemon in an array, we have to flip through it like a clothing rack at the mall or files in a filing cabinet. In this case, it would take at worst as many steps as there are Pokemon. Remember that n in Big O notation stands for the amount of data we are working with. So should we have to look through an unordered array of all 151 Pokemon to find a Psyduck it would take us O(n) steps. This is called &lt;strong&gt;linear time&lt;/strong&gt; because given more data we take proportionately more steps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f9O9Dn5n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/66/8a/8c/668a8cccacc792924fa588b4adca8f68.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f9O9Dn5n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/66/8a/8c/668a8cccacc792924fa588b4adca8f68.gif" alt="Animation of flipping back and forth through a book"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point, since constant time - or O(1) - takes a constant amount of steps, no matter the amount of data versus linear time - or O(n) - which takes proportionately more steps when given more data, we can say that constant time is faster or more efficient than linear time 💨&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-c-it-depends"&gt;
  &lt;/a&gt;
  Example C. It Depends
&lt;/h3&gt;

&lt;p&gt;Once we move into insertion or removal of data into an array, it gets a little nuanced. Let's say we create a new type of Pikachu that wears a coloured party hat (think Nintendo 64 Super Smash Bros) and we wanted to officially recognize it as a Kanto Pokemon: Party Pikachu. If we add Party Pikachu to the end of the list of Pokemon, that would only take one step. Hence, insertion at the end of arrays is constant time - or O(1). The same goes for removal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--udrw0d1r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.kindpng.com/picc/m/1-19709_alternate-skins-for-pikachu-in-the-original-super.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--udrw0d1r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.kindpng.com/picc/m/1-19709_alternate-skins-for-pikachu-in-the-original-super.png" alt="4 versions of Pikachu wearing different coloured party hats"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's different, however, if we're trying to insert or remove an item from any other place in the array. Why? If we added Party Pikachu to the beginning, all the indices of the Pokemon after it would have to change because the order of Pokemon is now different. This also applies if Party Pikachu were to be added in the middle of the list. We would have to take as many steps as the number of Pokemon that come after it to change the indices to the new ones. Hence, insertion or removal anywhere but the end is linear time - or O(n).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;originalKantoPokemon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bulbasaur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ivysaur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Venusaur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// and so on&lt;/span&gt;
&lt;span class="c1"&gt;// Where Bulbasaur is index 0&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newKantoPokemon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Party Pikachu&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bulbasaur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ivysaur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// and so on&lt;/span&gt;
&lt;span class="c1"&gt;// Where Bulbasaur is now index 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#career-value"&gt;
  &lt;/a&gt;
  Career Value
&lt;/h2&gt;

&lt;p&gt;You might be thinking, "That's great and all but why do I need to know this?" That's fair. I've been able to have a successful last 4-5 years as a developer without it. Heck, I even got promoted. But there's two possible reasons:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) You want to get hired at a company that does leetcode.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;FAANG companies - also known as Facebook, Amazon, Apple, Netflix, and Google - or similar, are infamous for testing leetcode, algorithms, and data structures in their interview process. If you want to get hired by them, you need to be able to reference Big O when you write an algorithmic solution. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) You need to come up with efficient solutions.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Even if you &lt;a href="https://github.com/poteto/hiring-without-whiteboards"&gt;avoid interviewing for companies that do leetcode&lt;/a&gt;, you will still have to work with data. And unless you can always work with a small amount of data, how performant the solutions you write to handle data will be important. Especially as you become a more senior engineer.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(This will become more apparent as I continue this series by moving into showing actual algorithms. Follow me and stay tuned!)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I'm personally in the second boat but I've since been opening myself up to the idea of the first one. Let's get better first then we'll see 🤡&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#onward"&gt;
  &lt;/a&gt;
  Onward
&lt;/h2&gt;

&lt;p&gt;I was the kind of kid who was, for all intents and purposes, intelligent but didn't identify with being good at STEM subjects despite being an honour roll student throughout my education. Heck, my favourite subject was music. But at some point, you hit a wall that makes you realize your work could go much more smoothly if you deepened your knowledge in a particular area 🚀&lt;/p&gt;

&lt;p&gt;My goal is to be able to confidently answer &lt;strong&gt;why&lt;/strong&gt; we should store data a certain way (i.e. dictionary vs. list) or traverse large amounts of data in a certain way, no matter if I'm being asked in an interview or if I simply have to complete a task for a job I'm currently employed for 💃🏻&lt;/p&gt;

&lt;p&gt;You can think of what we discussed so far as the &lt;strong&gt;building blocks&lt;/strong&gt; for choosing between multiple ways of handling data. If we know that searching through an array is linear time and we later find out that there's an alternate solution for searching through data that is constant time, which is faster, we might want to use the latter solution. However, there's other things to weigh, like readability and maintainability. More on that another time.&lt;/p&gt;

&lt;p&gt;I'll keep learning and be sure to share more 😬&lt;/p&gt;

&lt;p&gt;Off to study linked lists!&lt;/p&gt;

&lt;p&gt;Keep it candid,&lt;/p&gt;

&lt;p&gt;Thuy 🙋🏻‍♀️&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: This post focuses more on practical examples than it does on mathematical visuals. This is because not everyone will understand Big O with mathematical graphs. But if you are someone that will, I recommend &lt;a href="https://towardsdatascience.com/the-big-o-notation-d35d52f38134"&gt;this&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>beginners</category>
      <category>devjournal</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Continuous integration and delivery (CI/CD) using AWS CDK Pipelines with Bitbucket </title>
      <author>Mohammed Ismaeel</author>
      <pubDate>Tue, 12 Oct 2021 13:40:07 +0000</pubDate>
      <link>https://dev.to/aws-builders/continuous-integration-and-delivery-ci-cd-using-aws-cdk-pipelines-with-bitbucket-4hc3</link>
      <guid>https://dev.to/aws-builders/continuous-integration-and-delivery-ci-cd-using-aws-cdk-pipelines-with-bitbucket-4hc3</guid>
      <description>&lt;p&gt;When starting a new project the first problem we face is planning our infrastructure. In this post I'm giving a simple example of how we can create an automated pipeline using AWS CDK and Bitbucket repository. Before diving into Prerequisites and Steps.&lt;br&gt;
let me first unravel the title of this post: “Continuous integration and delivery with AWS CDK Pipelines”&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#continuous-delivery"&gt;
  &lt;/a&gt;
  Continuous Delivery
&lt;/h2&gt;

&lt;p&gt;I will assume you already have heard about the term Continuous Delivery and there is many definitions out there but the simplest is CD is a set of tools and processes that helps DevOps teams to ship higher quality software, faster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-cdk-vs-the-world"&gt;
  &lt;/a&gt;
  AWS CDK vs the world
&lt;/h2&gt;

&lt;p&gt;The official definition for AWS CDK is an open source software development framework to define your cloud application resources (Infrastructure) using familiar programming languages (&lt;code&gt;TypeScript, JavaScript, Python, Java and C#&lt;/code&gt;).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-cdk-vs-the-world"&gt;
  &lt;/a&gt;
  Why CDk vs the world?
&lt;/h4&gt;

&lt;p&gt;Basically we can compare the CDK with Serverless framework, AWS SAM, and Terraform. All these frameworks are used to develop, test and deploy your project, I will not go in all details and differences between them! &lt;br&gt;
The main benefits of using AWS CDK are: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easy to use, because we will use the same programing language we use in our project, CDK can be integrated in your IDE, and you don't need to learn Yml or Terraform. &lt;/li&gt;
&lt;li&gt;Component reusability and sharing, just like any other software library&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more details check this &lt;a href="https://dev.to/tastefulelk/serverless-framework-vs-sam-vs-aws-cdk-1g9g"&gt;post&lt;/a&gt; by my friend &lt;a href="https://dev.to/tastefulelk"&gt;Sebastian Bille&lt;/a&gt;&lt;br&gt;
And another good &lt;a href="https://acloudguru.com/blog/engineering/cloudformation-terraform-or-cdk-guide-to-iac-on-aws"&gt;post&lt;/a&gt; from &lt;a href="https://acloudguru.com/"&gt;A Cloud Guru&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-codebuild-vs-bitbucket-pipelines"&gt;
  &lt;/a&gt;
  AWS CodeBuild vs Bitbucket Pipelines
&lt;/h2&gt;

&lt;p&gt;I had a job interview recently, and as a part of the interview process I had to do some code test. They asked to create a pipeline using AWS CodeBuild with Bitbucket? My first reaction was why you want to use CodeBuild instead of Bitbucket Pipelines? &lt;br&gt;
The answer I got wasn't satisficing, The main differences I found after some search are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Integration with AWS services&lt;/li&gt;
&lt;li&gt;Price, Bitbucket Pipelines offer product package options than AWS offers pay-as-you-go&lt;/li&gt;
&lt;li&gt;Authentication with AWS, CodeBuild has IAM Role integration which gives temporary AWS credentials&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to find out more about this topic please check the following articles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@rokaso/ci-tools-comparison-codebuild-vs-bitbucket-pipelines-vs-jenkins-47f3d25ff984"&gt;CI Tools comparison: CodeBuild vs Bitbucket Pipelines vs Jenkins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://knapsackpro.com/ci_comparisons/aws-codebuild/vs/bitbucket-pipelines"&gt;AWS CodeBuild vs Bitbucket Pipelines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h1&gt;

&lt;p&gt;The focus of this post will be on creating pipelines-as-code, so for demonstration purposes we will create and deploy a simple react-app&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;NodeJS install latest Nodejs version &lt;/li&gt;
&lt;li&gt;npm or yarn should be installed globally &lt;/li&gt;
&lt;li&gt;AWS CDK install with &lt;code&gt;npm install -g aws-cdk&lt;/code&gt; or &lt;code&gt;yarn global add aws-cdk&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;AWS CLI&lt;/li&gt;
&lt;li&gt;AWS Account&lt;/li&gt;
&lt;li&gt;Bitbucket Account&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-create-bitbucket-repo"&gt;
  &lt;/a&gt;
  1. Create Bitbucket repo
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create a public or private repository in &lt;a href="https://bitbucket.org/repo/create"&gt;Bitbucket&lt;/a&gt; and name it myapp&lt;/li&gt;
&lt;li&gt;Clone Bitbucket repo to your machine&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-creating-reactapp"&gt;
  &lt;/a&gt;
  2. Creating react-app
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create a simple react-app in the same directory of your 
Bitbucket repository
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app my-app
&lt;span class="nb"&gt;cd &lt;/span&gt;my-app
yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Commit react-app code to Bitbucket &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-configure-aws-cli"&gt;
  &lt;/a&gt;
  3. Configure AWS CLI
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Generate an &lt;code&gt;Access Key&lt;/code&gt; and &lt;code&gt;Secret Access Key&lt;/code&gt; for your AWS account.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;AWS_ACCESS_KEY_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"…"&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;AWS_SECRET_ACCESS_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"…"&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;AWS_SESSION_TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"…"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-create-infrastructure-folder"&gt;
  &lt;/a&gt;
  4. Create infrastructure folder
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create a new folder outside the &lt;code&gt;src&lt;/code&gt; folder and name it infra&lt;/li&gt;
&lt;li&gt;Navigate to the infra folder&lt;/li&gt;
&lt;li&gt;Init the CDK project
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  cdk init myApp &lt;span class="nt"&gt;--language&lt;/span&gt; typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#5-deploy-infrastructure"&gt;
  &lt;/a&gt;
  5. Deploy infrastructure
&lt;/h4&gt;

&lt;p&gt;Before the deployment we need to update &lt;code&gt;infr.ts&lt;/code&gt; under  &lt;code&gt;/lib&lt;/code&gt; start by: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add the following dependencies
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;CDK&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@aws-cdk/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;CodeBuild&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@aws-cdk/aws-codebuild&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;CodePipeline&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@aws-cdk/aws-codepipeline&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;CodePipelineAction&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@aws-cdk/aws-codepipeline-actions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;S3&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@aws-cdk/aws-s3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Create pipeline and pipeline artifacts
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
    &lt;span class="c1"&gt;// AWS CodeBuild artifacts&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;outputSources&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CodePipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Artifact&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;outputWebsite&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CodePipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Artifact&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// AWS CodePipeline pipeline&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pipeline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CodePipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pipeline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Pipeline&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;pipelineName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MyWebsite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;restartExecutionOnUpdate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Add checkout stage in this stage we will clone sources from bitbucket repository
we will need to create a &lt;code&gt;connectionArn&lt;/code&gt; in this step please follow the documentation in &lt;a href="https://docs.aws.amazon.com/dtconsole/latest/userguide/connections-create-bitbucket.html"&gt;Create a connection to Bitbucket&lt;/a&gt; to get your &lt;code&gt;connectionArn&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// AWS CodePipeline stage to clone sources from bitbucket repository&lt;/span&gt;
    &lt;span class="nx"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addStage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;stageName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Source&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CodePipelineAction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CodeStarConnectionsSourceAction&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;actionName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Checkout&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;repository owner name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;repository name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;outputSources&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;master&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;// the branch you deploy from&lt;/span&gt;
          &lt;span class="na"&gt;connectionArn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                  &lt;span class="c1"&gt;//Paste the generated `connectionArn` here &lt;/span&gt;

        &lt;span class="p"&gt;}),&lt;/span&gt;
      &lt;span class="p"&gt;],&lt;/span&gt;

    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Add Build stage to build our website, we will add a simple &lt;code&gt;./infra/lib/pipeline.yml&lt;/code&gt; file to run CodeBuild project
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;version: 0.2

phases:
  &lt;span class="nb"&gt;install&lt;/span&gt;:
    runtime-versions:
      nodejs: 12
    commands:
      - yarn &lt;span class="nb"&gt;install
  &lt;/span&gt;build:
    commands:
      - yarn build

artifacts:
  base-directory: ./build
  files:
    - &lt;span class="s1"&gt;'**/*'&lt;/span&gt;

cache:
  paths:
    - &lt;span class="s1"&gt;'./node_modules/**/*'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="c1"&gt;// AWS CodePipeline stage to build website and CDK resources&lt;/span&gt;
    &lt;span class="nx"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addStage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;stageName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Build&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="c1"&gt;// AWS CodePipeline action to run CodeBuild project&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CodePipelineAction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CodeBuildAction&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;actionName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Website&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CodeBuild&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PipelineProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;BuildWebsite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;projectName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MyWebsite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;buildSpec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CodeBuild&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BuildSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromSourceFilename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./infra/lib/build.yml&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;}),&lt;/span&gt;
          &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;outputSources&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;outputWebsite&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;}),&lt;/span&gt;
      &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The last stage will be adding deployment stage, we want to deploy the react-app to S3 bucket, and every time we make a new changes it will be deployed the S3 bucket
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="c1"&gt;// Amazon S3 bucket to store website&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bucketWebsite&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Bucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Files&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;websiteIndexDocument&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;websiteErrorDocument&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;publicReadAccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// AWS CodePipeline stage to deploy website and CDK resources&lt;/span&gt;
    &lt;span class="nx"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addStage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;stageName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Deploy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="c1"&gt;// AWS CodePipeline action to deploy website to S3&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CodePipelineAction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;S3DeployAction&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;actionName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Website&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;outputWebsite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;bucketWebsite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}),&lt;/span&gt;
      &lt;span class="p"&gt;],&lt;/span&gt;

    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/cdk/"&gt;AWS Cloud Development Kit&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.dasithsblog.com/blog/easily_deploying_cloud_infrastructure_via_CDK/"&gt;Easily deploying infrastructure as code via AWS CDK&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h1&gt;

&lt;p&gt;You can do almost the same thing using GitHub actions, you will need create a new connection check this &lt;a href="https://docs.aws.amazon.com/dtconsole/latest/userguide/connection&amp;lt;br&amp;gt;%0As-create-github.html"&gt;Create a connection to GitHub&lt;/a&gt;&lt;br&gt;
We can create deferent pipelines for deferent stages like Dev, QA, Prod &lt;br&gt;
The link to my Bitbucket repository is &lt;a href="https://bitbucket.org/mohammmedismaeel/aws-cdk-pipeline/src/master/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please let me know in the comments if this post was helpful and what I can do better next time!&lt;/p&gt;

&lt;p&gt;Please follow me on Twitter at &lt;a href="https://twitter.com/The_Al_Sanad"&gt;@The_Al_Sanad&lt;/a&gt; where I Will frequently write about serverless, devOps!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>react</category>
      <category>devops</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Correlating Transactions with Zero Code</title>
      <author>Michael Walmsley</author>
      <pubDate>Tue, 12 Oct 2021 13:10:34 +0000</pubDate>
      <link>https://dev.to/aws-builders/correlating-transactions-with-zero-code-4n9i</link>
      <guid>https://dev.to/aws-builders/correlating-transactions-with-zero-code-4n9i</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;I take pride in writing detailed, technical articles filled with solid code examples and links to Github so you can review and learn from my serverless journey. Today, I think this will be my shortest ever article, and it lacks all these things since starting on this Zero Code adventure.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wg7qRr09--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8nxlvx158f1f18moeo4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wg7qRr09--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8nxlvx158f1f18moeo4.jpg" alt="End of the road sign"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are a lot of articles out there on correlating transactions across distributed systems and plenty of technical frameworks and solutions for providing transaction traceability. However, correlating transactions as the data passes through our services is essential to observe our system behaviour. So, as developers, we reach for what we know best our development tools, software frameworks and technical solutions. &lt;/p&gt;

&lt;p&gt;Adding Correlation Ids, tracing codes and segment identifiers takes effort and time.&lt;/p&gt;

&lt;p&gt;Usually, we place these identifiers in HTTP Headers and other unique Attribute locations for Cloud-Native services so we can hide these away and provide them as transparent travellers across our distributed systems. In an AWS Managed service sense, this means we need to know how to pack and unpack these identifiers at each step through our serverless systems - across SQS boundaries, through EventBridge events and via SNS topics. These cloud-native services each have a different mechanism to save, transport, and unpack these keys to observability.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But what if there was a different way without all this complexity and code?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I want to share with you my thinking on this and what I have arrived at to resolve this technical problem in a way that transcends the AWS service complexities I just mentioned. Nowadays, I believe in using the language of integration, and for tracing transactions through distributed services, I create an internal integration language encapsulating these observability identifiers.&lt;/p&gt;

&lt;p&gt;Here is an example of a message structure from a system I am working on right now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"correlation_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"b58e7f98-2b58-11ec-8d3d-0242ac130003"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"message_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"bde284dc-2b58-11ec-8d3d-0242ac130003"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"trace_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"3965a72e-2b59-11ec-8d3d-0242ac130003"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"7e6c7638-218c-4947-8d84-a20a9cf68acd"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"firstname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"michael"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"lastname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"walmsley"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"michael@myemail.com"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;strong&gt;data&lt;/strong&gt; represents the original payload received from the initial caller of the service, usually via an API endpoint.   The API entry point is responsible for validating the data to ensure it is correct before transforming it into the internal message format containing the tracing identifiers (correlation_id, message_id, tracing_id). Using a standard messaging structure like this means we no longer worry about changing how we interact with each of the Managed Services we are using since our correlation data is now directly embedded within our message data. All of our messages now have correlation identifiers that pass through data services like SQS, Eventbridge, SNS, Kafka, Kinesis, etc., without the need for any custom code to embed meta-data or other custom markers for correlating our transactions. &lt;/p&gt;

&lt;p&gt;This simple approach of defining an internal service messaging format allows your transaction data and correlation data to always be visible within every component of your distributed Serverless Architecture. Furthermore, we achieve Transaction observability within our Serverless data processing systems using nothing more than our already prepared Cloudwatch Logging utilities and Zero additional code!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>zerocode</category>
    </item>
    <item>
      <title>4C - The Cool Community of Content Creators</title>
      <author>Francesco Ciulla</author>
      <pubDate>Tue, 12 Oct 2021 13:08:26 +0000</pubDate>
      <link>https://dev.to/francescoxx/4c-the-cool-community-of-content-creators-1oee</link>
      <guid>https://dev.to/francescoxx/4c-the-cool-community-of-content-creators-1oee</guid>
      <description>&lt;p&gt;What do the 4C community members think of the 4C community itself?&lt;br&gt;
Let's ask them.&lt;/p&gt;

&lt;p&gt;Join the community: &lt;a href="https://discord.com/invite/TcmA2kbJeA"&gt;https://discord.com/invite/TcmA2kbJeA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://discord.com/invite/TcmA2kbJeA"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ysqRgoz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634041616139/LIxgbJOci.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vikkybliz"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/Vikkybliz"&gt;Vikkybliz&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;4C is a group for content creators. If you don’t know how to start or you have even started, 4C is a place to interact with other content creators, share tips and tricks, and just chart. The earlier you join the better &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ayush-agarwal"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/ayushdev_24"&gt;Ayush Agarwal&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If you are into content creation and ever felt lonely and unmotivated, You must be a part of 4C. We help each other out , learn lots of new things. And the best part is that we connect weekly where we can share or discuss anything we want. Hope to see you in our community soon.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sophyia"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/sophiairoegbu_"&gt;Sophyia&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Hi Francesco, I'm Sophia Iroegbu. &lt;br&gt;
The community is beautiful and helpful. I have been more confident about tech and tech writing and the community and its members helped me achieve that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#merkim"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/KimMerdi"&gt;Merkim&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The 4C community has been an amazing place so far. Having that opportunity to get knowledge from other content creators has been helpful to me. With open-minded people inside the community, everyone gets additional knowledge from others. I would highly recommend this community!!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#suraj-kumar-agarwal"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/AgarwalSurajk"&gt;Suraj Kumar Agarwal&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The 4C group helped me to reach excellent community members and to learn and explore how groups work together.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yash-prakash"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/csandyash"&gt;Yash Prakash&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Despite my short time in this community, I’m very impressed by the number of good resources and helpful people there are here. I’m very excited to learn from them as I grow as a developer. The exchange of ideas so far looks and feels very coordinated, and led by my favorite devs from Twitter and YouTube, so I find it very encouraging to learn and give back to the community as well.&lt;/p&gt;

&lt;p&gt;Thanks so much! 😁&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ramya-chinnadurai"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/code_rams"&gt;Ramya Chinnadurai&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;4C is a really cool community, and the members here are really friendly. I could see the tremendous support for the hacktoberfest challenge and interactive guidance to solve PRs. I love the &lt;code&gt;count-to-10k&lt;/code&gt; channel, it’s really cool and funny. I would add the number whenever I visit this channel and there are a lot more fantastic additional channels here to explore.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#siddharth-shyniben"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/SiddharthShyn"&gt;Siddharth Shyniben&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Even though I’ve only been here for a short time, I can already see the benefits of joining 4C; the viewership and genuine interactions have improved a lot on my blog.&lt;/p&gt;

&lt;p&gt;This is not the only benefit of joining 4C: There are a lot of other things to do. From useful stuff like collaborating, resources, finding work, hacktoberfest to just fun things like a counting channel and off-topic chat.&lt;/p&gt;

&lt;p&gt;If you feel the content you create doesn’t reach anyone, 4C can be a great way to motivate you and spread your content. And if you do reach others, 4C can still help you ;)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#avneesh-agarwal"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/avneesh0612"&gt;Avneesh Agarwal&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;4C is a great community for us content creators. We discuss ideas on what and how to create content. We also have a weekly call where we talk about the latest events like hacktoberfest! I have been loving the 4C community so far.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#meenakshi"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/SankarMeenakshi"&gt;Meenakshi &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The 4C community is very supportive and a great platform for collaboration on various activities. It is an exciting space to see developers both new and established lift each other up. I am glad to be a part of this community. It adds great value to anyone who joins.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arjun"&gt;
  &lt;/a&gt;
  Arjun
&lt;/h3&gt;

&lt;p&gt;4C has been a great community for me. I have been meeting a lot of new developers, designers, content creators and like-minded people. I have also learned how to work with a team. The people here are super-patient and extremely talented. We discuss topics and events like Hacktoberfest and help each other with their problems. I’ve been loving it and if you join you’ll love it too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#muthu-annamalai-venkatachalam"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/muthuannamalai_"&gt;Muthu Annamalai Venkatachalam&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;4C is everything anyone could ever wish for in a community. Wonderful, supportive, exciting, and a lot to like. The best thing that ever happened to me. All in all, it's a great opportunity to develop your skills, form connections with people in different fields of the community, and give back to the community. Slide into the server and get ready to ride a roller coaster of learning opportunities! I'll always be grateful to this community and will keep contributing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#savvas-stephanides"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/SavvasStephnds"&gt;Savvas Stephanides&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;As someone who loves sharing knowledge through blog posts and articles, the tips and inspiration I’ve found from the 4C community have been more than invaluable. I am so thankful this community exists!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#eddy-vinck"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/EddyVinckk"&gt;Eddy Vinck&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;I love what you're doing with the 4C community, Francesco! Keep it up!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kaarthik"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/MDvlpr"&gt;Kaarthik&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A good community needs to be filled with people who really want to help and grow together. You can expect this from the 4C community. They're very supportive when it comes to helping people create content.&lt;/p&gt;

&lt;p&gt;I feel like 4C community motto: We water you, You water us, Let's grow together.&lt;br&gt;
I’ve been loving it and if you join you’ll love it too :) &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#haseeb-udeen"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/HaseebUdeen"&gt;Haseeb Udeen&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;4C is a great community of content creators. It keeps me motivated. Every new day when I look at the 4C community, it makes me do something extra to work for my self-branding other than the regular job. The job is fine but it’s not freedom; freedom is working for your own self, not for some giant company. And here at 4C, I get to work for myself and other contributors of the open-source world; and this leads to lasting happiness and cool life where you are not under anyone's pressure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sunrit"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/JanaSunrise"&gt;Sunrit &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;4C is not only a great community for content creators but everyone. Wonderful and incredible community, supportive people, and all the events are superb! Loving all the things that take place, and all the support and love between people, It’s truly amazing. An exciting place to learn, collaborate with people, get to know and connect with people, and a lot more. It’s something more than amazing. Keep up the great work, Proud to be a part of it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#anish-de"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/AnishDe12020"&gt;Anish De&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;4C is a great community for anyone who creates content, be it blog posts or be it videos. It is a great place to learn a lot from a very friendly community and also grow from sharing quality content which someone else might find useful. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#palash"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/palashv2"&gt;Palash&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;4C Community is the best place for Cool Content Creators. Thanks to  Francesco for all the hard work and dedication to building this awesome community! Keep it up!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pratham"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/PrasoonPratham"&gt;Pratham&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;I love the effort and care put into making the 4c community, can’t wait to see where this goes next!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wale-adetona"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/waleadetonahq"&gt;Wale Adetona&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The 4C Community is a place to be for anyone looking to connect with the best and like-minds in the tech industry. You won't regret joining, mark my words. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vasanth-srivatsa"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/vsnthdev"&gt;Vasanth Srivatsa&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The 4C Community is really diverse &amp;amp; inclusive. The opportunities are really great, you just need to get involved.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sumudu-siriwardana"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/sumusiriwardana"&gt;Sumudu Siriwardana&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;4C is the best community for content creators! I’ve been here for a short time, but I can see the effort and contribution that everyone put in for this community. It’s a great place to learn, collaborate, and share your knowledge with other creators like you. And also we have so much fun here as well. I managed to get into a group call with everyone once and it was fun and productive at the same time. I would love to appreciate Francesco’s effort on building up this community! And if you are looking for a supportive community, this is the place for you, come and join us! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prathamesh-shanbhag"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/Prathamesh_117"&gt;Prathamesh Shanbhag&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Content Creation is hard, especially doing it by yourself &amp;amp; so the community 4C has been such a huge relief &amp;amp; help because now I have people who relate to my situation plus they help me out &amp;amp; I help them out in situations when we need help. Kudos to Francesco for creating such an amazing &amp;amp; collaborative community for content creators!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vivian-plasencia"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/ViviPlasenciaC"&gt;Vivian Plasencia&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;I'm glad to be a part of the 4C community. It's very supportive and welcoming.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://discord.com/invite/TcmA2kbJeA"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ysqRgoz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634041616139/LIxgbJOci.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Join the community: &lt;a href="https://discord.com/invite/TcmA2kbJeA"&gt;https://discord.com/invite/TcmA2kbJeA&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>codenewbie</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>APIs 101 Using Postman </title>
      <author>Maniprakash123-creator</author>
      <pubDate>Tue, 12 Oct 2021 13:00:48 +0000</pubDate>
      <link>https://dev.to/maniprakash123creator/apis-101-using-postman-4ek7</link>
      <guid>https://dev.to/maniprakash123creator/apis-101-using-postman-4ek7</guid>
      <description>&lt;p&gt;7 th of October 2021 I have attended "APIs 101 Using Postman" workshop organised by the Postman Student Experts &lt;a class="mentioned-user" href="https://dev.to/zeoshark"&gt;@zeoshark&lt;/a&gt;
 and Swastik Mishra from ITER SOA virtually on YouTube live. It was a great experience overall and I learn about Postman APIs. Workshop covered basic request methods that are GET, POST ,PUT and DELETE along with data retrieval in JSON format. All these methods were explained in fun manner with examples in which ever member can create their IDs and posts their fun jokes individually.&lt;br&gt;
Overall it was an overwhelming experience to attend this learning along with fun. Kudos to the Postman Student Experts &lt;a class="mentioned-user" href="https://dev.to/zeoshark"&gt;@zeoshark&lt;/a&gt;
 and Swastik Mishra.&lt;br&gt;
Thank you  for the opportunity &lt;a class="mentioned-user" href="https://dev.to/zeoshark"&gt;@zeoshark&lt;/a&gt;
 and @Swastik Mishra .....&lt;br&gt;
Waiting for swags eagerly 😍🤩&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Automatically organize imports</title>
      <author>Tony Hicks</author>
      <pubDate>Tue, 12 Oct 2021 13:00:40 +0000</pubDate>
      <link>https://dev.to/tonyhicks20/automatically-organize-imports-dmj</link>
      <guid>https://dev.to/tonyhicks20/automatically-organize-imports-dmj</guid>
      <description>&lt;p&gt;While refactoring your javascript/typescript code it's easy to remove things but forget to get rid of the unused imports.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hHymgPer--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gfb04yf67dur21b7gotn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hHymgPer--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gfb04yf67dur21b7gotn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In VSCode, you can easily remove these with the shortcut : Shift + Alt + O. &lt;br&gt;
This is sometimes easy to forget to do though, and wouldn't it be better if there was some way to do this automatically every time you save? &lt;/p&gt;

&lt;p&gt;In VSCode, go to File -&amp;gt; Preferences -&amp;gt; Settings and click on the icon in the top right hand corner to open up the settings in JSON.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--icIjwqpl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l9eab8h2071qde0goq7z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--icIjwqpl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l9eab8h2071qde0goq7z.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add the following json:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"editor.codeActionsOnSave": {
    "source.organizeImports": true
},
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So that it looks something like the following: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NhBbTEzo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojdjwjz7fs2svtz6nnkp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NhBbTEzo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojdjwjz7fs2svtz6nnkp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Et voilà! &lt;br&gt;
Your imports will now be organized every time you save a file. &lt;br&gt;
Enjoy :-)&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>typescript</category>
      <category>javascript</category>
      <category>tip</category>
    </item>
  </channel>
</rss>
