<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>WTF*&amp;n is Pointers? with example in Golang (Bahasa Version)</title>
      <author>Muhammad Fauzan</author>
      <pubDate>Thu, 02 Dec 2021 06:24:55 +0000</pubDate>
      <link>https://dev.to/fncolon/pointers-wtfn-is-pointers-with-example-in-golang-bahasa-version-ei5</link>
      <guid>https://dev.to/fncolon/pointers-wtfn-is-pointers-with-example-in-golang-bahasa-version-ei5</guid>
      <description>&lt;p&gt;Pointers adalah lokasi dimana data pada variabel disimpan. &lt;/p&gt;

&lt;p&gt;Pada dasarnya semua tipe data pointers adalah berupa long hexadecimal number yang berisi value berupa memory address dimana lokasi data disimpan, yang berarti semua tipe data pada value dari semua pointer itu sama, entah itu berasal dari integer, float, char maupun string, dan lain-lain.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alasan-memakai-pointers"&gt;
  &lt;/a&gt;
  Alasan memakai Pointers
&lt;/h2&gt;

&lt;p&gt;Setiap bahasa pemrograman memiliki alasan yang berbeda untuk menggunakan pointers &lt;strong&gt;Pointers are inherently programming oriented&lt;/strong&gt;, saya akan menjelaskan beberapa diantaranya yang paling umum dibahas yaitu:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Performa&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Menggunakan pointers secara langsung akan lebih cepat untuk memproses struktur data, daripada menggunakan data pada variabel yang ditunjuk oleh pointer.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reference Alternatives&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Menggunakan pointers akan masuk akal jika fungsionalitas built-in dari sebuah teknologi ataupun tipe datanya tidak lengkap. Dimana suatu teknologi memang memberi opsi penggunaan pointers pada case tertentu, misalnya Polymorphism pada C++, walaupun penggunaan reference bisa dilakukan, dan lebih dianjurkan.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h2&gt;

&lt;p&gt;Reference adalah nilai yang tidak diakses secara langsung di tempat dimana dia dibuat namun menunjukkan lokasi dimana dia dibuat. &lt;/p&gt;

&lt;p&gt;Biasanya reference disimpan pada memory ataupun storage device, reference adalah sebuah alias yang menunjuk kepada sebuah pointer, setiap reference memiliki nama yang berbeda, analoginya seperti kita mencari buku berdasarkan nama penulis atau nama penerbit pada sebuah website, kita punya referensi diantara keduanya, namun akan menunjukkan buku yang kita tuju juga.&lt;/p&gt;

&lt;p&gt;Contoh sederhananya:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;// Membuat Reference bernama names&lt;/span&gt;
  &lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Fauzan"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c"&gt;// Membuat Reference "publisher"&lt;/span&gt;
  &lt;span class="n"&gt;publisher&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="c"&gt;// Menggunakan Reference "names"&lt;/span&gt;
  &lt;span class="c"&gt;// menggunakan pointer yang sama&lt;/span&gt;
  &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;catatan: untuk menampilkan memory address pada pointer di Golang, anda bisa menggunakan simbol &amp;amp;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#pengingat"&gt;
  &lt;/a&gt;
  Pengingat
&lt;/h2&gt;

&lt;p&gt;Penggunaan pointers sangat powerful, namun dibalik "sangat powerful" tersebut terdapat ancaman, dimana penggunaan pointers adalah untuk menghindari versi copy dari sebuah variabel, sedangkan menggunakan pointer kita mengubah value yang berada pada memory address, karena hal itu, ini menjadi risk ketika ada bug pada software yang membuat kita mengubah memory address dari system file, ini tentu saja dapat merusak komputer.&lt;/p&gt;

&lt;p&gt;Beberapa bahasa pemrograman HLLs (High Level Languages) bahkan menyembunyikan penggunaan Pointers, salah satu contohnya adalah Javascript, mewajibkan untuk menggunakan reference, dan passing data dilakukan menggunakan copy dari reference.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contoh-penggunaan-pointers-pada-golang"&gt;
  &lt;/a&gt;
  Contoh Penggunaan Pointers pada Golang
&lt;/h2&gt;

&lt;p&gt;Disini saya akan memberi contoh kasus penggunaan pointers pada Golang, dimana sebuah setter method akan menggunakan , saya biasanya menggunakan contoh dengan Javascript namun karena Javascript tidak bisa menggunakan Pointers secara langsung, saya akan menggunakan Golang sebagai contohnya:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;fullName&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fullName&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// ini tidak akan mempengaruhi reference pada fungsi main()&lt;/span&gt;
&lt;span class="c"&gt;// karena kita hanya mengubah versi "copy" dari reference&lt;/span&gt;
&lt;span class="c"&gt;// tersebut (person).&lt;/span&gt;
&lt;span class="c"&gt;// func (p Person) SetName(fullName string) {&lt;/span&gt;
&lt;span class="c"&gt;//     p.fullName = fullName&lt;/span&gt;
&lt;span class="c"&gt;// }&lt;/span&gt;

&lt;span class="c"&gt;// kita akan menggunakan pointer receiver untuk mempengaruhi&lt;/span&gt;
&lt;span class="c"&gt;// reference pada fungsi main() karena dia akan menggunakan&lt;/span&gt;
&lt;span class="c"&gt;// memory address yang sama seperti pada fungsi main()&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;SetName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullName&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fullName&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Fauzan"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

  &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Muhammad Fauzan"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Jadi seperti itulah penjelasan mengenai pointers dan bagaimana contoh penggunaannya di Golang.&lt;/p&gt;




&lt;p&gt;Sekian terima kasih telah membaca artikel ini, semoga bermanfaat 😄&lt;/p&gt;

</description>
      <category>go</category>
      <category>pointers</category>
      <category>indonesia</category>
    </item>
    <item>
      <title>Animating a gradient border in CSS</title>
      <author>Chris Bongers</author>
      <pubDate>Thu, 02 Dec 2021 05:58:24 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/animating-a-gradient-border-in-css-1dho</link>
      <guid>https://dev.to/dailydevtips1/animating-a-gradient-border-in-css-1dho</guid>
      <description>&lt;p&gt;A while ago, I made this cool &lt;a href="https://daily-dev-tips.com/posts/multi-colored-text-in-css/"&gt;animated Multi-colour text effect in CSS&lt;/a&gt;.&lt;br&gt;
I was re-looking this article and thought we could use some of these learnings to make a super cool animated border effect!&lt;/p&gt;

&lt;p&gt;The end result for today will be this cool animated border gradient.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/porBNgg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-basis-for-a-gradient-border"&gt;
  &lt;/a&gt;
  Setting up the basis for a gradient border
&lt;/h2&gt;

&lt;p&gt;Gradient borders in CSS are tricky, as we need to leverage the &lt;code&gt;border-image&lt;/code&gt; property for this. It's not a super well know property and comes with some caveats.&lt;/p&gt;

&lt;p&gt;However, let's give it a go.&lt;/p&gt;

&lt;p&gt;We'll first make a single div in our HTML setup.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's give this div a big width and height so we can have a good demo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50vmin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50vmin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a div that is half the width of our viewport. And give this div a &lt;code&gt;1rem&lt;/code&gt; border.&lt;/p&gt;

&lt;p&gt;The next thing we want to add is the actual border-image. We can pass an actual image or set SVGs or a gradient as this gets rendered as an image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50vmin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50vmin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#12c2e9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#c471ed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#f64f59&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We should now have our basic border setup, and it should look like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xkexxVu---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637493141958/AcfbgjnBU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xkexxVu---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637493141958/AcfbgjnBU.png" alt="CSS Border image" width="408" height="378"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pretty close already. Now we just need to animate this!&lt;br&gt;
Let's use some &lt;a href="https://daily-dev-tips.com/posts/how-to-use-css-vars/"&gt;CSS variables&lt;/a&gt; to make the position animatable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--angle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50vmin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50vmin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--angle&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;#12c2e9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#c471ed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#f64f59&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This introduces a new &lt;code&gt;--angle&lt;/code&gt; variable. This is nothing that CSS knows about but our own variable.&lt;/p&gt;

&lt;p&gt;We can then add a basic animation query as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="nt"&gt;rotate&lt;/span&gt; &lt;span class="nt"&gt;linear&lt;/span&gt; &lt;span class="nt"&gt;infinite&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the rotate animation will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--angle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;360deg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, nothing will happen!&lt;br&gt;
The value will change, but since it's not a know CSS variable, we need to define it as a changeable property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="n"&gt;--angle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;syntax&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'&amp;lt;angle&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;initial-value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;inherits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now we got our working animated border in CSS!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#browser-support"&gt;
  &lt;/a&gt;
  Browser Support
&lt;/h2&gt;

&lt;p&gt;For browser support, we have to technically look at multiple properties. Still, this one below should give you an excellent example of how good the support is.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zpU9hnaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://caniuse.bitsofco.de/static/v1/border-image-1637493765759.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zpU9hnaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://caniuse.bitsofco.de/static/v1/border-image-1637493765759.jpg" alt="Data on support for the border-image feature across the major browsers from caniuse.com" width="800" height="366"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
    </item>
    <item>
      <title>Things to get started as a Web Developer quickly.</title>
      <author>Sumit Mukharjee</author>
      <pubDate>Thu, 02 Dec 2021 05:07:19 +0000</pubDate>
      <link>https://dev.to/sumitmukharjii/things-to-get-started-as-a-web-developer-quickly-23i9</link>
      <guid>https://dev.to/sumitmukharjii/things-to-get-started-as-a-web-developer-quickly-23i9</guid>
      <description>&lt;p&gt;Woo.. you are in that part of your life when you want to start learning something new, something that excites you well you are on a good path in your life.&lt;br&gt;
Today we look at how you can get yourself in the Computer Science world and be a web developer. We will be looking at quick steps without wasting any time, so let’s get started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Learn HTML&lt;/strong&gt;&lt;br&gt;
The basic part of every web page. HyperText Markup Language defines the structure of the web page just like a skeleton in the human body, without this no one can imagine a page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. CSS&lt;/strong&gt;&lt;br&gt;
When you have a nice body you have to make yourself look good, just like that, a website needs styling to make it catchy to the user so that they come back again and again. UI is the most important part of any project, making it look cool makes you cool.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. JavaScript&lt;/strong&gt;&lt;br&gt;
A webpage has to function for which it has been made, you have seen when you click on Google’s search button it redirects to another page and shows you some results, when you click login on your Instagram account it opens your feed. In this situation, JavaScript comes into play where you add functionality to your pages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Projects&lt;/strong&gt;&lt;br&gt;
Stop right here, these were the basics of web development, now It’s time for you to make some projects by using these three. Make your simple clone projects or whatever you like, remember to get a good grasp on JavaScript and CSS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Further&lt;/strong&gt;&lt;br&gt;
Later things you can learn are Create pages with &lt;strong&gt;API&lt;/strong&gt;, then you can go further to learn React.JS, A database of your choice, and Node.JS which is very important to create a full-fledged awesome Website.&lt;br&gt;
Thanks for reading, this was the first article I have written. If there’s a mistake please correct me I will surely improve in the future.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Advent of Code #1 (in JavaScript &amp; Haskell)</title>
      <author>Caleb Weeks</author>
      <pubDate>Thu, 02 Dec 2021 04:44:10 +0000</pubDate>
      <link>https://dev.to/sethcalebweeks/advent-of-code-1-in-javascript-haskell-24in</link>
      <guid>https://dev.to/sethcalebweeks/advent-of-code-1-in-javascript-haskell-24in</guid>
      <description>&lt;p&gt;This is my first year participating in &lt;a href="https://adventofcode.com/2021/"&gt;Advent of Code&lt;/a&gt;, and I thought I would use it as an opportunity to get better at Haskell and find similar approaches to problem solving in JavaScript. I'm actually planning to solve each puzzle in whatever method I think I can find the answer the fastest, then go back and find a better solution in Haskell after getting the right answer. (Today I used Excel, which is actually a great programming interface, but more on that some other time)&lt;/p&gt;

&lt;p&gt;I will summarize the problems here, but you should really check out the website to get the full story and to join in!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-one"&gt;
  &lt;/a&gt;
  Part One
&lt;/h2&gt;

&lt;p&gt;The puzzle input gives a list of numbers, and we are asked to find the number of times that two consecutive numbers increase for the whole list. My initial thought when asked to compute a single value from a list of values is a fold/reduce. Unfortunately, each step in a fold for this problem would need to keep track of the running total of consecutive increases along with the previous number. A common trick to get this work in Haskell is to first zip the list with its own tail to end up with a list of pairs of consecutive numbers like so. (There are better ways to write this, but you'll see why I wrote it this way in part two)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;199&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;208&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;210&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;207&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;240&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;269&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;260&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;263&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;pairs&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;pairs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zip&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can fold over our list of pairs to calculate the total of consecutive increases:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;foldl&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nf"&gt;\&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pairs&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is probably a better way to do this in Haskell. I tried to use a tuple as an accumulator containing the count and previous item, but couldn't seem to get that working. But that approach is relatively simple to follow in JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;previous&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;previous&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The initial value to the accumulator is a tuple of &lt;code&gt;Infinity&lt;/code&gt; so that the comparison with the first item will always be smaller, and &lt;code&gt;0&lt;/code&gt; for the start of the count. We use destructuring to pull the answer back out of the tuple at the end.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-two"&gt;
  &lt;/a&gt;
  Part Two
&lt;/h2&gt;

&lt;p&gt;This part is similar to the first one except we compare consecutive sums of three consecutive numbers. Sounds like we need triples from our list instead of pairs. We can just extend the zip concept with the &lt;code&gt;zip3&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;triples&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;triples&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zip3&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can map over that to get the sum of each triple. Once we've done that, we are back to a list of numbers, so we'll pair them up again to compare increases in consecutive sums and fold to get the total as before.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;foldl&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nf"&gt;\&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pairs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;triples&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are ways to fix the mess of parentheses, but I won't get into that for now. The initial strategy of using the tuple to keep track of the previous item and the total kind of falls apart for this part of the problem, so we'll copy what we did in Haskell.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;zip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]]);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;zip3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]]);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pairs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;triples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;zip3&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pairs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;triples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is certainly not a very elegant solution, but we got there finally. It took me about five minutes to solve both these parts in Excel, but about two hours to put together these Haskell and JavaScript solutions.&lt;/p&gt;

&lt;p&gt;How would you solve this problem in Haskell? What about in JavaScript? I'd love to see some better ways than what I hacked together.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>haskell</category>
      <category>functional</category>
      <category>programming</category>
    </item>
    <item>
      <title>How functional programming made me an better developer, with Elixir</title>
      <author>Nicolas Lima</author>
      <pubDate>Thu, 02 Dec 2021 04:21:49 +0000</pubDate>
      <link>https://dev.to/nicolaslima321/how-functional-programming-made-me-an-better-developer-with-elixir-34eg</link>
      <guid>https://dev.to/nicolaslima321/how-functional-programming-made-me-an-better-developer-with-elixir-34eg</guid>
      <description>&lt;p&gt;On this article, I'll share my experience with functional programming, and how it help me to became an better developer, practicing good programming principles, like &lt;strong&gt;SOLID&lt;/strong&gt;, &lt;strong&gt;KISS&lt;/strong&gt;, &lt;strong&gt;YAGNI&lt;/strong&gt;. Also share some &lt;strong&gt;Elixir&lt;/strong&gt; examples, and applicability on Object Oriented Programming, like &lt;strong&gt;JavaScript&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Functional Programming paradigm is an model that use only functions to solve your problems, avoiding mutations, states changes, and all things that can provoke mutate in a data or process, handling your data entire all process through only functions. If you thought like me, you probably got scare thinking about how to implement an algorithm that you don't have an object, class instance, all the OO (Object Oriented) particularities that we already know, right? That's make me a bit confused, then i had to think outside my box, and try to model and design my problems solutions using a different way. And that was the process that make me start to became an better developer.&lt;/p&gt;

&lt;p&gt;In my situation, I gotta to learn Elixir, that is an functional language with its syntax inspired by ruby (I guess 🤔). Elixir has an syntax not so friendly at beginning (at least for me lol), but is auto-explainable, and that is where the process start, in Elixir (Functional languages in general, but I'll focus on Elixir), you are forced to write codes self-explainable, cause in the most part, your code will be a lot of functions calling themselves at side of a logical very well defined, otherwise, you will suffer with "over engineering" and confused implementations, and just with that, you already is getting inside on a software engineering principle very important, that are "&lt;strong&gt;KISS&lt;/strong&gt;" - Keep It Simple Stupid. To this usage for an example, we gonna use an &lt;em&gt;pipe operator&lt;/em&gt; (&lt;a href="https://hexdocs.pm/elixir/master/Kernel.html#%7C%3E/2"&gt;Reference&lt;/a&gt;), its syntax is &lt;code&gt;|&amp;gt;&lt;/code&gt; what it does, is to pass the previous value as a first argument of the function next to it. Lets imagine the follow scenario, a quite basic, but.. We have an model "Product", and we must create an service, to check if this product has on stock.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Pseudo-code (Abstracted logical and implementations)

def product_is_available(product_id) do
  product_id
  |&amp;gt; get_product()
  |&amp;gt; product_has_stock?()
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note this example have an defined flow, you know at each line clearly whats is going on, that is, you getting the product_id, getting product through id, with this product found, check for product availability (Has stock), when is necessary, you can apply in your code an flow like that, independent of language, to make your code ta have a good structure, let's apply the same example in JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Pseudo-code (Abstracted logical and implementations)

function productIsAvailable(productId) {
  const product = getProduct(productId);
  return productHasStock(product);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the code is a little shorter, but the clearly flow is the same.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pattern Matching&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Elixir, you have an nice feature, that is &lt;a href="https://elixir-lang.org/getting-started/pattern-matching.html"&gt;pattern matching&lt;/a&gt;. Basically you have an input, and a expected value, so lets imagine the expected_value is "cake" and your input is "cupcake". If you compare booths, there's no match, cause string &lt;code&gt;"cupcake"&lt;/code&gt; doesn't match with &lt;code&gt;"cake"&lt;/code&gt;. So, lets imagine we have an map, that contains an program language, it would be defined as &lt;code&gt;%{language: "Elixir"}&lt;/code&gt;, so lets create an function &lt;code&gt;is_elixir?&lt;/code&gt; that checks if a given map, is for language elixir:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def is_elixir?(%{language: "Elixir"}), do: true
def is_elixir?(language_map), do: false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whats happening here? When we pass our map &lt;code&gt;language = %{language: "Elixir"}&lt;/code&gt;, and call this function &lt;code&gt;is_elixir?(language)&lt;/code&gt; it tries to proceed on the first match, that is our first function definition, but, if we have an map like &lt;code&gt;%{language: "C++}"&lt;/code&gt;, and try to call the same function, there's no match on the first function, then, its search for the next match, that is reached on our second function (Because the signature generalizes &lt;code&gt;language&lt;/code&gt; variable value, not requiring to be an specific value). So, what if we call &lt;code&gt;is_elixir?&lt;/code&gt; without any arguments? It will raise an exception ´"No pattern match with function is_elixir? /0"` (/0, /1, /n.. it means the number of arguments of a function), whats happened was: it tried to match with first function clause, but no success, then tried to the second one, but no success again, then left no third to test, so it raise this exception because of that.&lt;/p&gt;

&lt;p&gt;We can demonstrate a kind of pattern matching in JavaScript with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"&gt;destructing&lt;/a&gt;, lets do the same example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
function isElixir({ language }) {&lt;br&gt;
  return language === "Elixir";&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;in this case, we receiving an object, and destructing it through function signature, the difference is, when object given (or not object), doesn't has a key "language", it will raise an exception "Cannot read property language", it can be handled with an try catch clause.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Getting more deep...&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Elixir doesn't have classes, or properties. It have modules, with their functions, to work with. So, when you thought in OOP, you remember, that if an class have a lot of responsability and differents contexts togheter, it will bring a lot of readability problems, and violates the first principle of SOLID, single responsability. Bringing it to Elixir, it became even worst, because all you have is a lot of mixed functions, you don't have properties, obviously have codes and projects written like that, but is a terrible practice. So, segregating all theses contexts in anothers modules, you will practice single responsability principle, and now you have an code with modules properly segregated, and you became able to manipulate it, maintain it, integrate with services, and what else you need.&lt;/p&gt;

&lt;p&gt;Now, lets mix these concepts, and get through examples even more deeps. In Elixir we have an feature called &lt;code&gt;"with"&lt;/code&gt;, that is one of my favorite features. "With" works like you having a lot of pipe operators &lt;code&gt;|&amp;gt;&lt;/code&gt; but at each pipe, you have a condition (an pattern match for example), and when not satisfy the defined flow, it falls out of the clause, going to an &lt;code&gt;else&lt;/code&gt; (when exists), if there no match even on else, a "with clause match" exception will be raised.&lt;/p&gt;

&lt;p&gt;So lets imagine a kind of the product domain that we had discussed aboove, but lets imagine we have an scenario that interact with anothers contexts, all these through its services.&lt;/p&gt;

&lt;p&gt;This scenario was a kind off an real problem that i dealed with in one of my personal projects, that are, we have an authenticated user, and we suposed to get its current geolocation, to store it, and send it to a client who consum it, a little complex, right? lol.&lt;/p&gt;

&lt;p&gt;PS: In a real scenario, the best way to avoid this is to write an middleware to prevent non logged users to access/use an feature. These examples are only for lessons purposes.&lt;/p&gt;

&lt;p&gt;So lets to the code&lt;/p&gt;

&lt;p&gt;`&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Pseudo-code (Abstracted logical and implementations)

def treat_current_location(user, location) do
  with {:ok, true} &amp;lt;- User.is_authenticated?(user),
       {:ok, coords} &amp;lt;- Location.get_coordinates(location),
       {:ok, _} &amp;lt;- Location.save_last_coords(coords) do
    response(%{
      message: "location successfully stored",
      last_location: coords,
    }, 200)
  else
       {:unauthorized, _} -&amp;gt; response("current user is not logged", 401),
       {:error, _} -&amp;gt; response("an unexpected error ocurred", 500),
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note in that code, we used pattern matching, on each with clause, when not satisfies, it tries to match in else clauses. Note with this &lt;code&gt;with&lt;/code&gt; this scenario looked at like an recipe of cake, there are defined instructions, and the only thing you need to do, is follow this defined flow. Now lets apply this example for JavaScript, that was the real project solution lol.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Pseudo-code (Abstracted logical and implementations)

function treatCurrentLocation(user, location) {
  try {
    if (User.isAuthenticated(user) === false) return response("non authenticated", 401);
    const { coords } = Location.getCoordinates(location);

  Location.saveLastCoords(coords);
    response({
      message: "location successfully stored",
      lastLocation: coords,
    }, 200);
  } catch (error) {
    console.log(error);
    return response("an unexpected error ocurred", 500);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In that code, any raised error will be catched by our try catch, so if destructs got no success, or the Location module not return the expected value, all be catched properly. And also, you have a defined flow of each thing is hapenning.&lt;/p&gt;

&lt;p&gt;In this example, you were able to practice YAGNI (You ain't gonna need it), discarding all unusefull process or values, just continued following an defined flow ruled by KISS (Keep it simple stupid)&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>functional</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to Perform Load Testing against Nebula Graph with K6</title>
      <author>lisahui</author>
      <pubDate>Thu, 02 Dec 2021 04:08:19 +0000</pubDate>
      <link>https://dev.to/lisahui/how-to-perform-load-testing-against-nebula-graph-with-k6-36f0</link>
      <guid>https://dev.to/lisahui/how-to-perform-load-testing-against-nebula-graph-with-k6-36f0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-load-testing-matters-in-nebula-graph"&gt;
  &lt;/a&gt;
  Why Load Testing Matters in Nebula Graph?
&lt;/h2&gt;

&lt;p&gt;The load testing for the database needs to be conducted usually so that the impact on the system can be monitored in different scenarios, such as query language rule optimization, storage engine parameter adjustment, etc.&lt;/p&gt;

&lt;p&gt;The operating system in this article is the x86 CentOS 7.8.&lt;/p&gt;

&lt;p&gt;The hosts where nebula is deployed are configured with 4C 16G memory, SSD disk, and 10G network.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tools-needed-for-the-load-testing"&gt;
  &lt;/a&gt;
  Tools Needed for the Load Testing
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/vesoft-inc/nebula-ansible"&gt;nebula-ansible&lt;/a&gt; deploys Nebula Graph services.&lt;br&gt;
&lt;a href="https://github.com/vesoft-inc/nebula-importer"&gt;nebula-importer&lt;/a&gt; imports data into Nebula Graph clusters.&lt;br&gt;
&lt;a href="https://github.com/vesoft-inc/k6-plugin"&gt;k6-plugin&lt;/a&gt; is a K6 extension that is used to perform load testing against the Nebula Graph cluster. The extension integrates with the nebula-go client to send requests during the testing.&lt;br&gt;
&lt;a href="https://github.com/vesoft-inc/nebula-bench"&gt;nebula-bench&lt;/a&gt; generates the LDBC dataset and then imports it into Nebula Graph.&lt;br&gt;
&lt;a href="https://github.com/ldbc/ldbc_snb_datagen_hadoop"&gt;ldbc_snb_datagen_hadoop&lt;/a&gt; is a LDBC data generator.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#load-testing-process-overview"&gt;
  &lt;/a&gt;
  Load Testing Process Overview
&lt;/h2&gt;

&lt;p&gt;The load testing conducted in this article uses the LDBC dataset generated by &lt;code&gt;ldbc_snb_datagen&lt;/code&gt;. The testing process is as follows.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--npX44Doc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/144202245-c82fc9c0-3e1d-4549-91bb-8b9a5797878d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--npX44Doc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/144202245-c82fc9c0-3e1d-4549-91bb-8b9a5797878d.png" alt="Load Testing Process Overview" width="384" height="781"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To deploy the topology, use one host as the load testing runner, and use three hosts to form a Nebula Graph cluster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4HX3-LTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/143535649-16fb5000-f850-47f5-85b3-4ab04b779a85.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4HX3-LTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/143535649-16fb5000-f850-47f5-85b3-4ab04b779a85.png" alt="Load Testing Process Overview" width="723" height="415"&gt;&lt;/a&gt;&lt;br&gt;
To make monitoring easier, the load testing runner also deploys:&lt;/p&gt;

&lt;p&gt;Prometheus&lt;br&gt;
Influxdb&lt;br&gt;
Grafana&lt;br&gt;
node-exporter&lt;br&gt;
The hosts where Nebula Graph is installed also deploy:&lt;/p&gt;

&lt;p&gt;node-exporter&lt;br&gt;
process-exporter&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#load-testing-steps"&gt;
  &lt;/a&gt;
  Load Testing Steps
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#use-nebulaansible-to-deploy-nebula-graph"&gt;
  &lt;/a&gt;
  Use nebula-ansible to deploy Nebula Graph
&lt;/h4&gt;

&lt;p&gt;Set up SSH login without passwords a. Log in 192.168.8.60, 192.168.8.61, 192.168.8.62, and 192.168.8.63 respectively. Create a vesoft user and join in sudoer with NOPASSWD. b. Log in 192.168.8.60 to set up SSH.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ssh-keygen

ssh-copy-id vesoft@192.168.8.61
ssh-copy-id vesoft@192.168.8.62
ssh-copy-id vesoft@192.168.8.63
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#download-nebulaansible-install-ansible-and-modify-the-ansible-configuration"&gt;
  &lt;/a&gt;
  Download nebula-ansible, install Ansible, and modify the Ansible configuration.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo yum install ansible -y
git clone https://github.com/vesoft-inc/nebula-ansible
cd nebula-ansible/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following is an example of inventory.ini.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[all:vars]
# GA or nightly
install_source_type = GA
nebula_version = 2.0.1
os_version = el7
arc = x86_64
pkg = rpm

packages_dir = {{ playbook_dir }}/packages
deploy_dir = /home/vesoft/nebula
data_dir = {{ deploy_dir }}/data

# ssh user
ansible_ssh_user = vesoft

force_download = False

[metad]
192.168.8.[61:63]

[graphd]
192.168.8.[61:63]

[storaged]
192.168.8.[61:63]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#install-and-deploy-nebula-graph"&gt;
  &lt;/a&gt;
  Install and deploy Nebula Graph.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ansible-playbook install.yml
ansible-playbook start.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#monitor-hosts"&gt;
  &lt;/a&gt;
  Monitor hosts
&lt;/h4&gt;

&lt;p&gt;Using docker-compose to deploy a monitoring system is convenient. Docker and Docker-Compose need to be installed on the hosts first.&lt;/p&gt;

&lt;p&gt;Log in 192.168.8.60&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/vesoft-inc/nebula-bench.git

cd nebula-bench
cp -r third/promethues ~/.
cp -r third/exporter ~/.



cd ~/exporter/ &amp;amp;&amp;amp; docker-compose up -d

cd ~/promethues
# Modify the exporter address of monitoring nodes
# vi prometheus.yml
docker-compose up -d

# Copy exporter to 192.168.8.61, 192.168.8.62, and 192.168.8.63, and then start docker-compose
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Configure the Grafana data source and dashboard. For details, see &lt;a href="https://github.com/vesoft-inc/nebula-bench/tree/master/third"&gt;https://github.com/vesoft-inc/nebula-bench/tree/master/third&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#generate-the-ldbc-dataset"&gt;
  &lt;/a&gt;
  Generate the LDBC dataset
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd nebula-bench

sudo yum install -y git \
                    make \
                    file \
                    libev \
                    libev-devel \
                    gcc \
                    wget \
                    python3 \
                    python3-devel \
                    java-1.8.0-openjdk \
                    maven

pip3 install --user -r requirements.txt

# Using `snb.interactive.1` parameter in ldbc_snb_datagen_hadoop, for more infor https://github.com/ldbc/ldbc_snb_datagen_hadoop/wiki/Configuration

python3 run.py data

# Date generated by mv

mv target/data/test_data/ ./sf1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#import-data"&gt;
  &lt;/a&gt;
  Import data
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd nebula-bench
# Modify .evn
cp env .env
vi .env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following is the example of .env&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DATA_FOLDER=sf1
NEBULA_SPACE=sf1
NEBULA_USER=root
NEBULA_PASSWORD=nebula
NEBULA_ADDRESS=192.168.8.61:9669,192.168.8.62:9669,192.168.8.63:9669
#NEBULA_MAX_CONNECTION=100
INFLUXDB_URL=http://192.168.8.60:8086/k6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Compile nebula-importer and K6
./scripts/setup.sh

# Import data
python3 run.py nebula importer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;During the import process, you can focus on the following network bandwidth and disk IO writing.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---g5F_oNP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/143537054-5bab1ec9-13cb-4770-be7e-af94314f969f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---g5F_oNP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/143537054-5bab1ec9-13cb-4770-be7e-af94314f969f.png" alt="Import data" width="880" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGl_xR3W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/143537120-5bb9cf2b-f9d8-4a44-a6df-5dfd2e959ab3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGl_xR3W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/143537120-5bb9cf2b-f9d8-4a44-a6df-5dfd2e959ab3.png" alt="Import data" width="880" height="206"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#execute-the-load-testing"&gt;
  &lt;/a&gt;
  Execute the load testing
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python3 run.py stress run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;According to the code source in the file scenarios, the js file will be automatically rendered and K6 will be used to test all scenarios.&lt;/p&gt;

&lt;p&gt;After the execution is over, the js file and the result will be saved in the output folder.&lt;/p&gt;

&lt;p&gt;Among them, latency is the latency time returned by the server, and responseTime is the time from initiating execute to response by the client. The measurement unit is μs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[vesoft@qa-60 nebula-bench]$ more output/result_Go1Step.json
{
    "metrics": {
        "data_sent": {
            "count": 0,
            "rate": 0
        },
        "checks": {
            "passes": 1667632,
            "fails": 0,
            "value": 1
        },
        "data_received": {
            "count": 0,
            "rate": 0
        },
        "iteration_duration": {
            "min": 0.610039,
            "avg": 3.589942336582023,
            "med": 2.9560145,
            "max": 1004.232905,
            "p(90)": 6.351617299999998,
            "p(95)": 7.997563949999995,
            "p(99)": 12.121579809999997
        },
        "latency": {
            "min": 308,
            "avg": 2266.528722763775,
            "med": 1867,
            "p(90)": 3980,
            "p(95)": 5060,
            "p(99)": 7999
        },
        "responseTime": {
            "max": 94030,
            "p(90)": 6177,
            "p(95)": 7778,
            "p(99)": 11616,
            "min": 502,
            "avg": 3437.376111156418,
            "med": 2831
        },
        "iterations": {
            "count": 1667632,
            "rate": 27331.94978169588
        },
        "vus": {
            "max": 100,
            "value": 100,
            "min": 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[vesoft@qa-60 nebula-bench]$ head -300 output/output_Go1Step.csv | grep -v USE
timestamp,nGQL,latency,responseTime,isSucceed,rows,errorMsg
1628147822,GO 1 STEP FROM 4398046516514 OVER KNOWS,1217,1536,true,1,
1628147822,GO 1 STEP FROM 2199023262994 OVER KNOWS,1388,1829,true,94,
1628147822,GO 1 STEP FROM 1129 OVER KNOWS,1488,2875,true,14,
1628147822,GO 1 STEP FROM 6597069771578 OVER KNOWS,1139,1647,true,30,
1628147822,GO 1 STEP FROM 2199023261211 OVER KNOWS,1399,2096,true,6,
1628147822,GO 1 STEP FROM 2199023256684 OVER KNOWS,1377,2202,true,4,
1628147822,GO 1 STEP FROM 4398046515995 OVER KNOWS,1487,2017,true,39,
1628147822,GO 1 STEP FROM 10995116278700 OVER KNOWS,837,1381,true,3,
1628147822,GO 1 STEP FROM 933 OVER KNOWS,1130,3422,true,5,
1628147822,GO 1 STEP FROM 6597069771971 OVER KNOWS,1022,2292,true,60,
1628147822,GO 1 STEP FROM 10995116279952 OVER KNOWS,1221,1758,true,3,
1628147822,GO 1 STEP FROM 8796093031179 OVER KNOWS,1252,1811,true,13,
1628147822,GO 1 STEP FROM 10995116279792 OVER KNOWS,1115,1858,true,6,
1628147822,GO 1 STEP FROM 6597069777326 OVER KNOWS,1223,2016,true,4,
1628147822,GO 1 STEP FROM 8796093028089 OVER KNOWS,1361,2054,true,13,
1628147822,GO 1 STEP FROM 6597069777454 OVER KNOWS,1219,2116,true,2,
1628147822,GO 1 STEP FROM 13194139536109 OVER KNOWS,1027,1604,true,2,
1628147822,GO 1 STEP FROM 10027 OVER KNOWS,2212,3016,true,83,
1628147822,GO 1 STEP FROM 13194139544176 OVER KNOWS,855,1478,true,29,
1628147822,GO 1 STEP FROM 10995116280047 OVER KNOWS,1874,2211,true,12,
1628147822,GO 1 STEP FROM 15393162797860 OVER KNOWS,714,1684,true,5,
1628147822,GO 1 STEP FROM 6597069770517 OVER KNOWS,2295,3056,true,7,
1628147822,GO 1 STEP FROM 17592186050570 OVER KNOWS,768,1630,true,26,
1628147822,GO 1 STEP FROM 8853 OVER KNOWS,2773,3509,true,14,
1628147822,GO 1 STEP FROM 19791209307908 OVER KNOWS,1022,1556,true,6,
1628147822,GO 1 STEP FROM 13194139544258 OVER KNOWS,1542,2309,true,91,
1628147822,GO 1 STEP FROM 10995116285325 OVER KNOWS,1901,2556,true,0,
1628147822,GO 1 STEP FROM 6597069774931 OVER KNOWS,2040,3291,true,152,
1628147822,GO 1 STEP FROM 8796093025056 OVER KNOWS,2007,2728,true,29,
1628147822,GO 1 STEP FROM 21990232560726 OVER KNOWS,1639,2364,true,9,
1628147822,GO 1 STEP FROM 8796093030318 OVER KNOWS,2145,2851,true,6,
1628147822,GO 1 STEP FROM 21990232556027 OVER KNOWS,1784,2554,true,5,
1628147822,GO 1 STEP FROM 15393162796879 OVER KNOWS,2621,3184,true,71,
1628147822,GO 1 STEP FROM 17592186051113 OVER KNOWS,2052,2990,true,5,
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is also possible to execute the load testing in one scenario and continuously adjust the configuration parameters for comparison.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#concurrent-reading"&gt;
  &lt;/a&gt;
  Concurrent reading
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#Run Go2Step with 50 virtual users and 300 seconds of duration
python3 run.py stress run -scenario go.Go2Step -vu 50 -d 300
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INFO[0302] 2021/08/06 03:55:27 [INFO] finish init the pool

     ✓ IsSucceed

     █ setup

     █ teardown

     checks...............: 100.00% ✓ 1559930     ✗ 0
     data_received........: 0 B     0 B/s
     data_sent............: 0 B     0 B/s
     iteration_duration...: min=687.47µs avg=9.6ms       med=8.04ms max=1.03s  p(90)=18.41ms p(95)=22.58ms p(99)=31.87ms
     iterations...........: 1559930 5181.432199/s
     latency..............: min=398      avg=6847.850345 med=5736   max=222542 p(90)=13046   p(95)=16217   p(99)=23448
     responseTime.........: min=603      avg=9460.857877 med=7904   max=226992 p(90)=18262   p(95)=22429   p(99)=31726.71
     vus..................: 50      min=0         max=50
     vus_max..............: 50      min=50        max=50
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every metric can be monitored at the same time.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DRZiU7B7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/143537715-f4f404b6-e842-4904-94f6-51aaaf4ef129.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DRZiU7B7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/143537715-f4f404b6-e842-4904-94f6-51aaaf4ef129.png" alt="Concurrent reading" width="880" height="256"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;checks&lt;/code&gt; is to verify whether the request is executed successfully. If the execution fails, the failed message will be saved in the CSV file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;awk -F ',' '{print $NF}' output/output_Go2Step.csv|sort |uniq -c
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Execute Go2Step with 200 virtual users and 300 seconds of duration
python3 run.py stress run -scenario go.Go2Step -vu 200 -d 300
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INFO[0302] 2021/08/06 04:02:34 [INFO] finish init the pool

     ✓ IsSucceed

     █ setup

     █ teardown

     checks...............: 100.00% ✓ 1866850    ✗ 0
     data_received........: 0 B     0 B/s
     data_sent............: 0 B     0 B/s
     iteration_duration...: min=724.77µs avg=32.12ms      med=25.56ms max=1.03s  p(90)=63.07ms p(95)=84.52ms  p(99)=123.92ms
     iterations...........: 1866850 6200.23481/s
     latency..............: min=395      avg=25280.893558 med=20411   max=312781 p(90)=48673   p(95)=64758    p(99)=97993.53
     responseTime.........: min=627      avg=31970.234329 med=25400   max=340299 p(90)=62907   p(95)=84361.55 p(99)=123750
     vus..................: 200     min=0        max=200
     vus_max..............: 200     min=200      max=200
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;K6 metrics to be monitored with Grafana&lt;br&gt;
![Concurrent reading](&lt;a href="https://user-images.githubusercontent.com/90186547/143537954-780fade2-ae2a-4882-a33e-3df47ad68402.png%EF%BC%89"&gt;https://user-images.githubusercontent.com/90186547/143537954-780fade2-ae2a-4882-a33e-3df47ad68402.png）&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#concurrent-writing"&gt;
  &lt;/a&gt;
  Concurrent writing
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#Execute insert with 200 virtual users and 300 seconds of duration. By default, batchSize is 100.

python3 run.py stress run -scenario go.Go2Step -vu 200 -d 300
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The js file can be modified manually to adjust batchSize&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sed -i 's/batchSize = 100/batchSize = 300/g' output/InsertPersonScenario.js

# Run K6 manually

scripts/k6 run output/InsertPersonScenario.js -u 400 -d 30s --summary-trend-stats "min,avg,med,max,p(90),p(95),p(99)" --summary-export output/result_InsertPersonScenario.json --out influxdb=http://192.168.8.60:8086/k6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the batchSize is 300 with 400 virtual users, an error will be returned.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INFO[0032] 2021/08/06 04:03:49 [INFO] finish init the pool

     ✗ IsSucceed
      ↳  96% — ✓ 31257 / ✗ 1103

     █ setup

     █ teardown

     checks...............: 96.59% ✓ 31257       ✗ 1103
     data_received........: 0 B    0 B/s
     data_sent............: 0 B    0 B/s
     iteration_duration...: min=12.56ms avg=360.11ms      med=319.12ms max=2.07s   p(90)=590.31ms p(95)=696.69ms p(99)=958.32ms
     iterations...........: 32360  1028.339207/s
     latency..............: min=4642    avg=206931.543016 med=206162   max=915671  p(90)=320397.4 p(95)=355798.7 p(99)=459521.39
     responseTime.........: min=6272    avg=250383.122188 med=239297.5 max=1497159 p(90)=384190.5 p(95)=443439.6 p(99)=631460.92
     vus..................: 400    min=0         max=400
     vus_max..............: 400    min=400       max=400
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;awk -F ',' '{print $NF}' output/output_InsertPersonScenario.csv|sort |uniq -c
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; 31660
   1103  error: E_CONSENSUS_ERROR(-16)."
      1 errorMsg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If E_CONSENSUS_ERROR occurs, it should be that the appendlog buffer of raft is overflown when the concurrency is large, which can be solved by adjusting relevant parameters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The load testing uses the LDBC dataset standard to ensure data uniform. Even when bigger data volume, say one billion vertices, is generated, the graph schema is the same.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;K6 is more convenient than Jmeter for the load testing. For more details, please refer &lt;a href="https://k6.io/docs/"&gt;https://k6.io/docs/&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can easily find the bottleneck of the system resources by simulating various scenarios or adjust parameters in Nebula Graph with the mentioned tools.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>opensource</category>
      <category>database</category>
      <category>devops</category>
      <category>programming</category>
    </item>
    <item>
      <title>Update on the XRPL</title>
      <author>Elliot Lee</author>
      <pubDate>Thu, 02 Dec 2021 02:13:53 +0000</pubDate>
      <link>https://dev.to/ripplexdev/update-on-the-xrpl-5f3e</link>
      <guid>https://dev.to/ripplexdev/update-on-the-xrpl-5f3e</guid>
      <description>&lt;p&gt;By: Elliot Lee and Nik Bougalis, RippleX Engineering&lt;/p&gt;

&lt;p&gt;Over the past several weeks, the XRP Ledger (XRPL) has experienced instability, a transient halt in consensus on November 3 and, over the last several hours, unusually high fees resulting in a large queue of transactions. The XRPL Foundation summarized many of these issues in a recent &lt;a href="https://blog.xrplf.org/status-of-analysis-of-halt-on-nov-3-2021"&gt;communication&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Essentially, the number of trust lines, tokens and transactions on the network has increased dramatically, (and the size of the network’s state has grown), so there is a corresponding need to scale to this growth that the community is now addressing. &lt;/p&gt;

&lt;p&gt;Despite these challenges, the XRP Ledger is continuing to make forward progress because of the hard work of a number of dedicated ecosystem participants, such as the XRPL Foundation. In parallel, many in the XRPL community, including Ripple, are working to more thoroughly understand the issues and propose the best path forward.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#actions-toward-a-solution"&gt;
  &lt;/a&gt;
  Actions Toward a Solution
&lt;/h2&gt;

&lt;p&gt;Since 2013, Ripple, along with others in the community, has contributed improvements to various components of the XRP Ledger and related technology—including on components such as &lt;strong&gt;&lt;a href="https://github.com/ripple/rippled"&gt;rippled&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href="https://github.com/XRPLF/xrpl.js"&gt;xrpl.js&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The team has submitted proposed enhancements to the performance of the codebase that, after approval by the broader community, have already been adopted—including a set of changes that dramatically &lt;a href="https://engineering.ripple.com/how-ripples-c-team-cut-rippleds-memory-footprint-down-to-size/"&gt;reduced the memory usage&lt;/a&gt; for servers. These fixes, which appeared in &lt;a href="https://xrpl.org/blog/2021/rippled-1.7.0.html"&gt;the 1.7.0 release&lt;/a&gt;, are already helping the network to cope with the increased load.  &lt;/p&gt;

&lt;p&gt;Prior to the recent instability, engineers were already working on several proposed changes that should help improve the scalability and performance of the XRP Ledger, but the events of the past few weeks have caused us to redouble our efforts. In the weeks ahead, our team will continue to work hard to identify performance bottlenecks and propose targeted improvements to fix issues.&lt;/p&gt;

&lt;p&gt;Some of the things that we are going to propose include:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Making it easier to run &lt;strong&gt;rippled&lt;/strong&gt; in &lt;a href="https://xrpl.org/rippled-server-modes.html#reporting-mode"&gt;Reporting Mode&lt;/a&gt; – a special mode that’s tailored to handling RPC and WebSocket client requests outside of the main rippled process and which can scale horizontally, making it possible to service more clients, more efficiently.&lt;/li&gt;
&lt;li&gt;Working on “Project Clio,” which was presented at Apex, and is being designed to efficiently service RPC and WebSocket client requests.&lt;/li&gt;
&lt;li&gt;Building profile-guided improvements that help eliminate lock contention, avoid resource starvation, and enhance I/O performance, all of which should make servers perform better at higher loads.&lt;/li&gt;
&lt;li&gt;Proposing several protocol-level improvements, including changes to the binary representation of some objects like trustlines, which should result in significant additional memory savings, reduced overhead, lower bandwidth usage, faster sync times for servers, and less memory pressure for servers.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#call-to-action"&gt;
  &lt;/a&gt;
  Call to Action
&lt;/h2&gt;

&lt;p&gt;The XRP Ledger is an open-source, shared resource and no one party is responsible for it. Several participants in the community have already stepped up, with many going above and beyond. We at Ripple are also focusing engineering efforts on understanding and solving the issues, but as with everything on the ledger, it requires community effort and so we call on everyone in the XRPL community to contribute to the solution.&lt;/p&gt;

&lt;p&gt;Numerous exchanges and other participants use the XRP Ledger. We also call on them to operate infrastructure in support of the network with the same care and diligence that they use in operating their other production environments.&lt;/p&gt;

&lt;p&gt;We believe that the issues related to the rapid growth of the XRP Ledger are transient and, with the help of the broader community, will be solved, so that the Ledger will continue to get stronger as it grows.&lt;/p&gt;

</description>
      <category>xrpl</category>
    </item>
    <item>
      <title>Wazaterm Features</title>
      <author>Shohei Kameda</author>
      <pubDate>Thu, 02 Dec 2021 01:42:03 +0000</pubDate>
      <link>https://dev.to/shohei/wazaterm-features-131g</link>
      <guid>https://dev.to/shohei/wazaterm-features-131g</guid>
      <description>&lt;h1&gt;
  &lt;a href="#wazaterm-features"&gt;
  &lt;/a&gt;
  Wazaterm Features
&lt;/h1&gt;

&lt;p&gt;If you want to access from various platforms, you can use VPS+SSH, but Wazaterm has the following advantages over VPS+SSH.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cpu-and-memory-can-be-freely-selected"&gt;
  &lt;/a&gt;
  CPU and memory can be freely selected
&lt;/h2&gt;

&lt;p&gt;You can freely choose the CPU and memory of the instance running Terminal, so you can use different machine power for different projects. For example, you can use 8G of memory and 2 CPU cores for a Rails project for the last 3 months. In the other project, use less memory for a node. Note that when you change the specs, you have to shut down the instance and start it up again, which takes a little time (about 5+ minutes).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ssh-is-available"&gt;
  &lt;/a&gt;
  SSH is available 🙌
&lt;/h2&gt;

&lt;p&gt;With SSH, you can do almost anything: not only terminal use, but also secure tunneling with port forwarding, SCP, SFTP, and even mount with SSH. Local port forwarding and drive mounting are essential to developing in a local environment. I'll explain how to do this later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-have-root-privileges"&gt;
  &lt;/a&gt;
  You have root privileges
&lt;/h2&gt;

&lt;p&gt;The OS is Ubuntu, so you can use &lt;code&gt;sudo apt install&lt;/code&gt; to install packages and tweak /etc/systemd. (It's your own responsibility if you can't boot). This is necessary for normal development, such as adding imageMagic libraries.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#suspend-resume-can-be-automated"&gt;
  &lt;/a&gt;
  Suspend, Resume can be automated
&lt;/h2&gt;

&lt;p&gt;You can save money by suspending instances when not in use (and at the same time reduce carbon dioxide emissions, so it's earth-friendly!). Suspend/Resume can take about 30~seconds, depending on the size of the memory. This waiting time is a bit stressful, so I made it possible to automate it with a webhook, and by combining it with an iOS shortcut app, you can make it so that I can resume terminal when I arrive at the office and suspend the terminal when it's time to go home. This way, you can start working without waiting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#take-backups"&gt;
  &lt;/a&gt;
  Take backups
&lt;/h2&gt;

&lt;p&gt;You can back up your entire OS. You can back up your entire OS, even if you &lt;code&gt;rm -rf /&lt;/code&gt;. （This is an optional feature, so please use it only if you need it)&lt;/p&gt;

&lt;p&gt;What do you think? Can't wait to use it? I'll explain how to start tomorrow.&lt;/p&gt;

</description>
      <category>linux</category>
      <category>ubuntu</category>
      <category>terminal</category>
      <category>wazaterm</category>
    </item>
    <item>
      <title>Things I learned to appreciate in graduate school: abstraction</title>
      <author>theohartsook</author>
      <pubDate>Thu, 02 Dec 2021 01:23:43 +0000</pubDate>
      <link>https://dev.to/theohartsook/things-i-learned-to-appreciate-in-graduate-school-abstraction-4l9p</link>
      <guid>https://dev.to/theohartsook/things-i-learned-to-appreciate-in-graduate-school-abstraction-4l9p</guid>
      <description>&lt;p&gt;I finished my masters degree over the summer and started a PhD program right after. I have always felt a little bit of the odd one out because my background is in environmental science and GIS rather than computer science or math. However, programming was a big part of my masters and will continue to be in my PhD. I also dabbled with it in my career before going back to school. I would like to share some of what I learned over that time, because I feel that some concepts I struggled to learn in class really began to make sense once I started writing semi-serious code.&lt;/p&gt;

&lt;p&gt;I never really got the point of abstraction before. I saw the obvious benefit of being able to use print() and other handy functions, but I never really thought about while writing scripts. Once I started working on a LiDAR processing pipeline, I really struggled. The pipelines are long and complicated, with some steps requiring GUIs, some steps easy to automate, and many steps that need to be done manually first to find good parameters, which can then be automated.&lt;/p&gt;

&lt;p&gt;This took me one semester to implement, and another semester to get comfortable with. It took a lot of meetings with advisors, mentors, and kind strangers, but eventually I got us a working pipeline. Then I needed to do the tough job of explaining how and why to use this pipeline.&lt;/p&gt;

&lt;p&gt;In my experience LiDAR is really tricky to get started with for people of all kinds of backgrounds. For people in the natural science domain, such as me, it's much more math and computer science heavy than we are used to. For people in the computer science domains, it seems to be the geodetic elements. On top of all this, there is the logistical challenge of file formats, vendor specific software, identifying noise, and so on. There is a lot to explain and it is easy to get confused.&lt;/p&gt;

&lt;p&gt;In order to explain a pipeline like this, I really had to start using abstraction to describe it at different levels. This made me think a lot about the difference between the general overview and the implementation level.&lt;/p&gt;

&lt;p&gt;This is an example of the high level overview I would give.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e9nJDT5x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u123vp1w1kkniuf4ixwr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e9nJDT5x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u123vp1w1kkniuf4ixwr.png" alt="The simple version" width="880" height="986"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And for this example, I zoomed in on specific step (getting the data from the scanner) and included some of the decisions that need to be made.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wXve-qTw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/200kvufbtokyufu75vex.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wXve-qTw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/200kvufbtokyufu75vex.png" alt="The complicated version" width="880" height="643"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This requires a lot of decision making and experience really makes a difference here. The process can be automated, but it requires a lot of parameters to be decided. These parameters vary depending on the type and platform of scanner, wavelength of the laser, the weather, the number of scanning positions... It takes a lot of work to get centimeter or millimeter level accuracy! &lt;/p&gt;

&lt;p&gt;Obviously this is a lot to explain to people, and it's a lot of details that people don't necessarily need to know right away. Especially if someone is just curious about what LiDAR can do and if it would be applicable for their work. This pipeline can be described at multiple levels of abstraction, so it's up to me to pick the best one for my audience at that time. I often want to go into the details, but "I used PDAL to prepare these rasters" is appropriate.&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>programming</category>
    </item>
    <item>
      <title>Making a Shareable Weather-Based Music Forecast</title>
      <author>Jon</author>
      <pubDate>Thu, 02 Dec 2021 01:15:09 +0000</pubDate>
      <link>https://dev.to/jonuleis/making-a-shareable-weather-based-music-forecast-3d0l</link>
      <guid>https://dev.to/jonuleis/making-a-shareable-weather-based-music-forecast-3d0l</guid>
      <description>&lt;p&gt;I was delighted when the brilliantly creative &lt;a href="https://naomiscottcreates.com/"&gt;Naomi Scott&lt;/a&gt; reached out this summer asking if I'd like to collaborate on a project. In her past life at Beggars Group (home of Rough Trade, Matador Records and 4AD) we made interactive sites for phenomenal rock acts including The Breeders, Stephen Malkmus and Parquet Courts. These sites always end up being just as fun to create as they are to use, so I was excited to start on a new one. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9ILsQq5P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/grwwe91ickc3udosdizv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ILsQq5P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/grwwe91ickc3udosdizv.png" alt="Homeshake forecast in Brooklyn" width="880" height="502"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-brief"&gt;
  &lt;/a&gt;
  The Brief
&lt;/h2&gt;

&lt;p&gt;Naomi asked about the feasibility of building a site that created personalized, shareable weather forecasts to celebrate &lt;a href="https://homeshake.net/"&gt;Homeshake&lt;/a&gt;'s new album, aptly titled &lt;em&gt;UNDER THE WEATHER&lt;/em&gt;. The pitch was to create an experience that would select a song from the album to perfectly pair with your local weather conditions—a somber track if it's raining, something a little more uptempo on a nice day—with the ability to share a graphic of your forecast and song to Twitter and Facebook. The client also requested integration with Spotify to allow visitors to save their recommended track directly to their streaming library.&lt;/p&gt;

&lt;p&gt;I had experience creating sites that produce images with dynamic data for visitors to share, as we're often asked by clients to build such generators at &lt;a href="http://dev.ralphandco.com/"&gt;Ralph Creative&lt;/a&gt;. Spotify integration was also familiar territory, as many sites I've worked on with Naomi involved creating custom playlists (like our vast &lt;a href="https://features.matadorrecords.com/decade/"&gt;Matador Decade&lt;/a&gt; site). Extrapolating weather data from a visitor was new ground for me, but I love a challenge! Naomi got cracking on designing the look &amp;amp; feel of the site, and I scaffolded a new Vue.js project—my preferred front-end framework—to begin experimenting and building.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#locating-visitors"&gt;
  &lt;/a&gt;
  Locating Visitors
&lt;/h2&gt;

&lt;p&gt;After some research, we settled on using the &lt;a href="https://openweathermap.org/api"&gt;OpenWeather API&lt;/a&gt;, which has a free plan that offers a very generous 1 million calls per month. But first, we needed a way to determine the visitor's location and alternatively allow them to get forecasts for anywhere in the world. The right solution ended up being a combination of three free APIs: OpenWeather, FreeGeoIP and Google Maps.&lt;/p&gt;

&lt;p&gt;As OpenWeather doesn't have its own geolocation feature, we decided to first ping &lt;a href="https://freegeoip.app/"&gt;FreeGeoIP&lt;/a&gt; on pageload via AJAX. Their free API allows 15,000 requests per hour and provides plenty of useful information that gives us a best guess at the visitor's location, including city, state and country names, as well as latitude/longitude coordinates (which we could then pass to OpenWeather to ensure accuracy).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;axios&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://freegeoip.app/json/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;city&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;region_code&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, we didn't want to force visitors to only get a forecast for the location we determined for their IP—there's always a chance it could be inaccurate, and we thought people might enjoy seeing what songs would be suggested for other cities and parts of the world. &lt;/p&gt;

&lt;p&gt;It was quickly apparent that OpenWeather's text query functionality was a bit hit-or-miss, which was all the more reason to find a solution that let us send over coordinates rather than place names. For this, we ended up going with a familiar and intuitive component: the Google Maps &lt;a href="https://developers.google.com/maps/documentation/places/web-service/autocomplete"&gt;Place Autocomplete&lt;/a&gt; API. This would allow visitors to type a partial name of anywhere in the world, select a result, and then provide us coordinates to feed to OpenWeather.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generating-the-forecast"&gt;
  &lt;/a&gt;
  Generating the Forecast
&lt;/h2&gt;

&lt;p&gt;Armed with latitude/longitude coordinates, we send an AJAX request to OpenWeather and receive back a wealth of information about the location: the current day, time and timezone (important, since the chosen location could be on the opposite side of the world), and a few other interesting pieces of information: a description of the weather, the "feels like" temperature, and the wind speed. Then we massage the data a bit: convert Celsius to Fahrenheit for applicable countries, round the temperatures to whole numbers, and use the &lt;a href="https://www.spc.noaa.gov/faq/tornado/beaufort.html"&gt;Beaufort Wind Scale&lt;/a&gt; to get a brief description of the wind conditions ("light breeze", "storm", etc) based on the speed converted to knots. &lt;/p&gt;

&lt;p&gt;At this point, we just needed a way to pair the current weather conditions to one of the album's songs. While Spotify does offer some fascinating &lt;a href="https://developer.spotify.com/documentation/web-api/reference/#/operations/get-audio-features"&gt;audio features&lt;/a&gt; through their API including danceability, energy and tempo, we felt a more human touch would help here since we were only dealing with twelve tracks. Naomi was able to assign unique weather scenarios to each song based on the mood of the track, and provided me a list (seen below) to adapt using OpenWeather's &lt;a href="https://openweathermap.org/weather-conditions"&gt;condition codes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qxy-zJJc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y83i3ooz1avwp16f42jn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qxy-zJJc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y83i3ooz1avwp16f42jn.png" alt="Homeshake tracks" width="842" height="810"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-polish"&gt;
  &lt;/a&gt;
  Adding Polish
&lt;/h2&gt;

&lt;p&gt;Line boil&lt;/p&gt;

&lt;p&gt;As of this blog, we've generated nearly 2,000 forecasts! &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>vue</category>
    </item>
    <item>
      <title>🧶 Implicit CLSX in React</title>
      <author>Andrew Luca</author>
      <pubDate>Thu, 02 Dec 2021 00:53:21 +0000</pubDate>
      <link>https://dev.to/iamandrewluca/implicit-clsx-in-react-2212</link>
      <guid>https://dev.to/iamandrewluca/implicit-clsx-in-react-2212</guid>
      <description>&lt;p&gt;Using &lt;a href="https://github.com/lukeed/clsx"&gt;&lt;code&gt;clsx&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://github.com/JedWatson/classnames"&gt;&lt;code&gt;classnames&lt;/code&gt;&lt;/a&gt; in &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; lately has become a trend with utility-first CSS frameworks like &lt;a href="https://tailwindcss.com/"&gt;Tailwind CSS&lt;/a&gt;, where you have to write a lot of classes, and sometimes also with conditionals.&lt;/p&gt;

&lt;p&gt;If you come from a framework like &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt; you may saw that there you have this &lt;a href="https://vuejs.org/v2/guide/class-and-style.html"&gt;Class Binding&lt;/a&gt; functionality out of the box.&lt;/p&gt;

&lt;p&gt;In this blog post I will show you how you can patch React library, so you don't have import &lt;code&gt;clsx&lt;/code&gt; everywhere where you need it, and to have this functionally out of the box also in React.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;☢️ This is just for learning purposes. Use at your own risk&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#create-new-react-app"&gt;
  &lt;/a&gt;
  Create new React App
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn create react-app implicit-clsx
&lt;span class="nb"&gt;cd &lt;/span&gt;implicit-clsx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#install-raw-clsx-endraw-"&gt;
  &lt;/a&gt;
  Install &lt;code&gt;clsx&lt;/code&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add clsx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#remove-raw-react-endraw-"&gt;
  &lt;/a&gt;
  Remove &lt;code&gt;react&lt;/code&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn remove react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#install-raw-react-endraw-under-raw-rawreact-endraw-name-more-about-npm-aliases"&gt;
  &lt;/a&gt;
  Install &lt;code&gt;react&lt;/code&gt; under &lt;code&gt;raw-react&lt;/code&gt; name (More about &lt;a href="https://dev.to/iamandrewluca/put-your-react-on-a-diet-3c6d"&gt;NPM Aliases&lt;/a&gt;)
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add raw-react@npm:react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#create-own-react-that-will-export-from-raw-rawreact-endraw-"&gt;
  &lt;/a&gt;
  Create own React that will export from &lt;code&gt;raw-react&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;my-react/index.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;raw-react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;my-react/jsx-runtime.js&lt;/strong&gt; (About &lt;a href="https://dev.to/iamandrewluca/jsx-at-lowest-level-371b"&gt;JSX Runtime&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;raw-react/jsx-runtime&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;my-react/jsx-dev-runtime.js&lt;/strong&gt; (About &lt;a href="https://dev.to/iamandrewluca/jsx-at-lowest-level-371b"&gt;JSX Runtime&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;raw-react/jsx-dev-runtime&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#install-raw-myreact-endraw-as-raw-react-endraw-package-more-about-npm-aliases"&gt;
  &lt;/a&gt;
  Install &lt;code&gt;my-react&lt;/code&gt; as &lt;code&gt;react&lt;/code&gt; package (More about &lt;a href="https://dev.to/iamandrewluca/put-your-react-on-a-diet-3c6d"&gt;NPM Aliases&lt;/a&gt;)
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add react@file:my-react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#patch-jsx-runtime"&gt;
  &lt;/a&gt;
  Patch JSX Runtime
&lt;/h4&gt;

&lt;p&gt;Now let's patch JSX Runtime to check for &lt;code&gt;className&lt;/code&gt;. Here comes the hard work 😀&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LVkWACN0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lt3ger9jgzyvjxqfmlmm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LVkWACN0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lt3ger9jgzyvjxqfmlmm.png" alt="Image description" width="666" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;my-react/jsx-dev-runtime.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;raw-react/jsx-dev-runtime&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clsx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;clsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jsxDEV&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;jsxDEV&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;jsxDEV&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;clsx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;jsxDEV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it's time to explain what gibberish I wrote here 🤣 I will explain some things only everything else I think it's clear&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments"&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; arguments is an Array-like object accessible inside functions that contains the values of the arguments passed to that function.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply"&gt;&lt;code&gt;apply&lt;/code&gt;&lt;/a&gt; The apply() method calls a function with a given this value, and arguments provided as an array (or an array-like object).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Signature of function &lt;code&gt;jsxDEV&lt;/code&gt; is &lt;code&gt;type, props, key&lt;/code&gt;. So &lt;code&gt;arguments[0]&lt;/code&gt; is &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;arguments[1]&lt;/code&gt; is &lt;code&gt;props&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And we check if type is a string, because in &lt;code&gt;react-dom&lt;/code&gt; host elements can be only strings, we don't want to change for example &lt;code&gt;className&lt;/code&gt; on some function or class components.&lt;/p&gt;

&lt;p&gt;And second we check if we have &lt;code&gt;className&lt;/code&gt; prop, we patch it with a &lt;code&gt;clsx&lt;/code&gt; call.&lt;/p&gt;

&lt;p&gt;Last line in the function we just forward everything to the native &lt;code&gt;jsxDEV&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To have this work also on build, you will need to apply this patch also to &lt;code&gt;jsx&lt;/code&gt; and &lt;code&gt;jsxs&lt;/code&gt; in &lt;code&gt;my-react/jsx-runtime.js&lt;/code&gt; see repo link at the end&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#reinstall-raw-myreact-endraw-as-raw-react-endraw-package-to-update"&gt;
  &lt;/a&gt;
  Reinstall &lt;code&gt;my-react&lt;/code&gt; as &lt;code&gt;react&lt;/code&gt; package to update
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add react@file:my-react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#change-raw-appjs-endraw-to-see-the-changes"&gt;
  &lt;/a&gt;
  Change &lt;code&gt;App.js&lt;/code&gt; to see the changes
&lt;/h4&gt;

&lt;p&gt;Replace line with a single &lt;code&gt;className&lt;/code&gt; as string&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To something that usually can be passed to &lt;code&gt;clsx&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}]}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#start-the-app-and-lets-check-in-browser"&gt;
  &lt;/a&gt;
  Start the app and let's check in browser
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YoKHC7HG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rxgtl80yqbr4xdhwz1ss.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YoKHC7HG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rxgtl80yqbr4xdhwz1ss.png" alt="Image description" width="720" height="186"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Working example &lt;a href="https://github.com/iamandrewluca/implicit-clsx"&gt;https://github.com/iamandrewluca/implicit-clsx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I played around with TypeScript version, but couldn't make it work because of types mismatch, needs more investigation.&lt;/p&gt;

&lt;p&gt;And we are done! Thanks for reading my blog posts!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/d2Z4rTi11c9LRita/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/d2Z4rTi11c9LRita/giphy.gif" alt="" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@modernafflatusphotography?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Ash from Modern Afflatus&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/inception?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>jsx</category>
      <category>vue</category>
      <category>clsx</category>
    </item>
    <item>
      <title>Be 10x 😲 faster with BInst.Tk</title>
      <author>Francesco Bianco</author>
      <pubDate>Thu, 02 Dec 2021 00:52:40 +0000</pubDate>
      <link>https://dev.to/francescobianco/be-10x-faster-with-binsttk-1752</link>
      <guid>https://dev.to/francescobianco/be-10x-faster-with-binsttk-1752</guid>
      <description>&lt;p&gt;Often installing software that has not yet been published on a registry is boring and complicated, and perhaps precisely to avoid cloning a repository from GitHub and perhaps reading a README that is not yet complete, you go ahead and lose the opportunity to test a product maybe valid but still not fully ripe for an official release. That's why I invented BInst.Tk, you just need to type a CURL command and you have your software ready to use directly from GitHub to your PC.&lt;br&gt;
For example to install Docker directly from source will be enough use the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ curl -s binst.tk | bash -s docker/docker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command prepare and install Docker from GitHub sources.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Find out the secret of how it works and try to contribute at the following link&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/javanile/binst.tk"&gt;https://github.com/javanile/binst.tk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>github</category>
      <category>shell</category>
      <category>docker</category>
      <category>devops</category>
    </item>
  </channel>
</rss>
