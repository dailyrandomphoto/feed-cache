<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Binance Clone Script- a guide to provide a platform  like binance for entrepreneurs</title>
      <author>giovani</author>
      <pubDate>Sat, 11 Sep 2021 06:26:24 +0000</pubDate>
      <link>https://dev.to/giovanidev/binance-clone-script-a-guide-to-provide-a-platform-a-website-like-binance-for-entrepreneurs-1a76</link>
      <guid>https://dev.to/giovanidev/binance-clone-script-a-guide-to-provide-a-platform-a-website-like-binance-for-entrepreneurs-1a76</guid>
      <description>&lt;h2&gt;
  &lt;a href="#clone-script"&gt;
  &lt;/a&gt;
  Clone script
&lt;/h2&gt;

&lt;p&gt;Clone script is a tested architecture of the existing app that we can use to develop your customized software. With the help of &lt;strong&gt;&lt;a href="https://radindev.com/binance-clone-script/"&gt;Binance clone script&lt;/a&gt;&lt;/strong&gt; you will be able to launch your exchange platform with all the binance features, but you can add the extra features that you want to the platform and build your customized website. Binance clone script, enables the customers to trade directly in a p2p method. With binance clone script you can develop a hassle-free, user-friendly and secure website like Binance in a short time. Stay with us to read about the Binance clone script.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--obSe8hKT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://radindev.com/wp-content/uploads/2021/08/binance-pic-1-1.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--obSe8hKT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://radindev.com/wp-content/uploads/2021/08/binance-pic-1-1.svg" alt="binance clone  script"&gt;&lt;/a&gt;   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-binance-clone-script"&gt;
  &lt;/a&gt;
  What is Binance clone script?
&lt;/h2&gt;

&lt;p&gt;Cryptocurrency is being more and more accepted by people day by day. A large value of assets are being traded every day and a significant amount of the trading traffic belongs to the Binance exchange. It shows that Binance is popular among traders because of its high security, low transaction fees, and some other advanced features that it has. Binance is a successful, reliable, and secure cryptocurrency exchange platform. This company was founded in 2017 and climbed up the stairs of success so fast as its revenue in 2020 was about $800 M. Based on the reports its &lt;br&gt;
Website Visits was about 251.3 m on May 2021.        This company was established in China in Sep 2017. Binance is a marketplace that supports the exchange of coins like bitcoin, litecoin, ethereum, and more. Traders use Binance to do different tasks on the platform.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-premium-features-of-binance-that-cause-people-to-choose-binance-exchange"&gt;
  &lt;/a&gt;
  The premium features of binance that cause people to choose binance exchange:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Low fees&lt;/strong&gt;: Binance is one of the exchange websites that costs lower transaction fees than its competitors. Binance charges a fee of 0.1% for transactions.&lt;br&gt;
&lt;strong&gt;Accepts new cryptocurrencies:&lt;/strong&gt; new cryptocurrencies can be added to the list on binance after the completion of the initial coin offerings.&lt;br&gt;
&lt;strong&gt;Bonuses and rewards:&lt;/strong&gt; traders will gain rewards such as free crypto coins. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-of-binance-exchange"&gt;
  &lt;/a&gt;
  Features of binance exchange
&lt;/h2&gt;

&lt;p&gt;Multilingual support &lt;br&gt;
Live trade chart &lt;br&gt;
Referral program&lt;br&gt;
Powerful trade match engine &lt;br&gt;
Multicurrency support &lt;br&gt;
Perfect UI/UX design &lt;br&gt;
Different trading orders: market, limit , stop, and stop-limit order &lt;br&gt;
P2p trading&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#binance-clone-app"&gt;
  &lt;/a&gt;
  Binance clone app   &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ypmFeqv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://radindev.com/wp-content/uploads/2021/08/binance-app-1.svg" alt="binance clone app script"&gt;
&lt;/h2&gt;

&lt;p&gt;Binance clone app development is the process of creating a fast performing, trading mobile app compatible with ios or android, with similar features to Binance app. Nowadays that each person has a personal smartphone, you can see that they do almost every task via their smartphones. So developing a binance clone app will enable clients to trade anywhere and easily through their smartphones.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-binance-clone-app"&gt;
  &lt;/a&gt;
  Features of binance clone app
&lt;/h3&gt;

&lt;p&gt;• Compatible with IOS and android &lt;br&gt;
• Pin lock features &lt;br&gt;
• Multilingual support &lt;br&gt;
• Real time updates of the assets’ value&lt;br&gt;
• Transaction history &lt;br&gt;
• Live chat&lt;br&gt;
• Faster chat&lt;br&gt;
• Trading orders&lt;br&gt;
• Referral bonuses&lt;br&gt;
• Instant buying and selling &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-binance-clone-script"&gt;
  &lt;/a&gt;
  Features of binance clone script
&lt;/h3&gt;

&lt;p&gt;• Liquid swap &lt;br&gt;
• Smartchain&lt;br&gt;
• Trust wallet integration&lt;br&gt;
• DEX development &lt;br&gt;
• Launchpad&lt;br&gt;
• Launchpool staking &lt;br&gt;
• Bonous and rewards &lt;br&gt;
• Token listing &lt;br&gt;
• Low transaction fee&lt;br&gt;
• Matching trade &lt;br&gt;
• Multi payment method&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--60oq0gFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://radindev.com/wp-content/uploads/2021/08/binance-white-label.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--60oq0gFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://radindev.com/wp-content/uploads/2021/08/binance-white-label.svg" alt="white label binance clone script"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-using-a-white-label-binance-clone-script"&gt;
  &lt;/a&gt;
  Benefits of using a white label binance clone script
&lt;/h2&gt;

&lt;p&gt;1.White label crypto exchange platform&lt;br&gt;
reduces the development time and energy needed to develop a website or write script from scratch&lt;br&gt;
2.The white label binance clone script is a pre-made script which doesn’t need that much money to develop a software from zero.&lt;br&gt;
3.The clone scripts have the high success rate because these scripts are powerful. The fact that some other successful websites are using this script and they are working properly are a testament to the good performance of these scripts.&lt;br&gt;
4.Various altcoins are available in this exchange platform. The exchange supports hundreds of cryptocurrency coins and tokens.&lt;br&gt;
5.It is completely customizable, if you want to add some additional features to white label binance clone script it’s possible. &lt;br&gt;
6.It is a bug-free and hassle-free platform and you will not face new problems during the process of deployment. And you can be sure that the platform will work properly because the script is working on other websites.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#white-label-binance-clone-script-feature-for-users-and-admin"&gt;
  &lt;/a&gt;
  White label binance clone script feature for users and admin
&lt;/h2&gt;

&lt;p&gt;White label binance clone script is a ready-made cryptocurrency exchange clone script of a successful exchange platform named binance. Like other clones, it holds all the features of binance platform. Binance white label clone is completely tested. By using a white label clone script you can start your branding faster. And catch the attention of traders to your exchange platform.&lt;/p&gt;

&lt;p&gt;Also, it will help you to enter the market sooner than developing a website from scratch.&lt;br&gt;
Here is the list of the features the white label Binance clone script offers to its users:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Admin:&lt;/strong&gt;&lt;br&gt;
List tokens and crypto pairs as available trading pairs.&lt;br&gt;
Enable number of liquidity APIs based on the market changes.&lt;br&gt;
Trading fee and withdrawal fee on exchange can be updated any time.&lt;br&gt;
Admin URL  login is available with the http access.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;User:&lt;/strong&gt;&lt;br&gt;
The trading order only will be placed after the 2fa and sms  verification.&lt;br&gt;
IP address verification to disable multiple logins&lt;br&gt;
Transaction history &lt;br&gt;
User friendly User dashboard&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-should-you-start-a-website-like-binance"&gt;
  &lt;/a&gt;
  Why should you start a website like Binance?
&lt;/h2&gt;

&lt;p&gt;Brand reputation &lt;br&gt;
Potential customer &lt;br&gt;
High amount of transactions&lt;br&gt;
High market cap for users &lt;br&gt;
Users can learn and earn&lt;br&gt;
 the clone script is a replica of a famous website that exist before , which is an assurance that there is already a “demand” for that website. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#security-features-of-binance-clone-script"&gt;
  &lt;/a&gt;
  Security features of Binance clone script
&lt;/h2&gt;

&lt;p&gt;• Email verification &lt;br&gt;
• Users authentication &lt;br&gt;
• Two factor authentication &lt;br&gt;
• Multi sig wallet integration&lt;br&gt;
• Secure cold wallet storage &lt;br&gt;
• Registry lock&lt;br&gt;
• SMS verifications&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-buy-bitcoin-on-the-binance-platform"&gt;
  &lt;/a&gt;
  How to buy Bitcoin on the Binance platform?
&lt;/h3&gt;

&lt;p&gt;The user  must log in to the Binance account &lt;br&gt;
The user must choose the exchange interface either basic or advanced.&lt;br&gt;
Different types of cryptocurrencies such as BNB, USDT, BTC, and ETH are available that user has to select among them. &lt;br&gt;
After choosing the desired bitcoins user must choose the coin that wants to exchange with&lt;br&gt;
As a result, a trading graph will appear for the user that shows how coins are being exchanged with each other. &lt;br&gt;
The user can set conditions for the order types such as limit order, stop-limit order, and more.&lt;br&gt;
The number of coins to be traded can be specified by the user.&lt;br&gt;
 Binance DEX clone script &lt;br&gt;
In the DEX Binance clone script, there is no need for a central authority to control the trade.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-of-binance-dex-clone-script"&gt;
  &lt;/a&gt;
  Features of Binance DEX Clone Script
&lt;/h2&gt;

&lt;p&gt;Decentralized Order Book&lt;/p&gt;

&lt;p&gt;150+ Cryptocurrencies Support&lt;/p&gt;

&lt;p&gt;Instant Buy &amp;amp; Sell Bitcoins&lt;/p&gt;

&lt;p&gt;Two Factor authentication&lt;/p&gt;

&lt;p&gt;Crypto Wallet Support&lt;/p&gt;

&lt;p&gt;Fiat-Crypto Exchange&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yOUnyOS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://radindev.com/wp-content/uploads/2021/08/like-binance.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yOUnyOS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://radindev.com/wp-content/uploads/2021/08/like-binance.svg" alt="clone a website like binance"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#steps-for-creating-a-successful-exchange-platform"&gt;
  &lt;/a&gt;
  Steps for creating a successful exchange platform
&lt;/h3&gt;

&lt;p&gt;You know that you can add extra features and customize your exchange website.so use this possibility in the best way you can for developing a user friendly and popular exchange website. &lt;/p&gt;

&lt;p&gt;Read and test all the Binance features&lt;br&gt;
Understand the weakness and strengths of the platform to improve the weakness.&lt;br&gt;
Try to add some extra features to the platform that are useful for users ( you can find these features by asking users opinions )&lt;br&gt;
Search the social Media and users’ feedback to understand the users’ opinions. The features that they like and some extra features that they prefer to be added to the platform understand are the things users don’t like about the platform and solve it in your exchange.&lt;br&gt;
Check your competitors’ websites. Provide new features and updates for your exchange platform users. &lt;br&gt;
Keep updating your security features of the website and the speed of the transaction because these two factors are so important in exchange platforms.&lt;br&gt;
Find a trustworthy company to clone a website like OKEx for you.&lt;br&gt;
Check out the other popular websites and figure out what features do they have that attract the traders.&lt;br&gt;
Think of some rewarding system to attract more users to the platform, like setting some prizes for the first transaction, welcoming prizes for registration, and some other ways.&lt;br&gt;
Add an educational part to the platform. And make it possible for traders to learn and gain. This factor may attract new traders because they are interested in learning about the crypto exchange.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-choose-the-best-company-to-develop-a-website-like-binance"&gt;
  &lt;/a&gt;
  How to choose the best company to develop a website like Binance?
&lt;/h2&gt;

&lt;p&gt;Support Period.&lt;br&gt;
Customization Option.&lt;br&gt;
Data Backup.&lt;br&gt;
100% Source Code.&lt;br&gt;
Maintenance Cost.&lt;br&gt;
Free Addons&lt;br&gt;
Their customers feed backs&lt;br&gt;
We recommend you request binance clone script from your chosen company before purchasing the script.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Create a Netflix clone from Scratch: JavaScript PHP + MySQL Day 47</title>
      <author>Christopher Glikpo</author>
      <pubDate>Sat, 11 Sep 2021 05:51:40 +0000</pubDate>
      <link>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-47-37b0</link>
      <guid>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-47-37b0</guid>
      <description>&lt;p&gt;Netflix provides streaming movies and TV shows to over 75 million subscribers across&lt;br&gt;
the globe. Customers can watch as many shows/ movies as they want as long as they are&lt;br&gt;
connected to the internet for a monthly subscription fee of about ten dollars. Netflix produces&lt;br&gt;
original content and also pays for the rights to stream feature films and shows.&lt;/p&gt;

&lt;p&gt;In this video,we will be  Creating mute and unmute functionalities&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/01wvSu7HDUg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you like my work, please consider&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/cglikpo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c23TxQOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jm11knj7d8zwcvo150q2.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;br&gt;
so that I can bring more projects, more articles for you&lt;/p&gt;

&lt;p&gt;If you want to learn more about Web Development, feel free to &lt;a href="https://www.youtube.com/c/ChristopherGlikpo"&gt;follow me on Youtube!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Redux Middleware – What it is and How to Build it from Scratch</title>
      <author>Yogesh Chavan</author>
      <pubDate>Sat, 11 Sep 2021 05:33:52 +0000</pubDate>
      <link>https://dev.to/myogeshchavan97/redux-middleware-what-it-is-and-how-to-build-it-from-scratch-4fgl</link>
      <guid>https://dev.to/myogeshchavan97/redux-middleware-what-it-is-and-how-to-build-it-from-scratch-4fgl</guid>
      <description>&lt;p&gt;In this article, we will explore what is a middleware in Redux, why it's used, and how you can create your own middleware from scratch.&lt;/p&gt;

&lt;p&gt;So let's get started.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Want to learn Redux from scratch and build a full-stack &lt;a href="https://www.youtube.com/watch?v=2zaPDfCKAvM"&gt;food ordering app&lt;/a&gt; with stripe payment integration? Check out my &lt;a href="https://master-redux.yogeshchavan.dev/"&gt;Mastering Redux&lt;/a&gt; course.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-is-redux-middleware"&gt;
  &lt;/a&gt;
  What Is Redux Middleware?
&lt;/h2&gt;

&lt;p&gt;Redux Middleware allows you to intercept every action sent to the reducer so you can make changes to the action or cancel the action.&lt;/p&gt;

&lt;p&gt;Middleware helps you with logging, error reporting, making asynchronous requests, and a whole lot more.&lt;/p&gt;

&lt;p&gt;Take a look at the below code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;INCREMENT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DECREMENT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;current state&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;INCREMENT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;INCREMENT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DECREMENT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a &lt;a href="https://codesandbox.io/s/focused-cori-h9iwo"&gt;Code Sandbox Demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to understand how the above code works in a step-by-step way, check out my &lt;a href="https://www.freecodecamp.org/news/redux-for-beginners/"&gt;Redux for Beginners&lt;/a&gt; article.&lt;/p&gt;

&lt;p&gt;As I explained in that article, the &lt;code&gt;createStore&lt;/code&gt; function accepts three arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the first argument is a function that is normally known as a reducer – required argument&lt;/li&gt;
&lt;li&gt;the second argument is the initial value of the state – optional argument&lt;/li&gt;
&lt;li&gt;the third argument is a middleware – optional argument&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-create-middleware-in-react"&gt;
  &lt;/a&gt;
  How to Create Middleware in React
&lt;/h2&gt;

&lt;p&gt;To create a middleware, we first need to import the &lt;code&gt;applyMiddleware&lt;/code&gt; function from Redux like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;applyMiddleware&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's say we're creating a &lt;code&gt;loggerMiddleware&lt;/code&gt;. Then to define the middleware we need to use the following syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loggerMiddleware&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// your code&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code is equivalent to the below code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loggerMiddleware&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// your code&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the middleware function is created, we pass it to the &lt;code&gt;applyMiddleware&lt;/code&gt; function like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;middleware&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;applyMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loggerMiddleware&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, we pass the middleware to the &lt;code&gt;createStore&lt;/code&gt; function like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even though we mentioned above that middleware is the third argument to the &lt;code&gt;createStore&lt;/code&gt; function, the second argument (initial state) is optional. So based on the type of arguments, the &lt;code&gt;createStore&lt;/code&gt; function automatically identifies that the passed argument is a middleware because it has the specific syntax of nested functions.&lt;/p&gt;

&lt;p&gt;Here's an updated &lt;a href="https://codesandbox.io/s/recursing-heyrovsky-q8zl7?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt; for the above code.&lt;/p&gt;

&lt;p&gt;In the above Code sandbox demo, the &lt;code&gt;loggerMiddleware&lt;/code&gt; looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loggerMiddleware&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;action&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a &lt;a href="https://q8zl7.csb.app/"&gt;preview link&lt;/a&gt; for the above Code Sandbox demo.&lt;/p&gt;

&lt;p&gt;If you check the console, you will see the following output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MjtpWwsv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631266962749/VH83Z-ihj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MjtpWwsv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631266962749/VH83Z-ihj.png" alt="middleware_1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before the action is dispatched to the store, the middleware gets executed as we can see the action logged to the console. Because we're calling the next function inside the &lt;code&gt;loggerMiddleware&lt;/code&gt; by passing the action, the reducer will also be executed which results in the change in the store.&lt;/p&gt;

&lt;p&gt;Now, what will happen If we don't call the next function inside the &lt;code&gt;loggerMiddleware&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Then the action will not be sent to the reducer so the store will not be updated.&lt;/p&gt;

&lt;p&gt;If you've worked with Node.js then you might find it similar to how middleware works in Node.js.&lt;/p&gt;

&lt;p&gt;In Node.js middleware also, if we don't call the next function, the request will not be sent forward.&lt;/p&gt;

&lt;p&gt;Here's an updated &lt;a href="https://codesandbox.io/s/dry-dew-6ybfy?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt; with the removed next function call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loggerMiddleware&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;action&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a &lt;a href="https://6ybfy.csb.app/"&gt;preview link&lt;/a&gt; for the above Code Sandbox demo.&lt;/p&gt;

&lt;p&gt;If you check the console, you will see the following output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4YnuZLqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631267159544/mZzFpODRc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4YnuZLqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631267159544/mZzFpODRc.png" alt="middleware_2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we only get the actions logged to the console. And as the action is not forwarded to the reducer, it will not be executed – so we don't see the console.log from the &lt;code&gt;store.subscribe&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;As described earlier, we can modify the action from the middleware before it's sent to the reducer.&lt;/p&gt;

&lt;p&gt;Here's an updated &lt;a href="https://codesandbox.io/s/currying-cherry-nuupf?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt; where we're changing the payload of the action before it's sent to the reducer.&lt;/p&gt;

&lt;p&gt;The code for the middleware looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loggerMiddleware&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;action&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a &lt;a href="https://nuupf.csb.app/"&gt;preview link&lt;/a&gt; for the above Code Sandbox demo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CkHk3wNy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631267243442/SX_TDeKMU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CkHk3wNy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631267243442/SX_TDeKMU.png" alt="middleware_3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As per the code, once the action is logged to the console, we're setting the action payload to a value of 3. So the action type remains the same but the payload is changed.&lt;/p&gt;

&lt;p&gt;So we see the state changed to 3 initially. Then again it's incremented by 3 which makes it 6. Finally, it's decremented by 3 making the final state value 3.&lt;/p&gt;

&lt;p&gt;Before the action is sent to the reducer, our &lt;code&gt;loggerMiddleware&lt;/code&gt; gets called where we're changing the payload value and we're always setting it to 3 before it's sent to the reducer. So based on the action type INCREMENT or DECREMENT, the reducer will always be changed by a value of 3.&lt;/p&gt;

&lt;p&gt;Even though we're changing the action in the above code, there is no issue in this case because it's a middleware and not a reducer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Reducers should be a pure function and we shouldn't make any changes to state and action inside the reducer. You can learn more about it in detail in my &lt;a href="https://master-redux.yogeshchavan.dev/"&gt;Mastering Redux Course&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the above code examples, we've created a single middleware. But you can create multiple middlewares and pass them to the &lt;code&gt;applyMiddleware&lt;/code&gt; function like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;middleware&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;applyMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loggerMiddleware&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secondMiddleware&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;thirdMiddleware&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All the middlewares mentioned in the &lt;code&gt;applyMiddleware&lt;/code&gt; function will be executed one after the other.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h3&gt;

&lt;p&gt;Check out my recently published &lt;a href="https://master-redux.yogeshchavan.dev/"&gt;Mastering Redux&lt;/a&gt; course.&lt;/p&gt;

&lt;p&gt;In this course, you will build 3 apps along with food ordering app and you'll learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic and advanced Redux&lt;/li&gt;
&lt;li&gt;How to manage the complex state of array and objects&lt;/li&gt;
&lt;li&gt;How to use multiple reducers to manage complex redux state&lt;/li&gt;
&lt;li&gt;How to debug Redux application&lt;/li&gt;
&lt;li&gt;How to use Redux in React using react-redux library to make your app reactive.&lt;/li&gt;
&lt;li&gt;How to use redux-thunk library to handle async API calls and much more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and then finally we'll build a complete &lt;a href="https://www.youtube.com/watch?v=2zaPDfCKAvM"&gt;food ordering app&lt;/a&gt; from scratch with stripe integration for accepting payments and deploy it to the production.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/3w0DGum"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Taa9-Eif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gist.github.com/myogeshchavan97/98ae4f4ead57fde8d47fcf7641220b72/raw/c3e4265df4396d639a7938a83bffd570130483b1/banner.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Want to stay up to date with regular content regarding JavaScript, React, Node.js? &lt;a href="https://www.linkedin.com/in/yogesh-chavan97/"&gt;Follow me on LinkedIn&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/myogeshchavan97"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xG4nnUnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-yellow.png"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>codenewbie</category>
      <category>node</category>
    </item>
    <item>
      <title>Array.splice() method in JavaScript 🚀</title>
      <author>Shubham Jadhav</author>
      <pubDate>Sat, 11 Sep 2021 04:58:29 +0000</pubDate>
      <link>https://dev.to/dev_shubham/array-splice-method-in-javascript-4mnm</link>
      <guid>https://dev.to/dev_shubham/array-splice-method-in-javascript-4mnm</guid>
      <description>&lt;p&gt;Array.splice() method in JavaScript. &lt;/p&gt;

&lt;p&gt;• What is splice method?&lt;br&gt;
=&amp;gt; The splice array method removes array items and replace it if any items provided. &lt;/p&gt;

&lt;p&gt;• Syntax of splice method&lt;br&gt;
=&amp;gt; arrayName.splice(starting index of item to remove, number of items to remove, replace item)&lt;/p&gt;

&lt;p&gt;The third parameter is optional in splice method. &lt;/p&gt;

&lt;p&gt;=&amp;gt; Examples of splice method&lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e8W54jYX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efsnjl74ordnm3pvqlk9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e8W54jYX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efsnjl74ordnm3pvqlk9.jpg" alt="example 1"&gt;&lt;/a&gt;&lt;br&gt;
=&amp;gt; Explanation :-&lt;br&gt;
   In the above example I created an array which name is arr and store some values [1,2,3,4,5].&lt;br&gt;
   Now I use splice method and I am passing two parameters, first parameter is 2 and second parameter is also 2.&lt;br&gt;
   The first parameter indicate that index number of array items and second parameter indicate that how many items to remove. &lt;br&gt;
    Then, I stored splice method in another variable name is splice_arr.&lt;br&gt;
    The output is [3,4].&lt;/p&gt;

&lt;p&gt;=&amp;gt; Another example :- &lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BgRfx4i4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h7go19ltllmf44l5gszy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BgRfx4i4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h7go19ltllmf44l5gszy.jpg" alt="Example 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👉 Stay tuned with us for more &lt;br&gt;
   JavaScript method articles&lt;br&gt;
🙏 Thank you for reading...&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>A Quickstart guide to setting up Vim for blogging</title>
      <author>Siddharth</author>
      <pubDate>Sat, 11 Sep 2021 04:22:46 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/a-quickstart-guide-to-setting-up-vim-for-blogging-1ia1</link>
      <guid>https://dev.to/siddharthshyniben/a-quickstart-guide-to-setting-up-vim-for-blogging-1ia1</guid>
      <description>&lt;p&gt;Vim is an &lt;strong&gt;extremely powerful&lt;/strong&gt; editor.&lt;/p&gt;

&lt;p&gt;But coding is not the only thing I use vim for (Guess where I'm writing this post?) Vim understands the structure of natural language, and you can jump between paragraphs, change words, delete sentences – With Vim you can edit at the speed of thought.&lt;/p&gt;

&lt;p&gt;But writing in Vim won't be &lt;em&gt;that&lt;/em&gt; smooth with your coding setup – you'll need a few plugins and mappings to make it better. Here, I'll show you how to quickly get started in blogging with Vim without going into too much detail.&lt;/p&gt;

&lt;p&gt;I'm going to assume you know basic Vim stuff, so if you don't, go learn the basics first!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#screenshot-please"&gt;
  &lt;/a&gt;
  Screenshot, please!
&lt;/h2&gt;

&lt;p&gt;Here's me editing this post in Vim. So meta, don't you think?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sNqeaUPz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vs2y6zv7dan47zu03sr3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sNqeaUPz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vs2y6zv7dan47zu03sr3.png" alt="Screenshot of vim editing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#general-settings"&gt;
  &lt;/a&gt;
  General settings
&lt;/h2&gt;

&lt;p&gt;I've set all the &lt;em&gt;"good" stuff&lt;/em&gt; which we should set anyways, like &lt;code&gt;syntax&lt;/code&gt;, &lt;code&gt;spell&lt;/code&gt;, &lt;code&gt;cursorline&lt;/code&gt;, and &lt;code&gt;cursorcolumn&lt;/code&gt;. Set those for the best effect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mappings"&gt;
  &lt;/a&gt;
  Mappings
&lt;/h2&gt;

&lt;p&gt;Moving lines is one common thing I usually do while writing posts, so I've mapped this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="nb"&gt;noremap&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; ddp
&lt;span class="nb"&gt;noremap&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; ddkkp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've also made my scroll "smooth" XD:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="nb"&gt;noremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;U&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;noremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;D&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, I've set up vim to insert a space after a comma:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;inoremap &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;,&amp;lt;&lt;/span&gt;space&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I also added a bunch of operator pending mappings to make editing in quotes and braces easier:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;onoremap &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;:&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;normal&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="k"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;vi&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
onoremap &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;:&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;normal&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="k"&gt;f&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;vi&lt;/span&gt;&lt;span class="p"&gt;{&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
onoremap &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="s2"&gt;" :&amp;lt;c-u&amp;gt;normal! f"&lt;/span&gt;&lt;span class="k"&gt;vi&lt;/span&gt;"&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
onoremap &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="s1"&gt;' :&amp;lt;c-u&amp;gt;normal! f'&lt;/span&gt;&lt;span class="k"&gt;vi&lt;/span&gt;'&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
onoremap &lt;span class="k"&gt;in&lt;/span&gt;` &lt;span class="p"&gt;:&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;normal&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="k"&gt;f&lt;/span&gt;`&lt;span class="k"&gt;vi&lt;/span&gt;`&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

onoremap &lt;span class="k"&gt;il&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;:&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;normal&lt;span class="p"&gt;!&lt;/span&gt; F&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;vi&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
onoremap &lt;span class="k"&gt;il&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;:&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;normal&lt;span class="p"&gt;!&lt;/span&gt; F&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;vi&lt;/span&gt;&lt;span class="p"&gt;{&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
onoremap &lt;span class="k"&gt;il&lt;/span&gt;&lt;span class="s2"&gt;" :&amp;lt;c-u&amp;gt;normal! F"&lt;/span&gt;&lt;span class="k"&gt;vi&lt;/span&gt;"&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
onoremap &lt;span class="k"&gt;il&lt;/span&gt;&lt;span class="s1"&gt;' :&amp;lt;c-u&amp;gt;normal! F'&lt;/span&gt;&lt;span class="k"&gt;vi&lt;/span&gt;'&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
onoremap &lt;span class="k"&gt;il&lt;/span&gt;` &lt;span class="p"&gt;:&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;normal&lt;span class="p"&gt;!&lt;/span&gt; F`&lt;span class="k"&gt;vi&lt;/span&gt;`&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This lets you do stuff like &lt;strong&gt;c&lt;/strong&gt;hange the text &lt;strong&gt;i&lt;/strong&gt;n the &lt;strong&gt;n&lt;/strong&gt;ext &lt;strong&gt;(&lt;/strong&gt;s using &lt;code&gt;cin(&lt;/code&gt; or &lt;strong&gt;y&lt;/strong&gt;anking (copying in vim is called yanking) &lt;strong&gt;i&lt;/strong&gt;n the &lt;strong&gt;l&lt;/strong&gt;ast (&lt;strong&gt;l&lt;/strong&gt;ast because previous would conflict with vim mappings) code in &lt;strong&gt;`&lt;/strong&gt;s by running &lt;code&gt;cil"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The next is a mapping to change the text in the current heading:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;vim&lt;br&gt;
augroup header&lt;br&gt;
    autocmd FileType markdown :onoremap ih :&amp;lt;c-u&amp;gt;execute "normal! ?^#\\+.*$\r:nohlsearch\rwv$"&amp;lt;cr&amp;gt;&lt;br&gt;
    autocmd FileType markdown :onoremap ah :&amp;lt;c-u&amp;gt;execute "normal! ?^#\\+.*$\r:nohlsearch\rv$"&amp;lt;cr&amp;gt;&lt;br&gt;
augroup END&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This way you can &lt;code&gt;cih&lt;/code&gt; to change in the header and &lt;code&gt;cah&lt;/code&gt; to change in the next header.&lt;/p&gt;

&lt;p&gt;Another important mapping is to change a word:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;vim&lt;br&gt;
nnoremap &amp;lt;Leader&amp;gt;c *&lt;/code&gt;&lt;code&gt;cgn&lt;br&gt;
nnoremap &amp;lt;Leader&amp;gt;C #&lt;/code&gt;&lt;code&gt;cgn&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you run &lt;code&gt;&amp;lt;leader&amp;gt;c&lt;/code&gt;, the current word will be deleted and you can type anything instead of that. Hit &lt;code&gt;.&lt;/code&gt; and the same will happen to the next matching word! &lt;code&gt;&amp;lt;leader&amp;gt;C&lt;/code&gt; does the same, but goes backward.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plugins"&gt;
  &lt;/a&gt;
  Plugins!
&lt;/h2&gt;

&lt;p&gt;I use a lot of plugins, and I'll show you my vim markdown ones here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#looks"&gt;
  &lt;/a&gt;
  Looks
&lt;/h3&gt;

&lt;p&gt;For the centered editing and focus mode, I use &lt;a href="https://github.com/junegunn/goyo.vim"&gt;Goyo&lt;/a&gt; and &lt;a href="https://github.com/junegunn/limelight.vim"&gt;Limelight&lt;/a&gt;. There are alternatives, but these are the ones I use.&lt;/p&gt;

&lt;p&gt;For the syntax highlighting, I use Tim Pope's &lt;a href="https://github.com/tpope/vim-markdown"&gt;markdown runtime&lt;/a&gt;. Tim Pope is a magician at these things.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lexical-stuff"&gt;
  &lt;/a&gt;
  Lexical stuff
&lt;/h3&gt;

&lt;p&gt;For grammar and spellchecking, I use many plugins. The main one is &lt;a href="https://github.com/preservim/vim-pencil"&gt;Pencil&lt;/a&gt;. I also use &lt;a href="https://github.com/dbmrq/vim-ditto"&gt;Vim Ditto&lt;/a&gt;, &lt;a href="https://github.com/preservim/vim-lexical"&gt;Lexical&lt;/a&gt;, and &lt;a href="https://github.com/preservim/vim-wordy"&gt;Wordy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also use &lt;a href="https://github.com/jiangmiao/auto-pairs"&gt;autopairs&lt;/a&gt; to get nicely autoclosed quotes.&lt;/p&gt;

&lt;p&gt;That's just about it. There is more stuff I use, but these are the main ones. &lt;/p&gt;

&lt;p&gt;Thanks for reading! If you like this stuff, check out my &lt;a href="https://twitter.com/SiddharthShyn"&gt;Twitter&lt;/a&gt; or &lt;a href="https://twitter.com/intent/tweet?url=https%3A%2F%2Fdev.to%2Fsiddharthshyniben%2Fa-quickstart-guide-to-setting-up-vim-for-blogging-1ia1&amp;amp;text=Vim%20is%20an%20awesome%20editor,%20but%20with%20a%20bit%20of%20tweaking%20you%20can%20make%20it%20your%20blogging%20tool%20too!%20Check%20out%20this%20post%20for%20more"&gt;Tweet this post&lt;/a&gt; (Yeah, I've gotten a bit self promotion-ey)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sNqeaUPz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vs2y6zv7dan47zu03sr3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sNqeaUPz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vs2y6zv7dan47zu03sr3.png" alt="Screenshot of vim editing"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vim</category>
      <category>writing</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Hello, Open Source.</title>
      <author>Joyce Wei</author>
      <pubDate>Sat, 11 Sep 2021 03:48:11 +0000</pubDate>
      <link>https://dev.to/joycew414/hello-open-source-449</link>
      <guid>https://dev.to/joycew414/hello-open-source-449</guid>
      <description>&lt;p&gt;&lt;b&gt;About Me&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Hi there, I am Joyce, a CPA (Computer Programming and Analysis) student at Seneca College. I am currently living in Toronto Canada.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Why OSD600?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;OSD600 is a Open Source Development course. This course provides the opportunity for me as a student developer to get better understanding on how to use GitHub to managing and contributing to various open source  projects. After the end of this course I will be gaining real world experience on collaborating with other developers and contributing to open source projects on GitHub.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Explore Repos&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;I am interested in accessibility related field and the query language Graphql. &lt;a href="https://github.com/apollographql/apollo-client"&gt;apollo-client&lt;/a&gt; is a package that helps you to build the client side of a web app with backend API server using GraphQL. I am learning GraphQL on my own time and I found that both Apollo server and Apollo client are really helpful and easy-to-use when building a GraphQL backend.&lt;/p&gt;

</description>
      <category>opensource</category>
    </item>
    <item>
      <title>The Ember Times - Issue No. 188</title>
      <author>The Ember Times</author>
      <pubDate>Sat, 11 Sep 2021 03:21:25 +0000</pubDate>
      <link>https://dev.to/embertimes/the-ember-times-issue-no-188-fkn</link>
      <guid>https://dev.to/embertimes/the-ember-times-issue-no-188-fkn</guid>
      <description>&lt;p&gt;👋 Emberistas! 🐹&lt;/p&gt;

&lt;p&gt;Ember 3.28 and 4.0 Beta Released, open source contributors wanted for Ember v4, reactively handle audio in Octane with &lt;code&gt;ember-stereo&lt;/code&gt;, and Twitter thread: Ember is data-first.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ember-328-and-40-beta-released"&gt;
  &lt;/a&gt;
  &lt;a href="https://blog.emberjs.com/ember-3-28-released/"&gt;🎉 Ember 3.28 and 4.0 Beta Released&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;After 3.5 years and 28 minor releases, Ember 3.28 marks the end of the project's 3.x series. To ensure a smooth upgrade path going into the 4.x series, 3.28 has been declared an LTS (Long Term Support) candidate. In six weeks, the latest patch version of 3.28 will be promoted to be the latest LTS release and replace 3.24-LTS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We're also announcing the start of the Ember 4.0 beta cycle for all sub-projects.&lt;/strong&gt; Following the process set in previous major versions, Ember 4.0's beta introduces no new features. Instead, it removes support for deprecated public APIs. We encourage our community (especially addon authors) to help test beta builds and report any bugs before they are published as a stable release in six weeks' time. We also encourage everyone to help maintainers resolve deprecations in their favorite addons. The &lt;a href="https://github.com/ember-cli/ember-try"&gt;ember-try&lt;/a&gt; addon is a great way to continuously test your projects against the latest Ember releases.&lt;/p&gt;

&lt;p&gt;Developers who want to prepare for the upcoming 4.0 version of Ember should work to resolve all deprecation warnings in their apps and addons while using Ember 3.28. An app or addon with no deprecation warnings on Ember 3.28 should be able to upgrade from Ember 4.0 without making significant changes outside of the dependency versions.&lt;/p&gt;

&lt;p&gt;You can read more about Ember's plans for 4.0 in &lt;a href="https://blog.emberjs.com/the-road-to-ember-4-0/"&gt;The Road to Ember 4.0&lt;/a&gt;. Please visit &lt;a href="https://blog.emberjs.com/ember-3-28-released/"&gt;Ember 3.28 and 4.0 Beta Released&lt;/a&gt; for the rest of the post, including details on Ember.js, Ember Data, and Ember CLI. Many thanks to &lt;a href="https://github.com/mixonic"&gt;Matthew Beale (@mixonic)&lt;/a&gt;, &lt;a href="https://github.com/jenweber"&gt;Jen Weber (@jenweber)&lt;/a&gt;, and &lt;a href="https://github.com/ijlee2"&gt;Isaac Lee (@ijlee2)&lt;/a&gt; for the excellent and informative writeup!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#open-source-contributors-wanted-for-ember-v4"&gt;
  &lt;/a&gt;
  📣 Open source contributors wanted for Ember v4
&lt;/h2&gt;

&lt;p&gt;Do you have some time to help out with shipping Ember v4? 🔥 The Learning Team is preparing docs and guides, and we need your brainpower and writing skills!&lt;/p&gt;

&lt;p&gt;Help wanted to complete this month:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The most pressing issue is the deprecation guides, please start here if you have bandwidth and comment to claim a subtask of the issue. &lt;a href="https://github.com/ember-learn/deprecation-app/issues/893"&gt;GitHub issue: Write missing deprecation guides&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Look through the API docs and remove references to classic syntax. We only want to show Octane style examples in v4. &lt;a href="https://github.com/emberjs/ember.js/issues/19702"&gt;GitHub issue: [Documentation] Epic - remove classic examples from API docs for Ember 4&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to commenting on the GitHub issues, we can also chat on &lt;a href="https://discord.com/channels/480462759797063690/480499624663056390/882839642448220230"&gt;#dev-ember-learning on Discord&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#reactively-handle-audios-in-octane-with-raw-emberstereo-endraw-"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/jkeen/ember-stereo"&gt;🎵 Reactively handle audios in Octane with &lt;code&gt;ember-stereo&lt;/code&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Since 2016, &lt;a href="https://github.com/jkeen"&gt;Jeff Keen (@jkeen)&lt;/a&gt; helped develop the open-source &lt;a href="https://github.com/nypublicradio/ember-hifi"&gt;ember-hifi&lt;/a&gt; for the New York Public Radio.&lt;/p&gt;

&lt;p&gt;Jeff recently released its modern, reactive successor &lt;a href="https://github.com/jkeen/ember-stereo"&gt;ember-stereo&lt;/a&gt;. He has worked hard on making audio manipulation simple and providing &lt;a href="https://ember-stereo.com/docs"&gt;extensive examples&lt;/a&gt;. We encourage you to have a look!&lt;/p&gt;

&lt;p&gt;Out of the box, you will be provided with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;stereo&lt;/code&gt; service: It manages loading and playing sounds, making sure that only one sound plays at a time, setting volume, and providing system-level events that your application can tie into.&lt;/li&gt;
&lt;li&gt;Template helpers, which can perform an action on, or retrieve information from, a sound or &lt;code&gt;url&lt;/code&gt; string—something entirely new from how &lt;code&gt;ember-hifi&lt;/code&gt; did things!&lt;/li&gt;
&lt;li&gt;A couple of modifiers, to help control volume and position&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;setupStereoTest()&lt;/code&gt;, to help write tests&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#twitter-thread-ember-is-datafirst"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/davert/status/1435372911452373000"&gt;🐦 Twitter thread: Ember is data-first&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/DavertMik"&gt;Michael Bodnarchuk (@DavertMik)&lt;/a&gt; wrote a &lt;a href="https://twitter.com/davert/status/1435372911452373000"&gt;Twitter thread&lt;/a&gt; on how tracked properties in Glimmer components help you build data-oriented components.&lt;/p&gt;

&lt;p&gt;Michael mentions that in React you write hooks to update the component's state, while in Ember the component's state is tied to the data. This data first approach makes it so we can pass the reacting class to the root component and we do not need to change any child components to make it work.&lt;/p&gt;

&lt;p&gt;Read the full &lt;a href="https://twitter.com/davert/status/1435372911452373000"&gt;Twitter thread&lt;/a&gt; and let us know if you have any thoughts about it too!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#contributors-corner"&gt;
  &lt;/a&gt;
  &lt;a href="https://guides.emberjs.com/release/contributing/repositories/"&gt;👏 Contributors' corner&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This week we'd like to thank &lt;a href="https://github.com/xg-wang" rel="noopener noreferrer"&gt;Thomas Wang (@xg-wang)&lt;/a&gt;, &lt;a href="https://github.com/kellyselden" rel="noopener noreferrer"&gt;Kelly Selden (@kellyselden)&lt;/a&gt;, &lt;a href="https://github.com/ijlee2" rel="noopener noreferrer"&gt;Isaac Lee (@ijlee2)&lt;/a&gt;, &lt;a href="https://github.com/igorT" rel="noopener noreferrer"&gt;Igor Terzic (@igorT)&lt;/a&gt;, &lt;a href="https://github.com/kategengler" rel="noopener noreferrer"&gt;Katie Gengler (@kategengler)&lt;/a&gt;, &lt;a href="https://github.com/charlesfries" rel="noopener noreferrer"&gt;Charles Fries (@charlesfries)&lt;/a&gt;, &lt;a href="https://github.com/NullVoxPopuli" rel="noopener noreferrer"&gt;@NullVoxPopuli&lt;/a&gt;, &lt;a href="https://github.com/esquith" rel="noopener noreferrer"&gt;Esquith Allen (@esquith)&lt;/a&gt;, &lt;a href="https://github.com/bmish" rel="noopener noreferrer"&gt;Bryan Mishkin (@bmish)&lt;/a&gt;, &lt;a href="https://github.com/chrisrng" rel="noopener noreferrer"&gt;Chris Ng (@chrisrng)&lt;/a&gt;, &lt;a href="https://github.com/ChrisCarini" rel="noopener noreferrer"&gt;Chris Carini (@ChrisCarini)&lt;/a&gt;, &lt;a href="https://github.com/sly7-7" rel="noopener noreferrer"&gt;Sylvain MINA (@sly7-7)&lt;/a&gt;, &lt;a href="https://github.com/mansona" rel="noopener noreferrer"&gt;Chris Manson (@mansona)&lt;/a&gt;, &lt;a href="https://github.com/amyrlam" rel="noopener noreferrer"&gt;Amy Lam (@amyrlam)&lt;/a&gt;, &lt;a href="https://github.com/rwwagner90" rel="noopener noreferrer"&gt;Robert Wagner (@rwwagner90)&lt;/a&gt;, &lt;a href="https://github.com/locks" rel="noopener noreferrer"&gt;Ricardo Mendes (@locks)&lt;/a&gt;, &lt;a href="https://github.com/lifeart" rel="noopener noreferrer"&gt;Alex Kanunnikov (@lifeart)&lt;/a&gt;, &lt;a href="https://github.com/simonihmig" rel="noopener noreferrer"&gt;Simon Ihmig (@simonihmig)&lt;/a&gt;, &lt;a href="https://github.com/Glarregle" rel="noopener noreferrer"&gt;Gabriela Larregle (@Glarregle)&lt;/a&gt;, &lt;a href="https://github.com/jenweber" rel="noopener noreferrer"&gt;Jen Weber (@jenweber)&lt;/a&gt;, &lt;a href="https://github.com/MinThaMie" rel="noopener noreferrer"&gt;Anne-Greeth Schot-van Herwijnen (@MinThaMie)&lt;/a&gt;, &lt;a href="https://github.com/himynameisjonas" rel="noopener noreferrer"&gt;Jonas Brusman (@himynameisjonas)&lt;/a&gt;, &lt;a href="https://github.com/rwjblue" rel="noopener noreferrer"&gt;Robert Jackson (@rwjblue)&lt;/a&gt;, &lt;a href="https://github.com/stefanpenner" rel="noopener noreferrer"&gt;Stefan Penner (@stefanpenner)&lt;/a&gt;, &lt;a href="https://github.com/ndekeister-us" rel="noopener noreferrer"&gt;Nathanaël Dekeister (@ndekeister-us)&lt;/a&gt;, &lt;a href="https://github.com/brendenpalmer" rel="noopener noreferrer"&gt;Brenden Palmer (@brendenpalmer)&lt;/a&gt;, and &lt;a href="https://github.com/gilest" rel="noopener noreferrer"&gt;Giles Thompson (@gilest)&lt;/a&gt; for their contributions to Ember and related repositories! 💖&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#connect-with-us"&gt;
  &lt;/a&gt;
  &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLScqu7Lw_9cIkRtAiXKitgkAo4xX_pV1pdCfMJgIr6Py1V-9Og/viewform"&gt;🤓 Connect with us&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rNTeC-Ud--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r30i0xpwcx20b8wkmqlx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rNTeC-Ud--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r30i0xpwcx20b8wkmqlx.png" alt="Office Hours Tomster mascot"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Wondering about something related to Ember, Ember Data, Glimmer, or addons in the Ember ecosystem, but don't know where to ask? Readers’ Questions are just for you!&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;Submit your own&lt;/strong&gt; short and sweet &lt;strong&gt;question&lt;/strong&gt; under &lt;a href="https://bit.ly/ask-ember-core"&gt;bit.ly/ask-ember-core&lt;/a&gt;. And don’t worry, there are no silly questions, we appreciate them all - promise! 🤞&lt;/p&gt;


&lt;p&gt;Want to write for the Ember Times? Have a suggestion for next week's issue? Join us at &lt;a href="https://discordapp.com/channels/480462759797063690/485450546887786506"&gt;#support-ember-times&lt;/a&gt; on the &lt;a href="https://discord.gg/emberjs"&gt;Ember Community Discord&lt;/a&gt; or ping us &lt;a href="https://twitter.com/embertimes"&gt;@embertimes&lt;/a&gt; on Twitter.&lt;/p&gt;


&lt;p&gt;Keep on top of what's been going on in Emberland this week by subscribing to our &lt;a href="https://embertimes.substack.com/"&gt;e-mail newsletter&lt;/a&gt;! You can also find our posts on the &lt;a href="https://blog.emberjs.com/tag/newsletter"&gt;Ember blog&lt;/a&gt;. See you in two weeks!&lt;/p&gt;
&lt;br&gt;




&lt;p&gt;That's another wrap! ✨&lt;/p&gt;

&lt;p&gt;Be kind,&lt;/p&gt;

&lt;p&gt;Chris Ng, Isaac Lee, Amy Lam, and the Learning Team&lt;/p&gt;

</description>
      <category>ember</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Supabase Storage CDN and Transformation with Serverless function (Unofficial)</title>
      <author>Zernonia</author>
      <pubDate>Sat, 11 Sep 2021 02:47:45 +0000</pubDate>
      <link>https://dev.to/zernonia/supabase-storage-cdn-and-transformation-with-serverless-function-unofficial-go</link>
      <guid>https://dev.to/zernonia/supabase-storage-cdn-and-transformation-with-serverless-function-unofficial-go</guid>
      <description>&lt;p&gt;This tutorial is just a temporary alternative, while &lt;strong&gt;Supabase&lt;/strong&gt; team is working hard to ship more and more features, where Storage CDN and Transformation is in their pipeline.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0TwdoLKe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631279067782/63nFl5KeN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0TwdoLKe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631279067782/63nFl5KeN.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;source: &lt;a href="https://supabase.io/storage"&gt;https://supabase.io/storage&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  ⭐🎉🎊
&lt;/h2&gt;

&lt;p&gt;On that note, congratulations Supabase team on raising &lt;a href="https://techcrunch.com/2021/09/09/supabase-raises-30m-for-its-open-source-insta-backend/"&gt;$30M&lt;/a&gt; as an open source backend-as-a-service startup!!&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#get-started"&gt;
  &lt;/a&gt;
  Get started!
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#take-note-%E2%9A%A0"&gt;
  &lt;/a&gt;
  Take note ⚠:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;We will be using &lt;strong&gt;Vercel&lt;/strong&gt; Serverless function to make this magic happens, the code might be different but the logic is the same.&lt;/li&gt;
&lt;li&gt;We will be serving and transforming &lt;code&gt;Public&lt;/code&gt; bucket only. If you wish to see how to implement these magic with Supabase Auth for RLS, remember to follow me for more tutorial.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With that said, we will go through just a few simple steps to implement this magic on &lt;br&gt;
our Supabase Storage's images.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-getting-image-bucket-amp-name"&gt;
  &lt;/a&gt;
  1. Getting Image bucket &amp;amp; name
&lt;/h2&gt;

&lt;p&gt;We will be using &lt;code&gt;bucket_name&lt;/code&gt; and &lt;code&gt;file_name&lt;/code&gt; variable to call the serverless function, instead of the full public url. If not, your image link would be super-duper long, and unneccessary.&lt;/p&gt;

&lt;p&gt;Here are some of the way you could prepare the &lt;code&gt;bucket_name&lt;/code&gt; and/or &lt;code&gt;file_name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;1.If you are allowing your users to upload static content to &lt;code&gt;Public&lt;/code&gt; bucket, then take note of the &lt;code&gt;bucket_name&lt;/code&gt; and &lt;code&gt;file_name&lt;/code&gt; users keyed-in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bucket_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;static&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;    &lt;span class="c1"&gt;// your bucket name&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;file_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;avatar.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;    &lt;span class="c1"&gt;// name for the file&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;avatarFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;avatars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;bucket_name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;file_name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;avatarFile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;cacheControl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3600&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;upsert&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2.You can get use &lt;a href="https://supabase.io/docs/reference/javascript/storage-from-list"&gt;from.list()&lt;/a&gt; to retrieve the images you want in a &lt;code&gt;bucket&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this case, I will simply just list everything in my &lt;code&gt;bucket_name&lt;/code&gt; bucket.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bucket_name&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;file_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3.If you already have the public URL fetch together in another query, with link such as &lt;code&gt;https://asdasaeipbvsvnr.supabase.co/storage/v1/object/public/static/avatar.png&lt;/code&gt;, then you can quickly get the &lt;code&gt;bucket_name&lt;/code&gt; and &lt;code&gt;file_name&lt;/code&gt; using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://asdasaeipbvsvnr.supabase.co/storage/v1/object/public/static/avatar.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;bucket_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;file_name&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;public/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alright, now we have our appropriate variable, we can start construct our new link to slot into &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag! 🙌&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-construct-new-link"&gt;
  &lt;/a&gt;
  2. Construct new link
&lt;/h2&gt;

&lt;p&gt;Because we are using Vercel serverless function, we need to wrap our img url around the &lt;code&gt;api&lt;/code&gt; route. &lt;/p&gt;

&lt;p&gt;If you are using Vercel for your current project, you can simply use the following code to generate new link for your &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;bucket_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// params we haven't mentioned...&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;new_link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/resize?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are not using, Vercel as deployment, you can easily &lt;a href="https://github.com/zernonia/supabase-cdn-transformation"&gt;forked this repo&lt;/a&gt; that I created for this tutorial. You just have to follow the steps and setup your &lt;code&gt;.env&lt;/code&gt; on Vercel. If you wanted to learn more on how this function works, continue follow along!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serverless-function"&gt;
  &lt;/a&gt;
  Serverless function
&lt;/h2&gt;

&lt;p&gt;This part is where the magic happens, let's create a new file in your project root, named &lt;code&gt;api/resize.ts&lt;/code&gt; (be default Vercel will convert all files in api folder into serverless function).&lt;/p&gt;

&lt;p&gt;Then, you have to install a few packages &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I'm using yarn and typescript, you can use npm, and plain Javascript if you like&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add sharp axios
yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; @vercel/node @types/sharp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, create a basic function as such:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;VercelRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;VercelResponse&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@vercel/node&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;sharp&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sharp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;VercelRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;VercelResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To quickly test out the &lt;code&gt;api&lt;/code&gt;, run &lt;code&gt;vercel dev&lt;/code&gt; to spin up Vercel Development Server.&lt;br&gt;
Then visit &lt;code&gt;http://localhost:3000/api/resize&lt;/code&gt;, it should response with 'Hi'.&lt;/p&gt;

&lt;p&gt;After that , replace the function with this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;VercelRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;VercelResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;q&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;

  &lt;span class="c1"&gt;// this tricks to deconstruct all the nested query into it's own variable.&lt;/span&gt;
  &lt;span class="c1"&gt;// parameters&lt;/span&gt;
  &lt;span class="c1"&gt;//   w: width   (pixel)&lt;/span&gt;
  &lt;span class="c1"&gt;//   h: height   (pixel)&lt;/span&gt;
  &lt;span class="c1"&gt;//   f: file_name&lt;/span&gt;
  &lt;span class="c1"&gt;//   b: bucket_name&lt;/span&gt;
  &lt;span class="c1"&gt;//   q: quality  (0 to 100)&lt;/span&gt;

  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember we have created a new link for the image just now?? Now we have to construct it back to original url, then convert it to Buffer. Thankfully, axios make this job so easy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;VercelRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;VercelResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;

  &lt;span class="c1"&gt;// check if `bucket_name` and `file_name` are available, else return error&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SUPABASE_URL&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/storage/v1/object/public/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;responseType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;arraybuffer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;})).&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;

     &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
     &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image/png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text/html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;h1&amp;gt;Internal Error&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;Sorry, there was a problem&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now test this api endpoint as such &lt;code&gt;http://localhost:3000/api/resize?f=avatar.png&amp;amp;b=static&lt;/code&gt; (Of course you need to have the image in your bucket) to see if your image is generated. If it works, let continue on the longest script in this tutorial, where we use sharp to transfrom our image to the desire width, height or quality.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;VercelRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;VercelResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="p"&gt;...&lt;/span&gt;

   &lt;span class="c1"&gt;// here we create a new_params object to convert string to number, and also set default value&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;new_params&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// set default 800px&lt;/span&gt;
      &lt;span class="na"&gt;h&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="c1"&gt;// set to null if not provided, so that Sharp automatically keep the aspect ratio&lt;/span&gt;
      &lt;span class="na"&gt;q&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;      &lt;span class="c1"&gt;// set default 80% quality&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// here's where the Transformation happens&lt;/span&gt;
    &lt;span class="nx"&gt;sharp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;new_params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;new_params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;jpeg&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;new_params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;     &lt;span class="c1"&gt;// change to .webp() if you want to serve as webp&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toBuffer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// here's where set the cache&lt;/span&gt;
        &lt;span class="c1"&gt;// I set to cache the media for 1 week, 60seconds * 60minutes * 24hours * 7days&lt;/span&gt;
        &lt;span class="c1"&gt;// remove setHeader('Cache-Control') if you wish not to cache it&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Cache-Control&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`public, immutable, no-transform, s-maxage=604800, max-age=604800`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image/jpeg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text/html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;h1&amp;gt;Internal Error&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;Sorry, there was a problem&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! Just a few line of codes and you have your own CDN and Transformation for Supabase Storage ready to go!!!! But! Don't forget the &lt;code&gt;new_link&lt;/code&gt; we created at our frontend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lastly"&gt;
  &lt;/a&gt;
  Lastly!
&lt;/h2&gt;

&lt;p&gt;This is the last step for this tutorial, we generated &lt;code&gt;new_link&lt;/code&gt; previously, but now it is ready to add more parameter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Set a few width so that cache is more efficient, and need not to create so many cache when different browser visit your website.&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;windowWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;windowWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;windowWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;windowWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;bucket_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;windowWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;h&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="c1"&gt;// set to null to keep image's aspect ratio&lt;/span&gt;
    &lt;span class="na"&gt;q&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;      
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;new_link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/resize?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// set the src to new link&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;myImg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;new_link&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we are DONE!!!&lt;br&gt;
All source code for this tutorial can be found &lt;a href="https://github.com/zernonia/supabase-cdn-transformation"&gt;here&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#showcase"&gt;
  &lt;/a&gt;
  Showcase
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.madewithsupabase.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1J_PmEU2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631288642681/vmrXvTB30.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out  &lt;a href="https://www.madewithsupabase.com/"&gt;Made With Supabase&lt;/a&gt;, and inspect the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;, you will see the similar code there, with slight minor change. &lt;/p&gt;

&lt;p&gt;What is Made With Supabase? It is a collection of projects that &lt;strong&gt;made with Supabase&lt;/strong&gt;! Feel free to submit your Supabase project, share the awesome-ness of Supabase with the world!&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#before-you-go"&gt;
  &lt;/a&gt;
  Before you go
&lt;/h1&gt;

&lt;p&gt;If you find this tutorial helpful, and wish to lean more, then follow me here, and follow my Twitter!&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--JqI6wApG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1419846185519513601/aIz1i1Oh_normal.jpg" alt="Zernonia profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Zernonia
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/zernonia"&gt;@zernonia&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      If you are using &lt;a href="https://twitter.com/supabase"&gt;@supabase&lt;/a&gt; for your project, remember to &lt;a href="https://twitter.com/hashtag/madewithsupabase"&gt;#madewithsupabase&lt;/a&gt; or submit your project at the &lt;a href="https://twitter.com/madewifsupabase"&gt;@madewifsupabase&lt;/a&gt; website ya! &lt;a href="https://t.co/YbV990ztiB"&gt;twitter.com/madewifsupabas…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:32 PM - 19 Aug 2021
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            Made With Supabase
          &lt;/span&gt;
          @madewifsupabase
        &lt;/div&gt;
        We have some new projects listed on #madewithsupabase ! Hooray!

Check out at https://t.co/6ArG8G9ZdF , or you can see them at the tweet below
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1428379387863306241" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1428379387863306241" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1428379387863306241" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


</description>
      <category>javascript</category>
      <category>supabase</category>
      <category>serverless</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What is a CDN? | How to add CDN links to the website?  </title>
      <author>Codewith Random</author>
      <pubDate>Sat, 11 Sep 2021 01:01:40 +0000</pubDate>
      <link>https://dev.to/codewithrandom/what-is-a-cdn-how-to-add-cdn-links-to-the-website-4m48</link>
      <guid>https://dev.to/codewithrandom/what-is-a-cdn-how-to-add-cdn-links-to-the-website-4m48</guid>
      <description>&lt;p&gt;CDN– Stands for Content Delivery Network or Content Distribution Network. According to Wikipedia CDN is a geographically distributed network of proxy servers and their data center.&lt;/p&gt;

&lt;p&gt;The content delivery network helps us to provide Internet content without any delay. It minimizes the distance between the server and the user.&lt;/p&gt;

&lt;p&gt;It’s also helpful to improve site opening speed and performance with the best user experience.&lt;/p&gt;

&lt;p&gt;How does a CDN work?&lt;/p&gt;

&lt;p&gt;CDN is a network of servers linked together with the goal of delivering user requirements as quickly, securely, and at a low cost as possible.&lt;/p&gt;

&lt;p&gt;When a user searches for something on Google or a web browser, the CDN helps to provide data from server to user it’s connected with the IXPs (Internet exchange points) with the user and servers. &lt;/p&gt;

&lt;p&gt;It’s also contained a copy of the server's data for providing high speed.&lt;/p&gt;

&lt;p&gt;For reading full article visit our website! Thank you 🙏💕&lt;br&gt;
&lt;a href="https://www.codewithrandom.com/2021/07/what-is-cdn-how-to-add-cdn-links-in.html"&gt;https://www.codewithrandom.com/2021/07/what-is-cdn-how-to-add-cdn-links-in.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Elixir intellisense stop working</title>
      <author>Long Le</author>
      <pubDate>Sat, 11 Sep 2021 00:41:07 +0000</pubDate>
      <link>https://dev.to/onpointvn/elixirls-intellisense-stop-working-29jo</link>
      <guid>https://dev.to/onpointvn/elixirls-intellisense-stop-working-29jo</guid>
      <description>&lt;p&gt;Recently, VSCode intellisense feature for elixir has stopped working on my Mac. Code autocomplete, go to definition, function description... are all failed. My colleagues encounter the same problem.&lt;br&gt;
After researching, I found the root cause is ElixirLS has crashed from launching.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6JdTLXtw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/958fwk12erc3mg9pd2ue.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6JdTLXtw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/958fwk12erc3mg9pd2ue.png" alt="ElixirLS crash"&gt;&lt;/a&gt;&lt;br&gt;
I tried to disable ElixirLS, close the editor, open the editor again and enable ElixirLS but no luck. I also tried to reinstall ElixirLS but nothing changes.&lt;br&gt;
So I went to ElixirLS Github homepage, move to &lt;a href="https://github.com/elixir-lsp/vscode-elixir-ls#troubleshooting"&gt;Troubleshooting region&lt;/a&gt; and I found the solution:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Remove .elixir_ls folder in project folder:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; .elixir_ls/ 
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Close VSCode.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open project in VSCode again, wait for ElixirLS run.&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n3l6nyOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8hveq7k7q2kbf3qhyj1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n3l6nyOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8hveq7k7q2kbf3qhyj1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And voila! &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>elixir</category>
      <category>elixirls</category>
      <category>intellisense</category>
      <category>vscode</category>
    </item>
    <item>
      <title>🎬Log In / Sign Up | html &amp; css✨</title>
      <author>Robson Muniz</author>
      <pubDate>Fri, 10 Sep 2021 23:56:36 +0000</pubDate>
      <link>https://dev.to/robsonmuniz16/log-in-sign-up-html-css-1424</link>
      <guid>https://dev.to/robsonmuniz16/log-in-sign-up-html-css-1424</guid>
      <description>&lt;p&gt;Create from scratch a “Responsive Login and Registration Form” using just html, css and JavaScript…&lt;/p&gt;




&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/JbWdz88oi90"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;We’re also going to use @media queries to make it responsive in whatever screen you want display it.&lt;/p&gt;

&lt;p&gt;It’s a quite simple project to do, but at the same time it will teach you a lot of cool thing on css like animation, grid and how to make it responsive.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>login</category>
    </item>
    <item>
      <title>13 project ideas for frontend dev</title>
      <author>Aya Bouchiha</author>
      <pubDate>Fri, 10 Sep 2021 22:58:59 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/10-project-ideas-for-web-dev-1k65</link>
      <guid>https://dev.to/ayabouchiha/10-project-ideas-for-web-dev-1k65</guid>
      <description>&lt;h2&gt;
  &lt;a href="#10-project-ideas-that-will-help-you-to-evolve-your-programming-skills"&gt;
  &lt;/a&gt;
  10 project ideas that will help you to evolve your programming skills
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;covid tracker &lt;/li&gt;
&lt;li&gt;note app&lt;/li&gt;
&lt;li&gt;e-commerce store&lt;/li&gt;
&lt;li&gt;typing test speed &lt;/li&gt;
&lt;li&gt;netflix clone&lt;/li&gt;
&lt;li&gt;random quotes app&lt;/li&gt;
&lt;li&gt;books store&lt;/li&gt;
&lt;li&gt;chat app&lt;/li&gt;
&lt;li&gt;quiz game&lt;/li&gt;
&lt;li&gt;Social Network&lt;/li&gt;
&lt;li&gt;hangman&lt;/li&gt;
&lt;li&gt;spotify clone&lt;/li&gt;
&lt;li&gt;blog&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#awesome-libraries-to-use-in-the-project"&gt;
  &lt;/a&gt;
  awesome libraries to use in the project
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;styled-components&lt;/li&gt;
&lt;li&gt;react-leaflet&lt;/li&gt;
&lt;li&gt;material-ui&lt;/li&gt;
&lt;li&gt;font-awesome&lt;/li&gt;
&lt;li&gt;axios&lt;/li&gt;
&lt;li&gt;react-select&lt;/li&gt;
&lt;li&gt;react-google-login&lt;/li&gt;
&lt;li&gt;react-facebook-login&lt;/li&gt;
&lt;li&gt;firebase&lt;/li&gt;
&lt;li&gt;redux&lt;/li&gt;
&lt;li&gt;numeral&lt;/li&gt;
&lt;li&gt;react-icons&lt;/li&gt;
&lt;li&gt;socket.io&lt;/li&gt;
&lt;li&gt;bootstrap&lt;/li&gt;
&lt;li&gt;tailwindcss&lt;/li&gt;
&lt;li&gt;node-sass&lt;/li&gt;
&lt;li&gt;quilljs&lt;/li&gt;
&lt;li&gt;react-avatar&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;have a good day&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
