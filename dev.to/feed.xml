<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to mint an NFT via CLI</title>
      <author>Emanuel Ferreira</author>
      <pubDate>Mon, 20 Sep 2021 10:26:34 +0000</pubDate>
      <link>https://dev.to/emanuelferreira/how-to-mint-an-nft-via-cli-25ea</link>
      <guid>https://dev.to/emanuelferreira/how-to-mint-an-nft-via-cli-25ea</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;In this article we will create a script with NodeJS to create an NFT via CLI, passing in its private address and a URL containing the NFT metadata.&lt;/p&gt;

&lt;p&gt;To do this tutorial, I recommend looking at our series to understand the previous steps and see how we got here&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://dev.to/emanuelferreira/how-to-create-a-smart-contract-to-mint-a-nft-2bbn"&gt;How to create a Smart Contract to mint an NFT&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/emanuelferreira/how-to-deploy-smart-contract-to-rinkeby-testnet-using-infura-and-hardhat-5ddj"&gt;How to deploy a Smart Contract to Rinkeby Testnet using Infura and Hardhat&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#boilerplate"&gt;
  &lt;/a&gt;
  Boilerplate
&lt;/h3&gt;

&lt;p&gt;To be faster, I will provide a boilerplate containing the babel, typescript, file structure, packages, scripts, environment variables...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/EmanuelCampos/mint-nft-script/tree/boilerplate"&gt;Click here to go to the GitHub with boilerplate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our boilerplate contains the following packages to run the script:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y481ZgMS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f70vp4jg92gyjyl0svjk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y481ZgMS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f70vp4jg92gyjyl0svjk.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#taking-the-provider"&gt;
  &lt;/a&gt;
  Taking the Provider
&lt;/h3&gt;

&lt;p&gt;Our application provider will help us interact with our contract by defining the network we want to access as mainnet or testnet.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: To get the provider we are going to use Infura, you can see my previous article on how to use Infura: &lt;a href="https://dev.to/emanuelferreira/how-to-deploy-smart-contract-to-rinkeby-testnet-using-infura-and-hardhat-5ddj"&gt;How to deploy a Smart Contract to Rinkeby Testnet using Infura and Hardhat&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Going into the &lt;code&gt;getProvider&lt;/code&gt; file in the &lt;code&gt;src/getProvider.ts&lt;/code&gt; directory we will take the code below and edit it to get our provider.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;getProvider.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ethers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//Library to connect to the ethereum&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// Library to get the enviroment variables&lt;/span&gt;

&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// starting the dotenv&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// function to get provider&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are going to edit our file and leave it the same as below(I will explain in the code what each line does).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;getProvider.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ethers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;infuraProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InfuraProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NETWORK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Our enviroment variable with network (rinkeby, mainnet, ropsten)&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PROJECT_ID&lt;/span&gt; &lt;span class="c1"&gt;// Our environment variable with the id of our project in infura&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Function in ethers to connect to Infura&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;infuraProvider&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// returning the provider&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ready, we finished our first function!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contract-addresses"&gt;
  &lt;/a&gt;
  Contract Addresses
&lt;/h3&gt;

&lt;p&gt;In the &lt;code&gt;contractAddresses.ts&lt;/code&gt; file in &lt;code&gt;src/contractAddresses.ts&lt;/code&gt; we have an export of the environment variable which is the address of the contract we deployed in the previous article.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;contractAddresses.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FactoryNFTAddress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CONTRACT_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-the-mint-script"&gt;
  &lt;/a&gt;
  Creating the Mint Script
&lt;/h3&gt;

&lt;p&gt;Now finally let's create our script to mint an NFT using only 1 command.&lt;/p&gt;

&lt;p&gt;We have some basic settings to run our script:&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;mintNFT.ts&lt;/code&gt; file in &lt;code&gt;src/mintNFT.ts&lt;/code&gt; we have some basic settings to run our script, let's complete by adding the desired functions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;mintNFT.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ethers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;err: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#getting-the-args"&gt;
  &lt;/a&gt;
  Getting the args
&lt;/h4&gt;

&lt;p&gt;Let's start by getting the two arguments that are &lt;code&gt;privateKey&lt;/code&gt; and &lt;code&gt;tokenURI&lt;/code&gt; and validating if at least 2 arguments were sent.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;mintNFT.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ethers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// getting the args&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yarn es ./src/mintNft &amp;lt;privatekey&amp;gt; &amp;lt;tokenuri&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// validating whether the 2 arguments were sent&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;privateKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tokenUri&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// destructuring to get the arguments&lt;/span&gt;


&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;err: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#getting-the-provider"&gt;
  &lt;/a&gt;
  Getting the Provider
&lt;/h4&gt;

&lt;p&gt;After we get the arguments we need to know which address is being used to mint the NFT and sign the contract.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;mintNFT.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ethers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// getting the args&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yarn es ./src/mintNft &amp;lt;privatekey&amp;gt; &amp;lt;tokenuri&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// validating whether the 2 arguments were sent&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;privateKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tokenUri&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// destructuring to get the arguments&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;err: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#connecting-with-the-wallet-and-the-contract"&gt;
  &lt;/a&gt;
  Connecting with the wallet and the contract
&lt;/h4&gt;

&lt;p&gt;First, we need to import some things which are the ABI of our contract that we got after compiling it, the address of our contract, and our getProvider&lt;/p&gt;

&lt;p&gt;&lt;em&gt;mintNFT.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ethers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./getProvider&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;FactoryNFT&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../artifacts/contracts/factoryNFT.sol/FactoryNFT.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FactoryNFTAddress&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./contractAddresses&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// getting the args&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yarn es ./src/mintNft &amp;lt;privatekey&amp;gt; &amp;lt;tokenuri&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// validating whether the 2 arguments were sent&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;privateKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tokenUri&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// destructuring to get the arguments&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;err: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can get your ABI contract after compiling your contract, just dragging the artifacts folder to the root folder. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VD3_2oQ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1873w7fdsovon9w2u93v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VD3_2oQ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1873w7fdsovon9w2u93v.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we need to pass the wallet that we are using for our transaction to our contract, for that we will use ethers on both occasions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;mintNFT.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ethers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// getting the args&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yarn es ./src/mintNft &amp;lt;privatekey&amp;gt; &amp;lt;tokenuri&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// validating whether the 2 arguments were sent&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;privateKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tokenUri&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// destructuring to get the arguments&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wallet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Wallet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;privateKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// getting your wallet&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;factoryNFTContract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Contract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;FactoryNFTAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// your contract address&lt;/span&gt;
    &lt;span class="nx"&gt;FactoryNFT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// your contract ABI&lt;/span&gt;
    &lt;span class="nx"&gt;wallet&lt;/span&gt; &lt;span class="c1"&gt;// your wallet&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// getting the contract&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;err: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#making-the-transaction"&gt;
  &lt;/a&gt;
  Making the transaction
&lt;/h4&gt;

&lt;p&gt;And now the last step is to use our contract to make our transaction.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;mintNFT.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ethers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// getting the args&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yarn es ./src/mintNft &amp;lt;privatekey&amp;gt; &amp;lt;tokenuri&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// validating whether the 2 arguments were sent&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;privateKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tokenUri&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// destructuring to get the arguments&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wallet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Wallet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;privateKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// getting your wallet&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;factoryNFTContract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Contract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;FactoryNFTAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// your contract address&lt;/span&gt;
    &lt;span class="nx"&gt;FactoryNFT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// your contract ABI&lt;/span&gt;
    &lt;span class="nx"&gt;wallet&lt;/span&gt; &lt;span class="c1"&gt;// your wallet&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// getting the contract&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;minting&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;factoryNFTContract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tokenUri&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// interacting with the contract&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// waiting the minting of the block&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tokenId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toNumber&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// getting the created tokenId&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;tokenId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="c1"&gt;// returns&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;err: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can run the command below and see the result in the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn es ./src/mintNft &amp;lt;privatekey&amp;gt; &amp;lt;tokenuri&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h1CHR4TN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqiz2hd2447vt355joie.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h1CHR4TN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqiz2hd2447vt355joie.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The script is done, now you can get your tokenID and consult the contract that will return your metadata.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;thanks &lt;a href="https://twitter.com/sseraphini"&gt;Sibelius&lt;/a&gt; for helping with the script.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now you can Follow me on &lt;a href="https://twitter.com/manelferreira_"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Project Repository(Complete): &lt;a href="https://github.com/EmanuelCampos/mint-nft-script/tree/master"&gt;https://github.com/EmanuelCampos/mint-nft-script/tree/master&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Project Repository(Blank Template): &lt;a href="https://github.com/EmanuelCampos/mint-nft-script/tree/boilerplate"&gt;https://github.com/EmanuelCampos/mint-nft-script/tree/boilerplate&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>solidity</category>
      <category>script</category>
      <category>web3</category>
    </item>
    <item>
      <title>Software Engineering is a Loser’s Game</title>
      <author>Tyler Hawkins</author>
      <pubDate>Mon, 20 Sep 2021 09:53:40 +0000</pubDate>
      <link>https://dev.to/thawkin3/software-engineering-is-a-loser-s-game-2k20</link>
      <guid>https://dev.to/thawkin3/software-engineering-is-a-loser-s-game-2k20</guid>
      <description>&lt;p&gt;I’ve recently become fascinated by the idea of “winner’s games” and “loser’s games.” There are several great articles which explain the idea in depth, but here’s a quick summary:&lt;/p&gt;

&lt;p&gt;An observation was made by Simon Ramo in 1973 that there is big difference in how games are won in amateur tennis versus professional tennis.&lt;/p&gt;

&lt;p&gt;When two amateur opponents are playing, the game is often won not through the winner’s great skill but because of the loser’s mistakes. The loser often commits unforced errors by hitting the ball out of bounds, missing easy shots, or double faulting. In other words, the loser beats himself. Points are “lost” by the loser more than they are “won” by the winner. This is a “loser’s game.”&lt;/p&gt;

&lt;p&gt;When two professional opponents are playing, the game is won primarily due to the winner’s skill. Neither player commits many unforced errors. The winner places his shots well and outperforms his opponent to defeat him. Points in this kind of game are “won” by the winner more than they are “lost” by the loser. This is a “winner’s game.”&lt;/p&gt;

&lt;p&gt;So, if you’re playing a loser’s game, a winning strategy is to simply try to avoid making mistakes and let your opponent beat himself.&lt;/p&gt;

&lt;p&gt;(If you’ve ever played tennis or ping pong before, I hope at this point you’re nodding your head in recognition. As an avid ping pong player, I’ve seen this scenario play out in the office at work on a daily basis.)&lt;/p&gt;

&lt;p&gt;The application of this observation is that you should attempt to understand whether any given activity you’re involved in is a winner’s game or a loser’s game. Gaining that understanding teaches you how you should play the game.&lt;/p&gt;

&lt;p&gt;You can read more about these ideas in this &lt;a href="https://www.empirical.net/wp-content/uploads/2012/06/the_losers_game.pdf"&gt;article by Charles Ellis&lt;/a&gt;, this &lt;a href="https://fs.blog/2014/06/avoiding-stupidity/"&gt;article from the FS blog&lt;/a&gt;, or this &lt;a href="https://thehosk.medium.com/software-development-is-a-losers-game-fc68bb30d7eb"&gt;article from Ben Hosking&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#parallels-to-software-engineering"&gt;
  &lt;/a&gt;
  Parallels to Software Engineering
&lt;/h2&gt;

&lt;p&gt;Now, what if we consider software engineering to be a loser’s game? That is to say, we often beat ourselves by committing unforced errors and making mistakes. If we are amateurs, so to speak, how can we keep the ball in play rather than hitting it into the net?&lt;/p&gt;

&lt;p&gt;It’s a simple thing to say, “If you want to be good, just stop making mistakes.” But that’s somewhat unhelpful. That’s like saying to those in poverty, “Why don’t you just stop being poor?”&lt;/p&gt;

&lt;p&gt;It’s also unhelpful if we take this analogy too far. If avoiding mistakes is the ultimate goal of software engineering, is the best software engineer the one who writes no code or does nothing? Obviously, no. Software engineers are paid to write code to help bring to life some product in order to achieve some vision (make the business money, solve a real-world problem, simplify a task, etc.), so that must be the real ultimate goal.&lt;/p&gt;

&lt;p&gt;So it appears that we must balance producing valuable output with avoiding mistakes. This leads to an interesting thought experiment: In what ways do we beat ourselves, and how can we avoid making these amateur mistakes?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#unforced-errors"&gt;
  &lt;/a&gt;
  Unforced Errors
&lt;/h2&gt;

&lt;p&gt;Here’s a list of possible unforced errors we commit. I’m sure you may be able to add more to this list as well.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Not understanding the problem before trying to code a solution&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not understanding the tools or programming languages we use&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not carefully reviewing our own code before asking for a code review&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not manually testing our own code before asking for a code review&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not writing unit tests&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not following agreed-upon company standards&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#solving-these-unforced-errors"&gt;
  &lt;/a&gt;
  Solving These Unforced Errors
&lt;/h2&gt;

&lt;p&gt;Now that we’ve identified some potential unforced errors, how do we avoid making them?&lt;/p&gt;

&lt;p&gt;For starters, we can put safeguards in place to help us catch and correct our mistakes before they become too costly. All code repos should be configured with code linters, code formatters, and a suite of automated tests. These safeguards can be run as part of a CI pipeline prior to allowing any code to be merged.&lt;/p&gt;

&lt;p&gt;We can also be more thorough in our own attention to detail when writing code. After creating a merge request, we should always do a self code review before asking others to review our code. We should always manually validate our changes as well.&lt;/p&gt;

&lt;p&gt;Nothing is more frustrating as a code reviewer than reviewing someone else’s code who clearly didn’t do these checks themselves. It wastes the code reviewer’s time when he has to catch simple mistakes like commented out code, bad formatting, failing unit tests, or broken functionality in the code. All of these mistakes can easily be caught by the code author or by a CI pipeline.&lt;/p&gt;

&lt;p&gt;When merge requests are frequently full of errors, it turns the code review process into a gatekeeping process in which a handful of more senior engineers serve as the gatekeepers. This is an unfavorable scenario that creates bottlenecks and slows down the team’s velocity. It also detracts from the higher purpose of code reviews, which is knowledge sharing.&lt;/p&gt;

&lt;p&gt;We can use checklists and merge request templates to serve as reminders to ourselves of things to double check. Have you reviewed your own code? Have you written unit tests? Have you updated any documentation as needed? For frontend code, have you validated your changes in each browser your company supports? Have you ensured that all user-facing text is translated? Have you ensured that the UI meets accessibility standards and guidelines?&lt;/p&gt;

&lt;p&gt;By performing these checks ourselves, aided by automated tools, we show an added measure of professionalism and respect for our coworkers. Trust will grow and velocity will increase. The key is to be diligent and disciplined.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Software engineering is a loser’s game. So let’s learn to play the game and stop losing to ourselves.&lt;/p&gt;

</description>
      <category>leadership</category>
      <category>productivity</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Using Socket.io in express-generator.</title>
      <author>Abhishek shah</author>
      <pubDate>Mon, 20 Sep 2021 09:34:06 +0000</pubDate>
      <link>https://dev.to/shahiscoding/using-socket-io-in-express-generator-4pkp</link>
      <guid>https://dev.to/shahiscoding/using-socket-io-in-express-generator-4pkp</guid>
      <description>&lt;p&gt;Socket.io has documentation on how to use it with express but it a bit tricky to use socket.io with express-generator because the server is created in www file and the io is created in app or server but the use of io is in the router .So how can you use socket.io in express-generator ?&lt;br&gt;&lt;br&gt;
           Its very simple you can create a new file as mysocket and create instance of io over there and export it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-the-mysocket-file"&gt;
  &lt;/a&gt;
  In the mysocket file.
&lt;/h2&gt;

&lt;blockquote&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let socketIo = require('socket.io');
let io = socketIo();
let socketApi = {};
socketApi.io = io;
module.exports = socketApi;
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#in-the-www-file"&gt;
  &lt;/a&gt;
  In the www file
&lt;/h2&gt;

&lt;blockquote&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var server = http.createServer(app);
socketAPI.io.attach(server);
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;p&gt;So, you can import io from mysocket file into the router and use it.&lt;br&gt;
If you have anything to add you can leave a comment.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>node</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What is Ethereum</title>
      <author>Shadmehr</author>
      <pubDate>Mon, 20 Sep 2021 09:22:31 +0000</pubDate>
      <link>https://dev.to/shadmehra/what-is-ethereum-37mn</link>
      <guid>https://dev.to/shadmehra/what-is-ethereum-37mn</guid>
      <description>&lt;p&gt;If Bitcoin (BTC) is the alleged future of money, then what is Ethereum? For someone new to the cryptocurrency space, that’s the logical question to ask, considering they probably see Ethereum and its native Ether (ETH) cryptocurrency next to Bitcoin everywhere on exchanges and in the news. However, it’s not exactly fair to consider Ethereum to be in direct competition with Bitcoin. It has different goals, features and even technology.&lt;/p&gt;

&lt;p&gt;Ethereum is a decentralized blockchain network powered by the Ether token that enables users to make transactions, earn interest on their holdings through staking, use and store nonfungible tokens (NFTs), trade cryptocurrencies, play games, use social media and so much more.&lt;/p&gt;

&lt;p&gt;It’s currently a proof-of-work (PoW) blockchain but is making the move to proof-of-stake (PoS) with Ethereum 2.0 for scalability purposes and for a more environmentally friendly approach.&lt;/p&gt;

&lt;p&gt;Many consider Ethereum to be the internet’s next step. If centralized platforms like Apple’s App Store represent Web 2.0, a decentralized, user-powered network like Ethereum is Web 3.0. This “next-generation web” supports decentralized applications (DApps), decentralized finance (DeFi) and decentralized exchanges (DEXs), for instance. &lt;/p&gt;

&lt;p&gt;All of these are trustless, automated versions of traditional finance and internet usage, and they’re widely used. DeFi is already holding billions in total value locked in projects, and that’s expected to grow even higher.&lt;/p&gt;

&lt;p&gt;History of Ethereum&lt;br&gt;
Ethereum wasn’t always the second-largest blockchain project in the world. Vitalik Buterin actually co-created the project to answer for Bitcoin’s shortcomings. Buterin published the Ethereum white paper in 2013, detailing smart contracts — automated, immutable “if-then” statements — enabling the development of decentralized applications. While DApp development already existed in the blockchain space, platforms weren’t interoperable. Buterin intended Ethereum to unify them. To him, unifying the way DApps run and interact was the only way to maintain adoption.&lt;/p&gt;

&lt;p&gt;Thus, Ethereum 1.0 was born. Think of it as Apple’s App Store: one space for tens of thousands of different applications, all abiding by the same ruleset, only that ruleset is hardcoded into the network and enforced autonomously, with developers able to enforce their own rules within DApps. There isn’t a central party, like with Apple changing and enforcing regulations. Instead, the power is in the hands of the people who act as a community.&lt;/p&gt;

&lt;p&gt;Of course, building such a network isn’t cheap. So, Buterin and his co-founders — Gavin Wood, Jeffrey Wilcke, Charles Hoskinson, Mihai Alisie, Anthony Di Iorio and Amir Chetrit — held a token presale to raise $18,439,086 in Ether, funding Ethereum’s present and future developments.&lt;/p&gt;

&lt;p&gt;The group also founded the Ethereum Foundation in Switzerland, with the mission to maintain and develop the network. Soon after, Buterin announced the foundation would run as a nonprofit, which caused some co-founders to leave.&lt;/p&gt;

&lt;p&gt;Over time, developers came to Ethereum with their own decentralized ideas. In 2016, these users founded The DAO, a democratic group that voted on network changes and proposals. The organization was backed by a smart contract and circumvented the need for a CEO heralding power over Ethereum. Instead, a majority needed to vote on changes for them to be implemented.&lt;/p&gt;

&lt;p&gt;However, this all went south when an unknown hacker stole $40 million in funds from The DAO’s holdings, due to a security exploit. To reverse the theft, The DAO voted to “hard fork” Ethereum, diverging from the old network and upgrading to a new protocol, essentially undergoing a major software update. This new fork retained the name Ethereum, while the original network exists as Ethereum Classic.&lt;br&gt;
&lt;a href="https://arzdigital.academy/what-is-ethereum/"&gt;https://arzdigital.academy/what-is-ethereum/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>pow</category>
    </item>
    <item>
      <title>Make Spam bot in Python in just 6 lines</title>
      <author>VECTOR3Studio</author>
      <pubDate>Mon, 20 Sep 2021 09:22:03 +0000</pubDate>
      <link>https://dev.to/vector3studio/make-spam-bot-in-python-in-just-6-lines-288e</link>
      <guid>https://dev.to/vector3studio/make-spam-bot-in-python-in-just-6-lines-288e</guid>
      <description>&lt;p&gt;1 Hello 👋&lt;br&gt;
In this post I will show you how to make simple spam bot in Python in just 6 lines of code.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#btw-you-can-watch-video-tutorial-here"&gt;
  &lt;/a&gt;
  BTW you can watch video tutorial here:
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ZvyEpkrTGKM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#so-lets-start"&gt;
  &lt;/a&gt;
  So let's Start ▶️
&lt;/h4&gt;

&lt;p&gt;First we need to install Pysimplegui library, we can do it by running this command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; pip install pysimplegui 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we need to import pysimplegui and time library. We can use this code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pysimplegui&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's make a program for spamming.&lt;br&gt;
First we need add a timer, because you will need some time to go to Instagram or something.&lt;br&gt;
Then we need ad a whole loop for the spamming functionality&lt;br&gt;
Here is the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#delay for 5 sec
&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#endless loop
&lt;/span&gt;  &lt;span class="n"&gt;pyautogui&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"heyy"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;pyautogui&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;press&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"enter"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's the whole code you need to Spam your friend.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#thanks-for-reading-this-post-i-hope-you-learned-something-new-see-you"&gt;
  &lt;/a&gt;
  Thanks for Reading this post. I hope you learned something new. See you 👋
&lt;/h5&gt;

</description>
      <category>python</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>What is C# Programming Language
</title>
      <author>Shadmehr</author>
      <pubDate>Mon, 20 Sep 2021 09:16:23 +0000</pubDate>
      <link>https://dev.to/shadmehra/what-is-c-programming-language-2iip</link>
      <guid>https://dev.to/shadmehra/what-is-c-programming-language-2iip</guid>
      <description>&lt;p&gt;What is C# Programming Language&lt;br&gt;
Microsoft developed C# in 2000. It was built to meet the rising demand for web applications that Visual Basic(VB) and C++ can’t cater to. Its architecture adopts the best features of Java and C++. As a result, developers who are well versed in C and C++ can shift to C# easily.&lt;/p&gt;

&lt;p&gt;Also, its huge popularity is attributed to:&lt;/p&gt;

&lt;p&gt;Reusable components for faster software development&lt;br&gt;
The code syntax looks similar to Java and C++&lt;br&gt;
Data types inside C# are more flexible and error-free. &lt;br&gt;
These are just a few reasons that make C# the best programming language when it comes to web applications. It provides a broad spectrum of components covering business-oriented to system-oriented projects.&lt;/p&gt;

&lt;p&gt;What is C# used for?&lt;br&gt;
C# is a general-purpose programming language used to build different types of programs and applications. While it is exceptionally versatile, there are three fields where it is commonly applied: &lt;/p&gt;

&lt;p&gt;Web Application Development&lt;br&gt;
Regardless of the platform, you can still use the C# programming language. You can build dynamic websites and web apps using the .NET platform or other open-source platforms. &lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>What and Why Next.js and TailwindCSS?</title>
      <author>Avneesh Agarwal</author>
      <pubDate>Mon, 20 Sep 2021 09:11:39 +0000</pubDate>
      <link>https://dev.to/byteslash/what-and-why-next-js-and-tailwindcss-g5j</link>
      <guid>https://dev.to/byteslash/what-and-why-next-js-and-tailwindcss-g5j</guid>
      <description>&lt;p&gt;&lt;strong&gt;Hey folks 👋🏻,&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you have seen my past articles then you must have seen that many of the articles are related to &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt;,  &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;, or  &lt;a href="https://tailwindcss.com/"&gt;Tailwind &lt;/a&gt; but I never really explained what they exactly are, so I have decided to write an article on that today!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--50hj-Y-1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/r3XdvPsAV3kAAAAC/despicable-me-minions.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--50hj-Y-1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/r3XdvPsAV3kAAAAC/despicable-me-minions.gif" alt="started"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-nextjs"&gt;
  &lt;/a&gt;
  What is Next.js?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt;  is a production-ready framework for the javascript library React. Next.js provides us many features on top of the amazing library &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-use-nextjs"&gt;
  &lt;/a&gt;
  Why use Next.js?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ServerSideRendering and Static generation hybrid&lt;/li&gt;
&lt;li&gt;Easy file system routing&lt;/li&gt;
&lt;li&gt;Better SEO&lt;/li&gt;
&lt;li&gt;Image Optimization&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-react"&gt;
  &lt;/a&gt;
  What is  React?
&lt;/h3&gt;

&lt;p&gt;React is an open-source Javascript library built by Facebook and it is used for building user interfaces or UI components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-react"&gt;
  &lt;/a&gt;
  Why React?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Great performance&lt;/li&gt;
&lt;li&gt;Easy to learn&lt;/li&gt;
&lt;li&gt;Easy to test&lt;/li&gt;
&lt;li&gt;Simple&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-tailwindcss"&gt;
  &lt;/a&gt;
  What is TailwindCSS?
&lt;/h3&gt;

&lt;p&gt;TailwindCSS is a CSS framework that allows us to write CSS directly inside our HTML. It is a utility-first framework and highly flexible unlike some others like Bootstrap. The long classes can be opinionated but it is worth a try.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-use-tailwind"&gt;
  &lt;/a&gt;
  Why use Tailwind?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Superfast&lt;/li&gt;
&lt;li&gt;Easily make apps responsive&lt;/li&gt;
&lt;li&gt;Helps to maintain a design system&lt;/li&gt;
&lt;li&gt;Tiny in production&lt;/li&gt;
&lt;li&gt;Easy dark mode&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Useful links -&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextjs.org"&gt;Nextjs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tailwindcss.com/"&gt;TailwindCSS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://avneesh-links.vercel.app/"&gt;All socials&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>tailwindcss</category>
    </item>
    <item>
      <title>How to deploy streamlit app to Heroku</title>
      <author>Kevork Keheian</author>
      <pubDate>Mon, 20 Sep 2021 09:00:44 +0000</pubDate>
      <link>https://dev.to/kevorkkeheian/how-to-deploy-streamlit-app-to-heroku-khn</link>
      <guid>https://dev.to/kevorkkeheian/how-to-deploy-streamlit-app-to-heroku-khn</guid>
      <description>&lt;p&gt;Hello everyone,&lt;br&gt;
This is a step by step tutorial about how to deploy your Streamlit app to Heroku.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-streamlit"&gt;
  &lt;/a&gt;
  What is streamlit?
&lt;/h2&gt;

&lt;p&gt;Streamlit is an open-source python framework for Machine Learning and Data Science teams and individuals.&lt;br&gt;
See it yourself: &lt;a href="https://streamlit.io"&gt;https://streamlit.io&lt;/a&gt;&lt;br&gt;
You can deploy your app using streamlit sharing, but the problem is that you only have 3 apps with the free version.&lt;/p&gt;

&lt;p&gt;So what you will see now is how you can deploy your app to Heroku&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;python&lt;/code&gt; installled&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;streamlit&lt;/code&gt; installed
(You can install streamlit using &lt;code&gt;pip install streamlit&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com"&gt;GitHub&lt;/a&gt; account&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once the above are installed&lt;/p&gt;

&lt;p&gt;You can check their &lt;a href="https://docs.streamlit.io/en/stable/"&gt;documentation&lt;/a&gt; about creating you app.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#and-now-its-time-to-deploy"&gt;
  &lt;/a&gt;
  And now it's time to deploy 🎇
&lt;/h3&gt;

&lt;p&gt;You need to add 2 additional files to your project.&lt;br&gt;
1- You need to add a &lt;strong&gt;setup.sh&lt;/strong&gt; file which is used to add shell commands inside the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; ~/.streamlit/
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
[server]&lt;/span&gt;&lt;span class="se"&gt;\n\&lt;/span&gt;&lt;span class="s2"&gt;
headless = true&lt;/span&gt;&lt;span class="se"&gt;\n\&lt;/span&gt;&lt;span class="s2"&gt;
port = &lt;/span&gt;&lt;span class="nv"&gt;$PORT&lt;/span&gt;&lt;span class="se"&gt;\n\&lt;/span&gt;&lt;span class="s2"&gt;
enableCORS = false&lt;/span&gt;&lt;span class="se"&gt;\n\&lt;/span&gt;&lt;span class="s2"&gt;
&lt;/span&gt;&lt;span class="se"&gt;\n\&lt;/span&gt;&lt;span class="s2"&gt;
"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; ~/.streamlit/config.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add a new file called &lt;strong&gt;Procfile&lt;/strong&gt; and inside it paste the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;web: sh setup.sh &amp;amp;&amp;amp; streamlit run app.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally a &lt;strong&gt;requirements.txt&lt;/strong&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;streamlit
matplotlib
numpy
pandas
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and the other packages that you are using in your app.&lt;/p&gt;

&lt;p&gt;Now head over to &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt; and create a new repository and publish your code to github. You can check this &lt;a href="https://medium.com/singapore-rails-learning-group/how-to-push-your-code-to-github-and-publish-your-first-page-8b0e1f4caf2a"&gt;article&lt;/a&gt; to see how you can do that.&lt;/p&gt;

&lt;p&gt;Once the code is on GitHub head over to &lt;a href="https://heroku.com"&gt;Heroku&lt;/a&gt; and create a new app:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JSJAqHXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8cqgbnnsvvvo8sgepor.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JSJAqHXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8cqgbnnsvvvo8sgepor.png" alt="Create a new app on Heroku"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose a name to your app and click "&lt;strong&gt;Create app&lt;/strong&gt;"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iZdG3S9Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/luevxt316fhugf8mes6b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iZdG3S9Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/luevxt316fhugf8mes6b.png" alt="Heroku - create a new app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can leave the pipeline empty for the time being and choose "GitHub" as your deployment method.&lt;br&gt;
And in the &lt;strong&gt;Connect to GitHub&lt;/strong&gt; section choose your username/org, type the name of the repository and click search. After you click search you can see the repo, click on the &lt;strong&gt;Connect&lt;/strong&gt; button next to the repo.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RSBqGZcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpqhsz4y7lv14zi2v6ci.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RSBqGZcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpqhsz4y7lv14zi2v6ci.png" alt="Heroku - choose deployment method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you click connect you can see at the end of the page The &lt;strong&gt;Manual deploy&lt;/strong&gt; section. Just click Deploy Branch and watch the magic happen.&lt;/p&gt;

&lt;p&gt;Once the deployment is finished you can check your app &lt;strong&gt;app-name&lt;/strong&gt;.heroku.com.&lt;br&gt;
In this case we chose &lt;strong&gt;streamlit-heroku-app&lt;/strong&gt; as our app name so if you need to navigate to streamlit-heroku-app.heroku.com to see the deployed streamlit app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MIlABuIB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zanl8gtpwrieb84epafj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MIlABuIB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zanl8gtpwrieb84epafj.png" alt="Heroku - manaul deployment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: the app is no longer available on heroku&lt;/em&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>streamlit</category>
      <category>heroku</category>
    </item>
    <item>
      <title>Create an NPX CLI Portfolio under 5 minutes</title>
      <author>Anish De</author>
      <pubDate>Mon, 20 Sep 2021 08:56:34 +0000</pubDate>
      <link>https://dev.to/anishde12020/creat-an-npx-cli-portfolio-under-5-minutes-fh0</link>
      <guid>https://dev.to/anishde12020/creat-an-npx-cli-portfolio-under-5-minutes-fh0</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dWSfitnE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632121300335/gd5ezLkxf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dWSfitnE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632121300335/gd5ezLkxf.gif" alt="npx-cli-portfolio.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want something like this? This is the article you are looking for. Let me show you how you can make an NPX CLI Portfolio under 5 minutes&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-i-made-it"&gt;
  &lt;/a&gt;
  How I made it
&lt;/h1&gt;

&lt;p&gt;I am mainly using &lt;a href="https://github.com/vadimdemedes/ink"&gt;React Ink&lt;/a&gt; for this project. I have also written a &lt;a href="https://blog.anishde.dev/getting-started-with-react-ink"&gt;Getting started with React Ink&lt;/a&gt; article which you can check out. The goal was to make a portfolio that can be viewed in the terminal. At first, I just did a console log which logged out information about me but once I found out about React Ink, I thought of using that and making it better. The advantage of using React Ink is that it is way more flexible than simple console logs and hence I was able to put custom colors (theoretically you can apply a color to a console log but options are quite limited). Using React also allowed me to make a reusable component and hence the number of fields showing up and the contents are dynamic, based on a &lt;code&gt;data.json&lt;/code&gt; file.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-you-can-make-it-as-well"&gt;
  &lt;/a&gt;
  How you can make it as well
&lt;/h1&gt;

&lt;p&gt;I have made a template in GitHub (which you can find &lt;a href="https://github.com/AnishDe12020/cli-portfolio-template"&gt;here&lt;/a&gt;) which you can use. You can find a detailed guide &lt;a href="https://github.com/AnishDe12020/cli-portfolio-template#how-to-use-this-template"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#things-to-keep-in-mind"&gt;
  &lt;/a&gt;
  Things to keep in mind
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;If someone has already made a package with the same name on NPM, then you need to choose something else&lt;/li&gt;
&lt;li&gt;NPM version 5.2 is needed at a minimum to use NPX (it can be used as a standalone package though)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to &lt;a class="mentioned-user" href="https://dev.to/deninpaulv"&gt;@deninpaulv&lt;/a&gt;
 for help with the thumbnail&lt;/p&gt;

</description>
      <category>npm</category>
      <category>portfolio</category>
      <category>template</category>
      <category>node</category>
    </item>
    <item>
      <title>No estimations</title>
      <author>Jelle Smeets</author>
      <pubDate>Mon, 20 Sep 2021 08:33:48 +0000</pubDate>
      <link>https://dev.to/smeetsmeister/no-estimations-kmf</link>
      <guid>https://dev.to/smeetsmeister/no-estimations-kmf</guid>
      <description>&lt;p&gt;Sometimes you come across a subject that peak your interest (in a good way). This week I stumbled across the subject of no estimates. This great tweet by Vasco Duarte really pulled me right in.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--O8M77-0e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/38427582/1845527267_e585216ea7_normal.jpg" alt="Vasco Duarte profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Vasco Duarte
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @duarte_vasco
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Being a &lt;a href="https://twitter.com/hashtag/NoEstimates"&gt;#NoEstimates&lt;/a&gt; advocate, I get to work with teams that need help with their projects. &lt;br&gt;&lt;br&gt;Invariably they start by asking "how can I estimate better?"&lt;br&gt;&lt;br&gt;When we look at what happened, we invariably find out the team did all the right things, which are...
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      05:12 AM - 16 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1438370179243728905" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1438370179243728905" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1438370179243728905" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;After reading some blogs and watching some talks, it really made me wonder. Why do all the teams I work with estimate stories? And the only reason I can think of is that they teach it in Scrum 101, and how would you ever be able to predict when a project would finish? No Estimates provides a way to take a different approach. What is that approach? Let's dive right in!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-no-estimates"&gt;
  &lt;/a&gt;
  What is no estimates?
&lt;/h3&gt;

&lt;p&gt;One of the agile principles is to respond to change over following a plan. But in reality, how many times have you been in a longer project, where you were asked to estimate all stories so Management or a Product owner would get a good grasp on how long a project would take? While the first stories you would actually work on might have a semi-accurate estimation, but how accurate are your estimates really for stories that you will not pick up for another 2 months, with all kinds of lessons learned before you get there?&lt;/p&gt;

&lt;p&gt;The idea with no estimates is to stop estimating your stories. At first, this thought had me a bit skeptical. How can this possibly work? How can we possibly be on a steady pace if we don't somehow can point that an "8 story pointer" is much more complicated than just a 1 story point ticket?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-estimates-in-practice"&gt;
  &lt;/a&gt;
  No Estimates in practice
&lt;/h3&gt;

&lt;p&gt;In this great talk by Allen Holub, he shares how he tackles to use it in practice.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/QVBlnCTu9Ms"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The approach they take is to count the stories. Make sure your stories are small enough and give them 1 story point as an estimation. This might feel contradicting, but the data shows this is more accurate than using the Fibonacci sequence for estimating.&lt;/p&gt;

&lt;p&gt;This means you no longer have to spend time as a team to estimate stories, that end up being wrong in the end. The way you calculate velocity can still be used in the same way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#obstacles-to-overcome"&gt;
  &lt;/a&gt;
  Obstacles to overcome
&lt;/h3&gt;

&lt;p&gt;The reason estimates exist in the first place is because estimating in time was not accurate but usually, people in the business need it for their planning. No Estimates can feel a bit controversial, and managers can panic if they no longer have the influence on their planning.&lt;/p&gt;

&lt;p&gt;If you are lucky enough to have Management that is willing to listen to the positives, go ahead! If you are unlucky, you might need to pitch the idea more often, or maybe put on your bad-ass hat, and just go for an experiment of a couple of sprints and present the results afterward.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;No estimates are a great way to reduce time spent in planning. Estimations are often wrong and very hard to get accurate. So why not eliminate the need for them? No Estimates offers a good alternative for estimations. Try to get a more accurate picture of work, and not use a method that is known to be less effective.&lt;/p&gt;

&lt;p&gt;The concept might seem radical or idealogic to some people, and one of the downsides is that Managers with control tendencies will likely be difficult to convince to give this a try.&lt;/p&gt;

&lt;p&gt;If you are interested in reading more of my content, I can recommend checking &lt;a href="https://blog.jellesmeets.nl/articles/the-importance-of-off-screen-hobbies/"&gt;The importance of off-screen hobbies&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>agile</category>
      <category>productivity</category>
      <category>discuss</category>
      <category>career</category>
    </item>
    <item>
      <title>Progressing from a beginner to intermediate developer</title>
      <author>npm run dev</author>
      <pubDate>Mon, 20 Sep 2021 08:14:04 +0000</pubDate>
      <link>https://dev.to/npmrundev/progressing-from-a-beginner-to-intermediate-developer-2jk1</link>
      <guid>https://dev.to/npmrundev/progressing-from-a-beginner-to-intermediate-developer-2jk1</guid>
      <description>&lt;p&gt;So, you're not a complete beginner anymore: You've built a few webpages, learned the basics of HTML, CSS and JS, and perhaps you've landed a job as a junior developer.&lt;/p&gt;

&lt;p&gt;What now?&lt;/p&gt;

&lt;p&gt;There is a hell of a lot of information online about what you should do as a beginner just starting out, but the roadmap becomes less clear once you've got a handle on the basics. It's not for lack of content: there are plenty of guides out there for all skill levels. Rather, the sheer amount of information, tutorials, opinions and technologies makes it impossible to know which route to go down.&lt;/p&gt;

&lt;h2&gt;Building a strong foundation&lt;/h2&gt;

&lt;p&gt;Your route to improvement will generally depend on what you want to do. With that said, you can't go wrong with simply improving your fundamental skills. Let's say you want to eventually be a React developer: Yes, learning React now would certainly get you into the ecosystem faster, but ignoring what React is built on - plain old JavaScript - can limit you in future. If you want to raise the ceiling of your potential skill level, learning the ins and outs of the base language is the way to go. You will end up with more clean, intentional code that you understand completely, and spend less time figuring out why it's not working straight away. Don't feel like you can't experiment with different technologies: Learning SASS, for example, isn't so far off CSS that it can't teach you the basics while also gaining the benefit of a preprocessor. React is still just JavaScript under the hood. You'll get the best results by pushing yourself out of your comfort zone just enough to make sure you're learning at a steady rate, while also making sure you give yourself enough time to soak in all the information.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lVlwui6k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://npmrundev.files.wordpress.com/2021/09/pyramid.jpg%3Fw%3D480" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lVlwui6k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://npmrundev.files.wordpress.com/2021/09/pyramid.jpg%3Fw%3D480" alt=""&gt;&lt;/a&gt;Everything is built on core skills&lt;/p&gt;

&lt;p&gt;If you want to be a frontend at an agency, master basic CSS and fully understand what each line of your CSS is doing. If you're a backend developer, wrap your head around the key concepts and build as much as possible yourself before reaching for a framework. If you'd rather be making frontend apps in the future, get to grips with vanilla JavaScript - ignore jQuery and any flashy framework for now. Of course, feel free to dip your toes - but remember that learning programming is a life's work, and building upwards with a poor foundation will reflect in the quality of your work.&lt;/p&gt;

&lt;p&gt;Bear in mind that I'm a frontend, and this advice is generally geared towards other frontends. I don't think everyone should aim to become a full-stack developer; however, I think it's worth everyone having some awareness of the entire ecosystem, as even a little experience will make it easier to work in teams.&lt;/p&gt;

&lt;p&gt;Don't take this list as the be-all and end-all to improving: how you improve depends on what you want to do. However, these are some areas that most developers could learn from in some way.&lt;/p&gt;

&lt;h2&gt;1. CSS organisation&lt;/h2&gt;

&lt;p&gt;It's not sexy, but poor CSS organisation is the most prevalent cause of headaches in web development.&lt;/p&gt;

&lt;p&gt;How many times have you gone to change a class only to realise it's affected elements across the whole website? Or changed some HTML very slightly, only for the whole component to break?&lt;/p&gt;

&lt;p&gt;Methodologies exist as an attempt to systematically avoid these types of issues. By following a particular syntax when writing CSS classes and following a set of rules, we can filter out most of the common problems and allow ourselves to just focus on building stuff.&lt;/p&gt;

&lt;p&gt;Oddly, most of these methodologies aim to make you use less of certain features in CSS. While it's a decent language, most devs know that CSS can be a chaotic language. Even between different methodologies, each has their own rules and situations where they work best.&lt;/p&gt;

&lt;p&gt;Being aware of a variety of these methodologies allows you to easy fit into any team easily, but it also gives inspiration for further refining your CSS development. And above all, you'll have less headaches! No methodology is perfect, so sometimes you'll want to adapt your method for a certain project. CSS organisation is far from a 'solved' problem, as the flexibility of the languages allows plenty of room for new approaches.&lt;/p&gt;

&lt;p&gt;Utility-first frameworks have become very popular lately, especially amongst React and Vue developers. I've written quite a bit about &lt;a rel="noreferrer noopener" href="https://npmrundev.wordpress.com/2021/08/04/6-reasons-to-use-tailwind-over-traditional-css/"&gt;Tailwind CSS&lt;/a&gt;, which is just one flavour of the utility-first ideology, but I wouldn't recommend any beginner to jump into a framework such as Tailwind, Bootstrap or anything that packages CSS classes for you until you deeply understand vanilla CSS and SCSS. If you want to give it a go, try to think about &lt;a href="https://npmrundev.wordpress.com/2021/08/05/8-ways-to-keep-tailwind-dry/"&gt;how to keep your CSS DRY&lt;/a&gt; using these technologies.&lt;/p&gt;

&lt;h2&gt;2. Go CSS-only&lt;/h2&gt;

&lt;p&gt;Here's a fun exercise: build a functional navigation, with hamburger button and multi-level sliding mobile menu without a single line of JavaScript. It doesn't really matter how it looks, just that it functions as you'd expect a mobile nav to. It's surprising how much use you can squeeze out of plain old CSS for simple things such as toggling a 'class'. You can use sibling selectors &lt;code&gt;~&lt;/code&gt; or &lt;code&gt;+&lt;/code&gt; alongside &lt;code&gt;checkbox:checked&lt;/code&gt; to create toggles and trigger them using a &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;CSS is much more performant than JavaScript, so while you shouldn't go overboard with these hacks it's good to be aware of performance shortcuts like these. In general, even if JavaScript is unavoidable a good rule is to keep it as minimal as possible without affecting functionality. Usually the simpler something is, the less there is that can go wrong with it. A common example is hover states: You COULD use the &lt;code&gt;mouseover&lt;/code&gt; event to add a class that makes a dropdown visible, but in most cases there's no need as you could use a nested hover state which would be easier on the user's hardware.&lt;/p&gt;

&lt;p&gt;How about no images? The &lt;code&gt;background&lt;/code&gt; property is surprisingly powerful: it can be used to create complex shapes similar to SVG. &lt;a rel="noreferrer noopener" href="https://dev.to/alvaromontoro"&gt;Alvaro Montoro&lt;/a&gt; even created &lt;a href="https://dev.to/alvaromontoro/homer-simpson-in-css-with-a-single-html-element-4ood" rel="noreferrer noopener"&gt;Homer Simpson using just one element.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;3. Single source of truth&lt;/h2&gt;

&lt;p&gt;In all your programming, you should aim to have a single source of truth for everything. This is the core idea behind DRY - Don't Repeat Yourself - programming. In order to not repeat yourself, you need to define everything only once. This plays out in different ways depending on the context.&lt;/p&gt;

&lt;p&gt;In CSS, you want to store all the values that appear time and time again in variables. Colors, fonts, max-widths, even spacing such as padding or margins are all properties that tend to be consistent across an entire project. You can often define variables for a stylesheet based on the brand guidelines, if you have access. Otherwise it's a good idea to go through the site designs and define your variables before starting.&lt;/p&gt;

&lt;p&gt;In JavaScript, every function you write should only appear once. If you need to reuse it in a different place, isolate it from the context you're working in by putting it into it's own file. You'll often see a &lt;code&gt;util&lt;/code&gt; folder in JavaScript file structures - generally this is where you'll find more generic functions used across the app.&lt;/p&gt;

&lt;p&gt;Variables can also be sources of truth. It's a good idea to put global constants - variables that will never change that are used across the app - into their own file for organisation. Some developers name global constants with &lt;code&gt;CAPITALISED_SNAKE_CASE&lt;/code&gt; to differentiate them from regular variables.&lt;/p&gt;

&lt;p&gt;In a similar vein, get used to using environment variables. These are global constants that change depending on the environment: Say you have a 'development' API for testing and a 'live' API for production - you can define both in separate files, and when the time comes to build your app you can ask it to build for either a 'development' or a 'production' environment. This means you don't need to change a load of variables when releasing an app - super helpful!&lt;/p&gt;

&lt;h2&gt;3. Go vanilla&lt;/h2&gt;

&lt;p&gt;Forget jQuery or any other libraries you might normally reach for. Try building your sites using no external packages, just vanilla JS. Feel free to compile your ES6/7 if you need to, but that's it.&lt;/p&gt;

&lt;p&gt;You'll find this difficult at first, but eschewing 3rd-party code forces you to learn how every piece of your application works. Focus on creating reusable utilities for things such as selecting elements, manipulating the DOM, and handling requests.&lt;/p&gt;

&lt;p&gt;Development will be slow, but the goal isn't to build things quickly: Rather, you should spend plenty of time on the research to get these things to understand the building blocks of your craft.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S9w3Iv3k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://npmrundev.files.wordpress.com/2021/09/5ng2dq.jpg%3Fw%3D513" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S9w3Iv3k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://npmrundev.files.wordpress.com/2021/09/5ng2dq.jpg%3Fw%3D513" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn string and array methods, how to work with objects, using Promises and so on. Doing daily exercises with a service such as &lt;a rel="noreferrer noopener" href="https://exercism.org/tracks/javascript/exercises"&gt;Exercism&lt;/a&gt; is a great way to learn each method, but using them in context is what will take you from beginner to expert level. You'll see that there are many ways to skin a cat, and how you choose to solve a particular problem will depend on the situation as well as (to an extend) your personal style. For example, some people prefer to handle promises using &lt;code&gt;.then().catch()&lt;/code&gt;, but I would always use &lt;code&gt;async/await&lt;/code&gt; as I find the syntax much tidier. There are people who will argue you should use x over y, but it's a good idea to understand every possible way of doing something since you don't know if you'll be dropped into a project with legacy code or if the previous developer just had a different way of doing things.`&lt;/p&gt;

&lt;p&gt;How about building your own reactive framework? &lt;a rel="noreferrer noopener" href="https://www.youtube.com/watch?v=f2mMOiCSj5c"&gt;Watch Tejas Kumar's fantastic talk&lt;/a&gt; about creating a rudimentary React clone. You don't need to build it, just try to understand it. You'll find that the technologies you use every day, while undoubtedly complex, aren't so impossible to understand as they first appear.&lt;/p&gt;

&lt;h2&gt;4. Manage your own server&lt;/h2&gt;

&lt;p&gt;Although DevOps and servers can be scary to a beginner, having a small server to mess around with will help to introduce you without any pressure. Start small and build up: You don't need to learn everything straight away: exposure to concepts and configurations surrounding your server will gradually engrain the knowledge in your head.&lt;/p&gt;

&lt;p&gt;Even if you're solely a frontend or aren't interested in running your own websites, understanding things like htaccess, robots.txt and deployment pipelines will make you much more desirable to employers. You will almost definitely need to deploy to a server at some point, so getting the learning in ahead of time will put you a step ahead of the competition. Having a platform to showcase your ideas opens up limitless possibilities, improves your knowledge, and it's just good fun.&lt;/p&gt;

&lt;h2&gt;5. Learn regex&lt;/h2&gt;

&lt;p&gt;Learning the regex for your language of choice opens up a &lt;a rel="noreferrer noopener" href="https://blog.katherinempeterson.com/practical-applications-for-regex"&gt;whole host of opportunities&lt;/a&gt; including web scraping, which allows you to use any web page as your data source. It also allows you to write complicated logic for strings, such as validating form content, with much more brevity than when using string functions. Regex is commonly used for verifying the format of strings, for example ensuring a phone number is the correct length or a postcode/zip code is in the right format.&lt;/p&gt;

&lt;p&gt;To get you started, here's a quick rundown of a pattern I use constantly in JavaScript (syntax may change depending on language). &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// replace 'tag' with your html tag of choice
/&amp;lt;tag(.*?)&amp;gt;|&amp;lt;\/tag&amp;gt;/gi&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use &lt;code&gt;(.*?)&lt;/code&gt; to create a capture group that will match any content between the string to the left and right of it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;() - creates a capture group
.  - matches any single character
*  - matches the previous character infinitely e.g. 'heel'.match(/e*/) = 'ee'
?  - tells * to match the minimum number of times. You might not need this!
|  - 'or' operator&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows you to find all instances of a particular HTML tag, regardless of the attributes assigned to it. This is really helpful for finding and replacing in your IDE, and can be adapted to fit your specific needs.&lt;/p&gt;

&lt;p&gt;You could include another capture group to match the entire element instead of just the tags:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;'&amp;lt;div class="something"&amp;gt;Some content&amp;lt;/div&amp;gt;'.match(/&amp;lt;div(.*?)&amp;gt;(.*?)&amp;lt;\/div&amp;gt;/gi) // matches&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From here, you can go further and find all tags containing a certain class or attribute, capture the innerHtml of all tags with a certain class, find and replace all instances of a particular class to change it from a link to a button, you get the idea... You can do a lot with regex.&lt;/p&gt;

&lt;p&gt;I recommend MDN's (javascript) &lt;a rel="noreferrer noopener" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Cheatsheet"&gt;cheat sheet&lt;/a&gt; and regex101's &lt;a rel="noreferrer noopener" href="https://regex101.com/"&gt;Regex Tester&lt;/a&gt; to get you started.&lt;/p&gt;

&lt;h2&gt;6. Don't get stuck in your ways&lt;/h2&gt;

&lt;p&gt;The most important thing to remember to stay competitive as a developer, is that the industry is constantly changing. There are new ideas and technologies appearing every day. Although you shouldn't be distracted by these new things, as they come just as often as they go, it's good to have some awareness of what your industry is using so you don't fall too far behind. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DeulPMvR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://npmrundev.files.wordpress.com/2021/09/19fq7c002w021.png%3Fw%3D1017" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DeulPMvR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://npmrundev.files.wordpress.com/2021/09/19fq7c002w021.png%3Fw%3D1017" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's also important to accept that even if you believe in a certain way of doing something, there might be something that comes along to solve your problem even more effectively. It's good to have opinions, but many developers fall into the trap of believing that &lt;em&gt;their&lt;/em&gt; way is the best way. &lt;/p&gt;

&lt;p&gt;Programming is far from cut-and-dry: Everything has it's upsides and downsides. Every project has it's own needs, and the same technology or approach isn't always best for all of them.&lt;/p&gt;

&lt;h2&gt;7. Be business-aware&lt;/h2&gt;

&lt;p&gt;We all love to code, but at the end of the day most of us do this to pay the bills. We're (aside from freelancers and hobbyists) employed by businesses with clients, deadlines and budgets, and our performance in delivering projects is what reflects us more than the quality of our code - although high-quality code will generally make delivery go much smoother. &lt;/p&gt;

&lt;p&gt;Becoming a mid-level or even senior developer is as much about what you know as it is about the responsibility you can take on and your commitment to delivering the best you reasonably can in the time you're given. If you create the best damn website the world has ever seen, but it's a month late, it won't reflect on you well. Sometimes you will need to find shortcuts or outright cut things out of a project: At the end of the day, your company only has a limited budget they can spend before they start to make a loss.&lt;/p&gt;

&lt;p&gt;Senior developers are paid what they're paid because they're reliable. Yes, they can solve problems faster and know a hell of a lot, but they will also do what it takes to deliver a project on time. They understand which technologies and approaches will fit the needs of a project without being overkill, taking too much time or requiring too much custom code.&lt;/p&gt;

&lt;p&gt;This isn't the most exciting or inspiring part of being a developer, but it's what the people who pay you will notice more than how efficient a function you wrote is.&lt;/p&gt;

&lt;h2&gt;8. Be patient, and practise often&lt;/h2&gt;

&lt;p&gt;I'm a big fan of the phrase, "you don't know what you don't know". Progamming is a long game: it takes years to become a truly competent developer, and the more you know the more you realise you &lt;em&gt;don't&lt;/em&gt; know very much at all. Have humility, and just keep on building things. Push yourself further each time, try new things and refine your techniques. Forget about the destination and focus on the journey.&lt;/p&gt;

&lt;p&gt;Eventually you will have some idea, or you'll start a project, and notice how much better you code is without even needing to think about it. You'll have the knowledge engrained into your head enough that problem solving becomes trivial, and you can use the freed-up brain power to tackle even greater problems. Be persistent but patient, and you will become a great developer right under your own nose.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>In the mist of the Big Data Hype, Let’s Discuss MySQL</title>
      <author>veerreshr</author>
      <pubDate>Mon, 20 Sep 2021 07:57:56 +0000</pubDate>
      <link>https://dev.to/veerreshr/in-the-mist-of-the-big-data-hype-let-s-discuss-mysql-dbm</link>
      <guid>https://dev.to/veerreshr/in-the-mist-of-the-big-data-hype-let-s-discuss-mysql-dbm</guid>
      <description>&lt;p&gt;Hey all 👋,&lt;/p&gt;

&lt;p&gt;Hope you all doing great and today we gonna discuss few MySQL topics that are often ignored or say it advanced. &lt;/p&gt;

&lt;p&gt;To whom this blog is intended for? Absolute beginners? Intermediates ? Yes for both of them , A Basic SQL knowledge is sufficient to understand.&lt;/p&gt;

&lt;p&gt;Lets get started 🚀🚀 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents-"&gt;
  &lt;/a&gt;
  Table of contents :
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#case-statements"&gt;CASE Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ifnull"&gt;IFNULL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#coalesce"&gt;COALESCE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#stored-procedure"&gt;Stored Procedure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#window-functions"&gt;Window Functions&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#rank"&gt;RANK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#denserank"&gt;DENSE_RANK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rownumber"&gt;ROW_NUMBER&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#case-statements"&gt;
  &lt;/a&gt;
  CASE Statements
&lt;/h2&gt;

&lt;p&gt;These are similar to if-else statements, The CASE statement goes through a list of conditions and returns the result corresponding to first condition that is true. If none of conditions are met it returns the result from else statement.&lt;/p&gt;

&lt;p&gt;Syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CASE&lt;/span&gt;
    &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="n"&gt;condition1&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="n"&gt;result1&lt;/span&gt;
    &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="n"&gt;condition2&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="n"&gt;result2&lt;/span&gt;
    &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="n"&gt;conditionN&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="n"&gt;resultN&lt;/span&gt;
    &lt;span class="k"&gt;ELSE&lt;/span&gt; &lt;span class="k"&gt;result&lt;/span&gt;
&lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;CASE&lt;/span&gt;
   &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="n"&gt;follower_count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="nv"&gt;"Celebrity"&lt;/span&gt;
   &lt;span class="k"&gt;ELSE&lt;/span&gt; &lt;span class="nv"&gt;"Poor Regular User"&lt;/span&gt;
&lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;"User Type"&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;user_table&lt;/span&gt;

&lt;span class="cm"&gt;/* No Celebrities are harmed in making of this code */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above statement returns the user type based on his follower count. If it is more than 100 followers then returns "Celebrity" else returns as "Poor Regular User"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ifnull"&gt;
  &lt;/a&gt;
  IFNULL
&lt;/h2&gt;

&lt;p&gt;This function takes 2 Arguments, if the first argument is NULL, it returns second argument. &lt;/p&gt;

&lt;p&gt;Usually used to replace a NULL value with a default value while displaying the data.&lt;/p&gt;

&lt;p&gt;Syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="n"&gt;IFNULL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alternate_value&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;IFNULL&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;user_table&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If value from amount column is null then 0 is returned in place of null value&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#coalesce"&gt;
  &lt;/a&gt;
  COALESCE
&lt;/h2&gt;

&lt;p&gt;This function takes 2 or more arguments and It works similar to IFNULL, but returns the first Non NULL argument among the list of arguments, if every argument is NULL then it returns NULL.&lt;/p&gt;

&lt;p&gt;Syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="n"&gt;CAOLESCE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argument_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argument_2&lt;/span&gt;&lt;span class="p"&gt;....,&lt;/span&gt; &lt;span class="n"&gt;argument_n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;CAOLESCE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phonenumber_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;phonenumber_2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;phone&lt;/span&gt; &lt;span class="n"&gt;number_3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;user_table&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If phone number 1 is null then it checks for phone number 2, even if it is null then it returns phone number 3&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stored-procedure"&gt;
  &lt;/a&gt;
  Stored Procedure
&lt;/h2&gt;

&lt;p&gt;A stored procedure is a group of SQL statements that has been created and stored in the database.&lt;/p&gt;

&lt;p&gt;It accepts input parameters so that only one procedure can be used on the network by multiple clients using different input data.&lt;/p&gt;

&lt;p&gt;Syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="c1"&gt;--For creating procedure&lt;/span&gt;
&lt;span class="k"&gt;DELIMITER&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;PROCEDURE&lt;/span&gt; &lt;span class="n"&gt;procedure_name&lt;/span&gt; &lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;OUT&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;INOUT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Parameter_name&lt;/span&gt; &lt;span class="n"&gt;datatype&lt;/span&gt; &lt;span class="p"&gt;]...&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;BEGIN&lt;/span&gt;
   &lt;span class="n"&gt;sql_statements&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;END&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class="k"&gt;DELIMITER&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;-- The delimiter is used to differentiate between the end of the procedure and the sql statements.&lt;/span&gt;

&lt;span class="k"&gt;For&lt;/span&gt; &lt;span class="n"&gt;executing&lt;/span&gt; &lt;span class="k"&gt;procedure&lt;/span&gt;
&lt;span class="k"&gt;CALL&lt;/span&gt; &lt;span class="n"&gt;procedure_name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="c1"&gt;--Creating getvalues procedure which prints out data in users_table when called&lt;/span&gt;
&lt;span class="k"&gt;DELIMITER&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;PROCEDURE&lt;/span&gt; &lt;span class="n"&gt;getvalues&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;BEGIN&lt;/span&gt;
  &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;users_table&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class="k"&gt;DELIMITER&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;-- calling procedure&lt;/span&gt;
&lt;span class="k"&gt;CALL&lt;/span&gt; &lt;span class="n"&gt;getvalues&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#window-functions-available-only-for-mysql-8-"&gt;
  &lt;/a&gt;
  Window Functions (Available only for MySQL 8 +)
&lt;/h2&gt;

&lt;p&gt;Window functions perform calculations on a set of rows that are related together. These related rows are termed as windows.&lt;/p&gt;

&lt;p&gt;They Do not merge the rows like GROUP BY, they preserve the existing data.&lt;/p&gt;

&lt;p&gt;Mainly there are 3 Categories of window functions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Aggregate Window Functions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SUM(), MAX(), MIN(), AVG(). COUNT()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ranking Window Functions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;RANK(), DENSE_RANK(), ROW_NUMBER(), NTILE()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Value Window Functions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;LAG(), LEAD(), FIRST_VALUE(), LAST_VALUE()&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="n"&gt;window_function&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;column1&lt;/span&gt;&lt;span class="p"&gt;....])&lt;/span&gt; &lt;span class="n"&gt;OVER&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="n"&gt;PARTITION&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;partition_list&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;order_list&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;-- [] = contents inside square brackets are optional&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rank"&gt;
  &lt;/a&gt;
  RANK
&lt;/h3&gt;

&lt;p&gt;This function will assign rank to each row within a partition, if there is a tie between the values then they will be assigned same rank and the next rank will be ( previous rank + no of previous duplicates )&lt;/p&gt;

&lt;p&gt;Example rank sequence : 1 2 2 4 5 5 7&lt;/p&gt;

&lt;p&gt;Example :&lt;/p&gt;

&lt;p&gt;First, lets see what's there in the table&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WF0GHKL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ril0uqn9rwcxfg8ytij4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WF0GHKL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ril0uqn9rwcxfg8ytij4.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now lets execute the RANK query&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RANK&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;OVER&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;marks&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;"Rank"&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z1MMAWDm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vqs2t42jk1q1mqnweom.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z1MMAWDm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vqs2t42jk1q1mqnweom.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can now see the result is sorted and every person is given a rank value, though the rank is not continuous at row with name vikram&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#denserank"&gt;
  &lt;/a&gt;
  DENSE_RANK
&lt;/h3&gt;

&lt;p&gt;Did you notice discontinuity in rank values when using RANK? Dense Rank does the same thing as RANK but with no discontinuity in rank values.&lt;/p&gt;

&lt;p&gt;Considering the same above example, lets execute dense query and see the result&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DENSE_RANK&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;OVER&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;marks&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;"Dense Rank"&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7pvuHmDY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/khnmon0ja047h9j4u7sg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7pvuHmDY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/khnmon0ja047h9j4u7sg.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
You can now observe no discontinuity of rank values at row with name as vikram&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#rownumber"&gt;
  &lt;/a&gt;
  ROW_NUMBER
&lt;/h3&gt;

&lt;p&gt;This function is used to give sequential number for each row within its partition.&lt;/p&gt;

&lt;p&gt;Lets have a look at the table data before executing the ROW_NUMBER query&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vqWU2ZsM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yiusqilg2q1vx2o47345.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vqWU2ZsM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yiusqilg2q1vx2o47345.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
You can see students from different departments, using ROW_NUMBER function we can assign each row a sequential number starting from 1 based on department( dept ) he is from.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ROW_NUMBER&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;OVER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PARTITION&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;dept&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="nv"&gt;"row number"&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ifj_fLEV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/btnluvfwcx9f3qgwxlio.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ifj_fLEV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/btnluvfwcx9f3qgwxlio.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
You can observe each row of a particular department is given a sequential row number, this is what ROW_NUMBER function can do.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#good-bye"&gt;
  &lt;/a&gt;
  Good Bye👋
&lt;/h2&gt;

&lt;p&gt;That's it for the blog, these are my 2 cents about some tricky SQL concepts. For more information on concepts, you can refer to &lt;a href="https://www.javatpoint.com/mysql-tutorial"&gt;javapoint&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you got to learn something new and will be able to do better with MySQL. If there are any further questions please feel free to ask.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pt0OH8EB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/trGtPJai2xwI/giphy.gif%3Fcid%3Decf05e47kgg2oxwnr2o5nz95ypd3z8omx6r3u18p72ybvuo1%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pt0OH8EB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/trGtPJai2xwI/giphy.gif%3Fcid%3Decf05e47kgg2oxwnr2o5nz95ypd3z8omx6r3u18p72ybvuo1%26rid%3Dgiphy.gif%26ct%3Dg" alt="Bye Bye"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>sql</category>
      <category>mysql</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
