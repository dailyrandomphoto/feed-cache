<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>5 Visual Studio Extensions you Definitely need as a .NET Developer</title>
      <author>Dotnetsafer</author>
      <pubDate>Tue, 16 Nov 2021 16:34:33 +0000</pubDate>
      <link>https://dev.to/dotnetsafer/5-visual-studio-extensions-you-definitely-need-as-a-net-developer-3hdh</link>
      <guid>https://dev.to/dotnetsafer/5-visual-studio-extensions-you-definitely-need-as-a-net-developer-3hdh</guid>
      <description>&lt;p&gt;If you use Visual Studio every day (like me), these extensions &lt;strong&gt;would help you develop faster&lt;/strong&gt; and make your workflow better than it is now. I've used them for a long time and &lt;strong&gt;highly recommend them.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Although Visual Studio is very complete, &lt;strong&gt;it doesn't cover all needs.&lt;/strong&gt; I particularly like working with .NET and there will always be small parts that we will need to cover with other tools. I researched and tested &lt;strong&gt;the most recent and amazing extensions,&lt;/strong&gt; and these are the greatest ones for 2022 👇&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ndepend"&gt;
  &lt;/a&gt;
  NDepend
&lt;/h2&gt;

&lt;p&gt;NDepend is my favorite &lt;strong&gt;.NET code analyzer.&lt;/strong&gt; It generates browsable reports with objective metrics about the quality of the analyzed code. &lt;strong&gt;Each metric is documented, monitorable and editable.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The tool also evaluates the &lt;strong&gt;technical debt&lt;/strong&gt; of the project in development-days and hours: you can create an history of metrics and evaluate your progress, whether or not the added code has generated more technical debt.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V628dVbZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1200/1%2AGfP0E56rw6NSA_CpI2KNCw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V628dVbZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1200/1%2AGfP0E56rw6NSA_CpI2KNCw.gif" alt="ndepend visual studio extension" width="600" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main functions are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Alert you about code that is essential to fix&lt;/strong&gt; before sending the application to production.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Detect the most complex parts of the application&lt;/strong&gt; so that you pay more attention to them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Help you to &lt;strong&gt;manage legacy code.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Generate an objective estimation of the technical debt of the project&lt;/strong&gt; and monitors it over time as you add more code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Generates visual graphs&lt;/strong&gt; of project dependencies.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Visual Studio&lt;/strong&gt; integration, &lt;strong&gt;Azure DevOps&lt;/strong&gt; integration and &lt;strong&gt;Reporting&lt;/strong&gt; within &lt;strong&gt;CI/CD&lt;/strong&gt; integration.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xk9e2ahH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/900/1%2AhGE2wJeQ7wONNXN8hV6TEA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xk9e2ahH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/900/1%2AhGE2wJeQ7wONNXN8hV6TEA.gif" alt="download ndepend for visual studio" width="600" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-ndepend-for-visual%C2%A0studio"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.ndepend.com/download"&gt;📦Get NDepend for Visual Studio&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#visual-assist"&gt;
  &lt;/a&gt;
  Visual Assist
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Visual Assist&lt;/strong&gt; is an extension developed by Whole Tomato Software. The extension primarily enhances &lt;strong&gt;IntelliSense&lt;/strong&gt; and &lt;strong&gt;syntax highlighting.&lt;/strong&gt; It also enhances code suggestions, provides refactoring commands, and includes spell checking support for comments. It can also &lt;strong&gt;detect basic syntax mistakes&lt;/strong&gt; such as use of undeclared variables.&lt;/p&gt;

&lt;p&gt;This extension also has built-in &lt;strong&gt;support for Unreal Engine&lt;/strong&gt; with new features that run faster, allowing you to save a lot of time when developing games.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--liPzG-UA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1200/1%2AuZqqpTx__MP-ezzzZ3L8gg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--liPzG-UA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1200/1%2AuZqqpTx__MP-ezzzZ3L8gg.gif" alt="download visual assist extension for visual studio" width="600" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main features are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Refactoring&lt;/strong&gt; and improve code readability.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Generate code quickly&lt;/strong&gt; with commands.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Debug assistance&lt;/strong&gt; in Visual Assist.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Code &lt;strong&gt;mistakes correction.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#get-visual-assist-for-visual%C2%A0studio"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=WholeTomatoSoftware.VisualAssist"&gt;📦Get Visual Assist for Visual Studio&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#codemaid"&gt;
  &lt;/a&gt;
  CodeMaid
&lt;/h2&gt;

&lt;p&gt;I love the simplicity of this extension. CodeMaid is just a Visual Studio extension which has been installed over two million times. &lt;strong&gt;It allows you to clean up and simplify the code.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It &lt;strong&gt;reorganizes the code&lt;/strong&gt; of a class based on the StyleCop specifications. If we then run the StyleCop analysis, we will see that &lt;strong&gt;it takes a lot of work off the top.&lt;/strong&gt; The main features are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Code &lt;strong&gt;cleaning.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Code &lt;strong&gt;reorganizing.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Visualizing&lt;/strong&gt; and &lt;strong&gt;navigating&lt;/strong&gt; through your code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Comment&lt;/strong&gt; formatting.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dZ4c-4l2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/900/1%2AROWP20NtzagSMrCcSySB8Q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dZ4c-4l2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/900/1%2AROWP20NtzagSMrCcSySB8Q.gif" alt="Download CodeMaid extension for visual studio" width="600" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It also has the ability to &lt;strong&gt;switch between related files&lt;/strong&gt;, the most usual thing we usually do when editing WPF between &lt;em&gt;XAML&lt;/em&gt; and &lt;em&gt;XAML.cs.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-codemaid-for-visual%C2%A0studio"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=SteveCadwallader.CodeMaid"&gt;📦Get CodeMaid for Visual Studio&lt;/a&gt;
&lt;/h3&gt;




&lt;h3&gt;
  &lt;a href="#vs-color%C2%A0output"&gt;
  &lt;/a&gt;
  VS Color Output
&lt;/h3&gt;

&lt;p&gt;Best for customization. VSColorOutput &lt;strong&gt;can change the color of a line emitted to the output window based on specified rules.&lt;/strong&gt; The rules consist of regular expressions. Rules map to classifications which in turn map to colors.&lt;/p&gt;

&lt;p&gt;It hooks into the classifier chain of Visual Studio. This allows VSColorOutput to &lt;strong&gt;monitor every line sent to the output window&lt;/strong&gt;. A list of classifiers, consisting of regular expressions and classifications is checked. The first matching expression determines the classification. If no patterns match, then the line is classified as &lt;strong&gt;BuildText.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8TPgS9ln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1200/1%2A7B9WZOESPumJzLeZXLUW1Q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8TPgS9ln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1200/1%2A7B9WZOESPumJzLeZXLUW1Q.gif" alt="Download VS Color Output extension for Visual Studio" width="600" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other features are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Stop Build&lt;/strong&gt; On First Error.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Show &lt;strong&gt;Elapsed Build Time.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Show &lt;strong&gt;Debug Window&lt;/strong&gt; when Debug Starts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Per Solution&lt;/strong&gt; Settings.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From here, Visual Studio does the heavy lifting of mapping the classification to a color. Settings are stored in a separate file: &lt;code&gt;%AppData%/VSColorOutput/vscoloroutput.json&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-vs-color-output-for-visual%C2%A0studio"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=MikeWard-AnnArbor.VSColorOutput"&gt;📦Get VS Color Output for Visual Studio&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#resharper"&gt;
  &lt;/a&gt;
  Resharper
&lt;/h2&gt;

&lt;p&gt;ReSharper is a &lt;strong&gt;popular extension for Visual Studio. It automates the majority of the things&lt;/strong&gt;, you can automate in your code procedures. It detects and corrects compiler errors, runtime problems, and redundancies as you type, and makes intelligent modifications for them.&lt;/p&gt;

&lt;p&gt;It &lt;strong&gt;supports with code exploration&lt;/strong&gt; by showing file structure, type and style hierarchies, call and value chains, and project dependencies. It &lt;strong&gt;enables you to quickly browse your whole solution&lt;/strong&gt; and navigate to the precise file and line you're searching for, decompiling library code as needed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AAi2TCIt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6xmuoetdhi1p368t3kfb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AAi2TCIt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6xmuoetdhi1p368t3kfb.gif" alt="Download Resharper extension for Visual Studio" width="600" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You may &lt;strong&gt;examine software with ReSharper by visualizing file composition&lt;/strong&gt;, category and design hierarchies, call and value chains, and project dependencies. It allows you to quickly cross your whole solution and go to the exact folder and line you're looking for. If necessary, &lt;strong&gt;it also decompiles library code.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-resharper-for-visual%C2%A0studio"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=JetBrains.ReSharper"&gt;📦Get Resharper for Visual Studio&lt;/a&gt;
&lt;/h3&gt;




&lt;p&gt;In conclusion, &lt;strong&gt;Visual Studio is a perfect standard code editor&lt;/strong&gt;, but if you spend some time customizing it through its extensions, you will be able to get the most out of the editor and, most importantly, you will be able to squeeze and &lt;strong&gt;optimize your software development time to the maximum.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>visualstudio</category>
      <category>vscode</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>1 line of code: How to clean an Array
</title>
      <author>martin krause</author>
      <pubDate>Tue, 16 Nov 2021 16:29:26 +0000</pubDate>
      <link>https://dev.to/martinkr/1-line-of-code-how-to-clean-an-array-82a</link>
      <guid>https://dev.to/martinkr/1-line-of-code-how-to-clean-an-array-82a</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;boolean&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Returns an array without &lt;code&gt;empty strings&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt; items.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-repository-amp-npm-package"&gt;
  &lt;/a&gt;
  The repository &amp;amp; npm package
&lt;/h2&gt;

&lt;p&gt;You can find the all the utility functions from this series at &lt;a href="https://github.com/martinkr/onelinecode"&gt;github.com/martinkr/onelinecode&lt;/a&gt;&lt;br&gt;
The library is also published to &lt;a href="https://www.npmjs.com/package/@onelinecode/onelinecode"&gt;npm as @onelinecode&lt;/a&gt; for your convenience.&lt;/p&gt;

&lt;p&gt;The code and the npm package will be updated every time I publish a new article.&lt;/p&gt;




&lt;p&gt;Follow me on &lt;a href="http://twitter.com/_martinkr"&gt;Twitter: @martinkr&lt;/a&gt; and consider to &lt;a href="https://www.buymeacoffee.com/martinkr"&gt;buy me a coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@zoo_monkey"&gt;zoo_monkey&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fuji"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Calling JavaScript functions from DotVVM with JS Directive</title>
      <author>Daniel Gomez Jaramillo</author>
      <pubDate>Tue, 16 Nov 2021 16:23:41 +0000</pubDate>
      <link>https://dev.to/esdanielgomez/calling-javascript-functions-from-dotvvm-with-js-directive-1ci0</link>
      <guid>https://dev.to/esdanielgomez/calling-javascript-functions-from-dotvvm-with-js-directive-1ci0</guid>
      <description>&lt;p&gt;Hi! It's a pleasure to greet you. To learn how to call JavaScript functions from DotVVM in ASP.NET, and vice versa, in this tutorial article we will learn how to use JS Directive when requesting two numbers from a web page, performing the operation in JavaScript, and displaying the results on that page. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-js-directive"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is JS Directive?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The JS directive is a feature set that provides a way to interact between DotVVM controls and JavaScript code. For example, with JS Directive we can call JavaScript functions from DotVVM, and send data from JavaScript to DotVVM. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; This functionality was incorporated into DotVVM 3.0. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#steps-to-follow"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Steps to follow&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;In order for us to establish a communication between DotVVM and JavaScript, these are the steps we must follow: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Declare a JavaScript module with its respective functions. &lt;/li&gt;
&lt;li&gt;Register that module in DotVVM Startup. &lt;/li&gt;
&lt;li&gt;Import the module declared in our DotVVM views. &lt;/li&gt;
&lt;li&gt;Let's get to work! Call JavaScript functions from DotVVM, or receive data. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Example&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;To see how JS Directive works in an example, let's follow the steps mentioned above to request two numbers from the user, call a JavaScript function that performs that operation, and finally display the result on the web page. &lt;/p&gt;

&lt;p&gt;Our example would be visualized as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_sQ6_fmA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3do5370hwupvttq5c14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_sQ6_fmA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3do5370hwupvttq5c14.png" alt="Web app example to add two numbers." width="880" height="487"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing we must have is the JavaScript module with its corresponding functions, in this case we have a file called &lt;code&gt;JavaScript.js&lt;/code&gt; located in the &lt;code&gt;wwwroot&lt;/code&gt; folder with the following definitions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contextApp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contextApp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;WEB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contextApp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contextApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;contextApp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;WEB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;contextApp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;WEB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;namedCommands&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ResultOperation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the &lt;code&gt;operation&lt;/code&gt; function will be in charge of performing the sum and then put the result in the &lt;code&gt;ResultOperation&lt;/code&gt; section defined in a view with DotVVVM.&lt;/p&gt;

&lt;p&gt;With this &lt;code&gt;App&lt;/code&gt; class, and its defined context, we can now register it in DotVVM to be able to make calls from DotVVM to JavaScript, and vice versa. In this sense, we must go to the &lt;code&gt;DotVVM Startup&lt;/code&gt; class, and in the &lt;code&gt;ConfigureResources&lt;/code&gt; method refer to the JavaScript file in question, and name this record (in this case the name will be &lt;code&gt;module&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ConfigureResources&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DotvvmConfiguration&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;applicationPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;//JS Directive&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Resources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ScriptModuleResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;UrlResourceLocation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"~/JavaScript.js"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//Dependencies = new[] { "external/other-js-file" }&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this definition, we can already use JS Directive. For the sum of the two numbers, we will define three variables in the ViewModel (in this case in the &lt;code&gt;DefaultViewModel.cs&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;@viewModel JSDirective.ViewModels.DefaultViewModel, JSDirective
@masterPage Views/MasterPage.dotmaster
@js module

&lt;span class="nt"&gt;&amp;lt;dot:Content&lt;/span&gt; &lt;span class="na"&gt;ContentPlaceHolderID=&lt;/span&gt;&lt;span class="s"&gt;"MainContent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content__text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;JS Directive Demo&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Add two numbers&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content-page"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;b&amp;gt;&lt;/span&gt;Number1: &lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;dot:TextBox&lt;/span&gt; &lt;span class="na"&gt;Text=&lt;/span&gt;&lt;span class="s"&gt;"{value: Number1}"&lt;/span&gt; &lt;span class="na"&gt;Type=&lt;/span&gt;&lt;span class="s"&gt;"Number"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;b&amp;gt;&lt;/span&gt;Number2: &lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;dot:TextBox&lt;/span&gt; &lt;span class="na"&gt;Text=&lt;/span&gt;&lt;span class="s"&gt;"{value: Number2}"&lt;/span&gt; &lt;span class="na"&gt;Type=&lt;/span&gt;&lt;span class="s"&gt;"Number"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;dot:Button&lt;/span&gt; &lt;span class="na"&gt;Text=&lt;/span&gt;&lt;span class="s"&gt;"Calculate"&lt;/span&gt;
                        &lt;span class="na"&gt;Click=&lt;/span&gt;&lt;span class="s"&gt;"{staticCommand:_js.Invoke("&lt;/span&gt;&lt;span class="na"&gt;operation&lt;/span&gt;&lt;span class="err"&gt;",&lt;/span&gt; &lt;span class="na"&gt;Number1&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;Number2&lt;/span&gt;&lt;span class="err"&gt;);}"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;dot:NamedCommand&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;"ResultOperation"&lt;/span&gt; &lt;span class="na"&gt;Command=&lt;/span&gt;&lt;span class="s"&gt;"{staticCommand: (int id) =&amp;gt; _root.Result = id}"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Result: &lt;span class="nt"&gt;&amp;lt;b&amp;gt;&lt;/span&gt;{{value: Result}}&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dot:Content&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the view, it is necessary to refer to the JavaScript module that we want to use, in this case we can reference it with the identifier &lt;code&gt;js&lt;/code&gt;, with the name of the module previously registered:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;js&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, in this view we can mention three important things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To set the two numbers to add, two DotVVM controls of type &lt;code&gt;TextBox&lt;/code&gt; have been used. &lt;/li&gt;
&lt;li&gt;To call the JavaScript function we can do it with a &lt;code&gt;Button&lt;/code&gt;, specifying the name of the function, and sending the respective parameters (&lt;code&gt;Number1&lt;/code&gt;, and &lt;code&gt;Number2&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;NamedCommand&lt;/code&gt; control allows us to invoke commands from JavaScript, in this case a section has been defined with the name ResultOperation, to send the value of the operation from JavaScript and save it in the variable &lt;code&gt;Result&lt;/code&gt; (defined in the ViewModel from DotVVM). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this process, we have been able to call JavaScript functions from DotVVM, and send values from JavaScript to DotVVM. &lt;/p&gt;

&lt;p&gt;The full JS Directive documentation can be reviewed from the documentation in DotVVM: &lt;a href="https://www.dotvvm.com/docs/3.0/pages/concepts/client-side-development/js-directive/overview"&gt;JS directive overview&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Thanks for reading&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Thank you very much for reading, I hope you found this article interesting and may be useful in the future. &lt;/p&gt;

&lt;p&gt;The source code for this example can be found in the following repository on GitHub: &lt;a href="https://github.com/esdanielgomez/DotVVMJSDirective"&gt;DotVVM JS Directive&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have any questions or ideas that you need to discuss, it will be a pleasure to be able to collaborate and together exchange knowledge with each other.&lt;/p&gt;

&lt;p&gt;See you on &lt;a href="https://twitter.com/esDanielGomez"&gt;Twitter&lt;/a&gt;! :)&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>html</category>
      <category>javascript</category>
      <category>csharp</category>
    </item>
    <item>
      <title>Tic-Tac-Toe using HTML,CSS,JS (Express.js) (for intermediates)</title>
      <author>Lucifer25x</author>
      <pubDate>Tue, 16 Nov 2021 16:10:03 +0000</pubDate>
      <link>https://dev.to/lucifer25x/tic-tac-toe-using-htmlcssjs-expressjs-for-intermediates-18pm</link>
      <guid>https://dev.to/lucifer25x/tic-tac-toe-using-htmlcssjs-expressjs-for-intermediates-18pm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#simple-tictactoe-game-for-intermediates"&gt;
  &lt;/a&gt;
  Simple Tic-Tac-Toe game for intermediates
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#source-code-httpsgithubcomlucifer25xtictactoenew"&gt;
  &lt;/a&gt;
  Source Code: &lt;a href="https://github.com/Lucifer25x/tic-tac-toe-new"&gt;https://github.com/Lucifer25x/tic-tac-toe-new&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Play with bot&lt;/li&gt;
&lt;li&gt;2 Player&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#try"&gt;
  &lt;/a&gt;
  Try:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://replit.com/@Lucifer25x/tic-tac-toe-new#.replit"&gt;https://replit.com/@Lucifer25x/tic-tac-toe-new#.replit&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Easy way to exclude files during git add</title>
      <author>Chirag</author>
      <pubDate>Tue, 16 Nov 2021 16:00:58 +0000</pubDate>
      <link>https://dev.to/kodewithchirag/easy-way-to-exclude-files-during-git-add-3kn2</link>
      <guid>https://dev.to/kodewithchirag/easy-way-to-exclude-files-during-git-add-3kn2</guid>
      <description>&lt;p&gt;Every day we use the &lt;strong&gt;"git add"&lt;/strong&gt; command a lot to add our changes to the index for new commits, but have you ever wondered how we can add all the changed files with some files excluded during the execution of this command (not with .gitignore)? If the answer is yes, then this article will help you to understand how certain files can be excluded during the git add command.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr-command-to-exclude-specific-file"&gt;
  &lt;/a&gt;
  TLDR; command to exclude specific file
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add -A ':!&amp;lt;file_path&amp;gt;'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h2&gt;

&lt;p&gt;One day I was put in a situation where I need to add some files for my new commit but I also need to exclude a few files during that execution and those files will get added later on once my work is done on those.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;One way to do this is to hit the below command&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add &amp;lt;file_path&amp;gt; &amp;lt;file_path&amp;gt; ... &amp;lt;file_path&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, If I have done changes to under 13 files and wanted to exclude only 3 files from those, that means 10 files need to be added with the git add command, then I have to copy all those 10 files path and paste it to the terminal manually and it will have become little bit tedious task. Let’s look at the example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add Dockerfile \
README.md \
nest-cli.json \
package-lock.json \
package.json \
src/app.controller.spec.ts \
src/app.controller.ts \
src/app.module.ts \
src/app.service.ts \
src/main.ts

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this command, you can now check for the staged files by hitting.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;But what if this process can be done inversely🤔? Like instead of passing 10 files paths I could just pass 3 files path, 👀 yes you heard it right this can be possible with git add with the below example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add -A ':!.eslintrc.js' ':!.gitignore' ':!.prettierrc'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now when you hit &lt;strong&gt;git status&lt;/strong&gt; it will show all 10 files added to the index apart from the 3 excluded files. It's like a &lt;strong&gt;NOT (!) operator&lt;/strong&gt; under the git add path option.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hope you enjoyed this content, please share your thoughts under comment and also get in touch with me on &lt;a href="https://twitter.com/KodeWithChirag"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>git</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Best VS Code extensions for Beginners</title>
      <author>Haris#</author>
      <pubDate>Tue, 16 Nov 2021 15:53:19 +0000</pubDate>
      <link>https://dev.to/harishash/best-vs-code-extensions-for-beginners-4hcg</link>
      <guid>https://dev.to/harishash/best-vs-code-extensions-for-beginners-4hcg</guid>
      <description>&lt;p&gt;Hi everyone, &lt;br&gt;
I’m Haris and I’m a newbie to the developer realm. Today I'd like to share my favourite VS Code extensions that will definitely help you if you’re starting out like me.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prettier"&gt;
  &lt;/a&gt;
  Prettier
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--diJVlAqR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vxy73owii454n1m92mnx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--diJVlAqR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vxy73owii454n1m92mnx.png" alt="Prettier extension for VS Code" width="880" height="226"&gt;&lt;/a&gt;Prettier is a code formatter that greatly improves readability in teams. It's a tough job to create consistent code formatting in large codebases. As soon as you install prettier in your project, it gets implemented throughout your dev process. It works as automatic formatting on save or while you’re typing. Prettier is a well renowned extension that saves time and improves readability for teams and individuals as well. &lt;br&gt;
Check out prettier here:&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#live-preview"&gt;
  &lt;/a&gt;
  Live Preview
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PPoXnjL7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmp8l0r1gxlhwk3elk8p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PPoXnjL7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmp8l0r1gxlhwk3elk8p.png" alt="Live Preview extension for VS Code" width="880" height="227"&gt;&lt;/a&gt;Live preview hosts a local server where you can preview your web projects inside VS code. It has many preview features including HTML file previewing, Embedded preview, Persistent Server task with server Logging, External browser Previewing &amp;amp; Debugging, Console Output Channel, Workspace-less Previewing, and Multi-root Support. &lt;br&gt;
Try Live preview:&lt;br&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.live-server"&gt;https://marketplace.visualstudio.com/items?itemName=ms-vscode.live-server&lt;/a&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#settings-sync"&gt;
  &lt;/a&gt;
  Settings Sync
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2bTPi0MA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9cee0r9svdp3rdrqtkgk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2bTPi0MA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9cee0r9svdp3rdrqtkgk.png" alt="Settings Sync extension for VS Code" width="880" height="227"&gt;&lt;/a&gt;Settings Sync allows you to maintain a consistent IDE experience across multiple machines by downloading your extensions and reconfiguring all of your settings by saving everything via GitHub. You can keep everything in sync by adding this extension in your VS code. &lt;br&gt;
Check out Settings sync&lt;br&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync"&gt;https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bracket-pair-colorizer"&gt;
  &lt;/a&gt;
  Bracket Pair Colorizer
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KAjDQUBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w51sncfizh1xsa8q5w60.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KAjDQUBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w51sncfizh1xsa8q5w60.png" alt="Bracket Pair Colorizer extension for VS Code" width="880" height="227"&gt;&lt;/a&gt;Bracket Pair colorizer identifies different brackets through different colors. You can easily define which characters to match, and the colours to use. You can also configure custom bracket characters. Additionally, it becomes pretty simple to configure a list of colors, as well as a specified color for orphaned brackets.&lt;br&gt;
Check out Bracket Pair colorizer:&lt;br&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer"&gt;https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer&lt;/a&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#blox"&gt;
  &lt;/a&gt;
  blox
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vd6VhSKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfzmm5g0mo0xe2frkj15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vd6VhSKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfzmm5g0mo0xe2frkj15.png" alt="blox extension for VS Code" width="880" height="249"&gt;&lt;/a&gt;blox is a VS code extension with a built-in library of 1500 code snippets. It lets you drop whole chunks of code blocks with a single click. It supports different frameworks including Tailwind CSS, Angular, React, and Vue. It will also support Alpine.js, Svelte, Laravel, Bootstrap, and Material UI in the future.&lt;br&gt;
Check out blox:&lt;br&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=vsblox.blox"&gt;https://marketplace.visualstudio.com/items?itemName=vsblox.blox&lt;/a&gt;   &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#live-share"&gt;
  &lt;/a&gt;
  Live Share
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w_xoKMTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7iq40m0jdn0dckuh59gz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w_xoKMTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7iq40m0jdn0dckuh59gz.png" alt="Live Share extension for VS Code" width="880" height="227"&gt;&lt;/a&gt;Live Share allows developers to collaborate on projects where they can edit and debug together. Developers can join different sessions and receive all of the editor context from another developer's environment that ensures they can start collaborating immediately, without the need to clone any repos or install any SDKs.&lt;br&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare"&gt;https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So this sums up the list for now, do share your experience if you’ve given any of these a shot. &lt;br&gt;
What are your favorite VS code extensions that you use on a daily basis?&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>React: Use Array.map() to Render Elements</title>
      <author>Randy Rivera</author>
      <pubDate>Tue, 16 Nov 2021 15:51:15 +0000</pubDate>
      <link>https://dev.to/rthefounding/react-use-arraymap-to-render-elements-4ocg</link>
      <guid>https://dev.to/rthefounding/react-use-arraymap-to-render-elements-4ocg</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Using Array.map() is extremely useful in the sense that often than not, in reacive programming, a programmer has no way to know what the state of an application is until runtime, because so much depends on a user's interaction with that program. As programmers we need to write the code to correctly handle that unknown state ahead of time.&lt;/li&gt;
&lt;li&gt;Code:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;textAreaStyles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;235&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyToDoList&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// Change code below this line&lt;/span&gt;

    &lt;span class="c1"&gt;// Change code above this line&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;itemsArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;toDoList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;itemsArray&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;userInput&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Change this line&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;textarea&lt;/span&gt;
          &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userInput&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;textAreaStyles&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Separate Items With Commas'&lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Create List&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;My "To Do" List:&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;As you can see there's a &lt;code&gt;textarea&lt;/code&gt; and a &lt;code&gt;button&lt;/code&gt;, along with a couple of methods that track their states, but nothing is rendered to the page yet.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All freeCodeCamp wants us to do is inside the constructor, create a &lt;code&gt;this.state&lt;/code&gt; object and define two states: &lt;code&gt;userInput&lt;/code&gt; should be initialized as an empty string, and &lt;code&gt;toDoList&lt;/code&gt; should be initialized as an empty array. Next, in the render method map over the &lt;code&gt;toDoList&lt;/code&gt; array stored in the component's internal state and dynamically render a li for each item.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Answer:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyToDoList&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;userInput&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;toDoList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toDoList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-arrayfilter-to-filter-an-array"&gt;
  &lt;/a&gt;
  Use Array.filter to Filter an Array
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Another method to &lt;code&gt;map&lt;/code&gt; is &lt;code&gt;filter&lt;/code&gt;, which filters the contents of an array based on a condition, then returns a new array.
*Code:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jeff&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;online&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Alan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;online&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mary&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;online&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jim&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;online&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sara&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;online&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Laura&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;online&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;usersOnline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Change this line&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderOnline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Change this line&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Current Online Users:&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;renderOnline&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Here &lt;code&gt;MyComponent&lt;/code&gt;'s state is initialized with an array of users. Some users are online and some aren't. Let's Filter the array so you see only the users who are online. Then, in the &lt;code&gt;renderOnline&lt;/code&gt;variable, let's &lt;code&gt;map&lt;/code&gt; over the filtered array, and return a li element for each user that contains the text of their username. We'll also include a unique &lt;code&gt;key&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*Answer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;usersOnline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;online&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderOnline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;usersOnline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;online&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;online&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;online&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Larson, Q., 2019. Frontend Development Libraries. [online] Freecodecamp.org. Available at: &lt;a href="https://www.freecodecamp.org/learn/front-end-development-libraries/react"&gt;https://www.freecodecamp.org/learn/front-end-development-libraries/react&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>A crash course in React.js and D3</title>
      <author>Keerthi</author>
      <pubDate>Tue, 16 Nov 2021 15:41:30 +0000</pubDate>
      <link>https://dev.to/keefdrive/a-crash-course-in-reactjs-and-d3-4j06</link>
      <guid>https://dev.to/keefdrive/a-crash-course-in-reactjs-and-d3-4j06</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;I created a crash course type video on using D3 and React.js. You can see the video here.&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/T1RgT0Yh1Lg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;For most use cases involving creation of  standard charts, D3 is not practical, because of the complex nature of the API. In this post I try to explain scenarios where you would use D3 with React.js rather than use easier chart libraries like Recharts or the ones mentioned in one of my previous post :&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/keefdrive" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nf6szdql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Ansl3OA_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/448846/7ea69e79-c855-4dc4-85db-ca8f47463ae1.jpg" alt="keefdrive"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/keefdrive/the-top-four-react-chart-libraries-that-you-need-to-know-for-2021-2nl8" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The top four React chart libraries that you need to know for 2021&lt;/h2&gt;
      &lt;h3&gt;Keerthi ・ Jan 8 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#reactnative&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;These libraries do a really good job of creating simple line charts like the one in my video. They are much easier to use and provide really good features out the box.  I would recommend that for most use cases, where the visual and interaction requirements are not that complex then you should use those suggested in my previous post. (You can also got to the end and check out my videos on Recharts and react-chartJs if you are not interested in D3.js)&lt;/p&gt;

&lt;p&gt;At the end of this post, I will recommend other resources that will get you started with D3 if you think D3 will be a good fit for your next project or side project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-d3js-"&gt;
  &lt;/a&gt;
  What is D3.js ?
&lt;/h3&gt;

&lt;p&gt;First lets look at what the D3.js website says about  D3.js: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;D3.js is a JavaScript library for manipulating documents based on data. D3 helps you bring data to life using HTML, SVG, and CSS. D3’s emphasis on web standards gives you the full capabilities of modern browsers without tying yourself to a proprietary framework, combining powerful visualization components and a data-driven approach to DOM manipulation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So what they are talking about is data visualisation. D3.js is not really  a dedicated charting library but a set of visualization and  DOM manipulation components. These components will help you build visually stunning data visualisations with custom interactive features. Two of the most appealing things about D3.js is that It has some great animation features and it has its own Dom manipulation capability. Take a look at the graphics capability from these two examples.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FOPQl_yZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/45prj0e0pgs9mn1gdgle.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FOPQl_yZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/45prj0e0pgs9mn1gdgle.gif" alt="Transition animation" width="640" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see the code for this at &lt;a href="https://bl.ocks.org/mbostock/1345853"&gt;https://bl.ocks.org/mbostock/1345853&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0MHfpxqy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvwd1day0k3nu40f3hli.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0MHfpxqy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvwd1day0k3nu40f3hli.gif" alt="Morphing shape in D3" width="640" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see the code for this d3 morphing animation at &lt;a href="https://bl.ocks.org/mbostock/3916621"&gt;https://bl.ocks.org/mbostock/3916621&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-d3-easy-to-learn-"&gt;
  &lt;/a&gt;
  Is  D3 easy to learn ?
&lt;/h3&gt;

&lt;p&gt;In D3 you manipulate low level Dom elements and deal with SVG canvas drawing concepts. This has  a drawback because it requires a bit of a learning curve to get your head around the query type structure of the D3 method chaining. And then there are the scale functions that map your data onto an SVG canvas, this involves a little bit of head maths. So the overhead of learning D3 is a bit too much just to create standard charts&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-should-i-use-d3-then"&gt;
  &lt;/a&gt;
  When should I use D3 then?
&lt;/h3&gt;

&lt;p&gt;To summarize, you should use D3 for the following reasons:&lt;br&gt;
&lt;/p&gt;
&lt;li&gt;When you want advanced graphics and animation in your visualization&lt;/li&gt;


&lt;li&gt;When other chart libraries do not meet specific customization needs, use D3 to build from the ground up&lt;/li&gt;


&lt;li&gt;When you want to use specific data format, D3 can handle Array, CSV, TSV, JSON, XML&lt;/li&gt;

&lt;p&gt;An example of a visualisation that will be ideal to create in D3 would to build an animated tree chart like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5HQDdzOy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cg61jpmjrytv62qn0drf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5HQDdzOy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cg61jpmjrytv62qn0drf.gif" alt="Animated Tree Chart" width="640" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see the code for this here &lt;a href="https://bl.ocks.org/d3noob/8375092"&gt;https://bl.ocks.org/d3noob/8375092&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-do-you-get-started-with-react-and-d3js-"&gt;
  &lt;/a&gt;
  How do you get started with React and D3.js ?
&lt;/h2&gt;

&lt;p&gt;I would recommend starting of with a line chart and then progress to add other interactive and animation features. This is why I created this video.&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/T1RgT0Yh1Lg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Be warned this is a bit of a crash course, so would be suitable for someone who has fairly good grasp of  react and JavaScript. But if you want to familiarize the basic concepts of D3 then check out the next section. In my video I cover the following :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Installing  React.js with D3&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Setup your data in React.js&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Setup JSX with SVG canvas and learn how to draw basic line in SVG&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Setting up and testing  scale functions so that you can map your data onto the SVG canvas. The two scale functions you learn are :&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;d3.scalePoint // You use this if your dealing with any data that is ordinal by nature, ie categories of things or days of the week (Monday, Tuesday, Wednesday) etc&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;d3.scaleLinear  // You use this to map values that are numerical, continuous and can be measured.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Use the d3.line function to generate a setup commands to draw the line curve.&lt;/em&gt;&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Use the d3.select and d3.selectAll components manipulate DOM elements. - You can add/remove and change attributes. You would use this to draw things in svg too.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Learn how to generate and draw  X and Y axis with labels&lt;br&gt;
 using axis components d3.axisBottom and d3.axisLeft&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-other-resources-are-there-to-learn-from"&gt;
  &lt;/a&gt;
  What other resources are there to learn from
&lt;/h2&gt;

&lt;p&gt;A blog post on &lt;a href="https://wattenberger.com/blog/react-and-d3"&gt;React and D3 is a good place to start&lt;/a&gt; by Amelia Wattenberger. This post covers the basics and touches on other complex visualisations involving maps.&lt;/p&gt;

&lt;p&gt;Amelia's blog also has a &lt;a href="https://wattenberger.com/blog/d3"&gt;Visualization of the whole D3 libary&lt;/a&gt;. This is a very useful learning tool will allow you to dig deeper into the D3 api.&lt;/p&gt;

&lt;p&gt;A site called &lt;a href="https://www.d3-graph-gallery.com/intro_d3js.html"&gt;d3-graph-gallery&lt;/a&gt; has some good basic guides but it does not have any React.js examples.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.d3indepth.com/introduction/"&gt;d3indepth.com&lt;/a&gt; also has some very good basic tutorial.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#bonus-videos-on-recharts-and-reactchartjs2"&gt;
  &lt;/a&gt;
  Bonus videos on Recharts and react-chartjs-2
&lt;/h2&gt;

&lt;p&gt;If you think that D3 is not going to be suitable for your needs, then check out my popular React chart videos on Recharts and react-chartjs-2.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/z1KuuHLOY9c"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ydP05Qv0pek"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>d3js</category>
      <category>webdev</category>
    </item>
    <item>
      <title>React: Render Conditionally from Props</title>
      <author>Randy Rivera</author>
      <pubDate>Tue, 16 Nov 2021 15:23:23 +0000</pubDate>
      <link>https://dev.to/rthefounding/react-render-conditionally-from-props-21go</link>
      <guid>https://dev.to/rthefounding/react-render-conditionally-from-props-21go</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Using props to conditionally render code is very common. They use the value of a given prop to automatically make decisions about what to render.&lt;/li&gt;
&lt;li&gt;In this lesson, FreeCodeCamp wants you set up a child component to make rendering decisions based on props. You'll also use the ternary operator. We have a parent called &lt;code&gt;GameOfChance&lt;/code&gt;, and a child &lt;code&gt;Results&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;First, we need a simple expression that randomly returns a different value every time it is run. You can use &lt;code&gt;Math.random()&lt;/code&gt;. This method returns a value between 0 (inclusive) and 1 (exclusive) each time it is called. So for 50/50 odds, use Math.random() &amp;gt;= .5 in your expression. &lt;/li&gt;
&lt;li&gt;Now Render the &lt;code&gt;Results&lt;/code&gt; component as a child of &lt;code&gt;GameOfChance&lt;/code&gt;, and pass in expression as a prop called &lt;code&gt;fiftyFifty&lt;/code&gt;. In the Results component, write a ternary expression to render the h1 element with the text You Win! or You Lose! based on the &lt;code&gt;fiftyFifty&lt;/code&gt; prop that's being passed in from GameOfChance. &lt;/li&gt;
&lt;li&gt;Finally they want us to make sure the &lt;code&gt;handleClick()&lt;/code&gt; method is correctly counting each turn so the user knows how many times they've played.&lt;/li&gt;
&lt;li&gt;Code:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Results&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Change code below this line */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Change code above this line */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;GameOfChance&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Complete the return statement:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;expression&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Change this line&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Play Again&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Change code below this line */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Change code above this line */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Turn: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Answer:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Results&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fiftyFifty&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You Win!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You Lose!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;GameOfChance&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;expression&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;// Change this line&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Play Again&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Results&lt;/span&gt; &lt;span class="na"&gt;fiftyFifty&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;expression&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Change code above this line */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Turn: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Building an internal dashboard with Retool and Cube</title>
      <author>Adnan Rahić</author>
      <pubDate>Tue, 16 Nov 2021 15:13:10 +0000</pubDate>
      <link>https://dev.to/cubejs/building-an-internal-dashboard-with-retool-and-cube-1g4c</link>
      <guid>https://dev.to/cubejs/building-an-internal-dashboard-with-retool-and-cube-1g4c</guid>
      <description>&lt;p&gt;Have you ever been asked to build a metrics dashboard for displaying internal performance metrics like HTTP response times? Maybe even showing metrics for something business-related like new users visiting a landing page every day?&lt;/p&gt;

&lt;p&gt;Don't you love it!? 😕&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4AaKe2gE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/5ce0a309-ee49-422c-b990-3368d93d0474.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4AaKe2gE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/5ce0a309-ee49-422c-b990-3368d93d0474.png" alt="iron-e.png" width="588" height="441"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Excuse my irony, but building actionable graphs and charts is not easy. At Cube, we tried making it easier for you by gathering all the &lt;a href="https://awesome.cube.dev/"&gt;best data visualization tools in one place&lt;/a&gt;. However, this still means you need to choose a tool and spend hours writing code.&lt;/p&gt;

&lt;p&gt;Using low-code solutions to build internal tools and metrics dashboards is more convenient, a lot faster, and removes strain from your development process.&lt;/p&gt;

&lt;p&gt;In this tutorial, I want to build a metrics dashboard for the sales team of an e-commerce company to gain insight into their KPIs. Sounds daunting. 😬&lt;/p&gt;

&lt;p&gt;After you're done reading this, you'll be blown away by how simple it is. I'll have a dashboard ready in less than 10 minutes. Yes, this is what you'll get! 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hVcGwD3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/bbe1f014-69db-4521-8b51-fa8f40baae63.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hVcGwD3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/bbe1f014-69db-4521-8b51-fa8f40baae63.png" alt="frame_chrome_mac_light_(44).png" width="880" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll be using a hosted &lt;a href="https://github.com/cube-js/cube.js"&gt;Cube&lt;/a&gt; deployment on &lt;a href="https://cube.dev/cloud?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=building-an-internal-dashboard-with-retool-and-cube"&gt;Cube Cloud&lt;/a&gt; to get aggregated data from an e-commerce dataset and &lt;a href="https://retool.com/"&gt;Retool&lt;/a&gt; as the visualization tool to generate a metrics dashboard.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-cube-cloud"&gt;
  &lt;/a&gt;
  What is Cube Cloud
&lt;/h3&gt;

&lt;p&gt;Cube Cloud is a fully managed API layer for building your Cube apps. It lets you &lt;a href="https://cube.dev/docs/cloud/getting-started/create/?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=building-an-internal-dashboard-with-retool-and-cube"&gt;deploy fully managed Cube apps&lt;/a&gt; in the cloud of your choice, either AWS, Azure, or GCP.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RDskHiGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/f9fe8ccf-8d70-4386-8431-6f4f9f3891e1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RDskHiGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/f9fe8ccf-8d70-4386-8431-6f4f9f3891e1.png" alt="how_cube_cloud_works.png" width="880" height="489"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cube Cloud enables you to deploy, scale, and optimize Cube apps with best‑in‑class infrastructure and proven best practices. It guarantees high availability, scalability, and improved performance over self-hosted Cube clusters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cube.dev/video/cube-cloud-demo.mp4"&gt;Have a look at a video explaining Cube Cloud. ➡️ &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Anything you can do with self-hosted Cube you can do with Cube Cloud. However, you do get a few more niceties with Cube Cloud. Primarily, &lt;a href="https://cube.dev/docs/cloud/inspecting-queries/?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=building-an-internal-dashboard-with-retool-and-cube"&gt;query optimization&lt;/a&gt;, where you can drill down into queries and spot bottlenecks. You also get pre-aggregations and query acceleration supported out-of-the-box with a &lt;a href="https://cube.dev/docs/deployment/production-checklist#set-up-cube-store?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=building-an-internal-dashboard-with-retool-and-cube"&gt;Cube Store cluster&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another awesome feature is pre-aggregation introspection where you can preview all pre-aggregation builds, partitions, indices, and what their build history looks like to make sure there is no stale data.&lt;/p&gt;

&lt;p&gt;In this tutorial, I'll use Cube Cloud to set up an analytical API. It will act as the data layer and API for accessing the data I need to populate a metrics dashboard.&lt;/p&gt;

&lt;p&gt;You can follow along with either a &lt;a href="https://cube.dev/docs/getting-started/docker/?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=building-an-internal-dashboard-with-retool-and-cube"&gt;self-hosted Cube&lt;/a&gt; deployment or &lt;a href="https://cube.dev/docs/cloud/getting-started/?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=building-an-internal-dashboard-with-retool-and-cube"&gt;Cube Cloud&lt;/a&gt;. Both options will work the same way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-retool"&gt;
  &lt;/a&gt;
  What is Retool
&lt;/h3&gt;

&lt;p&gt;Retool is the fast way to build internal tools. It lets you visually design apps that interface with any database or API. It lets you create tables, charts, and graphs by providing elegant components for all the UI primitives you need to build robust B2B dashboards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://d3399nw8s4ngfo.cloudfront.net/videos/component-assemble.mp4"&gt;Check out Retool's video showing how it works. ➡️ &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When building both internal and user-facing dashboards there are many building blocks that remain the same. They are Tables, Lists, Charts, Forms, Wizards, Maps, and so on.&lt;/p&gt;

&lt;p&gt;But it can be hard to find everything you need in single component library, and even when you do, you’ll need to customize components and even make design changes to make your charts look cohesive.&lt;/p&gt;

&lt;p&gt;Retool provides a complete set of powerful building blocks out of the box. You should spend your time getting a UI in front of stakeholders and users, not hunting down the best JavaScript charting library especially when it comes to internal-facing tools and apps.&lt;/p&gt;

&lt;p&gt;In this tutorial, I'll show you how to assemble a metrics dashboard in a few minutes by dragging and dropping charts and tables from Retool's pre-built components. Retool will act as the visualization library, but without actually using any code. It's like music to my ears.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-cube-retool"&gt;
  &lt;/a&gt;
  Why Cube ❤️ Retool
&lt;/h3&gt;

&lt;p&gt;Cube exposes an HTTP API because it's essentially an API server. Everything you need in order to interact with Cube is a single API handler.&lt;/p&gt;

&lt;p&gt;That's where Retool comes into play. It has great support for HTTP APIs and supports a low-code/no-code solution to building metrics dashboards and internal tools.&lt;/p&gt;

&lt;p&gt;With Cube and Retool working in tandem, I'll be able to create a dashboard in less than 10 minutes. Don't believe me? Hold my 🍺.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#set-up-cube"&gt;
  &lt;/a&gt;
  Set Up Cube
&lt;/h3&gt;

&lt;p&gt;To configure Cube, I first needed to connect a database. I used a sample PostgreSQL database with e-commerce data.&lt;/p&gt;

&lt;p&gt;The process of connecting a database is identical whether you're using a self-hosted instance of Cube, or Cube Cloud. &lt;/p&gt;

&lt;p&gt;I selected PostgreSQL from the list of database options. Cube &lt;a href="https://cube.dev/docs/config/databases/?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=building-an-internal-dashboard-with-retool-and-cube"&gt;supports dozens of databases&lt;/a&gt;, you can select from any mainstream database or data warehouse on the market.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IpQd75rz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/9ca37d9b-cdc4-4ebd-a41b-31b1ded693e5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IpQd75rz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/9ca37d9b-cdc4-4ebd-a41b-31b1ded693e5.png" alt="frame_chrome_mac_light_(37).png" width="880" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, I had to add values to connect to my sample PostgreSQL e-commerce database. If you're using a self-hosted Cube instance, you need to &lt;a href="https://cube.dev/docs/config/databases/postgres/?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=building-an-internal-dashboard-with-retool-and-cube"&gt;configure a few environment variables&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In Cube Cloud, it looks like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VXliNlEH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/f44924c6-b117-4d50-9d78-11625238b4b9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VXliNlEH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/f44924c6-b117-4d50-9d78-11625238b4b9.png" alt="frame_chrome_mac_light_(50).png" width="880" height="844"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the connection is established, I have to generate a data schema. Selecting the &lt;code&gt;public&lt;/code&gt; table and clicking generate will build a Cube data schema for me to work with.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xa_2M0rW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/ec5c7697-c698-4d8c-938e-8fdeb2193b7f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xa_2M0rW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/ec5c7697-c698-4d8c-938e-8fdeb2193b7f.png" alt="frame_chrome_mac_light_(51).png" width="880" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I have access to my Cube cluster. In Cube Cloud you should always enable cluster mode for improved performance if you want to run reliably in production.&lt;/p&gt;

&lt;p&gt;This will make sure your resources will autoscale based on the load. There's no additional cost for autoscaling, and the &lt;a href="https://cube.dev/pricing?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=building-an-internal-dashboard-with-retool-and-cube"&gt;pricing model for Cube Cloud&lt;/a&gt; is based on throughput.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VBftoCxH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/00d52f17-d1c7-4768-b692-6fbb78954d33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VBftoCxH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/00d52f17-d1c7-4768-b692-6fbb78954d33.png" alt="frame_chrome_mac_light_(22).png" width="880" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next up, I ran a set of queries in the Cube Playground to determine what data I need to make the charts and graphs in Retool.&lt;/p&gt;

&lt;p&gt;First of all, I want to know the number of orders created per day grouped by their status.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5i0c-wWu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/247919d7-68ea-4edf-a60c-43d2b9d5c34b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5i0c-wWu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/247919d7-68ea-4edf-a60c-43d2b9d5c34b.png" alt="frame_chrome_mac_light_(24).png" width="880" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By clicking on the &lt;code&gt;JSON Query&lt;/code&gt; tab, you'll see a JSON object. I'll use this in Retool to access the data through a Retool integration once I add it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"measures"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"Orders.count"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"timeDimensions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"dimension"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Orders.createdAt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"granularity"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"day"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"dateRange"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"This year"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"order"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Orders.count"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"desc"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dimensions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"Orders.status"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"filters"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly, I added &lt;a href="https://cube.dev/docs/caching/pre-aggregations/getting-started/?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=building-an-internal-dashboard-with-retool-and-cube"&gt;query acceleration&lt;/a&gt; with a simple pre-aggregation. I did this through the Rollup Designer. You open it by clicking the &lt;code&gt;Query was not accelerated with pre-aggregation →&lt;/code&gt; link. Clicking the &lt;code&gt;Add to the Data Schema&lt;/code&gt; button is everything you need to do.&lt;/p&gt;

&lt;p&gt;You can read more about pre-aggregations and how to configure them &lt;a href="https://cube.dev/docs/caching/using-pre-aggregations/?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=building-an-internal-dashboard-with-retool-and-cube"&gt;here in the Cube docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iRllHmD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/1d6190e2-8d21-4f6f-897d-54df10141110.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iRllHmD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/1d6190e2-8d21-4f6f-897d-54df10141110.png" alt="frame_chrome_mac_light_(26).png" width="880" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Running accelerated queries clearly shows a performance improvement. This is what I see in the Cube Cloud queries tab after adding a pre-aggregation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b7W8_PSU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/1bcb0ed4-a782-4048-a04f-78a1edf5c69f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b7W8_PSU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/1bcb0ed4-a782-4048-a04f-78a1edf5c69f.png" alt="frame_chrome_mac_light_(31).png" width="880" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Are you tired of holding my 🍺 yet? I told you I'd only need a few minutes. I'm only halfway there though, bear with me. Next up, let's integrate Cube with Retool.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#integrate-cube-with-retool"&gt;
  &lt;/a&gt;
  Integrate Cube with Retool
&lt;/h3&gt;

&lt;p&gt;Now, once Cube is configured, the next step is to create a new app and a new resource in Retool and add Cube as a REST API integration.&lt;/p&gt;

&lt;p&gt;I started by creating a blank app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XJZov6BU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/09374bcc-1cc9-4169-91ac-78f7cc0ec101.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XJZov6BU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/09374bcc-1cc9-4169-91ac-78f7cc0ec101.png" alt="frame_chrome_mac_light_(53).png" width="880" height="658"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, once in the app, I created a new resource.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QbsyjU8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/41b30b97-2b2c-46af-becc-912a7c666784.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QbsyjU8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/41b30b97-2b2c-46af-becc-912a7c666784.png" alt="frame_chrome_mac_light_(52).png" width="880" height="651"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then I selected the REST API integration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0b0qcWoD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/cb6c291c-cf42-44cc-803c-761b92387dc9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0b0qcWoD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/cb6c291c-cf42-44cc-803c-761b92387dc9.png" alt="frame_chrome_mac_light_(54).png" width="880" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To configure the Retool resource, I need to use the URL of my Cube app deployment. Because I'm using Cube Cloud, it's simple. I click the &lt;code&gt;How to connect&lt;/code&gt; button on the Overview tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IsZSYCBH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/d4cee3df-0945-43d2-9afe-8acf883626e2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IsZSYCBH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/d4cee3df-0945-43d2-9afe-8acf883626e2.png" alt="frame_chrome_mac_light_(40).png" width="880" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's the curl connection.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2MzI4NDQ0MDF9.e4guK7xbqVHGpnZPdIbkLvVBalpgShfut3JmFwMHTsU"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-G&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--data-urlencode&lt;/span&gt; &lt;span class="s1"&gt;'query={"measures":["LineItems.count"]}'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  https://thirsty-raccoon.aws-eu-central-1.cubecloudapp.dev/cubejs-api/v1/load
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I copied the URL and the Authorization token and pasted them into the Retool resource configuration. The URL should end with &lt;code&gt;v1&lt;/code&gt;. It's crucial to make sure not to include the &lt;code&gt;/load&lt;/code&gt; part of the URL as it's an API path, not part of the base URL. I'll add the &lt;code&gt;/load&lt;/code&gt; part later when I create the Retool Query for fetching data from Cube.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eyLPTtPL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/acec9699-cd6c-4c1e-aeb7-0db2feba1e76.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eyLPTtPL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/acec9699-cd6c-4c1e-aeb7-0db2feba1e76.png" alt="frame_chrome_mac_light_(55).png" width="880" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it! I have a resource ready to use.&lt;/p&gt;

&lt;p&gt;Now comes the fun part. Creating a new query in Retool. Once I created a Retool query I had to select the resource I just created to fetch data from.&lt;/p&gt;

&lt;p&gt;As the action type, I selected &lt;code&gt;GET&lt;/code&gt; and added &lt;code&gt;load&lt;/code&gt; as the URL path. Then, I copied the Cube JSON Query from the previous section above and pasted it as a URL parameter called &lt;code&gt;query&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Cube&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;JSON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Query&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"measures"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"Orders.count"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"timeDimensions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"dimension"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Orders.createdAt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"granularity"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"day"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"dateRange"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"This year"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"order"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Orders.count"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"desc"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dimensions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"Orders.status"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"filters"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here you can see the Retool Query I created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--idslWalr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/c466d0a8-21ff-48de-be3d-81d2daf63454.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--idslWalr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/c466d0a8-21ff-48de-be3d-81d2daf63454.png" alt="frame_chrome_mac_light_(56).png" width="880" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I saved this query and ran a preview to see if the data matches what I saw in Cube. Everything looks great. 👌&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-retool-lowcode-charts-and-graphs"&gt;
  &lt;/a&gt;
  Create Retool Low-Code Charts and Graphs
&lt;/h3&gt;

&lt;p&gt;With the back-end part of fetching data working nicely, let me shift my focus to building the Retool metrics dashboard.&lt;/p&gt;

&lt;p&gt;Retool has an amazing feature where you can drag and drop UI components into the dashboard. I used this to add a table, a bar chart, and a pie chart. For reference, here's a video showing how the drag-and-drop feature works.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://d3399nw8s4ngfo.cloudfront.net/videos/component-assemble.mp4"&gt;Check out Retool's components here. ➡️ &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next step I had to do was to bind the data from the Retool Query to the actual charts.&lt;/p&gt;

&lt;p&gt;Because the name of my Retool Query is &lt;code&gt;OrdersCreatedByDayPerStatus&lt;/code&gt;, using the data binding curly brackets like in the example below will populate the charts correctly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;OrdersCreatedByDayPerStatus.data.data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's what my &lt;strong&gt;table component&lt;/strong&gt; looks like alongside the data binding. In the columns section, I &lt;strong&gt;selected &lt;code&gt;Orders.status&lt;/code&gt;, &lt;code&gt;Orders.createdAt&lt;/code&gt;, and &lt;code&gt;Orders.count&lt;/code&gt; as the columns to display&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mrML3tBR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/709000be-2118-4fdb-9c12-6bf71ac10452.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mrML3tBR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/709000be-2118-4fdb-9c12-6bf71ac10452.png" alt="2021-11-10_12-21.png" width="880" height="413"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The table is simple. Things get a bit more complicated with the charts below.&lt;/p&gt;

&lt;p&gt;With the Bar Chart, I wanted to stack the status of every created order while counting them per day.&lt;/p&gt;

&lt;p&gt;To get the UI layout just the way I want it, I had to &lt;strong&gt;set the &lt;code&gt;Orders.createdAt&lt;/code&gt; field as the X-axis value&lt;/strong&gt;, and the &lt;code&gt;**Order.status&lt;/code&gt; as the Group by definition.** I also &lt;strong&gt;enabled the Stack grouped data toggle&lt;/strong&gt; and chose *&lt;strong&gt;&lt;em&gt;the *&lt;/em&gt;&lt;code&gt;Orders.count&lt;/code&gt; sum&lt;/strong&gt; &lt;strong&gt;as the Dataset.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pDHnHHgY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/8c1d8d1a-7a7b-4726-afb1-df1833fdf223.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pDHnHHgY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/8c1d8d1a-7a7b-4726-afb1-df1833fdf223.png" alt="2021-11-10_12-21_1.png" width="880" height="333"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lastly, with the Pie Chart, I wanted to show the percentage of created orders grouped by their status displayed as a circle.&lt;/p&gt;

&lt;p&gt;For the Pie Chart, I selected the &lt;strong&gt;Value labels to be &lt;code&gt;Order.status&lt;/code&gt;&lt;/strong&gt; with the &lt;strong&gt;Dataset to be a sum of &lt;code&gt;Order.status&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sGt7mtrW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/35e55d26-3f28-4719-9103-e49f23e4d343.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sGt7mtrW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/35e55d26-3f28-4719-9103-e49f23e4d343.png" alt="2021-11-10_12-22.png" width="880" height="418"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The data will be loaded automatically from the Retool query that fetches data from Cube. The end result of my metrics dashboard looks quite stylish if I can say so myself. 💃&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hk3p2V46--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/6d80c3f6-af69-4f30-9dca-aa8343a3b16f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hk3p2V46--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/6d80c3f6-af69-4f30-9dca-aa8343a3b16f.png" alt="cubedev.retool.com_apps_DevRel_App201__releaseVersionlatest_(1).png" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I feel it's missing one key component though. It's static. Let me add a date picker to introduce a dynamic element to my metrics dashboard.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-dynamic-retool-charts-and-graphs"&gt;
  &lt;/a&gt;
  Add Dynamic Retool Charts and Graphs
&lt;/h3&gt;

&lt;p&gt;I dragged a date picker onto my dashboard and configured it to load default dates.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BNQG2L81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/f5c988ae-b6a7-49f6-be17-2c2d641b4a5e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BNQG2L81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/f5c988ae-b6a7-49f6-be17-2c2d641b4a5e.png" alt="image (23).png" width="880" height="616"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next up, I updated the query to access Cube with dynamic date values. I did this by using the &lt;code&gt;dateRange1.startValue&lt;/code&gt; and &lt;code&gt;dateRange1.endValue&lt;/code&gt; data bindings from the date picker component.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lC0OU3vN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/2c9f31af-e9d1-458d-8ed0-c4362a5b2dea.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lC0OU3vN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/2c9f31af-e9d1-458d-8ed0-c4362a5b2dea.png" alt="frame_chrome_mac_light_(46).png" width="880" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This configuration change made sure the values from the date picker are populating the query and fetching the correct data for that date range. The exact query looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"measures"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;"Orders.count"&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"timeDimensions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"dimension"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Orders.createdAt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"granularity"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"day"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"dateRange"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;dateRange&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;dynamic&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"{{ dateRange1.startValue }}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"{{ dateRange1.endValue }}"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"order"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Orders.count"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"desc"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dimensions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"Orders.status"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"filters"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By using data bindings in the &lt;code&gt;dateRange&lt;/code&gt; field I can dynamically change the query by changing the dates in the date picker component.&lt;/p&gt;

&lt;p&gt;Here's what the final dashboard looks like. You can also preview a live version &lt;a href="https://cubedev.retool.com/embedded/public/945c174d-566e-42f6-b33c-73052847e483"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kVLVeLpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/e30c51c1-2d7b-4227-b9a0-f0969aab917d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kVLVeLpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/e30c51c1-2d7b-4227-b9a0-f0969aab917d.png" alt="frame_chrome_mac_light_(44).png" width="880" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;I promised to create a fully functional dynamic metrics dashboard displaying e-commerce KPIs. Here we are, 10 minutes later, sitting with a lovely finished product.&lt;/p&gt;

&lt;p&gt;Now give me back my 🍺, thanks!&lt;/p&gt;

&lt;p&gt;I think Cube Cloud and Retool are a great match. With Cube Cloud, we want you to focus on creating business value without wasting time and effort on maintaining infrastructure. &lt;/p&gt;

&lt;p&gt;Retool has the same philosophy, building business applications for complex workflows with minimal effort to both create and maintain.&lt;/p&gt;

&lt;p&gt;Working in unison, they enable you to create breathtaking metrics dashboards and internal tools with almost no code whatsoever.&lt;/p&gt;

&lt;p&gt;You can &lt;a href="https://cube.dev/cloud?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=building-an-internal-dashboard-with-retool-and-cube"&gt;register for Cube Cloud&lt;/a&gt; right away, and check out &lt;a href="https://retool.com/"&gt;Retool&lt;/a&gt; as well!&lt;/p&gt;

&lt;p&gt;I'd love to hear your feedback about building metrics dashboards with Cube Cloud in the Cube Community Slack. &lt;a href="https://slack.cube.dev/"&gt;Click here to join&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Until next time, stay curious, and have fun coding. Also, feel free to &lt;a href="https://github.com/cube-js/cube.js"&gt;leave Cube a ⭐ on GitHub&lt;/a&gt; if you liked this article. ✌️&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>analytics</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Python features you'll want to repeat</title>
      <author>Vadim Kolobanov</author>
      <pubDate>Tue, 16 Nov 2021 15:07:37 +0000</pubDate>
      <link>https://dev.to/abstract/python-features-youll-want-to-repeat-418g</link>
      <guid>https://dev.to/abstract/python-features-youll-want-to-repeat-418g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#file-server-on-a-computer-with-mobile-access"&gt;
  &lt;/a&gt;
  File server on a computer with mobile access
&lt;/h2&gt;

&lt;p&gt;You can access your file system by running a file server on your computer. Navigate to the desired directory that you want to access and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# python version &amp;gt;=  3.X
&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;
&lt;span class="c1"&gt;# python version &amp;gt;=  3.X
&lt;/span&gt;&lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="c1"&gt;#for Linux
&lt;/span&gt;
&lt;span class="c1"&gt;# If Python version &amp;gt;= 2.X and &amp;lt; 3.X
&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;SimpleHTTPServer&lt;/span&gt;
&lt;span class="c1"&gt;#default port: 8000
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command starts a file server that can be accessed on the same network. To access your files on a mobile device, simply connect to the same network (Wi-Fi or use the phone's access point on a laptop). Now open the browser in your phone.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;computer&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check your IP by running - &lt;strong&gt;ifconfig&lt;/strong&gt;. Check your local IP&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;192.168.43.155:8000&lt;br&gt;
And on the mobile phone, you will see the current directory&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#convert-csv-to-json-1-line"&gt;
  &lt;/a&gt;
  Convert CSV to JSON 1 line
&lt;/h2&gt;

&lt;p&gt;If you're a programmer, you'll probably be lazy and want to automate pretty much everything you can, right?&lt;/p&gt;

&lt;p&gt;Don't worry, the python will cover you. There are a lot of things that you can automate in just 4-5 lines of code. From installing cron jobs and reminders to uploading your favorite YouTube videos, you can do it all with a few lines in python.&lt;/p&gt;

&lt;p&gt;Example - convert CSV to JSON&lt;br&gt;
You can convert a CSV file to JSON with just one command in Python!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s"&gt;"import csv,json;print json.dumps(list(csv.reader(open('your_csv_file.csv'))))"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replace it with &lt;em&gt;anyfile.csv&lt;/em&gt; and you will get JSON output!&lt;/p&gt;

&lt;p&gt;Easy, right?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#comics"&gt;
  &lt;/a&gt;
  Comics
&lt;/h2&gt;

&lt;p&gt;Yes, these are comics in python!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
 &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;antigravity&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--70i0PQ8m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/blg38mx4cjjnlkabjwl1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--70i0PQ8m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/blg38mx4cjjnlkabjwl1.png" alt="Comics" width="518" height="588"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#will-they-add-brackets-in-python"&gt;
  &lt;/a&gt;
  Will they add brackets in python?
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;braces&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;stdin&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nb"&gt;SyntaxError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;chance&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#a-simple-life-lesson"&gt;
  &lt;/a&gt;
  A simple life lesson
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;this&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;love&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;love&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;love&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;love&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;love&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;love&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;love&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;love&lt;/span&gt;  
&lt;span class="bp"&gt;True&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#put-on-heart-if-you-liked-it-and-you-learned-something-new"&gt;
  &lt;/a&gt;
  Put on Heart if you liked it and you learned something new!
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#you-can-also-follow-me-to-receive-notifications-about-new-interesting-articles"&gt;
  &lt;/a&gt;
  You can also follow &lt;a href="https://dev.to/vadimkolobanov"&gt;ME&lt;/a&gt; to receive notifications about new interesting articles.
&lt;/h3&gt;




&lt;h3&gt;
  &lt;a href="#faq"&gt;
  &lt;/a&gt;
  FAQ
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;I am a beginner, how should I learn Python?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Look into the following series:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/vadimkolobanov/series/15329"&gt;Learning Python&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/vadimkolobanov/series/15349"&gt;Step by Step to Junior&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/vadimkolobanov/series/15331"&gt;Ideas&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can we cooperate with you?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you have interesting projects and you need a python (web)developer, then you can contact me by &lt;strong&gt;&lt;a href="//titanyforgame@gmail.com"&gt;mail&lt;/a&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;a href="https://discord.gg/szEuVAhatW"&gt;discord&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href="https://www.linkedin.com/in/vadzim-hlobuz-0b44531b7/"&gt;LinkedIn&lt;/a&gt;&lt;/strong&gt; for cooperation&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connect to me on&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.facebook.com/neo.skarynsky"&gt;Write me on Face....oh...Meta&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/decodesperato"&gt;My Twitter&lt;/a&gt; &lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>jokes</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Introduction to Scalable Vector Graphics (SVG)</title>
      <author>Estee Tey</author>
      <pubDate>Tue, 16 Nov 2021 14:56:12 +0000</pubDate>
      <link>https://dev.to/lyqht/introduction-to-scalable-vector-graphics-svg-734</link>
      <guid>https://dev.to/lyqht/introduction-to-scalable-vector-graphics-svg-734</guid>
      <description>&lt;p&gt;This article is an enhanced version of the lunch &amp;amp; learn session that I presented recently on &lt;strong&gt;Introduction to Scalable Vector Graphics.&lt;/strong&gt; The slides can be found &lt;a href="https://lyqht.github.io/intro-to-svg-slides"&gt;here&lt;/a&gt;, where you can choose to download a PDF version. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are some iframes which have been excluded in this article e.g. the embedded presentation slides, because the Forem platform does not support them. But if you're keen to see them, check out the &lt;a href="https://esteetey.dev/introduction-to-svg"&gt;original article&lt;/a&gt; on my tech blog. &lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#what-is-svg"&gt;
  &lt;/a&gt;
  What is SVG?
&lt;/h2&gt;

&lt;p&gt;SVG refers to &lt;strong&gt;S&lt;/strong&gt;calable &lt;strong&gt;V&lt;/strong&gt;ector &lt;strong&gt;G&lt;/strong&gt;raphics, and it is a type of image format that is widely available on websites. Before we describe further on SVG, let's understand the importance of images and other image format types.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%F0%9F%96%BC-images"&gt;
  &lt;/a&gt;
  🖼 Images
&lt;/h3&gt;

&lt;p&gt;On a very high level, we can split images into 2 generic types: &lt;strong&gt;Raster&lt;/strong&gt; and &lt;strong&gt;Vector&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Raster images are drawn pixel by pixel, and may look different depending on the &lt;strong&gt;resolution/ pixel density&lt;/strong&gt; of the device. Vector images look good and crisp regardless of the resolution. Here's a Codepen to illustrate the difference between the two, try &lt;strong&gt;resizing&lt;/strong&gt; the different images! ✨&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lyqht/embed/RwZeZNm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The raster art was drawn by my boyfriend using Microsoft Paint (what a madlad! 😍), while the vectorized version are traced and coloured by me using Adobe Illustrator. It was a joint project for creating a couple tee design 😉&lt;/p&gt;

&lt;p&gt;I'm sure you're curious about this question - if vector images always look good, then why would we ever consider raster images? Well that's because of 2 practical factors. The first being the fact that the technology to support the &lt;em&gt;creation&lt;/em&gt; &amp;amp; &lt;em&gt;usage&lt;/em&gt; of raster images is much more accessible compared to SVG. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On the designers' side, there is generally more familiarity to work with tools to create raster art (Photoshop) than vector art (Illustrator).&lt;/li&gt;
&lt;li&gt;On the developer's side, most file uploaders e.g. for uploading avatar images, background banners etc, are implemented to be restricted to raster image formats only.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The second reason for preferring raster images over SVG is the &lt;strong&gt;file size&lt;/strong&gt;. Different image formats of the same visual will result in different file sizes, and thus different pages sizes. According to &lt;em&gt;&lt;a href="https://developers.google.com/speed/webp/docs/compression"&gt;Google Developers Page on Image Compression&lt;/a&gt;,&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Images comprise up to 60%-65% of bytes on most web pages and page size is a major factor in total rendering time. Page size is especially important for mobile devices, where smaller size images will help to save both bandwidth and battery life.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For &lt;strong&gt;different use cases,&lt;/strong&gt; we should be using different image file types. In the context of online images, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For Raster Image File Types, there's 4 types - GIF, PNG, JPG and WEBP.&lt;/li&gt;
&lt;li&gt;For Vector Image File Types, there's only SVG!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's a table for the description of the name of the file extensions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CnzlDbBh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637037579358/aSzqOFyrq.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CnzlDbBh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637037579358/aSzqOFyrq.jpeg" alt="Table showing file extensions" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
And here's a brief context behind how each raster file type came about.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;GIF

&lt;ul&gt;
&lt;li&gt;GIF was &lt;strong&gt;one of the first two graphics formats supported&lt;/strong&gt; by HTML, along with &lt;a href="https://en.wikipedia.org/wiki/X_BitMap"&gt;XBM&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PNG

&lt;ul&gt;
&lt;li&gt;PNG was created to improve upon and &lt;strong&gt;replace GIF&lt;/strong&gt; (Graphics Interchange Format) as an image-file format.&lt;/li&gt;
&lt;li&gt;It supports a better compression algorithm and also transparency in an image.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JPG

&lt;ul&gt;
&lt;li&gt;The original file extension for the Joint Photographic Expert Group File Format was &lt;code&gt;.jpeg&lt;/code&gt;. On Mac, this was supported but on Windows, all files required a &lt;strong&gt;3-letter file extension&lt;/strong&gt;. So, the file extension was shortened to &lt;code&gt;.jpg&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Eventually, with upgrades Windows also began to accept &lt;code&gt;.jpeg&lt;/code&gt;. However, many users were already used to ‘.jpg’, so both the 3-letter file extension and the 4-letter were commonly used, and still are.&lt;/li&gt;
&lt;li&gt;Today, the most commonly accepted and used form is the &lt;code&gt;.jpg&lt;/code&gt;, as &lt;strong&gt;many users were Windows users&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WEBP

&lt;ul&gt;
&lt;li&gt;WEBP is an image format type developed by Google to create files that are smaller for the same quality of JPEG, PNG, and GIF image formats.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that we know what image formats are commonly used for web images, now we can talk about what the different file types are intended for. Here's a table to illustrate the colour modes, compression algorithm supported, and thus the intended usage for different image file types.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FLkUadIh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637037980630/hNf4rc5cx.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FLkUadIh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637037980630/hNf4rc5cx.jpeg" alt="Intro to SVG_Page_14.jpg" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To add on to the table, here are reasons why you should use SVG.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-use-svg"&gt;
  &lt;/a&gt;
  Why use SVG?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;SVG is &lt;strong&gt;scalable&lt;/strong&gt;

&lt;ol&gt;
&lt;li&gt;You can stretch it however much, you still won't lose quality because of resolution issues.&lt;/li&gt;
&lt;li&gt;Responsive design is easier to be achieved!&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;SVG can be coded &lt;strong&gt;inline&lt;/strong&gt; 

&lt;ul&gt;
&lt;li&gt;this reduces the HTTP requests required to retrieve media.&lt;/li&gt;
&lt;li&gt;this also meant that the FOUC (Flash of Unstyled Content) problem is less likely to happen from media not being retrieved and styled before rendering in the page.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Developers can work with the individual nodes in the SVG to:

&lt;ol&gt;
&lt;li&gt;animate&lt;/li&gt;
&lt;li&gt;optimize for performance&lt;/li&gt;
&lt;li&gt;optimize for accessibility&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Animation and optimization are considered a little more advanced so they are not covered in this introductory article. I may conduct more talks/ write articles on these concepts in the future. 😊&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that we have a clearer picture of image file types and why we should use SVG, we can move on to more hands-on stuff! 🙌&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#how-to-create-svg"&gt;
  &lt;/a&gt;
  How to create SVG?
&lt;/h2&gt;

&lt;p&gt;In this article, I will show you 2 different ways of creating SVG. The first would be using code to create SVG XML and the other would be to use Figma, a design tool to create SVG. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-svg-with-code"&gt;
  &lt;/a&gt;
  Create SVG with Code
&lt;/h2&gt;

&lt;p&gt;For learning to create SVG with code, we will &lt;strong&gt;create 4 simple country flags from SEA&lt;/strong&gt; (Southeast Asia) - &lt;em&gt;Japan, Thailand, Vietnam and Singapore&lt;/em&gt;.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Country&lt;/th&gt;
&lt;th&gt;JP&lt;/th&gt;
&lt;th&gt;TH&lt;/th&gt;
&lt;th&gt;VN&lt;/th&gt;
&lt;th&gt;SG&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Image&lt;/td&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uY-aXW_N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/Flag_of_Japan_%25281870%25E2%2580%25931999%2529.svg/220px-Flag_of_Japan_%25281870%25E2%2580%25931999%2529.svg.png" width="220" height="154"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--URnJNgLf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/a/a9/Flag_of_Thailand.svg" width="880" height="587"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W8dsLY26--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/thumb/2/21/Flag_of_Vietnam.svg/2000px-Flag_of_Vietnam.svg.png" width="880" height="587"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1xbYPfYJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/thumb/4/48/Flag_of_Singapore.svg/2560px-Flag_of_Singapore.svg.png" width="880" height="587"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;What you will learn&lt;/td&gt;
&lt;td&gt;Rectangle &amp;amp; Circle&lt;/td&gt;
&lt;td&gt;Positioning&lt;/td&gt;
&lt;td&gt;Polygon, Polyline, Nesting of SVG&lt;/td&gt;
&lt;td&gt;Reusing SVG elements&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#1st-flag-japan"&gt;
  &lt;/a&gt;
  ⛳ 1st Flag: Japan
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u1cYoqVY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637041966658/lopW84pcW.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u1cYoqVY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637041966658/lopW84pcW.jpeg" alt="Slide on JP Flag" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The flag has 2 colors and 2 shapes. The color of SVG elements are indicated by the &lt;code&gt;fill&lt;/code&gt; property. The shapes are created by the following HTML tags.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;rect /&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;circle /&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the rectangle, the width and height properties are pretty self-explanatory. &lt;/p&gt;

&lt;p&gt;For the circle, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;(cx, cy)&lt;/code&gt; are x,y coordinates of the centre point of the circle&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;r&lt;/code&gt; represents the radius of the circle&lt;/li&gt;
&lt;li&gt;Hence to make the circle positioned in the center, we set &lt;code&gt;(cx, cy)&lt;/code&gt; to be both a &lt;em&gt;relative&lt;/em&gt; 50%. If you prefer &lt;em&gt;absolute units&lt;/em&gt;, you could set the rect's width=300 and circle's cx=150 instead.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rect&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"100%"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"100%"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"white"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;circle&lt;/span&gt; &lt;span class="na"&gt;cx=&lt;/span&gt;&lt;span class="s"&gt;"50%"&lt;/span&gt; &lt;span class="na"&gt;cy=&lt;/span&gt;&lt;span class="s"&gt;"50%"&lt;/span&gt; &lt;span class="na"&gt;r=&lt;/span&gt;&lt;span class="s"&gt;"60"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"#BC002D"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2nd-flag-thailand"&gt;
  &lt;/a&gt;
  ⛳ 2nd Flag: Thailand
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VfruOjRk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637038738073/LYxYYiPAP.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VfruOjRk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637038738073/LYxYYiPAP.jpeg" alt="Slide on TH Flag" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This simple example has only 5 rectangles, and is meant to introduce you to &lt;strong&gt;positioning&lt;/strong&gt;. Previously we have the circle centered in the middle of the rectangle by setting the &lt;code&gt;(cx, cy)&lt;/code&gt; coordinates. For other elements, usually you can set the &lt;code&gt;(x, y)&lt;/code&gt; coordinates directly. These &lt;code&gt;(x, y)&lt;/code&gt; coordinates always refer to the &lt;strong&gt;top left coordinate&lt;/strong&gt; of the element&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rect&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"100%"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"20%"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rect&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"100%"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"20%"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"20%"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"white"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rect&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"100%"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"20%"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"40%"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rect&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"100%"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"20%"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"60%"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"white"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rect&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"100%"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"20%"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"80%"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#3rd-flag-vietnam"&gt;
  &lt;/a&gt;
  ⛳ 3rd Flag: Vietnam
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c5AMo7uE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637038742204/QUUv0b2aQ.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c5AMo7uE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637038742204/QUUv0b2aQ.jpeg" alt="Slide on VN Flag" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are 2 shapes here - a rectangle and a star. There isn't a &lt;code&gt;&amp;lt;star /&amp;gt;&lt;/code&gt; element unfortunately, but there is a generic &lt;code&gt;&amp;lt;polygon /&amp;gt;&lt;/code&gt; element that we can use to create a star. W3C provides &lt;a href="https://www.w3schools.com/graphics/svg_examples.asp"&gt;many examples of shapes&lt;/a&gt;, so I will take their star example and use it here.&lt;/p&gt;

&lt;p&gt;Example of creating a star with the polygon element&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;polygon&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"star"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"yellow"&lt;/span&gt;
      &lt;span class="na"&gt;points=&lt;/span&gt;&lt;span class="s"&gt;"100,10 40,198 190,78 10,78 160,198"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, if we try to preview the svg with this star, it will get cut off. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m5MyLGyt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/lyqht/intro-to-svg-slides/main/public/svg/shapes/star-cutoff.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m5MyLGyt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/lyqht/intro-to-svg-slides/main/public/svg/shapes/star-cutoff.png" width="300" height="150"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is because the star is bigger than the SVG's &lt;strong&gt;default width &amp;amp; height&lt;/strong&gt; of &lt;strong&gt;300×150&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;To fix this, we could adjust the coordinates one by one but that's painful so let's not do that 😅. Instead, let's change the &lt;code&gt;viewbox&lt;/code&gt; property. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;⚠ The &lt;code&gt;viewbox&lt;/code&gt; property is the most important thing you have to know about SVG.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;viewbox&lt;/code&gt; can be declared by giving it a min-x, min-y, width and height. For us to see the star entirely, the height needs to ≥198, since the &lt;em&gt;biggest y-coordinate&lt;/em&gt; we have in the SVG is 198. Let's also give the star a little padding, so we will increase both the width and height of the SVG viewbox.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;viewbox=&lt;/span&gt;&lt;span class="s"&gt;'0 0 300 300'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;polygon&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"yellow"&lt;/span&gt; &lt;span class="na"&gt;points=&lt;/span&gt;&lt;span class="s"&gt;"100,10 40,198 190,78 10,78 160,198"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can see the star&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CPs4RzJr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/lyqht/intro-to-svg-slides/main/public/svg/shapes/star.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CPs4RzJr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/lyqht/intro-to-svg-slides/main/public/svg/shapes/star.png" width="150" height="150"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For a more in-depth explanation on scaling SVG, you can refer to this nifty &lt;a href="https://css-tricks.com/scale-svg/"&gt;article by CSS-Tricks&lt;/a&gt;. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's move on to create the actual VN flag.&lt;/p&gt;

&lt;p&gt;In the flag, the star actually looks a lot smaller than what we have created just now with the padding. We can modify the &lt;code&gt;viewbox&lt;/code&gt; of this star so that it looks smaller, but at the same time, we want the flag to still look like its original shape of a small rectangle that follows the default &lt;code&gt;viewbox&lt;/code&gt; of 300x150.&lt;/p&gt;

&lt;p&gt;There're different ways of to implement the flag, but here, I will introduce you to a new concept - &lt;strong&gt;Nesting of SVG elements.&lt;/strong&gt; We can enclose the SVG element for the star within another SVG element tag. That way, we can achieve the scaling down of the star element while keeping the flag's size. We will also add some &lt;code&gt;(x, y)&lt;/code&gt; offsets so that the star looks centered.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;rect&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"100%"&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"100%"&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="na"&gt;viewBox&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"100 0 600 600"&lt;/span&gt; &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"25%"&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"25%"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;polygon&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"yellow"&lt;/span&gt;
      &lt;span class="na"&gt;points&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"100,10 40,198 190,78 10,78 160,198"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Now that you understand how the &lt;code&gt;&amp;lt;polygon /&amp;gt;&lt;/code&gt; element works, you can also learn about the &lt;code&gt;&amp;lt;polyline /&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9M-UTps_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637050449117/Jpe1Egmfp.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9M-UTps_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637050449117/Jpe1Egmfp.jpeg" alt="Intro to SVG_Page_21.jpg" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The only difference polygon and polyline is that the polygon is a &lt;strong&gt;closed path&lt;/strong&gt; while the polyline is an &lt;strong&gt;open path&lt;/strong&gt; - that's why if you draw the 2 shapes in SVG and give them stroke colors, you can tell the difference. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In &lt;code&gt;&amp;lt;polyline /&amp;gt;&lt;/code&gt;, the last point is not connected to the first point&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;&amp;lt;polygon /&amp;gt;&lt;/code&gt;, the last point is connected to the first point&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#4th-flag-sg"&gt;
  &lt;/a&gt;
  ⛳ 4th Flag: SG
&lt;/h3&gt;

&lt;p&gt;For the 4th country flag, we are creating my home nation, Singapore! 😊&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eEFM0Cwo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637038744584/pOqTH2pCO.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eEFM0Cwo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637038744584/pOqTH2pCO.jpeg" alt="Slide on SG Flag" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The flag comprises of 2 rectangles, 5 stars and 1 moon. To create this flag, it requires the combination of concepts that we have learnt from the previous flags.&lt;/p&gt;

&lt;p&gt;But how do we draw a moon? Well, when it comes to art, we don't always have to follow the semantic way of creating things. We can just create 2 overlapping circles where the top circle is red and the bottom circle is white, so that the result looks like a moon 🌘&lt;/p&gt;

&lt;p&gt;Since we have already created a star before, let's reuse it and just change the fill to white. To reuse an element, we can declare &lt;strong&gt;definitions&lt;/strong&gt; in a &lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt; tag and &lt;strong&gt;use&lt;/strong&gt; them using a &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; tag. You can see that this becomes helpful as we reuse the same element multiple times.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;defs&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;polygon&lt;/span&gt; 
            &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"white-star"&lt;/span&gt; 
            &lt;span class="na"&gt;points=&lt;/span&gt;&lt;span class="s"&gt;"100,10 40,198 190,78 10,78 160,198"&lt;/span&gt; 
            &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"white"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/defs&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rect&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"100%"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"50%"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rect&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"100%"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"50%"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"50%"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"white"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;circle&lt;/span&gt; &lt;span class="na"&gt;cx=&lt;/span&gt;&lt;span class="s"&gt;'15%'&lt;/span&gt; &lt;span class="na"&gt;cy=&lt;/span&gt;&lt;span class="s"&gt;'25%'&lt;/span&gt; &lt;span class="na"&gt;r=&lt;/span&gt;&lt;span class="s"&gt;'30'&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;'white'&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;circle&lt;/span&gt; &lt;span class="na"&gt;cx=&lt;/span&gt;&lt;span class="s"&gt;'20%'&lt;/span&gt; &lt;span class="na"&gt;cy=&lt;/span&gt;&lt;span class="s"&gt;'25%'&lt;/span&gt; &lt;span class="na"&gt;r=&lt;/span&gt;&lt;span class="s"&gt;'30'&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;'red'&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"600 -100 1000 1800"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;use&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#white-star"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;use&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#white-star"&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;"-20%"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"10%"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;use&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#white-star"&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;"20%"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"10%"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;use&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#white-star"&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;"-12.5%"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"22%"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;use&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#white-star"&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;"12.5%"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"22%"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;🎉 Good job reaching here thus far!&lt;/p&gt;

&lt;p&gt;🥳 We managed to create SVGs of &lt;strong&gt;4 different SEA country flags using code!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;👉 You can find all the &lt;code&gt;.svg&lt;/code&gt; files covered &lt;a href="https://github.com/lyqht/intro-to-svg-slides/tree/main/public/svg/flags"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the rest of the article, I promise you the content would be much &lt;em&gt;lighter&lt;/em&gt;! 😊 Now, let's move on to creating SVG graphics using &lt;strong&gt;Design Tools&lt;/strong&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#create-svg-with-design-tools"&gt;
  &lt;/a&gt;
  🎨 Create SVG with Design Tools
&lt;/h2&gt;

&lt;p&gt;Common Design Tools used to create SVG include&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://www.figma.com"&gt;Figma&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.sketch.com/"&gt;Sketch&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.adobe.com/sg/products/illustrator.html"&gt;Illustrator&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Out of the 3 options, Figma is free and also accessible on any platform, so I will share with you a very short intro on Figma on creating graphics using &lt;strong&gt;Paths,&lt;/strong&gt; and &lt;strong&gt;exporting them as SVG&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;👉 &lt;strong&gt;Duplicate the Figma demo file &lt;a href="https://www.figma.com/community/file/1042361058690524745/intro-to-svg-shapes"&gt;here&lt;/a&gt;&lt;/strong&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;⭐ Pro tip: To edit any path, click on a path and press the 'Enter' key.&lt;br&gt;
Try playing around with the paths that are in the file!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#straight-paths"&gt;
  &lt;/a&gt;
  Straight Paths
&lt;/h3&gt;

&lt;p&gt;Using the &lt;strong&gt;Pen Tool (P key) 🖊&lt;/strong&gt;, you can easily create straight paths and form polygons, polylines and shapes like the low-poly bear!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eRoPfwoi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637042456734/PPAXvKG_S.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eRoPfwoi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637042456734/PPAXvKG_S.gif" alt="Figma-Pentool-demo.gif" width="360" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#curved-paths"&gt;
  &lt;/a&gt;
  Curved Paths
&lt;/h3&gt;

&lt;p&gt;After creating straight paths with the Pen Tool, you can use the &lt;strong&gt;Bend Tool (Ctrl Key)&lt;/strong&gt; to create a &lt;strong&gt;Bezier Curve&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tjTe0r8Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637042292395/-Lg_hGg97.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tjTe0r8Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637042292395/-Lg_hGg97.png" alt="Bezier Curve Handles On Figma" width="187" height="151"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Handles will appear, connected to the start and end coordinate of the path that you have selected. This is how shapes like the bunny's round head &amp;amp; ears are created!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AH25hibj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637042606762/HtxhCtyTq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AH25hibj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637042606762/HtxhCtyTq.gif" alt="Figma-BendTool-demo.gif" width="360" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another type of curved Path would be the &lt;strong&gt;Arc&lt;/strong&gt;. After creating an Ellipse, you can hover over the ellipse path to use the &lt;strong&gt;Arc Tool&lt;/strong&gt; to create an Arc. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TEgJDfW6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637042177526/XmtlqpiaA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TEgJDfW6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637042177526/XmtlqpiaA.gif" alt="Figma_Arc_Demo.gif" width="360" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exporting-the-svg"&gt;
  &lt;/a&gt;
  Exporting the SVG
&lt;/h3&gt;

&lt;p&gt;Once you're done creating your fancy shapes and graphics, you can choose to export them easily as a SVG file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s5VTN6Lb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637051786561/MiG6y2CE4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s5VTN6Lb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637051786561/MiG6y2CE4.png" alt="Exporting SVG" width="691" height="732"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;That sums up how you can create SVG from scratch either using Code or Design Tools! Personally I would recommend you to create graphics using Design Tools because having GUI just makes it so much easier to &lt;strong&gt;visualize what you're actually doing&lt;/strong&gt;. The downside of it is that you have less control over the result SVG element nodes inside your graphic. This may pose a problem if you try to do animation or optimization later on, but if you're just doing &lt;strong&gt;static&lt;/strong&gt; SVG, it's much easier to just use a design tool to create SVG. &lt;/p&gt;

&lt;p&gt;Of course, if you don't want to create SVG from scratch at all, there are plenty of online tools to generate SVG of common shapes for us!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#generate-svg"&gt;
  &lt;/a&gt;
  Generate SVG
&lt;/h2&gt;

&lt;p&gt;🔖 There's an &lt;a href="https://www.smashingmagazine.com/2021/03/svg-generators"&gt;extensive list of SVG generators by Smashing Magazine&lt;/a&gt; that you can check out.&lt;/p&gt;

&lt;p&gt;During the talk, I have shown a demo for just two generators that were listed there because I found them relevant to what I've been reading recently.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://squircley.app/"&gt;Squicley&lt;/a&gt; → provides configuration for you to generate SVG squircles, a shape that is similar to rounded circles but not identical. Thought this was a pretty funny concept of shape to introduce to you all 😄 Apparently, &lt;a href="https://99percentinvisible.org/article/circling-square-designing-squircles-instead-rounded-rectangles/"&gt;this is what makes Apple hardware more distinct than others&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WYCvMR2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://99percentinvisible.org/app/uploads/2017/10/not-apple-728x347.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WYCvMR2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://99percentinvisible.org/app/uploads/2017/10/not-apple-728x347.png" alt="https://99percentinvisible.org/app/uploads/2017/10/not-apple-728x347.png" width="728" height="347"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://SVGBackgrounds.com"&gt;SVGBackgrounds&lt;/a&gt; → provides you many SVG backgrounds you can customize to be used for your next project. I also previously made a Tweet thread on how you can use it and why you should use it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GuSMczH9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/FA0DK5AVUAQzK_G.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ofJ2lUIk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1441783883456942080/vV37mSqv_normal.jpg" alt="Estee Tey 🐧🌻 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Estee Tey 🐧🌻
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @estee_tey
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Say goodbye to blurry, pixelated pattern backgrounds 😲&lt;br&gt;&lt;br&gt;SVGBackgrounds by &lt;a href="https://twitter.com/MattVisiwig"&gt;@MattVisiwig&lt;/a&gt; is a great tool for both no-coders &amp;amp; devs to easily create backgrounds that look good ✨ no matter its size.&lt;br&gt;&lt;br&gt;Here are the features at a glance 👇&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/design"&gt;#design&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/css"&gt;#css&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/svg"&gt;#svg&lt;/a&gt; &lt;br&gt;&lt;a href="https://twitter.com/hashtag/DEVCommunity"&gt;#DEVCommunity&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/NoCode"&gt;#NoCode&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      00:00 AM - 04 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1444814549341782018" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1444814549341782018" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1444814549341782018" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Aside from generating SVG, we can also extract SVG that we see on websites using the Inspector ✨&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#extract-svg-from-websites"&gt;
  &lt;/a&gt;
  Extract SVG from websites
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;⚠️ &lt;strong&gt;Important Note&lt;/strong&gt;: Please check if you can use the extracted SVG without attribution.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For extracting SVG from websites, we will use our good old &lt;a href="https://esteetey.dev/navigate-the-frontend-easily-with-the-inspector"&gt;Element Inspector&lt;/a&gt; to do it! Let's try it out on &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktoberfest's website&lt;/a&gt; since they have really beautiful flowers this year 🌺&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cdn.hashnode.com/res/hashnode/image/upload/v1637061717448/lr_8B12KI.gif"&gt;Hacktoberfest-Inspector-Demo GIF&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ctrl+F &lt;code&gt;"&amp;lt;svg&amp;gt;"&lt;/code&gt; to find the SVG element that you want. &lt;/li&gt;
&lt;li&gt;Once the highlighted area matches the SVG that you're targeting, right click the element and choose "Copy Element"&lt;/li&gt;
&lt;li&gt;The result will be something like this, which you can paste in a new &lt;code&gt;.svg&lt;/code&gt; file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Op6W4Og0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/lyqht/intro-to-svg-slides/main/public/svg/hacktoberfest.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Op6W4Og0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/lyqht/intro-to-svg-slides/main/public/svg/hacktoberfest.svg" alt="Hacktoberfest flowers svg" width="200" height="600"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#bonus-helpful-tools-for-svg"&gt;
  &lt;/a&gt;
  🌟 Bonus Helpful Tools for SVG
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Optimization of SVG file size: &lt;a href="https://jakearchibald.github.io/svgomg/"&gt;SVGOMG&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you use design tools to create SVG or extract SVG from websites, chances are that most of them are not optimized in file sizes.&lt;/li&gt;
&lt;li&gt;There's a handy tool called &lt;a href="https://jakearchibald.github.io/svgomg/"&gt;SVGOMG&lt;/a&gt; which has many features you can toggle to help you optimize your file size, and you don't have to understand how all of them work.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can also preview the result and the result file size at the circled area ✨&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--91k6m4D4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637042863065/yHOCa9jBO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--91k6m4D4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637042863065/yHOCa9jBO.png" alt="Extract-SVG-From-Hacktoberfest-Website-Demo.png" width="880" height="439"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Visual Studio Code Extension: &lt;a href="https://marketplace.visualstudio.com/items?itemName=jock.svg"&gt;SVG&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provides auto-completion, SVG Live Preview and Export PNG&lt;/li&gt;
&lt;li&gt;You can also minify the SVG code and remove unnecessary code
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;For React Devs: &lt;a href="https://svg2jsx.com/"&gt;Convert SVG to JSX&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can paste SVG code here to be converted to either functional or class component syntax.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#frequently-asked-questions-faq"&gt;
  &lt;/a&gt;
  Frequently asked questions (FAQ)
&lt;/h2&gt;

&lt;p&gt;Q) I see &lt;code&gt;xmlns&lt;/code&gt; attributes are commonly used on SVG elements, but you didn't use them in your talk at all, are they actually needed?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;svg xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg"&amp;gt;&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A) If you are using them as inline SVG, you don't need to include those. You only need those attributes if you are embedding them using the &lt;strong&gt;img element&lt;/strong&gt;. Here's a useful &lt;a href="https://stackoverflow.com/questions/18467982/are-svg-parameters-such-as-xmlns-and-version-needed"&gt;StackOverflow thread&lt;/a&gt; that answers this.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#exploring-further"&gt;
  &lt;/a&gt;
  Exploring further
&lt;/h2&gt;

&lt;p&gt;As you try to experiment with SVG in code further by using JavaScript and so on, you will start to realize that creating graphics in code requires &lt;strong&gt;a lot of math&lt;/strong&gt; 😂&lt;/p&gt;

&lt;p&gt;Here are some nice tutorials for you to try out to create more complex SVG that include good explanations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.aleksandrhovhannisyan.com/blog/svg-tutorial-how-to-code-svg-icons-by-hand/"&gt;SVG Tutorial: How to Code SVG Icons by Hand&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/thormeier/how-to-simply-create-beautiful-rosette-patterns-with-javascript-and-svg-3h4i"&gt;Create beautiful rosette patterns with JavaScript 🖌️🌼&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://uxdesign.cc/star-rating-make-svg-great-again-d4ce4731347e"&gt;Star Rating — Make SVG Great Again&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#thats-a-wrap-folks"&gt;
  &lt;/a&gt;
  That's a wrap folks! 🎉
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qeev9EmH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/eoM1uCVuXtkAAAAM/yay-excited.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qeev9EmH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/eoM1uCVuXtkAAAAM/yay-excited.gif" alt="birds excited" width="220" height="124"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading, hope you enjoyed the article! If you have any questions or feedback for me, please leave them below, I'll attend to them shortly 😊&lt;/p&gt;

&lt;p&gt;If you find the article awesome, hit the &lt;em&gt;reactions&lt;/em&gt; 🧡 and &lt;em&gt;share&lt;/em&gt; it 🐦~&lt;/p&gt;

&lt;p&gt;To stay updated whenever I post new stuff, follow me on &lt;a href="https://twitter.com/estee_tey"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>svg</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
