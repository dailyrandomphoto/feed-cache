<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Beyond a JPEG: NFT as a Primary Key</title>
      <author>Austin Vance</author>
      <pubDate>Wed, 12 Jan 2022 14:17:10 +0000</pubDate>
      <link>https://dev.to/focusedlabs/beyond-a-jpeg-nft-as-a-primary-key-1nfo</link>
      <guid>https://dev.to/focusedlabs/beyond-a-jpeg-nft-as-a-primary-key-1nfo</guid>
      <description>&lt;p&gt;These days, we most often see NFTs used to record the ownership information of &lt;a href="https://www.bloomberg.com/news/articles/2021-03-11/beeple-everydays-nft-sells-at-art-auction-for-60-million-paid-in-ether"&gt;artwork&lt;/a&gt;. There are the pie-in-the-sky folks who think NFTs will become a new standard for ownership for everything from &lt;a href="https://www.forbes.com/sites/nataliakarayaneva/2021/11/24/real-estate-nfts-how-it-began/?sh=1f3f8d033b12"&gt;houses&lt;/a&gt;, to &lt;a href="https://cointelegraph.com/news/rapper-nas-to-let-fans-own-part-of-his-music-through-nfts"&gt;music&lt;/a&gt;, to &lt;a href="https://www.bbc.com/news/technology-59568929"&gt;in-game items&lt;/a&gt; - only time will tell.&lt;/p&gt;

&lt;p&gt;NFTs are powerful, but they ​get a bad rap. I don't have strong opinions about the disruptive nature of NFTs or how they affect art, games, or anything else. I do see that the "&lt;em&gt;Non-Fungible&lt;/em&gt;" attribute of an NFT has some remarkable properties that allow smart contract developers to store state in a permissionless manner and enable that state to be transferred or sold.&lt;br&gt;
​&lt;br&gt;
Ok, I admit that's rather abstract and confusing. Since this is a dev blog, let's build an app that uses an NFT contract and holds information specific to a user.&lt;/p&gt;

&lt;p&gt;Before we dive in, this is not revolutionary. Several projects already do this. The &lt;a href="https://mai.finance"&gt;QiDAO&lt;/a&gt; uses &lt;a href="https://docs.mai.finance/functions/smart-contract-functions"&gt;NFTs to manage loan ownership&lt;/a&gt; and &lt;a href="https://uniswap.org/blog/uniswap-v3"&gt;Uniswap V3&lt;/a&gt; uses NFTs to manage a Liquidity Position. Before the release of V3, Uniswap recorded Liquidity by issuing the liquidity provider an LP Token. These tokens are an &lt;a href="https://ethereum.org/en/developers/docs/standards/tokens/erc-20/"&gt;ERC-20&lt;/a&gt; token, and ERC-20's are fungible. Fungibility means that one token is the same as another. Think if someone hands you a 1€ note. That note is the same as the other 1€'s in your wallet. The ERC-20's are 100% transferable, farmable, and sellable, but they cannot store any secondary information about a Liquidity Position.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NFTs allow for encapsulation and transfer and sale of metadata in a permissionless manner&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Uniswap V3 enables the addition of metadata to a liquidity position. Instead of issuing an ERC-20 token to represent a liquidity position, they issue an &lt;a href="https://ethereum.org/en/developers/docs/standards/tokens/erc-721/"&gt;ERC-721 (NFT)&lt;/a&gt;. With that ERC-721, Uniswap can now add unique features (like impermanent loss protection) to each liquidity position.&lt;/p&gt;

&lt;p&gt;How cool is that! But how does it work? Let's build it.&lt;/p&gt;



&lt;p&gt;Without giving too much background, at Focused Labs, we offer a blog bounty and a bonus for blogging streaks. The more frequently the company blogs, the larger the blog bounty becomes.&lt;/p&gt;

&lt;p&gt;I want to move this bounty from a spreadsheet to the blockchain and use an NFT to identify wallets contributing a blog to the streak.&lt;/p&gt;

&lt;p&gt;We will need an ERC-721 contract. Let's use &lt;a href="https://openzeppelin.com/"&gt;OpenZeppelin&lt;/a&gt; to enforce the correct interface for our NFT.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="c1"&gt;// contracts/FocusedBlogPost.sol
// SPDX-License-Identifier: MIT
&lt;/span&gt;&lt;span class="k"&gt;pragma&lt;/span&gt; &lt;span class="n"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"@openzeppelin/contracts/token/ERC721/ERC721.sol"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"@openzeppelin/contracts/utils/Counters.sol"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;FocusedBlogPost&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;ERC721&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Counters&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Counters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Counters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;_tokenIds&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;const&lt;/span&gt; 
    &lt;span class="k"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;ERC721&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"FocusedBlogPost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"FCSD"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;publishBlog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;blogger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt;
        &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_tokenIds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;newItemId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_tokenIds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;_mint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blogger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newItemId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;newItemId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whenever we call &lt;code&gt;publishBlog()&lt;/code&gt; with an address, we will mint and transfer an NFT to the blogger.&lt;/p&gt;

&lt;p&gt;A new blog must be published every two weeks to earn a streak. Each week at least one new blog post goes out our streak counter increases. This streak counter is a multiple on our Blog Bounty! Now let’s set up our contract to add logic around a streak.&lt;/p&gt;

&lt;p&gt;Let's start by tracking when new posts are published.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;FocusedBlogPost&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;ERC721&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...
&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;BlogPost&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;postUri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;publishedAt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;originalAuthor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// ...
&lt;/span&gt;
    &lt;span class="c1"&gt;// two weeks in seconds
&lt;/span&gt;    &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="k"&gt;constant&lt;/span&gt; &lt;span class="n"&gt;twoWeeks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// map of NFT ids to Blog Posts
&lt;/span&gt;    &lt;span class="k"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;BlogPost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;blogPosts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;publishBlog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;blogger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="k"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;postUri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt;
    &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ...
&lt;/span&gt;        &lt;span class="n"&gt;_mint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newPostId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;blogPosts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;newPostId&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BlogPost&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="n"&gt;postUri&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;postUri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;publishedAt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;originalAuthor&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blogger&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="c1"&gt;// ...
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now every time a new blog post is published, we not only create an NFT for the post, but we record when it was published and keep track of the original author.&lt;/p&gt;

&lt;p&gt;We still don't track a streak, though, so let's add a new method to our token contract.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;FocusedBlogPost&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;ERC721Enumerable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;SafeMath&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// ...
&lt;/span&gt;
     &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getCurrentStreak&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;view&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;streak&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;totalSupply&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;totalSupply&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;streak&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;totalSupply&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;BlogPost&lt;/span&gt; &lt;span class="k"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;currentBlog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;blogPosts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tokenByIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
            &lt;span class="n"&gt;BlogPost&lt;/span&gt; &lt;span class="k"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;previousBlog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;blogPosts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tokenByIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentBlog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;publishedAt&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;previousBlog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;publishedAt&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;twoWeeks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="n"&gt;streak&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;streak&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use OpenZeppelin's &lt;code&gt;ERC721Enumerable&lt;/code&gt;; this gives us a few new methods to loop through each NFT we have minted. Then we can check the timestamp of each &lt;code&gt;BlogPosts.publishedAt&lt;/code&gt;. Pretty easy, right?!&lt;/p&gt;

&lt;p&gt;In a future part of this series, we will continue to add features to the NFT, allowing for payouts to streak contributors and adding validations like only increasing a streak if the author isn't in the current streak.&lt;/p&gt;




&lt;p&gt;Although this example is a bit contrived, honestly, why would someone want to transfer their streak? I think the practical applications are straightforward.&lt;/p&gt;

&lt;p&gt;The NFT can act as a unique identifier, recording metadata about an event or individual actions. A dApp can then use that NFT to make decisions like providing access to a "secret" website or paying a dividend for contributing a blogpost.&lt;/p&gt;

&lt;p&gt;Source code is available on &lt;a href="https://github.com/focused-labs/NFTs-for-more-than-just-JPEGs"&gt;GitHub&lt;/a&gt; where there is a complete example with passing tests.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>blockchain</category>
      <category>programming</category>
      <category>testing</category>
    </item>
    <item>
      <title>Detect crashes in your Kubernetes cluster using kwatch and Slack</title>
      <author>Andrew Ashraf Sabry </author>
      <pubDate>Wed, 12 Jan 2022 13:54:45 +0000</pubDate>
      <link>https://dev.to/andrew44ashraf/detect-crashes-in-your-kubernetes-cluster-using-kwatch-and-slack-487d</link>
      <guid>https://dev.to/andrew44ashraf/detect-crashes-in-your-kubernetes-cluster-using-kwatch-and-slack-487d</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-kwatch"&gt;
  &lt;/a&gt;
  What is &lt;a href="https://kwatch.dev/"&gt;kwatch&lt;/a&gt;?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/abahmed/kwatch"&gt;kwatch&lt;/a&gt; is an open-source project that started late in 2021.&lt;br&gt;
It aims to help you monitor all changes in your Kubernetes(K8s) cluster,&lt;br&gt;
detect crashes in your running apps, and publish notifications to your favorite channels (Slack, Discord, etc.) in real-time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In this tutorial, I will help you setup and deploy kwatch on your Kubernetes cluster.&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Plus, integrate with Slack to get notified on a channel when there is a crash in your apps.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#configure-kwatch-with-slack"&gt;
  &lt;/a&gt;
  Configure kwatch with Slack
&lt;/h2&gt;

&lt;p&gt;First of all, we need to get the webhook URL of the channel you want the notification to be received on it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you know how to generate the webhook URL you can escape this part and go to the configuration section.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1: create a new slack channel (if you don't have one already)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nQ2nV642--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r77dfouinwbsx867a14h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nQ2nV642--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r77dfouinwbsx867a14h.png" alt="new Slack channel" width="700" height="238"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Go to &lt;a href="https://api.slack.com/apps"&gt;https://api.slack.com/apps&lt;/a&gt; and create an app from scratch and connect it with your workplace&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9kqxRUft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/stck5fyrvz0eqosb8ijf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9kqxRUft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/stck5fyrvz0eqosb8ijf.png" alt="creating a new Slack app" width="700" height="271"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Create an incoming webhook and activate it&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HUTUAqp9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7vmkvvezfpv1ygz8d9b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HUTUAqp9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7vmkvvezfpv1ygz8d9b.png" alt="adding a webhook" width="700" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Connect it to you channel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b1ILNwCY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ugz7twf44qv69i3jjiqy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b1ILNwCY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ugz7twf44qv69i3jjiqy.png" alt="connecting your webhook to your channel" width="700" height="542"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally we have the webhook URL for the channel!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5: Get Configuration&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Get the configuration template&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl  &lt;span class="nt"&gt;-L&lt;/span&gt; https://raw.githubusercontent.com/abahmed/kwatch/v0.3.0/deploy/config.yaml &lt;span class="nt"&gt;-o&lt;/span&gt; config.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 6: Edit config.yaml with the corresponding configs&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Namespace&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kwatch&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ConfigMap&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kwatch&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kwatch&lt;/span&gt;
&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;config.yaml&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
    &lt;span class="s"&gt;alert:&lt;/span&gt;
      &lt;span class="s"&gt;slack:&lt;/span&gt;
        &lt;span class="s"&gt;webhook: WEBHOOK_URL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 7: Apply Configuration&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; config.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#deploy-kwatch"&gt;
  &lt;/a&gt;
  Deploy kwatch
&lt;/h2&gt;

&lt;p&gt;Deploy &lt;a href="https://kwatch.dev/"&gt;kwatch&lt;/a&gt; on your cluster with one command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; https://raw.githubusercontent.com/abahmed/kwatch/v0.3.0/deploy/deploy.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After deploying you will get notified on the channel that kwatch has started successfully. Now, &lt;a href="https://kwatch.dev/"&gt;kwatch&lt;/a&gt; is monitoring your apps!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--knMBDnt6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4eqrerz081cd2su68an.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--knMBDnt6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4eqrerz081cd2su68an.png" alt="kwatch just started" width="700" height="76"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is an example of kwatch messages when a crash is detected.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZpGlBNDV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79d0j8jd6j4kwcfzo0dh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZpGlBNDV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79d0j8jd6j4kwcfzo0dh.png" alt="kwatch detected a crash" width="700" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can find more documentation about kwatch &lt;a href="https://kwatch.dev/docs"&gt;Here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you like kwatch, give it a star on &lt;a href="https://github.com/abahmed/kwatch"&gt;GitHub&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We are happy to hear feedback from you and if you have any request, or suggestion don't hesitate to ping us on our channels (&lt;a href="https://discord.gg/kzJszdKmJ7"&gt;Discord&lt;/a&gt;, &lt;a href="https://github.com/abahmed/kwatch"&gt;GitHub&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>monitoring</category>
      <category>devops</category>
      <category>docker</category>
    </item>
    <item>
      <title>I started to write on english, this is why</title>
      <author>Fernando Cutire 🔨</author>
      <pubDate>Wed, 12 Jan 2022 13:50:32 +0000</pubDate>
      <link>https://dev.to/fernandocutire/i-started-to-write-on-english-this-is-why-4kce</link>
      <guid>https://dev.to/fernandocutire/i-started-to-write-on-english-this-is-why-4kce</guid>
      <description>&lt;p&gt;When I thought about this topic, I said to myself “Writing in English is hard, because it’s not my native language”&lt;/p&gt;

&lt;p&gt;It’s hard but is also an opportunity. I needed to start practicing my English. And guess what was the way?&lt;/p&gt;

&lt;p&gt;I said, “Ok I will start to write in English because almost every content I consume online is in English and I have read and watched a lot”&lt;/p&gt;

&lt;p&gt;But of course writing is challenging.&lt;/p&gt;

&lt;p&gt;So in this article, I teach you what it’s working for me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-is-hard-thinking-in-a-different-language"&gt;
  &lt;/a&gt;
  Writing is hard: Thinking in a different language
&lt;/h2&gt;

&lt;p&gt;Of course, I could use the easy way who was to just use translate apps.&lt;/p&gt;

&lt;p&gt;But this was enough?&lt;/p&gt;

&lt;p&gt;I have been using google translate with my Spanish-based articles. And it worked weird.&lt;/p&gt;

&lt;p&gt;It doesn´t have that consistency or as I want to call “soul”.&lt;/p&gt;

&lt;p&gt;It seemed like just different words and doesn’t seem to be written by a human.&lt;/p&gt;

&lt;p&gt;So another thing that happens to me, was to begin writing in English. &lt;/p&gt;

&lt;p&gt;And maybe I will sound better, you can judge by yourself.&lt;/p&gt;

&lt;p&gt;Of course, my grammar is not the best, but anyways here I am. And I will continue to improve.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-writing-equals-better-writing-why-consistency-over-time-matters"&gt;
  &lt;/a&gt;
  More writing equals better writing: Why consistency over time matters
&lt;/h2&gt;

&lt;p&gt;Just focusing on writing. It´s that simple?&lt;/p&gt;

&lt;p&gt;Maybe not, but some of the benefits I could say are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start thinking in English&lt;/li&gt;
&lt;li&gt;Start creating content (in English ofc)&lt;/li&gt;
&lt;li&gt;Having more articles makes you more confident. Like “I have written so many articles, I know I am good”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you see, there are many benefits and progress over time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-general-it%C2%B4s-cool-to-learn-a-new-language-in-this-way"&gt;
  &lt;/a&gt;
  In general, it´s cool to learn a new language in this way.
&lt;/h2&gt;

&lt;p&gt;Receiving and giving are both beautiful things to do.&lt;/p&gt;

&lt;p&gt;And consuming media in a different language makes it faster to learn it.&lt;/p&gt;

&lt;p&gt;Also, It seems that you are giving your knowledge, expertise and somehow improving the way for us.&lt;/p&gt;

&lt;p&gt;It´s that simple. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  Let's connect
&lt;/h2&gt;

&lt;p&gt;Remember you can follow me on Twitter &lt;a href="https://twitter.com/fernandocutire"&gt;@fernandocutire&lt;/a&gt;, I am getting better at writing in English so we could talk there.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qyip4FVh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5ym12tgb443cl6ztalq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qyip4FVh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5ym12tgb443cl6ztalq.jpg" alt="Image description" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>writing</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Launching SigNoz Technical Writer Program 🧑‍💻🥳</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Wed, 12 Jan 2022 13:31:33 +0000</pubDate>
      <link>https://dev.to/signoz/launching-signoz-technical-writer-program-hmi</link>
      <guid>https://dev.to/signoz/launching-signoz-technical-writer-program-hmi</guid>
      <description>&lt;p&gt;Are you a developer who loves creating content and getting it across to a global audience? We'd love to have you contribute to our community writer program.&lt;/p&gt;

&lt;p&gt;We are an open-source application performance monitoring(APM) tool and we’re early into our journey(launched last year 🤓). We are building with our community, and now we want to create content with the community.&lt;/p&gt;

&lt;p&gt;We help developers like you to monitor applications and keep them in fine health. You can monitor application metrics like latency, requests per sec, error rates, etc with SigNoz. There are a bunch of other things that we are good at. But that’s a story for another time! You can though check out our GitHub repo in a jiffy 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/SigNoz/signoz"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BQqwNXoq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://signoz.io/img/blog/common/signoz_github.webp" alt="SigNoz GitHub repo" width="708" height="162"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So why are we here? We are here to talk about our technical writer program, and we’re so excited to launch it! 🚀&lt;/p&gt;

&lt;p&gt;As an open-source project, we want to educate our community more about our project and about the concepts in our domain. And we need some helping hands 🙌&lt;/p&gt;

&lt;p&gt;Let us first see what topics we’re looking at to create content around.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#topics-we-love"&gt;
  &lt;/a&gt;
  Topics we love
&lt;/h2&gt;

&lt;p&gt;We are looking for developers who can create content around these topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Using SigNoz&lt;/strong&gt; to monitor applications written in different languages and frameworks. For example, this &lt;a href="https://signoz.io/blog/opentelemetry-fastapi/"&gt;article&lt;/a&gt;. We want to make it easier for more devs to use SigNoz, so help us out! 🙏&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;OpenTelemetry&lt;/strong&gt;, for more info visit the &lt;a href="https://opentelemetry.io/"&gt;official website&lt;/a&gt;. It’s an open-source project under Cloud Native Computing Foundation, and there is a huge community behind it. As it’s an emerging technology, it is a very good topic to write about and educate fellow devs 🤗&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Distributed tracing&lt;/strong&gt;. It’s a concept essential to monitor applications based on microservices applications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Application performance monitoring&lt;/strong&gt;. It’s a broad topic and relates to everything you do to measure and monitor your application’s performance. Feel free to tell us what you know, and what you would want to share.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Observability&lt;/strong&gt;. The new buzz in the town, or quite old already? We will love to have both beginner and experienced perspectives on this.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Anything and everything that relates to monitoring applications or improving application performance. A few examples of articles can be&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/ivymobility-developers/understanding-high-availability-how-to-achieve-it-11a045584f29" rel="noopener noreferrer nofollow"&gt;Understanding High Availability &amp;amp; How to achieve it?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-metrics-monitoring-and-alerting" rel="noopener noreferrer nofollow"&gt;Introduction to metrics, monitoring, and alerting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/skyshidigital/6-tricks-to-speed-up-and-improve-your-node-js-performance-fadc06d15cbe" rel="noopener noreferrer nofollow"&gt;Tips to improve your nodejs performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://expressjs.com/en/advanced/best-practice-performance.html" rel="noopener noreferrer nofollow"&gt;Performance Best Practices Using Express in Production&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://forms.gle/CXG3YUEaYXAjrmn6A"&gt;&lt;br&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--178Gy4mw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://signoz.io/img/signoz_twp_apply_cta.png" width="880" height="118"&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you’re wondering why do this, then let us convince you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-write-technical-content-for-us"&gt;
  &lt;/a&gt;
  Why write technical content for us?
&lt;/h2&gt;

&lt;p&gt;This will ofcourse be a paid engagement. We will pay out &lt;strong&gt;$150 for every article&lt;/strong&gt; published. But that’s just one aspect. Writing technical content online has other benefits too:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-an-authoritative-online-presence"&gt;
  &lt;/a&gt;
  Build an authoritative online presence
&lt;/h3&gt;

&lt;p&gt;The topics that we deal with are either emerging technologies or concepts that need good technical understanding. Having published content around these topics will always act as a booster to your digital presence. We will have links to your social media handles, and short bio about you on your published articles.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#distribution-of-your-content"&gt;
  &lt;/a&gt;
  Distribution of your content
&lt;/h3&gt;

&lt;p&gt;Our blog gets thousands of visitors per month. Ever written a piece of content only to find that no one read it. Well, we care and are actually incentivized to take your created content to as many people as possible. Apart from our blog, your content will be shared across all our social handles and our slack community.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#improve-your-writing-skills"&gt;
  &lt;/a&gt;
  Improve your writing skills
&lt;/h3&gt;

&lt;p&gt;Writing is a critical skill as you grow in your career. And our team will help you write better with feedback and tips. Only practice can make you a better writer. And what better way to practice than to do it for a popular open-source project(pardon the bragging 😝)&lt;/p&gt;

&lt;p&gt;So are you convinced? Even if you’re not, let’s give it a shot and see what happens. How does all of this work? Let’s read about the process a bit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-the-process-work"&gt;
  &lt;/a&gt;
  How does the process work?
&lt;/h2&gt;

&lt;p&gt;You just need to reach out to us with an interesting idea and a short proposal.&lt;/p&gt;

&lt;p&gt;If you have an interesting idea for a blog post, you can apply &lt;a href="https://forms.gle/CXG3YUEaYXAjrmn6A"&gt;here&lt;/a&gt;. Here’s a brief detail of how the process works:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Apply with a proposal &lt;a href="https://forms.gle/CXG3YUEaYXAjrmn6A"&gt;here&lt;/a&gt;. The proposal consists of the title and brief outline of the article. You can also reachout at: &lt;a href="mailto:ankit.anand@signoz.io"&gt;ankit.anand@signoz.io&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once your proposal is accepted, we will get in touch with you and give you access to a Notion page where you can write your article.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once you finish your first draft, our team will share feedback with comments on the page itself within 2-3 business days.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once the draft is finalized, we will publish it on our blog. We will pay you $150 for each article published. Yes, you can publish multiple articles.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you have any questions about the program, join our slack community and ping us in the &lt;strong&gt;#write-for-signoz&lt;/strong&gt; channel.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/signoz-slack"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RBlK1BgV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://signoz.io/img/blog/common/join_slack_cta.png" alt="SigNoz Slack community" width="880" height="118"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#who-can-apply"&gt;
  &lt;/a&gt;
  Who can apply?
&lt;/h3&gt;

&lt;p&gt;Everyone. Yes, even if it’s your first attempt at writing an article. The only prerequisite is that you should have a clear understanding of the topic that you have chosen. So what are you waiting for? We’re waiting to hear from you 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://forms.gle/CXG3YUEaYXAjrmn6A"&gt;&lt;br&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--178Gy4mw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://signoz.io/img/signoz_twp_apply_cta.png" width="880" height="118"&gt; &lt;/a&gt;&lt;/p&gt;

</description>
      <category>writing</category>
      <category>technical</category>
      <category>programming</category>
      <category>monitoring</category>
    </item>
    <item>
      <title>Surviving 2021 as an Entrepreneur</title>
      <author>Mikhail Karan</author>
      <pubDate>Wed, 12 Jan 2022 13:28:36 +0000</pubDate>
      <link>https://dev.to/mikhailkaran/surviving-2021-as-an-entrepreneur-2lel</link>
      <guid>https://dev.to/mikhailkaran/surviving-2021-as-an-entrepreneur-2lel</guid>
      <description>&lt;p&gt;&lt;iframe src="https://open.spotify.com/embed/episode/7q2mjH27NVo0q8V0NJWJsn" width="100%" height="232px"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-html-all-the-things"&gt;
  &lt;/a&gt;
  What is HTML All The Things
&lt;/h2&gt;

&lt;p&gt;HTML All The Things is a &lt;a href="https://podcast.htmlallthethings.com/"&gt;web development podcast&lt;/a&gt; and &lt;a href="https://discord.com/invite/jweMCx9"&gt;discord community&lt;/a&gt; which was started by Matt and Mike, developers based in Ontario, Canada. &lt;/p&gt;

&lt;p&gt;The podcast speaks to web development topics as well as running a small business, self-employment and time management. You can join them for both their successes and their struggles as they try to manage expanding their Web Development business without stretching themselves too thin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#announcements"&gt;
  &lt;/a&gt;
  Announcements
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;Svelte for Beginners&lt;/strong&gt; Udemy course is now live! Mike took his experience in teaching and learning Svelte and created a course. &lt;/p&gt;

&lt;p&gt;This course will teach you the fundamentals of JavaScript frameworks. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get it now on Udemy!&lt;/strong&gt; 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/svelte-for-beginners/?couponCode=HATTSALE"&gt;Svelte For Beginners&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-this-one-about"&gt;
  &lt;/a&gt;
  What's This One About?
&lt;/h2&gt;

&lt;p&gt;Doing business during the pandemic has been great for some, horrible for others, and just plain weird for most everyone else. With Web3 technologies being shoved in everyone's faces, to lockdowns every few months for some parts of the world - the market has changed drastically for everyone in it. In this episode, Matt and Mike discuss how they made it through 2021, and plan on making the most out of 2022. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#show-notes"&gt;
  &lt;/a&gt;
  Show Notes
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#a-look-back"&gt;
  &lt;/a&gt;
  A Look Back
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Rough times losing a large steady contract&lt;/li&gt;
&lt;li&gt;Imposter syndrome sets in&lt;/li&gt;
&lt;li&gt;Pandemic blues&lt;/li&gt;
&lt;li&gt;Pivot to audience building and podcast&lt;/li&gt;
&lt;li&gt;Twitter explosion&lt;/li&gt;
&lt;li&gt;Web3&lt;/li&gt;
&lt;li&gt;Opportunities start coming&lt;/li&gt;
&lt;li&gt;Podcast milestones&lt;/li&gt;
&lt;li&gt;Svelte for Beginners course creation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#a-look-forward"&gt;
  &lt;/a&gt;
  A Look Forward
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Mike's Goals&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Focus/time management&lt;/li&gt;
&lt;li&gt;Mind (Read and retain information from books)&lt;/li&gt;
&lt;li&gt;Body (Find the right exersise and nutrition plan for me)&lt;/li&gt;
&lt;li&gt;Code (Rust and GoLang)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Matt's Goals&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Passive income&lt;/li&gt;
&lt;li&gt;What streamers use website&lt;/li&gt;
&lt;li&gt;Focused sprints (6-8 weeks on one project)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank you!
&lt;/h2&gt;

&lt;p&gt;If you're enjoying the podcast consider giving us a review on &lt;a href="https://podcasts.apple.com/us/podcast/html-all-things-web-development-web-design-small-business/id1412209136"&gt;Apple Podcasts&lt;/a&gt; or checking out our Patreon to get a shoutout on the podcast. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.patreon.com/htmlallthethings"&gt;Support us on Patreon&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can find us on all the podcast platforms out there as well as&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.instagram.com/htmlallthethings/"&gt;Instagram (@htmlallthethings)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/htmleverything"&gt;Twitter (@htmleverything)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.tiktok.com/@htmlallthethings"&gt;TikTok (Html All The Things)&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>podcast</category>
    </item>
    <item>
      <title>Working with an Amazon SES account</title>
      <author>Vishal</author>
      <pubDate>Wed, 12 Jan 2022 13:27:22 +0000</pubDate>
      <link>https://dev.to/ghantala/working-with-an-amazon-ses-account-5d71</link>
      <guid>https://dev.to/ghantala/working-with-an-amazon-ses-account-5d71</guid>
      <description>&lt;p&gt;Why would you need an email service though? Well, with many hosting providers, sending a lot of emails (perhaps you have a great deal of customers using your web shop) can be an issue as hosts tend to have limitations. The standard alternative is to use Gmail to send emails, however, that has limitations as well. This is where SES comes in as it is designed for this exact purpose. SES makes sending emails more reliable, and, using a touch of magic, it also helps your emails avoid SPAM folders.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h2&gt;

&lt;p&gt;When you sign up to Amazon, you can use their free tier. The free tier will give you access to all of the Amazon services, but with fair limitations. For example, SES is limited to 2,000 messages per day if you opt for their EC2 hosting.&lt;/p&gt;

&lt;p&gt;Otherwise the cost is $0.10 per thousand messages. They consider a single message as one message to a single recipient. So if you send one email to 1000 email addresses it would cost you 10 dollar cents.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#two-options-for-using-ses"&gt;
  &lt;/a&gt;
  Two options for Using SES
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Simple Mail Transfer Protocol (commonly known as SMTP)&lt;/li&gt;
&lt;li&gt;The SDK API &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both the options work differently, The SMTP allows you to link directly into the email server, whereas the API method allows you to send emails through the AWS SES Service. In this post we'll cover use of the SMTP server only, the second method is new to me so I am working on it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-creating-an-amazon-ses-account"&gt;
  &lt;/a&gt;
  Step 1 : Creating an Amazon SES account
&lt;/h2&gt;

&lt;p&gt;To start using Amazon SES, the first thing you need to do is to create an account.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From your browser, head to &lt;a href="https://aws.amazon.com/ses"&gt;https://aws.amazon.com/ses&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Next, click the orange Get started with Amazon Simple Email Service.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Complete the 5 step signup process. You will need to enter your email address, choose a password, decide on your AWS account name, select your region, address, and more. Additionally, you will have to answer questions like "How do you plan to use AWS?" (Business/personal).&lt;/p&gt;

&lt;p&gt;Once you’ve created your account, you can log into the Management Console.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-create-smtp-credentials"&gt;
  &lt;/a&gt;
  Step 2: Create SMTP Credentials
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Click the “SES Email Sending Service” option.&lt;/li&gt;
&lt;li&gt;In the left navigation bar, click the “SMTP Settings” option.&lt;/li&gt;
&lt;li&gt;Click the “Create My SMTP Credentials” button.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eil7fc6V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1vsyjgl4qxh0u7l6pvnb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eil7fc6V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1vsyjgl4qxh0u7l6pvnb.png" alt="Image description" width="880" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy your credentials or click the “Download Credentials” button as the password will not be shown again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-verify-an-email-address"&gt;
  &lt;/a&gt;
  Step 3: Verify An Email Address
&lt;/h2&gt;

&lt;p&gt;Add and verify your email address following these steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Log into the Amazon SES Console.&lt;/li&gt;
&lt;li&gt;Click the “Verify a New Email Address” link.&lt;/li&gt;
&lt;li&gt;In the “Verify a New Email Address” dialog, enter the email address you wish to send messages from and click the “Verify This Email Address” button.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i4WSXtQ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cfnlnsv5rmtcp0ig9tmb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i4WSXtQ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cfnlnsv5rmtcp0ig9tmb.png" alt="Image description" width="595" height="234"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You should now receive a verification message from Amazon SES asking you to confirm that you are the owner of the email address. Click the verification link in the message.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check the status of the email address in the Amazon SES Console. The status of the email address should change from pending verification to verified.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can now use Amazon SES to send email messages from this address. To send a test email, check the box next to the verified email address, and then click the &lt;strong&gt;Send a Test Email&lt;/strong&gt;. Refer to the Amazon SES documentation for more information.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-request-removal-of-amazon-ses-restrictions"&gt;
  &lt;/a&gt;
  Step 4: Request Removal Of Amazon SES Restrictions
&lt;/h2&gt;

&lt;p&gt;To protect customers from fraud and abuse, Amazon SES does not immediately grant unlimited Amazon SES usage to new users. A number of restrictions are initially in effect, such as only being able to send email to and from verified email addresses and being limited to a maximum of 200 messages in every 24-hour period.&lt;/p&gt;

&lt;p&gt;To remove these restriction on recipient addresses and increase the sending limits, request a higher level of access in the Amazon Support Center.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-configure-your-application-to-use-amazon-ses"&gt;
  &lt;/a&gt;
  Step 5: Configure Your Application To Use Amazon SES
&lt;/h2&gt;

&lt;p&gt;The final step is to configure your Bitnami application to use Amazon SES. The procedure to do this varies from application to application but typically, you will need to configure the application with the correct SMTP server information and credentials. This may be done either by directly editing application configuration files or by entering the required information using the application user interface.&lt;/p&gt;

&lt;p&gt;Here's an example of configuring email settings for Amazon SES. The USERNAME and PASSWORD placeholders should be replaced with the correct values from the credentials created in Step 1, while the EMAIL_ADDRESS placeholder should be replaced with any SES-verified email address.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SMTP hosts = email-smtp.us-east-1.amazonaws.com
SMTP port = 465
SMTP security = SSL
SMTP username: USERNAME
SMTP password: PASSWORD
From address: EMAIL_ADDRESS
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>aws</category>
      <category>ses</category>
      <category>smtp</category>
    </item>
    <item>
      <title>How they made controls at Github? Popup</title>
      <author>Kiran Mantha</author>
      <pubDate>Wed, 12 Jan 2022 13:13:43 +0000</pubDate>
      <link>https://dev.to/kiranmantha/how-they-made-controls-at-github-popup-2omi</link>
      <guid>https://dev.to/kiranmantha/how-they-made-controls-at-github-popup-2omi</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Episode1: &lt;a href="https://dev.to/kiranmantha/how-they-made-controls-at-github-1h18"&gt;Dropdown&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Episode2: &lt;a href="https://dev.to/kiranmantha/how-they-made-controls-at-github-modal-dialog-2pgi"&gt;Modal dialog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Episode3: &lt;a href="https://dev.to/kiranmantha/how-they-made-controls-at-github-hamburger-menu-20k"&gt;Hamburger menu&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Episode4: &lt;strong&gt;Popup&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;p&gt;In last episode we gone through creation of hamburger menu with details and summary tags.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now"&gt;
  &lt;/a&gt;
  Now
&lt;/h2&gt;

&lt;p&gt;This is the last episode of this series which walks through creation of popups using these wonderful tags.&lt;/p&gt;

&lt;p&gt;Asusual let's start with same boring repeatitive html&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;details&lt;/span&gt; &lt;span class="na"&gt;aria-haspopup=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        I'm a popcorn
    &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;You are awesome!!&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/details&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ahhhh popcornnn it's movie time...😃 wait that's a stupid accordion...😬&lt;/p&gt;

&lt;p&gt;ok ok i saw your frustation.. take a drink&lt;/p&gt;

&lt;p&gt;you know what, we don't have to start from scratch for this. Popup is same as that of dropdown which we designed in &lt;a href="https://dev.to/kiranmantha/how-they-made-controls-at-github-1h18"&gt;1st episode&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The difference is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Popup can contain any type of content whereas a dropdown contain a list of options.&lt;/li&gt;
&lt;li&gt;It is an in-line element unlike dropdown which is a block element.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;so we can reuse dropdown styles(&lt;em&gt;well we don't need most of them&lt;/em&gt;) which looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;--primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;--border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#ccc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;--spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;details&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;aria-haspopup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"true"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;summary&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;open&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;summary&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;default&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There it is. The basic structure is done. Click anywhere on the page, the accordion will close. Now lets add simple styles to container &lt;code&gt;div&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;summary&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome!! right?? click on &lt;code&gt;summary&lt;/code&gt; tag, it will open a small popup saying &lt;strong&gt;&lt;em&gt;You are awesome&lt;/em&gt;&lt;/strong&gt; yes i mean it. you really are!!&lt;/p&gt;

&lt;p&gt;By applying &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt; or &lt;code&gt;bottom&lt;/code&gt; css to &lt;code&gt;div&lt;/code&gt; tag, you can position the popup in any direction.&lt;/p&gt;

&lt;p&gt;And that's it. There's your Popcorn.. ohh i mean Popup 😄&lt;/p&gt;

&lt;p&gt;Thanks for your time and &lt;a href="https://stackblitz.com/edit/details-summary-tag-based-controls?file=index.html"&gt;here&lt;/a&gt; is the working example.&lt;/p&gt;

&lt;p&gt;See you again ✌️,&lt;br&gt;
Kiran 👋&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>github</category>
    </item>
    <item>
      <title>Serverless can benefit from not being so Lambda-centric</title>
      <author>Frédéric Barthelet</author>
      <pubDate>Wed, 12 Jan 2022 12:59:30 +0000</pubDate>
      <link>https://dev.to/kumo/serverless-can-benefit-from-not-being-so-lambda-centric-1c4h</link>
      <guid>https://dev.to/kumo/serverless-can-benefit-from-not-being-so-lambda-centric-1c4h</guid>
      <description>&lt;p&gt;&lt;em&gt;Stop writing unnecessary code&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As a developer, I need to write code to develop specific features for a project. However, each line that I write is a potential futur bug and increases my project technical debt.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Less code is better&lt;/strong&gt;. Serverless services have ways to enable you to remove more code than traditional architectures. The use of managed services reduces the amount of boiler plate code that does not directly adds value to your application while retaining the possibility to write full custom code where it's needed most.&lt;/p&gt;

&lt;p&gt;One can argue that full-fledged frameworks achieve the same result of reducing boilerplate code. However, it requires the development team to continuously update this code dependency to its latest revision and ship frequent dependency updates in production. With managed services, this burden is passed down to the cloud provider.&lt;/p&gt;

&lt;p&gt;Most software engineers relates serverless to its per-use ephemeral compute environment - also known as FaaS - (Lambda/ECS for AWS, Cloud Functions for GCP or Azure Functions for Azure), often missing on a large opportunity offered by all the other serverless services a cloud provider has to offer. &lt;strong&gt;Serverless real value is not within compute services&lt;/strong&gt;, but rather in side-car managed services, handling task usually handled by non-ephemeral compute environment.&lt;/p&gt;

&lt;p&gt;This article focus on missed opportunities to write less code and leverage managed serverless services, where those can handle efficiently and flawlessly a large number of request without the need to write or depend on a single runtime-executed line of code. I'll dive on a specific exemple, using AWS, to explain the use case and benefits of using non-compute services and actually have them interact in order to develop a specific feature - hereby named &lt;strong&gt;functionless&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-you-can-do-with-aws%C2%A0lambda"&gt;
  &lt;/a&gt;
  What you can do with AWS Lambda
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P2wwEEe0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/essvu6thzhdpbx8ostrg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P2wwEEe0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/essvu6thzhdpbx8ostrg.png" alt="One Lambda to rule them all" width="880" height="582"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lambda can be invoked from a variety of services, allowing the development of event-driven architectures. With the variety of triggers offered to request the execution of your code, the possibilities are endless. You can easily react to a change in your database, to a new file being upload on your bucket, to a new user being registered on your application.&lt;/p&gt;

&lt;p&gt;The versatility of writing your own code and execute it in reaction to those changes is however often in contrast with what I actually see people implementing in their code base.&lt;/p&gt;

&lt;p&gt;Countless times I've seen the magic triptych: API Gateway - Lambda - DynamoDB&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dTauPo4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cpoihiofu0wptrdar9r8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dTauPo4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cpoihiofu0wptrdar9r8.png" alt="API Gateway - Lambda - DynamoDB triptych in action" width="880" height="241"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This triptych is often used to develop HTTP endpoints, be it a simple CRUD REST API used as a backend or an incoming webhook endpoint receiving notifications from 3rd parties.&lt;/p&gt;

&lt;p&gt;Why do we see this architecture so often ?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.serverless.com/"&gt;Serverless Framework&lt;/a&gt; is lambda-centric and encourages new adopters to trigger lambdas everywhere&lt;/li&gt;
&lt;li&gt;Imperative code is familiar to developer, while AWS services configuration is much less common knowledge&lt;/li&gt;
&lt;li&gt;The developer experience setting up an alternative architecture not relying on Lambda is considerably worse (you can jump to the end of this article for more information)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's take the exemple of writing-reading data to DynamoDB.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-you-should-do-with%C2%A0aws%C2%A0lambda"&gt;
  &lt;/a&gt;
  What you should do with AWS Lambda
&lt;/h2&gt;

&lt;p&gt;In order to identify precisely what you should do within your Lambda handlers' code, it is important to understand what NOT to do. As with our previous exemple, almost everything can be done directly within API Gateway.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Authorization&lt;/strong&gt;: using a Cognito user pool or an API key&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1d8IxLAa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hie7r9jp5jqmyd69qzq0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1d8IxLAa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hie7r9jp5jqmyd69qzq0.png" alt="Authorization" width="880" height="410"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Input validation&lt;/strong&gt;: using built-in JSON schema validation configuration&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KhYQmeOd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u9ehjrjgx30tqr0rmbst.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KhYQmeOd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u9ehjrjgx30tqr0rmbst.png" alt="Input validation" width="880" height="388"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Routing&lt;/strong&gt;: describing specific routes in API Gateway rather than use a &lt;em&gt;catch all {proxy+}&lt;/em&gt; integration&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NabZNmy8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/soeaocpnprqgrdtrujwn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NabZNmy8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/soeaocpnprqgrdtrujwn.png" alt="Routing" width="880" height="524"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Content transformation&lt;/strong&gt;: transform HTTP request content and map to the corresponding attributes as expected in the database layer&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oqYR2PJf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ilr7ii26nafyimnf23f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oqYR2PJf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ilr7ii26nafyimnf23f.png" alt="Content transformation" width="880" height="341"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the end of the day, for such "simple" operations, you can almost always by-pass lambda altogether and rely on the following &lt;strong&gt;functionless architecture&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PgnkUew---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejfsztmeshr3jw6n46oa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PgnkUew---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejfsztmeshr3jw6n46oa.png" alt="Target functionless architecture for CRUD operations" width="880" height="782"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-should-i-optout-of-lambda-for-such-use-cases-"&gt;
  &lt;/a&gt;
  Why should I opt-out of Lambda for such use cases ?
&lt;/h2&gt;

&lt;p&gt;As I explained at the beginning of this article, writing less code has benefits of its own for a project code base in the long run. However, that's not the only advantages brought by Functionless.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#cost"&gt;
  &lt;/a&gt;
  💰 Cost
&lt;/h3&gt;

&lt;p&gt;API Gateway incurred cost in the Functionless architecture are always the same, whether you use it for validation, routing, authorization and content transformation or not.&lt;/p&gt;

&lt;p&gt;The cost repartition in the original triptych architecture are as follow (per million executions, in &lt;code&gt;us-east-1&lt;/code&gt; region):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3,50$ for API Gateway&lt;/li&gt;
&lt;li&gt;0,70$ for Lambda (including invocation + 30ms warm execution)&lt;/li&gt;
&lt;li&gt;1,25$ for DynamoDB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Total: 6,45$ per million executions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Removing Lambda from this architecture simply removes Lambda incurred costs from the bills, without increasing other services respective costs, actually &lt;strong&gt;cutting off our costs by 13%&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  🚀 Performance
&lt;/h3&gt;

&lt;p&gt;The serverless triptych stack &lt;em&gt;- in green on graph below -&lt;/em&gt; and functionless stack &lt;em&gt;- in blue on graph below -&lt;/em&gt; performs almost identically. The results shown below represents API Gateway latency (not taking networking latency into account) for both stacks with the same feature: a POST request with a payload containing a single attribute resulting with an item being persisted in DynamoDB.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q48xbb_W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rscd6xyxna0pu9ns777s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q48xbb_W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rscd6xyxna0pu9ns777s.png" alt="Comparaison of response time distribution over 300 requests for serverless triptych (in green) and functionless (in blue)" width="880" height="620"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The serverless triptych stack is much more consistent over time with almost all warm responses latency ranging between 30ms and 40ms.&lt;/p&gt;

&lt;p&gt;The functionless stack is less performant most of the time - around 50ms - but much faster on some occasions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;6% of the requests have a latency in the 10ms range&lt;/li&gt;
&lt;li&gt;16% in the 20ms range&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, in the event of a &lt;em&gt;cold&lt;/em&gt; serverless triptych stack, results are considerably worse.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#lambdas-cold-start-issue"&gt;
  &lt;/a&gt;
  Lambda's cold start issue
&lt;/h4&gt;

&lt;p&gt;Lambda is fast once it's &lt;em&gt;warm&lt;/em&gt;. The first request requiring compute from Lambda service is much slower than the consecutive requests due to cold start issues. Lambda actually requires to provision a dedicated environment to run your code. You can overcome this issue using provisioned Lambda instances, but what's the point of going serverless then? Provisioned instances significantly impacts the overall cost of the stack, making it much less competitive.&lt;/p&gt;

&lt;p&gt;In this instance, the serverless triptych stack averages at 600ms latency when Lambda is cold, which is 10x more than the warm latency.&lt;/p&gt;

&lt;p&gt;Regarding cost, while init duration is not included in billed duration, the overall cost of the execution is much larger due to a larger amount of time required to process the event. In practice, the average billed duration for cold lambda is 188ms, which represents 3,40$ per million execution. Removing this dependency to Lambda &lt;strong&gt;cuts off our costs by 42%&lt;/strong&gt; in worst case scenario (or best case scenario, depending on the way you look at it) - considering all invocations are cold invocations.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#%F0%9F%97%9C-throttling"&gt;
  &lt;/a&gt;
  🗜 Throttling
&lt;/h3&gt;

&lt;p&gt;Using a functionless stack removes limitations from Lambda service:&lt;br&gt;
Lambda concurrent execution quota (1000 by default) limits the total quantity of lambda being invoked at some point in time in a single AWS account. While this quota can be increased, not using Lambda removes any worry related to concurrency limits. I'm not saying other services used in the functionless stack aren't limited as well: API Gateway has a 10.000 RPS throttling limit as well as a 5000 requests burst limit, while DynamoDB, in its on-demand provisioned capacity, has a 1000 WCU limit per second. You should pay special attention to those services configuration to handle larger RPS on your application. You just have one less service - Lambda - to worry about in a functionless stack.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-deploy-your-first-functionless-feature-"&gt;
  &lt;/a&gt;
  How to deploy your first functionless feature ?
&lt;/h2&gt;

&lt;p&gt;Now it's time to address the elephant in the room: developer experience. My first interaction with AWS service direct integrations like API Gateway to DynamoDB was a disaster. I was guided in this experimentation following &lt;a href="https://aws.amazon.com/fr/blogs/compute/using-amazon-api-gateway-as-a-proxy-for-dynamodb/"&gt;Andrew Baird's guide on using API Gateway as a proxy to DynamoDB&lt;/a&gt; from 2016. If you haven't already face the challenge of correctly configuring such direct integration in API Gateway, I strongly suggest you try following this guide. You lose all benefits from using a more performant and less expensive stack if nobody from your team wants to touch API Gateway functionless configuration with a ten-foot pole.&lt;/p&gt;

&lt;p&gt;The process of implementing such functionless stack, as described in Andrew's article, will be used as our experience baseline. Moving forward, I'll detail an alternative that can be used to make the overall experience much more enjoyable and practicable.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#integration-uri"&gt;
  &lt;/a&gt;
  Integration Uri
&lt;/h3&gt;

&lt;p&gt;In order to forward HTTP requests made to API Gateway to DynamoDB endpoint, you must setup an AWS service integration. The instructions to setup one using the web console requires knowledge on what to fill in the following fields.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PWTccJ6e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvr8mfao7izaf2n9xkjk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PWTccJ6e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvr8mfao7izaf2n9xkjk.png" alt="AWS service integration setup in web console" width="880" height="505"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some of those fields can easily be guessed, like region and action, as they are commonly used in other IaC scenarios (like IAM role statements definition).&lt;/p&gt;

&lt;p&gt;Others require factual knowledge: all AWS services, including DynamoDB, expose an HTTP API that is used by AWS CLI, SDK, web console. All routes on those API use &lt;code&gt;POST&lt;/code&gt; http verb. While this could make sense for our exemple at hand here, calling &lt;code&gt;PutItem&lt;/code&gt; operation, it is much less obvious if what you're trying to do is a &lt;code&gt;GetItem&lt;/code&gt; or &lt;code&gt;Query&lt;/code&gt; operation and you're familiar with SaaS exposing RESTful APIs.&lt;/p&gt;

&lt;p&gt;The service you want to use is another one of those parameter that requires factual knowledge: while using &lt;code&gt;dynamodb&lt;/code&gt; for the DynamoDB integration is quite straight forward, some other services are less obvious, such as &lt;code&gt;events&lt;/code&gt; instead of &lt;code&gt;eventbridge&lt;/code&gt; for an EventBridge integration.&lt;/p&gt;

&lt;p&gt;The HTTP method - &lt;code&gt;POST&lt;/code&gt; - as well as the service to be used - &lt;code&gt;dynamodb&lt;/code&gt; - are used in combinaison with the region to form the resource Uri. While using the web console is a great first step in using direct AWS services integration feature, teams often rely on versioned IaC to provision an application, where such helper is not always available. In order to setup such integration using CloudFormation, you'd need to provision an &lt;code&gt;AWS::ApiGateway::Method&lt;/code&gt; resource, which requires you to provide the full integration Uri all by yourself. This Uri is a source of frustration for most developers I worked with as it greatly differs from one service to another. In addition, it requires deep understanding of &lt;a href="https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/#uri"&gt;a 15-lines long documentation&lt;/a&gt; in order to build it correctly. The resulting CloudFormation templates ressembles something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;MyAPIGatewayMethod&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::ApiGateway::Method&lt;/span&gt;
  &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Integration&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;IntegrationHttpMethod&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;POST&lt;/span&gt;
      &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS&lt;/span&gt;
      &lt;span class="na"&gt;Uri&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;Fn::Join:&lt;/span&gt;
          &lt;span class="s"&gt;- ":"&lt;/span&gt;
          &lt;span class="s"&gt;- - "arn"&lt;/span&gt;
            &lt;span class="s"&gt;- Ref&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::Partition&lt;/span&gt;
            &lt;span class="s"&gt;- apigateway:eu-west-1:dynamodb:action/PutItem&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hopefully, the CDK provides a way to benefit back from the web console helper to build such Uri, using the &lt;a href="https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigateway.AwsIntegration.html"&gt;&lt;code&gt;AwsIntegration&lt;/code&gt; class&lt;/a&gt; you only need to provide &lt;code&gt;region&lt;/code&gt;, &lt;code&gt;action&lt;/code&gt;, &lt;code&gt;service&lt;/code&gt; to achieve the same provisioning.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;putItemIntegration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;apigateway&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AwsIntegration&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dynamodb&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PutItem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;region&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eu-west-1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#integration-mapping-template"&gt;
  &lt;/a&gt;
  Integration mapping template
&lt;/h3&gt;

&lt;p&gt;Choosing a service and an action for API Gateway to forward request to is the first step at building an AWS service integration. The next step is to transform the payload of the HTTP request made to API Gateway into what the integrated AWS service expects.&lt;/p&gt;

&lt;p&gt;This is done using &lt;a href="https://velocity.apache.org/engine/devel/vtl-reference.html"&gt;Velocity Template Language&lt;/a&gt;. Here after is an exemple of such a template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"TableName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"MyTable"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Item"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"PK"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"S"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Dog"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"SK"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"S"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"$context.requestId"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"S"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"$input.path('$.name')"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This template shapes the payload of the DynamoDB action. It includes API Gateway custom method to hydrate &lt;code&gt;SK&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; attribute's value:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;$context.requestId&lt;/code&gt; uses a &lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html#context-variable-reference"&gt;context variable&lt;/a&gt; to generate a unique id for the PutItem action&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$input.path('$.name')&lt;/code&gt; uses an &lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html#input-variable-reference"&gt;input variable&lt;/a&gt; to retrieve a specific value from the HTTP body of the request made to API Gateway&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Relying on VTL is cumbersome: it requires additional knowledge of the syntax and it is not easily testable (some librairies gave it a go like &lt;a href="https://www.npmjs.com/package/api-gateway-template-tester"&gt;API Gateway Template Tester&lt;/a&gt; but are currently unmaintained).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#easier-integration-with-awsapigatewayintegrations-cdk-construct"&gt;
  &lt;/a&gt;
  Easier integration with aws-apigateway-integrations CDK construct
&lt;/h3&gt;

&lt;p&gt;One way to improve this is to allow the use of imperative language and tools people are used to in the &lt;em&gt;triptych serverless stack&lt;/em&gt; to generate such template. With this goal in mind, I started a CDK Construct library, called &lt;a href="https://github.com/fredericbarthelet/aws-apigateway-integrations"&gt;aws-apigateway-integrations&lt;/a&gt;, aiming at simplifying AWS service integration definition, following &lt;a href="https://docs.aws.amazon.com/cdk/api/v1/docs/aws-apigatewayv2-integrations-readme.html"&gt;@aws-cdk/aws-apigatewayv2-integrations module&lt;/a&gt; footsteps.&lt;/p&gt;

&lt;p&gt;Using the new constructs shipped with this library, you can rely on familiar &lt;a href="https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/clients/client-dynamodb/index.html"&gt;AWS SDK v3 DynamoDB Commands interfaces&lt;/a&gt; in order to build your VTL, simplifying previous template down to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PutCommandInput&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@aws-sdk/lib-dynamodb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;DynamoDBActions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;DynamoDBIntegration&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aws-apigateway-integrations&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;putItemCommand&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Omit&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PutCommandInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;TableName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;PK&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dog&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;SK&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$context.requestId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$input.path('$.name')&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;putItemIntegration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;DynamoDBIntegration&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DynamoDBActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PutItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;putItemCommand&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#integration-response-and-method-response"&gt;
  &lt;/a&gt;
  Integration response and method response
&lt;/h3&gt;

&lt;p&gt;Request authorization, validation and transformation is only half of the functionless architecture. Both integration response, handling content transformation from DynamoDB HTTP response and method response, detailing API Gateway response typologies, must be provisioned for the overall architecture to work properly.&lt;/p&gt;

&lt;p&gt;Integration response similarly relies on VTL to unmarshall content returned by DynamoDB.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"$input.path('$.Item.SK.S')"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"$input.path('$.Item.name.S')"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Such VTL can easily be generated using &lt;code&gt;DynamoDBIntegration&lt;/code&gt;, removing the burden from actually defining it yourself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next-in-the-functionless-ecosystem-"&gt;
  &lt;/a&gt;
  What's next in the functionless ecosystem ?
&lt;/h2&gt;

&lt;p&gt;While &lt;code&gt;aws-apigateway-integrations&lt;/code&gt; is currently a work in progress, I have great hope such integration would greatly facilitate adoption of functionless patterns by greatly improving the overall developer experience. With this in mind, the current development roadmap for this CDK Constructs library includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;adding JSON schema generation and configuration for API Gateway validation within DynamoDBIntegration&lt;/li&gt;
&lt;li&gt;adding IAM role generation within the scope of the construct to allow API Gateway to execute DynamoDB actions&lt;/li&gt;
&lt;li&gt;providing better API to wrap &lt;code&gt;$input&lt;/code&gt; variable&lt;/li&gt;
&lt;li&gt;implementing other AWS services integration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All feedbacks or even contributions are welcome !&lt;/p&gt;

&lt;p&gt;Such implementation opens up a lot of new possibilities: a functionless RESTful API where the only code is configuration-only IaC is not out of reach anymore and can help team achieve cheaper, more robust code base with minimal efforts. Such implementation is currently under discussion within &lt;a href="https://github.com/getlift/lift/discussions/127"&gt;Lift project&lt;/a&gt; where your feedbacks on the implementation are highly valued.&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>aws</category>
      <category>functionless</category>
    </item>
    <item>
      <title>Make your first Crypto with ThirdWeb 🤯</title>
      <author>Avneesh Agarwal</author>
      <pubDate>Wed, 12 Jan 2022 12:36:30 +0000</pubDate>
      <link>https://dev.to/avneesh0612/make-your-first-crypto-with-thirdweb-2fj8</link>
      <guid>https://dev.to/avneesh0612/make-your-first-crypto-with-thirdweb-2fj8</guid>
      <description>&lt;p&gt;Have you ever wondered how amazing it would be to create your crypto? So, in this article let's build our very first crypto!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;Create a new folder-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; mkdir thirdweb-crypto
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Initialize Node.js-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change type to &lt;code&gt;module&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;we are going to use modular imports so change the type to &lt;code&gt;module&lt;/code&gt; in &lt;code&gt;package.json&lt;/code&gt;-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"type": "module",
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install the packages needed-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i @3rdweb/sdk dotenv ethers
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#initiazling-3rdweb"&gt;
  &lt;/a&gt;
  Initiazling 3rdweb
&lt;/h2&gt;

&lt;p&gt;To keep stuff clean, create a new folder &lt;code&gt;scripts&lt;/code&gt;. Inside of it create a file a file &lt;code&gt;initialize-sdk.js&lt;/code&gt;. Now, paste in the following-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { ThirdwebSDK } from "@3rdweb/sdk";
import ethers from "ethers";

import dotenv from "dotenv";
dotenv.config();

if (!process.env.PRIVATE_KEY || process.env.PRIVATE_KEY == "") {
  console.log("🛑 Private key not found.");
}

if (!process.env.ALCHEMY_API_URL || process.env.ALCHEMY_API_URL == "") {
  console.log("🛑 Alchemy API URL not found.");
}

if (!process.env.WALLET_ADDRESS || process.env.WALLET_ADDRESS == "") {
  console.log("🛑 Wallet Address not found.");
}

const sdk = new ThirdwebSDK(
  new ethers.Wallet(
    process.env.PRIVATE_KEY,
    ethers.getDefaultProvider(process.env.ALCHEMY_API_URL)
  )
);

(async () =&amp;gt; {
  try {
    const apps = await sdk.getApps();
    console.log("Your app address is:", apps[0].address);
  } catch (err) {
    console.error("Failed to get apps from the sdk", err);
    process.exit(1);
  }
})();

export default sdk;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is going to initialize 3rdweb for us but first, we need some keys. So, create a new file &lt;code&gt;.env&lt;/code&gt; in the root of your folder and add these three variables-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WALLET_ADDRESS=&amp;lt;3rdweb_project_address&amp;gt;
ALCHEMY_API_URL=&amp;lt;alchemy_api_key&amp;gt;
PRIVATE_KEY=&amp;lt;wallet_private_key&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-a-3rdweb-project"&gt;
  &lt;/a&gt;
  Creating a 3rdweb project
&lt;/h3&gt;

&lt;p&gt;Go to  &lt;a href="https://thirdweb.com/"&gt;Thirdweb&lt;/a&gt; sign up/in then, create a new project. I am going to use Rinkeby for this demo. Give a name to your project and you can also add a description if you want.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9xiQ-LHR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641983754661/iFAG14OuU4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9xiQ-LHR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641983754661/iFAG14OuU4.png" alt="image.png" width="880" height="409"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy the address that you get and replace it as the value of &lt;code&gt;WALLET_ADDRESS&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bAXgsLqG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641984766639/qRsZEzp1l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bAXgsLqG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641984766639/qRsZEzp1l.png" alt="image.png" width="463" height="154"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-an-alchemy-project"&gt;
  &lt;/a&gt;
  Creating an alchemy project
&lt;/h3&gt;

&lt;p&gt;Go to  &lt;a href="https://alchemyapi.io/"&gt;alchemy&lt;/a&gt; after signing in, create a new project on the same chain and network as you did on thirdweb.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KLFY6Vpz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641984259639/7p-ar-Isl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KLFY6Vpz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641984259639/7p-ar-Isl.png" alt="image.png" width="880" height="458"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the view key button and copy the HTTP one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eKoQjuz5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641985336824/Fpy2kRSm0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eKoQjuz5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641985336824/Fpy2kRSm0.png" alt="image.png" width="880" height="342"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the API key that we need from alchemy so paste it in the &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-the-private-key"&gt;
  &lt;/a&gt;
  Getting the Private Key
&lt;/h3&gt;

&lt;p&gt;In your metamask wallet, click on account details&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZQgaY11o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641985709370/q0ORYddS8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZQgaY11o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641985709370/q0ORYddS8.png" alt="image.png" width="449" height="504"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the export private key button, enter the password and copy the key that you get. This is your &lt;code&gt;PRIVATE_KEY&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's now run the initializing script-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node scripts/initialize-sdk.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will now see your app address-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZlzxLoIe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641986218189/E-WpBbIJD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZlzxLoIe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641986218189/E-WpBbIJD.png" alt="image.png" width="880" height="147"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-and-deploying-our-crypto"&gt;
  &lt;/a&gt;
  Creating and deploying our crypto
&lt;/h2&gt;

&lt;p&gt;Create a new file &lt;code&gt;deploy-token.js&lt;/code&gt; and paste in the following-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import sdk from "./initialize-sdk.js";

const app = sdk.getAppModule("YOUR_APP_ADDRESS");

(async () =&amp;gt; {
  try {
    const tokenModule = await app.deployTokenModule({
      name: "My Token",
      symbol: "TOKEN",
    });
    console.log(
      "✅ Successfully deployed token module, address:",
      tokenModule.address
    );
  } catch (error) {
    console.error("failed to deploy token module", error);
  }
})();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You need to replace the app address with the address that came in the console. You also need to change the name and symbol of the token to what you want it to be called. Let's now run it-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node scripts/deploy-token.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It works and the token has been deployed 🥳&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t-xDlQQO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641988251933/cS1Or4sUP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t-xDlQQO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641988251933/cS1Or4sUP.png" alt="image.png" width="880" height="102"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also view the contract on  &lt;a href="https://rinkeby.etherscan.io/"&gt;Etherscan&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aTTLNz4o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641988321364/9nju9LAo8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aTTLNz4o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641988321364/9nju9LAo8.png" alt="image.png" width="880" height="387"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#import-the-token-to-your-metamask-wallet"&gt;
  &lt;/a&gt;
  Import the token to your metamask wallet
&lt;/h2&gt;

&lt;p&gt;We can also see how many tokens we have through the metamask wallet, so open Metamask scroll below and you will see a button "Import tokens".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4eDw4kh1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641988462000/-PlYIVzMO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4eDw4kh1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641988462000/-PlYIVzMO.png" alt="image.png" width="447" height="142"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Paste in the address of your token and click &lt;strong&gt;add&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--92Srqb2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641988496990/KPFJzu_FG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--92Srqb2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641988496990/KPFJzu_FG.png" alt="image.png" width="447" height="754"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will now see our token here 🎉. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N8NFGNUE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641988567376/6jMQO-afG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N8NFGNUE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641988567376/6jMQO-afG.png" alt="image.png" width="447" height="754"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But it is 0 in quantity so let's mint some tokens.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#minting-tokens"&gt;
  &lt;/a&gt;
  Minting tokens
&lt;/h2&gt;

&lt;p&gt;Create a new file &lt;code&gt;mint-token.js&lt;/code&gt; and add the following-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { ethers } from "ethers";
import sdk from "./initialize-sdk.js";

const tokenModule = sdk.getTokenModule("YOUR_TOKEN_ADDRESS");

(async () =&amp;gt; {
  try {
    const amount = 1_000_000;
    const amountWith18Decimals = ethers.utils.parseUnits(amount.toString(), 18);
    await tokenModule.mint(amountWith18Decimals);
    const totalSupply = await tokenModule.totalSupply();

    console.log(
      "✅ There now is",
      ethers.utils.formatUnits(totalSupply, 18),
      "$TOKEN in circulation"
    );
  } catch (error) {
    console.error("Failed to mint tokens", error);
  }
})();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replace &lt;code&gt;YOUR_TOKEN_ADDRESS&lt;/code&gt; with the address you got. You can also change the number of tokens to be minted. Currently, it will mint 1,000,000 tokens.&lt;/p&gt;

&lt;p&gt;Run the script-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node scripts/mint-token.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We successfully minted the tokens! 🥳&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jSkZeUua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641989192684/gg9oPg9xv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSkZeUua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641989192684/gg9oPg9xv.png" alt="image.png" width="880" height="93"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In metamask also it shows the tokens!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o_7Wpck1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641989215876/D8gN8Nm59.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o_7Wpck1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641989215876/D8gN8Nm59.png" alt="image.png" width="448" height="113"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also send these tokens to your friends or anyone you like :D&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;@&lt;a href="https://dev.to@thirdweb"&gt;thirdweb&lt;/a&gt; is a great way to build web3 stuff, hope you found this article useful and made your first crypto. See ya in the next one ✌️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful links
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/avneesh0612/thirdweb-crypto"&gt;GitHub Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://thirdweb.com/"&gt;ThirdWeb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://links.avneesh.tech/"&gt;Let's connect&lt;/a&gt;&lt;/p&gt;

</description>
      <category>web3</category>
      <category>thirdweb</category>
      <category>crypto</category>
      <category>blockchain</category>
    </item>
    <item>
      <title>Top Golang Use Cases 2022</title>
      <author>Bacancy</author>
      <pubDate>Wed, 12 Jan 2022 12:30:54 +0000</pubDate>
      <link>https://dev.to/bacancy/top-golang-use-cases-2o22-3kb0</link>
      <guid>https://dev.to/bacancy/top-golang-use-cases-2o22-3kb0</guid>
      <description>&lt;p&gt;Companies that want to increase their business productivity used Goland. Golang helps companies to modernization, maintain higher efficiency with code, and develop faster mobile apps.&lt;/p&gt;

&lt;p&gt;Today, we come up with the article of varied domains that have benefitted from the Go programming language. Let’s have quick look at these &lt;strong&gt;Golang use cases&lt;/strong&gt; now. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-golang"&gt;
  &lt;/a&gt;
  Why use Golang?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;1. Created For Multi-core Processing&lt;/li&gt;
&lt;li&gt;2. Build For Large Projects&lt;/li&gt;
&lt;li&gt;3. Easy Learning Curve&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#best-golang-use-cases-industrywise"&gt;
  &lt;/a&gt;
  Best Golang Use Cases (Industry-wise)
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Golang in eCommerce&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Alibaba is one of the best eCommerce Go projects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Golang in Online Booking Systems&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Uber: The Golang project that broke all records!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Golang in Fintech&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Capital One: Go application in the Fintech&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Golang in Payments Processing Systems&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Paypal: Golang excellence in Payment Processing Systems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Golang in Technology Platforms&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DropBox- Go project for Tech&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Golang in Instant Communication Platforms&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stream: Golang’s power in Chat Apps&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Golang in Cyber Security&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1Password uses Golang&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The reason why we talk about &lt;em&gt;Golang uses cases&lt;/em&gt; is because we can feel the bright future in the long run. If you want to know more and like to read in detail about these &lt;a href="https://www.bacancytechnology.com/blog/golang-use-cases"&gt;Golang uses cases&lt;/a&gt;, read our article now. &lt;/p&gt;

</description>
      <category>go</category>
      <category>cases</category>
    </item>
    <item>
      <title>The Pomodoro Technique: Productivity hacks</title>
      <author>saransh kataria</author>
      <pubDate>Wed, 12 Jan 2022 12:22:49 +0000</pubDate>
      <link>https://dev.to/saranshk/the-pomodoro-technique-productivity-hacks-3222</link>
      <guid>https://dev.to/saranshk/the-pomodoro-technique-productivity-hacks-3222</guid>
      <description>&lt;p&gt;The irony of time management productivity tips is that the people who need them the most do not realize that they do. There are too many productivity tips out there but the Pomodoro technique is probably the most discussed and used one. The reason for its popularity is that it is easy to understand and implement.&lt;/p&gt;

&lt;p&gt;The intent of the technique is to alternate pomodoros with short breaks in between. By pomodoros, we do not mean tomatoes (Pomodoro means tomato in Italian). A Pomodoro is a focused work session.&lt;/p&gt;

&lt;p&gt;The idea is to have short breaks in between sessions to promote sustained concentration and avoid mental fatigue. It also helps avoid distractions from derailing the day since everything has a time and place in this technique.&lt;/p&gt;

&lt;p&gt;This gamified goal-setting has helped me optimize my productivity and get things done.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-the-pomodoro-technique"&gt;
  &lt;/a&gt;
  What is the Pomodoro Technique?
&lt;/h1&gt;

&lt;p&gt;Pomodoro is a cyclical system. All that is needed to implement is a timer. No other special apps or tools are required. (There are a ton of apps if one wants to explore them, but the basic concept is simple). Here are the basics:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Define the task&lt;/li&gt;
&lt;li&gt;Set a timer for 25 minutes&lt;/li&gt;
&lt;li&gt;Execute the task until the Pomodoro timer rings&lt;/li&gt;
&lt;li&gt;Take a short break of 5 minutes&lt;/li&gt;
&lt;li&gt;Repeat&lt;/li&gt;
&lt;li&gt;Take longer breaks of 15-30 minutes after 4 Pomodoros&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I have changed my Pomodoro duration to 50 minutes and shorter breaks to 10 minutes, and I find that that works better for me.&lt;/p&gt;

&lt;p&gt;A few other things that help are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Before beginning, break down tasks in terms of Pomodoros. This also helps in estimations and also track progress clearly.&lt;/li&gt;
&lt;li&gt;Group smaller tasks in a Pomodoro.&lt;/li&gt;
&lt;li&gt;A Pomodoro is an indivisible unit of work. It should not be broken for checking incoming messages, emails etc. Anything that comes in between should be postponed until the Pomodoro is complete.&lt;/li&gt;
&lt;li&gt;There can be unavoidable distractions, and Cirilo, the creator recommends that they should be tracked. And we should then reflect on how to avoid them in our next session. In case you decide to not postpone the distraction, end the Pomodoro there and start a new one later.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#what-makes-the-technique-effective"&gt;
  &lt;/a&gt;
  What makes the technique effective?
&lt;/h1&gt;

&lt;p&gt;The system has been intentionally kept simple to keep our mind in the zone to finish tasks.&lt;/p&gt;

&lt;p&gt;Breaking down into smaller tasks and tackling them one at a time helps avoid procrastination and negative feelings. It becomes easy to get started and not worry about the outcome. We tend to focus on things one Pomodoro at a time.&lt;/p&gt;

&lt;p&gt;The Pomodoro technique also helps combat distractions by limiting our flow state to a Pomodoro and then dealing with the distractions outside of it. We also tend to become more aware of where our time goes because we are tracking progress in terms of Pomodoros and distractions outside Pomodoros.&lt;/p&gt;

&lt;p&gt;The biggest reason it works is that we end up gamifying our productivity and tricking our minds to focus on consistency rather than perfection.&lt;/p&gt;

&lt;p&gt;I also tend to get away from my screen during my breaks, take a walk, move around or just stretch and grab a snack.&lt;/p&gt;

&lt;p&gt;I use the Chrome extension to track my Pomodoros though a simple timer works too. But the extension gives me analytics on my Pomodoros and makes it easier for me to stick to the Pomodoro technique.&lt;/p&gt;

&lt;p&gt;And that is all there is to know about the Pomodoro technique. If you choose to implement it in your schedule, do let us know how it goes!&lt;/p&gt;

&lt;p&gt;Originally published at (&lt;a href="https://www.wisdomgeek.com)%5Bhttps://www.wisdomgeek.com/self-help/productivity/the-pomodoro-technique-productivity-hacks/%5D"&gt;https://www.wisdomgeek.com)[https://www.wisdomgeek.com/self-help/productivity/the-pomodoro-technique-productivity-hacks/]&lt;/a&gt; on July 21, 2021.&lt;/p&gt;

</description>
      <category>productivity</category>
    </item>
    <item>
      <title>Which VS Code shortcut do you use the most?</title>
      <author>Adam Davis</author>
      <pubDate>Wed, 12 Jan 2022 12:17:48 +0000</pubDate>
      <link>https://dev.to/brewinstallbuzzwords/which-vs-code-shortcut-do-you-use-the-most-d9i</link>
      <guid>https://dev.to/brewinstallbuzzwords/which-vs-code-shortcut-do-you-use-the-most-d9i</guid>
      <description>&lt;p&gt;If VS Code is your primary editor, what’s the shortcut you use most frequently?&lt;/p&gt;

&lt;p&gt;Do you have another shortcut you use less frequently, but you enjoy using it a lot?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>productivity</category>
      <category>watercooler</category>
    </item>
  </channel>
</rss>
