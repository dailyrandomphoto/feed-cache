<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Which programming language you should learn?</title>
      <author>Prashik Meshram</author>
      <pubDate>Mon, 03 Jan 2022 13:18:06 +0000</pubDate>
      <link>https://dev.to/prashik/which-programming-language-you-should-learn-ope</link>
      <guid>https://dev.to/prashik/which-programming-language-you-should-learn-ope</guid>
      <description>&lt;p&gt;I am assuming that you are a beginner or still confused which language to choose or how to choose your next programming language which can maximize your efficiency and the language you would really enjoy working with.&lt;/p&gt;

&lt;p&gt;Languages are just like tools. Let's take an analogy of building a dog house. For building a dog house first you need a plan and a drawing of the finished house, then some raw material such as woods and a set of tools like hammer, saw and so on.&lt;/p&gt;

&lt;p&gt;Now if you don't know how to build the dog house what you will do is go online and search for &lt;code&gt;how to build dog house&lt;/code&gt;, then you will read some articles watch videos and so on. You will gain knowledge.&lt;/p&gt;

&lt;p&gt;It's just like same in programming, you require a plan on what you will do with the language in future it may be for web development, machine learning or game development. Then some raw materials such as PC (recommended) well you can also do it on mobile, but it's not that efficient. And tool(s) your programming language(s).&lt;/p&gt;

&lt;p&gt;Depending on your needs or what you're building, you may need one or multiple languages. There are hundreds of language out there, so many that at some point you will get overwhelmed what to choose. This post will try to answer some of your questions about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Which language to select&lt;/li&gt;
&lt;li&gt;How to pick a language&lt;/li&gt;
&lt;li&gt;Which language you should opt for larger companies or job interview&lt;/li&gt;
&lt;li&gt;and beyond...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, I have mentioned my personal choice on which language to choose.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-you-should-learn-a-language"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Why you should learn a language?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;It can prove to be an important question, because you should first decide what you want to be or want to achieve, have a plan of what you will do.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A man who does not plan long ahead will find trouble at his door.&lt;/strong&gt; – &lt;em&gt;Confucius&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Do yourself a favor and ask a question, &lt;em&gt;want I want to do with it&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To get a job (it can be in large companies or any other)&lt;/li&gt;
&lt;li&gt;Become a developer (game, android, web developer, etc.)&lt;/li&gt;
&lt;li&gt;Go for freelancing&lt;/li&gt;
&lt;li&gt;To get better at logical thinking and problem-solving ability&lt;/li&gt;
&lt;li&gt;Out of curiosity, want to just explore the world of programming&lt;/li&gt;
&lt;li&gt;Or for fun or any other reason&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whatever is it, just take some time and think about what you want with it. In case you don't know any developer fields, take some time and do research. &lt;em&gt;Note, you should choose one thing at a time&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Because if you just start without thinking or doesn't have a plan you will get lost in the world of so much knowledge and at some point you might get overwhelm with vast domain of programming (which happened to me). It's the same if you try to pick multiple things at once.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;At this point you should have decided what you want to do by learning a language or want to achieve.&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-choose-a-language"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How to choose a language?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Ok I'm assuming that you have to decide what you want to do whether you want to get a job or just for fun.&lt;/p&gt;

&lt;p&gt;Now you have decided, it's time to do some research to pick a language according to your work needs as well as best suited.&lt;/p&gt;

&lt;p&gt;Let's say you have picked the Web Development domain and wanted to be a &lt;a href="https://en.wikipedia.org/wiki/Front-end_web_development"&gt;front-end developer.&lt;/a&gt; Now what you can do is simply search &lt;code&gt;Front-end languages&lt;/code&gt; it will come up with some result now it's your task to go through some results and decide what's best for you.&lt;/p&gt;

&lt;p&gt;In my case the results were telling me to first learn these three core front-end languages which are HTML, CSS and JavaScript. So I can say that I require three languages to get started in front-end web development. Similarly, you can do this with other domain or for any specific role.&lt;/p&gt;

&lt;p&gt;If you ask me which language to choose for front-end I would also say the same thing, but the point of doing your own research is that it will help you to get more clear with your goals, and also you stay up to date with the latest information, who knows what will be used in industry after few years (if you are reading it now) it can be some new trend or new technology.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The only way to learn a new programming language is by writing programs in it.&lt;/strong&gt; - &lt;em&gt;Dennis Ritchie&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Advice:&lt;/em&gt; Learn one language at a time. Look as a beginner you don't need to know all the details of every language, just pick up which suits best for you, do the basics and as you progress gradually and get more comfortable and experience with language than you would be at a level where you can decision for yourself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; Just don't pick language which is out-dated or too new, ESPECIALLY If you are just starting out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-pretty-solid-choices"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Some pretty solid choices&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;If your goal is to get a job at large companies, then these are solid choices (choose anyone):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most large companies will let you pick any language out there (but not one which is not being used in industry) they will not take a language as a barrier, and also you should not. Just pick a language which you're comfortable and better at.&lt;/p&gt;

&lt;p&gt;As the whole job ecosystem does not revolve around these, as many job fields have different work associated with different languages or framework. If you want to get a job at a specific company or startup you should check their job description or requirements which highlights roles, what you should know and so on.&lt;/p&gt;

&lt;p&gt;At last, the interviewer will not ask questions about language, but it will test your problem-solving ability that how efficiently you can come up with solution of a given problem by using your preferred programming language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-you-learn-multiple-languages"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Should you learn multiple languages?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Yes, off course you can learn multiple languages, it can benefit you in various ways.&lt;/p&gt;

&lt;p&gt;Let's say you want to build a plagiarism checker with python to check pages for plagiarism, but if you want to do this task with lot lesser time let's say you want to check hundreds of pages at very minimum time then the preferred choice would be C or Java over Python. As these languages are faster.&lt;/p&gt;

&lt;p&gt;But don't do this mistake, &lt;a href="https://www.prashikmeshram.me/some-common-pitfalls-you-should-avoid-as-programmer.html"&gt;trying to learn multiple languages at the same time&lt;/a&gt;. It will decrease your productivity and harm your learning. Just don't learn them simultaneously.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#are-programming-language-matters"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Are programming language matters?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Well, it is not that important as you think it is. Let me clear what I want to say&lt;/p&gt;

&lt;p&gt;Yes off course programming language(s) matter, without it would get very difficult to give instructions to computer or do all sorts of good things which it grants you.&lt;/p&gt;

&lt;p&gt;But the more essential thing that matters is your problem-solving ability, logic skills, how you approach toward the solution of problem.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Programming languages are all the same; you just need a logic.&lt;/strong&gt; – Joey O.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As programming is all about logically thinking about the given problem and coming up with an efficient solution, with language as a tool. It depends on you, how logically do you use that tool to solve a certain problem efficiently.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#personal-choice"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Personal Choice&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;If you are still confused, then I would give my personal recommendations to get you started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;br&gt;
If you want to just get started in the world of programming without thinking too much, or you are coming from different work background and wanted to know about programming domain, then you can easily get started with it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why Python?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's beginner-friendly.&lt;/li&gt;
&lt;li&gt;Simple syntax.&lt;/li&gt;
&lt;li&gt;Higher job market as well as higher opportunity.&lt;/li&gt;
&lt;li&gt;It has a vast community so if you face any difficulty while learning you can just seek for help or there are many pre-build solutions to your problem.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;&lt;br&gt;
Another most popular language out there which is also simple and easy to learn, which is an essential part of web applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why JavaScript?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple to learn and implement.&lt;/li&gt;
&lt;li&gt;Most widely used.&lt;/li&gt;
&lt;li&gt;It fits with other languages nicely.&lt;/li&gt;
&lt;li&gt;Can be used in a variety of application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At last there is no such things as a perfect language all the programming languages have their own limitations, so it depends on you how you take this tool.&lt;/p&gt;




&lt;p&gt;If you have any questions, suggestions or feedback related to this content, feel free to reach me at &lt;a href="https://twitter.com/prashikmk"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>python</category>
      <category>javascript</category>
    </item>
    <item>
      <title>TIL: MySQL timestamp column can't go beyond '2038-01-19 03:14:07'</title>
      <author>Xinecraft</author>
      <pubDate>Mon, 03 Jan 2022 13:08:28 +0000</pubDate>
      <link>https://dev.to/xinecraft/did-you-know-mysql-timestamp-column-cant-go-beyond-2038-01-19-031407-29a8</link>
      <guid>https://dev.to/xinecraft/did-you-know-mysql-timestamp-column-cant-go-beyond-2038-01-19-031407-29a8</guid>
      <description>&lt;p&gt;MySQL 'timestamp' type column cannot store value beyond '2038-01-19 03:14:07' UTC, i.e., Int32 limit (2147483647).&lt;/p&gt;

&lt;p&gt;What do you think about Postgres timestamp column. Can they?&lt;/p&gt;

</description>
      <category>mysql</category>
      <category>discuss</category>
      <category>beginners</category>
      <category>postgres</category>
    </item>
    <item>
      <title>How to create a React tree view component.</title>
      <author>Bellotaiwo</author>
      <pubDate>Mon, 03 Jan 2022 12:50:41 +0000</pubDate>
      <link>https://dev.to/taiwobello/how-to-create-a-react-tree-view-component-3ch2</link>
      <guid>https://dev.to/taiwobello/how-to-create-a-react-tree-view-component-3ch2</guid>
      <description>&lt;p&gt;&lt;strong&gt;Quick Summary&lt;/strong&gt;: in this article, we are going to build a reusable react tree component&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;react tree view component&lt;/strong&gt; is a graphical user interface component that represents a hierarchical view of information, where each item can have several subitems. They are often seen in the sidebar, file manager applications.&lt;/p&gt;

&lt;p&gt;Let's start by creating the tree data. The &lt;code&gt;treeData&lt;/code&gt; is an array of &lt;code&gt;node&lt;/code&gt; objects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#each-node-object-has-the-following-fields"&gt;
  &lt;/a&gt;
  Each node object has the following fields.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;key&lt;/li&gt;
&lt;li&gt;label&lt;/li&gt;
&lt;li&gt;children: The children field is an array of a &lt;code&gt;node&lt;/code&gt; object.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;treeData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Documents&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0-0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Document 1-1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0-1-1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Document-0-1.doc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0-1-2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Document-0-2.doc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Desktop&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1-0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;document1.doc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0-0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;documennt-2.doc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Downloads&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="nx"&gt;Tree&lt;/span&gt; &lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Tree&lt;/span&gt; &lt;span class="nx"&gt;treeData&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;treeData&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then proceed to create a &lt;code&gt;Tree&lt;/code&gt; component that takes the &lt;code&gt;treeData&lt;/code&gt; as a prop.&lt;br&gt;
The &lt;code&gt;Tree&lt;/code&gt; component maps through the &lt;code&gt;treeData&lt;/code&gt; and returns a &lt;code&gt;TreeNode&lt;/code&gt; component that takes the tree &lt;code&gt;node&lt;/code&gt; as a prop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Tree&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;treeData&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;treeData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TreeNode&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-raw-treenode-endraw-component-incorporates-the-following"&gt;
  &lt;/a&gt;
  The &lt;code&gt;TreeNode&lt;/code&gt; component incorporates the following.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;showChildren&lt;/code&gt; state is the state responsible for displaying the &lt;code&gt;Tree&lt;/code&gt; component.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;handleClick&lt;/code&gt; is a  click handler function that toggles the &lt;code&gt;showChildren&lt;/code&gt; state.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;TreeNode&lt;/code&gt; component displays the node &lt;code&gt;label&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;TreeNode&lt;/code&gt; component also conditionally renders the &lt;code&gt;Tree&lt;/code&gt; component if the &lt;code&gt;showChildren&lt;/code&gt; state is true and passes the node &lt;code&gt;children&lt;/code&gt; to the &lt;code&gt;Tree&lt;/code&gt; component as a prop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;showChildren&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShowChildren&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setShowChildren&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;showChildren&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;marginBottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;10px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;paddingLeft&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;10px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;borderLeft&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1px solid black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;showChildren&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Tree&lt;/span&gt; &lt;span class="nx"&gt;treeData&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#this-would-be-the-result"&gt;
  &lt;/a&gt;
  This would be the result.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8RvnFNEU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ryj7xfeniwst345v65oh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8RvnFNEU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ryj7xfeniwst345v65oh.gif" alt="React Tree component" width="502" height="263"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Recursão - Ruby</title>
      <author>Diego Novais</author>
      <pubDate>Mon, 03 Jan 2022 12:45:38 +0000</pubDate>
      <link>https://dev.to/dnovais/recursao-ruby-35gi</link>
      <guid>https://dev.to/dnovais/recursao-ruby-35gi</guid>
      <description>&lt;h2&gt;
  &lt;a href="#o-que-%C3%A9-recurs%C3%A3o"&gt;
  &lt;/a&gt;
  O que é recursão?
&lt;/h2&gt;

&lt;p&gt;Recurso que permite definir algo em função dele mesmo. Ou seja, quando uma função chama a si própria. Alguns exemplos bem comuns são os algoritmos da Sequência de Fibonacci e Cálculo Fatorial.&lt;/p&gt;

&lt;p&gt;Vamos ver alguns exemplos:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-somando-os-n%C3%BAmeros-de-um-array-com-recursividade"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1 - Somando os números de um array com recursividade&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Neste exemplo iremos somar todos os números de um array utilizando Recursividade. Dado um array de números inteiros, vamos somar todos os itens e retornar o valor da soma.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;recursive_sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;slice!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;recursive_sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Poderíamos fazer de forma ternaria:  &lt;/span&gt;
&lt;span class="c1"&gt;# numbers.size &amp;lt;= 1 ? numbers[0] : numbers.slice!(0) + recursive_sum(numbers)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aqui fiz apenas uma verificação pra saber se o tamanho do array recebido é menor ou igual a 1, caso seja, retorne o primeiro e único item do array. Caso o tamanho do array seja maior que 1, retorne uma soma do primeiro item do array mais uma nova chamada do método &lt;code&gt;recursive_sum&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Então, pra entender melhor, vamos analisar o que acontece aqui utilizando um exemplo de um array [1, 2].&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;recursive_sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# =&amp;gt; 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Na primeira vez que o método for executado, o array possui 2 itens, 1 e 2.  Ou seja, a primeira condição será falsa e irá cair no &lt;code&gt;else&lt;/code&gt; por ter mais de um item. &lt;/p&gt;

&lt;p&gt;Nessa condição eu executo um &lt;code&gt;slice!(0)&lt;/code&gt;, que por sua vez remove o primeiro item do array, no caso o número 1 e chamo novamente a função soma_array, então algo como:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;1 + soma_array([2])&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;E agora ao ser executada novamente o array possui apenas um item, então a função retorna o número 2, voltando ao contexto da primeira chamada da função:&lt;/p&gt;

&lt;p&gt;`1 + 2&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#gt-3-endraw-"&gt;
  &lt;/a&gt;
  =&amp;gt; 3`
&lt;/h1&gt;

&lt;p&gt;A mesma coisa acontece caso o array possua vários itens.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-fatorial-n"&gt;
  &lt;/a&gt;
  2 - Fatorial (n!)
&lt;/h3&gt;

&lt;p&gt;Fatorial é um número natural inteiro positivo, o qual é representado por n!&lt;/p&gt;

&lt;p&gt;O fatorial de um número é calculado pela multiplicação desse número por todos os seus antecessores até chegar ao número 1. Note que nesses produtos, o zero (0) é excluído.&lt;/p&gt;

&lt;p&gt;O fatorial é representado por:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;n! = n . (n – 1) . (n – 2) . (n – 3)!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sabendo agora um pouco sobre fatorial, vamos escrever um método que execute isso de forma recursiva.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# number == 1 ? 1 : number * factorial(number)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Então se utilizarmos o número 3 como parâmetro, teremos o seguinte:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# =&amp;gt; 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Como nosso argumento é 3, faremos o seguinte cálculo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-sequ%C3%AAncia-de-fibonacci"&gt;
  &lt;/a&gt;
  3 - Sequência de Fibonacci
&lt;/h3&gt;

&lt;p&gt;Sequência de Fibonacci é a sequência numérica proposta pelo matemático Leonardo Pisa, mais conhecido como Fibonacci:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Foi a partir de um problema criado por ele que o mesmo detectou a existência de uma regularidade matemática.&lt;/p&gt;

&lt;p&gt;A sequência é definida mediante a seguinte fórmula:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Fn = Fn - 1 + Fn - 2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Trata-se do exemplo clássico dos coelhos, em que Fibonacci descreve o crescimento de uma população desses animais.&lt;/p&gt;

&lt;p&gt;Então, vamos criar esse ultimo exemplo em Ruby, lembrando que existem várias maneiras de transformar esses conceitos em código.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;# number &amp;lt;= 1 ? number : fib(number - 1) + fib(number - 2)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Podemos ver que a condicional analisa se o número recebido é menor que 2, caso positivo, será retornado o próprio número, caso não, faça uma soma utilizando a mesma função duas vezes, a primeira parte utilizando o number - 1 e a segunda o number - 2 como descrito na fórmula da sequência de Fibonnaci.&lt;/p&gt;

&lt;p&gt;Então se utilizarmos o número 6 como parâmetro, teremos o seguinte:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# =&amp;gt; 8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Como vimos a recursão é algo bastante prático e bastante útil. E o caminho para entender melhor e dominar é a prática. Em breve teremos mais conteúdos e códigos usando este recurso.&lt;/p&gt;

</description>
      <category>braziliandevs</category>
      <category>ruby</category>
      <category>rails</category>
    </item>
    <item>
      <title>AWS VPC IPAM Basics and Why You Need to be Careful</title>
      <author>Zhen Kai</author>
      <pubDate>Mon, 03 Jan 2022 12:40:23 +0000</pubDate>
      <link>https://dev.to/aws-builders/aws-vpc-ipam-basics-and-why-you-need-to-be-careful-5abn</link>
      <guid>https://dev.to/aws-builders/aws-vpc-ipam-basics-and-why-you-need-to-be-careful-5abn</guid>
      <description>&lt;p&gt;During &lt;a href="https://reinvent.awsevents.com/"&gt;AWS re:Invent 2021&lt;/a&gt;, David Brown, Amazon EC2 VP, &lt;a href="https://www.youtube.com/watch?v=ii5XWpcYYnI&amp;amp;t=2974s"&gt;announced Amazon VPC IP Address Manager (IPAM)&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-vpc-ipam"&gt;
  &lt;/a&gt;
  Why VPC IPAM?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/vpc/latest/peering/invalid-peering-configurations.html"&gt;VPCs with overlapping CIDRs cannot be peered&lt;/a&gt;, and is usually resolved only by destroying and recreating the VPC with the correct CIDR. If there are many existing workloads in the VPC, this process will incur painful migration effort and risks to live production systems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IP address allocation to Amazon VPCs is something that organizations want to get correct at the beginning and never have to think about in the future&lt;/strong&gt;. Amazon VPC IP Address Manager (VPC IPAM) helps by handling the IP address allocation, ensuring an organization will never issue conflicting CIDRs to its VPCs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BCgzOCp1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ewjysz80kqqx8hnvwru.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BCgzOCp1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ewjysz80kqqx8hnvwru.png" alt="vpc ipam logo" width="168" height="155"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;VPC IPAM can also save organizations from future embarrassments when new AWS resources are blocked from scaling due to a lack of free IP addresses. VPC IPAM has the ability to monitor IP address utilization, generating alerts to administrators when certain thresholds are crossed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-vpc-ipam-basics"&gt;
  &lt;/a&gt;
  AWS VPC IPAM basics
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2tnr_m-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gndtiw4zsv9d7nqstxe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2tnr_m-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gndtiw4zsv9d7nqstxe.png" alt="aws vpc ipam overview" width="601" height="638"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-servicelinked-role-and-ipam-administration"&gt;
  &lt;/a&gt;
  [1] Service-Linked Role and IPAM Administration
&lt;/h4&gt;

&lt;p&gt;The service-linked role &lt;code&gt;AWSServiceRoleForIPAM&lt;/code&gt; is required for IPAM to discover, monitor and manage IPAM resources (resources are covered at the end of this list).&lt;/p&gt;

&lt;p&gt;For IPAM administration, it slightly differs depending on situation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using AWS Organizations (&lt;a href="https://docs.aws.amazon.com/vpc/latest/ipam/enable-integ-ipam.html"&gt;documentation&lt;/a&gt;)

&lt;ul&gt;
&lt;li&gt;Delegate an Organizations member account to be the IPAM account. &lt;/li&gt;
&lt;li&gt;The IPAM account will then be responsible for making IPAM-level configurations.&lt;/li&gt;
&lt;li&gt;The IPAM service-linked role will be automatically created in each member account in your organization.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For single AWS account (no AWS Organizations), the IPAM service-linked role needs to be created manually.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-ipam"&gt;
  &lt;/a&gt;
  [2] IPAM
&lt;/h4&gt;

&lt;p&gt;Before everything else, you'd need to create an IPAM first (&lt;a href="https://docs.aws.amazon.com/vpc/latest/ipam/create-ipam.html"&gt;documentation&lt;/a&gt;). At this point of time, you have to decide IPAM's operating regions. This ringfences IPAM to the regions where you would have resources for IPAM to manage. This can be modified later on.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-scope-private-amp-public"&gt;
  &lt;/a&gt;
  [3] Scope (Private &amp;amp; Public)
&lt;/h4&gt;

&lt;p&gt;After creating an IPAM, 2 scopes are automatically created, 1 public and 1 private scope. To explain what scopes are, I've compiled some findings from the &lt;a href="https://docs.aws.amazon.com/vpc/latest/ipam/how-it-works-ipam.html"&gt;documentation&lt;/a&gt;, re:Invent and my own testing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can only create Pools in the private scope.&lt;/li&gt;
&lt;li&gt;Public scopes seem to be for your BYOIP (&lt;a href="https://aws.amazon.com/blogs/networking-and-content-delivery/introducing-bring-your-own-ip-byoip-for-amazon-vpc/"&gt;bring your own IP&lt;/a&gt;) resources. These IP addresses don't belong to AWS and are not managed by IPAM.&lt;/li&gt;
&lt;li&gt;All IPAM resources (non-BYOIP) will be in the automatically-created private scope by default. You can shift them to a different scope subsequently.&lt;/li&gt;
&lt;li&gt;Each private scope contains it's own set of managed IP CIDRs, IPAM Pools and resources. Inheriting overlapping AWS resources with overlapping IP CIDRS is a consideration for having additional private scopes. &lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#4-pool-toplevel"&gt;
  &lt;/a&gt;
  [4] Pool (Top-Level)
&lt;/h4&gt;

&lt;p&gt;From the &lt;a href="https://docs.aws.amazon.com/vpc/latest/ipam/planning-ipam.html"&gt;documentation&lt;/a&gt;, a pool is a collection of contiguous IP address ranges (or CIDRs). When creating a top-level pool, it should contain all the specific CIDRs you'd like to allocate to resources within a scope. &lt;/p&gt;

&lt;p&gt;AWS doesn't let you define regions here. So the CIDRs here can be consumed in any region.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: For each top-level pool, you can set allocation rules to enforce IPAM resource tagging and network mask allocation.&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-pool-sublevel"&gt;
  &lt;/a&gt;
  [5] Pool (Sub-Level)
&lt;/h4&gt;

&lt;p&gt;A sub-level pool can be restricted to a specific region and is allocated a CIDR from a higher level pool. A recommended pool structure from AWS looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2kkWFGmf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/skfnhya0felxa7cx90ui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2kkWFGmf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/skfnhya0felxa7cx90ui.png" alt="ipam pool structure visualization" width="810" height="470"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can have many levels of pools. Design the pool structure according to your needs. Sub-level pools do not require specific CIDRs to be defined; you could define a network mask and let IPAM handle the CIDR allocation automatically.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: For each sub-level pool, you can set allocation rules to enforce IPAM resource tagging, network mask allocation and region.&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#6-pool-sharing-and-ip-allocation"&gt;
  &lt;/a&gt;
  [6] Pool sharing and IP allocation
&lt;/h4&gt;

&lt;p&gt;If you are using AWS Organizations, IPAM pools can be shared to member accounts via AWS Resource Access Manager (RAM). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xUuCPVgj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5t545ycpt2j589or7ps.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xUuCPVgj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5t545ycpt2j589or7ps.png" alt="sample cidr allocation" width="522" height="195"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once shared, IPAM resources being created can utilize the pool to receive allocation of CIDRs from the pool. Additionally, a user from the member account can also be allocated an IP address through an API call to the shared pool.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#7-ipam-managed-and-monitored-resources"&gt;
  &lt;/a&gt;
  [7] IPAM managed and monitored Resources
&lt;/h4&gt;

&lt;p&gt;From the &lt;a href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html"&gt;documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In IPAM, a resource is an AWS service entity that is assigned an IP address or CIDR block. IPAM manages some resources, but only monitors other resources.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A managed resource has CIDR allocated from an IPAM pool, and is typically a VPC. A monitored resource extends beyond that, covering:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VPCs&lt;/li&gt;
&lt;li&gt;Subnets&lt;/li&gt;
&lt;li&gt;Elastic IPs&lt;/li&gt;
&lt;li&gt;Subnet reserves&lt;/li&gt;
&lt;li&gt;Public IPv4 pools&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note: The number of "active" IP addresses determines IPAM's costs. See the next section for more information on this.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That wraps up the Amazon VPC IP Address Manager basics and its various components.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-should-be-careful-of"&gt;
  &lt;/a&gt;
  You should be careful of...
&lt;/h2&gt;

&lt;p&gt;In this section, I'll share some of my findings based on my experience testing the service out without AWS Organizations.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I was not able to find a way to create the &lt;code&gt;AWSServiceRoleForIPAM&lt;/code&gt; service-linked role via AWS console. Ended up creating it via AWS CLI &lt;code&gt;aws iam create-service-linked-role --aws-service-name ipam.amazonaws.com&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It is possible to create your IPAM, scopes, pools and allocate CIDRs to VPCs before creating your service-linked role. You wouldn't be able to monitor what you have allocated.&lt;/li&gt;
&lt;li&gt;Once a pool locale/region is configured, it cannot be changed. The only way is to recreate it with the correct locale/region.&lt;/li&gt;
&lt;li&gt;You cannot delete a higher level pool without deleting it's sub-levels first.&lt;/li&gt;
&lt;li&gt;You must deprovision all CIDRs in a pool before you can delete your pool.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#costs"&gt;
  &lt;/a&gt;
  Costs
&lt;/h3&gt;

&lt;p&gt;From the &lt;a href="https://aws.amazon.com/vpc/pricing/"&gt;VPC pricing page&lt;/a&gt;: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You pay an hourly rate for each active IP address that you manage using IP Address Manager (IPAM). An active IP address is defined as an IP address assigned to a resource such as an EC2 instance or an Elastic Network Interface (ENI).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;It is important to note that not only IPAM-managed resources with active IP addresses are billed, IPAM-monitored resources, with IP addresses not allocated by IPAM are billed as well&lt;/strong&gt;. In Singapore (ap-southeast-1), each active IP address costs $0.00027 USD per hour.&lt;/p&gt;

&lt;p&gt;This is a problem for users who run a self-managed Kubernetes cluster in AWS or use Amazon Elastic Kubernetes Service (EKS) with self-managed nodes. These Kubernetes nodes have many IP addresses per Elastic Network Interface (ENI) and with each IP address being classified as an "active IP address" to IPAM, it's easy to see how your bill could skyrocket.&lt;/p&gt;

&lt;p&gt;Fortunately, I received a great tip to mitigate this from the AWS Community Builders group. By using &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/07/amazon-virtual-private-cloud-vpc-customers-can-assign-ip-prefixes-ec2-instances/"&gt;prefix delegation&lt;/a&gt;, IPAM counts the whole delegation (16 IP addresses) as a single IP address. You can find additional considerations and limitations for using prefixes in the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-prefix-eni.html#prefix-limit"&gt;documentation&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Alternatively, you can consider using a separate CIDR as an overlay and potentially reserving those CIDRs manually on VPC IPAM. Since these CIDRs are not assigned on an ENI, it does not count as an active IP address.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts-amp-whether-you-should-use-vpc-ipam"&gt;
  &lt;/a&gt;
  Closing Thoughts &amp;amp; Whether You Should use VPC IPAM
&lt;/h2&gt;

&lt;p&gt;Amazon VPC IPAM is a compelling and useful service for a moderately-sized AWS Organizations greenfield or brownfield set up. If you are running a Kubernetes cluster with self-managed nodes, VPC IPAM's costs could be exponentially higher. Consider some of the above suggestions to reduce costs before using the service.&lt;/p&gt;

&lt;p&gt;Stay tuned for a future blogpost for some sample Terraform code to get you started on VPC IPAM.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>vpc</category>
      <category>ipam</category>
    </item>
    <item>
      <title>How to create usable and maintainable npm packages</title>
      <author>Alexey Yakovlev</author>
      <pubDate>Mon, 03 Jan 2022 12:37:03 +0000</pubDate>
      <link>https://dev.to/yakovlev_alexey/how-to-create-usable-and-maintainable-npm-packages-4m53</link>
      <guid>https://dev.to/yakovlev_alexey/how-to-create-usable-and-maintainable-npm-packages-4m53</guid>
      <description>&lt;p&gt;Open source era is upon us. Many day to day problems that developers meet already have open source solutions on the web. When encountering an issue we instinctively first search the web for ready-made solutions and make attempts at adopting them. However how often do you find existing solutions clunky, poorly documented, unmaintained and unmaintainable?&lt;/p&gt;

&lt;p&gt;For me it is a common situation when I end up creating a solution of my own. Lately I have also started making those solutions open source and available to everyone. When doing so I started thinking about ways I can make my solutions more user friendly than others. And I ended up with a list of things I look for when creating a new npm package, a sort of check list of prerequisites to publish a package.&lt;/p&gt;

&lt;p&gt;So how can you make your npm packages more maintainable and usable?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As a disclaimer I should say that I am mostly talking about small to medium npm packages that are quickly developed to solve a small-ish problem. Larger packages are a domain of their own and out of scope of this post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h2&gt;

&lt;p&gt;It seems very obvious and basic, but how often do you stumble upon a package that has a very basic or outdated README or no README at all? Such packages are mostly useless to users.&lt;/p&gt;

&lt;p&gt;As an engineer of a solution it is your responsibility to provide sufficient documentation on how to employ a tool of your creation. But what should be sufficient? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Kg2sV9a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfge5bdq2qcj072tjxyi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Kg2sV9a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfge5bdq2qcj072tjxyi.png" alt="Never publish a package without a README and sources links" width="880" height="535"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Analysing my usage of npm packages I discovered that it is best to start with a small introduction of your package - what it does, what it helps to achieve. For example, package &lt;a href="https://github.com/kyle-mccarthy/nest-next"&gt;&lt;code&gt;nest-next&lt;/code&gt;&lt;/a&gt; starts by saying that it is a "Render Module to add Nextjs support for Nestjs". This is an example of a good short description that would come up in search. Also do not forget to add this description to your VCS hosting (likely GitHub) and &lt;code&gt;package.json&lt;/code&gt; so that it comes up in search better. The actual README file could have a more detailed introduction.&lt;/p&gt;

&lt;p&gt;Having a Table of Contents helps greatly. Allow readers to quickly scan contents of your README by providing a list of sections with relevant names and anchors. Try not to have a very long list of items and do not overextend your introduction: Table of Contents should be immediately visible when opening a README. When the list becomes very large (more than approximately 10-12 items) it either means that you should reduce the amount of items or that you are dealing with a bigger package and should split up your README in separate docs or a whole website.&lt;/p&gt;

&lt;p&gt;Continue with installation instructions. Which peer dependencies should you install? Maybe there are certain prerequisites and engine limitations? State it there and supply readers with installation snippets that are easy to copy.&lt;/p&gt;

&lt;p&gt;Finally, instruct users on actual usage. How do you employ your tool? Where do you configure it? What configuration options are available? How to import it's entities? Maybe there are certain features that are not yet implemented or behave unexpectedly? How is your solution different to similar ones? Try to fit the most important things without turning your README into a JSDoc, focus on actual usage and recipes without implementation details. Perhaps leave a link to a project of your own that employs this package as an example.&lt;/p&gt;

&lt;p&gt;It would also be nice to tell readers where to leave feedback or submit enhancements. Invite users to leave GitHub Issues or submit a Pull Request with relevant links. This is also the time to acknowledge other packages that might have inspired you.&lt;/p&gt;

&lt;p&gt;Do not forget to leave keywords and VCS links in your &lt;code&gt;package.json&lt;/code&gt;. And obviously always include README in your published files.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#managing-code"&gt;
  &lt;/a&gt;
  Managing code
&lt;/h2&gt;

&lt;p&gt;Once again, it's fairly obvious to make your code readable. However some of the more popular packages tend to have all the code in a single file with a mixed bag of code styles. Other packages overengineer solutions. Strike a balance between the two.&lt;/p&gt;

&lt;p&gt;Employ type-checking to make your code safer to change. You might not even use TypeScript or actual &lt;code&gt;.ts&lt;/code&gt; files. You may use JSDoc typings and JS checks to leverage some type-safety without need to compile your code. I used this strategy in &lt;a href="https://github.com/yakovlev-alexey/parcel-resolver-ts-base-url"&gt;one of my packages&lt;/a&gt; and found it really useful. And having types through TypeScript annotations or JSDoc is a must for any exported functions.&lt;/p&gt;

&lt;p&gt;Never write all the code in a single file. Create separate files for functions, maybe even folders for different types of functions and classes. Try not to add any dependencies to your project unless they are peer or likely to be reused in users &lt;code&gt;node_modules&lt;/code&gt;. Use &lt;a href="http://bundlephobia.com"&gt;&lt;code&gt;bundlephobia&lt;/code&gt;&lt;/a&gt; to track your package size.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8DL5AX4p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fcon813114oqwks7j3ge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8DL5AX4p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fcon813114oqwks7j3ge.png" alt="Do not make your users like that" width="460" height="522"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do not invest in automatic tests. This might seem counterintuitive but I find spending time on unit tests for small packages wasteful. Unless your package is a unit of itself, a simple function or class with clear inputs and outputs.&lt;/p&gt;

&lt;p&gt;While TDD and unit tests are amazing for product development, I find them fairly useless due to nature of small to medium packages that are either never-changing or ever-changing forcing you to endlessly update tests instead of focusing on the solution to the problem at hand. This obviously changes for larger packages and packages with huge user bases but it is not often you create one to solve a day to day problem. &lt;/p&gt;

&lt;p&gt;Do not employ powerful and hard-to-configure tools to build and develop your project. Leave a basic &lt;code&gt;.editorconfig&lt;/code&gt; file to keep codestyle under control for tiny packages. Do not minify your sources - it will not give a significant enough difference for small packages. It is far better to install a package with less dependencies than a package with minified sources. For most compilation needs Microsoft TypeScript Compiler (&lt;code&gt;tsc&lt;/code&gt;) should do the job. Perhaps do not transpile your code at all.&lt;/p&gt;

&lt;p&gt;Keep your &lt;code&gt;package.json&lt;/code&gt; clean. State all the required snippets in &lt;code&gt;scripts&lt;/code&gt; section. Specify a valid &lt;code&gt;engines&lt;/code&gt; property. Use a valid &lt;code&gt;main&lt;/code&gt; or &lt;code&gt;module&lt;/code&gt; field and include only necessary files: &lt;code&gt;dist&lt;/code&gt; folder or &lt;code&gt;index&lt;/code&gt; file, README and LICENSE files. And perhaps most importantly properly specify package dependencies: peer dependencies should be peer, and no dev deps should be in actual dependency list.&lt;/p&gt;

&lt;p&gt;It is also helpful to have a readable commit log. Packages with a single commit in VCS do not look very reliable. Great commit history also helps when discovering code through blame.&lt;/p&gt;

&lt;p&gt;Remember, that it is impossible make a solution to all the problems. To conclude this section, your code should do two things: 1) solve the desired problem and no other problem with as little dependencies as possible; 2) be easy to extend or modify so that users can easily alter your solution to suit their goals.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#versioning"&gt;
  &lt;/a&gt;
  Versioning
&lt;/h2&gt;

&lt;p&gt;Another simple thing that is somehow hard to get right. Always employ  &lt;a href="https://semver.org"&gt;Semantic Versioning&lt;/a&gt;. Invest in making your commits both human and machine readable. &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;Conventional Commits&lt;/a&gt; can help you with that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DN0mNpi9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0d1ghvo40rodwj0tw2z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DN0mNpi9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0d1ghvo40rodwj0tw2z.png" alt="Do you speak semantic versioning?" width="512" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is not uncommon to find a package maintainer who would accept your contribution and then forget to publish a new version of their package. To make sure that it never happens with you create a basic CI workflow that would automatically manage versions and publish your package according to newly pushed commits to VCS. But do not use external services for CI - GitHub Actions and GitLab-CI would suffice. &lt;/p&gt;

&lt;p&gt;Luckily such workflows are largely reusable and I have a few public Gists with GitHub Actions workflows for different types of projects. More serious project with tests and linting may employ this &lt;a href="https://gist.github.com/yakovlev-alexey/75a1d1e519eff586b518624c81fc0930"&gt;multi-stage workflow&lt;/a&gt; and smaller packages would be fine with &lt;a href="https://gist.github.com/yakovlev-alexey/b8019044854bb196307e1d7eefc663ab"&gt;a simple publish-on-push workflow&lt;/a&gt;. Both workflows employ &lt;a href="https://github.com/yakovlev-alexey/bump-package-version-action"&gt;&lt;code&gt;bump-package-version-action&lt;/code&gt;&lt;/a&gt; of my own, check &lt;a href="https://github.com/yakovlev-alexey/bump-package-version-action#usage"&gt;documentation&lt;/a&gt; for more details on it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-a-human"&gt;
  &lt;/a&gt;
  Be a human
&lt;/h2&gt;

&lt;p&gt;Just that. Respect your users, respond to issues with manners and in a reasonable time, discuss enhancements with contributors and with detailed feedback. Focus not on having a package that &lt;em&gt;you&lt;/em&gt; think works, but on a package that solves &lt;em&gt;users&lt;/em&gt; problems and respects their opinion.&lt;/p&gt;

&lt;p&gt;Remember that your goal is not to have the most popular package. Your goal should be collaborating on creating the best possible tool to solve a problem. Even if someone discovered a better solution as a fork of yours do not be mad at them - ask them if there is a way to integrate their solution into yours.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Let's rewind all the things I stated to a more concise list. When creating a npm package do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create documentation for the user&lt;/li&gt;
&lt;li&gt;provide the user with installation and usage instructions&lt;/li&gt;
&lt;li&gt;warn the user of known issues and limitations&lt;/li&gt;
&lt;li&gt;leave a link to your VCS&lt;/li&gt;
&lt;li&gt;invite users to leave feedback and contributions&lt;/li&gt;
&lt;li&gt;type-check your code&lt;/li&gt;
&lt;li&gt;provide types for exported entities&lt;/li&gt;
&lt;li&gt;keep dependencies up to date&lt;/li&gt;
&lt;li&gt;strive to have a smaller package&lt;/li&gt;
&lt;li&gt;create a readable and extendable code&lt;/li&gt;
&lt;li&gt;employ Semantic Versioning&lt;/li&gt;
&lt;li&gt;follow Conventional Commits&lt;/li&gt;
&lt;li&gt;automate versioning and publishing&lt;/li&gt;
&lt;li&gt;respect and collaborate with users&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And do not:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;publish a package with an insufficient or without a README&lt;/li&gt;
&lt;li&gt;create a JSDoc out of your README&lt;/li&gt;
&lt;li&gt;leave users without links to source code&lt;/li&gt;
&lt;li&gt;write the code in a single file&lt;/li&gt;
&lt;li&gt;overengineer solutions&lt;/li&gt;
&lt;li&gt;invest in unit tests (unless your package is a unit of its own)&lt;/li&gt;
&lt;li&gt;solve more than one problem at a time&lt;/li&gt;
&lt;li&gt;release breaking changes without major versions&lt;/li&gt;
&lt;li&gt;add unnecessary dependencies&lt;/li&gt;
&lt;li&gt;forget to publish latest versions&lt;/li&gt;
&lt;li&gt;argue with your users about functionality&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KYql1z0P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tvk3zsao1wixv8b2het6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KYql1z0P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tvk3zsao1wixv8b2het6.jpg" alt="Compiled list on a board" width="880" height="515"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you agree with this list? Perhaps you find some points unreasonable or have something to add? Do you even believe in the open source itself and the future being largely open source? Be welcome to discuss in the comments.&lt;/p&gt;

</description>
      <category>npm</category>
      <category>opensource</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How To Customize Super Tokens APIs.
</title>
      <author>Ankur Tyagi</author>
      <pubDate>Mon, 03 Jan 2022 12:30:03 +0000</pubDate>
      <link>https://dev.to/tyaga001/how-to-customize-super-tokens-apis-1gm6</link>
      <guid>https://dev.to/tyaga001/how-to-customize-super-tokens-apis-1gm6</guid>
      <description>&lt;p&gt;Last month, I got a chance to explore SUPERTOKENS- an open-source alternative to Auth0, Firebase Auth, and AWS Cognito.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;SuperTokens enables easy customizations - all within your codebase. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;They built "API overrides" which empowers devs to disable and modify any SuperTokens API.&lt;/p&gt;

&lt;p&gt;Auth requirements are quite varied. &lt;/p&gt;

&lt;p&gt;Therefore any auth solution must provide the ability to customise their APIs. Each solution uses its own terminology for this feature:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keycloak uses “Implementing a SPI”&lt;/li&gt;
&lt;li&gt;Auth0 calls these “Auth0 actions”&lt;/li&gt;
&lt;li&gt;Firebase calls these “Extend using cloud functions”&lt;/li&gt;
&lt;li&gt;AWS Cognito uses the term “Lambda triggers &amp;amp; Custom challenge”&lt;/li&gt;
&lt;li&gt;SuperTokens calls this feature “Overrides”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;These features allow you to change the default behaviour of the auth APIs by:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Creating an HTTP webhook in your API layer which is then called by the auth provider&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Uploading code to the auth provider (for example JS code for Auth0, or Java interface implementation for Keycloak) which run at specific points in the API’s logic.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Uploading code to the auth provider which can replace the existing API’s logic entirely (as opposed to just running at specific points in the API)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-powerful-these-solutions-are-depends-on"&gt;
  &lt;/a&gt;
  How powerful these solutions are, depends on:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The auth provider providing the right “hook points” in their API, where your custom code can run.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your familiarity with the programming language you need to use to write the custom code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How easily your custom code can integrate with your existing infrastructure code (for example database connection setup), and how easily it can be maintained (for example, you may need to maintain the custom code snippets in your git repo as well as on the auth provider’s dashboard). &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;In this article, we will be talking about how to customise the auth APIs provided by SuperTokens using its “Override” feature. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;In order to understand that, we must first understand how SuperTokens fits within an app.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#supertokens-architecture"&gt;
  &lt;/a&gt;
  SuperTokens’ architecture:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sM9zM0cr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640618707442/zz5_Yg1it.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sM9zM0cr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640618707442/zz5_Yg1it.png" alt="selfhosted2x-p-800.png" width="800" height="420"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we can see the architecture diagram for the self-hosted version of SuperTokens. On the left, we have the client (browser, mobile app) which talks to your APIs. Your API layer has your application APIs (shown as /api1/, /api2/, ..) and also APIs automatically exposed by the SuperTokens backend SDKs via our middleware function (shown as /auth/signin, /auth/signout, ...). &lt;/p&gt;

&lt;p&gt;The SuperTokens APIs talk to the SuperTokens Core (HTTP microservice) to persist data in the database. Your application APIs can also talk to the core if needed.&lt;/p&gt;

&lt;p&gt;Keeping this in mind, the concept of override is that you can change the behaviour of the SuperTokens APIs (exposed to the frontend) as per your requirements (all within your API layer, in the language you already use). &lt;/p&gt;

&lt;p&gt;Think of this being similar to overrides in object-oriented programming where you have an original implementation, and you can modify its behaviour by overriding the existing functions. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can even call the “super” class implementation of that function in your override function. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#overriding-feature-in-supertokens"&gt;
  &lt;/a&gt;
  Overriding feature in SuperTokens:
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Whilst this article is focused on a NodeJS backend, the concepts here are very similar to all the other backend SDKs provided by SuperTokens.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To override the default implementation, we must use the override config value when calling supertokens.init. Each recipe inside the recipeList, accepts an override config that can be used to change the behaviour of that recipe:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZM1XweT5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640618829676/rONn88X0y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZM1XweT5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640618829676/rONn88X0y.png" alt="carbon-p-800.png" width="800" height="438"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above, we have defined the skeleton code for how to override the behaviour of the EmailPassword recipe. A very similar skeleton is applicable for overriding the Session (or any other) recipe.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#there-are-two-types-of-override"&gt;
  &lt;/a&gt;
  There are two types of override:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;APIs: These govern how the APIs exposed by that recipe behave. For EmailPassword, these are the sign in / sign up, reset password and email verification APIs. By overriding these, you can change how these APIs behave when they are called from the frontend.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Functions: These are the functions that govern how the recipe itself behaves. They can be called by you manually in your APIs and they are also used in the APIs we expose to the frontend. By default, they query the SuperTokens core and return its response.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-difference-between-the-two-are"&gt;
  &lt;/a&gt;
  The difference between the two are:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;API functions have access to the request and response objects depending on the web framework being used.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;API functions can call several recipe functions or even call functions from multiple recipes. For example, the signInPOST API function in the EmailPassword recipe, calls the signIn recipe function from EmailPassword recipe and the createNewSession function from the Session recipe.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You always want to try and use the override.functions config since that will make the minimum change to the default behaviour. If the inputs to those functions don’t suffice for your use case, then you should override the APIs.&lt;/p&gt;

&lt;p&gt;In both these types of overrides, they accept the originalImplementation variable as an input and the return is an object that has the same type as the originalImplementaion. &lt;/p&gt;

&lt;p&gt;For EmailPassword recipe, the originalImplementation object contains:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-function-override-see-full-type-def-here-"&gt;
  &lt;/a&gt;
  For function override (see full type def  &lt;a href="https://supertokens.io/docs/nodejs/modules/recipe_emailpassword.html#RecipeInterface"&gt;here&lt;/a&gt; ):
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;signIn&lt;/li&gt;
&lt;li&gt;signUp&lt;/li&gt;
&lt;li&gt;updateEmailOrPassword&lt;/li&gt;
&lt;li&gt;createResetPasswordToken&lt;/li&gt;
&lt;li&gt;resetPasswordUsingToken&lt;/li&gt;
&lt;li&gt;getUserByEmail&lt;/li&gt;
&lt;li&gt;getUserById&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#for-api-override-see-full-type-def-here-"&gt;
  &lt;/a&gt;
  For API override (see full type def  &lt;a href="https://supertokens.io/docs/nodejs/modules/recipe_emailpassword.html#APIInterface"&gt;here&lt;/a&gt; )
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;signInPOST&lt;/li&gt;
&lt;li&gt;signUpPOST&lt;/li&gt;
&lt;li&gt;emailExistsGET&lt;/li&gt;
&lt;li&gt;generatePasswordResetTokenPOST&lt;/li&gt;
&lt;li&gt;passwordResetPOST&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For Session recipe, the originalImplementation object contains:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-function-override-see-full-type-def-here-"&gt;
  &lt;/a&gt;
  For function override (See full type def  &lt;a href="https://supertokens.io/docs/nodejs/modules/recipe_session.html#RecipeInterface"&gt;here&lt;/a&gt; )
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;createNewSession&lt;/li&gt;
&lt;li&gt;getAccessTokenLifeTimeMS&lt;/li&gt;
&lt;li&gt;getAllSessionHandlesForUser&lt;/li&gt;
&lt;li&gt;getRefreshTokenLifeTimeMS&lt;/li&gt;
&lt;li&gt;getSession&lt;/li&gt;
&lt;li&gt;getSessionInformation&lt;/li&gt;
&lt;li&gt;refreshSession&lt;/li&gt;
&lt;li&gt;revokeAllSessionsForUser&lt;/li&gt;
&lt;li&gt;revokeMultipleSessions&lt;/li&gt;
&lt;li&gt;revokeSession&lt;/li&gt;
&lt;li&gt;updateAccessTokenPayload&lt;/li&gt;
&lt;li&gt;updateSessionData&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#for-api-override-see-full-type-def-here-"&gt;
  &lt;/a&gt;
  For API override (see full type def  &lt;a href="https://supertokens.io/docs/nodejs/modules/recipe_session.html#APIInterface"&gt;here&lt;/a&gt; ):
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;refreshPOST&lt;/li&gt;
&lt;li&gt;signOutPOST&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the code snippet above, we are not modifying the default behaviour of any of these functions since we are simply returning the originalImplementation object. If you want to modify the signIn function, then we can do so like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hw7fGJdG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640619758888/WY5SoaGXi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hw7fGJdG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640619758888/WY5SoaGXi.png" alt="carbon-1-p-800.png" width="800" height="678"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above code snippet, we have provided a custom signIn function that uses the original implementation’s signIn function. As marked above (in TODO comments), we can write custom logic before or after calling the original implementation.&lt;/p&gt;

&lt;p&gt;If we wish, we can even avoid calling the original implementation entirely and define our own logic. For example, if we wanted to use a different password hashing algorithm that is not supported by SuperTokens.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#special-cases-for-modifying-apis"&gt;
  &lt;/a&gt;
  Special cases for modifying APIs:
&lt;/h2&gt;

&lt;p&gt;Sometimes, you may want to modify the default API to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Access the request object, for example, to read the origin header.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Send a custom reply to your frontend UI that deviates from our predefined output types&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Disable an API we have provided entirely. For example, you may want to do this if you do not want users to self sign up in your application.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The function signature of all the API interface functions has an options parameter that contains the original request and response objects. You can read from the request object and write to the response object as you normally would in your own APIs.&lt;/p&gt;

&lt;p&gt;For example, if you want to read the request’s origin header during the sign up API, you can do it as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qv0sjRr4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640619277666/duMFTRLQB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qv0sjRr4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640619277666/duMFTRLQB.png" alt="Clean Work Place Blog Banner (11).png" width="800" height="547"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see above, we can access the request object using input.options.req.&lt;/p&gt;

&lt;p&gt;Likewise, if we want to send a custom response to the frontend, we can access the response object via input.options.res.&lt;/p&gt;

&lt;p&gt;Finally, to disable an API that we provide, you can set it to undefined as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vVQ4Y5fc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640619362793/yb9TqhveK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vVQ4Y5fc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640619362793/yb9TqhveK.png" alt="carbon-3-p-800.png" width="800" height="328"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will disable the sign up API, and requests to /auth/signup will be passed along to your APIs or yield a 404.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-the-override-method"&gt;
  &lt;/a&gt;
  Advantages of the override method:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Make modifications&lt;/strong&gt; in the language and web framework you are already familiar with, within your own backend layer. This allows you to reuse your code for connecting to your database, sending a custom reply, logging requests and responses, sending analytics events, handling errors etc. Furthermore, since you already know the language and the web framework, the learning curve is minimal.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Easier maintainability:&lt;/strong&gt; Some auth providers require you to upload code onto their dashboard. This means you need to make sure that changes to that version of the code in your git repo are reflected on the auth provider’s dashboard (and vice versa). This can be a headache, especially with larger team sizes. With SuperTokens, all the mods you will ever need will live in the same codebase as all of your other backend code - SuperTokens is just another library you use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Flexibility in customisations:&lt;/strong&gt; If you noticed, we don’t provide any special “hook” points (like pre-sign up or post sign up callbacks). You simply create your own implementation based on the original implementation. In fact, you can even copy the original implementation’s code and paste that in your own implementation if required. Hence, your modifications can be at any point in the API logic. In turn, this provides maximum flexibility.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Flexibility in integrations:&lt;/strong&gt; Auth APIs have to interact with several other services like those used for sending emails or SMSs, spam/anomaly detection or rate-limiting. Since the APIs are all within your own backend layer, you can use any such service(s) in the APIs we provide - you are not limited to the ones we (eventually will) support.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;In the post, we saw how we can use the Overrides feature to modify the behaviour of any of the auth APIs exposed by SuperTokens. Whilst this blog focuses on NodeJS, the concept is the same in all the other SDKs we provide.&lt;/p&gt;

&lt;p&gt;That was it for this blog. &lt;/p&gt;

&lt;p&gt;I hope you learned something new today. If you did, please like/share so that it reaches others as well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;In case you have any questions please join our  &lt;a href="https://supertokens.io/discord"&gt;discord &lt;/a&gt; server.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We are building an open-source alternative to Auth0, Firebase Auth &amp;amp; AWS Cognito.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;We are 100% open source.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can easily customize any part of the user auth logic within your own backend layer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#note-this-features-is-available-for-the-selfhosting-version-of-st-as-well"&gt;
  &lt;/a&gt;
  Note: this features is available for the self-hosting version of ST as well.
&lt;/h3&gt;

&lt;p&gt;Follow @ &lt;a href="https://twitter.com/supertokensio"&gt;supertokensio &lt;/a&gt; for more technical content. &lt;/p&gt;

&lt;p&gt;I wrote a blog post in Nov 2021 in which I explained everything what I see in ST check  &lt;a href="https://theankurtyagi.com/everything-about-super-tokens-an-open-source-alternative-to-auth0-firebase-auth-and-aws-cognito/"&gt;here&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;Let me know how you will use  &lt;a href="https://supertokens.io/"&gt;SuperTokens &lt;/a&gt; to create your next project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connect with me on &lt;a href="https://twitter.com/TheAnkurTyagi"&gt;Twitter &lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you like this. &lt;/p&gt;

&lt;p&gt;I encourage you all to sign up for my newsletter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It's free. You can ask me your questions via email.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Check out old editions here:  &lt;a href="https://www.getrevue.co/profile/AnkurTyagi"&gt;The 2-1-1 Developer Growth Newsletter by Ankur&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;Also if you want to talk about SuperTokens, have questions please shoot a DM on Twitter &lt;a href="https://twitter.com/TheAnkurTyagi"&gt;here&lt;/a&gt; .&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Quasar admin CRM with Quasar 2!</title>
      <author>Mayank Patel</author>
      <pubDate>Mon, 03 Jan 2022 12:02:43 +0000</pubDate>
      <link>https://dev.to/mayank091193/quasar-admin-crm-with-quasar-2-5c78</link>
      <guid>https://dev.to/mayank091193/quasar-admin-crm-with-quasar-2-5c78</guid>
      <description>&lt;p&gt;I have migrated my Quasar Admin CRM template to Quasar 2! I am offering it at the cheap price of $49! If you want to purchase, please send me an email at &lt;a href="mailto:mayank091193@gmail.com"&gt;mayank091193@gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Live demo: &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#httpsnextquasaradmincrmnetlifyapp"&gt;
  &lt;/a&gt;
  &lt;a href="https://next-quasar-admin-crm.netlify.app/"&gt;https://next-quasar-admin-crm.netlify.app/&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Do let me know in case of any questions.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>css</category>
      <category>quasarframework</category>
    </item>
    <item>
      <title>Best productivity tools for web developers</title>
      <author>Rakesh Potnuru</author>
      <pubDate>Mon, 03 Jan 2022 11:39:38 +0000</pubDate>
      <link>https://dev.to/itsrakesh/best-productivity-tools-for-web-developers-1e7g</link>
      <guid>https://dev.to/itsrakesh/best-productivity-tools-for-web-developers-1e7g</guid>
      <description>&lt;p&gt;Productivity tools make developer life easy by automating routine tasks, helping in repetitive things, making software build, ship faster, etc... Of course, a developer day is not easy without these productivity tools. So in this blog, let's see some of the best productivity tools for web developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-github-copilot"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://copilot.github.com"&gt;GitHub Copilot&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Copilot is currently had Technical Preview only.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nzXURh9W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641193936281/e03BVjQIV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nzXURh9W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641193936281/e03BVjQIV.png" alt="GitHub Copilot" width="880" height="438"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copilot is your AI pair programmer means you don't need to search for another pair programmer to code together 😄. Jokes apart, this copilot is a powerful tool with its autocompletion and code suggestions - no more wasting time in docs, no more copying from StackOverflow.&lt;/p&gt;

&lt;p&gt;Few things I like about copilot:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It gives suggestions for variables and function names (🥰).&lt;/li&gt;
&lt;li&gt;If you are learning a new language it helps you to easily adapt to that language's best practices and naming conventions.&lt;/li&gt;
&lt;li&gt;Helps with boilerplate code.&lt;/li&gt;
&lt;li&gt;Code 10x faster.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-vs-code"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://vscode.dev"&gt;VS Code&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Wait, I am not going to talk about the VSCode desktop because almost every developer knows about it. Instead, I am going to talk about the VSCode browser version. It's very frustrating to go through the code of a Github repository because every file is a new link and if you have slow internet it loads super slowly. &lt;br&gt;
So here is where the VSCode browser version helps. &lt;br&gt;
Open any Github repo and replace &lt;strong&gt;.com&lt;/strong&gt; with &lt;strong&gt;.dev&lt;/strong&gt; - now see the magic. It opens the repo in VSCode so you can go through the code easily.&lt;/p&gt;

&lt;p&gt;For example, &lt;/p&gt;

&lt;p&gt;Replace &lt;a href="https://github.com/RakeshPotnuru/RakeshPotnuru"&gt;https://github.com/RakeshPotnuru/RakeshPotnuru&lt;/a&gt; with &lt;a href="https://github.dev/RakeshPotnuru/RakeshPotnuru"&gt;https://github.dev/RakeshPotnuru/RakeshPotnuru&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-frontend-checklist"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://frontendchecklist.io"&gt;Front-End Checklist&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i8Dcorlz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641193873077/tyqAIcuIC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i8Dcorlz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641193873077/tyqAIcuIC.png" alt="Front-End Checklist" width="880" height="452"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Best productivity tool for front-end devs. Before deploying your website go through this checklist.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-wakatime"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://wakatime.com"&gt;WakaTime&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6xQlQ6DG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641195980247/cy09y3fA4b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6xQlQ6DG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641195980247/cy09y3fA4b.png" alt="WakaTime" width="880" height="452"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some people don't care about how they are spending their coding time but it helps to understand how you are utilizing your time like what projects you are mostly focusing on, what languages you are spending more time on. For example, let's say you are learning a new language and you set daily goals like how much time you want to spend on that language. By tracking your time you can prioritize your tasks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-hoppscotch"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://hoppscotch.io"&gt;HoppScotch&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rXu8qoWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641198250666/3P2VeH_pl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rXu8qoWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641198250666/3P2VeH_pl.png" alt="HoppScotch" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HoppScotch is an open-source alternative to the postman. API testing is a crucial part of building RESTAPI. You can test API's with your browser but you will also realize how hard it will be if you're testing a big API. Here comes HoppScotch to rescue you. You can test API's with hopscotch without any effort.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-lambdatest"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://www.lambdatest.com"&gt;LambdaTest&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--agyf17Md--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641204203646/MnTDvpiWI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--agyf17Md--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641204203646/MnTDvpiWI.png" alt="LambdaTest" width="880" height="451"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You made a website and you want to test it in different browsers because some browsers don't support some functionalities. So you don't install all different browsers to test your website, right? Here comes LambaTest - test your website on 3000+ browsers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-animator-by-haiku"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://www.haikuanimator.com"&gt;Animator&lt;/a&gt; by Haiku
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iEcjrTmF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641204710202/5obnucTHk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iEcjrTmF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641204710202/5obnucTHk.png" alt="Animator" width="880" height="451"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Haiku Animator — a design tool for creating UI animations, Lottie files, and interactive web components. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you are a designer who loves code then Haiku is for you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-sass"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://sass-lang.com"&gt;Sass&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UUk2eYWN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641205953465/WSvDG4okv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UUk2eYWN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641205953465/WSvDG4okv.png" alt="Sass" width="880" height="452"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How this is a productivity tool 🤔? Yes, this is a productivity tool because no one wants to waste their time writing repeated and ugly CSS. With Sass's &lt;strong&gt;Variables&lt;/strong&gt;, &lt;strong&gt;Nesting&lt;/strong&gt;, &lt;strong&gt;Partials&lt;/strong&gt;, &lt;strong&gt;Mixins&lt;/strong&gt;, &lt;strong&gt;Modules&lt;/strong&gt;, &lt;strong&gt;Inheritance&lt;/strong&gt;, and &lt;strong&gt;Operators&lt;/strong&gt; you can do more styling with less CSS.&lt;/p&gt;




&lt;p&gt;What other great productivity tools do you know? Share in the comments.&lt;/p&gt;




&lt;p&gt;Hope you find these useful!&lt;br&gt;&lt;br&gt;
Save for reference.&lt;br&gt;&lt;br&gt;
Follow for more 😣.&lt;br&gt;&lt;br&gt;
Started sharing content on &lt;a href="https://twitter.com/rakesh_at_tweet"&gt;Twitter&lt;/a&gt; too - Follow if you want🔫.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Step-by-step mini snippet to set up a blog post SEO</title>
      <author>OlegP</author>
      <pubDate>Mon, 03 Jan 2022 11:16:32 +0000</pubDate>
      <link>https://dev.to/olegp/step-by-step-mini-snippet-to-set-up-a-blog-post-seo-2b02</link>
      <guid>https://dev.to/olegp/step-by-step-mini-snippet-to-set-up-a-blog-post-seo-2b02</guid>
      <description>&lt;h2&gt;
  &lt;a href="#how-to-optimize-a-blog-post"&gt;
  &lt;/a&gt;
  How to optimize a blog post
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Select the keyword and searcher intent you want for the page. One core keyword = One page. Google rank pages not domains. Use keywords tools: &lt;a href="https://ahrefs.com/"&gt;Ahrefs&lt;/a&gt;, &lt;a href="https://kwfinder.com/"&gt;KW finder&lt;/a&gt;, &lt;a href="https://www.keysearch.co/"&gt;Keysearch&lt;/a&gt;, &lt;a href="https://keywordseverywhere.com/"&gt;Keywordseverywhere&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Optional: find related non-core keywords to write sub-sections.&lt;/li&gt;
&lt;li&gt;Write the content of the page without worrying about optimization. Write for users.&lt;/li&gt;
&lt;li&gt;Optimize page title with the chosen keyword. Use dates, numbers, power words in titles. Use &lt;a href="https://headlines.coschedule.com"&gt;HeadlineStudio&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Optimize URL slug: include keyword, use hyphens, keep it short, max 3 levels of path nesting.&lt;/li&gt;
&lt;li&gt;Optimize meta Description: include keyword, google shows it on the search page, so make it readable and attractive.&lt;/li&gt;
&lt;li&gt;Optimize page content: set up a single H1 tag, include core keyword in the first 100 words, use synonyms and LSI keywords (Latent Semantic Indexing keywords are words that are commonly used within the context of the main topic, e.g. coffee: water, machine, recipe...).&lt;/li&gt;
&lt;li&gt;Structure your document: H1, H2, H3. Make it readable: keep paragraphs short, break up text with images and headings.&lt;/li&gt;
&lt;li&gt;Optimize images filenames and alt attributes: use human-friendly namings.&lt;/li&gt;
&lt;li&gt;Include internal and external links. Your page must be a part of the whole net. Link to already well-ranked pages, competitors, authorities.&lt;/li&gt;
&lt;li&gt;Use semantic markup, use specific HTML tags such as &amp;lt;article&amp;gt;, &amp;lt;p&amp;gt; and others instead of universal one like a &amp;lt;div&amp;gt;.&lt;/li&gt;
&lt;li&gt;Set up robots.txt, sitemap.xml, &lt;a href="https://search.google.com/search-console"&gt;google search console&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Use appropriate microformats and rich snippets. Set up Facebook Open Graph tags and support for Twitter cards.&lt;/li&gt;
&lt;li&gt;Include canonical meta tag: &amp;lt;link rel="canonical" href="https://..." /&amp;gt; and consider to cross-post your content on various platforms.&lt;/li&gt;
&lt;li&gt;Apply writing tips and tricks: give some value at the very beginning, use "So what?" and "Why should I care?" mindset, use humor, make it controversial, use cliff-hangers, make it personal, end with a call-to-action.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>writing</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Python - Interactive Console</title>
      <author>Sm0ke</author>
      <pubDate>Mon, 03 Jan 2022 10:57:59 +0000</pubDate>
      <link>https://dev.to/sm0ke/python-interactive-console-1bh4</link>
      <guid>https://dev.to/sm0ke/python-interactive-console-1bh4</guid>
      <description>&lt;p&gt;Happy new year! &lt;/p&gt;

&lt;p&gt;This article is a short introduction to Python shell, the Interactive console where we can fully interact with Python magic. For newcomers, &lt;strong&gt;Python&lt;/strong&gt; is a popular language that we can use to code many types of projects: web apps, games, OS system programming, or even data analytics and machine learning. Once Python is properly installed and accessible in the terminal windows, we can start writing code using the &lt;strong&gt;&lt;a href="https://blog.appseed.us/python-interactive-console/"&gt;Python Interactive Console&lt;/a&gt;&lt;/strong&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
&lt;/blockquote&gt;






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python &lt;span class="nt"&gt;--version&lt;/span&gt;
Python 3.8.4       &amp;lt;&lt;span class="nt"&gt;---&lt;/span&gt; The output
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case the above command returns an error, probably &lt;strong&gt;Python&lt;/strong&gt; is not installed or not present in the execution &lt;code&gt;PATH&lt;/code&gt; of your operating system.  &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;👉 Python - Launch the console&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python
Python 3.8.4 &lt;span class="o"&gt;[&lt;/span&gt;MSC v.1924 64 bit &lt;span class="o"&gt;(&lt;/span&gt;AMD64&lt;span class="o"&gt;)]&lt;/span&gt; on win32
Type &lt;span class="s2"&gt;"help"&lt;/span&gt;, &lt;span class="s2"&gt;"copyright"&lt;/span&gt;, &lt;span class="s2"&gt;"credits"&lt;/span&gt; or &lt;span class="s2"&gt;"license"&lt;/span&gt; &lt;span class="k"&gt;for &lt;/span&gt;more information.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 Working into the Python Console&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;       
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; my_name &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Bill'&lt;/span&gt;    &lt;span class="c"&gt;# define a variable&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; my_name             &lt;span class="c"&gt;# uses the variable &lt;/span&gt;
&lt;span class="s1"&gt;'Bill'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 1 + 2               &lt;span class="c"&gt;# return the addition of two numbers &lt;/span&gt;
3 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 Python Console - Use Modules&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before using any module, we need to install it first via &lt;code&gt;PIP&lt;/code&gt;, the official package manager for Python.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;webbrowser
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above command will install &lt;code&gt;webbrowser&lt;/code&gt; module, a popular web browser controller.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python                                  &lt;span class="c"&gt;# start the Python Console&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; import webbrowser                     &lt;span class="c"&gt;# import the module&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; webbrowser.open&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'https://appseed.us'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# open a web page&lt;/span&gt;
True
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 Python Console - Exit&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python        &lt;span class="c"&gt;# start the console&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 1 + 1       &lt;span class="c"&gt;# coding stuff     &lt;/span&gt;
2 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; quit&lt;span class="o"&gt;()&lt;/span&gt;      &lt;span class="c"&gt;# exit from the console   &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources, feel free to access:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;AppSeed for &lt;a href="https://appseed.us/support"&gt;support&lt;/a&gt; via eMail and &lt;a href="https://discord.gg/fZC6hup"&gt;Discord&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/open-source"&gt;Free Dashboards&lt;/a&gt; crafted in Flask, Django, and &lt;strong&gt;React&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>console</category>
      <category>opensource</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Hoppscotch is celebrating 35,000 GitHub Stars</title>
      <author>Liyas Thomas</author>
      <pubDate>Mon, 03 Jan 2022 10:44:40 +0000</pubDate>
      <link>https://dev.to/liyasthomas/hoppscotch-is-celebrating-35000-github-stars-42hj</link>
      <guid>https://dev.to/liyasthomas/hoppscotch-is-celebrating-35000-github-stars-42hj</guid>
      <description>&lt;p&gt;Hoppscotch now has &lt;a href="https://github.com/hoppscotch/hoppscotch"&gt;35,000 star gazers on GitHub&lt;/a&gt;. We'll use this milestone to recap Hoppscotch’s growth and other important milestones since its beginning as an experimental project in 2019. We've accomplished lot of great things together.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="http://hoppscotch.io"&gt;Hoppscotch&lt;/a&gt; is an open source API development ecosystem.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since the initial commit (~2 years ago), Hoppscotch has evolved from being an open source side project to an enterprise developer tool.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quick links:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web app: &lt;a href="http://hoppscotch.io"&gt;hoppscotch.io&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;GitHub: &lt;a href="https://github.com/hoppscotch/hoppscotch"&gt;github.com/hoppscotch/hoppscotch&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Today, Hoppscotch is celebrating the milestone of reaching 35,000 GitHub Stars.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This will be added to the greatest moments timeline.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read the tweet&lt;/strong&gt;&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PyGX9c7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FIGOQjHVcAAH_7R.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hDNq9lul--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1445794117976395785/IDVpWsOE_normal.jpg" alt="Liyas Thomas profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Liyas Thomas
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/liyasthomas"&gt;@liyasthomas&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      The power of open source ✨ 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      12:33 PM - 02 Jan 2022
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1477619150235201539" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1477619150235201539" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1477619150235201539" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;This is an achievement of our whole community. Thank you for each contribution, love, and all the commitments that you made to improve Hoppscotch. We are lucky to build this open-source project with you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Many people ask me why it got so popular. Here's my answer.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most developers have side projects. That’s how we try out new things or make something that we miss on the market or in our dev stack. But most side projects end up unfinished and never actually see the light of day. And even if a developer builds up the courage to show his work to the public, he quickly finds out that just publishing a repository doesn’t bring the masses to his doorstep.&lt;/p&gt;

&lt;p&gt;When I set out to create Hoppscotch, of course, I haven’t had the faintest idea if anyone else would be interested in it. But I was mainly scratching my own itch — I knew how to make a web app and I hoped I’d build something that would serve my needs much better than existing tools on the market. That should be your primary motivator — not to chase stars, likes, and other popular content, but to create something for yourself that will make your job easier. There’s a chance you will not be the only one that will find it useful.&lt;/p&gt;

&lt;p&gt;I’d like to share with you what I did to make sure that the project doesn’t end up in the dustbin of history. I will concentrate on open source software, but the following advice may as well apply to any creative endeavor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Build a solution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Look around - think about the tools and products you use every day and the underlying problems they solve.&lt;/p&gt;

&lt;p&gt;Instead of identifying a solution first, the initial step is to identify the problem. &lt;strong&gt;The key here is to be very specific about the problem you are identifying.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Once you’ve identified the problem, the next step is to ideate possible solutions, and they don’t have to necessarily be technical solutions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then, from those proposed solutions, create prototypes and begin to test each one.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Continue testing and refining the prototypes until you have enough validation to move full-steam ahead with the one that is working.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Read more in my article: &lt;a href="https://dev.to/liyasthomas/solve-your-own-problem-everything-else-will-follow-12bc"&gt;Solve your own problem, everything else will follow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Build in public&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Document your journey of building the project. Engage with your users in public forums like &lt;a href="https://dev.to"&gt;dev.to&lt;/a&gt;. Write blogs and articles, talk to your audience, share your milestones, ask for help, get feedback and iterate over the product.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Build for public&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ship early, ship often. Release the first version as soon as it’s useful. Don’t wait for it to be perfect. For inspiration, &lt;a href="https://codepen.io/liyasthomas/full/XWNGRoo"&gt;here's the initial public MVP release of Hoppscotch&lt;/a&gt;. You don’t have to be satisfied with it. You’ll never be. But you should be eager for some feedback.&lt;/p&gt;

&lt;p&gt;When you add a useful feature to your project, you don’t have to wait for anything to release it or deploy it. It just has to work. The feedback loop with inputs from other people will tell you whether what you’re building makes sense or whether you should take it in other directions. It’s good to get that feedback as soon as possible.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#roadmap"&gt;
  &lt;/a&gt;
  Roadmap
&lt;/h3&gt;

&lt;p&gt;Me and &lt;a href="https://dev.to/andrewtheant"&gt;Andrew Bastin&lt;/a&gt; having been building Hoppscotch in public for the past ~2 years. Today is the starting point of many exciting moves and features that will come to Hoppscotch from the very beginning of next month.&lt;/p&gt;

&lt;p&gt;We started to work on different features among which are the capability for teams to collaborate in real-time, workspaces, and some others you'll hear of soon. As always, we are grounding our work on the multiple insights that our users gave us and we are more grateful than ever to have such a committed community.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;To put it in a nutshell, we'll work on our main focus and priority: making our users happy with new features and improving Hoppscotch as much as we can do.&lt;/p&gt;

&lt;p&gt;Contact: &lt;a href="mailto:liyas@hoppscotch.io"&gt;liyas@hoppscotch.io&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#join-us-were-hiring"&gt;
  &lt;/a&gt;
  Join us - we're hiring!
&lt;/h3&gt;

&lt;p&gt;Join our journey to build Hoppscotch for an API-first software era.&lt;/p&gt;

&lt;p&gt;We're hiring in product, engineering, and design.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hoppscotch.io/careers"&gt;Apply now ✨&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Previously, I wrote about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/liyasthomas/how-hoppscotch-is-building-an-open-source-api-development-ecosystem-5cl7"&gt;How Hoppscotch is building an open source "API development ecosystem"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/liyasthomas/create-teams-for-collaboration-in-hoppscotch-58a"&gt;Create Teams for Collaboration in Hoppscotch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
  </channel>
</rss>
