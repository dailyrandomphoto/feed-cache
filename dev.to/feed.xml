<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Make VSCode Lighter</title>
      <author>Git Tricks</author>
      <pubDate>Mon, 23 Aug 2021 04:36:12 +0000</pubDate>
      <link>https://dev.to/git_tricks/make-vscode-lighter-2g3i</link>
      <guid>https://dev.to/git_tricks/make-vscode-lighter-2g3i</guid>
      <description>&lt;p&gt;VSCode is a really great Code Editor rather say nearly an IDE or better than that. But this costs a great amount of RAM and CPU in bigger projects. That's not all related VSCode but to most of its extensions. VSCode's extensions are good, by far best. But these are written for Nodejs with JS so unsurprisingly these take a handy amount of resource but efficiently. And people unknowingly accuse vscode for this. Though most of the time it doesn't cause that much of issue. But in bigger projects this tiny problem gets bigger as most of the people don't have a AMD Thread Ripper, Samsung NVMe SSD with 16GB RAM &amp;amp; a RTX3090&lt;/p&gt;
&lt;p&gt;Let's find out the reasons of this high resource usage &amp;amp; fix 'em&lt;/p&gt;

&lt;p&gt;&lt;span&gt;READ More: &lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/make-vscode-lighter/"&gt;Make Vs Code Lighter&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;





</description>
    </item>
    <item>
      <title>Automate Clean Code and Linting in Python</title>
      <author>Rahul Banerjee</author>
      <pubDate>Mon, 23 Aug 2021 04:15:44 +0000</pubDate>
      <link>https://dev.to/rahulbanerjee99/automate-clean-code-and-linting-in-python-pal</link>
      <guid>https://dev.to/rahulbanerjee99/automate-clean-code-and-linting-in-python-pal</guid>
      <description>&lt;p&gt;We will be looking at some packages to format, lint, test our code and later create a pre-commit hook to automate the process. &lt;/p&gt;

&lt;p&gt;Before we talking about the packages we will use, let's look at the python files we will work with&lt;/p&gt;

&lt;p&gt;We have a function called helpers.py&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;It has simple arithmetic functions. All the functions accept two parameters and perform an arithmetic operation on them.&lt;/p&gt;

&lt;p&gt;We have another file called tester_helpers.py&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;This file simply tests the functions we defined earlier. It uses assert to do a simple equality check.&lt;/p&gt;

&lt;p&gt;Now let's look at the packages we will be using.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing üß™
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#pytest-77k-%EF%B8%8F"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/pytest-dev/pytest"&gt;Pytest&lt;/a&gt; 7.7k+ ‚≠êÔ∏è
&lt;/h3&gt;

&lt;p&gt;This package helps us run unit tests. One requirement to keep in mind is that your python file containing the unit tests should begin with 'test_'.&lt;/p&gt;

&lt;p&gt;Only assert statements are supported. To install the package&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;pytest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To run the unit tests, type the following commands&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pytest test_helpers.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If all your tests pass, you should see a similar output&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;test_helpers.py ....             &lt;span class="o"&gt;[&lt;/span&gt;100%]

&lt;span class="o"&gt;=========&lt;/span&gt; 4 passed &lt;span class="k"&gt;in &lt;/span&gt;0.01s &lt;span class="o"&gt;===========&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If you get an error related to multiple relative imports&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;astroid.exceptions.TooManyLevelsError:
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;It is probably an issue with one of pytest's dependencies. You'll have to uninstall astroid and install it again. This ensures the altest astroid version is installed.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip uninstall astroid
pip &lt;span class="nb"&gt;install &lt;/span&gt;astroid
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After this, we will have to uninstall pytest and install pytest&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip uninstall pytest
pip &lt;span class="nb"&gt;install &lt;/span&gt;pytest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#formatting"&gt;
  &lt;/a&gt;
  Formatting ‚úçÔ∏è
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#yapf-12k-%EF%B8%8F"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/google/yapf#installation"&gt;YAPF&lt;/a&gt; 12k+ ‚≠êÔ∏è
&lt;/h3&gt;

&lt;p&gt;This was developed by google and supports in-place formatting. To install the package&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;yapf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To format your files, type the following&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yapf &lt;span class="nt"&gt;--in-place&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will format all your top level python files, if you want to include folders as well you can use the following&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yapf &lt;span class="nt"&gt;--in-place&lt;/span&gt; &lt;span class="k"&gt;**&lt;/span&gt;/&lt;span class="k"&gt;*&lt;/span&gt;.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;However, this will also include our virtual environment folder. To ignore the venv folder, simply create a file .yapfignore and add venv to it.&lt;/p&gt;

&lt;p&gt;Note: This command might take some time to run. Instead of '**' you could use the folder's specific names.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#isort-41k-%EF%B8%8F"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/PyCQA/isort"&gt;isort&lt;/a&gt; 4.1k+ ‚≠êÔ∏è
&lt;/h3&gt;

&lt;p&gt;This packages sorts your import statements to ensure they follow pep8 rules.&lt;/p&gt;

&lt;p&gt;Imports should be grouped in the following order:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Standard library imports.&lt;/li&gt;
&lt;li&gt;Related third party imports.&lt;/li&gt;
&lt;li&gt;Local application/library specific imports.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;isort re-orders import statements to ensure the above rule is followed.&lt;br&gt;
To install the package&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;isort
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To run isort&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;isort &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#autoflake-400%EF%B8%8F"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/myint/autoflake"&gt;autoflake&lt;/a&gt; 400+‚≠êÔ∏è
&lt;/h3&gt;

&lt;p&gt;It helps in getting rid of unused imports, variables and object keys.&lt;/p&gt;

&lt;p&gt;To install the package&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;autoflake
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To run autoflake&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;autoflake &lt;span class="nt"&gt;--in-place&lt;/span&gt; &lt;span class="nt"&gt;--remove-unused-variables&lt;/span&gt; &lt;span class="nt"&gt;--remove-all-unused-imports&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#some-other-formatters"&gt;
  &lt;/a&gt;
  Some other formatters
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/hhatto/autopep8"&gt;autopep8&lt;/a&gt; 3.9k+ ‚≠êÔ∏è&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/psf/black"&gt;black&lt;/a&gt; 22.1k+ ‚≠êÔ∏è&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#linting"&gt;
  &lt;/a&gt;
  Linting üîé
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#pylint-35k-%EF%B8%8F"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/PyCQA/pylint"&gt;Pylint&lt;/a&gt; 3.5k+ ‚≠êÔ∏è
&lt;/h3&gt;

&lt;p&gt;pylint ensures your code is following pep8 rules and standards. It gives each python file a score out of 10 (It can given you a negative score as well)&lt;/p&gt;

&lt;p&gt;To install the package&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;pylint
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To run the linter&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pylint &lt;span class="nt"&gt;--fail-under&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;7 &lt;span class="k"&gt;*&lt;/span&gt;.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The argument &lt;code&gt;--fail-under&lt;/code&gt; is the lower bound, if any file has a score below the lower bound, an error will be returned.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#precommit-hook"&gt;
  &lt;/a&gt;
  Pre-commit Hook ü™ù
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#what-are-git-hooks"&gt;
  &lt;/a&gt;
  What Are Git Hooks?
&lt;/h3&gt;

&lt;p&gt;Git hooks are basically scripts fired before an important action occurs, e.g., before a commit is made, before code is pushed to a repo after a commit is made, etc. You can learn more about Git Hooks and the different kinds of hooks over &lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We will be focussing on a pre-commit hook.A pre-commit hook is a hook that is run before you make a commit.&lt;/p&gt;

&lt;p&gt;First let's install the package&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;pre-commit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now we will generate a sample pre-commit hook YAML file, we will edit this later.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pre-commit sample-config
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now let's add our hook&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pre-commit &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now before every commit, the pre-commit hook defined in our YAML file will be executed.&lt;/p&gt;

&lt;p&gt;Now let's update our YAML file.&lt;br&gt;
Remove everything and only keep the following&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;repos&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;repo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;local&lt;/span&gt;
      &lt;span class="na"&gt;hooks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We will add our plugins(packages) under &lt;code&gt;hooks:&lt;/code&gt; in the YAML file. Below is the general syntax for the plugin&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;   &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;(unique id of hook)&lt;/span&gt;
     &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;(name to be displayed in terminal)&lt;/span&gt;
     &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;(command to excute)&lt;/span&gt;
     &lt;span class="na"&gt;language&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;system (for our case, always system)&lt;/span&gt; 
     &lt;span class="na"&gt;always_run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="s"&gt; (if &lt;/span&gt;&lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="s"&gt;, it will always run)&lt;/span&gt;
     &lt;span class="na"&gt;pass_filenames&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="s"&gt; (if &lt;/span&gt;&lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="s"&gt;, hook will have access to the file name)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's define a sample plugin for YAPF&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;   &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;YAPF&lt;/span&gt; 
     &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;YAPF üßπ&lt;/span&gt;
     &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;zsh -c 'yapf --in-place *.py'&lt;/span&gt;
     &lt;span class="na"&gt;language&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;system&lt;/span&gt;
     &lt;span class="na"&gt;always_run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
     &lt;span class="na"&gt;pass_filenames&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If you are using bash or are on windows, replace the zsh in 'entry' with bash.&lt;/p&gt;

&lt;p&gt;All the other plugins are pretty similar, below is the entire YAML file with all the plugins&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Whenever you update your YAML file, you will have to add the file to the staging area using git add . or git add .pre-commit-config.yaml&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Below is a successful commit&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LDIIzJ2f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b4q9awbw47y5igapbmvi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LDIIzJ2f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b4q9awbw47y5igapbmvi.png" alt="Pre-commit in action"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Setting up a pre-commit hook will ensure your code follows pep8 standards and is properly formatted.&lt;br&gt;
I hope you found the article useful. Add me on &lt;a href="https://www.linkedin.com/in/rahulbanerjee2699/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://twitter.com/rahulbanerjee99"&gt;Twitter&lt;/a&gt; &lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Web designer Roadmap 2021</title>
      <author>Git Tricks</author>
      <pubDate>Mon, 23 Aug 2021 04:09:19 +0000</pubDate>
      <link>https://dev.to/git_tricks/web-designer-roadmap-2021-30an</link>
      <guid>https://dev.to/git_tricks/web-designer-roadmap-2021-30an</guid>
      <description>&lt;h2 id="what-is-a-web-designer"&gt;What is a Web Designer?&lt;/h2&gt;
&lt;p&gt;Are you both creative and technically inclined? You may want to consider a career as a web designer!&lt;/p&gt;
&lt;p&gt;Web designers build or redesign websites. They understand what it takes to make a website functional and easy to use, but also understand what is needed to make it aesthetically appealing to the user.&lt;/p&gt;
&lt;p&gt;Web design is a rapidly growing industry, as digital media has become part of everyone's lives and people rely on the web for their communications, information, shopping, social life, and more.&lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/web-designers-roadmap-2021/&amp;amp;ved=2ahUKEwjqlebL7qryAhUF7HMBHVCiCxQQFnoECBoQAQ&amp;amp;usg=AOvVaw2Oo-ikwNXhEKOFAMaulAH4"&gt;Web Designer Roadmap&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;









</description>
    </item>
    <item>
      <title>Best VSCODE Extension For Every Web Developer</title>
      <author>Git Tricks</author>
      <pubDate>Mon, 23 Aug 2021 04:06:19 +0000</pubDate>
      <link>https://dev.to/git_tricks/best-vscode-extension-for-every-web-developer-1gj8</link>
      <guid>https://dev.to/git_tricks/best-vscode-extension-for-every-web-developer-1gj8</guid>
      <description>&lt;p&gt;¬†&lt;span&gt;Hello everyone, my name is suman and I'm a frontend developer. In this blog post, I would like to share 10 VS code extensions that every frontend developer should use. The purpose of using these extensions is to write faster, cleaner, and more consistent code.¬†&lt;/span&gt;&lt;span&gt;Let's Jump in!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;a href="https://www.codelivly.com/10-vs-code-extensions-every-frontend-developer-should-use/"&gt;Best VS Code extensions every Frontend Developer should use&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>10 Magical JavaScript Tips For Every Web Developer</title>
      <author>Git Tricks</author>
      <pubDate>Mon, 23 Aug 2021 04:01:32 +0000</pubDate>
      <link>https://dev.to/git_tricks/10-magical-javascript-tips-for-every-web-developer-3c2n</link>
      <guid>https://dev.to/git_tricks/10-magical-javascript-tips-for-every-web-developer-3c2n</guid>
      <description>&lt;p id="f6cc"&gt;In this article, we will discuss the 15 useful JavaScript tips for every web developer to save their valuable and precious time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p id="e1bb"&gt;I am always ready to learn although I do not always like being taught&lt;/p&gt;

&lt;p id="0fe5"&gt;‚Äî Winston Churchill&lt;/p&gt;


&lt;/blockquote&gt;
&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;h1 id="fa85"&gt;Tip 1. Flatten the array of the array&lt;/h1&gt;
&lt;p id="4e31"&gt;This tip will help you to flatten a deeply nested array of arrays by using¬†&lt;code&gt;Infinity&lt;/code&gt;¬†in¬†&lt;code&gt;flat&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;span id="e3aa"&gt;var array = [123, 500, [1, 2, [34, 56, 67, [234, 1245], 900]], 845, [30257]]&lt;/span&gt;&lt;span id="16da"&gt;//flatten array of array&lt;br&gt;array.flat(Infinity)&lt;/span&gt;&lt;span id="b0d8"&gt;// output:&lt;br&gt;// [123, 500, 1, 2, 34, 56, 67, 234, 1245, 900, 845, 30257]&lt;/span&gt;&lt;/pre&gt;
&lt;h1 id="902c"&gt;Tip 2. Easy Exchange Variables&lt;/h1&gt;
&lt;p id="ebf9"&gt;You probably swap the two variables using a third variable¬†&lt;code&gt;temp&lt;/code&gt;. But this tip will show you a new way to exchange variables using destructuring.&lt;/p&gt;
&lt;pre&gt;&lt;span id="298c"&gt;//example 1&lt;/span&gt;&lt;span id="3316"&gt;var a = 6;&lt;br&gt;var b = 7;&lt;/span&gt;&lt;span id="b133"&gt;[a,b] = [b,a]&lt;/span&gt;&lt;span id="aa36"&gt;console.log(a,b) // 7 6&lt;/span&gt;&lt;/pre&gt;
&lt;br&gt;Read More: &lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/magical-javascript-tips-for-every-web-developer/"&gt;10 Magical JavaScript Tips for Every Web Developer&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;

</description>
    </item>
    <item>
      <title>Top 20 JavaScript tips and tricks to increase your Speed and Efficiency </title>
      <author>Git Tricks</author>
      <pubDate>Mon, 23 Aug 2021 03:57:50 +0000</pubDate>
      <link>https://dev.to/git_tricks/top-20-javascript-tips-and-tricks-to-increase-your-speed-and-efficiency-obc</link>
      <guid>https://dev.to/git_tricks/top-20-javascript-tips-and-tricks-to-increase-your-speed-and-efficiency-obc</guid>
      <description>&lt;h3&gt;Convenient and useful techniques to reduce the lines of code and pace up your Dev Work!&lt;/h3&gt;
&lt;p&gt;In our daily tasks, we get to write functions such as sorting, searching, finding unique values, passing parameters, swapping values etc, so here I present my list of shorthand techniques to write all of them as a Pro!‚úåüèª&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WgxQe1g9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh2m04o3fgw3a6i8bzha.jpg"&gt;&lt;img alt="Increase Your Performance" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ftNfvGUp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--WgxQe1g9--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh2m04o3fgw3a6i8bzha.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;JavaScript is truly an awesome languageüíõ to learn and work with. And there can be more than one approach to reach to the same solution for given problem. In this article, we will discuss only the quickest ones.üöÄ&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;These approaches will definitely help you in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reducing the number of LOC(lines of code),&lt;/li&gt;
&lt;li&gt;Coding Competitions,&lt;/li&gt;
&lt;li&gt;Hackathons or&lt;/li&gt;
&lt;li&gt;Other time bound tasks.‚è±&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of these JavaScript Hacks uses techniques from ECMAScript6(ES2015) onwards, though the latest version is ECMAScript11(ES2020).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: All below tricks have been tested on the Console of Google Chrome.&lt;/em&gt;&lt;/p&gt;
&lt;br&gt;Read More: &lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/top-20-javascript-tips-and-tricks/"&gt;Top 20 JavaScript tips and tricks to increase your Speed and Efficiency&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;

</description>
    </item>
    <item>
      <title>üöÄ20 Best CSS3 Library For Developers.</title>
      <author>Git Tricks</author>
      <pubDate>Mon, 23 Aug 2021 03:53:51 +0000</pubDate>
      <link>https://dev.to/git_tricks/20-best-css3-library-for-developers-25ff</link>
      <guid>https://dev.to/git_tricks/20-best-css3-library-for-developers-25ff</guid>
      <description>&lt;p&gt;Web Developers used to spend a lot of time creating beautiful CSS. Thanks to the CSS libraries, we now have a better, faster, and more effective way to build responsive websites and web applications.&lt;/p&gt;
&lt;p&gt;Are you still looking for the best CSS libraries? Do you want to know which library you should try? In this article, we have 20 best CSS libraries for your inspiration.&lt;/p&gt;
&lt;h2&gt;
&lt;br&gt;
&lt;a href="https://dev.to/chetan_atrawalkar/20-best-css3-library-for-developers-58p#how-do-css-libraries-work"&gt;&lt;/a&gt;ü§î How do CSS libraries work?&lt;/h2&gt;
&lt;p&gt;CSS library gives web developers a basic structure, which includes grid, interactive UI patterns, web typography, tooltips, buttons, form elements, icons. This structure helps web developers to start quickly and efficiently when they are designing a website or web applications.&lt;/p&gt;
&lt;p&gt;Here we have put together¬†&lt;span&gt;20 best CSS libraries.&lt;/span&gt;¬†We hope you like them, and most importantly, find the best one for your needs.&lt;/p&gt;
&lt;h4&gt;
&lt;br&gt;
&lt;a href="#"&gt;&lt;/a&gt;Let's go....ü§©&lt;/h4&gt;
&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/20-best-css3-library-for-developers/&amp;amp;ved=2ahUKEwii76qFzaPyAhWvyzgGHX9RA-kQFnoECAMQBQ&amp;amp;usg=AOvVaw2AtoxfMkY_y5JPLB2VuSdV"&gt;üöÄ20 Best CSS3 Library For Developers&lt;/a&gt;&lt;/b&gt;.

</description>
    </item>
    <item>
      <title>7 Git tricks that changed my life</title>
      <author>Git Tricks</author>
      <pubDate>Mon, 23 Aug 2021 03:52:42 +0000</pubDate>
      <link>https://dev.to/git_tricks/7-git-tricks-that-changed-my-life-24bc</link>
      <guid>https://dev.to/git_tricks/7-git-tricks-that-changed-my-life-24bc</guid>
      <description>&lt;p&gt;&lt;span&gt;Git is one of the most common version control systems available, and it's used on private systems and publicly hosted websites for all kinds of development work. Regardless of how proficient with Git I become, it seems there are always features left to discover. Here are seven tricks that have changed the way I work with Git.&lt;/span&gt;&lt;/p&gt;
&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;Read More:¬†&lt;/span&gt;&lt;h1&gt;&lt;a href="https://www.codelivly.com/git-tricks-that-changed-my-life/"&gt;7 Git tricks that changed my life&lt;/a&gt;&lt;/h1&gt;

</description>
    </item>
    <item>
      <title>Pros and Cons of Progressive Web App</title>
      <author>Chris Fowler</author>
      <pubDate>Mon, 23 Aug 2021 03:37:27 +0000</pubDate>
      <link>https://dev.to/dsvdeveloper88/pros-and-cons-of-progressive-web-app-2dd4</link>
      <guid>https://dev.to/dsvdeveloper88/pros-and-cons-of-progressive-web-app-2dd4</guid>
      <description>&lt;p&gt;The incremental innovations that have an impact on people follow one another, with an increasingly clear focus on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;performance, think of the increasingly powerful devices we use every day or the tasks that allow us to do more quickly;&lt;/li&gt;
&lt;li&gt;experience, to eliminate any friction in the use of software/hardware;&lt;/li&gt;
&lt;li&gt;intelligence, with algorithms that now work in a predictive perspective.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dn4i41x1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qwojpjyfdwsbll0pw5pv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dn4i41x1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qwojpjyfdwsbll0pw5pv.jpeg" alt="Progressive Web App"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Focusing primarily on performance and User Experience for the end user, which goes the &lt;a href="https://www.designveloper.com/blog/why-progressive-web-apps/"&gt;Progressive Web App&lt;/a&gt; development, a solution that wants to combine the best of native apps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-progressive-web-app"&gt;
  &lt;/a&gt;
  What is Progressive Web App?
&lt;/h2&gt;

&lt;p&gt;A Progressive Web App (PWA) is an app that uses modern Web capabilities to offer users a very similar (if not better) experience to a native app.&lt;/p&gt;

&lt;p&gt;The term ‚Äúprogressive‚Äù refers to the fact that they introduce new features and, from the user experience‚Äôs point of view, they are initially perceived as normal websites but progressively behave more like mobile apps. Unlike traditional apps, &lt;a href="https://www.designveloper.com/blog/progressive-web-apps-examples/"&gt;best progressive web apps&lt;/a&gt; are a hybrid between regular web pages and &lt;a href="https://www.designveloper.com/blog/mobile-application-developer"&gt;mobile applications&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pros-and-cons-of-the-progressive-web-app"&gt;
  &lt;/a&gt;
  Pros and cons of the Progressive Web App
&lt;/h2&gt;

&lt;p&gt;The main features are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Progressive&lt;/strong&gt;: They work for every user, regardless of the browser chosen because they are built at the base with progressive improvement principles.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Responsive&lt;/strong&gt;: They adapt to the various screen sizes: desktop, mobile, tablet, or dimensions that can later become available.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Searchable&lt;/strong&gt;: They are identified as ‚Äúapplications‚Äù and are indexed by search engines.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Linkable&lt;/strong&gt;: Easily shared via URL without complex installations.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Updated&lt;/strong&gt;: Information is always up-to-date thanks to the data update process offered by service workers.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reactivable&lt;/strong&gt;: Make it easy to reactivate the application thanks to capabilities such as web notifications.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;App-like&lt;/strong&gt;: They behave with the user as if they were native apps, in terms of interaction and navigation.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Secure&lt;/strong&gt;: Exposed over HTTPS protocol to prevent the connection from displaying information or altering the contents.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Installable&lt;/strong&gt;: They allow the user to ‚Äúsave‚Äù the apps that he considers most useful with the corresponding icon on the screen of his mobile terminal without having to face all the steps and problems related to the use of the app store.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-most-used-technologies-for-pwa"&gt;
  &lt;/a&gt;
  What are the most used technologies for PWA?
&lt;/h2&gt;

&lt;p&gt;There are several technologies for the creation of a Progressive Web App, mainly based on JavaScript, with different characteristics.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;React:&lt;/strong&gt; A powerful JavaScript library for building dynamic and modern user interfaces.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Ionic:&lt;/strong&gt; A JavaScript framework for creating powerful applications for multiple platforms using a basic code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Angular:&lt;/strong&gt; A JavaScript framework for creating dynamic web applications that uses HTML as a template language.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Polymer:&lt;/strong&gt; A combination of components, tools and models designed to create PWA.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#so-is-the-future-progressive"&gt;
  &lt;/a&gt;
  So is the future ‚Äúprogressive‚Äù?
&lt;/h2&gt;

&lt;p&gt;The answer is, as always, depends. The decision to develop a PWA follows analysis and reflections that must be done from time to time, from project to project, from user to user.&lt;/p&gt;

&lt;p&gt;The factors that lead to the choice are many, as anticipated in this study, so there is not a defined and standard recipe but the one that gives the context fits correctly with strategy and objectives.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>writing</category>
      <category>news</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Object Oriented PHP (Lesson 2: Objects &amp; Static Methods)</title>
      <author>Clean Code Studio</author>
      <pubDate>Mon, 23 Aug 2021 03:06:22 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/object-oriented-php-lesson-2-objects-static-methods-4l5b</link>
      <guid>https://dev.to/cleancodestudio/object-oriented-php-lesson-2-objects-static-methods-4l5b</guid>
      <description>&lt;p&gt;&lt;a href="https://twitter.com/cleancodestudio"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zFu-SM5v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/twitter/follow/cleancodestudio.svg%3Fstyle%3Dsocial" alt="Twitter Follow"&gt;&lt;/a&gt; &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;An object is the implementation of a class. As discussed in lesson 1, a class is simply a blue print that outlines something. An object is the actual thing that specifies the specific details.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#objects-implementation-of-a-class"&gt;
  &lt;/a&gt;
  &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/2"&gt;Objects&lt;/a&gt;: Implementation of a &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/1"&gt;Class&lt;/a&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Conceptualize a band

&lt;ul&gt;
&lt;li&gt;A band has a name&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;A band has members&lt;/li&gt;
&lt;li&gt;A band can add a member&lt;/li&gt;
&lt;li&gt;A band has music&lt;/li&gt;
&lt;li&gt;A band can play music&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/_Zd9B_jUwlw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#static-methods"&gt;
  &lt;/a&gt;
  &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/2"&gt;Static Methods&lt;/a&gt;:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Are callable from the class level (You don't need to create an instance of the class to call it)&lt;/li&gt;
&lt;li&gt;Are considered "global to the class namespace"&lt;/li&gt;
&lt;li&gt;I recommend watching the tutorial linked above to better understand static methods - the screencast does a thorough job explaining static methods.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Objects&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In object-oriented programming (OOP), objects are the things you think about first in designing a program and they are also the units of code that are eventually derived from the process. ... Each object is an instance of a particular class or subclass with the class's own methods or procedures and data variables.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Static Methods&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In object-oriented programming (OOP) the methods that belong to a class definition are called static methods. (Sometimes they are called class methods, but this is confusing.) A static method is part of a class definition, but is not part of the objects it creates. Important: A program can execute a static method without first creating an object!&lt;/p&gt;
&lt;/blockquote&gt;


&lt;center&gt;


&lt;h3&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The End
&lt;/h3&gt;




&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #343c35 !important;
      color: #f5f5f5 !important;
      border-color: #343c35 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YeAAvjHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GeGRizPU--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/4f170830-7e2c-4f3e-81fe-b666a90b7e3f.gif" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://cleancode.studio/clean-code"&gt;Clean Code&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cleancode.studio/design-patterns"&gt;Java Script Design Patterns&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cleancode.studio/series/object-oriented-php"&gt;Object Oriented Programming&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cleancode.studio/algorithms"&gt;JavaScript Algorithm Examples&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://cleancode.studio"&gt;Clean Code Studio&lt;/a&gt;&lt;br&gt;
‚òïÔ∏è Code Tips&lt;br&gt;
‚òïÔ∏è Career Advice&lt;br&gt;
‚òïÔ∏è Developer Memes&lt;br&gt;
&lt;small&gt;Shiny button, Fancy ùó°ùó≤ùòÑùòÄùóπùó≤ùòÅùòÅùó≤ùóø üëá, Juicy Dev Tips...wanna join?&lt;/small&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://cleancodestudio.paperform.co/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dgj1OcQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7hwc3k4pzedr59fnr9r.png" alt="Yes, I want in! Button to go sign up for clean code studio newsletter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;(Discover [50+ pages] of my personal FAANG interview notes!)&lt;/small&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://twitter.com/cleancodestudio"&gt;Follow @cleancodestudio on Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtube.com/c/cleancodestudio"&gt;Follow @cleancodestudio on YouTube&lt;/a&gt;&lt;br&gt;
&lt;a href="https://tiktok.com/@cleancodestudio"&gt;Follow @cleancodestudio on TikTok&lt;/a&gt;&lt;br&gt;
&lt;a href="https://facebook.com/cleancodestudio"&gt;Follow @cleancodestudio on Facebook&lt;/a&gt;&lt;br&gt;
&lt;a href="https://instagram.com/cleancodestudio"&gt;Follow @cleancodestudio on Instagram&lt;/a&gt;&lt;br&gt;
&lt;a href="https://linkedin.com/company/cleancodestudio"&gt;Follow @cleancodestudio on LinkedIn&lt;/a&gt;&lt;br&gt;
&lt;a href="https://reddit.com/r/cleancodestudio"&gt;Follow @cleancodestudio on Reddit&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/cleancodestudio"&gt;Follow @cleancodestudio on Dev.to&lt;/a&gt;&lt;br&gt;
&lt;a href="https://stackoverflow.com/users/8541350/clean-code-studio"&gt;Follow @cleancodestudio on Stack Overflow&lt;/a&gt;&lt;br&gt;
&lt;a href="https://npmjs.com/~zhorton999"&gt;Follow @cleancodestudio packages on npm&lt;/a&gt;&lt;br&gt;
&lt;a href="https://packagist.org/packages/clean-code-studio"&gt;Follow @cleancodestudio packages on packagist&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/zhorton34"&gt;Star @cleancodestudio on Github&lt;/a&gt;&lt;/p&gt;




&lt;/center&gt;

</description>
      <category>php</category>
      <category>laravel</category>
      <category>codenewbie</category>
      <category>oop</category>
    </item>
    <item>
      <title>Docker + Angular + Nginx</title>
      <author>Dev Chhaniyara</author>
      <pubDate>Mon, 23 Aug 2021 02:51:43 +0000</pubDate>
      <link>https://dev.to/oneofthedevs/docker-angular-nginx-37e4</link>
      <guid>https://dev.to/oneofthedevs/docker-angular-nginx-37e4</guid>
      <description>&lt;p&gt;So recently, I have been digging into DevOps and Cloud Technologies and came across this service called Google Cloud Run which lets you host your application, but the only thing that bugged me was it required a docker image, and at this point, I had no idea what docker, containers, images or any of this words meant. üòï&lt;/p&gt;

&lt;p&gt;So like any sane person with no social life on weekends ü§™ I started learning about Docker and at first, it did seem a little challenging but eventually, I think the process is quite easy and interesting.&lt;/p&gt;

&lt;p&gt;So, if you have no idea about Docker and containers, I have put some links at the bottom which were super useful to me.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#but-heres-a-summary-of-docker"&gt;
  &lt;/a&gt;
  But here's a summary of Docker üê≥
&lt;/h5&gt;

&lt;p&gt;Docker is a container runtime. That's it ü§Ø. It allows us to run containerized applications.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#so-what-are-containers"&gt;
  &lt;/a&gt;
  So what are containers? üì¶
&lt;/h5&gt;

&lt;p&gt;Containers are lightweight, portable and isolated processes running on your system using the same OS kernel and user space but each with its own set of specific dependencies that do not conflict with each other.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#and-images"&gt;
  &lt;/a&gt;
  And Images? üôÑ
&lt;/h5&gt;

&lt;p&gt;A Docker image is a file used to execute code in a container. It contains application code, libraries, tools, dependencies and other files needed to run the application.&lt;/p&gt;

&lt;p&gt;So without wasting any more time, let's get started with the main topic &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dockerizing-an-angular-application"&gt;
  &lt;/a&gt;
  Dockerizing an Angular application
&lt;/h1&gt;

&lt;h5&gt;
  &lt;a href="#now-obviously-there-are-certain-things-you-need-to-have-installed-in-your-system"&gt;
  &lt;/a&gt;
  Now obviously there are certain things you need to have installed in your system
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Docker (&lt;a href="https://www.docker.com/products/docker-desktop"&gt;Download link&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;NodeJS (&lt;a href="https://nodejs.org/en/"&gt;Download link&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Angular CLI (&lt;a href="https://angular.io/guide/setup-local"&gt;Download link&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Visual studio code (Optional) (&lt;a href="https://code.visualstudio.com/"&gt;Download link&lt;/a&gt;) &lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#step-1-creating-an-angular-application"&gt;
  &lt;/a&gt;
  Step 1: Creating an Angular Application
&lt;/h3&gt;

&lt;p&gt;This one is pretty basic, we aren't going to build anything fancy here, just the pre-built template will work for this tutorial.&lt;/p&gt;

&lt;p&gt;To create your angular application, just open the terminal in the folder where you want to create your app, and write the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;ng new my-docker-angular-app
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now once this is done you should have an angular app generated, open it in VS code&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-creating-dockerfile-and-dockerignore"&gt;
  &lt;/a&gt;
  Step 2: Creating Dockerfile and .dockerignore
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#dockerfile"&gt;
  &lt;/a&gt;
  Dockerfile
&lt;/h5&gt;

&lt;p&gt;In the main folder of your application, create a new file and name it "&lt;strong&gt;Dockerfile&lt;/strong&gt;". In the file, write the following commands&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;### STAGE 1:BUILD ###&lt;/span&gt;
&lt;span class="c"&gt;# Defining a node image to be used as giving it an alias of "build"&lt;/span&gt;
&lt;span class="c"&gt;# Which version of Node image to use depends on project dependencies &lt;/span&gt;
&lt;span class="c"&gt;# This is needed to build and compile our code &lt;/span&gt;
&lt;span class="c"&gt;# while generating the docker image&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:12.14-alpine AS build&lt;/span&gt;
&lt;span class="c"&gt;# Create a Virtual directory inside the docker image&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /dist/src/app&lt;/span&gt;
&lt;span class="c"&gt;# Copy files to virtual directory&lt;/span&gt;
&lt;span class="c"&gt;# COPY package.json package-lock.json ./&lt;/span&gt;
&lt;span class="c"&gt;# Run command in Virtual directory&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;npm cache clean &lt;span class="nt"&gt;--force&lt;/span&gt;
&lt;span class="c"&gt;# Copy files from local machine to virtual directory in docker image&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;npm run build &lt;span class="nt"&gt;--prod&lt;/span&gt;


&lt;span class="c"&gt;### STAGE 2:RUN ###&lt;/span&gt;
&lt;span class="c"&gt;# Defining nginx image to be used&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; nginx:latest AS ngi&lt;/span&gt;
&lt;span class="c"&gt;# Copying compiled code and nginx config to different folder&lt;/span&gt;
&lt;span class="c"&gt;# NOTE: This path may change according to your project's output folder &lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=build /dist/src/app/dist/my-docker-angular-app /usr/share/nginx/html&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; /nginx.conf  /etc/nginx/conf.d/default.conf&lt;/span&gt;
&lt;span class="c"&gt;# Exposing a port, here it means that inside the container &lt;/span&gt;
&lt;span class="c"&gt;# the app will be using Port 80 while running&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#dockerignore"&gt;
  &lt;/a&gt;
  DockerIgnore
&lt;/h5&gt;

&lt;p&gt;If you have worked with git and know .gitignore, .dockerignore does the same thing, it specifies the files that we want to ignore while creating our docker image&lt;br&gt;
Normally it may contain node_modules, test files, etc...&lt;br&gt;
To create dockerignore, just create a file and name "&lt;strong&gt;.dockerignore&lt;/strong&gt;"&lt;br&gt;
For our application, just write the following inside the file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.git
.editorconfig
/.vscode/*
/node_modules
/e2e
/docs
.gitignore
*.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3-create-nginxconf"&gt;
  &lt;/a&gt;
  Step 3: Create nginx.conf
&lt;/h3&gt;

&lt;p&gt;We'll be using Nginx to host the angular build inside the container. So for this, we need to create a configuration file for nginx.&lt;br&gt;
Create a file inside main folder and name it "&lt;strong&gt;nginx.conf&lt;/strong&gt;".&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: We're telling nginx to listen to port 80 here as that is the port we had exposed in Dockerfile &lt;a href="#exposePort"&gt;(refer)&lt;/a&gt;. This needs to be same as what we defined in there&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;sendfile&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;default_type&lt;/span&gt; &lt;span class="nc"&gt;application/octet-stream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kn"&gt;gzip&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;gzip_http_version&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;gzip_disable&lt;/span&gt;      &lt;span class="s"&gt;"MSIE&lt;/span&gt; &lt;span class="s"&gt;[1-6]&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="s"&gt;."&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;gzip_min_length&lt;/span&gt;   &lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;gzip_vary&lt;/span&gt;         &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;gzip_proxied&lt;/span&gt;      &lt;span class="s"&gt;expired&lt;/span&gt; &lt;span class="s"&gt;no-cache&lt;/span&gt; &lt;span class="s"&gt;no-store&lt;/span&gt; &lt;span class="s"&gt;private&lt;/span&gt; &lt;span class="s"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;gzip_types&lt;/span&gt;        &lt;span class="nc"&gt;text/plain&lt;/span&gt; &lt;span class="nc"&gt;text/css&lt;/span&gt; &lt;span class="nc"&gt;application/json&lt;/span&gt; &lt;span class="nc"&gt;application/javascript&lt;/span&gt; &lt;span class="nc"&gt;application/x-javascript&lt;/span&gt; &lt;span class="nc"&gt;text/xml&lt;/span&gt; &lt;span class="nc"&gt;application/xml&lt;/span&gt; &lt;span class="nc"&gt;application/xml&lt;/span&gt;&lt;span class="s"&gt;+rss&lt;/span&gt; &lt;span class="nc"&gt;text/javascript&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;gzip_comp_level&lt;/span&gt;   &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="n"&gt;/usr/share/nginx/html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;try_files&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt;&lt;span class="n"&gt;/&lt;/span&gt; &lt;span class="n"&gt;/index.html&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4-creating-a-docker-image"&gt;
  &lt;/a&gt;
  Step 4: Creating a docker image
&lt;/h3&gt;

&lt;p&gt;To create a docker image, open a terminal in your project folder and write the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;docker build -t ng-docker-app:v1.0.0 -f ./Dockerfile .
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;-t: Tag (if not specified, docker will take "latest" by default)&lt;br&gt;
-f: File (Write the path to your Dockerfile)&lt;/p&gt;

&lt;p&gt;After this, we should have a docker image created in your system. To get the list of docker images in your system, write the following in the terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;docker image ls
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-5-create-a-docker-container"&gt;
  &lt;/a&gt;
  Step 5: Create a docker container
&lt;/h3&gt;

&lt;p&gt;To create and host your docker container, write the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;docker run -p 8000:80 -d ng-docker-app:v1.0.0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;-p: Port&lt;br&gt;
Here you'll need to define a port on which the container will be hosted and the port on which app is hosted inside the container&lt;br&gt;
Syntex: &amp;lt;host-port&amp;gt;:&amp;lt;docker-port&amp;gt;&lt;br&gt;
-d: Detach &lt;br&gt;
If this is not specified, the docker will keep the console running&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: We had exposed port 80 in Dockerfile and assigned nginx to listen to port 80, so &amp;lt;docker-port&amp;gt; has to be the same here as well&lt;/p&gt;

&lt;p&gt;To get the list of currently running containers in your system, you can get this by typing&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;docker container ls
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#finally"&gt;
  &lt;/a&gt;
  Finally
&lt;/h3&gt;

&lt;p&gt;Voila!!üéâ If you have followed each step, you should have your docker container running on Port 8000 and your application running on &lt;a href="http://localhost:8000"&gt;localhost:8000&lt;/a&gt; üòé&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#referances"&gt;
  &lt;/a&gt;
  Referances
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://medium.com/@tushar0618/installing-docker-desktop-on-window-10-501e594fc5eb"&gt;How to install docker on windows 10?&lt;/a&gt;&lt;br&gt;
&lt;a href="https://medium.com/crowdbotics/a-complete-one-by-one-guide-to-install-docker-on-your-mac-os-using-homebrew-e818eb4cfc3"&gt;How to install docker on Mac OS?&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04"&gt;How to install docker on Ubuntu&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.freecodecamp.org/news/what-is-docker-used-for-a-docker-container-tutorial-for-beginners/"&gt;Freecodecamp - What is docker used for?&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.freecodecamp.org/news/the-docker-handbook/"&gt;Freecodecamp - Docker handbook&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.ibm.com/in-en/cloud/learn/docker#toc-docker-too-_SKIsywS"&gt;IBM - What is docker?&lt;/a&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>javascript</category>
      <category>docker</category>
      <category>nginx</category>
    </item>
    <item>
      <title>GitHub Web Editor: FREE VSCode in the browser</title>
      <author>Davide 'CoderDave' Benvegn√π</author>
      <pubDate>Mon, 23 Aug 2021 01:41:26 +0000</pubDate>
      <link>https://dev.to/github/vscode-in-the-browser-for-free-github-web-editor-k4h</link>
      <guid>https://dev.to/github/vscode-in-the-browser-for-free-github-web-editor-k4h</guid>
      <description>&lt;p&gt;A lightweight code editor, based on VSCode, that can be accessed via Browser, and it's &lt;strong&gt;completely free&lt;/strong&gt;. Sounds too good to be true? Well this time it's not.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;As promised in the &lt;a href="https://dev.to/github/github-codespaces-ga-any-good-reviewed-and-tested-3e62"&gt;article&lt;/a&gt; / &lt;a href="https://youtu.be/Car0QZ_YbxQ"&gt;video&lt;/a&gt; about Codespaces that I've released last week (&lt;em&gt;check it out if you haven't yet&lt;/em&gt;), today we talk about an awesome new feature that has been released by GitHub together with Codespaces.&lt;/p&gt;

&lt;p&gt;I'm talking about the new &lt;strong&gt;Web Editor experience&lt;/strong&gt; accessible directly from your repos. Best part? It's &lt;strong&gt;completely free&lt;/strong&gt; for everyone!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation and demo&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UDbdChCXIKw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/UDbdChCXIKw"&gt;Link to the video: https://youtu.be/UDbdChCXIKw&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-it"&gt;
  &lt;/a&gt;
  What is it?
&lt;/h3&gt;

&lt;p&gt;The new Web Editor is a &lt;strong&gt;lightweight code editor&lt;/strong&gt;, based on &lt;strong&gt;VSCode&lt;/strong&gt;. It is similar to Codespaces, but it is not backed by any compute backing; it is in fact &lt;strong&gt;entirely powered by your browser&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This means it has &lt;strong&gt;some limitations&lt;/strong&gt; over Codespaces, and we will see it in a moment, but on the flipside it's very fast to load and quickly navigate. It is &lt;strong&gt;perfect for making small changes&lt;/strong&gt; to your code without the need of having an IDE on your laptop.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-access-it"&gt;
  &lt;/a&gt;
  How to Access it
&lt;/h3&gt;

&lt;p&gt;There are currently 2 ways to access the new Web Editor: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Directly via URL&lt;/strong&gt; -  just change &lt;code&gt;github.com&lt;/code&gt; to &lt;code&gt;github.dev&lt;/code&gt; in your browser when in the repo you want to work on &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;By Keyboard&lt;/strong&gt; - pressing the full stop &lt;code&gt;.&lt;/code&gt; keyboard button while in the repo&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h3&gt;

&lt;p&gt;Alright, it's time to see this in actions. Images are 1,000 times better than words, so check it out here:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UDbdChCXIKw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Demo starts at &lt;a href="https://youtu.be/UDbdChCXIKw?t=110"&gt;minute 1:50&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Comment down below&lt;/strong&gt; with what you think of this new Web Editor. It's still in beta, so probably &lt;strong&gt;some features will be added&lt;/strong&gt;, but I think it's really cool!&lt;/p&gt;

&lt;p&gt;I will soon have another article/video in which I will do a bit by bit comparison between Codespaces and this Web Editor, so consider following me or subscribing if you don't wanna miss it.&lt;/p&gt;

&lt;p&gt;Also, checkout &lt;a href="https://youtu.be/Car0QZ_YbxQ"&gt;this video&lt;/a&gt;, where I talk about the new Codespaces features now that it's GA.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; üöÄ for more content:&lt;/p&gt;

&lt;p&gt;üìΩ &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
‚òï &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
üíñ &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
üåê &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
üëï &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
üë¶üèª &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
üê±‚Äçüíª &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
üë≤üèª &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
üë¥üèª &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
üîâ &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UDbdChCXIKw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>github</category>
      <category>codenewbie</category>
      <category>codespaces</category>
    </item>
  </channel>
</rss>
