<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Dicas para criar componentes mais leg√≠veis</title>
      <author>Nilton Lopes</author>
      <pubDate>Tue, 27 Apr 2021 18:48:41 +0000</pubDate>
      <link>https://dev.to/pixelwolfhq/dicas-para-criar-componentes-mais-legiveis-336c</link>
      <guid>https://dev.to/pixelwolfhq/dicas-para-criar-componentes-mais-legiveis-336c</guid>
      <description>&lt;h1&gt;
  &lt;a href="#o-problema"&gt;
  &lt;/a&gt;
  O problema
&lt;/h1&gt;

&lt;p&gt;Uma das minhas maiores dores no desenvolvimento de aplica√ß√µes front-end √© quando abro um componente desenvolvido por um colega (ou por mim mesmo üòÖ) e vejo que este possui 2 mil linhas em um √∫nico arquivo. Para mim isso √© ruim, pois demoro para conseguir entender o que de fato todas aquelas linhas fazem - isso quando eu entendo. Ent√£o torna-se necess√°rio desprender de uma quantidade x de tempo para ir lendo tudo at√© fazer, de fato, o eu precisava inicialmente. Para resolver ou, pelo menos, amenizar esse problema existem algumas t√©cnicas que podem ser utilizadas e √© sobre isso que venho tratar aqui.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-velho-e-o-novo-testamento"&gt;
  &lt;/a&gt;
  O velho e o novo testamento
&lt;/h2&gt;

&lt;p&gt;Como j√° citei anteriormente, √†s vezes, no nosso dia a dia de desenvolvimento acabamos deixando um componente t√£o grande que caberiam 2 b√≠blias dentro dele ü§£.&lt;/p&gt;

&lt;p&gt;Para citar alguns dos problemas do arquivo desse tamanho seria:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dificuldade-na-legibilidade-da-p%C3%A1gina"&gt;
  &lt;/a&gt;
  Dificuldade na legibilidade da p√°gina
&lt;/h3&gt;

&lt;p&gt;Com arquivos muito grandes o processo de leitura acaba demorando mais e, por consequ√™ncia, o entendimento tamb√©m. Demora-se mais tempo para conseguir entender o que cada m√©todo, fun√ß√£o ou trecho de c√≥digo executa e quando executa.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#baixa-manutenibilidade"&gt;
  &lt;/a&gt;
  Baixa manutenibilidade
&lt;/h3&gt;

&lt;p&gt;√â comum ver que nesses tipos arquivos h√° uma grande depend√™ncia de peda√ßos diferentes do c√≥digo. Desta forma, se voc√™ precisa alterar um trecho X ele pode afetar algum outro trecho indesejado.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#alta-possibilidade-de-c%C3%B3digo-duplicado"&gt;
  &lt;/a&gt;
  Alta possibilidade de c√≥digo duplicado
&lt;/h3&gt;

&lt;p&gt;Tamb√©m se torna comum ver que em arquivos desse tipo h√° uma grande quantidade de c√≥digos exatamente iguais ou, pelo menos, muito parecido onde uma ou outra coisa que √© diferente. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coleguinha-pistola"&gt;
  &lt;/a&gt;
  Coleguinha pistola
&lt;/h3&gt;

&lt;p&gt;Ningu√©m gosta da sensa√ß√£o que se tem ao abrir um arquivo e pensar "eu n√£o fa√ßo ideia do que tem aqui!". O seu coleguinha n√£o gosta e voc√™ provavelmente tamb√©m n√£o. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virando-o-jogo"&gt;
  &lt;/a&gt;
  Virando o jogo
&lt;/h2&gt;

&lt;p&gt;Para virar o jogo e come√ßar a criar componentes que sejam mais manuten√≠veis, f√°ceis de ler, aproveitar da reutiliza√ß√£o e, n√£o menos importante, deixar os coleguinhas mais felizes √© interessante considerar algumas boas pr√°ticas enquanto estiver escrevendo seus componentes. Na internet encontramos diversos posts/artigos com diversas dicas do que pode ser feito para ter componentes mais manuten√≠veis e simples. Aqui n√£o irei tratar uma especificamente, mas sim de um peda√ßo de cada coisa que vi e que fazem sentido para mim. Caso voc√™ tenha interesse em se aprofundar mais no assunto recomendo muito que busque por &lt;em&gt;&lt;a href="https://bradfrost.com/blog/post/atomic-web-design/"&gt;Atomic Design&lt;/a&gt;&lt;/em&gt;.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;OBS: Nos exemplos que cito abaixo estarei usando Reactjs, mas nada impede que voc√™ aplique os conceitos em outras bibliotecas/frameworks. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#componentes-gen%C3%A9ricos-reutiliz%C3%A1veis"&gt;
  &lt;/a&gt;
  Componentes gen√©ricos reutiliz√°veis
&lt;/h3&gt;

&lt;p&gt;Ficar atento toda vez que come√ßar a notar que h√° coisas demais se repetindo no c√≥digo. Se est√° repetindo exatamente igual ou muito pr√≥ximo disso provavelmente esse trecho de c√≥digo pode virar um componente isolado.&lt;/p&gt;

&lt;p&gt;Para deixar mais sobre as coisas que se repetem, podemos tomar de exemplo coisas como: modais, bot√µes, headers, footers, t√≠tulos, sidebars, cards, caixas de alerta e muitas outras coisas. O sistema que voc√™ est√° desenvolvendo pode ter esses exemplos que citei, como podem ter outros totalmente diferentes. Vai ir da sua percep√ß√£o saber se aquilo que est√° sendo desenvolvido pode ser reutilizado por outras p√°ginas do sistema. Se a resposta for sim, ent√£o componentize!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#componentes-espec%C3%ADficos-n%C3%A3o-reutiliz%C3%A1veis"&gt;
  &lt;/a&gt;
  Componentes espec√≠ficos n√£o reutiliz√°veis
&lt;/h3&gt;

&lt;p&gt;H√° situa√ß√µes onde trechos de c√≥digos est√£o se repetindo, por√©m, n√£o √© algo que poder√° ser reutilizado em outras partes do sistema. √â algo t√£o espec√≠fico que somente aquela p√°gina ter√° aquela funcionalidade.&lt;/p&gt;

&lt;p&gt;Mesmo em casos assim, se a p√°gina est√° ficando muito grande, √© interessante fazer a componentiza√ß√£o deste trecho, por√©m, com uma diferen√ßa. No lugar de colocar esse componente na pasta &lt;code&gt;src/Components&lt;/code&gt; voc√™ o colocar√° na pasta &lt;code&gt;Components&lt;/code&gt; dentro da pasta da sua &lt;em&gt;P√°gina&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Por exemplo, imagine que voc√™ tenha uma p√°gina de listagem de produtos no diret√≥rio &lt;code&gt;/src/Pages/ProductList/index.tsx&lt;/code&gt; e nela h√° um componente que n√£o √© reutiliz√°vel por outras p√°ginas do sistema, mas que pelo tamanho que ele est√° ficando voc√™ deseja criar um arquivo exclusivamente para esse componente. Algo que poderia ser feito seria criar esse componente dentro de uma pasta &lt;code&gt;Components&lt;/code&gt;, com o caminho desse componente ficando assim: &lt;code&gt;/src/Pages/ProductList/Components/MyExampleComponent.tsx&lt;/code&gt;.&lt;br&gt;
Desta forma, todos os componentes exclusivos da p√°gina &lt;code&gt;ProductList&lt;/code&gt; estaria dentro desta pasta, facilitando a identifica√ß√£o do que est√° al√≠ dentro √© algo que n√£o √© reutiliz√°vel, mas que foi componetizado para simplificar a complexidade da p√°gina &lt;code&gt;ProductList&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mZ47LV15--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/PixelwolfHQ/front-end/raw/master/articles/small-components-pattern/assets/example-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mZ47LV15--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/PixelwolfHQ/front-end/raw/master/articles/small-components-pattern/assets/example-1.png" alt="Exemplo de componentiza√ß√£o n√£o reutiliz√°vel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#componentes-de-componentes"&gt;
  &lt;/a&gt;
  Componentes de componentes
&lt;/h3&gt;

&lt;p&gt;Outra situa√ß√£o em que √© poss√≠vel fazer componentes √© quando temos dois ou mais componentes e que juntos se tornam outro componente. Tipo aquele bot√£o e input que juntos viram uma barra de busca, sacou?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iPrGtGmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/PixelwolfHQ/front-end/raw/master/articles/small-components-pattern/assets/page_components_markup.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iPrGtGmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/PixelwolfHQ/front-end/raw/master/articles/small-components-pattern/assets/page_components_markup.png" alt="Exemplo instagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Observe a imagem acima. As caixas em roxo s√£o os componentes "Micro", ou seja, componentes pequenos que possuem uma a√ß√£o bem espec√≠fica. J√° as caixas vermelhas temos os "Macros" ou componentes de componentes. Um componente "Macro" √© um componente maior que junta v√°rios outros componentes menores dentro de si. Assim, tamb√©m facilita a reutiliza√ß√£o, pois toda vez que precisarmos daquele conjunto de componentes juntos podemos utilizar esse componente maior no lugar de ficar chamando cada componente pequeno um por um. &lt;/p&gt;

&lt;p&gt;As aplica√ß√µes para esse tipo de componentiza√ß√£o s√£o diversas. Voc√™ pode, por exemplo, querer criar um componente de uma biblioteca que voc√™ usa para que a chamada dele fique mais simples. Esse √© o exemplo que darei a seguir:&lt;/p&gt;

&lt;p&gt;Nas imagens abaixos veja que h√° dois exemplos de componentes, o primeiro √© o &lt;strong&gt;DefaultModal&lt;/strong&gt; e o segundo √© &lt;strong&gt;CustomModal&lt;/strong&gt;. Observe  que o &lt;strong&gt;CustomModal&lt;/strong&gt; est√° bem mais simples, sem precisar colocar tanta coisa no meio do componente e esses dois componentes fazem a mesma coisa. A diferen√ßa √© que no &lt;strong&gt;CustomModal&lt;/strong&gt; foi criado um componente que encapsula o c√≥digo da primeira imagem, expondo apenas algumas propriedades com os dados que de fato alteram e tamb√©m  permite que seja passado um "&lt;em&gt;filho&lt;/em&gt;" no corpo da modal para que voc√™ possa adicionar elementos mais customiz√°veis. Desta forma, o t√≠tulo, os bot√µes de a√ß√µes, as fun√ß√µes que checa se modal est√° aberta ou fechada, ficam tudo "escondidas" para quem est√° usando a vers√£o &lt;strong&gt;CustomModal&lt;/strong&gt; .  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MeVudTGx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/PixelwolfHQ/front-end/raw/master/articles/small-components-pattern/assets/modal-example.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MeVudTGx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/PixelwolfHQ/front-end/raw/master/articles/small-components-pattern/assets/modal-example.png" alt="Exemplo instagram"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bmGYmg2K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/PixelwolfHQ/front-end/raw/master/articles/small-components-pattern/assets/defaultModal-original.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bmGYmg2K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/PixelwolfHQ/front-end/raw/master/articles/small-components-pattern/assets/defaultModal-original.png" alt="Exemplo instagram"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2tzAPJ1u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/PixelwolfHQ/front-end/raw/master/articles/small-components-pattern/assets/defaultModal-component.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2tzAPJ1u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/PixelwolfHQ/front-end/raw/master/articles/small-components-pattern/assets/defaultModal-component.png" alt="Exemplo instagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reutiliza%C3%A7%C3%A3o-sem-componentes"&gt;
  &lt;/a&gt;
  Reutiliza√ß√£o sem componentes
&lt;/h3&gt;

&lt;p&gt;Nem todo c√≥digo repetido nos componentes podem sem quebrados em outros componentes menores.Tamb√©m temos c√≥digos repetidos que s√£o l√≥gicas para tratar algum problema, coisas como: formata√ß√£o de datas, buscar um endere√ßo com base num cep, tratamento de dados e coisas do tipo. Mesmo nesses casos ainda sim, podemos recorrer √† reutiliza√ß√£o, pode-se pegar esse trecho de l√≥gica repetida, criar uma fun√ß√£o que fica respons√°vel pela aquela atividade e coloc√°-la dentro de uma pasta &lt;code&gt;src/utils&lt;/code&gt; na raiz do projeto. Desta forma, toda vez que voc√™ precisar, por exemplo, buscar um endere√ßo com base no CEP, voc√™ pode importar a fun√ß√£o &lt;code&gt;getAddressByCep&lt;/code&gt; do seu &lt;code&gt;utils&lt;/code&gt; sem precisar copiar e colar o mesmo trecho de c√≥digo para uma nova p√°gina.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finalizando"&gt;
  &lt;/a&gt;
  Finalizando
&lt;/h2&gt;

&lt;p&gt;Tentei neste artigo mostrar algumas dicas para escrever um c√≥digo que seja, pelo menos, um pouco mais manuten√≠vel. Tentei passar um pouco da minha experi√™ncia do assunto, ent√£o pode ser que tenha algo que n√£o caiba na realidade do projeto que voc√™ est√° trabalhando. Caso tenha curtido o tema, sugiro novamente que pesquise por &lt;em&gt;&lt;a href="https://bradfrost.com/blog/post/atomic-web-design/"&gt;Atomic Design&lt;/a&gt;&lt;/em&gt;, pois o que mostrei aqui sobre ele foi apenas a ponta do iceberg. E se tiver algo para acrescentar ficaria agradecido se  compartilhasse comigo tamb√©m, assim podemos sempre ir evoluindo. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#refer%C3%AAncias"&gt;
  &lt;/a&gt;
  Refer√™ncias
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://inside.contabilizei.com.br/componentiza%C3%A7%C3%A3o-no-front-end-3fc889a363df"&gt;Componentiza√ß√£o no front-end I&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://inside.contabilizei.com.br/componentiza%C3%A7%C3%A3o-no-front-end-f40b0b85143f"&gt;Componentiza√ß√£o no front-end IV&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/telles/tips-estruturando-as-camadas-de-uma-arquitetura-react-36bp"&gt;Estruturando camadas de uma arquitetura no React&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.listennotes.com/podcasts/elemencast/1-atomic-design-lan%C3%A7amento-7IoMB4gnhcm/"&gt;Atomic design&lt;/a&gt;&lt;/p&gt;

</description>
      <category>component</category>
      <category>atomicdesign</category>
      <category>react</category>
      <category>frontend</category>
    </item>
    <item>
      <title>SOLID: Liskov Substitution Principle</title>
      <author>Victor Manuel Pinzon</author>
      <pubDate>Tue, 27 Apr 2021 18:44:28 +0000</pubDate>
      <link>https://dev.to/victorpinzon1988eng/solid-liskov-substitution-principle-3jel</link>
      <guid>https://dev.to/victorpinzon1988eng/solid-liskov-substitution-principle-3jel</guid>
      <description>&lt;p&gt;&lt;em&gt;This is a continuation of the &lt;a href="https://dev.to/victorpinzon1988eng/solid-single-responsibility-principle-48an"&gt;SOLID principles&lt;/a&gt; series.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Liskov substitution principle is the most technical principle of all. However, it is the one that most helps to develop decoupled applications, which is the foundation of designing reusable components.&lt;/p&gt;

&lt;p&gt;Barbara Liskov defined this principle as follows: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Let Œ¶(x) be a property provable about objects x of type T. Then Œ¶(y) should be true for objects y of type S where S is a subtype of T‚Äù&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The definition given by Liskov is based on the Design by Contract (DbC) defined by Bertrand Meyer. A contract that is identified by preconditions, invariants, and postconditions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A routine can expect a certain condition to be guaranteed on entry by any client module that calls it: the routine‚Äôs precondition. This is an obligation for the client and benefit for the supplier, as it frees it from having to handle cases outside of the precondition.&lt;/li&gt;
&lt;li&gt;A routine can guarantee a certain property on exit: the routine‚Äôs postcondition - an obligation for the supplier, and a benefit for the client.&lt;/li&gt;
&lt;li&gt;Maintain a certain property, assumed on entry and guaranteed on exit: the class invariant.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The concept of contract and implementation is the foundation for inheritance and polymorphism in object-oriented programming.&lt;/p&gt;

&lt;p&gt;In 1996, Robert C. Martin redefined the concept given by Liskov, as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Function that use pointers of references to base classes must be able to use objects of derived classes without knowing it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The redefinition given by Bob Martin helped to simplify the concept implemented by Liskov years before and its adoption by developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#violation-of-the-liskov-substitution-principle"&gt;
  &lt;/a&gt;
  Violation of the Liskov Substitution Principle
&lt;/h2&gt;

&lt;p&gt;As a developer for a banking entity, you are requested to implement a system for managing bank accounts. Your boss asks you to implement, in the first sprint of the project, a system for managing basic and premium bank accounts. The difference between them is that the latter accumulates preference points on any deposit.&lt;/p&gt;

&lt;p&gt;You implement the following abstract class as the foundation of your system.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BankAccount&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * In charge of depositing a specific amount into the account.
     * @param amount            Dollar ammount.
     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * In charge of withdrawing a specific amount from the account.
     * @param amount            Dollar amount.
     * @return                  Boolean result.
     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This abstract class defines an obligation for any derived class to override any abstract method defined in the BankAccount class. This means that the basic and premium accounts must override the deposit and withdrawal method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BasicAccount&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;BankAccount&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;       
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PremiumAccount&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;BankAccount&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;preferencePoints&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;accumulatePreferencePoints&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;accumulatePreferencePoints&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;accumulatePreferencePoints&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;preferencePoints&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Please take into account that any of these classes have the minimum validations for a production environment.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;All basic and premium accounts are discounted by $25.00 annually for administrative expenses. To implement this policy you defined the following class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WithdrawalService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="no"&gt;ADMINISTRATIVE_EXPENSES_CHARGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;25.00&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;cargarDebitarCuentas&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;

        &lt;span class="nc"&gt;BankAccount&lt;/span&gt; &lt;span class="n"&gt;basiAcct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;BasicAccount&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;basiAcct&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;deposit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;100.00&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="nc"&gt;BankAccount&lt;/span&gt; &lt;span class="n"&gt;premiumAcct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PremiumAccount&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;premiumAcct&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;deposit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;200.00&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BankAccount&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;basiAcct&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;premiumAcct&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;debitAdministrativeExpenses&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;debitAdministrativeExpenses&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BankAccount&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forEach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withdraw&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;WithdrawalService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ADMINISTRATIVE_EXPENSES_CHARGE&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the second sprint of your project, your boss asks you to implement long-term accounts into your bank account managing system. The differences between long-term accounts and basic/premium accounts are the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Long-term accounts are exempt from administrative expenses.&lt;/li&gt;
&lt;li&gt;Long-term accounts don't allow withdrawals. If the client wants to withdraw any amount of his / her account must be done through a different process.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a developer in charge of the accounts system, you decide to extend the BankAccount class for the Long-term accounts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LongTermAccount&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;BankAccount&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;UnsupportedOperationException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Not supported yet."&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; 
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This part is where the violation of the Liskov Substitution Principle is obvious. You cannot extend the BankAccount class in the LongTermAccount without overriding the withdrawal method. However, the long-term accounts don‚Äôt allow withdrawals according to your project‚Äôs requirements. &lt;/p&gt;

&lt;p&gt;You have the following two options to solve this issue:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can override the withdrawal method as an empty method or you can throw an UnsupportedOperationException. However, the BankAccount objects wouldn't be completely interchangeable with LongTermAccount objects because if we try to execute the withdrawal method we would get an exception. As a solution for this issue, we can condition the debitAdministrativeExpenses method, so we can skip the LongTermAccount objects but this would violate the Open/Closed Principle. For instance:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;debitAdministrativeExpenses&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BankAccount&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;BankAccount&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nc"&gt;LongTermAccount&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
                &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withdraw&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ADMINISTRATIVE_EXPENSES_CHARGE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;You can make your code Liskov Substitution Principle compliant.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#implementing-liskov-substitution-principle"&gt;
  &lt;/a&gt;
  Implementing Liskov Substitution Principle
&lt;/h2&gt;

&lt;p&gt;The main issue with the bank account structure is that the long-term account is not a regular bank account, at least is not the type defined in the BankAccount abstract class. There is a simple test on the abductive reasoning area that can be used to check if a class is a subtype from ‚ÄúX‚Äù type. The duck test states ‚ÄúIf it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck‚Äù. The long-term account looks like a regular bank account but it does not behave like a regular one. To solve this issue we have to change the current class structure.&lt;/p&gt;

&lt;p&gt;To make our code LSP compliant, we‚Äôll make the following changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All types of bank accounts will allow the deposit action.&lt;/li&gt;
&lt;li&gt;Only the basic and premium bank accounts will allow the withdrawal action.&lt;/li&gt;
&lt;li&gt;We‚Äôll define an abstract bank account for all types of accounts. This abstract class will define only one method, the deposit method.&lt;/li&gt;
&lt;li&gt;We‚Äôll extend the BankAccount with WithdrawableAccount abstract class, which will define the debit method.&lt;/li&gt;
&lt;li&gt;The basic and premium accounts will extend the WithdrawableAccount abstract class, while the long-term account will extend the BankAccount abstract class.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The abstract BankAccount class will define the deposit method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BankAccount&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * In charge of depositing a specific amount into the account.
     * @param amount            Dollar ammount.
     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The abstract WithdrawableAccount class will define the withdrawal method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WithdrawableAccount&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;BankAccount&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * In charge of withdrawing a specific amount from the account.
     * @param amount            Dollar amount.
     * @return                  Boolean result.
     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The basic and premium account classes will extend the WithdrawableAccount class, which extends the BankAccount class. This nested inheritance allows the basic/premium accounts to have both methods, deposit, and withdrawal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BasicAccount&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;WithdrawableAccount&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;monto&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;monto&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;monto&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;       
    &lt;span class="o"&gt;}&lt;/span&gt;   
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PremiumAccount&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;WithdrawableAccount&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;preferencePoints&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;monto&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;monto&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;accumulatePreferencePoints&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;monto&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;monto&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;monto&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;accumulatePreferencePoints&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;accumulatePreferencePoints&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;preferencePoints&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The WithdrawalService class is implemented using only WithdrawableAccount types or subtypes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WithdrawableService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="no"&gt;ADMINISTRATIVE_EXPENSES_CHARGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;25.00&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;cargarDebitarCuentas&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;

        &lt;span class="nc"&gt;WithdrawableAccount&lt;/span&gt; &lt;span class="n"&gt;basicAcct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;BasicAccount&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;basicAcct&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;deposit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;100.00&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="nc"&gt;WithdrawableAccount&lt;/span&gt; &lt;span class="n"&gt;premiumAcct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PremiumAccount&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;premiumAcct&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;deposit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;200.00&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;WithdrawableAccount&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;basicAcct&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;premiumAcct&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;debitarGastosAdmon&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;debitarGastosAdmon&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;WithdrawableAccount&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forEach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withdraw&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;WithdrawableService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ADMINISTRATIVE_EXPENSES_CHARGE&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The changes done on the class structure assures that our code is LSP compliant. Now we are not required to implement the withdrawal method on the LongTermAccount class. Also, we interchange the WithdrawableAccount objects with any subtype of this abstract class. The class structure is also OCP compliant because if we added another bank account type that does not allow withdrawal, we wouldn't need to modify the current code just to extend the BankAccount type. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importance-of-the-liskov-substitution-principle"&gt;
  &lt;/a&gt;
  Importance of the Liskov Substitution Principle
&lt;/h2&gt;

&lt;p&gt;The LSP allows us to identify incorrect generalization areas done during the design phase and correct them. The Liskov Substitution Principle is fundamental in the development of the dependency injection concept, which is widely used in Java Enterprise Edition and Spring Framework.&lt;/p&gt;

&lt;p&gt;You can use the following tips if you want to easily detect violations of the Liskov Substitution Principle:&lt;/p&gt;

&lt;p&gt;There is an LSP violation if you introduce a condition using the type of your object, as shown above in the instanceof example.&lt;br&gt;
There is an LSP violation if you extend an abstract class and you set one of the abstract methods as an empty method or you throw a not defined exception.&lt;/p&gt;

&lt;p&gt;If you like to read more about LSP, you can have a look at &lt;a href="https://cleancoders.com/episode/clean-code-episode-11-p1"&gt;Uncle Bob‚Äôs Blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the next post, we will talk about the Interface Segregation Principle.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href="https://twitter.com/victorpinzon198"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/victor-manuel-pinzon-reyes-072251134/"&gt;Linkedin&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>java</category>
      <category>oop</category>
      <category>programming</category>
      <category>architecture</category>
    </item>
    <item>
      <title>A new documentation website for Bricks</title>
      <author>Stefano Bartoletti</author>
      <pubDate>Tue, 27 Apr 2021 18:30:15 +0000</pubDate>
      <link>https://dev.to/stefanobartoletti/a-new-documentation-website-for-bricks-ebb</link>
      <guid>https://dev.to/stefanobartoletti/a-new-documentation-website-for-bricks-ebb</guid>
      <description>&lt;p&gt;Bricks, my open-source WordPress starter theme featuring Bootstrap and Gulp, has a new documentation website:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bricks.stefanobartoletti.it/"&gt;https://bricks.stefanobartoletti.it/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Built with Vuepress and hosted on Netlify, this site was an interesting project on its own, giving me the opportunity to use new technologies.&lt;/p&gt;

&lt;p&gt;Just like the theme itself, even the documentation is open-source and its source code hosted on GitHub.&lt;/p&gt;

&lt;p&gt;Contributions are warmly welcome on both projects!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/stefanobartoletti"&gt;
        stefanobartoletti
      &lt;/a&gt; / &lt;a href="https://github.com/stefanobartoletti/bricks"&gt;
        bricks
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A modular WordPress starter theme powered by Bootstrap and Gulp
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/stefanobartoletti"&gt;
        stefanobartoletti
      &lt;/a&gt; / &lt;a href="https://github.com/stefanobartoletti/bricks-docs"&gt;
        bricks-docs
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Documentation for Bricks, a modular WordPress starter theme powered by Bootstrap and Gulp 
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>news</category>
      <category>wordpress</category>
      <category>vue</category>
      <category>netlify</category>
    </item>
    <item>
      <title>Send your leadership an anonymous message in Slack üëÄ</title>
      <author>Incognito for Slack</author>
      <pubDate>Tue, 27 Apr 2021 18:10:25 +0000</pubDate>
      <link>https://dev.to/incognitoforslack/send-your-leadership-an-anonymous-message-in-slack-h1p</link>
      <guid>https://dev.to/incognitoforslack/send-your-leadership-an-anonymous-message-in-slack-h1p</guid>
      <description>&lt;p&gt;I built a Slack app earlier this year so my coworkers and I could ask anonymous questions to our CEO during our town halls. It worked so well that I launched it to the public and have gained some awesome early traction. &lt;/p&gt;

&lt;p&gt;Slack has labeled my app &lt;strong&gt;New &amp;amp; Noteworthy and a Brilliant bot!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DQ1Myuhr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtdgdur8h8rodzwubbm0.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DQ1Myuhr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtdgdur8h8rodzwubbm0.PNG" alt="Incognito for Slack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The headline of the app is:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Give your team a safe space&lt;/strong&gt;&lt;br&gt;
Anonymous messages &amp;amp; polls for things like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;town hall questions&lt;/li&gt;
&lt;li&gt;ideation sessions&lt;/li&gt;
&lt;li&gt;leadership feedback&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The goal is to help:&lt;br&gt;
üó£Ô∏è Encourage open and honest feedback&lt;br&gt;
üí™ Empower your team by valuing their input&lt;br&gt;
üî¶ Spotlight common issues quickly&lt;br&gt;
üò∂ Enable the voices of passive employees&lt;br&gt;
‚öñÔ∏è Level the playing field for all team members&lt;br&gt;
üí∞ Reward the most helpful users anonymously&lt;/p&gt;

&lt;p&gt;There is a &lt;strong&gt;free tier&lt;/strong&gt; and a paid tier that you can try for 2 weeks for free without a credit card.&lt;/p&gt;

&lt;p&gt;I'm very open to your questions and feedback as I'm still in the early days of iteration and growth! Thanks!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>slack</category>
      <category>anonymous</category>
      <category>feedback</category>
    </item>
    <item>
      <title>Understanding How React Works: A Beginner's Guide</title>
      <author>Brandon Marrero üá∫üá∏</author>
      <pubDate>Tue, 27 Apr 2021 17:44:37 +0000</pubDate>
      <link>https://dev.to/branmar97/understanding-how-react-works-a-beginner-s-guide-5f0l</link>
      <guid>https://dev.to/branmar97/understanding-how-react-works-a-beginner-s-guide-5f0l</guid>
      <description>&lt;p&gt;Are you thinking about learning React to build your next web application, but do not understand how it works? &lt;/p&gt;

&lt;p&gt;After reading this brief post, you will have a basic understanding of the React flow to get you headed in the right direction. Your React journey starts here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-react"&gt;
  &lt;/a&gt;
  What is React?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; is a front-end JavaScript library that helps developers quickly build dynamic user interfaces. In an MVC application (Model View Controller), React is the view layer, which is what the user can see and interact with. The view layer can update without reloading the webpage when changes are made.&lt;br&gt;
It has a component architecture that allows reusable code which can be rendered anywhere.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-the-format"&gt;
  &lt;/a&gt;
  What is the format?
&lt;/h2&gt;

&lt;p&gt;Using declarative programming, React makes code easy to read and debug. Declarative programming expresses the logic without displaying all the instructions happening in the background. &lt;/p&gt;

&lt;p&gt;Let me break that down...&lt;/p&gt;

&lt;p&gt;A declarative view is like a customer ordering a cake from a bakery. The customer explains how they expect the cake to look and the baker makes it without specific instructions from the customer. This is declarative programming in a nutshell.&lt;/p&gt;

&lt;p&gt;Here is a code sample.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function App() {
     return (
          &amp;lt;div className="app"&amp;gt;
               &amp;lt;Nav /&amp;gt;
               &amp;lt;Home /&amp;gt;
               &amp;lt;Footer /&amp;gt;
          &amp;lt;/div&amp;gt;
     );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What can we expect from this output? We are rendering a navigation bar, home screen, and footer. &lt;/p&gt;

&lt;p&gt;You may also notice what looks like an HTML element (div), but this is actually &lt;a href="https://reactjs.org/docs/introducing-jsx.html"&gt;JSX&lt;/a&gt;, a React element or extension of JavaScript. The JSX is compiled by Babel into regular JavaScript.&lt;/p&gt;

&lt;p&gt;This is another example of declarative programming. We specify a React Element, which then gets compiled into JavaScript which creates and appends the HTML element to the DOM. &lt;/p&gt;

&lt;p&gt;Read more on JSX &lt;a href="https://reactjs.org/docs/introducing-jsx.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-components"&gt;
  &lt;/a&gt;
  What are components?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/docs/components-and-props.html"&gt;Components&lt;/a&gt; are parts that represent pieces of the user interface. Going back to the previous example regarding declarative programming, the components were Nav, Home, and Footer. &lt;/p&gt;

&lt;p&gt;These components are children of the root component, typically called the App component. Combining all the components together makes an application. &lt;/p&gt;

&lt;p&gt;Components are also reusable with different properties. As data changes, a component can update the information it displays and the styling.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-react-flow"&gt;
  &lt;/a&gt;
  How does React flow?
&lt;/h2&gt;

&lt;p&gt;In React, data flows in one direction, top to bottom. This allows for predictable and maintainable code. Data is passed down from the parent component in the form of &lt;a href="https://reactjs.org/docs/components-and-props.html#gatsby-focus-wrapper"&gt;props&lt;/a&gt;. The data can be used in other forms or passed further down the component tree.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dG3cCJvZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m17ji4j257qh9m6tfjg0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dG3cCJvZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m17ji4j257qh9m6tfjg0.png" alt="Component Flow Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each component has its own &lt;a href="https://reactjs.org/docs/faq-state.html#gatsby-focus-wrapper"&gt;state&lt;/a&gt;, similar to props but private. It stores property values that belong to a component. Property values can be changed using a method called &lt;code&gt;setState()&lt;/code&gt;. By default, a component will re-render when state is changed.&lt;/p&gt;

&lt;p&gt;Using state and props together allows breaking down of components based on specific behaviors. Let's say a &lt;code&gt;PlantsContainer&lt;/code&gt; has a state property with a list of plants. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;PlantsForm&lt;/code&gt; component would render a form for adding new plants and a &lt;code&gt;Plants&lt;/code&gt; component might render the list of plants to the user interface.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thanks for reading my blog post. I hope this post helped you understand the basics of React. If it still seems overwhelming, React can be broken down into 4 key concepts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Components&lt;/li&gt;
&lt;li&gt;JSX&lt;/li&gt;
&lt;li&gt;State&lt;/li&gt;
&lt;li&gt;Props&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will be touching more on these concepts in future posts.&lt;/p&gt;

&lt;p&gt;To learn more about React, I recommend referencing the &lt;a href="https://reactjs.org/docs/getting-started.html"&gt;official docs&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>AWS Solutions Architect Professional tips and tricks</title>
      <author>Libert S</author>
      <pubDate>Tue, 27 Apr 2021 17:43:41 +0000</pubDate>
      <link>https://dev.to/libertxyz/aws-solutions-architect-professional-tips-and-tricks-2obc</link>
      <guid>https://dev.to/libertxyz/aws-solutions-architect-professional-tips-and-tricks-2obc</guid>
      <description>&lt;p&gt;Is the time of the year to renew my AWS Solutions Architect certification as they are only valid for three years. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#handson-experience"&gt;
  &lt;/a&gt;
  hands-on experience
&lt;/h3&gt;

&lt;p&gt;The AWS SA Professional exam (SAP-C01) is considered one of the most difficult exams from the AWS certification program, mostly because it covers multiple AWS services, all the way from IAM to AWS direct connect. Also, the questions are based on real case scenarios compared with most theoretical questions in the AWS Solutions Architect &lt;strong&gt;Associate&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;In the following weeks, I'll add a series of posts about my learning path and share some useful tips and tricks along the way to get certified. &lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
    </item>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>Jess Lee (she/her)</author>
      <pubDate>Tue, 27 Apr 2021 17:41:54 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-312l</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-312l</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Editorial note:&lt;/strong&gt; I will be on parental leave starting very soon so I can welcome my first child ‚ù§Ô∏è Forem's awesome Content Manager, Gracie Gregory, will be taking over the Top 7 series and our weekly newsletter while I'm gone (starting next week). I hope everyone has a great spring and summer!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-to-your-own-beat"&gt;
  &lt;/a&gt;
  Code to your own beat
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/coffeestasia"&gt;@coffeestasia&lt;/a&gt;
 has rounded up some amazing music collections/playlists/channels to help you destress while you debug. üòé &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/coffeestasia" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m9lVgk9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lXaYQ4Mo--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/452501/9bf1251a-c9ff-460b-a2b1-3fd4985d7d04.jpg" alt="coffeestasia image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/coffeestasia/background-music-for-coding-for-every-taste-2oo6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Background Music for Coding for Every Tasteüé∂&lt;/h2&gt;
      &lt;h3&gt;Anastasia üèÑüèª‚Äç‚ôÄÔ∏è „Éª Apr 20 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-internet-decoded"&gt;
  &lt;/a&gt;
  The Internet, decoded
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/rohitrana"&gt;@rohitrana&lt;/a&gt;
 helps us shift from "an average internet user to the person who still uses the internet all the time but knows a little bit about what‚Äôs going on behind the scenes." Sold!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/rohitrana" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nWDv-vCO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--NoONcCYq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/613035/028fc507-d64d-4a57-a423-62118dc61163.jpeg" alt="rohitrana image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/rohitrana/how-the-web-works-1hd7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How the web works&lt;/h2&gt;
      &lt;h3&gt;Rohit Singh Rana „Éª Apr 24 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#self-promotion-as-a-creator"&gt;
  &lt;/a&gt;
  Self Promotion as a Creator
&lt;/h2&gt;

&lt;p&gt;This is a deeply fascinating and complex read on the topic of promoting one's work as a developer. &lt;a class="mentioned-user" href="https://dev.to/ryansolid"&gt;@ryansolid&lt;/a&gt;
 admits to not having the perfect answer here, but they sure do have a nuanced perspective on the challenges and lessons of creating and learning in public. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ryansolid" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--it1XuNsm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--zjqjkX6K--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/186199/a3d1cfed-a1ca-41cd-a146-9db4e65711d4.jpeg" alt="ryansolid image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/this-is-learning/of-chickens-and-pigs-the-dilemma-of-creator-self-promotion-51ea" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Of Chickens and Pigs - The Dilemma of Creator Self Promotion&lt;/h2&gt;
      &lt;h3&gt;Ryan Carniato „Éª Apr 22 „Éª 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devjournal&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#demystifying-the-developer-advocate"&gt;
  &lt;/a&gt;
  Demystifying the developer advocate
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/wassimchegham"&gt;@wassimchegham&lt;/a&gt;
 provides concrete examples of tasks and activities they do at Microsoft as a Senior Developer Advocate. If you've read developer advocate job descriptions but are still struggling to grasp what these pros truly do, this post is a great resource&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/wassimchegham" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rUjA9mUr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--EouHrMi6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/13081/S93LQYOa.jpg" alt="wassimchegham image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/wassimchegham/the-subtle-art-of-being-a-developer-advocate-gdg" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The Subtle Art of Being A Developer Advocate&lt;/h2&gt;
      &lt;h3&gt;Wassim Chegham „Éª Apr 21 „Éª 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#devrel&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#creating-a-great-experience-for-everyone"&gt;
  &lt;/a&gt;
  Creating a great experience for &lt;em&gt;everyone&lt;/em&gt;.
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/hichamelbsi"&gt;@hichamelbsi&lt;/a&gt;
 has some concrete tips for how you can make your sites more accessible ‚Äî because we all need to make this a top priority. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hichamelbsi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mu9ZXmiC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j3cRFUdy--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/200546/e6c03961-e926-4bc8-bfae-6d802916360f.jpeg" alt="hichamelbsi image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hichamelbsi/accessibility-is-a-priority-3jbf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Accessibility is a priority&lt;/h2&gt;
      &lt;h3&gt;ELABBASSI Hicham „Éª Apr 21 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#ux&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#broader-applications-for-localstorage"&gt;
  &lt;/a&gt;
  Broader applications for localStorage
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/tolentinoel"&gt;@tolentinoel&lt;/a&gt;
 encountered localStorage back when they were in coding bootcamp. Since then, they learned that there are more applications for localStorage than just tokens! This post will walk you through a few of them.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/tolentinoel" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yJ-6fwJc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--mtmjc86Q--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/493720/aa51b775-cdb2-4ac0-b15a-24b7b469d6e1.jpeg" alt="tolentinoel image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/tolentinoel/what-is-localstorage-3ffh" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What is localStorage?&lt;/h2&gt;
      &lt;h3&gt;Ellaine Tolentino „Éª Apr 22 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#localstorage&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#unbreaking-authentication"&gt;
  &lt;/a&gt;
  Un-breaking authentication
&lt;/h2&gt;

&lt;p&gt;As &lt;a class="mentioned-user" href="https://dev.to/flippedcoding"&gt;@flippedcoding&lt;/a&gt;
 writes, it's crucial to make sure you get the best authentication practices in place as early in the development process as possible. The tactics outlined in this post (through a Node.js app) are super useful üëÄ &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/flippedcoding" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UWt-uaTR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--D-VsiVuP--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/77973/be223e4c-dc34-43da-a894-10be8f272316.jpg" alt="flippedcoding image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/flippedcoding/implementing-passwordless-authentication-in-node-js-43m0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Implementing Passwordless Authentication in Node.JS&lt;/h2&gt;
      &lt;h3&gt;Milecia „Éª Apr 20 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#security&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#authentication&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>~/.dotfiles</title>
      <author>Vincent</author>
      <pubDate>Tue, 27 Apr 2021 16:42:38 +0000</pubDate>
      <link>https://dev.to/vibioh/dotfiles-5695</link>
      <guid>https://dev.to/vibioh/dotfiles-5695</guid>
      <description>&lt;h1&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why
&lt;/h1&gt;

&lt;p&gt;Suppose you are receiving your brand new computer. You have a bunch of softwares to install (your favorite browser, code editor, windows management tool, etc.) and some configurations and shortcuts tweaks. How long does it take you to be fully productive once unboxed? One hour, one day, one week?&lt;/p&gt;

&lt;p&gt;If you do this manually, you'll make mistakes. Because, we are all human beings.&lt;/p&gt;

&lt;p&gt;You can end up doing it successfully with a well written todo-list but, wait, do you make all the downloads, clicks, configuration by hand? You work in computer science, use computers for doing repetitive and boring tasks.&lt;/p&gt;

&lt;p&gt;Now we suppose your laptop is ready for work. You're happy with it and want the same work environment on your desktop, which has a different operating system, should you start again from a blank page?&lt;/p&gt;

&lt;p&gt;That's why you need installation automation. They are often called "Dotfiles". Let's deep dive into it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What
&lt;/h1&gt;

&lt;p&gt;We want to put all our configuration for various environments in a place that is easy to share or reuse, and ideally idempotent.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  Context
&lt;/h2&gt;

&lt;p&gt;The following guidelines and explanations work on an &lt;a href="https://en.wikipedia.org/wiki/Unix-like"&gt;Unix-like operating systems&lt;/a&gt;. Sorry Microsoft's users, since I've not used this system for a while, I can't talk about it. It would work with &lt;a href="https://fr.wikipedia.org/wiki/Windows_Subsystem_for_Linux"&gt;Windows Subsystem for Linux&lt;/a&gt; because it's a Unix system under the hood.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#content"&gt;
  &lt;/a&gt;
  Content
&lt;/h2&gt;

&lt;p&gt;We have two things to take care of: installation of softwares and their configurations.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;For the installation part, thankfully, most operating-systems have a built-in or mainstream packages manager. Aptitude, Brew, Pacman, you name it. It's a good starting point but not every tool or software are available on it or on each architecture. You may need to download a binary or an archive and to put it at the right place.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For the configuration part, it's more ~complicated~ diverse. Some tools rely on files, others on environment variables and others are simply not configurable easily, e.g. hidden or binary files.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that &lt;a href="https://brew.sh"&gt;Brew&lt;/a&gt;, the package manager for macOS, is not built-in and must be installed manually first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#storage"&gt;
  &lt;/a&gt;
  Storage
&lt;/h2&gt;

&lt;p&gt;It looks like we are starting to talk about code, notably infrastructure as code. Code nowadays is in a version control software (VCS). The most broadly use is &lt;a href="https://git-scm.com"&gt;Git&lt;/a&gt;. In order to make it shareable to everyone, you must store your Git repository on GitHub, GitLab, Bitbucket, etc. They are easy to use, well adopted by the community and easy to find.&lt;/p&gt;

&lt;p&gt;Git has many features, the one we'll focus on is branching. With branches, you can handle the &lt;code&gt;architecture x operation-system&lt;/code&gt; matrix with ease. A branch for "personal-macos", a branch for "work-ubuntu", a branch for "home-raspbian", etc. You can also add conditions in your code for doing things based on hostnames, environment variables, etc.&lt;/p&gt;

&lt;p&gt;My Dotfiles are in place for personal and professional contexts, on &lt;code&gt;amd64&lt;/code&gt; and &lt;code&gt;arm64&lt;/code&gt; architectures, on macOS and Linux operating systems. They are all in one repository with only two branches (&lt;code&gt;main&lt;/code&gt; and &lt;code&gt;work&lt;/code&gt;). I normalize many differences of each operating system.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#bash"&gt;
  &lt;/a&gt;
  Bash
&lt;/h2&gt;

&lt;p&gt;You can find &lt;a href="https://github.com/webpro/awesome-dotfiles"&gt;many tools on GitHub&lt;/a&gt; (or elsewhere) to bootstrap your Dotfiles. Some people choose to rely on Ansible, others on some tools you have to install. But how to install a tool that install the tools? Manual installation is not an option. It's like a chicken-egg problem.&lt;/p&gt;

&lt;p&gt;Obviously, you need a starting point and ensure that it's available everywhere. On Unix-like systems, &lt;a href="https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29"&gt;Bash&lt;/a&gt; is the common denominator. This responsibility, being the common denominator, is hard when you are a thirty years old software.&lt;/p&gt;

&lt;p&gt;For example, in the latest macOS version, the shipped version of &lt;code&gt;bash&lt;/code&gt; is &lt;code&gt;3.2.57&lt;/code&gt;, a version from 2007, &lt;a href="https://apple.stackexchange.com/a/238281"&gt;because of a licensing change&lt;/a&gt;. I'll not explain all the differences between v3 and v5 (current one in 2021) but you can see below a difference.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;MY_VARIABLE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"macOS"&lt;/span&gt;

&lt;span class="c"&gt;# Lower case, works only with bash 4+&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;MY_VARIABLE&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="c"&gt;# Lower case, the old way, bash 3 compliant&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;MY_VARIABLE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; | &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="s2"&gt;"[:upper:]"&lt;/span&gt; &lt;span class="s2"&gt;"[:lower:]"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;So, &lt;em&gt;Bash&lt;/em&gt; is the broader compatible software already installed on most systems. We know how to run our code, but how can we retrieve it then?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#zip-amp-curl"&gt;
  &lt;/a&gt;
  Zip &amp;amp; Curl
&lt;/h2&gt;

&lt;p&gt;We saw before that the best way to store our Dotfiles is in Git, but &lt;code&gt;git&lt;/code&gt; must be installed for cloning the repository, that will install &lt;code&gt;git&lt;/code&gt;. Chicken-egg problem again. Fortunately, solutions like GitHub or Gitlab provide a way to download a repository in a &lt;a href="https://en.wikipedia.org/wiki/ZIP_(file_format)"&gt;Zip&lt;/a&gt; archive. &lt;code&gt;unzip&lt;/code&gt;, like &lt;code&gt;bash&lt;/code&gt;, is present natively on most distributions.&lt;/p&gt;

&lt;p&gt;For fetching datas, we also need a tool. &lt;a href="https://en.wikipedia.org/wiki/CURL"&gt;curl&lt;/a&gt; is the common way to make a request on the Internet from a terminal and, guess what, it's also built-in on most distributions.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-golden-triangle"&gt;
  &lt;/a&gt;
  The golden triangle
&lt;/h2&gt;

&lt;p&gt;Thank to &lt;a href="https://linuxhint.com/bash_pipe_tutorial/"&gt;Bash piping&lt;/a&gt;, we can &lt;code&gt;curl&lt;/code&gt; a bootstrap script, pipe it to &lt;code&gt;bash&lt;/code&gt; and start installation by &lt;code&gt;unzip&lt;/code&gt;-ing archive of the repository. All tools are present after installation (tested on macOS, Manjaro, Debian 10).&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="s2"&gt;"https://my.bootstrap.script"&lt;/span&gt; | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;‚ö†Ô∏è When doing this kind of command, in any case, always check what you are going to run, especially when some "one-liner install scripts" require &lt;code&gt;sudo&lt;/code&gt;. &lt;a href="https://www.youtube.com/watch?v=iDbyYGrswtg"&gt;The Internet&lt;/a&gt; is a cool thing, but not everyone acts as a cool person on it.&lt;/p&gt;

&lt;p&gt;In the bootstrap script, you can choose where the Dotfiles will be (in my case, I place it in &lt;code&gt;${HOME}/code/dotfiles&lt;/code&gt;). I would bring your attention on how the &lt;code&gt;curl&lt;/code&gt; options are written, in their long format. When writing a script, you're not in a terminal trying to be quick and limiting your keyboard input. You write code that will be shared and must be comprehensive by other humans. Be verbose.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; nounset &lt;span class="nt"&gt;-o&lt;/span&gt; pipefail &lt;span class="nt"&gt;-o&lt;/span&gt; errexit

main&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;INSTALL_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/code"&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;GITHUB_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ViBiOh"&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"dotfiles"&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_BRANCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"main"&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;ARCHIVE_FILENAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_PATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/dotfiles.zip"&lt;/span&gt;

  &lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_PATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

  curl &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--disable&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--silent&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--show-error&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--location&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--max-time&lt;/span&gt; 60 &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--output&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ARCHIVE_FILENAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"https://github.com/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GITHUB_USER&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/archive/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_BRANCH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.zip"&lt;/span&gt;
  unzip &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ARCHIVE_FILENAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_PATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ARCHIVE_FILENAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

  &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_PATH&lt;/span&gt;:?&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;mv&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_PATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_BRANCH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_PATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

  &lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_PATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="s2"&gt;"./init"&lt;/span&gt; &lt;span class="nt"&gt;-a&lt;/span&gt;

    git init
    git remote add origin &lt;span class="s2"&gt;"http://github.com/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GITHUB_USER&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.git"&lt;/span&gt;
    git fetch origin
    git checkout &lt;span class="nt"&gt;--force&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_BRANCH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

main &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The bootstrap script does the "first download" of all needed files. Once done, the &lt;code&gt;init&lt;/code&gt; script takes over. The &lt;code&gt;init&lt;/code&gt; is the script that installs and configures all the things, you'll run it multiple times in the future.&lt;/p&gt;

&lt;p&gt;At the end of the script, you can see that there are &lt;code&gt;git&lt;/code&gt; commands. After a successful installation, Git will be installed, and I reconcile the archive downloaded (without &lt;code&gt;.git&lt;/code&gt; folder) with the Git upstream.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#structure"&gt;
  &lt;/a&gt;
  Structure
&lt;/h1&gt;

&lt;p&gt;The first thing we need in our Dotfiles repository is the two scripts described before: &lt;code&gt;bootstrap&lt;/code&gt; and &lt;code&gt;init&lt;/code&gt;. You'll need also at least 3 folders more: &lt;code&gt;install&lt;/code&gt;, &lt;code&gt;symlinks&lt;/code&gt; and &lt;code&gt;sources&lt;/code&gt;. We are gonna dive into them.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; tree &lt;span class="nt"&gt;-L&lt;/span&gt; 1
&lt;span class="nb"&gt;.&lt;/span&gt;
‚îú‚îÄ‚îÄ bootstrap
‚îú‚îÄ‚îÄ init
‚îú‚îÄ‚îÄ &lt;span class="nb"&gt;install&lt;/span&gt;/
‚îú‚îÄ‚îÄ sources/
‚îî‚îÄ‚îÄ symlinks/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#install"&gt;
  &lt;/a&gt;
  Install
&lt;/h2&gt;

&lt;p&gt;Softwares are most of the time available as a binary and maybe on your favorite package manager. But there are also tasks that are not "software installation" in proper words but need to be run at least once on your computer (e.g. disabling unwanted features of your os, generating configuration file that cannot be symlinked, etc.). From my point of view, it's part of the installation scripts.&lt;/p&gt;

&lt;p&gt;Among the softwares I use, all are not available on the package manager. Package managers often install optional softwares I don't want and install them globally, which can interfere with other users. I tend to download binaries directly from GitHub and put them in my &lt;code&gt;${PATH}&lt;/code&gt; instead of relying on the package manager. It's also easier to stick to a defined version and binaries tend to update faster than package upstreams.&lt;/p&gt;

&lt;p&gt;In an ideal world, Dotfiles should not run any command in &lt;code&gt;sudo&lt;/code&gt;. You install &lt;em&gt;your&lt;/em&gt; configuration on a machine, keep everything in your &lt;code&gt;${HOME}&lt;/code&gt; if you can. For example, I create an &lt;code&gt;${HOME}/opt/&lt;/code&gt; folder for putting my stuff in it (GOPATH, Python packages, etc). I add the &lt;code&gt;${HOME}/opt/bin&lt;/code&gt; in my &lt;code&gt;${PATH}&lt;/code&gt;. If I delete my &lt;code&gt;opt/&lt;/code&gt; folder, I'm the only person impacted.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;scripts/&lt;/code&gt; folder, you can separate concerns of your installation by splitting things in different files. This way, you can disable a script based on an environment variable. e.g. On my server, I don't need to install my code editor. I set an environment variable &lt;code&gt;DOTFILES_NO_EDITOR&lt;/code&gt; and the install script will not try to run the &lt;code&gt;scripts/editor&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;I see the installation phase in 3 steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;clean&lt;/code&gt;. Installation must be &lt;strong&gt;idempotent&lt;/strong&gt;, it can require cleaning before installing or simply "resetting" Dotfiles installation.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;install&lt;/code&gt;. Installation as you may think of it: running script that download from package manager, put binaries in appropriate folders, etc.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;credentials&lt;/code&gt;. Retrieving secrets from your password-manager and put them in your configuration file. See the &lt;a href="#secrets"&gt;Secrets&lt;/a&gt; section in &lt;code&gt;sources/&lt;/code&gt; for more details. This phase must be done after all installations (you have to install the password manager first).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For running each phase separately, we can rely on the presence of a function in a file. Sourcing a file is easy in Bash and checking that a function is available too.&lt;/p&gt;

&lt;p&gt;If we condense all we have talked before in one function, it will be like the following code, put in the &lt;code&gt;init&lt;/code&gt; script.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;browse_install&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nv"&gt;IFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt; file&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
    &lt;/span&gt;&lt;span class="nb"&gt;local &lt;/span&gt;BASENAME_FILE
    &lt;span class="nv"&gt;BASENAME_FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;basename&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

    &lt;span class="nb"&gt;local &lt;/span&gt;UPPERCASE_FILENAME
    &lt;span class="nv"&gt;UPPERCASE_FILENAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;"%s"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASENAME_FILE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; | &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="s2"&gt;"[:lower:]"&lt;/span&gt; &lt;span class="s2"&gt;"[:upper:]"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;DISABLE_VARIABLE_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"DOTFILES_NO_&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;UPPERCASE_FILENAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="p"&gt;!DISABLE_VARIABLE_NAME&lt;/span&gt;&lt;span class="k"&gt;:-}&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"true"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
      continue
    fi

    if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
      for &lt;/span&gt;action &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
        &lt;/span&gt;&lt;span class="nb"&gt;unset&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;action&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
      &lt;span class="k"&gt;done

      &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

      &lt;span class="k"&gt;for &lt;/span&gt;action &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
        if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="nt"&gt;-t&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;action&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"function"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
          &lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;"%s - %s"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;action&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASENAME_FILE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
          &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;action&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
        &lt;span class="k"&gt;fi
      done
    fi
  done&lt;/span&gt; &amp;lt; &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;find &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CURRENT_DIR&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/install"&lt;/span&gt; &lt;span class="nt"&gt;-type&lt;/span&gt; f &lt;span class="nt"&gt;-print0&lt;/span&gt; | &lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;C &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="nt"&gt;--zero-terminated&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="c"&gt;# ${CURRENT_DIR} is the root of the Dotfiles repository&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

browse_install clean &lt;span class="nb"&gt;install
&lt;/span&gt;browse_install credentials
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#symlinks"&gt;
  &lt;/a&gt;
  Symlinks
&lt;/h2&gt;

&lt;p&gt;The easiest tools to configure are the ones that rely on a single file on your home directory, that starts with a dot. That's where the repository takes its name: the famous "dotfiles". You know them: the &lt;code&gt;.bashrc&lt;/code&gt;, the &lt;code&gt;.vimrc&lt;/code&gt; or the &lt;code&gt;.gitconfig&lt;/code&gt;. In order to keep the file under version control system (Git), but not committing your entire &lt;code&gt;${HOME}&lt;/code&gt;, the easy trick is using a &lt;a href="https://en.wikipedia.org/wiki/Symbolic_link"&gt;symlink&lt;/a&gt;. The file exists in the &lt;code&gt;${HOME}&lt;/code&gt; folder, so your tool can read it, but the content remains on the folder under version control. The best of both worlds.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~/ &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-la&lt;/span&gt;
.bashrc -&amp;gt; /Users/macbook/code/dotfiles/symlinks/bashrc
.curlrc -&amp;gt; /Users/macbook/code/dotfiles/symlinks/curlrc
.gitconfig -&amp;gt; /Users/macbook/code/dotfiles/symlinks/gitconfig
.ignore -&amp;gt; /Users/macbook/code/dotfiles/symlinks/ignore
.inputrc -&amp;gt; /Users/macbook/code/dotfiles/symlinks/inputrc
.tmux.conf -&amp;gt; /Users/macbook/code/dotfiles/symlinks/tmux.conf
.vimrc -&amp;gt; /Users/macbook/code/dotfiles/symlinks/vimrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;They are simple to install: put all your &lt;code&gt;.file&lt;/code&gt; in a directory (e.g. symlinks) and link every file in that folder to your &lt;code&gt;${HOME}&lt;/code&gt; folder. Note that my files are named without a dot (e.g. &lt;code&gt;bashrc&lt;/code&gt;) and I add the "dot" during the symlink phase. A dotfile is by default a hidden file on most operting systems. I don't want it to be hidden in code, only when used.&lt;/p&gt;

&lt;p&gt;Creating the symlinks can be done with the following snippet, put in the &lt;code&gt;init&lt;/code&gt; script.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;create_symlinks&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nv"&gt;IFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt; file&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
    &lt;/span&gt;&lt;span class="nb"&gt;local &lt;/span&gt;BASENAME_FILE
    &lt;span class="nv"&gt;BASENAME_FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;basename&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FILE_LIMIT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASENAME_FILE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FILE_LIMIT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
      continue
    fi

    &lt;/span&gt;&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/.&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASENAME_FILE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;ln&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/.&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASENAME_FILE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;done&lt;/span&gt; &amp;lt; &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;find &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CURRENT_DIR&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/symlinks"&lt;/span&gt; &lt;span class="nt"&gt;-type&lt;/span&gt; f &lt;span class="nt"&gt;-print0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="c"&gt;# ${CURRENT_DIR} is the root of the Dotfiles repository&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;A gentle reminder on symlinks: they are living "content". When you pull the new version of your Dotfiles repository, the configuration is changed instantaneously.&lt;/p&gt;

&lt;p&gt;üëç It has good side: you pull your code and have nothing to do.&lt;/p&gt;

&lt;p&gt;üëé It has down side: if you have a Git conflict on your &lt;code&gt;symlinks/gitconfig&lt;/code&gt; file, you Git can be broken because your &lt;code&gt;~/.gitconfig&lt;/code&gt; is invalid üòÖ.&lt;/p&gt;

&lt;p&gt;Chicken-egg problem, always.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#sources"&gt;
  &lt;/a&gt;
  Sources
&lt;/h2&gt;

&lt;p&gt;For configuring you shell environment, the music is a little bit different, in other words, complex! The common way for configuring your shell is the &lt;code&gt;~/.bashrc&lt;/code&gt; (or &lt;code&gt;~/.zshrc&lt;/code&gt;, &lt;code&gt;.you-name-it-rc&lt;/code&gt;). That's what we just configured before with symlinks. But putting the configuration of every tools used in the same file makes the file unreadable, with a lot of comments for separating purpose of code. Not a clean way to do it.&lt;/p&gt;

&lt;p&gt;Fortunately, it's up to you to split it correctly. My &lt;code&gt;~/.bashrc&lt;/code&gt; sources every file contained in the &lt;code&gt;dotfiles/sources/&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;I don't want to hardcode the path of my Dotfiles folder. Thanks to symlinks already being linked to a folder inside my repository, I'm able to find where my files really are with the &lt;code&gt;${BASH_SOURCE[0]}&lt;/code&gt; trick.&lt;/p&gt;

&lt;p&gt;Sourcing the &lt;code&gt;sources&lt;/code&gt; folder can be done with the following snippet, put in the &lt;code&gt;symlinks/.bashrc&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;source_all&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;SCRIPT_DIR
  &lt;span class="nv"&gt;SCRIPT_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;dirname&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASH_SOURCE&lt;/span&gt;&lt;span class="p"&gt;[0]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

  &lt;span class="k"&gt;for &lt;/span&gt;file &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SCRIPT_DIR&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/../sources/"&lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In &lt;code&gt;sources/&lt;/code&gt; folder, you put every terminal configuration you need, e.g. environment variable, function, aliases etc. It's time for a good reminder.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Rule #1 of the Dotfiles Club&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You don't put secrets in your Dotfiles.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Rule #2 of the Dotfiles Club&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;YOU DO NOT PUT SECRETS IN YOUR DOTFILES.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/1AfLx8dLTVoHK/source.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/1AfLx8dLTVoHK/source.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to have secrets in your environment variables (e.g. a token, a password), put them in the &lt;code&gt;~/.localrc&lt;/code&gt;. Not symlinked anywhere! As its name stands, it remains "local".&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/.localrc"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
  &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/.localrc"&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#secrets"&gt;
  &lt;/a&gt;
  Secrets
&lt;/h3&gt;

&lt;p&gt;If you have read the two rules of the &lt;em&gt;Dotfiles Club&lt;/em&gt;, you may wonder how to configure automatically your computer without putting secrets in a repository. The secrets of the secrets management is: a password manager.&lt;/p&gt;

&lt;p&gt;Because we are in Unix environments, I personally use &lt;a&gt;pass&lt;/a&gt; that is easily scriptable, relies on the solid &lt;a href="https://en.wikipedia.org/wiki/Pretty_Good_Privacy"&gt;PGP encryption&lt;/a&gt; and stores everything in Git. I need to import my GPG key and it's fine. Security is a serious topic, importing the GPG key is &lt;strong&gt;the sole manual action&lt;/strong&gt; in my process. You can use any other password manager, install the CLI with &lt;code&gt;install/&lt;/code&gt; scripts and you should be able to retrieve your credentials to put it in your configuration file during the &lt;code&gt;credentials&lt;/code&gt; phase.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#tips-and-tricks"&gt;
  &lt;/a&gt;
  Tips and tricks
&lt;/h2&gt;

&lt;p&gt;Keep in mind that your dotfiles are expected to work on various environments at various stages of installation. Always be backward compatible and lenient on errors.&lt;/p&gt;

&lt;p&gt;When sourcing, you should not use Bash flags &lt;code&gt;-o nounset -o pipefail -o errexit&lt;/code&gt;, because if an error happens, it will crash Bash startup and you can end up being locked outside of your terminal.&lt;/p&gt;

&lt;p&gt;Also, if you use a tool that is not built-in, always check its presence with the following snippet. You may have disabled its installation, it may not be available on your architecture, etc.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; git &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;/dev/null 2&amp;gt;&amp;amp;1&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
  &lt;span class="c"&gt;# do `git` related stuff&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#bashrc"&gt;
  &lt;/a&gt;
  Bashrc
&lt;/h3&gt;

&lt;p&gt;Using a &lt;code&gt;.bashrc&lt;/code&gt; for automatically loading your environment is a good thing, but you don't need it when performing a headless operation (such as &lt;code&gt;rsync&lt;/code&gt;). In that case, it can slow you down. Fortunately, there is this trick for disabling the loading of the &lt;code&gt;.bashrc&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-z&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PS1&lt;/span&gt;&lt;span class="k"&gt;:-}&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;macOS has a particular case here. By default, it doesn't look for the &lt;code&gt;~/.bashrc&lt;/code&gt; file, but the &lt;code&gt;~/.bash_profile&lt;/code&gt;. You can fix it by creating this file and pointing it to your &lt;code&gt;.bashrc&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/.bashrc"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
  &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/.bashrc"&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#order"&gt;
  &lt;/a&gt;
  Order
&lt;/h3&gt;

&lt;p&gt;Browsing files must be done in a certain order because you may have dependencies between files (e.g. changing the &lt;code&gt;${PATH}&lt;/code&gt; variable before checking if a software is installed, installing Python before using &lt;code&gt;pip&lt;/code&gt;). You don't have this kind of problems in a single file, because you simply put the line at the right place.&lt;/p&gt;

&lt;p&gt;When iterating on a folder with &lt;code&gt;for&lt;/code&gt; or &lt;code&gt;find&lt;/code&gt;, Bash relies on &lt;a href="https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Filename-Expansion"&gt;the alphabetic order&lt;/a&gt;, defined by the &lt;a href="https://www.gnu.org/software/bash/manual/html_node/Bash-Variables.html#index-LC_005fALL"&gt;&lt;code&gt;LC_ALL / LC_COLLATE&lt;/code&gt;&lt;/a&gt; environment variables. You can control order of sourcing by ensuring your files are in alphabetical order. Pro-tips: underscore is before any lower case character.&lt;/p&gt;

&lt;p&gt;In order to properly configure your locale, you can add the following snippet before the &lt;code&gt;source_all&lt;/code&gt;, that gracefully sets locale if it's present.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;set_locale&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;LOCALES&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt; &lt;span class="s2"&gt;"en_US.utf8"&lt;/span&gt; &lt;span class="s2"&gt;"C.UTF-8"&lt;/span&gt; &lt;span class="s2"&gt;"C"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;ALL_LOCALES
  &lt;span class="nv"&gt;ALL_LOCALES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;locale &lt;span class="nt"&gt;-a&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

  &lt;span class="k"&gt;for &lt;/span&gt;locale &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LOCALES&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
    if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ALL_LOCALES&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;--count&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;locale&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;-eq&lt;/span&gt; 1 &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
      &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;locale&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
      &lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;locale&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
      &lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LANGUAGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;locale&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

      &lt;span class="k"&gt;return
    fi
  done

  return &lt;/span&gt;1
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#all-together"&gt;
  &lt;/a&gt;
  All together
&lt;/h2&gt;

&lt;p&gt;I've made the simplest possible dotfiles repository in &lt;a href="https://gist.github.com/ViBiOh/e38aeb07d6d56dfa78256b61781478c5"&gt;this Gist&lt;/a&gt;. It's not possible to create folder on a Gist, so for example &lt;code&gt;symlinks_bashrc&lt;/code&gt; should be &lt;code&gt;symlinks/bashrc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You'll find a snippet for installing Brew and changing the default shell of user on macOS. If you install Bash with Brew, you have two &lt;code&gt;bash&lt;/code&gt;: one in &lt;code&gt;/bin/bash&lt;/code&gt; (3.2.57) and one in &lt;code&gt;/usr/local/bin/bash&lt;/code&gt; (5+).&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ViBiOh"&gt;
        ViBiOh
      &lt;/a&gt; / &lt;a href="https://github.com/ViBiOh/dotfiles"&gt;
        dotfiles
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Dotfiles for configuring my terminal environment
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
dotfiles&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://sonarcloud.io/dashboard?id=ViBiOh_dotfiles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c6e38f71b09b012bcacd65e311aa0119169d8326593fb67055995a8aaa78ea01/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d566942694f685f646f7466696c6573266d65747269633d616c6572745f737461747573" alt="Quality Gate Status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;curl &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://raw.githubusercontent.com/ViBiOh/dotfiles/main/bootstrap&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;|&lt;/span&gt; bash&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Update&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-smi"&gt;${HOME}&lt;/span&gt;/code/dotfiles/init&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; -a&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Configuration&lt;/h2&gt;
&lt;p&gt;You can set following environment variables for customizing installation behavior:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;DOTFILES_NO_NODE="true"&lt;/code&gt; doesn't perform install of &lt;code&gt;install/node&lt;/code&gt; file (replace &lt;code&gt;NODE&lt;/code&gt; by any uppercase filename in &lt;code&gt;install/&lt;/code&gt; dir)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#!&lt;/span&gt;/usr/bin/env bash&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Server configuration example&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_ALACRITTY=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_APPLE=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_DNSMASQ=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_FIREFOX=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_GOLANG=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_GPG=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_KUBERNETES=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_NODE=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_PASS=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_PYTHON=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_PYTHON_ANSIBLE=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_PYTHON_PGCLI=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_SHELLCHECK=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_SUBLIME=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_SYNCTHING=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_TERRAFORM=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
SSH&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;ssh-keygen -t ed25519 -a 100 -C &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;$(&lt;/span&gt;whoami&lt;span class="pl-pds"&gt;)&lt;/span&gt;&lt;/span&gt;@&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;$(&lt;/span&gt;hostname&lt;span class="pl-pds"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; -f &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-smi"&gt;${HOME}&lt;/span&gt;/.ssh/id_ed25519&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
GPG&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;‚Ä¶
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ViBiOh/dotfiles"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;My &lt;a href="https://github.com/vibioh/dotfiles"&gt;personal Dotfiles&lt;/a&gt; have more syntactic sugar but are the source of inspiration for writing this article. It's a "template repository", feel free to use it. With near 2k commits, achieving my Dotfiles was a journey and I just wanted to share it. Hope you enjoyed the reading ride!&lt;/p&gt;

&lt;p&gt;PS: English is not my native language and it's my first post here, be kind, I'm open to advice for improving =)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://unsplash.com/photos/pUAM5hPaCRI"&gt;cover image from Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>bash</category>
      <category>productivity</category>
      <category>unix</category>
    </item>
    <item>
      <title>Send Mail Using Node.js and gmail in few Simple Steps </title>
      <author>Sudarshan Sawandkar</author>
      <pubDate>Tue, 27 Apr 2021 16:37:08 +0000</pubDate>
      <link>https://dev.to/sudarshansb143/send-mail-using-node-js-and-gmail-in-few-simple-steps-4n79</link>
      <guid>https://dev.to/sudarshansb143/send-mail-using-node-js-and-gmail-in-few-simple-steps-4n79</guid>
      <description>&lt;p&gt;We all know how tedious the stuff gets when we wan't to send mail from any automated system.&lt;/p&gt;

&lt;p&gt;For example, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ping someone when CRON job at remote VM Executed *&lt;/li&gt;
&lt;li&gt;Get failure logs of your server in mail*
etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, today we are going to take a look at how can we send mail from nodejs using just a gmail account and third party library node-mailer &lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;Setting up G-mail :-&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For sending mail's through your gmail A/C you must allow the " less secure app" access to your google A/C which is done here &lt;br&gt;
a&lt;br&gt;
&lt;a href="https://myaccount.google.com/lesssecureapps"&gt;https://myaccount.google.com/lesssecureapps&lt;/a&gt;&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#step-1-setting-up-nodemailer"&gt;
  &lt;/a&gt;
  Step 1 :- Setting up node-mailer
&lt;/h1&gt;

&lt;p&gt;Install node-mailer using npm or yarn (which is one prefer let me know in comments). I will use npm here because, it comes with node installation&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i node-mailer 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-2-setting-up-nodemailer-and-some-basic-configuration"&gt;
  &lt;/a&gt;
  Step 2 :- Setting up node-mailer and some basic configuration
&lt;/h1&gt;

&lt;p&gt;After installing node-mailer, we have to setup some config's. For sending mail, we are going to use &lt;em&gt;Gmail&lt;/em&gt; as a mail service and create a mail transported object. Which internally handles the SMTP (Simple Mail Transfer Protocol) transactions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodemailer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nodemailer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;sendMail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mailTransporter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nodemailer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTransport&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gmail&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yourUserName@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;SecretPassword&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-3-create-mail-object"&gt;
  &lt;/a&gt;
  Step 3 :- create mail object
&lt;/h1&gt;

&lt;p&gt;Now it's time to create actual mail payload. It will contain of recipient mail address and other stuff like subject and the string which we want to send with the mail. This is  the basic payload we can alter the stuff with great flexibility&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mailDetails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yourUserName@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;favPerson@anyDomain.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You Were Hacked 8)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;System failure !&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-4-send-mail"&gt;
  &lt;/a&gt;
  Step 4 :- Send Mail
&lt;/h1&gt;

&lt;p&gt;Now, just hit it. ( I am handling result  with callback, you can also use Promise here)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;mailTransporter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mailDetails&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error Occurs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Email sent successfully&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's It. Now, we can send email to anyone with any email address without setting up out own mail server or anything else &lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h1&gt;

&lt;p&gt;I hope you all learnt something new from this post. Let me know if anything else I have to write in my next one&lt;/p&gt;

&lt;p&gt;Thanks for reading :)&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>node</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>ALGORITHMIC TRADING</title>
      <author>Praveen Reddy Pingala</author>
      <pubDate>Tue, 27 Apr 2021 16:27:41 +0000</pubDate>
      <link>https://dev.to/praveenreddy_pingala_111/algorithmic-trading-2694</link>
      <guid>https://dev.to/praveenreddy_pingala_111/algorithmic-trading-2694</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-algorithmic-trading"&gt;
  &lt;/a&gt;
  What is Algorithmic Trading?
&lt;/h2&gt;

&lt;p&gt;Algorithmic trading is a process for executing orders utilizing automated and pre-programmed trading instructions to account for variables such as price, timing and volume. An algorithm is a set of directions for solving a problem.&lt;/p&gt;

&lt;p&gt;Algorithmic trading makes use of complex formulas, combined with mathematical models and human oversight, to make decisions to buy or sell financial securities on an exchange. Algorithmic trading can be used in a wide variety of situations including order execution, arbitrage, and trend trading strategies. The trade, in theory, can generate profits at a speed and frequency that is impossible for a human trader.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#algorithmic-trading-in-practice"&gt;
  &lt;/a&gt;
  Algorithmic Trading in Practice
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#suppose-a-trader-follows-these-simple-trade-criteria"&gt;
  &lt;/a&gt;
  Suppose a trader follows these simple trade criteria:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Buy 50 shares of a stock when its 50-day moving average goes above the 200-day moving average. (A moving average is an average of past data points that smooths out day-to-day price fluctuations and thereby identifies trends.)
&lt;/li&gt;
&lt;li&gt;Sell shares of the stock when its 50-day moving average goes below the 200-day moving average.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using these two simple instructions, a computer program will automatically monitor the stock price (and the moving average indicators) and place the buy and sell orders when the defined conditions are met. The trader no longer needs to monitor live prices and graphs or put in the orders manually. The algorithmic trading system does this automatically by correctly identifying the trading opportunity. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api-application-programming-interface-for-traders"&gt;
  &lt;/a&gt;
  API (Application Programming Interface) for Traders:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;An application programming interface (API) establishes an online connection between a data provider and an end-user.&lt;/li&gt;
&lt;li&gt;For financial markets APIs interface trading algorithms or models and an exchange's and/or broker's platform.&lt;/li&gt;
&lt;li&gt;An API is essential to implementing an automated trading strategy.&lt;/li&gt;
&lt;li&gt;More brokers are making their platforms available through an API.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-algorithmic-trading"&gt;
  &lt;/a&gt;
  Benefits of Algorithmic Trading
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#algotrading-provides-the-following-benefits"&gt;
  &lt;/a&gt;
  Algo-trading provides the following benefits:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Trades are executed at the best possible prices.&lt;/li&gt;
&lt;li&gt;Trade order placement is instant and accurate (there is a high chance of execution at the desired levels).&lt;/li&gt;
&lt;li&gt;Trades are timed correctly and instantly to avoid significant price changes.&lt;/li&gt;
&lt;li&gt;Reduced transaction costs.&lt;/li&gt;
&lt;li&gt;Simultaneous automated checks on multiple market conditions.&lt;/li&gt;
&lt;li&gt;Reduced risk of manual errors when placing trades.&lt;/li&gt;
&lt;li&gt;Algo-trading can be back tested using available historical and 
real-time data to see if it is a viable trading strategy.&lt;/li&gt;
&lt;li&gt;Reduced the possibility of mistakes by human traders based on 
emotional and psychological factors.
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#technical-requirements-for-algorithmic-trading"&gt;
  &lt;/a&gt;
  Technical Requirements for Algorithmic Trading
&lt;/h2&gt;

&lt;p&gt;Implementing the algorithm using a computer program is the final component of algorithmic trading, accompanied by back testing (trying out the algorithm on historical periods of past stock-market performance to see if using it would have been profitable). The challenge is to transform the identified strategy into an integrated computerized process that has access to a trading account for placing orders. The following are the requirements for algorithmic trading:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Computer-programming knowledge to program the required trading strategy, hired programmers, or pre-made trading software.&lt;/li&gt;
&lt;li&gt;Network connectivity and access to trading platforms to place orders.&lt;/li&gt;
&lt;li&gt;Access to market data feeds that will be monitored by the algorithm for opportunities to place orders.&lt;/li&gt;
&lt;li&gt;The ability and infrastructure to back test the system once it is built before it goes live on real markets.&lt;/li&gt;
&lt;li&gt;Available historical data for back testing depending on the complexity of rules implemented in the algorithm.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>algorithms</category>
      <category>datascience</category>
      <category>bigdata</category>
    </item>
    <item>
      <title>What is fundamentally wrong about the modern Web?</title>
      <author>Nickolay Platonov</author>
      <pubDate>Tue, 27 Apr 2021 16:25:42 +0000</pubDate>
      <link>https://dev.to/chronograph/what-is-fundamentally-wrong-about-the-modern-web-2j04</link>
      <guid>https://dev.to/chronograph/what-is-fundamentally-wrong-about-the-modern-web-2j04</guid>
      <description>&lt;p&gt;If you are in the web development business, you might thought this post is about Webpack and friends. Nope, its even more fundamental.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;Web as a platform is trying to solve an application containerization problem, but the way of solving it - rewriting every piece of code in the world using the "Web API" is extremely dated. Instead, Web should rely on OS-level containerization and create a common standard of interoperable native calls between different languages (something like &lt;a href="https://en.wikipedia.org/wiki/Interface_description_language"&gt;IDL&lt;/a&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h2&gt;

&lt;p&gt;Being a programmer, I'll use a 3rd party &lt;del&gt;library&lt;/del&gt; blog post to describe the problem I mention in the title. &lt;a href="https://drewdevault.com/2020/03/18/Reckless-limitless-scope.html"&gt;Please return after reading it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TLDR&lt;/strong&gt; the key citation: &lt;em&gt;"The number of W3C specifications grows at an average rate of 200 new specs per year, or about 4 million words, or about one POSIX every 4 to 6 months. How can a new team possibly keep up with this on top of implementing the outrageous scope web browsers already have now?"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Lets try to analyze this problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-essentials-of-web"&gt;
  &lt;/a&gt;
  The essentials of web
&lt;/h2&gt;

&lt;p&gt;Web has started as a media for distribution of static content, like plain html pages without JavaScript. That's HTML 1-4 epoch.&lt;/p&gt;

&lt;p&gt;Then people realized, that content can be dynamic, interactive. The border between the content and the application started to fade out. That's the beginning of the "modern" web, back in the days called HTML 5.&lt;/p&gt;

&lt;p&gt;HTML 5 started as a list of improvements to HTML 4. And the more people were able to do with the modern Web, the more things they wanted to do. The improvements list became endless and this is where we are currently.&lt;/p&gt;

&lt;p&gt;But why has the Web become so popular as a media for distributing interactive content (aka applications)? There are regular desktop applications, you can download and run on your computer. Multiple good reasons, I'll mention just few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Security. Obviously, running some untrusted code on your machine, you can easily find yourself sending bitcoins to someone, to decrypt your HDD with you work files. Or discover your business-critical files published on every torrent tracker.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Web acts here as a &lt;em&gt;virtual machine&lt;/em&gt; (&lt;strong&gt;Web VM&lt;/strong&gt;), which sandbox the application and limit the potential harm. In practice this point does not hold, web browsers are still the most common vector of malicious software infection.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Interoperability. Instead of writing your application for all possible CPU architectures, you write it for "Web VM".&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'll focus on the security problem below, as most important one, after all, even C++ programs can be cross-platform nowadays.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-as-a-virtual-machine"&gt;
  &lt;/a&gt;
  Web as a virtual machine
&lt;/h2&gt;

&lt;p&gt;The main purpose of the Web VM is provide a secure sandbox, to be able to run the arbitrary untrusted code. &lt;/p&gt;

&lt;p&gt;When you open a page with the weather forecast, nowadays it might be showing some 3D scenes of Earth+Moon orbits and whatnot. You do want those 3D scenes, they are very informative. &lt;/p&gt;

&lt;p&gt;The real trouble might begin when you'll decide to check that link, your colleague send to you with a note, like "check out this awesome video". You are curious about the video, but you don't want your machine to be polluted with viruses.&lt;/p&gt;

&lt;p&gt;So, you want a combination of security and versatility in the same time. Why an endless list of extensions and new specs is needed for the Web VM to provide both? &lt;/p&gt;

&lt;p&gt;Because its a closed environment - every new use case or feature requires a new specification, even that already established solutions/libraries exists for it, in the "native" code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#internal-demons"&gt;
  &lt;/a&gt;
  Internal demons
&lt;/h2&gt;

&lt;p&gt;Looking from the other viewpoint, the so called "modern Web API" is just a normal wish of every programmer - to rewrite every piece of software in the world in their favorite language/framework, instead of solving the business requirements.&lt;/p&gt;

&lt;p&gt;It is an intrinsic desire of every developer - "I'll rewrite that neat library doing feature X, but I'll do it in the right way, using tabs instead of spaces, or may be, 2 spaces instead of 4, or may be, I'll properly insert semi-colons after every statement, or, I'll remove those noisy semi-colons after every statement, or, I'll use an awesome Web API instead of that C++ lib, &lt;em&gt;please insert your favorite preference here&lt;/em&gt;"&lt;/p&gt;

&lt;p&gt;In case of Web VM, this desire is also supported by the rational explanation - "I can't use a library for this purpose - it might be not secure. What is forgotten - "I can't use that native library for this purpose, because WebVM does not support native code".&lt;/p&gt;

&lt;p&gt;Providing a secure application sandbox is a real-world need. Rewriting everything from scratch - internal demon.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#security-done-right"&gt;
  &lt;/a&gt;
  Security, done right
&lt;/h2&gt;

&lt;p&gt;Again, being a developer, I'll use a 3rd party content to demonstrate, why the current Web VM approach to security is not correct.&lt;/p&gt;

&lt;p&gt;Check out this &lt;a href="https://groups.google.com/g/nodejs-dev/c/9vApf6IvRxk/m/6rOlU-OyQe4J"&gt;thread in Node.js mailing list&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Someone is submitting a PR for the "node-safe-mode" ("hardened" node), that should allow &lt;em&gt;"running third-party-written code"&lt;/em&gt;. The list of improvements includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Each node processes will be given a file system directory, which will contain the JavaScript it runs, ... other than that, the process will have no access to any other part of the file system&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Each node process creates a socket that it uses to receive requests from the server.  To prevent different node processes from communicating with each other directly, the ability of node processes to connect to sockets will be restricted.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;On general principles, Node processes will not be allowed to kill other processes, change their default directory, change their effective user or group id&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;etc..&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Wow, this looks pretty much like the security guarantees of the regular web page.&lt;/strong&gt; Must be an excellent addition to the Node.js! Ok, what are the answers to this generous contributor?&lt;/p&gt;




&lt;p&gt;&lt;em&gt;"No. I appreciate the effort but it sounds too much like PHP's safe mode and everyone knows how broken that is. Containerization should be done at the OS level, not the application level."&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;"The problem with continually restricting things like child processes and native addons, is that these are popular features, and you still face problems like port/fd hijacking. ... In order to prevent fd attacks and port hijacking ... you would want to completely restrict the C++ level access instead of Javascript as well...&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;... I recommend VM level separation if you are serious about security combined with OS level protection"&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;"True security containment is not trivial. It's not a feature you add onto a platform later. It's something that you really have to bake into the architecture from the very start, and evaluate all your trade-offs in that light. .... Furthermore, doing multi-tenancy in this way is extremely dated, and unnecessary. There's better technology now."&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;Wait, what? A non-trivial PR, which adds a security model to Node, that is similar to a web page security model, is rejected, because &lt;em&gt;"doing multi-tenancy in this way is extremely dated"&lt;/em&gt; and &lt;em&gt;"there's better technology"&lt;/em&gt;? &lt;/p&gt;

&lt;p&gt;Pretty much all those who replied to the PR, said that doing security at the application level is old, unreliable way, which also restricts the "native addons". Then why Web is still using such old-fashioned approach?&lt;/p&gt;

&lt;p&gt;If we combine the citation from one of the replies from the Node.js thread, with the citation from the blog post I mentioned in the beginning, we'll receive exactly the problem, the modern Web is experiencing:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;"The problem with continually restricting things like child processes and native addons, is that these are popular features, and your specification starts to grow at the speed of one POSIX every 4 to 6 months"&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;The solution is dumb simple. As suggested by Node.js engineers, Web should provide native, OS-level containerization for the pages. Yes, every tab in your browser should run in container. If you recall, when Chrome started running every tab in a separate process, that seemed like something inconceivably new and even frightening. Well, that has proven itself as a reliable solution.&lt;/p&gt;

&lt;p&gt;The next step is to put every of those processes into separate OS-level container. That's just it - you have the proper, real, security for the untrusted code, and that code can use "popular native addons". &lt;/p&gt;

&lt;p&gt;There's no need to write a spec for every library in the world. Especially if those specs are just descriptions of the imperative interfaces, not the formally-verified code.&lt;/p&gt;

&lt;p&gt;Need to mention that "web page as a container" is not a new concept. There were already similar attempts, like &lt;a href="https://en.wikipedia.org/wiki/Java_Web_Start"&gt;Java Web Start&lt;/a&gt;. They were, however, application containers, similar to the "safer-node". The missing piece was OS-level containerization. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vision"&gt;
  &lt;/a&gt;
  Vision
&lt;/h2&gt;

&lt;p&gt;Lets imagine we have this OS-level containerization for web pages and page can be running native code easily. How the Web will look like in this brave new world?&lt;/p&gt;




&lt;p&gt;The role of the JavScript and HTML/CSS will probably reduce somewhat. The WebAssembly hype wave will not be that big, or not happen at all. However, WebAssembly is moving in the right direction, for example with InterfaceTypes proposal.&lt;/p&gt;




&lt;p&gt;The notion of desktop application may start disappearing, why would anyone write a program limited to only one CPU architecture? For example, I imagine all kinds of various editors which are currently desktop applications (like PhotoShop, 3DMax, etc) will have "web" equivalents.&lt;/p&gt;




&lt;p&gt;It should be possible to run a whole OS desktop in the web page. I imagine, if I had to open some &lt;em&gt;really&lt;/em&gt; untrusted page, I'd be using a browser, running inside of such "Web OS" page, to provide an extra level of containerization. Containers may have different virtualization mechanisms - from being a container as we know now, to being a VM emulator (supposedly more secure).&lt;/p&gt;




&lt;p&gt;The border between the web page and mobile application will disappear completely. This is probably not what the owners of the "mobile app stores" want. &lt;/p&gt;




&lt;p&gt;The key piece of the puzzle for this paradigm shift to happen, is providing the really secure containerization solution. The only way of doing it is writing as formally verified code.&lt;/p&gt;




&lt;p&gt;The IOT can benefit from the secure execution sandbox/container a lot. Imagine various devices, too dumb to visualize their interface, but smart enough to upload it to your computer/smartphone for execution. No need for "cloud", every "internet-thing" can carry all needed software onboard.&lt;/p&gt;




&lt;p&gt;The need for formal spec for every use case will reduce a lot. Instead, the need for the robust, mathematically sound, native code interoperability will appear.&lt;/p&gt;




&lt;p&gt;A web page and a desktop application window - these are the equal concepts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If we look at the Web from a bit more general perspective, we can replace the "web page" concept with the "web node". A universal execution node, combined with other nodes in a distributed network and able to the run untrusted code - this is what probably Ryan Dahl had in mind back in the days, calling his project "Node". &lt;/p&gt;

&lt;p&gt;Hopefully the argumentation in this post is straightforward enough. I believe OS-level containerization is a next logical step in the Web evolution. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>How To Neovim Inside VS Code</title>
      <author>Jimmy McBride</author>
      <pubDate>Tue, 27 Apr 2021 16:14:16 +0000</pubDate>
      <link>https://dev.to/jimmymcbride/how-to-neovim-inside-vs-code-5a1g</link>
      <guid>https://dev.to/jimmymcbride/how-to-neovim-inside-vs-code-5a1g</guid>
      <description>&lt;p&gt;If you've been wanting to try out and learn vim, but don't want to leave the comforts of VS Code behind, this tutorial is for you. In this tutorial, I will show you how to achieve (what I consider to be) the best of both worlds when it comes to using these tools together.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;First, we'll start off by adding the &lt;a href="https://marketplace.visualstudio.com/items?itemName=asvetliakov.vscode-neovim"&gt;Neovim extension for VS Code&lt;/a&gt;. Once that extension is installed, we're going to need to point the extension at an instance of neovim. It's very important that we use v0.5.0 instead of anything v0.4 or lower. If you do, you'll experience a hard time with this extension.&lt;/p&gt;

&lt;p&gt;Once you download and install the &lt;a href="https://github.com/neovim/neovim/releases/tag/nightly"&gt;Neovim v0.5.0&lt;/a&gt;, you're going to want to point your Neovim extension at this installation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CM0OUtEe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syt5eoupb8fmeetjjnmo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CM0OUtEe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syt5eoupb8fmeetjjnmo.png" alt="neovim extension settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h2&gt;

&lt;p&gt;I like to turn the ctrl keys for insert and normal mode off. This means you can still use ctrl + c all the other vs code keybindings will work as expected. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PczX5Ri8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fkqefvku6nvj34c5bu7w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PczX5Ri8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fkqefvku6nvj34c5bu7w.png" alt="ctrl keys off"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also like to double-tap j while in insert mode to escape into normal mode. You can add the following snippet to your &lt;code&gt;keybindings.json&lt;/code&gt; if you'd like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vscode-neovim.compositeEscape1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"j"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"when"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"neovim.mode == insert &amp;amp;&amp;amp; editorTextFocus"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"args"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"j"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope you enjoy learning VIM from the comfort of your VS Code editor! &lt;a href="https://www.maketecheasier.com/cheatsheet/vim-keyboard-shortcuts/"&gt;Here's a great VIM cheat sheet&lt;/a&gt; I have bookmarked with a bunch of great and useful keyboard shortcuts for VIM.&lt;/p&gt;

</description>
      <category>vim</category>
      <category>vscode</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
