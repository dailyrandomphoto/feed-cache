<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Programmatically generating color palettes</title>
      <author>Siddharth</author>
      <pubDate>Mon, 07 Jun 2021 14:09:18 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/programmatically-generating-color-palettes-5cgn</link>
      <guid>https://dev.to/siddharthshyniben/programmatically-generating-color-palettes-5cgn</guid>
      <description>&lt;p&gt;You may have seen color palettes like the &lt;a href="https://material.io/design/color/the-color-system.html#:~:text=2014%20Material%20Design,Design%20color%20palettes"&gt;Material Palette&lt;/a&gt; or the &lt;a href="https://tailwindcss.com/docs/customizing-colors"&gt;tailwind colors&lt;/a&gt;. Well, I wanted to know how these were generated and wanted to generate my own too. Here's how I did it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-base-colors"&gt;
  &lt;/a&gt;
  The Base Colors
&lt;/h2&gt;

&lt;p&gt;This was the easiest one because I could just &lt;a href="https://dev.to/siddharthshyniben/why-hsl-is-better-3inl"&gt;use &lt;code&gt;hsl&lt;/code&gt;&lt;/a&gt; to adjust the hue by a certain step. So we get &lt;code&gt;hsl(0, 50%, 50%)&lt;/code&gt;, &lt;code&gt;hsl(20, 50%, 50%)&lt;/code&gt;, &lt;code&gt;hsl(40, 50%, 50%)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jnGrHh4o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kq88u0ojl9zd0kppd6u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jnGrHh4o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kq88u0ojl9zd0kppd6u.png" alt="Base colors"&gt;&lt;/a&gt;&lt;/p&gt;
That was easy enough



&lt;h2&gt;
  &lt;a href="#the-rest-of-the-palette"&gt;
  &lt;/a&gt;
  The rest of the palette
&lt;/h2&gt;

&lt;p&gt;Then, I thought of iterating over the saturation to brighten or darken the colors. So I iterated again, adding in 10 to the value, but there was always grey at the start of every color.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nGBsfLo8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5rhodyhl7xwi0dfn9uz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nGBsfLo8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5rhodyhl7xwi0dfn9uz.png" alt="Color palette with grey at the start"&gt;&lt;/a&gt;&lt;br&gt;Not quite right
 &lt;/p&gt;

&lt;p&gt;Tweaking the loop gave me this final palette:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/SiddharthShyniben/embed/JjWLBYe?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Not the best, but OK by my standards&lt;/p&gt;

</description>
      <category>css</category>
      <category>design</category>
      <category>javascript</category>
      <category>color</category>
    </item>
    <item>
      <title>Tools for Auditing CSS</title>
      <author>Silvestar Bistrović</author>
      <pubDate>Mon, 07 Jun 2021 14:03:29 +0000</pubDate>
      <link>https://dev.to/starbist/tools-for-auditing-css-54n2</link>
      <guid>https://dev.to/starbist/tools-for-auditing-css-54n2</guid>
      <description>&lt;p&gt;Auditing CSS is not a common task in a developer's everyday life, but sometimes you just have to do it. Maybe it's part of a performance review to identify critical CSS and reduce unused selectors. Perhaps is part of effort to improve accessibility where all the colors used in the codebase evaluated for contrast. It might even be to enforce consistency!&lt;/p&gt;

&lt;p&gt;Whatever the case and whenever that moment arrives, I usually reach for some of the tools I'll cover in the article. But before that, let's see what it even means to "audit" CSS in the first place.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#auditing-css-is-hard"&gt;
  &lt;/a&gt;
  Auditing CSS is hard
&lt;/h2&gt;

&lt;p&gt;Generally, code auditing involves analyzing code to find bugs or other irregularities, like possible performance issues. For most programming languages, the concept of auditing code is relatively straightforward: it works or it doesn't. But CSS is a specific language where errors are mostly ignored by browsers. Then there's the fact that you could &lt;a href="https://css-tricks.com/hearts-in-html-and-css/"&gt;achieve the same style in many different ways&lt;/a&gt;. This makes CSS a little tricky to audit, to say the least.&lt;/p&gt;

&lt;p&gt;Finding those errors might be prevented by using an extension for your favorite code editor or setting up a linter or code checker. But that is not what I want to show here, and that is not enough. We could still use &lt;a href="https://css-tricks.com/a-quick-css-audit-and-general-notes-about-design-systems/"&gt;too many&lt;/a&gt; colors, typographic definitions, or z-indexes, all of which could lead to a messy, unmaintainable, unstable CSS codebase.&lt;/p&gt;

&lt;p&gt;To truly audit CSS, we would need to dig deeper and find places that are not considered best practices. To find those places, we could use the following tools.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#browser-devtools"&gt;
  &lt;/a&gt;
  Browser DevTools
&lt;/h2&gt;

&lt;p&gt;Let's take a look at the Chrome DevTools tools for CSS auditing. I'm using Brave here, which is Chromium-based. You might also want to &lt;a href="https://css-tricks.com/whats-new-in-devtools-2020/"&gt;check out this article by Umar Hansa&lt;/a&gt;, who compiled a whole bunch of great DevTool features that released in 2020.&lt;/p&gt;

&lt;p&gt;If you like inspecting CSS code manually, there is the Inspect tool. Using that, we could see the CSS code applied to a specific element. Using the "Inspect arrow" we could even see additional details about colors, fonts, size and accessibility.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--76ZbrINy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cxwjy78w3kkgublc4jwn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--76ZbrINy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cxwjy78w3kkgublc4jwn.png" alt="Screenshot of Chrome DevTools."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#grid-and-flex-inspector"&gt;
  &lt;/a&gt;
  Grid and Flex inspector
&lt;/h3&gt;

&lt;p&gt;There's a lot of practical details in the DevTools interface, but my favorite is the Grid and Flex inspector. To enable them, go to the Settings (a little gear icon at the top right of the DevTools), click on Experiments, then enable CSS Grid and Flexbox debugging features. Although this tool is mainly used for debugging layout issues, I sometimes use it to quickly determine if CSS Grid or Flexbox is even used on the page at all.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--88KZswce--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bcmychndhrpcefyzorc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--88KZswce--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bcmychndhrpcefyzorc.png" alt="Screenshot of DevTools Grid and Flex inspector."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-overview"&gt;
  &lt;/a&gt;
  CSS Overview
&lt;/h3&gt;

&lt;p&gt;Inspecting CSS is pretty basic, and everything needs to be done manually. Let's look at some more advanced DevTools features.&lt;/p&gt;

&lt;p&gt;CSS Overview is one of them. To enable CSS Overview tool, go to the Settings, click on Experiments, and enable CSS Overview option. To open the CSS Overview panel, you could use the &lt;code&gt;CMD&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;P&lt;/code&gt; shortcut, type "css overview," then select "Show CSS Overview." This tool summarizes CSS properties like colors, fonts, contrast issues, unused declarations, and media queries. I usually use this tool to get the "feel" of how good or poor CSS code is. For example, if there are "50 shades of gray" or too many typographic definitions, that means that the style guide wasn't respected, or one might not even exist.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dt6JHV9_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gi5700ir8zga2i4a9h5w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dt6JHV9_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gi5700ir8zga2i4a9h5w.png" alt="Screenshot of DevTools CSS Overview."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that this tool summarizes the style applied to a specific page, not the whole file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coverage-panel"&gt;
  &lt;/a&gt;
  Coverage panel
&lt;/h3&gt;

&lt;p&gt;The Coverage tool shows the amount and the percentage of code used on the page. To view it, use the &lt;code&gt;CMD&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;P&lt;/code&gt; shortcut, type "coverage," select Show Coverage, and click on the "refresh" icon.&lt;/p&gt;

&lt;p&gt;You could filter only CSS files by typing ".css" in the URL filter input. I usually use this tool to understand the delivery technique of the site. For example, if I see that the coverage is pretty high, I could assume that the CSS file is generated for each page separately. It may not be critical data to know, but sometimes it helps to understand the caching strategy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XQxQsFI8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8lyl8ulnkta5qqpgthzq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XQxQsFI8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8lyl8ulnkta5qqpgthzq.png" alt="Screenshot of DevTools Coverage panel."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rendering-panel"&gt;
  &lt;/a&gt;
  Rendering panel
&lt;/h3&gt;

&lt;p&gt;The Rendering panel is another useful tool. To open the Rendering panel, use &lt;code&gt;CMD&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;P&lt;/code&gt; again, type "rendering" this time, and choose the "Show Rendering" option. This tool has many options, but my favorite ones are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Paint flashing — shows green rectangles when a repaint event happens. I use it to identify areas that take too much time for rendering.&lt;/li&gt;
&lt;li&gt;Layout Shift Regions — shows blue rectangles when the layout shift occurs. To make the most of these options, I usually set the "Slow 3G" preset under the "Network" tab. I sometimes record my screen and then slow down the video to find the layout shifts.&lt;/li&gt;
&lt;li&gt;Frame Rendering Stats — shows the real-time usage of GPU and frames. This tool is handy when identifying heavy animations and scrolling issues.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These tools are something that the regular audit doesn't imply, but I find it essential to understand if the CSS code is performant and doesn't drain a device's energy.&lt;/p&gt;

&lt;p&gt;Other options may be more beneficial for debugging issues, like emulation and disabling of various features, forcing the &lt;code&gt;prefers-color-scheme&lt;/code&gt; feature or print media type, and disabling local fonts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0TMY3l2_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mw15f0sr3kzxesmh3lhg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0TMY3l2_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mw15f0sr3kzxesmh3lhg.png" alt="Screenshot of DevTools Rendering panel."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#performance-monitor"&gt;
  &lt;/a&gt;
  Performance Monitor
&lt;/h3&gt;

&lt;p&gt;Another tool for auditing the performance CSS code is the Performance Monitor. To enable it, use &lt;code&gt;CMD&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;P&lt;/code&gt; again, type "performance monitor," and select the Show Performance Monitor option. I usually use this tool to see how many recalculations and layouts are triggered when interacting with the page, or when the animation occurs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--coa-isSJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jh9dq7z40odncxa6mccm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--coa-isSJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jh9dq7z40odncxa6mccm.png" alt="Screenshot of DevTools Performance Monitor."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#perfomance-panel"&gt;
  &lt;/a&gt;
  Perfomance panel
&lt;/h3&gt;

&lt;p&gt;The Performance panel shows a detailed view of all browser events during page load. To enable the Performance tool, do &lt;code&gt;CMD&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;P&lt;/code&gt;, type "performance," select Show Performance, then click the "reload" icon. I usually enable the "Screenshots" and "Web Vitals" options. The most interesting metrics to me are First Paint, First Contentful Paint, Layout Shifts, and Largest Contentful Paint. There is also a pie chart showing the Painting and Rendering time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UotzX0S0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/soz5bzdovu7tve5sn90p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UotzX0S0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/soz5bzdovu7tve5sn90p.png" alt="Screenshot of DevTools Perfomance panel."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DevTools might not be considered a classical auditing tool, but it helps us understand which CSS features are used, the efficiency of the code, and how it performs — all of which are key things to audit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#online-tools"&gt;
  &lt;/a&gt;
  Online tools
&lt;/h2&gt;

&lt;p&gt;DevTools is just one tool that is packed with a lot of features. But there are other available tools we can use to audit CSS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#specificity-visualizer"&gt;
  &lt;/a&gt;
  Specificity Visualizer
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://isellsoap.github.io/specificity-visualizer/"&gt;Specificity Visualizer&lt;/a&gt; shows the specificity of CSS selectors in the codebase. Simply visit the site and paste in the CSS.&lt;/p&gt;

&lt;p&gt;The main chart displays the specificity in relation to the location in the stylesheet. The other two charts show the usage of specificities. I often use this site to find "bad" selectors. For example, if I see many specificities marked as red, I could easily conclude that the code could be better. It is helpful to save the screenshots for reference as you work to improve things.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZBgyrxQt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0g432ke9osa1059n6eoz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZBgyrxQt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0g432ke9osa1059n6eoz.png" alt="Screenshot of Specificity Visualizer site."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-specificity-graph-generator"&gt;
  &lt;/a&gt;
  CSS Specificity Graph Generator
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://jonassebastianohlsson.com/specificity-graph/"&gt;CSS Specificity Graph Generator&lt;/a&gt; is a similar tool for visualizing specificity. It shows a slightly different chart that might help you see how your CSS selectors are organized by specificity. As it says on the tool's page, "spikes are bad, and the general trend should be towards higher specificity later in the stylesheet." It would be interesting to discuss that further, but it's out of scope for this article. However, Harry Roberts did write about it extensively in his article &lt;a href="https://csswizardry.com/2014/10/the-specificity-graph/"&gt;"The Specificity Graph"&lt;/a&gt; which is worth checking out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ej_0Ix4F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmrxqvtap20xxzt6uhkw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ej_0Ix4F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmrxqvtap20xxzt6uhkw.png" alt="Screenshot of CSS Specificity Graph Generator site."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-stats"&gt;
  &lt;/a&gt;
  CSS Stats
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://cssstats.com/stats"&gt;CSS Stats&lt;/a&gt; is another tool that provides analytics and visualizations for your stylesheets. In fact, &lt;a href="https://css-tricks.com/a-quick-css-audit-and-general-notes-about-design-systems/"&gt;Robin wrote about it&lt;/a&gt; a little while back and showed how he used it to audit the stylesheet at his job.&lt;/p&gt;

&lt;p&gt;All you need to do is to enter the URL of the site and hit &lt;code&gt;Enter&lt;/code&gt;. The information is segmented into meaningful sections, from declaration count to colors, typography, z-indexes, specificity, and more. Again, you might want to store the screenshots for later reference.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kg5_cYLR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9gtuusuyct2xr8dv0ud.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kg5_cYLR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9gtuusuyct2xr8dv0ud.png" alt="Screenshot of CSS Stats site."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-wallace"&gt;
  &lt;/a&gt;
  Project Wallace
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.projectwallace.com/analyze-css"&gt;Project Wallace&lt;/a&gt; is made by Bart Veneman, who already &lt;a href="https://css-tricks.com/in-search-of-a-stack-that-monitors-the-quality-and-complexity-of-css/"&gt;introduced the project here on CSS-Tricks&lt;/a&gt;. The power of Project Wallace is that it can compare and visualize changes based on imports. That means you could see previous states of your CSS code base and see how your code changes between states. I find this feature quite useful, especially when you want to convince someone that the code is improved. The tool is free for a single project and offers paid plans for more projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MgnP2dOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fbzsjsdwgfjp77s5xng4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MgnP2dOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fbzsjsdwgfjp77s5xng4.png" alt="Screenshot of Project Wallace site."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cli-tools"&gt;
  &lt;/a&gt;
  CLI tools
&lt;/h2&gt;

&lt;p&gt;In addition to DevTools and online tools, there are command line interface (CLI) tools that can help audit CSS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wallace"&gt;
  &lt;/a&gt;
  Wallace
&lt;/h3&gt;

&lt;p&gt;One of my favorite CLI tools is &lt;a href="https://github.com/bartveneman/wallace-cli"&gt;Wallace&lt;/a&gt;. Once installed, type &lt;code&gt;wallace&lt;/code&gt; and then the site name. The output shows everything you need to know about the CSS code for the site. My favorite things to look at are the number of times &lt;code&gt;!important&lt;/code&gt; is used, as well as how many IDs are in the code. Another neat piece of information is the top specificity number and how many selectors use it. These might be red flags for "bad" code.&lt;/p&gt;

&lt;p&gt;What I like the most about this tool is that it extracts all of the CSS code from the site, not only external files, but also inline code as well. That is why the report from CSS Stats and Wallace mismatch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZBgyrxQt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0g432ke9osa1059n6eoz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZBgyrxQt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0g432ke9osa1059n6eoz.png" alt="Screenshot of Wallace"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#csscss"&gt;
  &lt;/a&gt;
  csscss
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://github.com/zmoazeni/csscss"&gt;csscss&lt;/a&gt; CLI tool shows which rules share the same declarations. This is useful for identifying duplicated code and opportunities to reduce the amount of code that's written. I would think twice before doing that as it might not be worthwhile, especially with today's caching mechanisms. It is worth mentioning that csscss requires Ruby.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eQgMuyhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cpqm5q6qpjk7s5ljjuta.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eQgMuyhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cpqm5q6qpjk7s5ljjuta.png" alt="Screenshot of csscss tool."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-useful-tools"&gt;
  &lt;/a&gt;
  Other useful tools
&lt;/h2&gt;

&lt;p&gt;Other CSS tools might not be used for auditing but are still useful. Let's list those, too:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/bartveneman/color-sorter"&gt;Color Sorter&lt;/a&gt; — Sort CSS colors by hue, then by saturation.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/projectwallace/css-analyzer"&gt;CSS Analyzer&lt;/a&gt; — Generate an analysis for a string of CSS.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bartveneman/constyble"&gt;constyble&lt;/a&gt; — This is a CSS complexity linter, based on CSS Analyzer.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://extract-css.now.sh/"&gt;Extract CSS Now&lt;/a&gt; — Get all the CSS from a single webpage.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://content-project-wallace.vercel.app/get-css"&gt;Get CSS&lt;/a&gt; — Scrape all the CSS from a page.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/oyvindeh/ucss"&gt;uCSS&lt;/a&gt; — Crawl websites to identify unused CSS.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;CSS is everywhere around us, and we need to consider it a first-class citizen of every project. It does not matter what other people think about your CSS, but what you think about it really does matter. If your CSS is organized and well-written, you will spend less time debugging it and more time developing new features. In an ideal world, we would educate everyone to write good CSS, but that takes time.&lt;/p&gt;

&lt;p&gt;Let today be the day when you start caring for your CSS code.&lt;/p&gt;

&lt;p&gt;I know that auditing CSS isn't going to be fun for everyone. But if you run your code against any of these tools and try to improve even one part of your CSS codebase, then this post has done its job.&lt;/p&gt;

&lt;p&gt;I am thinking about CSS code more and more lately, and I am trying to make more developers write CSS code more respectfully. I even started a new project at &lt;a href="http://css-auditors.com/"&gt;css-auditors.com&lt;/a&gt; (yay for hyphenated domain names!) that's dedicated to auditing CSS.&lt;/p&gt;

&lt;p&gt;If you know of any other tools, let me know in the comments.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>Upgrade your project with linters, prettier &amp; husky</title>
      <author>Kaiwalya Koparkar</author>
      <pubDate>Mon, 07 Jun 2021 13:27:01 +0000</pubDate>
      <link>https://dev.to/kaiwalyakoparkar/upgrade-your-project-with-linters-prettier-husky-cd1</link>
      <guid>https://dev.to/kaiwalyakoparkar/upgrade-your-project-with-linters-prettier-husky-cd1</guid>
      <description>&lt;p&gt;Hello everyone, If you have ever worked on a open source project or any project in general where multiple people collaborate together then you might have faced issues like commit convention does not match. There is no proper/even indentation to the code or simply the difference of &lt;code&gt;' '&lt;/code&gt; and &lt;code&gt;" "&lt;/code&gt; in the code.&lt;br&gt;
This actually makes the codebase messier. Now how can you overcome that? So there are many predifined plugins/libraries which help you in overcoming all the abouve mentioned problems.&lt;br&gt;
So in this blog we are going to see the following things&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ESLint (For generalizing the style standards for js code)&lt;/li&gt;
&lt;li&gt;Prettier (For indenting your codebase evenly)&lt;/li&gt;
&lt;li&gt;Husky (Running the tests and commit convention check in local machine before commiting so that you don't face linting and test fail errors afterwords)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This linting style are of my personal choice. You can tweak in the codes to fit in your linting and style standards :)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#extension-for-vs-code"&gt;
  &lt;/a&gt;
  Extension for VS code
&lt;/h2&gt;

&lt;p&gt;(This is my personal recommendation. It's personal choice)&lt;br&gt;
If you want to follow along then I would recommend you to download it. For downloading you can copy the code given with the name below, into the extension search box and the extension will pop up. Click on install and it will get added to your vs code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Eslint ==&amp;gt; &lt;code&gt;dbaeumer.vscode-eslint&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Prettier ==&amp;gt; &lt;code&gt;esbenp.prettier-vscode&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#initializations-amp-installations"&gt;
  &lt;/a&gt;
  Initializations &amp;amp; Installations
&lt;/h2&gt;

&lt;p&gt;Open the project in the terminal and run the following commands by the same sequence.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run the following command (if not clonned and started fresh in local machine)
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Run the following command (This is initialize package.json in your project)
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Run the following command (This will creat node modules and packge-lock.json)
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;--save-dev&lt;/span&gt; eslint eslint-config-prettier eslint-plugin-prettier husky lint-staged prettier
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#eslint"&gt;
  &lt;/a&gt;
  Eslint
&lt;/h2&gt;

&lt;p&gt;Create file &lt;strong&gt;.eslintrc.json&lt;/strong&gt; in the root of the project and paste the following in it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"env"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"es2020"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"eslint:recommended"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"plugin:prettier/recommended"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"rules"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"linebreak-style"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"unix"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"quotes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"single"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"allowTemplateLiterals"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"semi"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"always"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"prefer-const"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"eqeqeq"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"always"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"curly"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#prettier"&gt;
  &lt;/a&gt;
  Prettier
&lt;/h2&gt;

&lt;p&gt;Now create &lt;strong&gt;.prettierrc&lt;/strong&gt; in the root of the project file and paste the following in the file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"endOfLine"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"lf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"useTabs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"singleQuote"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#git-ignore"&gt;
  &lt;/a&gt;
  Git Ignore
&lt;/h2&gt;

&lt;p&gt;Now create &lt;strong&gt;.gitignore&lt;/strong&gt; file in the root of the project and paste the following in the file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/node_modules/
.env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#huskey"&gt;
  &lt;/a&gt;
  Huskey
&lt;/h2&gt;

&lt;p&gt;Now create &lt;strong&gt;.huskyrc&lt;/strong&gt; file in the root of the project and paste the following in it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"hooks"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"pre-commit"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"lint-staged"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now go to package.json and add this at the end before the last &lt;strong&gt;}&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"lint-staged"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"*.js"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"eslint --fix"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --write"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now run the following commands one by one in the terminal&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Installing husky to the local project directory
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;husky &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Intall husky package
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx husky &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Initialize husky package and install dependencies
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx husky-init &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create husky folder&lt;/p&gt;

&lt;p&gt;Now go to &lt;strong&gt;pre-commit&lt;/strong&gt; file in the husky folder and delete the &lt;strong&gt;npm test&lt;/strong&gt; command. As we don't have tests as of now&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Installing conventional commit style
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; @commitlint/cli @commitlint/config-conventional
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Add the command to commitlint.config.js file
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"module.exports = {extends: ['@commitlint/config-conventional']}"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; commitlint.config.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Adding husky reference commit message library
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx husky add .husky/commit-msg &lt;span class="s1"&gt;'npx --no-install commitlint --edit "$1"'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it !!! You have setup your project with cool tools which would ease your work as a maintainer or reviewer. This will take care of all of your style guidelines.&lt;/p&gt;

&lt;p&gt;You are all set-up with your js project. If you can to configure it with js follow &lt;a href="https://www.nhcarrigan.com/notes/#/node-ts-config/index"&gt;Nicholas Carrigan Notes&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reference-"&gt;
  &lt;/a&gt;
  Reference :
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://youtu.be/FKVjAz505cY"&gt;Eddie Jaoude Youtube Video&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.nhcarrigan.com/notes/#/node-ts-config/index"&gt;Nicholas Carrigan Notes&lt;/a&gt;&lt;br&gt;
&lt;a href="https://commitlint.js.org/#/"&gt;Commit lint org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://typicode.github.io/husky/#/"&gt;Huskey official documentation&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  ❤️ Thank you for reading ❤️
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;🌏 Like | Follow | Share 🌏&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;My Socials:&lt;/strong&gt; &lt;a href="https://twitter.com/kaiwalya_13"&gt;Twitter&lt;/a&gt; | &lt;a href="https://linkedin.com/in/kaiwalyakoparkar"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/kaiwalyakoparkar"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>todayilearned</category>
      <category>programming</category>
      <category>powerfuldevs</category>
    </item>
    <item>
      <title>JavaScript Interview Question #46: Length of JS functions</title>
      <author>Coderslang: Become a Software Engineer</author>
      <pubDate>Mon, 07 Jun 2021 13:20:21 +0000</pubDate>
      <link>https://dev.to/coderslang/javascript-interview-question-46-length-of-js-functions-494f</link>
      <guid>https://dev.to/coderslang/javascript-interview-question-46-length-of-js-functions-494f</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oqhl_vYi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/js-test-46.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oqhl_vYi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/js-test-46.png" alt="javascript interview question #46"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What's the value of the &lt;code&gt;length&lt;/code&gt; field for JavaScript functions? What will be logged to the console?&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;A lot of JavaScript entities have the &lt;code&gt;length&lt;/code&gt; field.&lt;/p&gt;

&lt;p&gt;For example, it holds the total number of element in JavaScript arrays.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For strings — it’s the number of characters. Literally, the length of a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;welcomeMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;goodbyeMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Goodbye!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;emptyString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;welcomeMessage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 6&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;goodbyeMessage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 8&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emptyString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;     &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Regular objects don’t have the &lt;code&gt;length&lt;/code&gt; field by default.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;32&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But the functions do have it! And it holds not the "length of a function", which is hard to define, but rather the number of function parameters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;noop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;noop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;ANSWER&lt;/strong&gt;: The &lt;code&gt;length&lt;/code&gt; field holds the number of parameters for all JavaScript functions. Thus, the output is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the function &lt;code&gt;sayHello&lt;/code&gt; has one parameter and the function &lt;code&gt;confirmSubscription&lt;/code&gt; has zero parameters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://js.coderslang.com"&gt;Learn Full-Stack JavaScript&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Windows, Ruby and Long Paths</title>
      <author>Gabriel Nagy</author>
      <pubDate>Mon, 07 Jun 2021 12:58:30 +0000</pubDate>
      <link>https://dev.to/puppet/windows-ruby-and-long-paths-3jag</link>
      <guid>https://dev.to/puppet/windows-ruby-and-long-paths-3jag</guid>
      <description>&lt;p&gt;Over the past few months, we've had a long-standing issue related to Puppet on Windows resurface (&lt;a href="https://github.com/puppetlabs/Puppet.Dsc/issues/144"&gt;puppetlabs/Puppet.Dsc#144&lt;/a&gt;). More specifically, Puppet modules with long file paths could not be installed on Windows due to a limitation in the Windows operating system. In short, if a file path surpasses 260 characters, it's open season: the path has to be referred to in a different format, first-party apps like Notepad or File Explorer start to behave erratically, and there's no guarantee what works and what doesn't anymore.&lt;/p&gt;

&lt;p&gt;Buckle up, as we're about to go on a perilous journey where we'll encounter and modify old code, graft resources onto Windows executables, build Ruby with the help of renowned triple-A videogame Hitman&lt;sup&gt;TM&lt;/sup&gt; (I'm 100% serious) and generally have a good time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-1-the-windows"&gt;
  &lt;/a&gt;
  Part 1: The Windows
&lt;/h2&gt;

&lt;p&gt;In theory, Windows's NTFS filesystem supports a maximum of an approximate 32767 characters in a file path. However, there's also a hard limit of 260 characters, &lt;code&gt;MAX_PATH&lt;/code&gt;, which is enforced in all Win32 API file management functions.&lt;/p&gt;

&lt;p&gt;A short Google search for "&lt;a href="https://www.google.com/search?q=windows+long+file+paths"&gt;windows long file paths&lt;/a&gt;" shows that this issue is frequently hit by developers and regular users alike. Since 260 characters is really &lt;em&gt;not&lt;/em&gt; that much for a file path, the limit can be hit easily. Off the top of my head I remember seeing the error when installing the boost libraries on Windows, fortunately I was able to work around it by specifying a shorter install path.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bypassing-the-raw-maxpath-endraw-limitation"&gt;
  &lt;/a&gt;
  Bypassing the &lt;code&gt;MAX_PATH&lt;/code&gt; limitation
&lt;/h3&gt;

&lt;p&gt;If there's one thing I've grown to appreciate from Microsoft, it's their extensive API documentation (I'm looking at you, Apple 👀). For this long path problem they've put together a nice document&lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt; detailing how to work around &lt;code&gt;MAX_PATH&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The two options are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;specify long paths using the extended-length format (e.g. &lt;code&gt;\\?\D:\very long path&lt;/code&gt;)

&lt;ul&gt;
&lt;li&gt;this format does not support relative paths&lt;/li&gt;
&lt;li&gt;it would also require extensive refactoring throughout any software that decides to implement long path support&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;disable the limitation by changing a registry value (needs at least Windows 10, version 1607)

&lt;ul&gt;
&lt;li&gt;doing this will remove the limitation in the Win32 functions, and will enable them to work with long paths without the extended prefix&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The second options comes with a catch, which we failed to notice when we first investigated the problem. In Microsoft's article, just under registry example lies an application manifest:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;application&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"urn:schemas-microsoft-com:asm.v3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;windowsSettings&lt;/span&gt; &lt;span class="na"&gt;xmlns:ws2=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.microsoft.com/SMI/2016/WindowsSettings"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;ws2:longPathAware&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/ws2:longPathAware&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/windowsSettings&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/application&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;What we thought needs to happen:&lt;/strong&gt; by conflating other (wrong) sources with Microsoft's official documentation, we came to the (wrong) conclusion that the &lt;code&gt;MAX_PATH&lt;/code&gt; limitation is globally controlled by the registry key, and on a per-application basis through the application manifest. This. Is. Not. True.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What actually needs to happen:&lt;/strong&gt; &lt;em&gt;in addition to&lt;/em&gt; having the registry key set, the application that wants to use long paths &lt;strong&gt;NEEDS&lt;/strong&gt; to embed that application manifest at build time. Microsoft devs are playing it extra safe here, showing how much they care about backwards compatibility. And in a way they're right, who knows how much of the third-party software out there makes wrong assumptions about this limitation so it would only make sense for it to be an opt-in feature.&lt;/p&gt;

&lt;p&gt;This definitely explained why most of the things did not Just Work&lt;sup&gt;TM&lt;/sup&gt; after setting the registry key, but it also gave us hope. Well, we still needed to figure out what the hell an application manifest was, how to embed it in the executable, and if possible to automate all this without the help of the Visual Studio GUI.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#application-manifests-what-do-they-know-do-they-know-things-lets-find-out"&gt;
  &lt;/a&gt;
  Application Manifests! What do they know? Do they know things?? Let's find out!
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;"When in doubt, check what the Python folks &lt;a href="https://github.com/python/cpython/commit/19ab0fd456a79fa1fdfdb543ac423723667cb2d0"&gt;do&lt;/a&gt;." -anonymous proverb&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Quoting from the Windows documentation, application manifests are XML files that describe and identify the shared and private side-by-side assemblies that an application should bind to at run time.&lt;sup id="fnref2"&gt;&lt;a href="#fn2"&gt;2&lt;/a&gt;&lt;/sup&gt; Got it? Me neither, and this was as far as I was willing to go reading documentation 😆. I left it at "put manifest in executable file" for simplicity.&lt;/p&gt;

&lt;p&gt;During my time at Puppet I've grown to be wary with everything regarding Windows development. It couldn't possibly be that hammering an XML file in an executable would magically get rid of the long path limitation &lt;small&gt;&lt;em&gt;(It does)&lt;/em&gt;&lt;/small&gt;. There must be more to it &lt;small&gt;&lt;em&gt;(There wasn't)&lt;/em&gt;&lt;/small&gt;. Other, more complicated theories were running through my head, among them a far-fetched one suggesting that the manifest was somehow read by Microsoft's compiler which in turn optimized the Win32 function calls, making this solution impossible to use with different compilers. I also presumed that this manfest thing is C# specific, hence not applicable to Ruby which is written in C.&lt;/p&gt;

&lt;p&gt;From the comments in the related Ruby bug&lt;sup id="fnref3"&gt;&lt;a href="#fn3"&gt;3&lt;/a&gt;&lt;/sup&gt; I knew that Python had this feature, so I started digging through their source code fully expecting to see path manipulation with the &lt;code&gt;\\?\&lt;/code&gt; prefix for every Win32 API call. Adding to the fact that the Ruby issue was like 5 years old at this point, I was sure that this long paths fix would be a massive effort and likely impossible without knowing the ins and outs of the Ruby C implementation.&lt;/p&gt;

&lt;p&gt;I started going through the Python codebase, but all I could find was &lt;a href="https://github.com/python/cpython/commit/19ab0fd456a79fa1fdfdb543ac423723667cb2d0"&gt;the addition of&lt;/a&gt; the &lt;code&gt;longPathAware&lt;/code&gt; manifest key, which kind of dismantled all my preconceptions about how application manifests work. Maybe having the manifest was indeed enough.&lt;/p&gt;

&lt;p&gt;From another useful Microsoft document,&lt;sup id="fnref4"&gt;&lt;a href="#fn4"&gt;4&lt;/a&gt;&lt;/sup&gt; I found that a manifest can be embedded into an executable using the following syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mt.exe -manifest MyApp.exe.manifest -outputresource:MyApp.exe;1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To do this for a library, replace the &lt;code&gt;1&lt;/code&gt; at the end with &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As a quick sanity check, I opened up Visual Studio, created a new C project in which I simply called &lt;a href="https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createdirectoryw"&gt;&lt;code&gt;CreateDirectory&lt;/code&gt;&lt;/a&gt; with a long path. The call errored out as the path was too long, but after including the manifest it worked. Granted, it took me &lt;em&gt;way&lt;/em&gt; too long to find out how to include a manifest through the VS user interface, but hey, it worked!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-2-the-ruby"&gt;
  &lt;/a&gt;
  Part 2: The Ruby
&lt;/h2&gt;

&lt;p&gt;Coming from a Linux background, I definitely did &lt;em&gt;not&lt;/em&gt; expect to have so much fun compiling Ruby on Windows (it's been a few weeks since I've done this so the bad memories have mostly gone away).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-this-thing"&gt;
  &lt;/a&gt;
  Building this thing
&lt;/h3&gt;

&lt;p&gt;Ruby on Windows can be compiled with both MinGW/GCC and Visual C++, and I decided to start with the latter as I already had the Visual C++ compiler installed.&lt;/p&gt;

&lt;p&gt;Building Ruby from the git source requires an extra set of commands like &lt;code&gt;bison&lt;/code&gt;, &lt;code&gt;patch&lt;/code&gt; and &lt;code&gt;sed&lt;/code&gt;. To get these on Windows I installed Cygwin and &lt;a href="https://community.chocolatey.org/packages/cyg-get"&gt;cyg-get&lt;/a&gt;, and made sure to have the Cygwin bin path properly set. After that it was just a matter of calling &lt;code&gt;cyg-get&lt;/code&gt; to install each required package.&lt;/p&gt;

&lt;p&gt;Afterwards, Ruby can be built by executing the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;win32\configure.bat
nmake
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunately my first Ruby build failed fast with a &lt;code&gt;ucrtbase.dll&lt;/code&gt; error somewhere &lt;a href="https://github.com/ruby/ruby/blob/44cff500a0ad565952e84935bc98523c36a91b06/win32/win32.c#L2612"&gt;here&lt;/a&gt;.  I still have no idea what this code does, I assume it searches for a function in my &lt;code&gt;ucrtbase.dll&lt;/code&gt;. I blamed it on the fact that I'm running Windows builds from the Dev Channel which may have newer versions of DLLs, and I started my search for the perfect &lt;code&gt;ucrtbase.dll&lt;/code&gt;. This is a good moment to plug &lt;a href="https://www.voidtools.com/downloads/"&gt;Everything&lt;/a&gt;, an awesome search tool for Windows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--joJ7o_wJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qajlnnoj91vzq0muiog.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--joJ7o_wJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qajlnnoj91vzq0muiog.png" alt="Everything ucrtbase.dll"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I kid you not, I ended up taking the &lt;code&gt;ucrtbase.dll&lt;/code&gt; from my Hitman installation, copied it to the Ruby directory and prepended the path to the &lt;code&gt;LIB&lt;/code&gt; environment variable. Thanks to Agent 47 I was able to successfully build Ruby with Visual C++.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8lfzvF8N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xy4lh76nj0c80ztzc4cu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8lfzvF8N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xy4lh76nj0c80ztzc4cu.png"&gt;&lt;/a&gt;&lt;br&gt;Look at that unsettling smile! Also, did you know that Agent 47 is &lt;a href="https://hitman.fandom.com/wiki/Agent_47"&gt;partly Romanian&lt;/a&gt;?
  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-to-put-the-manifest-the-visual-c-version"&gt;
  &lt;/a&gt;
  Where to put the manifest: The Visual C++ version
&lt;/h3&gt;

&lt;p&gt;The good part is that I found a spot in the Makefile where &lt;code&gt;mt.exe&lt;/code&gt; &lt;a href="https://github.com/ruby/ruby/blob/93be7a4c6bda8269b3d82ce4cfde6b2bde3b9718/win32/Makefile.sub#L307-L310"&gt;is called&lt;/a&gt;.  The bad part is that &lt;code&gt;mt.exe&lt;/code&gt; is a tool only provided in the Visual C++ toolchain, and the Makefile was Visual C++-specific, so this would only fix half of the problem. At Puppet, we vendor our own Ruby, but we compile it with MinGW/GCC so we wouldn't be able to benefit from the Visual C++ changes.&lt;/p&gt;

&lt;p&gt;Either way, it was late at night and I just wanted to get that manifest inside the Ruby executable, so I started desecrating the Makefile to make it behave the way I wanted. I ended up embedding the manifest into &lt;em&gt;EVERY&lt;/em&gt; executable and library generated by the compiler (including all native extensions), so I might have gone a bit overboard with that. On the bright side, I was able to confirm that long paths now worked!&lt;/p&gt;

&lt;p&gt;Still, it was a piece of ugly code, I shared it in &lt;a href="https://bugs.ruby-lang.org/issues/12551#note-8"&gt;a comment&lt;/a&gt; on the original Ruby ticket, and to my surprise just a few hours later &lt;a href="https://github.com/nobu"&gt;&lt;strong&gt;nobu&lt;/strong&gt;&lt;/a&gt; responded with a cleaner solution which I validated, and looked something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gh"&gt;diff --git a/win32/Makefile.sub b/win32/Makefile.sub
index c88ae6f9d1..22198aa358 100644
&lt;/span&gt;&lt;span class="gd"&gt;--- a/win32/Makefile.sub
&lt;/span&gt;&lt;span class="gi"&gt;+++ b/win32/Makefile.sub
&lt;/span&gt;&lt;span class="p"&gt;@@ -305,9 +305,10 @@&lt;/span&gt; XCFLAGS = -DRUBY_EXPORT $(INCFLAGS) $(XCFLAGS)
 !if $(MSC_VER) &amp;gt;= 1400
 # Prevents VC++ 2005 (cl ver 14) warnings
 MANIFESTTOOL = mt -nologo
&lt;span class="gd"&gt;-LDSHARED_0 = @if exist $(@).manifest $(MINIRUBY) -run -e wait_writable -- -n 10 $@
-LDSHARED_1 = @if exist $(@).manifest $(MANIFESTTOOL) -manifest $(@).manifest -outputresource:$(@);2
-LDSHARED_2 = @if exist $(@).manifest @$(RM) $(@:/=\).manifest
&lt;/span&gt;&lt;span class="gi"&gt;+LDSHARED_0 = $(Q)$(MINIRUBY) -run -e wait_writable -- -n 10 $@
+LDSHARED_1 = $(Q)if exist $(@).manifest (set MANIFEST=$(@).manifest) else (set MANIFEST=$(win_srcdir)/ruby.manifest) &amp;amp;&amp;amp; \
+            call $(MANIFESTTOOL) -manifest ^%MANIFEST% -outputresource:$(@);2
+LDSHARED_2 = $(Q)@$(RM) $(@:/=\).manifest
&lt;/span&gt; !endif
 CPPFLAGS = $(DEFS) $(ARCHDEFS) $(CPPFLAGS)
 !if "$(USE_RUBYGEMS)" == "no"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;small&gt;&lt;em&gt;If you look closely you can see that &lt;code&gt;mt&lt;/code&gt; is called with &lt;code&gt;2&lt;/code&gt; which means it only works for libraries. After some debugging I extended the Makefile with additional commands to make it work for executables as well, but the changes got a bit more complicated than I wanted, so I'll skip over them; especially since the final fix is completely different.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;The remaining issue was to make it also work with GCC.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-to-put-the-manifest-the-gcc-version"&gt;
  &lt;/a&gt;
  Where to put the manifest: The GCC version
&lt;/h3&gt;

&lt;p&gt;After some Google searching I found out that the MinGW toolchain provides &lt;a href="https://sourceware.org/binutils/docs/binutils/windres.html"&gt;&lt;code&gt;windres&lt;/code&gt;&lt;/a&gt;, a tool that can manipulate &lt;a href="https://en.wikipedia.org/wiki/Resource_(Windows)"&gt;Windows resources&lt;/a&gt;. What are Windows resources you might ask? Well, various things that can be embedded into an application, like icons, cursors, fonts, and... application manifests!&lt;/p&gt;

&lt;p&gt;I was able to find &lt;a href="https://github.com/ruby/ruby/blob/44cff500a0ad565952e84935bc98523c36a91b06/cygwin/GNUmakefile.in#L49-L51"&gt;usage of &lt;code&gt;windres&lt;/code&gt;&lt;/a&gt; inside the Ruby Cygwin Makefile:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight make"&gt;&lt;code&gt;&lt;span class="nl"&gt;%.res.@OBJEXT@&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;%.rc&lt;/span&gt;
    &lt;span class="nv"&gt;$(ECHO)&lt;/span&gt; compiling &lt;span class="nv"&gt;$@&lt;/span&gt;
    &lt;span class="nv"&gt;$(Q)&lt;/span&gt; &lt;span class="nv"&gt;$(WINDRES)&lt;/span&gt; &lt;span class="nt"&gt;--include-dir&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;--include-dir&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&amp;lt;D&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;--include-dir&lt;/span&gt; &lt;span class="nv"&gt;$(srcdir)&lt;/span&gt;/win32 &lt;span class="nv"&gt;$&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="nl"&gt;%.rc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;$(RBCONFIG) $(srcdir)/revision.h $(srcdir)/win32/resource.rb&lt;/span&gt;
    &lt;span class="nv"&gt;$(ECHO)&lt;/span&gt; generating &lt;span class="nv"&gt;$@&lt;/span&gt;
    &lt;span class="nv"&gt;$(Q)&lt;/span&gt; &lt;span class="nv"&gt;$(MINIRUBY)&lt;/span&gt; &lt;span class="nv"&gt;$(srcdir)&lt;/span&gt;/win32/resource.rb &lt;span class="se"&gt;\&lt;/span&gt;
      &lt;span class="nt"&gt;-ruby_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$(RUBY_INSTALL_NAME)&lt;/span&gt; &lt;span class="nt"&gt;-rubyw_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$(RUBYW_INSTALL_NAME)&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      &lt;span class="nt"&gt;-so_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$(DLL_BASE_NAME)&lt;/span&gt; &lt;span class="nt"&gt;-output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;F&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$(icondirs)&lt;/span&gt; &lt;span class="nv"&gt;$(srcdir)&lt;/span&gt;/win32
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Makefile lingo this means that &lt;code&gt;.rc&lt;/code&gt; files are turned into &lt;code&gt;.res&lt;/code&gt; files, &lt;em&gt;and&lt;/em&gt; &lt;code&gt;.rc&lt;/code&gt; files are created through the execution of the &lt;a href="https://github.com/ruby/ruby/blob/44cff500a0ad565952e84935bc98523c36a91b06/win32/resource.rb"&gt;&lt;code&gt;win32/resource.rb&lt;/code&gt;&lt;/a&gt; Ruby script. In short, for each Ruby executable and library generated by the compiler—&lt;code&gt;ruby.exe&lt;/code&gt;, &lt;code&gt;rubyw.exe&lt;/code&gt;, and the Ruby DLL library)—the script creates a &lt;code&gt;.rc&lt;/code&gt; file containing various things like the Ruby icon and copyright information. After a quick look through the script, I found the place where the manifest can be included, and it was as simple as including the following line in the generated &lt;code&gt;.rc&lt;/code&gt; file, provided that &lt;code&gt;ruby.manifest&lt;/code&gt; contains the appropriate long path manifest:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1 RT_MANIFEST ruby.manifest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;small&gt;&lt;em&gt;1 stands for the resource ID, &lt;code&gt;RT_MANIFEST&lt;/code&gt; is the type defined in &lt;code&gt;winuser.h&lt;/code&gt; for application manifests (it maps to the integer &lt;code&gt;24&lt;/code&gt;, which can also be used if you don't have access to the header file), and &lt;code&gt;ruby.manifest&lt;/code&gt; is the file which contains the application manifest.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Below is a simplified version of the &lt;code&gt;win32/resource.rb&lt;/code&gt; code that generates the &lt;code&gt;.rc&lt;/code&gt; files, with the newly added manifest line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="c1"&gt;# base name    extension         file type  desc, icons&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="vg"&gt;$ruby_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="no"&gt;CONFIG&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"EXEEXT"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;'VFT_APP'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'CUI'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ruby_icon&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="vg"&gt;$rubyw_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="no"&gt;CONFIG&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"EXEEXT"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;'VFT_APP'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'GUI'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rubyw_icon&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;ruby_icon&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="vg"&gt;$so_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     &lt;span class="s1"&gt;'.dll'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;           &lt;span class="s1"&gt;'VFT_DLL'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'DLL'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dll_icons&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;desc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vg"&gt;$output&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="vg"&gt;$output&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;
  &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'.rc'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;binmode&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="sr"&gt;/mingw/&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="no"&gt;RUBY_PLATFORM&lt;/span&gt;

    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;print&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;EOF&lt;/span&gt;&lt;span class="sh"&gt;
#include &amp;lt;windows.h&amp;gt;
#include &amp;lt;winver.h&amp;gt;

&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;
1 RT_MANIFEST ruby.manifest
VS_VERSION_INFO VERSIONINFO
 FILEVERSION    &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;nversion&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;
 PRODUCTVERSION &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;nversion&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;
 FILEFLAGSMASK  0x3fL
 FILEFLAGS      0x0L
 FILEOS         VOS__WINDOWS32
 FILETYPE       &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;
 FILESUBTYPE    VFT2_UNKNOWN
BEGIN
 BLOCK "StringFileInfo"
 BEGIN
  BLOCK "000004b0"
  BEGIN
   VALUE "Comments",         "&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;RUBY_RELEASE_DATE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="sh"&gt;0"
   VALUE "CompanyName",      "http://www.ruby-lang.org/&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="sh"&gt;0"
   VALUE "FileDescription",  "Ruby interpreter (&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;desc&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;) &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;sversion&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt; [&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;RUBY_PLATFORM&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;]&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="sh"&gt;0"
   VALUE "FileVersion",      "&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;sversion&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="sh"&gt;0"
   VALUE "InternalName",     "&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="sh"&gt;0"
   VALUE "LegalCopyright",   "Copyright (C) 1993-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;RUBY_RELEASE_DATE&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;/\d+/&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt; Yukihiro Matsumoto&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="sh"&gt;0"
   VALUE "OriginalFilename", "&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="sh"&gt;0"
   VALUE "ProductName",      "Ruby interpreter &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;sversion&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt; [&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;RUBY_PLATFORM&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;]&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="sh"&gt;0"
   VALUE "ProductVersion",   "&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;sversion&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="sh"&gt;0"
  END
 END
 BLOCK "VarFileInfo"
 BEGIN
  VALUE "Translation", 0x0, 0x4b0
 END
END
&lt;/span&gt;&lt;span class="no"&gt;EOF&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A tool that helped me a lot in debugging the executables generated by GCC and Visual C++ is &lt;a href="http://www.angusj.com/resourcehacker/"&gt;Resource Hacker&lt;/a&gt;. It can open up executables and show you what resources they contain. This was how I was able to notice that if I set an ID different than 1 to the manifest, GCC would include a default manifest which shadowed my long path manifest, causing the feature to no longer work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L9cCzHKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63bl6odzmuap2yajm68k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L9cCzHKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63bl6odzmuap2yajm68k.png"&gt;&lt;/a&gt;&lt;br&gt;Right above the manifest we just added, there's also the &lt;code&gt;Version Info&lt;/code&gt; resource which we saw in the code above!
  &lt;/p&gt;

&lt;p&gt;I glossed over the build process for MinGW/GCC, because it's... not as complicated and it didn't involve any Hitman DLLs. I did it using the &lt;a href="https://www.msys2.org/"&gt;MSYS2&lt;/a&gt; toolchain which gives you a bash prompt, then compiled Ruby as if I was on Linux.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;After some digging I realized that the &lt;code&gt;resource.rb&lt;/code&gt; script which created the &lt;code&gt;.rc&lt;/code&gt; files with the manifest was also executed during the Visual C++ build, so changing that Ruby script would accomodate both compilers without the need for additional code changes. One thing to note is that with Visual C++, the &lt;a href="https://docs.microsoft.com/en-us/windows/win32/menurc/resource-compiler"&gt;&lt;code&gt;rc&lt;/code&gt;&lt;/a&gt; tool is used instead of &lt;a href="https://sourceware.org/binutils/docs/binutils/windres.html"&gt;&lt;code&gt;windres&lt;/code&gt;&lt;/a&gt; which achieves similar results, and there's no need for &lt;code&gt;mt&lt;/code&gt; anymore.&lt;/p&gt;

&lt;p&gt;I hurried to open a &lt;a href="https://github.com/ruby/ruby/pull/4505"&gt;pull request&lt;/a&gt;, where &lt;a href="https://github.com/nobu"&gt;&lt;strong&gt;nobu&lt;/strong&gt;&lt;/a&gt; again provided feedback and promptly merged it!&lt;/p&gt;

&lt;p&gt;In the end it was one of those few-line fixes with a huge impact. I'm happy it could be done in a few lines of code, and that I had the chance to learn a lot about Windows and Ruby on Windows in the meantime.&lt;/p&gt;

&lt;p&gt;Things I learned by working on this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If something fails to compile, copying random DLLs around might just fix your problems&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Make sure the code you expect to run is actually running&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;if you modify something like a Makefile and nothing appears to change, don't blame your coding skills just yet—find a way to figure out if and when that code path is executed (&lt;code&gt;nmake V=1&lt;/code&gt; may provide more context for Ruby on Windows)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Isolate the problem you want to fix&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;when I was unsure about what the application manifest did, I validated it with the shortest possible C program to confirm its behavior; this way I knew what I was going for when looking through the Ruby codebase&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Find a reliable way to validate your changes&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;for this type of problem, the solution consisted in making the OS aware of the fact that it should enable long paths support, so it's helpful to figure out how that actually happens for an application; i.e. getting as close as possible to how Windows makes this check&lt;/li&gt;
&lt;li&gt;at first I tested my changes by creating directories with paths longer than 260 characters through &lt;code&gt;irb&lt;/code&gt;, but how do you dig deeper when that doesn't work?&lt;/li&gt;
&lt;li&gt;after a lot of trial and error, I found that the most reliable way to validate my changes was to open &lt;code&gt;ruby.exe&lt;/code&gt; in Resource Hacker, and make sure it only included my manifest, with ID 1&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Sleep on it, and don't be afraid to experiment&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;I managed to get a working fix in the first day, but with each following day I changed up the code, and the final fix ended up being in a totally different place than initially expected&lt;/li&gt;
&lt;li&gt;when you feel that something gets more and more complicated and you're not even close to fixing the problem, see if you can approach it in a different way; this made for a way cleaner solution in my case&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;To finish things up, here's an oversimplified diagram of the Ruby on Windows build process:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0FTKWc_l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5b5q8m225wzqp6l763h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0FTKWc_l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5b5q8m225wzqp6l763h.png" alt="Ruby Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here's the story of Ruby trying to access long paths on Windows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4jVb_2te--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9e7527te83jvz417jqsy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4jVb_2te--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9e7527te83jvz417jqsy.png" alt="Ruby Comic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The End?
&lt;/h2&gt;

&lt;p&gt;If you take &lt;a href="https://github.com/puppetlabs/Puppet.Dsc/issues/144#issuecomment-852667097"&gt;a closer look&lt;/a&gt; at the GitHub issue I referred to in the introduction, this does not fully solve our problem in Puppet. On Windows, we use the &lt;a href="https://github.com/halostatue/minitar"&gt;&lt;strong&gt;minitar&lt;/strong&gt;&lt;/a&gt; gem to build and install Puppet modules (which are just tarballs downloaded from the Puppet Forge). Unfortunately, there is an issue with minitar being unable to unpack the tarballs it creates if the file paths exceed a certain length. This leaves us in a state where the modules in question can be built, but cannot be installed.&lt;br&gt;
The plan is to attempt to fix the issue in minitar, and maybe blog about it, so stay tuned for the next installment in the &lt;em&gt;Long Paths&lt;/em&gt; series!&lt;/p&gt;




&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs=cmd"&gt;https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs=cmd&lt;/a&gt; &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/windows/win32/sbscs/application-manifests"&gt;https://docs.microsoft.com/en-us/windows/win32/sbscs/application-manifests&lt;/a&gt; &lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn3"&gt;
&lt;p&gt;&lt;a href="https://bugs.ruby-lang.org/issues/12551"&gt;https://bugs.ruby-lang.org/issues/12551&lt;/a&gt; &lt;a href="#fnref3"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn4"&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/cpp/build/how-to-embed-a-manifest-inside-a-c-cpp-application"&gt;https://docs.microsoft.com/en-us/cpp/build/how-to-embed-a-manifest-inside-a-c-cpp-application&lt;/a&gt; &lt;a href="#fnref4"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>ruby</category>
      <category>windows</category>
      <category>puppet</category>
    </item>
    <item>
      <title>Rebuilding Promise.all()</title>
      <author>Drew Clements</author>
      <pubDate>Mon, 07 Jun 2021 12:54:15 +0000</pubDate>
      <link>https://dev.to/drewclem/rebuilding-promise-all-52g9</link>
      <guid>https://dev.to/drewclem/rebuilding-promise-all-52g9</guid>
      <description>&lt;p&gt;I was presented with an interesting challenge recently. That challenge was to recreate a method provided by Javascript. Any guesses what that method was? That's right! &lt;code&gt;Promise.all().&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The purpose of the exercise was to get a deeper understanding of how promises in Javascript work. If you've worked with anything &lt;code&gt;Promises&lt;/code&gt; or &lt;code&gt;Async/Await&lt;/code&gt; before, then you know that there are specific things that have to happen in a certain way and order to work- and this is all by design.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gathering-context"&gt;
  &lt;/a&gt;
  Gathering Context
&lt;/h2&gt;

&lt;p&gt;With that said, we can deduce a few things from &lt;code&gt;Promise.all()&lt;/code&gt; and use that to scope what our function needs to do.&lt;/p&gt;

&lt;p&gt;What do we know about &lt;code&gt;Promise.all()&lt;/code&gt;? We know it accepts an array of promises. We know it returns an array of what those promises return. We know the returned array is itself a promise. We also know that it only does that last step &lt;em&gt;if&lt;/em&gt; all promises succeed- so it errors if any of the passed in promises fail.&lt;/p&gt;

&lt;p&gt;Our Definition of Done list could look something like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It accepts an array of promises&lt;/li&gt;
&lt;li&gt;It returns a promise&lt;/li&gt;
&lt;li&gt;It returns an array of those promises' returned value&lt;/li&gt;
&lt;li&gt;It errors if any of the passed in promises fail&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#jumping-into-the-code"&gt;
  &lt;/a&gt;
  Jumping into the Code
&lt;/h2&gt;

&lt;p&gt;We're only going to be writing a single function for this article. If you want to code along then you can pop open a new index.js file and use your terminal to test it once we're done.&lt;/p&gt;

&lt;p&gt;Step one of this is to create the function. Since we're mimic-ing &lt;code&gt;Promise.all()&lt;/code&gt;, we can call this function &lt;code&gt;promiseAll&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;promiseAll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not too tough, huh? The next step is to let the function know to expect an array of promises when it is called.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;promiseAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's Definition of Done number one off of our list!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;It accepts an array of promises&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;It returns a promise&lt;/li&gt;
&lt;li&gt;It returns an array of those promises' returned value&lt;/li&gt;
&lt;li&gt;It errors if any of the passed in promises fail&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next we want to set this function up to &lt;em&gt;return&lt;/em&gt; a &lt;em&gt;promise&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;I highlighted those two words because they almost literally tell us what we need to do next. How do you make a function return? How do you create a new Promise?&lt;/p&gt;

&lt;p&gt;If you can answer those two questions, then you already know what our next code snippet should look like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;promiseAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See what I mean? We had to &lt;code&gt;return&lt;/code&gt; a &lt;code&gt;new Promise&lt;/code&gt;. And that's item two of of our checklist&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;It accepts an array of promises&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;It returns a promise&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;It returns an array of those promises' returned value&lt;/li&gt;
&lt;li&gt;It errors if any of the passed in promises fail&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#returning-an-array-of-promises"&gt;
  &lt;/a&gt;
  Returning an Array of Promises
&lt;/h2&gt;

&lt;p&gt;Number 3 on our checklist is where the difficulty ramps up a bit.&lt;/p&gt;

&lt;p&gt;Let's break down what we need.&lt;/p&gt;

&lt;p&gt;We need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;an array we can return&lt;/li&gt;
&lt;li&gt;to get the returned values of the promises passed in&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's take that one step further. We know we're only going to return the promises' values in an array &lt;em&gt;if&lt;/em&gt; they all return successfully.&lt;/p&gt;

&lt;p&gt;Knowing that, lets create an array called &lt;code&gt;successes&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;promiseAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;successes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to somehow get the returned values of all promises passed in. Can you think of a couple of ways we can iterate through each promise? &lt;/p&gt;

&lt;p&gt;We can use a for loop or the &lt;code&gt;.map()&lt;/code&gt; method. Either here would work, but I'm going to use the &lt;code&gt;.map()&lt;/code&gt; since I'm more familiar with it. Read up on .map() &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's map through our &lt;code&gt;promises&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;promiseAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;successes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

    &lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can do promise stuff within the scope of each individual promise passed in.&lt;/p&gt;

&lt;p&gt;What we'll be doing here is calling each promise individually and using a &lt;code&gt;.then()&lt;/code&gt; to then get access to its returned value.&lt;/p&gt;

&lt;p&gt;We'll also want to add a &lt;code&gt;.catch&lt;/code&gt; to handle any errors. This actually checks off the fourth thing on our list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;promiseAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;successes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

    &lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember that our larger function is trying to return an &lt;code&gt;array&lt;/code&gt; of returned values. Knowing that, we shouldn't immediately resolve our promises.&lt;/p&gt;

&lt;p&gt;Instead, we'll push our returned values to our successes array we created earlier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;promiseAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;successes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

    &lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;successes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're getting close!!&lt;/p&gt;

&lt;p&gt;Do you know what should happen next? Let's recap.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Our function is returning a promise.&lt;/li&gt;
&lt;li&gt;Our function is set to error if any of the passed in promises fail.&lt;/li&gt;
&lt;li&gt;And we're pushing our returned values to a &lt;code&gt;successes&lt;/code&gt; array.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So what's left? &lt;em&gt;Now&lt;/em&gt; we need to &lt;code&gt;resolve&lt;/code&gt; our promise, but there's a condition with it.&lt;/p&gt;

&lt;p&gt;We only want to resolve &lt;em&gt;if&lt;/em&gt; all passed in promises succeed.&lt;/p&gt;

&lt;p&gt;We can do that with an if statement by comparing the length of our successes array to the length of the promises passed in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;promiseAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;successes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

    &lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;successes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;successes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;successes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we're making promises we can keep!&lt;/p&gt;

&lt;p&gt;Congratulations! You've just rebuilt the functionality of &lt;code&gt;Promise.all()&lt;/code&gt; and that's the last thing on our list!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;It accepts an array of promises&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;It returns a promise&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;It returns an array of those promises' returned value&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;It errors if any of the passed in promises fail&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#running-our-promise"&gt;
  &lt;/a&gt;
  Running our Promise
&lt;/h2&gt;

&lt;p&gt;Finishing up, let's run our function and see how it works.&lt;/p&gt;

&lt;p&gt;Add these to the bottom of your index.js file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;promiseAll&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, in your terminal-- be sure you're in the right directory- and run &lt;code&gt;node index.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You should see the fruits of your labor console.logged before you!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus
&lt;/h3&gt;

&lt;p&gt;There's a small bug in this code. Can you see what it is?&lt;/p&gt;

&lt;p&gt;Given the nature of promises, we can assume that there is a good chance that the promises passed in won't return in the same order as when they're passed in.&lt;/p&gt;

&lt;p&gt;We're using &lt;code&gt;.push()&lt;/code&gt; to add our returned value to the successes array. This means that values will always be inserted to the end of the array, so if promise 2 returns before promise 1, it will actually show up in the first index of the successes array.&lt;/p&gt;

&lt;p&gt;You can actually see this in our example now.&lt;/p&gt;

&lt;p&gt;You would expect to see &lt;code&gt;[2, 1]&lt;/code&gt; since we passed the args in this order &lt;code&gt;(P2, P1)&lt;/code&gt;- but they're actually backwards! What we see in the terminal is &lt;code&gt;[1, 2]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is because P1 resolves immediately, whereas p2 returns a new promise and &lt;em&gt;then&lt;/em&gt; resolves.&lt;/p&gt;

&lt;p&gt;How would you fix this?&lt;/p&gt;

&lt;p&gt;Hint: You &lt;em&gt;could&lt;/em&gt; use the index of each passed in promise and then insert their returned value at that index of the successes array.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
    <item>
      <title>Win Mac Book Pro</title>
      <author>Amit</author>
      <pubDate>Mon, 07 Jun 2021 12:38:19 +0000</pubDate>
      <link>https://dev.to/amitxc/win-mac-book-pro-gec</link>
      <guid>https://dev.to/amitxc/win-mac-book-pro-gec</guid>
      <description>&lt;p&gt;Get Change to Win MacBook Pro&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developereconomics.net/?member_id=KgN1BPYe&amp;amp;lang=en&amp;amp;locale=en"&gt;https://developereconomics.net/?member_id=KgN1BPYe&amp;amp;lang=en&amp;amp;locale=en&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What’s your favourite programming language? Take the new #DeveloperNationSurvey to support your choice! You could win a #SamsungGalaxy S21, a #macbookpro, #GitKraken Pro license, #Amazon vouchers and more! #JavaScript #csharp #python #java #PHP #kotlin&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>kotlin</category>
      <category>flutter</category>
    </item>
    <item>
      <title>Destructuring Tweets - Episode 13 - Let's Construct</title>
      <author>Kai</author>
      <pubDate>Mon, 07 Jun 2021 12:30:10 +0000</pubDate>
      <link>https://dev.to/odddev/destructuring-tweets-episode-13-let-s-construct-9hb</link>
      <guid>https://dev.to/odddev/destructuring-tweets-episode-13-let-s-construct-9hb</guid>
      <description>&lt;p&gt;How's tricks? I welcome you to the marvelous world of JavaScript quizzes on Twitter! This very article is part of a series where we deep dive and demystify them. This week is a tough one, so this article is a little longer than usual. So let's jump right into the in-depth exploration of constructors in JavaScript!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#snippet-of-the-week"&gt;
  &lt;/a&gt;
  Snippet of the Week
&lt;/h1&gt;

&lt;p&gt;This week's &lt;a href="https://twitter.com/oliverjumpertz/status/1401137623725445122"&gt;snippet&lt;/a&gt; is from &lt;a href="https://twitter.com/oliverjumpertz"&gt;Oliver Jumpertz&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;constructor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;console.log("wth?")&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This time we have a complex one. However, as confusing as it might seem, it also makes a hell of a lot of fun to destruct.&lt;br&gt;
We start by creating a string. The value of it is pretty essential here, for it's the name of the property we access in the second line two times iteratively. We are accessing the &lt;code&gt;constructor&lt;/code&gt; property of the string. Then we (again) access the property &lt;code&gt;constructor&lt;/code&gt; of the resulting value.&lt;br&gt;
The resulting function gets called with an argument representing a call of a function, &lt;code&gt;console.log("WTH?")&lt;/code&gt;, itself. The return value of that call gets executed (&lt;code&gt;()&lt;/code&gt;) anonymously right after.&lt;br&gt;
So far, so confusing. But worry not, we clear things up right away.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#the-output"&gt;
  &lt;/a&gt;
  The Output
&lt;/h1&gt;

&lt;p&gt;The output here is probably something the least can guess on the fly. Presumably, the context of the riddle gave it away a bit, tho. It is a log to the console reading "wth?" Well, indeed: what the heck?!&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#the-analysis"&gt;
  &lt;/a&gt;
  The Analysis
&lt;/h1&gt;

&lt;p&gt;Let us move through this step by step. First, we get the more accessible things out of the way: accessing object properties by the given string value &lt;code&gt;constructor&lt;/code&gt; twice. Splitting this fraction up in an additional snippet helps to understand what's going on:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stringObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;stringObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foobar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;// Three times the same call:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringObject&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;stringObject&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;stringObject&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// foobar&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringObject&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// foobar&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// foobar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It shows how we can access specific object properties by a string, even if they are part of the string object reference itself. For our Twitter quiz meaning, we are accessing the &lt;code&gt;constructor&lt;/code&gt; property of the string. Then yet again, the property &lt;code&gt;constructor&lt;/code&gt; of the resulting value.&lt;br&gt;
Now comes the crucial part of understanding all of this — the property constructor. What does it hold? Why is it there? Well, it stores the function used to construct the object. Let me explain this concept by another snippet (I'm sorry):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FooBar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fooBarInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FooBar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fooBarInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// function FooBar()&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stringInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foobar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// OR new String('foobar')&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// function String()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we define a custom function used to construct an instance. This instance then holds a property &lt;code&gt;constructor&lt;/code&gt; with the value of the specified function. That's simply what JavaScript automatically does on instantiation.&lt;br&gt;
Further, you can see how this concept works with strings. You use syntactical sugar to avoid writing &lt;code&gt;new String('')&lt;/code&gt;, but the paradigm is the same: a function "String" exists. It accepts an argument, and when called to create an instance, the resulting object has a property &lt;code&gt;constructor&lt;/code&gt; holding the used function. And that's the key-secret here.&lt;br&gt;
Coming back to the original snippet, we create a string and access its property constructor. By now, we know that this property holds the function &lt;code&gt;String&lt;/code&gt;. So what happens if we access the constructor property of a function object? Well, yet again, it holds a function. This time the one used to construct, well, functions themselves. Which is indeed &lt;code&gt;function Function()&lt;/code&gt;.&lt;br&gt;
Let's examine this by another snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// function Function()&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;console.log("something")&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// something&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// function Function()&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stringInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foobar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// OR new String('foobar')&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// function String()&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// function Function()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Mention how a function declaration is just syntactical sugar around &lt;code&gt;new Function()&lt;/code&gt;. So, if the constructor property of a String object is a function, the constructor property of this function is the function used to construct functions, thus the function &lt;code&gt;Function()&lt;/code&gt;. 🤯😂&lt;br&gt;
Now that we have learned this, the rest is pretty straightforward. After accessing the constructor property the second time, we have a function constructing functions. So whatever we pass in as a string gets returned as a function instance. In our case, &lt;code&gt;console.log("wth?")&lt;/code&gt;. Since we do not store this return-value, we call it anonymously immediately right after via &lt;code&gt;()&lt;/code&gt;. And that's how after all of this, &lt;code&gt;console.log("wth?")&lt;/code&gt; gets executed and, well, logs the string &lt;code&gt;wth?&lt;/code&gt; to the console.&lt;br&gt;
Let's wrap it up in one last snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;constructor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stringConstructorFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringConstructorFunction&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// function Function()&lt;/span&gt;

&lt;span class="c1"&gt;// As simple as:&lt;/span&gt;
&lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;console.log("wth?")&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt; &lt;span class="c1"&gt;// wth?&lt;/span&gt;
&lt;span class="c1"&gt;// Or in a more common syntax:&lt;/span&gt;
&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wth?&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))();&lt;/span&gt; &lt;span class="c1"&gt;// wth?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#snippet-summary"&gt;
  &lt;/a&gt;
  Snippet Summary
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Trickery&lt;/strong&gt;: the constructor property&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Key Learning&lt;/strong&gt;: how constructor functions work in JS&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Further Reading&lt;/strong&gt;:

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics#bracket_notation"&gt;Object Property Bracket Notation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor"&gt;Constructor Property of Object Prototype&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function"&gt;Function Constructor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>snippet</category>
      <category>javascript</category>
      <category>destructuring</category>
      <category>constructor</category>
    </item>
    <item>
      <title>VueJs/Nuxt Components Library You should be using</title>
      <author>Jenuel Oras Ganawed</author>
      <pubDate>Mon, 07 Jun 2021 11:24:25 +0000</pubDate>
      <link>https://dev.to/brojenuel/vuejs-nuxt-components-library-you-should-be-using-1oae</link>
      <guid>https://dev.to/brojenuel/vuejs-nuxt-components-library-you-should-be-using-1oae</guid>
      <description>&lt;p&gt;As a developer that uses VueJs in most projects. I actually  been searching component library to make my life easier when developing the UI for my web projects.&lt;/p&gt;

&lt;p&gt;I will only list the components libraries that I like and I believe it has a very good and useful components.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;This list is not in order.&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-vuetify"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://vuetifyjs.com/en/getting-started/installation/"&gt;Vuetify&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Vuetify is one of the most popular component library for VueJs, and support for vue 3 is on the way. &lt;a href="https://vuetifyjs.com/en/introduction/roadmap/#v30-titan"&gt;Check it Here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This library provides probably most components that you needed to build a website, from landing pages to admin platform sites. But this library might might make your web page load slower (Checking it in web.dev or developer tool lighthouse).&lt;/p&gt;

&lt;p&gt;This uses the google material like designs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-buefy"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://buefy.org/"&gt;Buefy&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;My second favorite component library is Buefy, its a library made on top of &lt;a href="https://bulma.io/"&gt;bulma&lt;/a&gt; which is one popular css library that creates beautiful website.&lt;/p&gt;

&lt;p&gt;This also provides most of the components, what I like about buefy is its lite and fast.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-ant-design-vue"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://2x.antdv.com/components/overview/"&gt;Ant Design Vue&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Third is the andDesignVue, which is also a beautiful ui for your front end.&lt;/p&gt;

&lt;p&gt;The design is also beautiful, If your creating ecommerce website this might be a good choice or admin websites.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-iview"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://www.iviewui.com/docs/introduce-en"&gt;iView&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is also a beautiful component library, and its really awesome for creating e-commerce and admin pages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-vuesax"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://vuesax.com/"&gt;Vuesax&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;When you visit this component library its really beautiful, it was built by a designer so its really awesome.&lt;/p&gt;

&lt;p&gt;My problem with this one is that, its not being maintained in the moment and I don't know if they will continue maintaining this library.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-equal"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://quatrochan.github.io/Equal/"&gt;Equal&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;open-source Vue 3 components system for your next project based on TypeScript.&lt;/p&gt;

&lt;p&gt;This is the components libraries that I am using. Try and check them out. :)&lt;/p&gt;

</description>
      <category>vue</category>
    </item>
    <item>
      <title>Create a Next.js based PWA With Tailwind — create-next-pwa</title>
      <author>Saad Irfan</author>
      <pubDate>Mon, 07 Jun 2021 11:20:25 +0000</pubDate>
      <link>https://dev.to/msaaddev/create-a-next-js-based-pwa-with-tailwind-create-next-pwa-147j</link>
      <guid>https://dev.to/msaaddev/create-a-next-js-based-pwa-with-tailwind-create-next-pwa-147j</guid>
      <description>&lt;p&gt;So a couple of days back, I started learning about Progressive Web Apps (PWA) and how they make your web app a standalone desktop application and sort of like an android application. I was really intrigued by the whole concept. I knew about PWAs before but I have never experimented with them. And this time, I decided to do just that. &lt;/p&gt;

&lt;p&gt;So to indulge in my curiosity, I went ahead and created a Next.js app with create-next-app. And afterward, I started making all the changes in the code that were required for a PWA. In the end, I was successful but it took me some time since I was coming from a background where I had no experience with PWAs. &lt;/p&gt;

&lt;p&gt;Later I decided to use Tailwind for my project. I looked up its documentation and followed all the steps I needed to perform to set up Tailwind in my Next.js application. And here again, I spent some time figuring out what to do and what not to do.&lt;/p&gt;

&lt;p&gt;After going through all this, figuring stuff out, I realized that some kind of automation tool can come in real handy when doing all these configurations. And that is when I started building &lt;a href="https://github.com/msaaddev/create-next-pwa"&gt;create-next-pwa&lt;/a&gt;. 🏗&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-createnextpwa"&gt;
  &lt;/a&gt;
  ⚡️ CREATE-NEXT-PWA
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WPdHPqRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/331s3rxzrwgrifylvdko.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WPdHPqRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/331s3rxzrwgrifylvdko.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/create-next-pwa"&gt;create-next-pwa&lt;/a&gt; is an extremely lightweight, zero-configuration Node.js-based CLI tool that I have built to automate everything I have talked about above. It can set up your Next.js PWA with a single command:&lt;br&gt;
&lt;br&gt;
 &lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-next-pwa@latest &lt;span class="o"&gt;[&lt;/span&gt;app_name]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If you want to set up Tailwind for your PWA, you can easily do this with &lt;a href="https://github.com/msaaddev/create-next-pwa"&gt;create-next-pwa&lt;/a&gt; with a single --tailwind flag like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-next-pwa@latest &lt;span class="o"&gt;[&lt;/span&gt;app_name] &lt;span class="nt"&gt;--tailwind&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have also integrated Prettier as a dev dependency in the PWA. It means you can format your entire project when you are building your PWA by just running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run format
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Everything you needed to do before in order to set up a Next.js-based PWA with or without Tailwind can now be done with a single command. How awesome is that?! 🥂&lt;/p&gt;

&lt;p&gt;If you still want to set up Next.js-based PWA by yourself, I would then recommend reading this awesome &lt;a href="https://itnext.io/pwa-with-next-js-create-next-app-in-2020-%EF%B8%8F-9ee0e1a6313d"&gt;article&lt;/a&gt; by Eshwaren. And on top of this to integrate tailwind, you can follow the official &lt;a href="https://tailwindcss.com/docs/guides/nextjs"&gt;documentation&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  🙌🏻 WRAP UP
&lt;/h2&gt;

&lt;p&gt;If you folks want me to integrate something else like I have integrated Tailwind then open an issue in the &lt;a href="https://github.com/msaaddev/create-next-pwa"&gt;repository&lt;/a&gt; and I will get back to you. Also if you like this application, be sure to star it as well. 😉 &lt;/p&gt;

&lt;p&gt;Cheerios ✌🏻&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>pwa</category>
      <category>tailwindcss</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How To: Deploy Next.js Apps with Docker Containers (Efficiently!)</title>
      <author>Zack Sheppard</author>
      <pubDate>Mon, 07 Jun 2021 10:54:16 +0000</pubDate>
      <link>https://dev.to/zackdotcomputer/how-to-deploy-next-js-apps-with-docker-containers-efficiently-48e6</link>
      <guid>https://dev.to/zackdotcomputer/how-to-deploy-next-js-apps-with-docker-containers-efficiently-48e6</guid>
      <description>&lt;p&gt;So let's say you've written an awesome app in Next.js and you want to deploy it to a nifty containerized platform like &lt;a href="https://m.do.co/c/44917aecbb0c"&gt;Digital Ocean&lt;/a&gt; or &lt;a href="https://fly.io"&gt;Fly.io&lt;/a&gt;. But let's say that you, like me at the start of last week, have never containerized a Node app before and need a crash course in how to do that? &lt;/p&gt;

&lt;p&gt;Here's what I learned going through this process to deploy &lt;a href="https://tweetsweep.app"&gt;Tweet Sweep&lt;/a&gt; to fly.io - both the naive first steps for making a container work at all and then also some &lt;strong&gt;necessary&lt;/strong&gt; optimizations for it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#basics"&gt;Starter Instructions - How to Dockerfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#optimized"&gt;Optimize It - Make it Production Ready&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#final-dockerfile"&gt;Just give me a Dockerfile I can blindly copy paste&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#follow-along"&gt;
  &lt;/a&gt;
  Follow Along
&lt;/h2&gt;

&lt;p&gt;If you want to follow along, you will need &lt;a href="https://www.docker.com/products/docker-desktop"&gt;Docker Desktop&lt;/a&gt; and  &lt;a href="https://yarnpkg.com"&gt;Yarn&lt;/a&gt;  installed. To keep things replicable, I'm using the &lt;a href="https://github.com/vercel/next.js/tree/canary/examples/blog-starter-typescript"&gt;Next.js Blog-Starter-Typescript example&lt;/a&gt; in these instructions. You can set that up locally with this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn create next-app &lt;span class="nt"&gt;--example&lt;/span&gt; blog-starter-typescript blog-starter-typescript-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a side note, the tips and tricks in here are generic for all containerized Node apps, but the Dockerfiles themselves will only work as an untweaked copy-paste if you're using Next.js. So, if you're using a different platform you might have to tweak which files get retained in your final container.&lt;/p&gt;

&lt;p&gt;&lt;a id="basics"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-basics-just-make-it-work"&gt;
  &lt;/a&gt;
  The Basics - Just make it work
&lt;/h2&gt;

&lt;p&gt;So let's start with the 101 - what is Docker and why you want to use it. At its core, Docker Containers are tiny virtual computers serialized to disk in a standardized format. To make them, you need three ingredients:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A starter image to build upon - usually this is a full operating system image with some pre-installed software from &lt;a href="https://hub.docker.com"&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;New files to add - in this case the code for your app.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The steps to combine those first two components. This is what is stored in a &lt;code&gt;Dockerfile&lt;/code&gt; and a &lt;code&gt;.dockerignore&lt;/code&gt; file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Using these three components you can wrap up your software into a standardized container that can be run on any machine that has the Docker software installed. (Note that this has a big "in theory" caveat attached - if you are doing complex, advanced operations then you might run into the limits of Docker's capabilities. However, for a straight-forward Next.js app like the one I'm using here, it works very well.)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-naive-dockerfile"&gt;
  &lt;/a&gt;
  The Naive Dockerfile
&lt;/h3&gt;

&lt;p&gt;So what do these instructions look like for our Next.js application?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# Naively Simple Node Dockerfile&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:14.17-alpine&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /home/app/ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;chown&lt;/span&gt; &lt;span class="nt"&gt;-R&lt;/span&gt; node:node /home/app
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /home/app&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --chown=node:node . .&lt;/span&gt;

&lt;span class="k"&gt;USER&lt;/span&gt;&lt;span class="s"&gt; node&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--frozen-lockfile&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;yarn build

&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 3000&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [ "yarn", "start" ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Put these in a file named &lt;code&gt;Dockerfile&lt;/code&gt; in the root folder of your app.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#understanding-the-dockerfile"&gt;
  &lt;/a&gt;
  Understanding the Dockerfile
&lt;/h4&gt;

&lt;p&gt;So what does this do? Well, Docker will step through these instructions one by one and do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:14.17-alpine&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This tells Docker that your app is building on &lt;a href="https://hub.docker.com/_/node"&gt;a container&lt;/a&gt; that has Alpine Linux and Node 14.17 (with &lt;code&gt;npm&lt;/code&gt; and &lt;code&gt;yarn&lt;/code&gt;) preinstalled.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /home/app/ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;chown&lt;/span&gt; &lt;span class="nt"&gt;-R&lt;/span&gt; node:node /home/app
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /home/app&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --chown=node:node . .&lt;/span&gt;

&lt;span class="k"&gt;USER&lt;/span&gt;&lt;span class="s"&gt; node&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are our first real instructions - we make a directory called /home/app, give ownership of it to a user named &lt;code&gt;node&lt;/code&gt;, make it the "working directory" for our container (where Docker expects our main program files to live), and copy the files in the directory where we ran &lt;code&gt;docker build&lt;/code&gt; into the container. Remember the container is basically a virtual little computer, so we have to copy our files in there to access them!&lt;/p&gt;

&lt;p&gt;We then become that &lt;code&gt;node&lt;/code&gt; user. By default Docker runs as &lt;code&gt;root&lt;/code&gt; on the contained machine. But that is pretty dangerous since it gives root privileges to whatever code we run, meaning a little security flaw in Node or one of our NPM dependencies could potentially give access to our whole server. So, to avoid that, we switch to a non-root user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--frozen-lockfile&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;yarn build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We install our NPM dependencies and build our Next.js server in production mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 3000&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [ "yarn", "start" ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally these two commands give Docker instructions it will use when it tries to run this software. The first tells Docker that this container expects connections on port 3000, so it should expose that leaving the container (we'll wire it up in a moment with the &lt;code&gt;-p&lt;/code&gt; flag). The second tells Docker that the command to run to start this container is &lt;code&gt;yarn start&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#build-and-run"&gt;
  &lt;/a&gt;
  Build and Run!
&lt;/h4&gt;

&lt;p&gt;Now it's time to execute those steps and make your container. Run the following command in a terminal in your project directory (you can replace &lt;code&gt;some-name&lt;/code&gt; with a personal tag like &lt;code&gt;zacks-blog-1.0&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker build &lt;span class="nt"&gt;-t&lt;/span&gt; some-name &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your built image, containing the virtual machine ready to run your web app, will now show up locally if you check &lt;code&gt;docker image ls&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker image ls
REPOSITORY    TAG       IMAGE ID       CREATED          SIZE
some-name     latest    4c73a8c8d35c   2 minutes ago    622MB
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's start it up:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-p&lt;/span&gt; 3000:3000 some-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(You can add the &lt;code&gt;-d&lt;/code&gt; flag after &lt;code&gt;run&lt;/code&gt; to run the server in the background instead.)&lt;/p&gt;

&lt;p&gt;You'll see logs same as if you'd run &lt;code&gt;yarn start&lt;/code&gt; normally. And, due to the &lt;code&gt;-p 3000:3000&lt;/code&gt; flag, your container will now be connected to your local port 3000, so if you visit &lt;code&gt;http://localhost:3000&lt;/code&gt; you'll see your blog template:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---GE7MgdR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622987457269/SykIBi-7S.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---GE7MgdR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622987457269/SykIBi-7S.jpeg" alt="It worked"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id="optimized"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#optimize-it-getting-this-production-ready"&gt;
  &lt;/a&gt;
  Optimize it - Getting this production ready
&lt;/h2&gt;

&lt;p&gt;Great! You have now containerized your app. But before you go deploying it to your favorite hosting platform, there are a few things we need to do.&lt;/p&gt;

&lt;p&gt;You might have noticed above that the size of our built image is over 600MB - that's over 4x the size of our project on disk outside of the container! This problem only compounds as your apps get more complex - the built versions of the &lt;a href="https://use.tweetsweep.app"&gt;Tweet Sweep Frontend&lt;/a&gt; container were more almost 5GB at this point! That's a lot of data to upload to your servers!&lt;/p&gt;

&lt;p&gt;Almost all of this size issue is related to one particular quirk of Docker - almost every line in the &lt;code&gt;Dockerfile&lt;/code&gt; creates a new "layer" in your final Docker image. Each layer captures the changes made to the virtual machine after that line runs. This is a powerful optimization tool because it allows Docker to reuse work it's already done - for example if you have some setup that never changes like our &lt;code&gt;mkdir&lt;/code&gt; line, Docker can compute that layer once and reuse it for all subsequent builds. However, it can also lead to image size issues (since lots of unneeded files might wind up being stored in those layers) and security issues (since you might capture secret values in those layers that could be siphoned off by someone who gets access to your final image).&lt;/p&gt;

&lt;p&gt;You can see the layers and their respective sizes using this command (credit to  &lt;a href="https://medium.com/trendyol-tech/how-we-reduce-node-docker-image-size-in-3-steps-ff2762b51d5a"&gt;this post&lt;/a&gt; where I got it from):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker &lt;span class="nb"&gt;history&lt;/span&gt; &lt;span class="nt"&gt;--human&lt;/span&gt; &lt;span class="nt"&gt;--format&lt;/span&gt; &lt;span class="s2"&gt;"{{.CreatedBy}}: {{.Size}}"&lt;/span&gt; some-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"yarn"&lt;/span&gt; &lt;span class="s2"&gt;"start"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: 0B
EXPOSE map[3000/tcp:&lt;span class="o"&gt;{}]&lt;/span&gt;: 0B
RUN /bin/sh &lt;span class="nt"&gt;-c&lt;/span&gt; yarn build &lt;span class="c"&gt;# buildkit: 10.6MB&lt;/span&gt;
RUN /bin/sh &lt;span class="nt"&gt;-c&lt;/span&gt; yarn &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--frozen-lockfil&lt;/span&gt;…: 340MB
USER node: 0B
COPY &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="c"&gt;# buildkit: 155MB&lt;/span&gt;
WORKDIR /home/app: 0B
RUN /bin/sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /home/app/ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;chown&lt;/span&gt; …: 0B
/bin/sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="c"&gt;#(nop)  CMD ["node"]: 0B&lt;/span&gt;
/bin/sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="c"&gt;#(nop)  ENTRYPOINT ["docker-entry…: 0B&lt;/span&gt;
/bin/sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="c"&gt;#(nop) COPY file:238737301d473041…: 116B&lt;/span&gt;
/bin/sh &lt;span class="nt"&gt;-c&lt;/span&gt; apk add &lt;span class="nt"&gt;--no-cache&lt;/span&gt; &lt;span class="nt"&gt;--virtual&lt;/span&gt; .bui…: 7.62MB
/bin/sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="c"&gt;#(nop)  ENV YARN_VERSION=1.22.5: 0B&lt;/span&gt;
/bin/sh &lt;span class="nt"&gt;-c&lt;/span&gt; addgroup &lt;span class="nt"&gt;-g&lt;/span&gt; 1000 node     &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; addu…: 104MB
/bin/sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="c"&gt;#(nop)  ENV NODE_VERSION=14.17.0: 0B&lt;/span&gt;
/bin/sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="c"&gt;#(nop)  CMD ["/bin/sh"]: 0B&lt;/span&gt;
/bin/sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="c"&gt;#(nop) ADD file:282b9d56236cae296…: 5.62MB&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From this we can see that about 117MB of the image size happen before our first command - this the base size of the Alpine-Node image we're building on so there isn't much we can do about that. But let's focus on the two main optimizations we can do &lt;em&gt;after&lt;/em&gt; that point:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#easy-ignore-stuff"&gt;
  &lt;/a&gt;
  Easy: Ignore Stuff
&lt;/h3&gt;

&lt;p&gt;In our naive Dockerfile we run the command &lt;code&gt;COPY --chown=node:node . .&lt;/code&gt;. This copies &lt;strong&gt;all&lt;/strong&gt; the files in our current directory into the Docker container. This is almost always &lt;strong&gt;not&lt;/strong&gt; what you want! For example, you might have an .env file with secrets in it that will wind up in plain-text in the final Docker image. (You should use the env secrets feature on your hosting platform instead.)&lt;/p&gt;

&lt;p&gt;In this app's case this unnecessarily copies the &lt;code&gt;node_modules&lt;/code&gt; folder (since we then yarn install it again) and &lt;code&gt;.next&lt;/code&gt; folder (since we rebuild the app inside the container). We can fix this with a &lt;code&gt;.dockerignore&lt;/code&gt; file. This file, in the root of our project, tells Docker to skip certain files and folders when running &lt;code&gt;COPY&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# .dockerignore file
.DS_Store
.next
node_modules
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#advanced-get-your-container-a-container"&gt;
  &lt;/a&gt;
  Advanced: Get your Container a Container
&lt;/h3&gt;

&lt;p&gt;Now the galaxy brain move here is to use containers for our container. We're going to create two that are used &lt;em&gt;only&lt;/em&gt; to build the application separately from the one that's uploaded to the server. This saves us from having to upload the layers containing all the files used or created en route to that destination. Here's the Dockerfile for that (with comments explaining along the way what each block does):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;(Edit: After I posted this, Vercel got in touch to point out they have &lt;a href="https://nextjs.org/docs/deployment#docker-image"&gt;their own post&lt;/a&gt; with a sample Dockerfile. I've now incorporated some tips from theirs into this one.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a id="final-dockerfile"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# Double-container Dockerfile for separated build process.&lt;/span&gt;
&lt;span class="c"&gt;# If you're just copy-pasting this, don't forget a .dockerignore!&lt;/span&gt;

&lt;span class="c"&gt;# We're starting with the same base image, but we're declaring&lt;/span&gt;
&lt;span class="c"&gt;# that this block outputs an image called DEPS that we&lt;/span&gt;
&lt;span class="c"&gt;# won't be deploying - it just installs our Yarn deps&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:14-alpine AS deps&lt;/span&gt;

&lt;span class="c"&gt;# If you need libc for any of your deps, uncomment this line:&lt;/span&gt;
&lt;span class="c"&gt;# RUN apk add --no-cache libc6-compat&lt;/span&gt;

&lt;span class="c"&gt;# Copy over ONLY the package.json and yarn.lock&lt;/span&gt;
&lt;span class="c"&gt;# so that this `yarn install` layer is only recomputed&lt;/span&gt;
&lt;span class="c"&gt;# if these dependency files change. Nice speed hack!&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; package.json yarn.lock ./&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--frozen-lockfile&lt;/span&gt;

&lt;span class="c"&gt;# END DEPS IMAGE&lt;/span&gt;

&lt;span class="c"&gt;# Now we make a container to handle our Build&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:14-alpine AS BUILD_IMAGE&lt;/span&gt;

&lt;span class="c"&gt;# Set up our work directory again&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="c"&gt;# Bring over the deps we installed and now also&lt;/span&gt;
&lt;span class="c"&gt;# the rest of the source code to build the Next&lt;/span&gt;
&lt;span class="c"&gt;# server for production&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=deps /app/node_modules ./node_modules&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;yarn build

&lt;span class="c"&gt;# Remove all the development dependencies since we don't&lt;/span&gt;
&lt;span class="c"&gt;# need them to run the actual server.&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; node_modules
&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--production&lt;/span&gt; &lt;span class="nt"&gt;--frozen-lockfile&lt;/span&gt; &lt;span class="nt"&gt;--ignore-scripts&lt;/span&gt; &lt;span class="nt"&gt;--prefer-offline&lt;/span&gt;

&lt;span class="c"&gt;# END OF BUILD_IMAGE&lt;/span&gt;

&lt;span class="c"&gt;# This starts our application's run image - the final output of build.&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:14-alpine&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; NODE_ENV production&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;addgroup &lt;span class="nt"&gt;-g&lt;/span&gt; 1001 &lt;span class="nt"&gt;-S&lt;/span&gt; nodejs
&lt;span class="k"&gt;RUN &lt;/span&gt;adduser &lt;span class="nt"&gt;-S&lt;/span&gt; nextjs &lt;span class="nt"&gt;-u&lt;/span&gt; 1001

&lt;span class="c"&gt;# Pull the built files out of BUILD_IMAGE - we need:&lt;/span&gt;
&lt;span class="c"&gt;# 1. the package.json and yarn.lock&lt;/span&gt;
&lt;span class="c"&gt;# 2. the Next build output and static files&lt;/span&gt;
&lt;span class="c"&gt;# 3. the node_modules.&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=BUILD_IMAGE --chown=nextjs:nodejs /app/package.json /app/yarn.lock ./&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=BUILD_IMAGE --chown=nextjs:nodejs /app/node_modules ./node_modules&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=BUILD_IMAGE --chown=nextjs:nodejs /app/public ./public&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=BUILD_IMAGE --chown=nextjs:nodejs /app/.next ./.next&lt;/span&gt;

&lt;span class="c"&gt;# 4. OPTIONALLY the next.config.js, if your app has one&lt;/span&gt;
&lt;span class="c"&gt;# COPY --from=BUILD_IMAGE --chown=nextjs:nodejs  ./&lt;/span&gt;

&lt;span class="k"&gt;USER&lt;/span&gt;&lt;span class="s"&gt; nextjs&lt;/span&gt;

&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 3000&lt;/span&gt;

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [ "yarn", "start" ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-results"&gt;
  &lt;/a&gt;
  The Results
&lt;/h3&gt;

&lt;p&gt;Now if you build that (again with &lt;code&gt;docker build -t some-name-optimized .&lt;/code&gt;) and run it (&lt;code&gt;docker run -p 3000:3000 some-name-optimized&lt;/code&gt;) you'll be able to connect to it on localhost:3000 same as before. &lt;/p&gt;

&lt;p&gt;What has changed, then? Well, if we list our images:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker image &lt;span class="nb"&gt;ls                      
&lt;/span&gt;REPOSITORY           TAG      IMAGE ID       CREATED       SIZE
some-name-optimized  latest   518ed80eae02   1 hour ago    243MB
some-name            latest   4c73a8c8d35c   2 hours ago   622MB
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see we've reduce our final build image's size by almost a factor of 3! That's a &lt;strong&gt;lot&lt;/strong&gt; less data we'll need to upload to our server with every deploy! I saw similar results when I employed this strategy on Tweet Sweep's containers, saving me &lt;em&gt;gigabytes&lt;/em&gt; of upload bandwidth with every deploy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-actual-deploy"&gt;
  &lt;/a&gt;
  The Actual Deploy
&lt;/h2&gt;

&lt;p&gt;Ok, so now that we have our app containerizing successfully, how do we actually deploy? For this, I've been using &lt;a href="https://fly.io"&gt;fly.io&lt;/a&gt; because their support for Docker is strong and their service has a generous free tier. But if you'd rather use &lt;a href="https://devcenter.heroku.com/categories/deploying-with-docker"&gt;Heroku&lt;/a&gt; or  &lt;a href="https://m.do.co/c/44917aecbb0c"&gt;Digital Ocean&lt;/a&gt; they have strong support for Docker as well.&lt;/p&gt;

&lt;p&gt;With Fly, I'd recommend just following their &lt;a href="https://fly.io/docs/app-guides/run-a-global-image-service/#deploying-docker-images-to-fly"&gt;step by step instructions&lt;/a&gt; for deploying Docker. TLDR; you have to create an app on your account and a corresponding &lt;code&gt;fly.toml&lt;/code&gt; file locally, then the command &lt;code&gt;flyctl deploy&lt;/code&gt; will automatically run your Dockerfile build, upload all the resulting layers to their service (this is why it's important to optimize their size!), and then start them on a VM server. After that, deploys really are as easy as running &lt;code&gt;flyctl deploy&lt;/code&gt; again thanks to the compartmentalization of containers!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-optimizations"&gt;
  &lt;/a&gt;
  More Optimizations?
&lt;/h2&gt;

&lt;p&gt;I'm still learning Docker so these optimizations are just the first I've come across. If you've played around with it and know some more ins-and-outs one should include while containerizing a NodeJS app, please do let me know down in the comments.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>webdev</category>
      <category>node</category>
      <category>docker</category>
    </item>
    <item>
      <title>CRUD using Firebase In React </title>
      <author>Simran Birla</author>
      <pubDate>Mon, 07 Jun 2021 10:45:18 +0000</pubDate>
      <link>https://dev.to/simranbirla/crud-using-firebase-in-react-4imm</link>
      <guid>https://dev.to/simranbirla/crud-using-firebase-in-react-4imm</guid>
      <description>&lt;p&gt;This post will show you how to perform CRUD operations in react using a DaaS Firebase. You can perform a lot of functions once you know how to use firebase with React.&lt;/p&gt;

&lt;p&gt;While making projects in FrontEnd, I always had the questions where should I keep the data and make the project in a way that a lot of people can see the data shared by other people.So then I thought of using firebase with React, which made the project complex in functionality but not in developing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-firebase"&gt;
  &lt;/a&gt;
  Setting up Firebase:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Created a firebase account and create a web project in it.&lt;/li&gt;
&lt;li&gt;Install firebase tools: 
&lt;code&gt;npm install -g firebase-tools&lt;/code&gt;
&lt;code&gt;npm install firebase&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Copy your config data from firebase
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firebaseApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initializeApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;******************d4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;authDomain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;***********.firebaseapp.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;databaseURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*********.firebaseio.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;projectId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*******************&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;storageBucket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;************.appspot.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;messagingSenderId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;********************&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;appId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*************:web:***********4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;measurementId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;G-************&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;In your React app create a file firebase.js in src directory &lt;/li&gt;
&lt;li&gt;Add the below code .
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firebase&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firebaseApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initializeApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AIzaSyBI_AQ3C2mXWKG1i-Amtzn97zfGVSDzWd4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;authDomain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pin-clone-39acf.firebaseapp.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;databaseURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://pin-clone-39acf.firebaseio.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;projectId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pin-clone-39acf&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;storageBucket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pin-clone-39acf.appspot.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;messagingSenderId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;884413487053&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;appId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1:884413487053:web:5a72dde51157b87b2ed684&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;measurementId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;G-VVCRZNMW6B&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firestore&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GoogleAuthProvider&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will initialize firebase with your configuration.&lt;br&gt;
&lt;strong&gt;firestore()&lt;/strong&gt;: Then we create the firestore() which is the database we will use &lt;br&gt;
&lt;strong&gt;auth()&lt;/strong&gt;: is used to initialize the authorization in firebase&lt;br&gt;
&lt;strong&gt;provider()&lt;/strong&gt;: This is used to initialize the google authorization in the project, you can also use facebook, twitter authorization.&lt;br&gt;
&lt;em&gt;You have to enable authorization through firebase console&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;storage()&lt;/strong&gt;: Used to store information from your project to firebase databse&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#authorization"&gt;
  &lt;/a&gt;
  Authorization:
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#for-sign-in-"&gt;
  &lt;/a&gt;
  For sign in :
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signInWithPopup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SIGN IN&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#for-sign-out"&gt;
  &lt;/a&gt;
  For sign out:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signOut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#create"&gt;
  &lt;/a&gt;
  Create:
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#storage"&gt;
  &lt;/a&gt;
  Storage
&lt;/h3&gt;

&lt;p&gt;So I used the storage for uploading an image and then acquiring the image link.We can do this with any file type.&lt;/p&gt;

&lt;p&gt;You have to create a storage using firebase console &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to storage &lt;/li&gt;
&lt;li&gt;Create a new folder &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WjCujiIb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/za6enamclb9uznjbrfu0.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WjCujiIb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/za6enamclb9uznjbrfu0.JPG" alt="firebase storage"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;upload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/&amp;lt;name of folder&amp;gt;/&amp;lt;name of file&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code then adds the file into firebase storage&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To get the download URL&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;state_changed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;snap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;progress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;snap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bytesTransferred&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;snap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;totalBytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;storage&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;folder&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDownloadURL&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the state is changed ("state change")( whether the file has been uploaded successfully or not), The on() functions takes 2 functions.&lt;br&gt;
The first tells us about the file uploading stage and the second one is used when file is uploaded.&lt;br&gt;
If you want to see how much percent of upload is completed  ,&lt;code&gt;progress&lt;/code&gt; variable tells us that.&lt;/p&gt;

&lt;p&gt;Once uploaded the second callback function, takes the storage variable defined in firebase file, maps down the path to get the url of the file &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#database"&gt;
  &lt;/a&gt;
  Database:
&lt;/h3&gt;

&lt;p&gt;This is done when you want to add a document in firebase collection.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../firebase&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firebase&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;feed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firestore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FieldValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serverTimestamp&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="na"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;helloworld&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;You must remember to have the correct path in collection().&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When you want to add a field in document then you can use the set method but remember you have to implement your whole document structure as it will overwrite everything.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Here you should know the id of the document.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;feed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;heelo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;byeworld&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;google.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#update"&gt;
  &lt;/a&gt;
  Update:
&lt;/h2&gt;

&lt;p&gt;When you want to change a field without overwriting the entire structure you use update()&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;feed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will update the value of name and every other field will remain the same.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#read"&gt;
  &lt;/a&gt;
  Read:
&lt;/h2&gt;

&lt;p&gt;To read data, you could use &lt;br&gt;
1.get()&lt;br&gt;
2.snapshot()&lt;/p&gt;

&lt;p&gt;1.get():&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;feed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Document data:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// info.data() will be undefined in this case&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;No such document!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2.snapshot():&lt;br&gt;
The difference between snapshot() and get() is that, get() gives the data once whereas snapshot gets the data as soon as new data is added so it is recommended that you use snapshot() with useEffect()&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`boards/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/photos`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;onSnapshot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;snap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;setBoard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;snap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;docs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;photos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
         &lt;span class="p"&gt;}))&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#delete"&gt;
  &lt;/a&gt;
  Delete:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`feeds`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Deleted!!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;})&lt;/span&gt;
   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see by using firebase as a database for your frontend project can help manage data and give your project an edge as you can implement functionalities such as authentication with ease.&lt;/p&gt;

</description>
      <category>react</category>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>firebase</category>
    </item>
  </channel>
</rss>
