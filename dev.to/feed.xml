<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Best Coding app for beginners [Free Certificate]</title>
      <author>Jonny</author>
      <pubDate>Fri, 29 Oct 2021 10:05:14 +0000</pubDate>
      <link>https://dev.to/jnc/best-coding-app-for-beginners-free-certificate-5a1m</link>
      <guid>https://dev.to/jnc/best-coding-app-for-beginners-free-certificate-5a1m</guid>
      <description>&lt;p&gt;Programming skills open doors to dozens of lucrative tech careers. And there’s never been a better or easier time to learn. Just like learning any other language, coding requires regular practice to master. But it’s not always easy for people to find time to practice in front of a computer. That’s why coding apps are so helpful. In this article, we’ll cover the best coding apps on iOS and Android for those who want to learn to code. &lt;/p&gt;
&lt;br&gt;Read More : &lt;b&gt;&lt;a href="https://www.codelivly.com/best-coding-apps-for-beginners/"&gt;Best Coding App For Beginners&lt;/a&gt;&lt;/b&gt;

</description>
    </item>
    <item>
      <title>What is Structured Data?</title>
      <author>James Turner</author>
      <pubDate>Fri, 29 Oct 2021 10:03:47 +0000</pubDate>
      <link>https://dev.to/brandvantage/what-is-structured-data-86n</link>
      <guid>https://dev.to/brandvantage/what-is-structured-data-86n</guid>
      <description>&lt;p&gt;Structured data is data that is structured - that is perhaps the most succinct summary of it without telling you anything you didn't already expect. To take away something more than that, it can be useful to break down what structured data can look like.&lt;/p&gt;

&lt;p&gt;When we say a set of data is structured, it has properties and values that hold a specific meaning. One value might represent some amount of money, another value might represent a date, and a third might be an address. When labelled appropriately, these values can then represent a greater context - perhaps they represent details on an invoice or payslip.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"amount"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;20.00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"datePaid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2017-08-12T12:56:00"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"address"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"123 Example Street, Some Suburb, Some City"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This data could be in a database, a spreadsheet, a JSON blob - it doesn't matter. If there is data and a defined &lt;a href="https://en.wikipedia.org/wiki/Data_model"&gt;data model&lt;/a&gt;, that is structured data. When data is structured well, it makes it easier to query, process and generally use the data.&lt;/p&gt;

&lt;p&gt;In contrast, there is also unstructured data. The value for our address property in the example above is itself unstructured data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;123 Example Street, Some Suburb, Some City
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That single value has multiple internal components we would need to parse out depending what we are wanting to do. If we wanted to group all the records on the same street, we'd need to carefully parse the street, suburb and city out of our data. Different countries can have different formats and rules for addresses it is hard to process. Making the wrong assumption when parsing the data can lead to irregularities in the data, causing problems for whatever we wanted to consume that data. For instance, depending where you are in the world, can you assume &lt;a href="https://www.youtube.com/watch?v=DSG-zxGRkJw"&gt;all streets even have names&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;While structured data can definitely be easier to work with, it doesn't make unstructured data useless. Instead, think of unstructured data as untapped potential - useful data exists but is difficult to get to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#structured-data-and-web-pages"&gt;
  &lt;/a&gt;
  Structured Data and Web Pages
&lt;/h2&gt;

&lt;p&gt;Web pages are an interesting example of both structured and unstructured data. There are specific elements one could look at for certain information like the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; element or other semantic elements like &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt;. The problem though is that these elements are more like our "address" example earlier - they often contain more than just the strict data we are looking for. A title might have a prefix or suffix of the website's name. An article or section might have many other layers of &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; or any other elements to help form the site's structure. To top it off, the HTML structure can vary wildly from site to site. If you were wanting to extract data from multiple websites, it can get very hard very fast.&lt;/p&gt;

&lt;p&gt;That said, there are a number of ways to embed structured data into web pages. A web page could use &lt;a href="https://brandvantage.co/blog/what-is-microdata"&gt;Microdata&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/RDFa"&gt;RDFa&lt;/a&gt;, &lt;a href="https://json-ld.org/"&gt;JSON-LD&lt;/a&gt; or &lt;a href="https://ogp.me/"&gt;Open Graph&lt;/a&gt; to express structured data. More than that though, a web page can use multiple of these at the same time. Open Graph is commonly used as a method of defining details for a link preview while the others might express more complex data like product pricing or reviews.&lt;/p&gt;

&lt;p&gt;Having standard formats like Microdata or JSON-LD are a good start but only represent the format of the data - we need a common vocabulary so we can understand the data those formats encode. One common vocabulary used is called &lt;a href="https://schema.org"&gt;Schema.org&lt;/a&gt; and provides over 700 types including types to describe people, places, products, recipes, reviews, vehicles, movies and medical devices. Using Schema.org for structured data on a website can &lt;a href="https://developers.google.com/search/docs/advanced/structured-data/intro-structured-data"&gt;help search engines provide richer experiences in the search results&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Structured data, through standardising expected properties and value formats, makes the sharing and processing of data easier. Web pages in particular benefit from encoding structured data in their mark-up where it can be used by search engines and &lt;a href="https://brandvantage.co/services/web-page-api"&gt;other tools&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>datascience</category>
    </item>
    <item>
      <title>CSS + frontend Resources you must take a look at</title>
      <author>Posandu </author>
      <pubDate>Fri, 29 Oct 2021 09:41:37 +0000</pubDate>
      <link>https://dev.to/posandu/css-frontend-resources-you-must-take-a-look-at-14ph</link>
      <guid>https://dev.to/posandu/css-frontend-resources-you-must-take-a-look-at-14ph</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post was first published on &lt;a href="https://www.tronic247.com/css-frontend-resources-you-must-take-a-look-at/"&gt;Tronic247&lt;/a&gt;. If you can read it there, I would be really happy :D&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this article, I will tell you some resources you should bookmark as a CSS or Frontend developer. So, let's start!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-gradient"&gt;
  &lt;/a&gt;
  CSS Gradient
&lt;/h2&gt;

&lt;p&gt;This is a site where there is a GUI where you can create gradients and get the CSS code for that. You can see a preview down.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--thpBYa81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76736580/139233635-6c32b411-a36c-4163-b20f-764dd88f0af4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--thpBYa81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76736580/139233635-6c32b411-a36c-4163-b20f-764dd88f0af4.png" alt="" width="880" height="607"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the link for that site - &lt;a href="https://cssgradient.io/"&gt;https://cssgradient.io/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clippy"&gt;
  &lt;/a&gt;
  Clippy
&lt;/h2&gt;

&lt;p&gt;This tool is useful for making &lt;code&gt;clip paths&lt;/code&gt; fast. You can see the tool by clicking this link &lt;a href="https://bennettfeely.com/clippy/"&gt;https://bennettfeely.com/clippy/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B74ID3mD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76736580/139234329-6b94d563-965d-480c-a9cd-73a8dc7456cc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B74ID3mD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76736580/139234329-6b94d563-965d-480c-a9cd-73a8dc7456cc.png" alt="" width="880" height="681"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#neumorphismio"&gt;
  &lt;/a&gt;
  Neumorphism.io
&lt;/h2&gt;

&lt;p&gt;In this tool, you can make 3D and realistic box shadows. without sweating. &lt;a href="https://neumorphism.io/"&gt;https://neumorphism.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--elMfEA7B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76736580/139234924-733b4b19-c7d7-43da-bcfe-c5bb73668d3e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--elMfEA7B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76736580/139234924-733b4b19-c7d7-43da-bcfe-c5bb73668d3e.png" alt="" width="880" height="514"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blobmaker-app"&gt;
  &lt;/a&gt;
  Blobmaker App
&lt;/h2&gt;

&lt;p&gt;And this is not Just CSS, It's SVG. You can make some cool SVG blobs using this website. &lt;a href="https://www.blobmaker.app/"&gt;https://www.blobmaker.app/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6hgOmoeV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76736580/139235128-adf0e274-1f1a-44eb-8682-1c49a85ae851.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6hgOmoeV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76736580/139235128-adf0e274-1f1a-44eb-8682-1c49a85ae851.png" alt="" width="880" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#haikei"&gt;
  &lt;/a&gt;
  Haikei
&lt;/h2&gt;

&lt;p&gt;This tool was created by the creators of the Blobmaker App. You can generate blobs, waves, gradients, etc.&lt;br&gt;
&lt;a href="https://app.haikei.app/"&gt;https://app.haikei.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6LuF8sS0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76736580/139235677-5db6f5f9-b463-477b-9d68-b81845a0e4e8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6LuF8sS0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76736580/139235677-5db6f5f9-b463-477b-9d68-b81845a0e4e8.png" alt="" width="880" height="604"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#coolors"&gt;
  &lt;/a&gt;
  Coolors
&lt;/h2&gt;

&lt;p&gt;This tool helps you to create beautiful and unique colour palettes, you can create a palette and copy the CSS hex code or an array of the colour palette.&lt;br&gt;
&lt;a href="https://coolors.co/"&gt;https://coolors.co/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bsNXInVw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76736580/139236606-e1805254-9056-47ac-a2de-d2e6de4d690f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bsNXInVw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76736580/139236606-e1805254-9056-47ac-a2de-d2e6de4d690f.png" alt="" width="880" height="599"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fancyborderradius-generator"&gt;
  &lt;/a&gt;
  Fancy-Border-Radius generator
&lt;/h2&gt;

&lt;p&gt;You can make the CSS &lt;code&gt;border-radius&lt;/code&gt; with this tool.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lVxz_FFr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76736580/139237432-99420a9e-662f-4f95-b87c-5214a3719140.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lVxz_FFr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76736580/139237432-99420a9e-662f-4f95-b87c-5214a3719140.png" alt="" width="761" height="804"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dribbble"&gt;
  &lt;/a&gt;
  Dribbble
&lt;/h2&gt;

&lt;p&gt;This is not code, but some cool designs that you can be inspired by.&lt;br&gt;
&lt;a href="https://dribbble.com/"&gt;https://dribbble.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cg8DpNbZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76736580/139237860-68bb7807-2d95-4b2f-9af3-dd9908e6cd03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cg8DpNbZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76736580/139237860-68bb7807-2d95-4b2f-9af3-dd9908e6cd03.png" alt="" width="880" height="569"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#smooth-shadow-generator"&gt;
  &lt;/a&gt;
  Smooth shadow generator
&lt;/h2&gt;

&lt;p&gt;One of my favourites. This tool will make some smooth and nice shadows. They look like the shadows in Material design. &lt;br&gt;
&lt;a href="https://shadows.brumm.af/"&gt;https://shadows.brumm.af/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a5oiiyiC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76736580/139238531-808cb465-91a7-4162-8c78-3efef436e500.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a5oiiyiC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76736580/139238531-808cb465-91a7-4162-8c78-3efef436e500.png" alt="" width="880" height="594"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The End
&lt;/h2&gt;

&lt;p&gt;It's the end of the post, see you next time! You can visit &lt;a href="https://www.tronic247.com/"&gt;https://www.tronic247.com/&lt;/a&gt; to stay updated with my latest posts. &lt;/p&gt;

</description>
      <category>water</category>
    </item>
    <item>
      <title>20 Python One-Liners That Will Help You Code Like a Pro</title>
      <author>Jonny</author>
      <pubDate>Fri, 29 Oct 2021 09:20:04 +0000</pubDate>
      <link>https://dev.to/jnc/powerful-python-one-liners-to-look-like-a-pro-4m45</link>
      <guid>https://dev.to/jnc/powerful-python-one-liners-to-look-like-a-pro-4m45</guid>
      <description>&lt;p&gt;Python is an amazing and versatile programming language that is very easy to learn and work with. Like many programming languages, it offers more than one way to solve a problem, some requiring more lines of code than others.&lt;/p&gt;

&lt;p&gt;Now, fewer lines of code is not always the best answer, as sometimes we may clutter our algorithms and make them hard to read and understand, but when done right, it increases the quality of your code.&lt;/p&gt;

&lt;p&gt;Python as a programming language is extremely good at this, reason why it is so often the favorite choice for coding challenges, interviews, and the likes.&lt;/p&gt;
&lt;p&gt;Today, we will learn a few snippets and tricks you can use to solve everyday operations into a single line of code, going from the very simple to some more advanced techniques. &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/powerful-python-one-liners-to-look-like-a-pro/&amp;amp;ved=2ahUKEwiW2fmHpu_zAhUF_XMBHfqGCtoQFnoECAcQAQ&amp;amp;usg=AOvVaw0CNWjTd-bi72WEYox2o-ci"&gt;20 Python One-Liners That Will Help You Code Like a Pro &lt;/a&gt;&lt;/b&gt;&lt;/p&gt;


</description>
    </item>
    <item>
      <title>Own Your Retro Nintendo Games Collection on GitHub Page </title>
      <author>Anshuman Abhishek</author>
      <pubDate>Fri, 29 Oct 2021 09:11:42 +0000</pubDate>
      <link>https://dev.to/_anshuman/own-your-retro-nintendo-games-collection-on-github-page-15l1</link>
      <guid>https://dev.to/_anshuman/own-your-retro-nintendo-games-collection-on-github-page-15l1</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;If you are a video game lover then there is a high chance that you like Nintendo NES and SNES games. They are just classic. Looking back at the 80's 90's games always brings back a sense of nostalgia.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://i.giphy.com/media/PTFRmGOgiPUS4/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/PTFRmGOgiPUS4/giphy.gif" width="400" height="224"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#we-know-that-nes-and-snes-games-are-flooded-all-over-the-internet-you-can-play-these-games-online-on-web-browsers-or-offline-using-emulators-or-mobile-apps-but-they-are-not-much-handy"&gt;
  &lt;/a&gt;
  We know that NES and SNES games are flooded all over the internet. You can play these games online on web browsers or offline using emulators or mobile apps. But they are not much handy.
&lt;/h4&gt;




&lt;p&gt;&lt;a href="https://i.giphy.com/media/PUTI8BNmOewD0A1lqY/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/PUTI8BNmOewD0A1lqY/giphy.gif" width="480" height="274"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#why-they-are-not-handy"&gt;
  &lt;/a&gt;
  Why they are not handy:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;On websites, there are thousands of games and has a search engine that makes you confuse&lt;/li&gt;
&lt;li&gt;You don't have your own favorite games collection or Dashboard where you can simply choose. Most people think that there is only one game that is Mario but it's not true.
&lt;/li&gt;
&lt;li&gt;You have to make extra effort to reach there if you play online&lt;/li&gt;
&lt;li&gt;If you use NES/SNES emulators then handle/management cost very high and restrict to one device to play&lt;/li&gt;
&lt;li&gt;In the case of mobile phone, nowadays no one like extra application for each task on their smartphones. It is better to be a website where can play games.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create your own platform like I create one without paying a penny
&lt;a href="https://anshuman2121.github.io/nintendo/#"&gt;https://anshuman2121.github.io/nintendo/#&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Make your own collection of games that you like(this is a one-time investment)&lt;/li&gt;
&lt;li&gt;Make a free permanent GH Page and play anytime anywhere on any device
&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#after-a-lot-of-research-i-arguably-find-the-best-emulator-on-the-internet-no-ads-and-selfhosted-a-javascript-emulator-for-nes-snes-and-more"&gt;
  &lt;/a&gt;
  After a lot of research, I arguably find The BEST emulator on the internet. No ads and self-hosted! A JavaScript emulator for NES, SNES, and more!
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#advantages"&gt;
  &lt;/a&gt;
  Advantages:
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Work on almost any platform like on Laptop, mobile devices, or on TABs&lt;/li&gt;
&lt;li&gt;You can play using a keyboard, touchscreen, or even connect your fav gaming controller and play.&lt;/li&gt;
&lt;li&gt;You can play multiplayer as well.&lt;/li&gt;
&lt;li&gt;To be frank NES and SNES games are not easy games and can frustrate you. You definitely need a save feature that is present in modern gaming platforms like PlayStation. So, it is also has a feature to save a game state from where you can start again.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://i.giphy.com/media/9KF0pyrLyXpnHhDGsc/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/9KF0pyrLyXpnHhDGsc/giphy.gif" width="480" height="344"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#lets-discuss-what-changes-i-made"&gt;
  &lt;/a&gt;
  Let's discuss what changes I made:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I have simply created a repo on GITHUB and named it Nintendo.
&lt;a href="https://github.com/Anshuman2121/nintendo"&gt;github.com/Anshuman2121/nintendo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Copy the JavaScript emulators and just keep 'NES and SNES' data/emulators and remove others just to make it light. &lt;/li&gt;
&lt;li&gt;Download all my favorite games from &lt;a href="https://wowroms.com/"&gt;wowroms.com&lt;/a&gt; or &lt;a href="https://www.emulatorgames.net/"&gt;emulatorgames.net&lt;/a&gt;. If you still have not decided which games you need to download then visit &lt;a href="https://www.ign.com/lists/top-100-nes-games"&gt;ign.com/lists/top-100-nes-games&lt;/a&gt; and &lt;a href="https://www.ign.com/lists/top-100-snes-games"&gt;ign.com/lists/top-100-snes-games&lt;/a&gt;. IGN is just like an IMDB for movies.&lt;/li&gt;
&lt;li&gt;Now place those games in the repo. I place those in folder nes.&lt;/li&gt;
&lt;li&gt;Next task is to make your web page beautiful. For this I choose &lt;a href="https://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt;. This is arguably one of the best CSS framework which make your webpage responsive.&lt;/li&gt;
&lt;li&gt;Subsequently create a function that can call NES/SNES emulator. If you know the basics of Javascript it won't take much effort to understand this
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var gameUrl
    function myfunction(id1)
    {
        var gameUrl = id1
        var extension = id1.split('.').pop()
        if (['fds', 'nes', 'unif', 'unf'].includes(extension)) {
            var core = 'nes';
        } else if (['smc', 'fig', 'sfc', 'gd3', 'gd7', 'dx2', 'bsx', 'swc'].includes(extension)) {
            var core = 'snes';
        } else {
            var core = prompt('Input core (examples: nes, snes, n64, gb, gba, psx)');
        };
        document.body.innerHTML = ''
        var a = document.createElement('div');
        a.style = "width:800px;height:600px;max-width:100%;margin: auto;";
        var b = document.createElement('div');
        b.id = 'game';
        a.appendChild(b);
        document.body.appendChild(a);

        var script = document.createElement('script');
        script.innerHTML = "EJS_player = '#game'; EJS_biosUrl = ''; EJS_gameUrl = '" + gameUrl + "'; EJS_core = '" + core + "'; EJS_pathtodata = 'data/'; ";
        document.body.appendChild(script);
        var script = document.createElement('script');
        script.src = 'data/loader.js';
        document.body.appendChild(script);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Afterwards, I need to create hyperlinks of every game which I have in folder nes which capable to call function myfunction
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;a href='#' class="btn btn-warning" onclick="myfunction('nes/Lion King, The (U).smc')"&amp;gt; Lion King SNES&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;I have around 100 games in repo and if simply do one by one it took a lot of time. So, I just took help from VSCode use the shortcut "shift + alt" and command line "ls -l &amp;gt; names"&lt;/li&gt;
&lt;li&gt;Eventually, you need to create a GHpage for this you can follow this
&lt;a href="https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site"&gt;getting-started-with-github-pages/creating-a-github-pages-site&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#what-you-need-to-do-to-make-your-own-copy"&gt;
  &lt;/a&gt;
  What you need to do to make your own copy:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Just make a clone of the repo
&lt;a href="https://github.com/Anshuman2121/nintendo"&gt;https://github.com/Anshuman2121/nintendo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Download games and put it in nes folder&lt;/li&gt;
&lt;li&gt;Make changes in index.html&lt;/li&gt;
&lt;li&gt;create your own personal free GitHub Page. 
&lt;a href="https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site"&gt;Creating a GitHub pages site&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;







&lt;h2&gt;
  &lt;a href="#congratulations-now-you-have-your-own-website-where-you-have-your-own-games-collection-which-you-can-play-anywhere-anytime-and-on-any-device"&gt;
  &lt;/a&gt;
  Congratulations! Now you have your own website where you have your own games collection which you can play anywhere anytime and on any device!
&lt;/h2&gt;




&lt;p&gt;&lt;a href="https://i.giphy.com/media/Ei9vJXvvU7kwf4NpYz/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Ei9vJXvvU7kwf4NpYz/giphy.gif" width="480" height="346"&gt;&lt;/a&gt;&lt;/p&gt;




</description>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>MSSQL Server and POSTGRES Installation</title>
      <author>Nicholas </author>
      <pubDate>Fri, 29 Oct 2021 08:51:02 +0000</pubDate>
      <link>https://dev.to/nicmsn2/mssql-server-and-postgres-installion-364k</link>
      <guid>https://dev.to/nicmsn2/mssql-server-and-postgres-installion-364k</guid>
      <description>&lt;h3&gt;
  &lt;a href="#setting-up-a-data-engineering-environment"&gt;
  &lt;/a&gt;
  Setting up a data engineering environment
&lt;/h3&gt;

&lt;p&gt;When diving into the data engineering world, it is important for the set up  to be ready.&lt;br&gt;
To set up a data engineering environment it is advisable to work on Linux Environment. &lt;br&gt;
To start with we started by using linux as a host machine.&lt;br&gt;
Then we installed Virtual machine VMware. Then on the Vmware we installed the downloaded Windows operating system.&lt;br&gt;
Now in order to make communication between host(Ubuntu) and virtual machine(Windows) we need to make configurations and networking on Vmware.You need to enable VNC connections as shown below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ogyL_qxj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/712chbscpxnlixrd3q29.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ogyL_qxj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/712chbscpxnlixrd3q29.png" alt="Image description" width="624" height="351"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#installation-of-mssql-server"&gt;
  &lt;/a&gt;
  Installation of MSSQL Server.
&lt;/h4&gt;

&lt;p&gt;In this guide we walk you through the MSSQL Server installation in Windows on VMware.&lt;br&gt;
The first step is to download SQL SERVER 2012. In this case it's the one we are using currently.&lt;br&gt;
You can download it from here or download a later version. Then follow the instructions to install it,&lt;br&gt;
then launch the SSMS(Sql Server Management Studio).The UI should be something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qA3_TkBs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnyldbfyln1iyrc7afra.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qA3_TkBs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnyldbfyln1iyrc7afra.png" alt="Image description" width="624" height="320"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#installation-of-postgres-database-on-ubuntu-2004"&gt;
  &lt;/a&gt;
  Installation of Postgres Database on Ubuntu 20.04.
&lt;/h4&gt;

&lt;p&gt;We will now install Postgres in our Ubuntu. To install this follow the installation steps here.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#for-postgres-configuration-steps"&gt;
  &lt;/a&gt;
  For Postgres configuration steps:
&lt;/h5&gt;

&lt;p&gt;To check for Postgres version &lt;br&gt;
       psql --version&lt;br&gt;
It is advisable to check if the Postgres is running using this command before you proceed&lt;br&gt;
       sudo systemctl status postgresql&lt;br&gt;
Connection To PostgreSQL running.&lt;br&gt;
       sudo -u postgres psql&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation-of-adventureworks2019-and-adventureworksdw2019"&gt;
  &lt;/a&gt;
  Installation of AdventureWorks2019 and AdventureWorksDW2019
&lt;/h3&gt;

&lt;p&gt;First to start using the databases we start with installing Adventureworks2019 and DW.&lt;br&gt;
To install follow the steps found here. Once installed we need to configure them in MSSQL Server on a virtual machine using these steps here.&lt;br&gt;
After installation and configuration open SSMS and this should be the UI in SSMS:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ozHlSZrT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vcj49ey6fslai31wdy19.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ozHlSZrT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vcj49ey6fslai31wdy19.png" alt="Image description" width="624" height="341"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-introduction-totalend-openstudio"&gt;
  &lt;/a&gt;
  3.  Introduction toTalend OpenStudio
&lt;/h3&gt;

&lt;p&gt;It is important to start with low code ETL tools. In this article I will show how to install and get started with Talend. We will use Talend later to Migrate Data from MSSQL Server to Postgres.&lt;/p&gt;

&lt;p&gt;To get started we download Talend open Studio for linux here.After downloading you will receive multiple files,run the linux file which has a .sh file and launch talend. This is how it should open:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GwyeOYEe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sxvmx9dy2jh1n81m9uk4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GwyeOYEe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sxvmx9dy2jh1n81m9uk4.png" alt="Image description" width="624" height="351"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#migrating-data-from-sql-server-to-postgres-using-talend-etl"&gt;
  &lt;/a&gt;
  Migrating Data from SQL Server to Postgres Using Talend ETL
&lt;/h4&gt;

&lt;p&gt;At the Talend Studio we create a job then create tBDInput for SQL Server and tBDOutput for Postgres. At this point, you can create a connection between the two databases. &lt;br&gt;
Right Click on tBDInput Trigger the On subjob OK and drag it to tBDOutput to make the connection complete. &lt;br&gt;
Ensure to enter correctly the database credentials i.e username, password and database name ,table name ,which hosts the table or database to migrate. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MgadTfkw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ha5hg7t396ezng4z1fmt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MgadTfkw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ha5hg7t396ezng4z1fmt.png" alt="Image description" width="624" height="351"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eID5Wrzx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9ez8t8vmf6xs3lmlutp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eID5Wrzx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9ez8t8vmf6xs3lmlutp.png" alt="Image description" width="624" height="351"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After all the configuring and connecting both databases it's time now to start moving our data from Sql server to postgres. We write an Sql query to migrate the data.To start with we start with SQL server by using the following command which gets data from users table:&lt;br&gt;
“select userid, user_name, user_email,convert(varchar, getdate(), 0)run_date_time from users"&lt;br&gt;
This is used for migration and logging using the get_date function.&lt;br&gt;
Now we now have to write an SQL query to insert data into postgres.In the UI we create a table and drop it if it exists then perform the action of insertion to custdatademo table as shown;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wA33e6rY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zplkuqqjulixmg9vxjsm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wA33e6rY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zplkuqqjulixmg9vxjsm.png" alt="Image description" width="624" height="351"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4EoUiDjo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8x8ptj0sjq3fcrl9260u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4EoUiDjo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8x8ptj0sjq3fcrl9260u.png" alt="Image description" width="624" height="351"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zb6fX3zD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mpxx6qqaamaiz0b13qig.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zb6fX3zD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mpxx6qqaamaiz0b13qig.png" alt="Image description" width="624" height="337"&gt;&lt;/a&gt;&lt;br&gt;
 Now it's time where we have been waiting for so long  and it's time to see our output in Postgres. Let's dive in fast  and confirm our hard work.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uJ2STrQT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jylnwl1xyz160mlirtlm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uJ2STrQT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jylnwl1xyz160mlirtlm.png" alt="Image description" width="624" height="351"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see we have migrated the data successfully. Thank you for being with us in this long journey.&lt;br&gt;
This is a  complete Extract, Transform and Load(ETL) using Talend.&lt;/p&gt;

&lt;p&gt;Nicholas Data Eng Tips: &lt;a href="https://www.linkedin.com/in/nicholas-musau-69657186/"&gt;Nicholas&lt;/a&gt;&lt;br&gt;
Thanks:    &lt;a href="https://www.linkedin.com/in/wanjohichristopher/"&gt;Christopher&lt;/a&gt;&lt;br&gt;
Respects: &lt;a href="https://www.linkedin.com/in/omwenganeville/"&gt;Neville&lt;/a&gt; &lt;/p&gt;

</description>
    </item>
    <item>
      <title>AI Project For Beginners [Beginners To Advance]</title>
      <author>Jonny</author>
      <pubDate>Fri, 29 Oct 2021 08:50:30 +0000</pubDate>
      <link>https://dev.to/jnc/ai-project-for-beginners-beginners-to-advance-99l</link>
      <guid>https://dev.to/jnc/ai-project-for-beginners-beginners-to-advance-99l</guid>
      <description>&lt;p&gt;Artificial Intelligence has made a significant impact on our daily lives. Every time you scroll through social media, open Spotify, or do a quick Google search, you are using an application of AI. The AI industry has expanded massively in the past few years and is predicted to grow even further, reaching around 126 billion U.S. dollars by 2025. Multinational companies like IBM, Accenture, and Apple are actively hiring AI practitioners. The median salary of an AI engineer as of 2021 is $171, 715 that can go over $250,000.&lt;/p&gt;
&lt;p&gt;The field of AI is vast, and there are many areas within the industry that you can choose to specialise. Say , if you are intrigued by facial recognition systems and image generation, you can choose to work in the field of computer vision. If you’d like to build models that can converse with people and learn human language, you can work in the field of NLP (Natural Language Processing).&lt;/p&gt;
&lt;p&gt;There is a lot of work being done today for the advancement of Artificial Intelligence. Companies need AI specialists who can build and deploy scalable models to meet growing industry demands. It isn’t tough to get started in the field of AI. While there is the complexity involved in building machine learning models from scratch, most AI jobs in the industry today don’t require you to know the math behind these models. Many companies require individuals who can build AI solutions, scale them, and deploy them for the end-user. Many high-level libraries and frameworks can help you do this without an in-depth knowledge of how the models work. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/artificial-intelligence-project-for-beginners/"&gt;Artificial Intelligence Project For Beginners 2021&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Top Reasons Why Businesses choose Salesforce Outsourcing Services 
</title>
      <author>BinalPrajapati123</author>
      <pubDate>Fri, 29 Oct 2021 08:48:35 +0000</pubDate>
      <link>https://dev.to/binalprajapati123/top-reasons-why-businesses-choose-salesforce-outsourcing-services-p7h</link>
      <guid>https://dev.to/binalprajapati123/top-reasons-why-businesses-choose-salesforce-outsourcing-services-p7h</guid>
      <description>&lt;p&gt;This blog will show why all businesses nowadays need to &lt;em&gt;outsource salesforce services&lt;/em&gt; for their projects to minimize Business risks.&lt;/p&gt;

&lt;p&gt;All businesses now choose salesforce to boost their business in the right direction with more efficiency. Yes, adopting and implementing salesforce in your business gives you lots of benefits. Still, apart from it, by outsourcing salesforce services, you can get faster services with efficiency, maintaining professionalism without investing a huge amount. Yes, it is now common to outsource salesforce development services to reduce high-quality costs through experts. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-businesses-choose-to-transfer-to-outsource-salesforce-services"&gt;
  &lt;/a&gt;
  Why do Businesses choose to transfer to outsource salesforce services?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-reduce-operating-cost"&gt;
  &lt;/a&gt;
  (1) Reduce Operating Cost
&lt;/h3&gt;

&lt;p&gt;Hiring In-house certified developers is a costly process and when it comes to picking and hiring the right best-experienced developer is not easy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-reduce-burden"&gt;
  &lt;/a&gt;
  (2) Reduce Burden
&lt;/h3&gt;

&lt;p&gt;By outsourcing salesforce services, they have defined duties, roles, and responsibilities towards your organization. So the burden is removed by sharing the responsibilities and duties. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-save-money-and-time"&gt;
  &lt;/a&gt;
  (3) Save Money and Time
&lt;/h3&gt;

&lt;p&gt;Yes, outsourcing salesforce services and certified salesforce experts save you time and money compared to in-house teams. By outsourcing, the salesforce experts solve every issue daily so you can get more work implementation in less time at a lower cost. The central benefit is you don't have to pay training expenses in an organization. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-247-availability-and-support"&gt;
  &lt;/a&gt;
  (4) 24/7 Availability and support
&lt;/h3&gt;

&lt;p&gt;24/7 availability and support in the in-house organization are not possible. In that situation, the outsourcing salesforce services provider can give you a non-stop 24/7 availability support and accessibility for you as per the needs. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-find-and-utilize-the-right-resources-with-efficiency"&gt;
  &lt;/a&gt;
  (5) Find and Utilize the Right Resources with efficiency
&lt;/h3&gt;

&lt;p&gt;Finding the right and experienced developers locally for in-house is quite difficult. But when choosing the right and best company by &lt;strong&gt;&lt;em&gt;outsourcing salesforce services&lt;/em&gt;&lt;/strong&gt;, you can get the highly experienced and best resources for your salesforce project with high productivity and efficiency. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#points-to-consider-while-choosing-outsourcing-salesforce-services"&gt;
  &lt;/a&gt;
  Points to Consider while choosing outsourcing Salesforce services
&lt;/h2&gt;

&lt;p&gt;Experience&lt;br&gt;
Skill Set&lt;br&gt;
Accessibility&lt;br&gt;
Communication&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Salesforce is the major part of your organization to maximize your sales and make your business to the next level. An in-house team may not be sufficient to implement all your needs and requirements in your project. Still, by outsourcing salesforce services from the top &lt;a href="https://www.bacancytechnology.com/salesforce-development-services"&gt;salesforce development company&lt;/a&gt;, you can get reliable, productive, high-quality resources and services from them. &lt;/p&gt;

</description>
      <category>salesforce</category>
      <category>startup</category>
      <category>crm</category>
      <category>cloud</category>
    </item>
    <item>
      <title>OSD600 - Lab 6 - Docusaurus</title>
      <author>Thanh Van</author>
      <pubDate>Fri, 29 Oct 2021 08:31:30 +0000</pubDate>
      <link>https://dev.to/tcvan0707/osd600-lab-6-docusaurus-2nae</link>
      <guid>https://dev.to/tcvan0707/osd600-lab-6-docusaurus-2nae</guid>
      <description>&lt;h2&gt;
  &lt;a href="#learning-docusaurus"&gt;
  &lt;/a&gt;
  Learning Docusaurus
&lt;/h2&gt;

&lt;p&gt;Docusaurus is basically a &lt;strong&gt;React-based&lt;/strong&gt; static site generator, which is built and maintained by &lt;em&gt;Facebook&lt;/em&gt;. If we are maintaining an open source project website, Docusaurus is definitely a good friend for us since it is easily built, deployed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-a-docusaurus-project"&gt;
  &lt;/a&gt;
  Set up a Docusaurus project
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lNCSfDyB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6iczrfl0w5mif254b2s.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lNCSfDyB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6iczrfl0w5mif254b2s.JPG" alt="Docusaurus set up" width="445" height="51"&gt;&lt;/a&gt;This is the command I use to set up my first Docusaurus project. It is pretty simple, and I choose the &lt;code&gt;classic&lt;/code&gt; option for the &lt;code&gt;[template]&lt;/code&gt;. The deployment of Docusaurus to Github page is very straightforward.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---fUMy7eb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4s61sswiuus3r6is0edq.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---fUMy7eb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4s61sswiuus3r6is0edq.JPG" alt="deploy" width="584" height="141"&gt;&lt;/a&gt;This is the moment I encounter some errors. I do not realize that the original command does not work for me for some reason. After doing a lot of googling, I come up with the solution is that I have to remove the quotation mark &lt;code&gt;" "&lt;/code&gt; of &lt;code&gt;"GIT_USER=&amp;lt;GITHUB_USERNAME&amp;gt;"&lt;/code&gt; , so I use the command &lt;code&gt;cmd /C "set GIT_USER=&amp;lt;GITHUB_USERNAME&amp;gt;&amp;amp;&amp;amp; yarn deploy&lt;/code&gt; and it works properly. After all, I have my first Docusaurus &lt;a href="https://tcvan0707.github.io/my-website/"&gt;website&lt;/a&gt; successfully deployed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#copying-a-feature-from-docusaurus"&gt;
  &lt;/a&gt;
  Copying a Feature from Docusaurus
&lt;/h2&gt;

&lt;p&gt;As I catch up the concept of Docusaurus as well as knowing what it is, I choose a feature from it and add it into &lt;a href="https://github.com/tcvan0707/txt2html"&gt;my SSG&lt;/a&gt;. I file an &lt;a href="https://github.com/tcvan0707/txt2html/issues/13"&gt;issue&lt;/a&gt; inside my repo, which is adding &lt;strong&gt;full markdown support&lt;/strong&gt; for my SSG. The reason why I choose this is because I partially implement the heading to &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag, so I want to finish the rest in order to have full options for markdown. I create another branch for my modification, which is &lt;code&gt;issue-13&lt;/code&gt;, then modifying and push it to that branch. After all, I create a &lt;a href="https://github.com/tcvan0707/txt2html/pull/14"&gt;pull request&lt;/a&gt; for my program and then merge in to my &lt;code&gt;main&lt;/code&gt; branch.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>opensource</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Adding more features to SSG similar to docusaurus</title>
      <author>Japneet Singh</author>
      <pubDate>Fri, 29 Oct 2021 08:30:25 +0000</pubDate>
      <link>https://dev.to/japneetsingh035/adding-more-features-to-ssg-similar-to-docusaurus-26pi</link>
      <guid>https://dev.to/japneetsingh035/adding-more-features-to-ssg-similar-to-docusaurus-26pi</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction-to-docusaurus"&gt;
  &lt;/a&gt;
  Introduction to Docusaurus
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Docusaurus is a tool designed to make it easy for teams to publish documentation websites&lt;/strong&gt; without having to worry about the infrastructure and design details. Docusaurus also provides core website and documentation features out-of-the-box including blog support, internationalization, search, and versioning. &lt;a href="https://docusaurus.io/docs"&gt;For more info&lt;/a&gt;. &lt;br&gt;
To anyone who wants to design a webpage without coding knowledge can use this open-source project.&lt;br&gt;
Easy to deploy and easy-to-use pre-design webpages for your website.&lt;br&gt;
&lt;a href="https://japneetsingh035.github.io/docusaurus/docs/intro"&gt;Intro to docusaurus&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-copied-from-docusaurus"&gt;
  &lt;/a&gt;
  Features copied from Docusaurus
&lt;/h2&gt;

&lt;p&gt;Well, I was impressed looking at docusaurus implementing so many features to their website. I wanted to work on Theme and Search Engine Optimization that required a lot of effort and knowledge. So, I started with some basic features that support my &lt;a href="https://github.com/japneetsingh035/ModernSSG"&gt;ModernSSG&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#approach"&gt;
  &lt;/a&gt;
  Approach
&lt;/h2&gt;

&lt;p&gt;I wanted to make my Html page more supportive with Markdown. I did it by adding more supports to tags.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Improved Accessibility of generated HTML&lt;/li&gt;
&lt;li&gt;Full Markdown support&lt;/li&gt;
&lt;li&gt;Syntax Highlighting for code blocks&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#future-features"&gt;
  &lt;/a&gt;
  Future Features
&lt;/h2&gt;

&lt;p&gt;Well, I would love to work on &lt;a href="https://github.com/japneetsingh035/ModernSSG/issues/20"&gt;Issues&lt;/a&gt;. If anyone is interested to practice with this static site generator feel free to reach out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-of-feature"&gt;
  &lt;/a&gt;
  Example of feature
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Improved Accessibility of generated HTML
 data = data.replacingOccurrences(of: "```

bash", with: "&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;", options: .regularExpression)
                    data = data.replacingOccurrences(of: "

```", with: "&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;", options: .regularExpression)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FejdXZ12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh3qkm6rrii67rewg25x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FejdXZ12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh3qkm6rrii67rewg25x.png" alt="Image description" width="880" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-issues"&gt;
  &lt;/a&gt;
  More issues
&lt;/h2&gt;

&lt;p&gt;Pull requests are welcome. For changes, please open an issue first to discuss what you would like to change.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Static Assets for images, stylesheets, etc.&lt;/li&gt;
&lt;li&gt;Themes&lt;/li&gt;
&lt;li&gt;Configurable Sidebar (i.e., table of contents)&lt;/li&gt;
&lt;li&gt;Blog posts in addition to Pages&lt;/li&gt;
&lt;li&gt;Search Engine Optimization (SEO)&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>opensource</category>
      <category>beginners</category>
      <category>programming</category>
      <category>swift</category>
    </item>
    <item>
      <title>How to make a Tik Tak Toe Game (With Html, Css And Js)</title>
      <author>Codeflix</author>
      <pubDate>Fri, 29 Oct 2021 08:24:54 +0000</pubDate>
      <link>https://dev.to/codeflix/how-to-make-a-tik-tak-toe-game-with-html-css-and-js-2972</link>
      <guid>https://dev.to/codeflix/how-to-make-a-tik-tak-toe-game-with-html-css-and-js-2972</guid>
      <description>&lt;p&gt;Hello, readers welcome to my new blog and today I am going to tell you how to make a Tic Tac Toe game in Html, Css and Javascript .&lt;/p&gt;

&lt;p&gt;As you know that Tic tac toe is a multiplayer game and the players of this game have to position their marks(sign) so that they can construct a continuous line of three cells or boxes vertically, horizontally, or diagonally. An opponent can stop a win by blocking the end of the opponent’s line.&lt;/p&gt;

&lt;p&gt;In our program or design [Tic Tac Toe Game], at first, on the webpage, there is a selection box with the game title and two buttons which are labeled as “Player(X)” and “Player(O)”. Users must select one option or button to continue the game. If the user selects the X then the bot will be O and if the user selects the O then the bot will be X.&lt;/p&gt;

&lt;p&gt;Once the user selects one of them, the selection box will disappear and the playboard is visible. There are the player names at the top in the playboard section and it indicates or shows whose turn is now. At the center of the webpage, there is a tic tac toe play area with nine square boxes. Once you click on the particular box then there is visible a sign or icon which you have chosen on the selection box.&lt;/p&gt;

&lt;p&gt;Once you click on any box then after a couple of seconds the bot will automatically select the box which is not selected by you or the bot before, and the opposite icon is visible there means if your icon is X then the bot will have O. Once a match is won by someone, the playboard section will be hidden and the result box appears with the winner sign or icon and a replay button.&lt;/p&gt;

&lt;p&gt;If no one wins the match and all nine-box selected then again the playboard section is hidden and the result box appears with “Match has been drawn text” and a replay button. Once you click on the replay button, the current page reloads and you can play again.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-make-it-a-search-box-in-vanilla-javascript-youtube-preview"&gt;
  &lt;/a&gt;
  How To Make it A Search Box In Vanilla Javascript YouTube Preview
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://youtu.be/GnJcV6t2jTg"&gt;####Preivew&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-make-it-a-search-box-in-vanilla-javascript-code-on-youtube"&gt;
  &lt;/a&gt;
  How To Make it A Search Box In Vanilla Javascript Code On YouTube
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#now-lets-not-waste-anymore-time-and-get-started"&gt;
  &lt;/a&gt;
  Now let's not waste anymore time and get started.
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  Html
&lt;/h2&gt;

&lt;p&gt;As you know The HyperText Markup Language, or HTML is the standard markup language for documents designed to be displayed in a web browser. It can be assisted by technologies such as Cascading Style Sheets (CSS) and scripting languages such as JavaScript.&lt;/p&gt;

&lt;p&gt;Web browsers receive HTML documents from a web server or from local storage and render the documents into multimedia web pages. HTML describes the structure of a web page semantically and originally included cues for the appearance of the document.&lt;/p&gt;

&lt;p&gt;HTML elements are the building blocks of HTML pages. With HTML constructs, images and other objects such as interactive forms may be embedded into the rendered page. HTML provides a means to create structured documents by denoting structural semantics for text such as headings, paragraphs, lists, links, quotes and other items. HTML elements are delineated by tags, written using angle brackets. Tags such asand directly introduce content into the page. Other tags such as&lt;/p&gt;

&lt;p&gt;surround and provide information about document text and may include other tags as sub-elements. Browsers do not display the HTML tags, but use them to interpret the content of the page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source Code
&lt;/h2&gt;

&lt;p&gt;The source code is given below please read and do it carefully any&lt;br&gt;
 mistake can generate wrong results.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h2&gt;

&lt;p&gt;Make a file named index.html and write the following code.&lt;br&gt;
Basic code with link to css.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;title&amp;gt;Tic Tac Toe Game | Codeflix&amp;lt;/title&amp;gt;
    &amp;lt;link rel="stylesheet" href="style.css"&amp;gt;
    &amp;lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"/&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h2&gt;

&lt;p&gt;This is the front page's html.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;!-- select box --&amp;gt;
  &amp;lt;div class="select-box"&amp;gt;
    &amp;lt;header&amp;gt;Tic Tac Toe&amp;lt;/header&amp;gt;
    &amp;lt;div class="content"&amp;gt;
      &amp;lt;div class="title"&amp;gt;Select which you want to be?&amp;lt;/div&amp;gt;
      &amp;lt;div class="options"&amp;gt;
        &amp;lt;button class="playerX"&amp;gt;Player (X)&amp;lt;/button&amp;gt;
        &amp;lt;button class="playerO"&amp;gt;Player (O)&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class="credit"&amp;gt;Created By &amp;lt;a href="https://dev.to/codeflix/how-to-make-a-glassorphism-calculator-dhk" target="_blank"&amp;gt;Codeflix&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt; 


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h2&gt;

&lt;p&gt;Code to tell which player's chance it is.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- playboard section --&amp;gt;
  &amp;lt;div class="play-board"&amp;gt;
    &amp;lt;div class="details"&amp;gt;
      &amp;lt;div class="players"&amp;gt;
        &amp;lt;span class="Xturn"&amp;gt;X's Turn&amp;lt;/span&amp;gt;
        &amp;lt;span class="Oturn"&amp;gt;O's Turn&amp;lt;/span&amp;gt;
        &amp;lt;div class="slider"&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4
&lt;/h2&gt;

&lt;p&gt;Code for playing area.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="play-area"&amp;gt;
      &amp;lt;section&amp;gt;
        &amp;lt;span class="box1"&amp;gt;&amp;lt;/span&amp;gt;
        &amp;lt;span class="box2"&amp;gt;&amp;lt;/span&amp;gt;
        &amp;lt;span class="box3"&amp;gt;&amp;lt;/span&amp;gt;
      &amp;lt;/section&amp;gt;
      &amp;lt;section&amp;gt;
        &amp;lt;span class="box4"&amp;gt;&amp;lt;/span&amp;gt;
        &amp;lt;span class="box5"&amp;gt;&amp;lt;/span&amp;gt;
        &amp;lt;span class="box6"&amp;gt;&amp;lt;/span&amp;gt;
      &amp;lt;/section&amp;gt;
      &amp;lt;section&amp;gt;
        &amp;lt;span class="box7"&amp;gt;&amp;lt;/span&amp;gt;
        &amp;lt;span class="box8"&amp;gt;&amp;lt;/span&amp;gt;
        &amp;lt;span class="box9"&amp;gt;&amp;lt;/span&amp;gt;
      &amp;lt;/section&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-5"&gt;
  &lt;/a&gt;
  Step 5
&lt;/h2&gt;

&lt;p&gt;Replay button and link to javascript file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- result box --&amp;gt;
  &amp;lt;div class="result-box"&amp;gt;
    &amp;lt;div class="won-text"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class="btn"&amp;gt;&amp;lt;button&amp;gt;Replay&amp;lt;/button&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;script src="script.js"&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  Css
&lt;/h2&gt;

&lt;p&gt;CSS is designed to enable the separation of presentation and content, including layout, colors, and fonts. This separation can improve content accessibility, provide more flexibility and control in the specification of presentation characteristics, enable multiple web pages to share formatting by specifying the relevant CSS in a separate .css file which reduces complexity and repetition in the structural content as well as enabling the .css file to be cached to improve the page load speed between the pages that share the file and its formatting.&lt;/p&gt;

&lt;p&gt;Separation of formatting and content also makes it feasible to present the same markup page in different styles for different rendering methods, such as on-screen, in print, by voice (via speech-based browser or screen reader), and on Braille-based tactile devices. CSS also has rules for alternate formatting if &lt;br&gt;
the content is accessed on a mobile device.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#css-source-code"&gt;
  &lt;/a&gt;
  Css Source Code
&lt;/h2&gt;
&lt;h2&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h2&gt;

&lt;p&gt;Make a css file named style.css&lt;br&gt;
This code represents selection, body, about box, header, title, button and player's css code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;400;500;600;700&amp;amp;display=swap');
*{
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Poppins', sans-serif;
}
::selection{
  color: #fff;
  background:#56baed;
}
body{
  background:#56baed;
}
.select-box, .play-board, .result-box{
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  transition: all 0.3s ease;
}
.select-box{
  background: #fff;
  padding: 20px 25px 25px;
  border-radius: 5px;
  max-width: 400px;
  width: 100%;
}
.select-box.hide{
  opacity: 0;
  pointer-events: none;
}
.select-box header{
  font-size: 30px;
  font-weight: 600;
  padding-bottom: 10px;
  border-bottom: 1px solid lightgrey;
}
.select-box .title{
  font-size: 22px;
  font-weight: 500;
  margin: 20px 0;
}
.select-box .options{
  display: flex;
  width: 100%;
}
.options button{
  width: 100%;
  font-size: 20px;
  font-weight: 500;
  padding: 10px 0;
  border: none;
  background: #56baed;
  border-radius: 5px;
  color: #fff;
  outline: none;
  cursor: pointer;
  transition: all 0.3s ease;
}
.options button:hover,
.btn button:hover{
  transform: scale(0.96);
}
.options button.playerX{
  margin-right: 5px;
}
.options button.playerO{
  margin-left: 5px;
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h2&gt;

&lt;p&gt;This code represents animation, credit ,details , players , victory text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.select-box .credit{
  text-align: center;
  margin-top: 20px;
  font-size: 18px;
  font-weight: 500;
}
.select-box .credit a{
  color: #56baed;
  text-decoration: none;
}
.select-box .credit a:hover{
  text-decoration: underline;
}

.play-board{
  opacity: 0;
  pointer-events: none;
  transform: translate(-50%, -50%) scale(0.9);
}
.play-board.show{
  opacity: 1;
  pointer-events: auto;
  transform: translate(-50%, -50%) scale(1);
}
.play-board .details{
  padding: 7px;
  border-radius: 5px;
  background: #fff;
}
.play-board .players{
  width: 100%;
  display: flex;
  position: relative;
  justify-content: space-between;
}
.players span{
  position: relative;
  z-index: 2;
  color: #56baed;
  font-size: 20px;
  font-weight: 500;
  padding: 10px 0;
  width: 100%;
  text-align: center;
  cursor: default;
  user-select: none;
  transition: all 0.3 ease;
}
.players.active span:first-child{
  color: #fff;
}
.players.active span:last-child{
  color: #56baed;
}
.players span:first-child{
  color: #fff;
}
.players .slider{
  position: absolute;
  top: 0;
  left: 0;
  width: 50%;
  height: 100%;
  background: #56baed;
  border-radius: 5px;
  transition: all 0.3s ease;
}
.players.active .slider{
  left: 50%;
}
.players.active span:first-child{
  color: #56baed;
}
.players.active span:nth-child(2){
  color: #fff;
}
.players.active .slider{
  left: 50%;
}
.play-area{
  margin-top: 20px;
}
.play-area section{
  display: flex;
  margin-bottom: 1px;
}
.play-area section span{
  display: block;
  height: 90px;
  width: 90px;
  margin: 2px;
  color: #56baed;
  font-size: 40px;
  line-height: 80px;
  text-align: center;
  border-radius: 5px;
  background: #fff;
}

.result-box{
  padding: 25px 20px;
  border-radius: 5px;
  max-width: 400px;
  width: 100%;
  opacity: 0;
  text-align: center;
  background: #fff;
  pointer-events: none;
  transform: translate(-50%, -50%) scale(0.9);
}
.result-box.show{
  opacity: 1;
  pointer-events: auto;
  transform: translate(-50%, -50%) scale(1);
}
.result-box .won-text{
  font-size: 30px;
  font-weight: 500;
  display: flex;
  justify-content: center;
}
.result-box .won-text p{
  font-weight: 600;
  margin: 0 5px;
}
.result-box .btn{
  width: 100%;
  margin-top: 25px;
  display: flex;
  justify-content: center;
}
.btn button{
  font-size: 18px;
  font-weight: 500;
  padding: 8px 20px;
  border: none;
  background: #56baed;
  border-radius: 5px;
  color: #fff;
  outline: none;
  cursor: pointer;
  transition: all 0.3s ease;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h2&gt;

&lt;p&gt;JavaScript , often abbreviated as JS, is a programming language that conforms to the ECMAScript specification. JavaScript is high-level, often just-in-time compiled and multi-paradigm. It has curly-bracket syntax, dynamic typing, prototype-based object-orientation and first-class functions.&lt;/p&gt;

&lt;p&gt;Alongside HTML and CSS, JavaScript is one of the core technologies of the World Wide Web. Over 97% of websites use it client-side for web page behavior, often incorporating third-party libraries.Most web browsers have a dedicated JavaScript engine to execute the code on the user's device.&lt;/p&gt;

&lt;p&gt;As a multi-paradigm language, JavaScript supports event-driven, functional, and imperative programming styles. It has application programming interfaces (APIs) for working with text, dates, regular expressions, standard data structures, and the Document Object Model (DOM).&lt;/p&gt;

&lt;p&gt;The ECMAScript standard does not include any input/output (I/O), such as networking, storage, or graphics facilities. In practice, the web browser or other runtime system provides JavaScript APIs for I/O. JavaScript engines were originally used only in web browsers, but they are now core components of other software systems, most notably servers and a variety of applications.&lt;/p&gt;

&lt;p&gt;Although there are similarities between JavaScript and Java, including language name, syntax, and respective standard libraries, the two languages are distinct and differ greatly in &lt;br&gt;
design.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#javascript-source-code"&gt;
  &lt;/a&gt;
  JavaScript Source Code
&lt;/h2&gt;

&lt;p&gt;Firstly make a file named script.js.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source Code
&lt;/h2&gt;

&lt;p&gt;I've tried to explain each JavaScript line....Hope you'll understand&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h2&gt;

&lt;p&gt;Code of all required elements Such as:- Player, Win-Text , Result-Box, Buttons  ect&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const selectBox = document.querySelector(".select-box"),
selectBtnX = selectBox.querySelector(".options .playerX"),
selectBtnO = selectBox.querySelector(".options .playerO"),
playBoard = document.querySelector(".play-board"),
players = document.querySelector(".players"),
allBox = document.querySelectorAll("section span"),
resultBox = document.querySelector(".result-box"),
wonText = resultBox.querySelector(".won-text"),
replayBtn = resultBox.querySelector("button");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h2&gt;

&lt;p&gt;This code means once window loaded and the player selected  his/her team then hide select team box and show the playboard section&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window.onload = ()=&amp;gt;{
    for (let i = 0; i &amp;lt; allBox.length; i++) {
       allBox[i].setAttribute("onclick", "clickedBox(this)");
    }
}

selectBtnX.onclick = ()=&amp;gt;{
    selectBox.classList.add("hide"); 
    playBoard.classList.add("show");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h2&gt;

&lt;p&gt;The first line of code tells the computer the icon playerX&lt;br&gt;
(fas fa-times is the class named fountausome cross icon) &lt;br&gt;
and the second line represents the icon of PlayerO&lt;br&gt;
(far fa-circle is the class name fountausome circle icon)&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#let-playersign-x"&gt;
  &lt;/a&gt;
  let playerSign = "X";
&lt;/h5&gt;

&lt;p&gt;this is a global variable beacuse we've used this variable inside multiple functions&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#let-runbot-true"&gt;
  &lt;/a&gt;
  let runBot = true;
&lt;/h5&gt;

&lt;p&gt;this also a global variable with boolen value..we used this variable to stop the bot once match won by someone or drawn&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let playerXIcon = "fas fa-times";
let playerOIcon = "far fa-circle"; 
let playerSign = "X"; 
let runBot = true; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4
&lt;/h2&gt;

&lt;p&gt;This tells the computer that if player choose O then change playerSign to O in the next line we are adding circle icon tag inside user clicked element/box.&lt;br&gt;
In seventh line of code we have added active class in players.&lt;br&gt;
In tenth line of code we have are&lt;br&gt;
adding cross icon tag inside user clicked element/box.Last line of code we have added active class in player.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function clickedBox(element){
    if(players.classList.contains("player")){
        playerSign = "O"; 
        element.innerHTML = `&amp;lt;i class="${playerOIcon}"&amp;gt;&amp;lt;/i&amp;gt;`; 
        players.classList.remove("active"); 
        element.setAttribute("id", playerSign); 
    }else{
        element.innerHTML = `&amp;lt;i class="${playerXIcon}"&amp;gt;&amp;lt;/i&amp;gt;`; 
        element.setAttribute("id", playerSign); 
        players.classList.add("active"); 
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-5"&gt;
  &lt;/a&gt;
  Step 5
&lt;/h2&gt;

&lt;p&gt;The fist line of code tells the computer that once user have selected any box then that box can'be clicked again. Forth line of code tells the computer that add pointerEvents none to playboard so user can't immediately click on any other box until bot select.&lt;br&gt;
The eigth line of code tells the computer that generating random number so bot will randomly delay to select unselected box. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-there-are-some-comments-pasting-with-the-comments-wont-generate-wrong-results"&gt;
  &lt;/a&gt;
  Tip- There are some comments pasting with the comments won't generate wrong results.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;selectWinner( );
    element.style.pointerEvents = "none"; 
    playBoard.style.pointerEvents = "none"; 
    let randomTimeDelay = ((Math.random() * 1000) + 200).toFixed(); 
    setTimeout(()=&amp;gt;{
        bot(runBot); 

    }, randomTimeDelay); //passing random delay value
}

// bot auto select function
function bot(){
    let array = []; //creating empty array...we'll store unclicked boxes index
    if(runBot){ //if runBot is true
        playerSign = "O"; //change the playerSign to O so if player has chosen X then bot will O
        for (let i = 0; i &amp;lt; allBox.length; i++) {
            if(allBox[i].childElementCount == 0){ //if the box/span has no children means &amp;lt;i&amp;gt; tag
                array.push(i); //inserting unclicked boxes number/index inside array
            }
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-6"&gt;
  &lt;/a&gt;
  Step 6
&lt;/h2&gt;

&lt;p&gt;The firt line of code tells the computer that getting random index from array ,so bot will select random unselected box.&lt;br&gt;
The forth line of code tells the computer that if player has chosen O then bot will X. In the  fifth and sixth line we are adding cross icon tag inside bot selected element. In the line-no 21 we have added pointerEvents auto in playboard so user can again click on box.&lt;br&gt;&lt;br&gt;
        playerSign = "X"; //if player has chosen X then bot will be O right then we change the playerSign again to X so user will X because above we have changed the playerSign to O for bot.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-there-are-some-comments-pasting-with-the-comments-wont-generate-wrong-results"&gt;
  &lt;/a&gt;
  Tip-  There are some comments pasting with the comments won't generate wrong results.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; let randomBox = array[Math.floor(Math.random() * array.length)]; 
        if(array.length &amp;gt; 0){ //if array length is greater than 0
            if(players.classList.contains("player")){ 
                playerSign = "X"; 
                allBox[randomBox].innerHTML = `&amp;lt;i class="${playerXIcon}"&amp;gt;&amp;lt;/i&amp;gt;`; //adding cross icon tag inside bot selected element
                allBox[randomBox].setAttribute("id", playerSign); //set id attribute in span/box with player choosen sign
                players.classList.add("active"); //add active class in players
            }else{
                allBox[randomBox].innerHTML = `&amp;lt;i class="${playerOIcon}"&amp;gt;&amp;lt;/i&amp;gt;`; //adding circle icon tag inside bot selected element
                players.classList.remove("active"); //remove active class in players
                allBox[randomBox].setAttribute("id", playerSign); //set id attribute in span/box with player choosen sign
            }
            selectWinner(); //calling selectWinner function
        }
        allBox[randomBox].style.pointerEvents = "none"; //once bot select any box then user can't click on that box
        playBoard.style.pointerEvents = "auto"; //
    }
}

function getIdVal(classname){
    return document.querySelector(".box" + classname).id; //return id value
}
function checkIdSign(val1, val2, val3, sign){ //checking all id value is equal to sign (X or O) or not if yes then return true
    if(getIdVal(val1) == sign &amp;amp;&amp;amp; getIdVal(val2) == sign &amp;amp;&amp;amp; getIdVal(val3) == sign){
        return true;
    }
}
function selectWinner(){ //if the one of following winning combination match then select the winner
    if(checkIdSign(1,2,3,playerSign) || checkIdSign(4,5,6, playerSign) || checkIdSign(7,8,9, playerSign) || checkIdSign(1,4,7, playerSign) || checkIdSign(2,5,8, playerSign) || checkIdSign(3,6,9, playerSign) || checkIdSign(1,5,9, playerSign) || checkIdSign(3,5,7, playerSign)){
        runBot = false; //passing the false boolen value to runBot so bot won't run again
        bot(runBot); //calling bot function
        setTimeout(()=&amp;gt;{ //after match won by someone then hide the playboard and show the result box after 700ms
            resultBox.classList.add("show");
            playBoard.classList.remove("show");
        }, 700); //1s = 1000ms
        wonText.innerHTML = `Player &amp;lt;p&amp;gt;${playerSign}&amp;lt;/p&amp;gt; won the game!`; //displaying winning text with passing playerSign (X or O)
    }else{ //if all boxes/element have id value and still no one win then draw the match
        if(getIdVal(1) != "" &amp;amp;&amp;amp; getIdVal(2) != "" &amp;amp;&amp;amp; getIdVal(3) != "" &amp;amp;&amp;amp; getIdVal(4) != "" &amp;amp;&amp;amp; getIdVal(5) != "" &amp;amp;&amp;amp; getIdVal(6) != "" &amp;amp;&amp;amp; getIdVal(7) != "" &amp;amp;&amp;amp; getIdVal(8) != "" &amp;amp;&amp;amp; getIdVal(9) != ""){
            runBot = false; //passing the false boolen value to runBot so bot won't run again
            bot(runBot); //calling bot function
            setTimeout(()=&amp;gt;{ //after match drawn then hide the playboard and show the result box after 700ms
                resultBox.classList.add("show");
                playBoard.classList.remove("show");
            }, 700); //1s = 1000ms
            wonText.textContent = "Match has been drawn!"; //displaying draw match text
        }
    }
}

replayBtn.onclick = ()=&amp;gt;{
    window.location.reload(); //reload the current page on replay button click
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#hi-everyone-hope-you-have-learnt-how-to-make-a-tic-tac-toe-game-in-javascript-and-please-support-me-by-subscribing-my-channel-codeflix-codeflix"&gt;
  &lt;/a&gt;
  Hi, Everyone hope you have learnt how to make a Tic Tac Toe game in JavaScript and please support me by subscribing my channel codeflix-  &lt;a href="https://youtu.be/GnJcV6t2jTg"&gt;Codeflix&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Join my classes - Class Code-764co6g Class Link- &lt;a href="https://classroom.google.com/c/NDE5MDU2MDYzOTcw?cjc=764co6g"&gt;Join My Classes&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Let’s Develop an E-Commerce Application from Scratch Using Java and Spring</title>
      <author>Nil Madhab</author>
      <pubDate>Fri, 29 Oct 2021 08:01:22 +0000</pubDate>
      <link>https://dev.to/nilmadhabmondal/lets-develop-an-e-commerce-application-from-scratch-using-java-and-spring-28go</link>
      <guid>https://dev.to/nilmadhabmondal/lets-develop-an-e-commerce-application-from-scratch-using-java-and-spring-28go</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qNRzBIEk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9s4n6jklykblt1w0c7c.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qNRzBIEk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9s4n6jklykblt1w0c7c.jpeg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-setup-develop-category-and-product-apis"&gt;
  &lt;/a&gt;
  Project setup, develop category and product APIs
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;In my opinion, the best way to learn programming is to create a real-life project which has practical use, this way the entire learning experience becomes quite exciting. Also, you can showcase your app in your portfolio, which can help you a lot if you want to land a freelancing gig or in an interview.&lt;/p&gt;

&lt;p&gt;In this series of blogs, you will amplify your development skills by learning how to build an e-commerce platform from scratch. First, you have to be familiar with &lt;a href="https://medium.com/javarevisited/10-best-places-to-learn-java-online-for-free-ce5e713ab5b2"&gt;Java&lt;/a&gt;and Spring Boot, which we will use to build the backend, and &lt;a href="https://medium.com/javarevisited/10-free-vue-js-nuxt-js-online-courses-for-beginners-in-2021-a347ea2ad144"&gt;Vue.js&lt;/a&gt;, which we will use for the frontend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#note-to-the-reader"&gt;
  &lt;/a&gt;
  Note to the reader:
&lt;/h2&gt;

&lt;p&gt;Although I have built the entire application and wrote a series of &lt;a href="https://medium.com/javarevisited/lets-develop-an-ecommerce-application-from-scratch-using-java-and-spring-6dfac6ce5a9f"&gt;tutorials&lt;/a&gt;, which are quite popular and top in google result, which I am very proud of, (more than 130K views in medium alone)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z73-kB9j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2100/1%2AsiiPfKr7krKjzBBuSIh3Vw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z73-kB9j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2100/1%2AsiiPfKr7krKjzBBuSIh3Vw.png" alt="top in google result" width="880" height="511"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5KHH1-oo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2120/1%2AUgpeM6nrdE1kHqXSnxHApg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5KHH1-oo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2120/1%2AUgpeM6nrdE1kHqXSnxHApg.png" alt="" width="880" height="726"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I later found some parts are missing from those tutorials and some tutorials are not relevant anymore. For example, in some tutorials, we used vanilla JS and also started to develop an &lt;a href="https://medium.com/javarevisited/7-free-flutter-online-courses-to-build-android-and-ios-apps-in-2021-54c0c92f16f9"&gt;android app&lt;/a&gt;, which we discarded later.&lt;/p&gt;

&lt;p&gt;So, this is my attempt to redo the tutorials, deleting/editing some parts which are not relevant anymore and creating some tutorials which cover the missing pieces, so it will be very easy for the users to follow the tutorials.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#video-tutorial"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Video&lt;/strong&gt; tutorial
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/MgOJmWMSTuQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-project"&gt;
  &lt;/a&gt;
  Creating the Project
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First, go to &lt;a href="https://start.spring.io/"&gt;https://start.spring.io/&lt;/a&gt; where we can create new spring app and add dependencies&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select maven, add &lt;a href="https://javarevisited.blogspot.com/2021/08/top-5-spring-data-jpa-courses-for-java.html"&gt;Spring Data JPA&lt;/a&gt; and Spring Web dependencies&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JUae2XKP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2690/1%2A-C_FlCw8WFUmhb_A7FM4_A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JUae2XKP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2690/1%2A-C_FlCw8WFUmhb_A7FM4_A.png" alt="" width="880" height="423"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click on Generate and download the .zip file, uncompress it and open it using the &lt;a href="https://medium.com/javarevisited/7-best-courses-to-learn-intellij-idea-for-beginners-and-experienced-java-programmers-2e9aa9bb0c05"&gt;IntelliJ Idea&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zrvJZk5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2184/1%2AgO84VoYpy6C1qnzWJb8LBg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zrvJZk5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2184/1%2AgO84VoYpy6C1qnzWJb8LBg.png" alt="" width="880" height="526"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-structure"&gt;
  &lt;/a&gt;
  Project Structure
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#main-class"&gt;
  &lt;/a&gt;
  Main class
&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;src/main/java&lt;/em&gt; folder of the project contains a class that has a main method. It is the entry point for the application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#applicationproperties"&gt;
  &lt;/a&gt;
  application.properties
&lt;/h3&gt;

&lt;p&gt;In &lt;em&gt;src/main/resources&lt;/em&gt; folder there will be a file named &lt;strong&gt;‘application.properties’&lt;/strong&gt;. This file will play a major role in conveying the spring the configurations that we make and how it should create the object for us. In other words, it plays a major role in &lt;a href="https://javarevisited.blogspot.com/2012/12/inversion-of-control-dependency-injection-design-pattern-spring-example-tutorial.html#axzz6u4HTHz4Z"&gt;Inversion of Control(IoC)&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pomxml"&gt;
  &lt;/a&gt;
  pom.xml
&lt;/h3&gt;

&lt;p&gt;In the project folder, there will be a file called &lt;a href="https://javarevisited.blogspot.com/2017/06/10-maven-tips-java-developer-should-know.html"&gt;**‘pom.xml’&lt;/a&gt;**. This file is where we will be adding all the required dependencies.&lt;/p&gt;

&lt;p&gt;Now, the project structure will be as below-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mX8iF5OJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ArPf7v55UExPK1fsvGGpjgA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mX8iF5OJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ArPf7v55UExPK1fsvGGpjgA.png" alt="" width="413" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can check the project structure of the backend in the GitHub repository branch given below-&lt;br&gt;
&lt;a href="https://github.com/webtutsplus/ecommerce"&gt;&lt;strong&gt;GitHub — webtutsplus/ecommerce&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#overview-of-our-backend-application"&gt;
  &lt;/a&gt;
  Overview of our Backend Application
&lt;/h2&gt;

&lt;p&gt;In this Spring Application, following are important packages that you have to know before starting.&lt;/p&gt;

&lt;p&gt;This is spring architecture. The outside world calls the &lt;a href="https://medium.com/javarevisited/10-best-java-web-services-rest-soap-and-api-courses-for-beginners-724a8f51298d"&gt;REST APIs&lt;/a&gt;, which interact with the &lt;a href="https://javarevisited.blogspot.com/2017/08/difference-between-restcontroller-and-controller-annotations-spring-mvc-rest.html#ixzz6OYNB9oii"&gt;controller&lt;/a&gt;, which interacts with the Service. Service calls the repository.&lt;/p&gt;

&lt;p&gt;The repository interacts with the database. We follow this pattern to make the codebase maintainable, instead of having spaghetti code, which can be a nightmare in long term.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JIEToOE4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AaCDU4twFx5VuwdIyebYcdw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JIEToOE4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AaCDU4twFx5VuwdIyebYcdw.png" alt="" width="851" height="615"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#model-entity"&gt;
  &lt;/a&gt;
  Model / Entity
&lt;/h2&gt;

&lt;p&gt;Model is the basic entity that has a direct relationship with the structure of a table in the &lt;a href="https://medium.com/javarevisited/top-10-free-courses-to-learn-microsoft-sql-server-and-oracle-database-in-2020-6708afcf4ad7"&gt;database&lt;/a&gt;. In other words, these models serve as containers that hold similar and relative data that are used to transport these data from clients to the database. User Profile, Product, and Category are some models in our backend application.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#repository"&gt;
  &lt;/a&gt;
  Repository
&lt;/h2&gt;

&lt;p&gt;Repository is an interface that acts as a bridge between the database and the application. It carries the model data to and from the database. Every model will have a unique repository for the data transportation.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#service"&gt;
  &lt;/a&gt;
  Service
&lt;/h2&gt;

&lt;p&gt;Service is the part of the architecture where the repository is instantiated, and business logic is applied. The data from the client reaching here is manipulated and sent through the repository to the database.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#controller"&gt;
  &lt;/a&gt;
  Controller
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://javarevisited.blogspot.com/2017/11/difference-between-component-service.html"&gt;controller &lt;/a&gt;is the part of the architecture where the requests from the clients are first handled. It controls the processes that should run on the backend and the response that has to be elicited to the clients. It interacts with the service which in turn interacts with the repository which in turn interacts with the database using models.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#journey-of-data"&gt;
  &lt;/a&gt;
  Journey of Data
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BxpZfCE4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3594/1%2Aid0h3W4lWbFo8i-9BPGkCg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BxpZfCE4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3594/1%2Aid0h3W4lWbFo8i-9BPGkCg.png" alt="How the data moves" width="880" height="460"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#designing-the-category-api"&gt;
  &lt;/a&gt;
  Designing the Category API
&lt;/h2&gt;

&lt;p&gt;Once we have the basic structure ready, it is time to add some product and categories for our ecommerce store.&lt;/p&gt;

&lt;p&gt;Take as an example, we can have a category of shoe and have different types of shoes as product. So one category can have many products, but each product will belong to one category.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#model"&gt;
  &lt;/a&gt;
  Model
&lt;/h2&gt;

&lt;p&gt;First we will create a model, Category It will have four fields.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;id&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;categoryName&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;description&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;imageUrl&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We will also create a setter and getter for the four fields.&lt;/p&gt;

&lt;p&gt;It will have a corresponding table categories in the &lt;a href="https://medium.com/javarevisited/8-free-oracle-database-and-sql-courses-for-beginners-f4e9b25b33c4"&gt;database&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
We are using @NotBlank annotation for the category. For that, we have to include the following dependency in pom.xml file.&lt;br&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    &amp;lt;dependency&amp;gt;

      &amp;lt;groupId&amp;gt;javax.validation&amp;lt;/groupId&amp;gt;

      &amp;lt;artifactId&amp;gt;validation-api&amp;lt;/artifactId&amp;gt;

    &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#repository"&gt;
  &lt;/a&gt;
  Repository
&lt;/h2&gt;

&lt;p&gt;Now we will create a repository Categoryrepository.java that will extend JpaRepository.&lt;/p&gt;

&lt;p&gt;It will have a method findByCategoryName.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#service"&gt;
  &lt;/a&gt;
  Service
&lt;/h2&gt;

&lt;p&gt;Now we will create a CategoryService file that will be responsible to create, update or fetching repositories.&lt;/p&gt;

&lt;p&gt;The Categoryrepository has inbuilt methods findAll(), save() as it is extending JpaRepository&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#controller"&gt;
  &lt;/a&gt;
  Controller
&lt;/h2&gt;

&lt;p&gt;We will create a helper class ApiResponse.java, which will be used to return a response for the APIs.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
Now we will create the controller which will contain all the APIs

&lt;p&gt;We will create 3 APIs for category&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;create&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;update&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;list all category&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

We will also add swagger for easy testing of the code.
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

We need to also add these dependencies in pom.xml file for swagger and h2 in memory database. But you are free to choose any other database of your choice.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    &amp;lt;dependency&amp;gt;

      &amp;lt;groupId&amp;gt;io.springfox&amp;lt;/groupId&amp;gt;

      &amp;lt;artifactId&amp;gt;springfox-bean-validators&amp;lt;/artifactId&amp;gt;

      &amp;lt;version&amp;gt;2.9.2&amp;lt;/version&amp;gt;

    &amp;lt;/dependency&amp;gt;

    &amp;lt;dependency&amp;gt;

      &amp;lt;groupId&amp;gt;io.springfox&amp;lt;/groupId&amp;gt;

      &amp;lt;artifactId&amp;gt;springfox-swagger2&amp;lt;/artifactId&amp;gt;

      &amp;lt;version&amp;gt;2.9.2&amp;lt;/version&amp;gt;

    &amp;lt;/dependency&amp;gt;

    &amp;lt;dependency&amp;gt;

      &amp;lt;groupId&amp;gt;io.springfox&amp;lt;/groupId&amp;gt;

      &amp;lt;artifactId&amp;gt;springfox-swagger-ui&amp;lt;/artifactId&amp;gt;

      &amp;lt;version&amp;gt;2.9.2&amp;lt;/version&amp;gt;

    &amp;lt;/dependency&amp;gt;

    &amp;lt;dependency&amp;gt;

      &amp;lt;groupId&amp;gt;com.h2database&amp;lt;/groupId&amp;gt;

      &amp;lt;artifactId&amp;gt;h2&amp;lt;/artifactId&amp;gt;

      &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;

    &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We also have to modify our application.properties file by adding the lines&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    spring.datasource.url=jdbc:h2:mem:testdb

    spring.datasource.driverClassName=org.h2.Driver

    spring.datasource.username=sa

    spring.datasource.password=password

    spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, run the code and open &lt;a href="http://localhost:8080/swagger-ui.html"&gt;http://localhost:8080/swagger-ui.html&lt;/a&gt; page. We will see this screen&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7di4988T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ADmVIKGkSSW14pNJOcLe9-g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7di4988T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ADmVIKGkSSW14pNJOcLe9-g.png" alt="" width="774" height="587"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;Let’s create a category watch, with this request body. (Note: we do not need to pass id here, it will be auto created.)&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "categoryName": "watches",
  "description": "best watches",
  "imageUrl": "https://images.unsplash.com/photo-1524805444758-089113d48a6d?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=634&amp;amp;q=80"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DzO8UYAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ARRebmprvGLgUnrr53Fqr8g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DzO8UYAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ARRebmprvGLgUnrr53Fqr8g.png" alt="" width="861" height="505"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will get the response as below-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_CQ4O-pN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Aw91nIxx7X0dIU_g5QQPibA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_CQ4O-pN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Aw91nIxx7X0dIU_g5QQPibA.png" alt="" width="856" height="369"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let us hit the get API&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e4SkUPFf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2018/1%2A7rtYwUNeqt37NzAr-CyRYQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e4SkUPFf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2018/1%2A7rtYwUNeqt37NzAr-CyRYQ.png" alt="" width="880" height="519"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will get the following response-&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[
  {
    "id": 1,
    "categoryName": "watches",
    "description": "best watches",
    "imageUrl": "https://images.unsplash.com/photo-1524805444758-089113d48a6d?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=634&amp;amp;q=80"
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/wh3mDFB7OFg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#enable-cors"&gt;
  &lt;/a&gt;
  Enable CORS
&lt;/h2&gt;

&lt;p&gt;We will add the webconfig.java file, so that our &lt;a href="https://medium.com/javarevisited/6-best-frontend-development-courses-for-beginners-to-learn-in-2021-f2772157864"&gt;front end&lt;/a&gt; can hit the API.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Hurray! We can now play with the APIs and can create some new category, update and fetch all the categories.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#designing-the-product-api"&gt;
  &lt;/a&gt;
  Designing the Product API
&lt;/h2&gt;

&lt;p&gt;Now we have some categories, it is time to make the products APIs. First, we will create the model, then we will create the repository, then we will make the service and at the end, we will create the controller and test it.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/hUXfesLKl88"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#model"&gt;
  &lt;/a&gt;
  Model
&lt;/h2&gt;

&lt;p&gt;Product will have id, name, imageURL, price, description as well as a foreign key to category, as every product belong to a category.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Entity
@Table(name = "products")
public class Product {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    private @NotNull String name;
    private @NotNull String imageURL;
    private @NotNull double price;
    private @NotNull String description;

    @JsonIgnore
    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "category_id", nullable = false)
    Category category;


    public Product(String name, String imageURL, double price, String description, Category category) {
        super();
        this.name = name;
        this.imageURL = imageURL;
        this.price = price;
        this.description = description;
        this.category = category;
    }
// setters and getters
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#repository"&gt;
  &lt;/a&gt;
  Repository
&lt;/h2&gt;

&lt;p&gt;Next, we will create a file, ProductRepository.java in repository package, which will just extend &lt;a href="https://www.java67.com/2021/01/spring-data-jpa-interview-questions-answers-java.html"&gt;JpaRepository&lt;/a&gt;. If we need some methods, we will add it later&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.educative.ecommerce.repository;

import com.educative.ecommerce.model.Product;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface ProductRepository extends JpaRepository&amp;lt;Product, Integer&amp;gt; {

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#service"&gt;
  &lt;/a&gt;
  Service
&lt;/h2&gt;

&lt;p&gt;Now we are ready to create the service class. Create a file ProductService.java in service directory. It will have an autowired ProductRepository.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Service
public class ProductService {

@Autowired
    private ProductRepository productRepository;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#dto-concept"&gt;
  &lt;/a&gt;
  DTO concept&lt;a href="https://www.educative.io/pageeditor/5948990638522368/5499519291097088/5793128230944768#DTO-concept"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Before creating a product, we need to understand, what is a DTO (data transfer object)&lt;/p&gt;

&lt;p&gt;Martin Fowler introduced the concept of a Data Transfer Object (DTO) as an object that carries data between processes.&lt;/p&gt;

&lt;p&gt;In category controller, we directly used the model as request body, but that is not practical in many cases. We need to create a different object because&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;sometimes we might have to change the model, and we do not want to change the API for backward compatibility&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We can’t use the model as request body if it has relationship with another model.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So quickly, we will create a package &lt;em&gt;dto&lt;/em&gt; and inside the package we will create another package product, and there we will create our ProductDto.java class, which will have the following attributes&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;private Integer id;
private @NotNull String name;
private @NotNull String imageURL;
private @NotNull double price;
private @NotNull String description;
private @NotNull Integer categoryId;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We are also passing categoryId, because we need this to link a product with a category.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#controller"&gt;
  &lt;/a&gt;
  Controller
&lt;/h2&gt;

&lt;p&gt;Now as we have the productDto ready, now time to create ProductController.java class&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@RestController
@RequestMapping("/product")
public class ProductController {

@Autowired
    ProductService productService;
    @Autowired
    CategoryService categoryService;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;It will autowire ProductService and CategoryService&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-new-product-api"&gt;
  &lt;/a&gt;
  Create a new product API
&lt;/h2&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@PostMapping("/add")
    public ResponseEntity&amp;lt;ApiResponse&amp;gt; addProduct(@RequestBody ProductDto productDto) {
        Optional&amp;lt;Category&amp;gt; optionalCategory = categoryService.readCategory(productDto.getCategoryId());
        if (!optionalCategory.isPresent()) {
            return new ResponseEntity&amp;lt;ApiResponse&amp;gt;(new ApiResponse(false, "category is invalid"), HttpStatus.CONFLICT);
        }
        Category category = optionalCategory.get();
        productService.addProduct(productDto, category);
        return new ResponseEntity&amp;lt;&amp;gt;(new ApiResponse(true, "Product has been added"), HttpStatus.CREATED);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We will receive categoryId and product details from the request body.&lt;/p&gt;

&lt;p&gt;First, we will check if the categoryId is valid or return “category is invalid” error.&lt;/p&gt;

&lt;p&gt;Then we will create a product by calling method, productService.addProduct which takes productDto and category as arguments.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public void addProduct(ProductDto productDto, Category category) {
        Product product = getProductFromDto(productDto, category);
        productRepository.save(product);
    }

public static Product getProductFromDto(ProductDto productDto, Category category) {
        Product product = new Product();
        product.setCategory(category);
        product.setDescription(productDto.getDescription());
        product.setImageURL(productDto.getImageURL());
        product.setPrice(productDto.getPrice());
        product.setName(productDto.getName());
        return product;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The complete code can be found in the GitHub repository given below-&lt;br&gt;
&lt;a href="https://github.com/webtutsplus/ecommerce/tree/product-apis"&gt;&lt;strong&gt;GitHub — webtutsplus/ecommerce at product-apis&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And this marks the end of this tutorial. But wait! The tutorial series will continue for building the UI using &lt;a href="https://medium.com/javarevisited/top-5-online-courses-to-learn-vue-js-in-2021-249e66b60646"&gt;Vue.js&lt;/a&gt; for the above-developed backend application. Till that, stay tuned!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Happy Learning&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Continue to the next tutorial, where we will use the API to make a frontend using vue.js&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.plainenglish.io/lets-develop-an-e-commerce-application-from-scratch-using-spring-boot-and-vue-js-aca33bd76517"&gt;https://javascript.plainenglish.io/lets-develop-an-e-commerce-application-from-scratch-using-spring-boot-and-vue-js-aca33bd76517&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>vue</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
