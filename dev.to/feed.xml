<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Node JS React Soft Dashboard - Free Version</title>
      <author>Sm0ke</author>
      <pubDate>Mon, 11 Oct 2021 07:52:50 +0000</pubDate>
      <link>https://dev.to/sm0ke/node-js-react-soft-dashboard-free-version-1k5g</link>
      <guid>https://dev.to/sm0ke/node-js-react-soft-dashboard-free-version-1k5g</guid>
      <description>&lt;p&gt;Hello Coders!&lt;/p&gt;

&lt;p&gt;This article presents an open-source full-stack seed project crafted on top of &lt;a href="https://appseed.us/product/node-js-react-soft-dashboard"&gt;Soft UI Dashboard&lt;/a&gt; (free version) using &lt;strong&gt;React&lt;/strong&gt; and &lt;strong&gt;Node JS&lt;/strong&gt; for the backend logic. The product comes with a modern UI, a production-ready Node JS API backend and JWT Authentication flow for &lt;code&gt;login&lt;/code&gt;, &lt;code&gt;logout&lt;/code&gt;, &lt;code&gt;register&lt;/code&gt; actions. For newcomers, &lt;strong&gt;React&lt;/strong&gt; is a popular JavaScript library for coding user interfaces backed by Facebook, and &lt;strong&gt;Node JS&lt;/strong&gt; is an open-source, cross-platform, back-end JavaScript runtime environment. Thanks for reading!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/product/node-js-react-soft-dashboard"&gt;Node JS React Soft Dashboard&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://node-js-react-soft-dashboard.appseed-srv1.com/authentication/sign-in"&gt;Node JS React Soft Dashboard&lt;/a&gt; - LIVE demo&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a1yVyTtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sgf5bhh83xivmvht9rgf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a1yVyTtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sgf5bhh83xivmvht9rgf.gif" alt="Node JS React Soft Dashboard - open-source full-stack seed project."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This open-source full-stack product can be downloaded directly from Github and compiled locally with a few commands typed in the terminal. In order to successfully build the product, make sure the workstation environment has a &lt;a href="https://docs.appseed.us/content/tutorials/minimal-programming-kit"&gt;minimal programming kit&lt;/a&gt; already installed and accessible in the terminal: &lt;code&gt;Node JS&lt;/code&gt;, &lt;code&gt;GIT&lt;/code&gt;, and a modern editor like &lt;code&gt;Atom&lt;/code&gt; or &lt;code&gt;VsCode&lt;/code&gt;.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;How to build from &lt;a href="https://github.com/app-generator/react-soft-ui-dashboard"&gt;sources&lt;/a&gt; (published on Github, MIT License)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Clone and download the &lt;a href="https://github.com/app-generator/api-server-nodejs"&gt;Node JS API&lt;/a&gt; backend&lt;/li&gt;
&lt;li&gt;Start the API server on port &lt;code&gt;5005&lt;/code&gt; (default port)&lt;/li&gt;
&lt;li&gt;Clone and compile the &lt;a href="https://github.com/app-generator/react-soft-ui-dashboard"&gt;React Soft Dashboard UI&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Configure the frontend&lt;/code&gt; to communicate with the API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The frontend comes already configured to communicate with the API server using port 5000. For more information please access the product page that provides the link to the official documentation.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#soft-dashboard-ui-presentation"&gt;
  &lt;/a&gt;
  Soft Dashboard - UI Presentation
&lt;/h2&gt;

&lt;p&gt;This innovative design is crafted by Creative-Tim on top of Material-UI, the most popular components library for React. Soft UI Dashboard React is built with over 70 frontend individual elements, like buttons, inputs, navbars, nav tabs, cards, or alerts, giving you the freedom of choosing and combining. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.creative-tim.com/product/soft-ui-dashboard-react"&gt;Soft UI Dashboard React&lt;/a&gt; - product page (template version)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you want to get inspiration or just show something directly to your clients, you can jump-start your development with our pre-built example pages. Every page is spaced well, with attractive layouts and pleasing shapes. Soft UI Dashboard React has everything you need to quickly set up an amazing project.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hKr8WIv0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3w92j9uynib5kvas9rd4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hKr8WIv0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3w92j9uynib5kvas9rd4.png" alt="Node JS React Soft Dashboard - Login Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zHoJimiW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvijwrmbn9obhzcosqg1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zHoJimiW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvijwrmbn9obhzcosqg1.png" alt="Node JS React Soft Dashboard - Billing Page"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3mEtbuT1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m1jkigxvpmfvx5l4a4qr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3mEtbuT1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m1jkigxvpmfvx5l4a4qr.png" alt="Node JS React Soft Dashboard - RTL Sample Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for Reading!&lt;/strong&gt; For more resources, please access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/"&gt;AppSeed&lt;/a&gt; for more &lt;a href="https://appseed.us/apps/react"&gt;React Apps&lt;/a&gt; or support&lt;/li&gt;
&lt;li&gt;Free &lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards&lt;/a&gt; - a curated list published here on &lt;strong&gt;Dev.to&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>node</category>
      <category>fullstack</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Project management using Jira by Mad Devs
</title>
      <author>Mad Devs</author>
      <pubDate>Mon, 11 Oct 2021 07:51:52 +0000</pubDate>
      <link>https://dev.to/maddevs/project-management-using-jira-by-mad-devs-30ao</link>
      <guid>https://dev.to/maddevs/project-management-using-jira-by-mad-devs-30ao</guid>
      <description>&lt;p&gt;Gone are the days when we used spreadsheets to make project plans and manage projects. Now there are plenty of project management tools. At Mad Devs, we have chosen Atlassian’s Jira for efficient and transparent project management. However, not many project managers know that Jira is not just an efficient project management tool. It can be integrated with many other tools and services. It makes Jira unbeatable, indeed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://maddevs.io/insights/blog/how-to-automate-jira-mad-devs-experience/?utm_source=devto&amp;amp;utm_medium=pm-using-jira"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W8IXEO25--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vq4bk5lr3r5jksg7mit8.png" alt="How to automate Jira: Mad Devs experience"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the main reasons our team relies on Jira is the extensive functionality of the tool. Every project is unique and requires a special approach and a specific toolset for effective software project management with Jira. Jira provides us with an opportunity to choose the needed stack to plan, track, and release even the most complex projects. While there is not a single right way to organize a project in Jira (everything depends on a project), there are some best practices, and we want to share them with you. &lt;/p&gt;

&lt;p&gt;Here, we will check not only some common features (you might already know them anyway) but we will share with you some practices that we at Mad Devs use internally. They help our project management processes be clear, transparent, and efficient.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://maddevs.io/insights/blog/the-five-rules-when-we-work-with-jira/?utm_source=devto&amp;amp;utm_medium=pm-using-jira"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3vb5iko--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s3a35w4oyasn8w42x0q0.png" alt="5 Rules: How to work with Jira to drive results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scrum-or-kanban-choose-depending-on-a-project"&gt;
  &lt;/a&gt;
  Scrum or Kanban? Choose depending on a project
&lt;/h2&gt;

&lt;p&gt;Jira offers the smooth utilization of the extensive functionality of Scrum and Kanban boards. Scrum and Kanban can be used separately or we combine them if we see that it is better for the project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kanban-is-used-to-visualize-the-workflow"&gt;
  &lt;/a&gt;
  Kanban is used to visualize the workflow
&lt;/h3&gt;

&lt;p&gt;Kanban boards are used when a team prefers to start working on a project without a detailed plan or when we need to visualize the workflow.&lt;/p&gt;

&lt;p&gt;A Kanban board is basically a To-Do, Doing, and Done board. A Kanban workflow organizes tasks in a way to ensure the work moves on. Team members just move the tasks from one status into another while working on them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rYYpx-6x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.prismic.io/superpupertest/988b7828-9c98-4694-a6ac-bea3e121b8ec_Kanban.jpeg%3Fauto%3Dcompress%2Cformat" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rYYpx-6x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.prismic.io/superpupertest/988b7828-9c98-4694-a6ac-bea3e121b8ec_Kanban.jpeg%3Fauto%3Dcompress%2Cformat" alt="Kanban board"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Jira, you can add layers for specific clients, deliverables, and products. In other words, you can customize it and make it as detailed as you need.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scrum-is-used-to-plan-the-work-in-detail"&gt;
  &lt;/a&gt;
  Scrum is used to plan the work in detail
&lt;/h3&gt;

&lt;p&gt;We use Scrum boards for projects where we need to plan everything in detail. A scrum takes place over a specific time period. This time period is called a sprint. One sprint might take 1 or 2 weeks, depending on the project.&lt;/p&gt;

&lt;p&gt;The team checks daily the progress to ensure the tasks within the sprint are completed and identify possible bottlenecks and issues. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RkqkMAHJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.prismic.io/superpupertest/7352fffe-2904-4325-961c-91b490c05c5a_Scrum.jpeg%3Fauto%3Dcompress%2Cformat" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RkqkMAHJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.prismic.io/superpupertest/7352fffe-2904-4325-961c-91b490c05c5a_Scrum.jpeg%3Fauto%3Dcompress%2Cformat" alt="Scrum board"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-we-use-scrum"&gt;
  &lt;/a&gt;
  How do we use scrum?
&lt;/h2&gt;

&lt;p&gt;When a project in Scrum is created, we need to arrange some things there. At this stage, your backlog is empty. There, we create user stories, or tasks, or bug issues. Just to make sure: user stories are used to describe tasks or work items. You do it in non-technical language, from a user’s perspective. For example, it can sound like this:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I want to be able to create an account.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If we observe patterns in user stories or there are too many of them, we create epics. In epics, we show all the dependencies between the tasks, or user stories. Without creating epics, a project manager would arrange all the tasks into a roadmap manually. Guess how much time it might take? Well, a lot… That’s why we use epics. It allows to display all the tasks in a beautiful roadmap, just like this one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N68pRImq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.prismic.io/superpupertest/88b00664-a68e-4341-888f-fae1c95ef705_roadmap-2.jpeg%3Fauto%3Dcompress%2Cformat" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N68pRImq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.prismic.io/superpupertest/88b00664-a68e-4341-888f-fae1c95ef705_roadmap-2.jpeg%3Fauto%3Dcompress%2Cformat" alt="Roadmap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on Epic to expand it and see all tasks and stories related to it. And also, if your manager knows how to handle connections, real magic will happen, and you will see relationships between tasks and possible blockers:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3MmhNdCr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.prismic.io/superpupertest/e80807d9-d1b8-4cb4-ad9e-08f4f61676d4_roadmap.jpeg%3Fauto%3Dcompress%2Cformat" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3MmhNdCr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.prismic.io/superpupertest/e80807d9-d1b8-4cb4-ad9e-08f4f61676d4_roadmap.jpeg%3Fauto%3Dcompress%2Cformat" alt="Blockers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can connect tasks in the same epic or within several epics. It allows us to find faster tasks related to their field, tasks assigned to a specific person, priority, and whatever else you want to highlight. With it, we provide the team with the needed information right away by saving their time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sprint-planning"&gt;
  &lt;/a&gt;
  Sprint planning
&lt;/h3&gt;

&lt;p&gt;A sprint is a period of time within which we need to complete a predetermined set of tasks. A sprint can be one, two, three, or even four weeks long. We prefer two-week sprints because they aren’t too short and allow us to manage a good part of the work. They also allow us to regularly control the processes and check whether we are moving in the right direction. Though we don’t exclude the other periods for sprints, too, depending on the project specifics. &lt;/p&gt;

&lt;p&gt;When a sprint starts, we organize sprint planning meetings with our team. During the meeting, we discuss the sprint goals and stories that are prioritized in the backlog. The &lt;a href="https://maddevs.io/customer-university/differences-between-software-engineers-seniority-levels/?utm_source=devto&amp;amp;utm_medium=pm-using-jira"&gt;development team&lt;/a&gt; creates the tasks they need to complete. Then, we commit to complete a specific number of tasks within the sprint.&lt;/p&gt;

&lt;p&gt;Here, we would mention one important thing to focus on:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;We use the estimate of tasks for all the above purposes, but we never use them to judge people or measure a team's productivity. We use them to understand how big the work volume is and how to prioritize it correctly.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once everything is prepared, a sprint starts. We have our own practices of organizing standups, retrospective meetings, and following all other stages needed to handle the tasks within a sprint. &lt;a href="https://maddevs.io/insights/blog/effective-virtual-meetings/?utm_source=devto&amp;amp;utm_medium=pm-using-jira"&gt;You can read about them in our article here&lt;/a&gt;. And here, we move to other important aspects of Jira project management with Mad Devs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://maddevs.io/insights/blog/how-to-automate-tasks-estimation-in-jira/?utm_source=devto&amp;amp;utm_medium=pm-using-jira"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IUsSxJQx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tpyijy82xdiiy758lvzo.png" alt="How to automate tasks estimation in JIRA"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backlog-grooming-is-easy-with-jira"&gt;
  &lt;/a&gt;
  Backlog grooming is easy with Jira
&lt;/h2&gt;

&lt;p&gt;We make sure to review, prioritize, and update the backlog regularly, and remove the tasks that are outdated. This process is called backlog grooming, and with it, we ensure that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We keep the backlog clean to make it easier for team members to navigate through the backlog items and contribute efficiently. &lt;/li&gt;
&lt;li&gt;We keep the backlog relevant, well-documented, and prioritized in accordance with the project requirements and team needs.&lt;/li&gt;
&lt;li&gt;The backlog provides the team an opportunity to be aligned when we are working on new features, fixing bugs, or performing some other product-related activities.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Only if the backlog grooming is performed constantly and appropriately, we can prioritize our tasks properly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-best-practices-from-mad-devs-on-workflow-management"&gt;
  &lt;/a&gt;
  The best practices from Mad Devs on workflow management
&lt;/h2&gt;

&lt;p&gt;A standard workflow in Jira looks like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To Do (work that hasn’t started yet)&lt;/li&gt;
&lt;li&gt;In Progress (work that is being looked at by the team)&lt;/li&gt;
&lt;li&gt;Code Review (work that is done and waiting for review)&lt;/li&gt;
&lt;li&gt;Done (work that is done).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jira is a highly customizable tool. Workflows can be customized depending on a project, the stack used by a team, or the way the team is used to work. &lt;/p&gt;

&lt;p&gt;We can change the names of the processes or add additional processes such as Awaiting for QA, Tested, or just whatever we need. Our aim here is to make the workflows easy to use for every team member, transparent, and clear. Working processes are different from project to project. We describe all our working processes in &lt;a href="https://maddevs.io/clients/case-studies/?utm_source=devto&amp;amp;utm_medium=pm-using-jira"&gt;case studies&lt;/a&gt; which are published on our website. &lt;/p&gt;

&lt;p&gt;We also consider such factors as metrics to be reported in the worklog. We have developed some practices to make our working processes smooth, improve the productivity of each team member, and make the processes transparent and traceable. Wanna learn more about how we do it? Read on!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://maddevs.io/insights/blog/reasons-to-log-time/?utm_source=devto&amp;amp;utm_medium=pm-using-jira"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i-Te7i3E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yvif9b68w2226hu2f7x4.png" alt="Top reasons to log time"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We break down big tasks into smaller subtasks&lt;/p&gt;

&lt;p&gt;Here, I would start with an example.&lt;/p&gt;

&lt;p&gt;Imagine you are a developer. A project manager is asking you how much time you need to develop a website page. You, after thinking for a while, give an estimate of approximately two days.&lt;/p&gt;

&lt;p&gt;Do you think it is the right approach? And if not, who is not right here?&lt;/p&gt;

&lt;p&gt;Well, the approach is not correct. Without subdividing the task and checking its components, it is impossible to assess what time it might take. Also, if it appears later that there were some blockers, some details that cannot be done without the help or participation of other team members, the time needed to complete the task will be much higher than the initial estimate. So, a developer is making a mistake by giving an assessment without subdividing the task into subtasks and checking details.&lt;/p&gt;

&lt;p&gt;The project manager also shouldn't have trusted such an assessment. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;What do we do to avoid incorrect assessments and mistakes or at least eliminate them?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;From the example, you could have guessed it already: we divide big tasks into smaller subtasks. With it, we pursue two goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We can assess more accurately how much time we need for a small task and thus, provide a more exact estimate for the entire task.&lt;/li&gt;
&lt;li&gt;We can discover all black boxes and check whether somebody else’s participation is needed to complete the task.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Along with these purely practical reasons, dividing a big task into smaller chunks has one more purpose. When we see a huge task, we might become worried. It leads to the loss of focus, and in worst cases, to a complete confusion and even to a depression (yes, in the very direct sense). However, when we divide this huge task into small chunks, we see how we can handle those small chunks one by one. So, the task doesn’t look so scary anymore. Along with huge psychological relief, we get one more benefit: a detailed plan on how to work on the task.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://maddevs.io/insights/blog/time-tracking-in-software-development/?utm_source=devto&amp;amp;utm_medium=pm-using-jira"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VoBK8pUn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01kxhojlrjjbnjm38fsx.png" alt="Time tracking in software development"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#worklogs-are-the-proof-of-what-you-have-done"&gt;
  &lt;/a&gt;
  Worklogs are the proof of what you have done
&lt;/h3&gt;

&lt;p&gt;Another must-to-be process is writing worklogs. In worklogs, we write the result of a piece of work. We note the time we spent and describe what we have been during the time. Our task is to write a worklog as clear as possible for a reader who may not be a technical expert. In clearly formulated, understandable sentences, we describe what we managed to do in the time spent. At the same time, writing a worklog that is too large in the form of an essay is also not worth it. It is worth remembering that links to documents, code, and whatever is confidential, in worklogs are NOT mentioned. Yeah, security is above all, as long as we work with confidential information.&lt;/p&gt;

&lt;p&gt;How often do we write worklogs? Optimally, they shall be written as frequently as possible. We recommend writing them at least every 2 hours. We understand that sometimes, people are busy with a task and any interruption causes delays. That’s why we log time every 2 hours and not every 30 minutes, for example. After 2 hours of hard work, people tend to start procrastinating or switch to activities not connected to work. So, this frequency of time logging allows them not to get distracted. &lt;/p&gt;

&lt;p&gt;You might be wondering how one can log time every two hours if there is a meeting with a client, for example. We have it in writing. Yes, this principle: &lt;strong&gt;what is not written down - never happened&lt;/strong&gt;, we apply it to everything. So, we have a clear explanation in what cases we may not write worklogs as frequently as indicated. But after the meeting is over, a worklog is needed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#we-write-comments"&gt;
  &lt;/a&gt;
  We write comments
&lt;/h3&gt;

&lt;p&gt;You might be thinking now: why shall I write comments if I write worklogs??!! However, comments are needed, and we write them constantly. &lt;/p&gt;

&lt;p&gt;Comments are one of the main communication tools in a team. Every team member who is working on the same task or whose task is connected with yours, can open your task, and find all the needed information from your comments. So, instead of contacting you and asking for one or another detail, they can just open the task and see everything there. It saves time both yours and theirs. &lt;/p&gt;

&lt;p&gt;What do we comment on? We comment on everything we are doing. What does it give us? It allows us to benefit in many different ways: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We get a lot of information that can be used for feature documentation. &lt;/li&gt;
&lt;li&gt;We liberate our brains from excessive information by writing it down. It also helps us to keep track of our activities and focus on the needed direction.&lt;/li&gt;
&lt;li&gt;We document all that we discuss with somebody when we ask for something or during a meeting. If we have tried to solve an issue in several ways and haven’t found a solution, we also note it in a respective ticket. &lt;/li&gt;
&lt;li&gt;Imagine that you have made a feature, and after some years of use, it broke down. You do not remember what you have been doing there. But when you open the comments, you can check the entire process step by step. &lt;/li&gt;
&lt;li&gt;Properly written comments are your safety. If you write down everything you are doing and later, a conflict arises, you can show the ticket with your comments to prove that you have been doing something. &lt;strong&gt;What is not written down - never happened&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;Finally, by writing comments, you make the process clearer not only to the team but also to yourself.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#we-use-the-extensive-range-of-jira-integrations"&gt;
  &lt;/a&gt;
  We use the extensive range of Jira integrations
&lt;/h2&gt;

&lt;p&gt;Have you ever thought that it would be so cool to have a tool that turns your ideas that you share in a team’s messenger into tasks? &lt;/p&gt;

&lt;p&gt;We communicate with the team in Slack. And we have an opportunity to turn messages into trackable tasks in Jira. Yes, I am talking now about Jira integration with Slack. Messages in the chat create responses in Jira tickets, and comments in Jira tickets are displayed in Slack in a special thread. You can check all the processes without opening Jira, everything is available in Slack and is updated in real-time mode.&lt;/p&gt;

&lt;p&gt;We are also alerted if somebody has a worklog that is bigger or smaller than needed, and if the tasks aren’t updated for too long (several days). &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jira-integrations-with-gitlab-and-github-are-precious"&gt;
  &lt;/a&gt;
  Jira integrations with GitLab and GitHub are precious
&lt;/h3&gt;

&lt;p&gt;Jira integration with GitHub makes project management with Jira much simpler. It is not surprising that we use this option. It allows us to get updates and links about what is going on with our repositories in Jira tasks for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pull requests&lt;/li&gt;
&lt;li&gt;Builds&lt;/li&gt;
&lt;li&gt;Commits&lt;/li&gt;
&lt;li&gt;Deployments.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So we can take actions in Jira directly, without leaving our development workflow. Integration with GitLab enables the synchronization of projects, workflows, issues, comments, and streamlining the collaboration across teams.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jira-webhooks"&gt;
  &lt;/a&gt;
  Jira webhooks
&lt;/h2&gt;

&lt;p&gt;When a certain event on Jira occurs, a webhook delivers data as soon as it happens. It means that we get the data immediately. So, Jira webhooks provide us with a mechanism to let remote applications receive push notifications from Jira.&lt;/p&gt;

&lt;p&gt;How do we use webhooks? &lt;/p&gt;

&lt;p&gt;We can either give them access to activity across all the projects in Jira or customize them to give them access, say, to issue types or to issues of a specific project only. In the second case, we will get data about events in an indicated project only while ignoring those that occur in not-predetermined instances. &lt;/p&gt;

&lt;p&gt;So, webhooks can be used for a range of purposes such as data parsing or creating custom Jira-oriented bots. We use them for your projects and we develop them for our clients, too. &lt;/p&gt;

&lt;p&gt;Jira offers a toolset too extensive to describe all the features and integrations. We have described here just some of them, the tip of the iceberg, so to say. For every project, even the most unique and complex one, Jira can be configured in a way to help your specialists handle the project efficiently and without excessive stress. Does it sound too good to be true? At Mad Devs, our project managers can do it. So, if you are looking for a project manager who can handle any project in a perfect way, here is the right place to do so.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://maddevs.io/services/?utm_source=devto&amp;amp;utm_medium=pm-using-jira"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3T-lr6Qe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gqft8qdd71sxl5cd5g6p.png" alt="software engineering and mobile app development services"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#we-use-the-extensive-jira-features-set"&gt;
  &lt;/a&gt;
  We use the extensive Jira features set
&lt;/h2&gt;

&lt;p&gt;You know already that the toolset that Jira offers is immense. It is one of the reasons why we work with Jira. We can choose just any tools that we need to comply with project requirements and make project management as effortless and smooth as possible. While many of Jira’s integrations and features are free, there are also paid ones. Telling about every feature would take too much time, moreover, some of them are rarely used - only in specific projects. That’s why we have chosen one of them - our favourite.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bigpicture"&gt;
  &lt;/a&gt;
  BigPicture
&lt;/h3&gt;

&lt;p&gt;BigPicture project management is not used extensively in our company. Why do we want to tell more about it? &lt;/p&gt;

&lt;p&gt;While smaller projects can be easily managed with the most common functionality, things complicate when you have to manage complex projects with a lot of tasks and dependencies. Here is when BigPicture comes in handy. Even though we don’t use BigPicture on a daily basis, we use it for the most demanding projects - banking systems, security systems and other. &lt;/p&gt;

&lt;p&gt;This feature allows us to create a global plan for some projects by creating a detailed plan of their realization regarding timelines and specialists. In detail, it allows us to:&lt;/p&gt;

&lt;p&gt;Structurize tasks depending on their deadlines, assessments, and dependencies. &lt;br&gt;
It provides us with a clear and precise portfolio view and allows us to monitor the processes of our undertakings at all levels.&lt;br&gt;
Builds a powerful Gantt diagram that allows us to plan and manage all our tasks in a single workspace (it displays Jira tasks on a timeline as coloured bars of different lengths. It also adds dependencies on the chart). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AYrmqnG3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.prismic.io/superpupertest/c473dd3f-d6c6-45e6-8008-8b121b1db59e_bigpic2.png%3Fauto%3Dcompress%2Cformat" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AYrmqnG3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.prismic.io/superpupertest/c473dd3f-d6c6-45e6-8008-8b121b1db59e_bigpic2.png%3Fauto%3Dcompress%2Cformat" alt="Example of BigPicture from Atlassian Marketplace"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#managing-a-project-without-project-management-software"&gt;
  &lt;/a&gt;
  Managing a project without project management software
&lt;/h2&gt;

&lt;p&gt;What if there were no Jira or other project management software? There were times when we used to do many things manually anyway. Would it be possible nowadays? &lt;/p&gt;

&lt;p&gt;If you don’t have active project management software, the business will end up with:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Failing to meet the expectations and requirements of shareholders even with the best team&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Without project management software, it is impossible to prioritize tasks, manage the available resources wisely, and change the business environment when required. It leads to failures to meet deadlines, the loss of trust in your team, and the loss of business in the long term.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://maddevs.io/customer-university/why-it-projects-are-late-and-exceed-budgets/?utm_source=devto&amp;amp;utm_medium=pm-using-jira"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CgGSYJ84--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7l2o76jarm0xxmgvvh04.png" alt="Here is why IT projects are late and exceed budgets"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-lack-of-visibility"&gt;
  &lt;/a&gt;
  The lack of visibility
&lt;/h3&gt;

&lt;p&gt;How can you manage multiple tasks by using spreadsheets only? Without proper project management software, you cannot see the real-time schedule, and use a lot of time and energy to follow the workflow. The absence of a project management software means the absence of a proper tool to anticipate risks and plan measures to prevent them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-credibility"&gt;
  &lt;/a&gt;
  No credibility
&lt;/h3&gt;

&lt;p&gt;If you don’t have a tool to upload tasks, allocate resources, produce reports, and complete other tasks, the business stops being credible. In turn, it means loss of clients and financial losses.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bottom-line"&gt;
  &lt;/a&gt;
  Bottom Line
&lt;/h2&gt;

&lt;p&gt;Jira is an efficient project management tool for Agile teams. With an efficient working area, enhanced visibility into the project status, configurable workflows, and multiple integrations and additional features, it offers everything that is needed for efficient project management.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://maddevs.io/services/?utm_source=devto&amp;amp;utm_medium=pm-using-jira"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ukhBRTM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/18nhohca9kvbmbeyz42e.png" alt="Software Development"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Previously published at &lt;a href="https://maddevs.io/insights/blog/project-management-using-jira/?utm_source=devto&amp;amp;utm_medium=pm-using-jira"&gt;maddevs.io/blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>management</category>
    </item>
    <item>
      <title>7 Formats for Great Team Retrospectives</title>
      <author>Lars Grammel</author>
      <pubDate>Mon, 11 Oct 2021 07:47:06 +0000</pubDate>
      <link>https://dev.to/lgrammel/7-formats-for-great-team-retrospectives-ogo</link>
      <guid>https://dev.to/lgrammel/7-formats-for-great-team-retrospectives-ogo</guid>
      <description>&lt;p&gt;A team retrospective is a meeting at the end of a sprint, project, or milestone where the &lt;strong&gt;team reflects on the past work cycle and identifies improvements&lt;/strong&gt;. It involves celebrating achievements to raise the team spirit, gathering feedback on challenges, and planning how to execute better in upcoming sprints or projects. Retrospectives are essential for continuous improvement and team growth.&lt;/p&gt;

&lt;p&gt;Retrospective meetings are &lt;strong&gt;structured to facilitate team discussions and beneficial outcomes&lt;/strong&gt;. They usually start with an introduction, then input from each team member is gathered, presented, and discussed, and finally, the next steps are determined. Gathering input usually happens in parallel. Guided by the questions of a retrospective format, each team member writes up their thoughts on sticky notes and puts them on a whiteboard (or the digital equivalent in remote meetings).&lt;/p&gt;

&lt;p&gt;I've had the opportunity to participate in, facilitate and experiment with several retrospective formats. Some formats are better for &lt;strong&gt;regular occurrences&lt;/strong&gt;, e.g., at the end of sprints, and others can be great to &lt;strong&gt;mix things up&lt;/strong&gt;, e.g., after finishing a large project. Here are my thoughts on and experiences with seven retrospective formats that you can use regularly:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-standard"&gt;
  &lt;/a&gt;
  The Standard
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;What went well? &lt;/li&gt;
&lt;li&gt;What did not go well? &lt;/li&gt;
&lt;li&gt;What can we improve? &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The standard format covers the main areas (positives, negatives, and improvements) with &lt;strong&gt;solid questions&lt;/strong&gt; and is &lt;strong&gt;easy to understand&lt;/strong&gt;. However, it &lt;strong&gt;can get boring&lt;/strong&gt; over time, and a tendency to focus on negative experiences and improvements can cause &lt;strong&gt;celebrations&lt;/strong&gt; to &lt;strong&gt;fall short&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-standard-with-token-of-appreciation"&gt;
  &lt;/a&gt;
  The Standard with Token of Appreciation
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;What went well? &lt;/li&gt;
&lt;li&gt;What did not go well? &lt;/li&gt;
&lt;li&gt;What can we improve?&lt;/li&gt;
&lt;li&gt;Who do you appreciate for their contributions?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A variant of the Standard retrospective that helps &lt;strong&gt;appreciate the team and its achievements&lt;/strong&gt; is the token of appreciation. In addition to the three questions, every team member can call out others for their contributions. They would then receive a token of appreciation (e.g., a flower or chocolate) and positive feedback from the team. This variant can help &lt;strong&gt;make the standard retrospective more positive and strengthen the team spirit&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#startstopcontinue"&gt;
  &lt;/a&gt;
  Start-Stop-Continue
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;What should we start?&lt;/li&gt;
&lt;li&gt;What should we stop?&lt;/li&gt;
&lt;li&gt;What should we continue?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Start-Stop-Continue is another widespread retrospective format. It is very &lt;strong&gt;solution-oriented&lt;/strong&gt; and &lt;strong&gt;focuses on changes&lt;/strong&gt; in the form of starting and stopping activities. Positives and negatives are discussed for that purpose when needed.&lt;/p&gt;

&lt;p&gt;The strength of Start-Stop-Continue is that it aims in on changes and leaves room for bringing in new ideas. However, this retrospective format &lt;strong&gt;might not go deeply into causes and problems&lt;/strong&gt;, which may or may not be desired. Another drawback is that celebration and appreciation are not a direct part of this format.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#starfish"&gt;
  &lt;/a&gt;
  Starfish
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;What should we start?&lt;/li&gt;
&lt;li&gt;What should we do more?&lt;/li&gt;
&lt;li&gt;What should we continue?&lt;/li&gt;
&lt;li&gt;What should we do less?&lt;/li&gt;
&lt;li&gt;What should we stop?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href="https://www.funretrospectives.com/starfish/"&gt;Starfish retrospective&lt;/a&gt; is an &lt;strong&gt;extension of Start-Stop-Continue&lt;/strong&gt;. It adds the "What should we do more?" and "What should we do less?" questions that often come up. Typically it is represented by splitting the whiteboard into five areas (the starfish), and the team members put up their sticky notes in the corresponding regions.&lt;/p&gt;

&lt;p&gt;While the Starfish retrospective improves on Start-Stop-Continue, it still &lt;strong&gt;lacks in the problem and appreciation areas&lt;/strong&gt;. In addition, having to categorize ideas into do less vs. stop upfront is often not helpful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4l"&gt;
  &lt;/a&gt;
  4L
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;What did you like? &lt;/li&gt;
&lt;li&gt;What have you learned? &lt;/li&gt;
&lt;li&gt;What was lacking? &lt;/li&gt;
&lt;li&gt;What did you long for? &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href="https://conceptboard.com/blog/4l-retrospective-technique/"&gt;4L retrospective&lt;/a&gt; is &lt;strong&gt;more positive&lt;/strong&gt; than the Standard retrospective, and it &lt;strong&gt;encourages knowledge sharing&lt;/strong&gt; through the "What have you learned?" question.&lt;/p&gt;

&lt;p&gt;In practice, the difference between "lacking" and "long for" is relatively small and unclear, and there is a &lt;a href="https://www.funretrospectives.com/the-3-ls-liked-learned-lacked/"&gt;3L retrospective&lt;/a&gt; that leaves out the "What did you long for?" question.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#madsadglad"&gt;
  &lt;/a&gt;
  Mad-Sad-Glad
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;What made you mad?&lt;/li&gt;
&lt;li&gt;What made you sad?&lt;/li&gt;
&lt;li&gt;What made you happy?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Mad-Sad-Glad retrospective format uses the &lt;strong&gt;team members' emotions&lt;/strong&gt; to draw out problems, identify positives, and build team cohesion that way. Mad-Sad-Glad can work well when used on occasion.&lt;/p&gt;

&lt;p&gt;However, when used every cycle, it &lt;strong&gt;can lead to repeated venting and frustrations&lt;/strong&gt;, especially when some of the issues that make team members unhappy are outside the team's control and not easily changeable. In this case, the team might focus on their negative emotions more than on improving things under their control.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#happydiscussimprove"&gt;
  &lt;/a&gt;
  Happy-Discuss-Improve
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;What was I happy with?&lt;/li&gt;
&lt;li&gt;What ideas and topics would I like to discuss?&lt;/li&gt;
&lt;li&gt;What do I think needs to be improved?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Happy-Discuss-Improve retrospective is a format that my team and I came up with after experiences with the above formats. It creates a &lt;strong&gt;positive atmosphere of appreciation, improvement, and openness&lt;/strong&gt; needed to bring in new ideas and discuss problems. Wording the questions from the "I" perspective emphasizes that everyone has their own viewpoints and supports a balanced discussion. &lt;/p&gt;

&lt;p&gt;Overall we were very happy with this format. It worked well for remote retrospectives. One possible enhancement to Happy-Discuss-Improve could be to add a token of appreciation.&lt;/p&gt;

&lt;p&gt;There are many different retrospective formats and I have only described a small subset. &lt;strong&gt;Which team retrospectives work best for you and what do you like about them?&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>discuss</category>
      <category>productivity</category>
      <category>career</category>
    </item>
    <item>
      <title>My Pain with AWS Amplify</title>
      <author>JoLo</author>
      <pubDate>Mon, 11 Oct 2021 07:30:19 +0000</pubDate>
      <link>https://dev.to/jolo/my-pain-with-aws-amplify-4jno</link>
      <guid>https://dev.to/jolo/my-pain-with-aws-amplify-4jno</guid>
      <description>&lt;p&gt;&lt;a href="https://aws.amazon.com/amplify/"&gt;AWS Amplify&lt;/a&gt; is a set of tools and services to build full stack applications based on AWS.&lt;br&gt;
Its &lt;a href="https://docs.amplify.aws/cli/"&gt;CLI&lt;/a&gt; helps to integrate and manage different AWS services with your frontend or mobile techstack such as React or Flutter.&lt;br&gt;
This is key when integrating &lt;a href="https://docs.aws.amazon.com/appsync/latest/devguide/what-is-appsync.html"&gt;AppSync&lt;/a&gt; for GraphQL or &lt;a href="https://aws.amazon.com/cognito/"&gt;Cognito&lt;/a&gt; for authentication.&lt;/p&gt;

&lt;p&gt;I've been working with AWS Amplify for quite some time and must say that in the beginning I was more cursing than loving it.&lt;br&gt;
Here are my pains and learnings I had with Amplify.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8aDFzAZI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghgtfd1qdgk6gbo73bvs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8aDFzAZI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghgtfd1qdgk6gbo73bvs.png" alt="Amplify Bash"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#monorepo-but-not"&gt;
  &lt;/a&gt;
  Monorepo but not
&lt;/h2&gt;

&lt;p&gt;Let's say you create a React app by following this &lt;a href="https://docs.amplify.aws/start/getting-started/setup/q/integration/react/"&gt;tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You have setup the Amplify CLI, had run &lt;code&gt;npx create-react-app react-amplified&lt;/code&gt; and &lt;code&gt;amplify init&lt;/code&gt; to integrate your React app with AWS Services.&lt;/p&gt;

&lt;p&gt;Now, you would be able to run &lt;code&gt;amplify add api&lt;/code&gt; to create a REST or GraphQL API. REST is possible with API Gateway and a Lambda or Fargate (since v6.0.0) whereas GraphQL could be set up with AppSync or Fargate.&lt;/p&gt;

&lt;p&gt;This gives you a lot of flexibility and in theory you could create a different tech stack for each endpoint.&lt;/p&gt;

&lt;p&gt;You could argue that this is sort of a Monorepo as you have your React app and your APIs wrapped in its own packages.&lt;br&gt;
However, sharing models or libs without manual tweaks is not possible (check out the next part of my series 😉).&lt;br&gt;
That could lead to different versions when using libs like &lt;a href="https://lodash.com/"&gt;_lodash&lt;/a&gt; and harm your local storage as you always have an individual &lt;code&gt;node_modules&lt;/code&gt; for each function.&lt;/p&gt;

&lt;p&gt;Fortunately, the CLI synthesizes and orchestrates your project 👌&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Personal Recommendation:&lt;/em&gt;&lt;/strong&gt; Use &lt;a href="https://pnpm.io/"&gt;PNPM&lt;/a&gt;  for all your JS-projects. That is not just faster but more efficient. Your machine will be thankful 😜&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#folder-bash"&gt;
  &lt;/a&gt;
  Folder Bash
&lt;/h2&gt;

&lt;p&gt;As above mentioned, you could create for each endpoint its own tech stack.&lt;/p&gt;

&lt;p&gt;However, when doing so, you end up with &lt;strong&gt;a lot of&lt;/strong&gt; folders and files. That could bloat your setup and your IDE when clicking through files.&lt;/p&gt;

&lt;p&gt;And if you create a REST endpoint with API Gateway and Lambda, Amplify will create folders within &lt;code&gt;api&lt;/code&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;code&gt;functions&lt;/code&gt;. The weird part is that you could name them differently... 🤪&lt;/p&gt;

&lt;p&gt;Fortunately, Amplify knows that the function is tightly coupled with an API but you as a developer may not 🤔&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Personal Recommendation:&lt;/em&gt;&lt;/strong&gt; A good structure is key and you should name your backend services appropriate so that others may understand what's inside. Also name your function like your endpoint or at least mark them with something you may identify later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#adding-other-aws-services"&gt;
  &lt;/a&gt;
  Adding other AWS Services
&lt;/h2&gt;

&lt;p&gt;For our use case, we needed to setup an SQS-queue.&lt;br&gt;
Unfortunately, the CLI does not support creating queues (yet) without modifying the Cloudformation- files.&lt;/p&gt;

&lt;p&gt;This is how I bootstraped an SQS-queue to our project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;amplify/backend/backend-config.json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;many&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;other&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Resources&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"queues"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"my-queue-name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"service"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"SQS"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="nl"&gt;"providerPlugin"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"awscloudformation"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;many&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;other&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Resources&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then creating a new folder structure&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;amplify
  &lt;span class="se"&gt;\b&lt;/span&gt;ackend
    &lt;span class="se"&gt;\q&lt;/span&gt;ueues
      &lt;span class="se"&gt;\m&lt;/span&gt;y-queue-name
        parameters.json
        template.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;template.json&lt;/code&gt; is a CloudFormation template, and &lt;code&gt;parameters.json&lt;/code&gt; is parameters file that will be passed to the cloudformation template.&lt;/p&gt;

&lt;p&gt;I got heavily inspired by &lt;a href="https://medium.com/@navvabian/how-to-add-an-sqs-queue-to-your-amplify-cli-bootstrapped-project-cb7781c636ed"&gt;Bardia's article&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hello-json"&gt;
  &lt;/a&gt;
  Hello Json
&lt;/h2&gt;

&lt;p&gt;In addition to the above mentioned point, you probably noticed the &lt;code&gt;.json&lt;/code&gt;- files which each folder will have. Those are the configuration files for Amplify. You can also put in your own Cloudformation template (CFN) in order to spin up the service.&lt;/p&gt;

&lt;p&gt;However, it can only use &lt;code&gt;json&lt;/code&gt;- Format, which is (in my opinion) more error-prone. Or if you want to integrate your own &lt;code&gt;yaml&lt;/code&gt;- CFN that wouldn't work and you need to convert it to &lt;code&gt;json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Luckily, there are tools for that.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Personal Recommendation:&lt;/em&gt;&lt;/strong&gt; Put a diagram and a &lt;code&gt;README.md&lt;/code&gt; in each folder. That would document your code and other developer would understand the purpose faster.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#removing-is-super-dangerous"&gt;
  &lt;/a&gt;
  Removing is super dangerous
&lt;/h2&gt;

&lt;p&gt;I had a situation where I created a function and then realised I misconfigured it. So I did &lt;code&gt;amplify remove function&lt;/code&gt;.&lt;br&gt;
That deleted the whole folder and me as an idiot did not save the code😱&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Personal Recommendation:&lt;/em&gt;&lt;/strong&gt; So pay attention when removing functions or APIs❗️❗️ Commit your code if you think it might be useful later.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Amplify is a great tool and it is nice to integrate your Frontend or Mobile tech with AWS Services and turn it to a fullstack application. &lt;/p&gt;

&lt;p&gt;However, I think you could easily bloat up your application and it can get messy real quickly. &lt;br&gt;
The key is to organise and structure your code base. Plus, you should make that aware for other developers by proper documentation.&lt;/p&gt;

&lt;p&gt;Still, Amplify does many things good and I can see the value of it. &lt;/p&gt;

&lt;p&gt;In my next part of this series, I will add Typescript- functions and turn the &lt;code&gt;function&lt;/code&gt;- folder to a Monorepo.&lt;/p&gt;

&lt;p&gt;Hope to see you there!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>amplify</category>
      <category>javascript</category>
    </item>
    <item>
      <title>2 Modules in Nebula Graph: Scheduler &amp; Executor</title>
      <author>lisahui</author>
      <pubDate>Mon, 11 Oct 2021 07:26:16 +0000</pubDate>
      <link>https://dev.to/lisahui/2-modules-in-nebula-graph-scheduler-executor-41g</link>
      <guid>https://dev.to/lisahui/2-modules-in-nebula-graph-scheduler-executor-41g</guid>
      <description>&lt;p&gt;You may have learned the optimizer of Nebula Graph’s query engine in the last article. In this article, we will introduce how the Scheduler and the Executor, the last two modules of the query engine, are implemented.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;In the execution phase, the execution engine uses the Scheduler to transform a physical execution plan, generated by the Planner, into a series of Executors to drive their execution. Each PlanNode in a physical execution plan has a corresponding Executor.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#structure-of-source-files"&gt;
  &lt;/a&gt;
  Structure of Source Files
&lt;/h2&gt;

&lt;p&gt;The source code of the Scheduler is under the src/scheduler directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src/scheduler
├── AsyncMsgNotifyBasedScheduler.cpp
├── AsyncMsgNotifyBasedScheduler.h
├── CMakeLists.txt
├── Scheduler.cpp
└── Scheduler.h
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Scheduler abstract class defines the common interfaces of the schedulers, which can inherit the features from the class to implement various types of schedulers. The AsyncMsgNotifyBasedScheduler scheduler has been implemented. By using the asynchronous message communication and breadth-first search algorithm, it can be prevented from stack overflow errors. The source code of the Executor is under the src/executor directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src/executor
├── admin
├── algo
├── CMakeLists.txt
├── ExecutionError.h
├── Executor.cpp
├── Executor.h
├── logic
├── maintain
├── mutate
├── query
├── StorageAccessExecutor.cpp
├── StorageAccessExecutor.h
└── test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#process"&gt;
  &lt;/a&gt;
  Process
&lt;/h2&gt;

&lt;p&gt;First, the Scheduler starts the traversal of the entire execution plan from its root node by using the breadth-first search algorithm and builds their notification mechanism according to the dependencies between nodes. During the execution phase, each node will be scheduled to be executed after being notified that all the nodes it depends on have been executed successfully. For a node, once executed, it will notify its dependent nodes until the entire plan is executed successfully.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;void AsyncMsgNotifyBasedScheduler::runExecutor(
    std::vector&amp;lt;folly::Future&amp;lt;Status&amp;gt;&amp;gt;&amp;amp;&amp;amp; futures,
    Executor* exe,
    folly::Executor* runner,
    std::vector&amp;lt;folly::Promise&amp;lt;Status&amp;gt;&amp;gt;&amp;amp;&amp;amp; promises) const {
    folly::collect(futures).via(runner).thenTry(
        [exe, pros = std::move(promises), this](auto&amp;amp;&amp;amp; t) mutable {
            if (t.hasException()) {
                return notifyError(pros, Status::Error(t.exception().what()));
            }
            auto status = std::move(t).value();
            auto depStatus = checkStatus(std::move(status));
            if (!depStatus.ok()) {
                return notifyError(pros, depStatus);
            }
            // Execute in current thread.
            std::move(execute(exe)).thenTry(
                [pros = std::move(pros), this](auto&amp;amp;&amp;amp; exeTry) mutable {
                    if (exeTry.hasException()) {
                        return notifyError(pros, Status::Error(exeTry.exception().what()));
                    }
                    auto exeStatus = std::move(exeTry).value();
                    if (!exeStatus.ok()) {
                        return notifyError(pros, exeStatus);
                    }
                    return notifyOK(pros);
                });
        });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each Executor goes through four phases: “create”, “open”, “execute”, and then “close”.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create"&gt;
  &lt;/a&gt;
  create
&lt;/h3&gt;

&lt;p&gt;In the “create” phase, an appropriate Executor will be generated according to the node type.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open"&gt;
  &lt;/a&gt;
  open
&lt;/h3&gt;

&lt;p&gt;In the “open” phase, before the execution starts, the Executor is initialized, the slow queries are terminated, and the memory watermark is checked. When using Nebula Graph, you can use kill to terminate a query, so the status of the current execution plan must be checked before the execution of each Executor. If the plan is in the killed status, the execution will be terminated. Before the execution of each query Executor, it is necessary to check whether the amount of free memory has fallen below the watermark. If the watermark is reached, the execution will be terminated, which may avoid OOM.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Status Executor::open() {
    if (qctx_-&amp;gt;isKilled()) {
        VLOG(1) &amp;lt;&amp;lt; "Execution is being killed. session: " &amp;lt;&amp;lt; qctx()-&amp;gt;rctx()-&amp;gt;session()-&amp;gt;id()
            &amp;lt;&amp;lt; "ep: " &amp;lt;&amp;lt; qctx()-&amp;gt;plan()-&amp;gt;id()
            &amp;lt;&amp;lt; "query: " &amp;lt;&amp;lt; qctx()-&amp;gt;rctx()-&amp;gt;query();
        return Status::Error("Execution had been killed");
    }
    auto status = MemInfo::make();
    NG_RETURN_IF_ERROR(status);
    auto mem = std::move(status).value();
    if (node_-&amp;gt;isQueryNode() &amp;amp;&amp;amp; mem-&amp;gt;hitsHighWatermark(FLAGS_system_memory_high_watermark_ratio)) {
        return Status::Error(
            "Used memory(%ldKB) hits the high watermark(%lf) of total system memory(%ldKB).",
            mem-&amp;gt;usedInKB(),
            FLAGS_system_memory_high_watermark_ratio,
            mem-&amp;gt;totalInKB());
    }
    numRows_ = 0;
    execTime_ = 0;
    totalDuration_.reset();
    return Status::OK();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#execute"&gt;
  &lt;/a&gt;
  execute
&lt;/h3&gt;

&lt;p&gt;The input and output of a query Executor are in the form of tables (DataSet). The execution of an Executor is based on the iterator model, which means that for each calculation, the next() method of the iterator of the input table is called to retrieve a row of data and then the calculation is performed. Such a process is repeated until the traversal of the entire input table is done. The results of the calculations are constructed into a new table and output to the next Executor as its input.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;folly::Future&amp;lt;Status&amp;gt; ProjectExecutor::execute() {
    SCOPED_TIMER(&amp;amp;execTime_);
    auto* project = asNode&amp;lt;Project&amp;gt;(node());
    auto columns = project-&amp;gt;columns()-&amp;gt;columns();
    auto iter = ectx_-&amp;gt;getResult(project-&amp;gt;inputVar()).iter();
    DCHECK(!!iter);
    QueryExpressionContext ctx(ectx_);

    VLOG(1) &amp;lt;&amp;lt; "input: " &amp;lt;&amp;lt; project-&amp;gt;inputVar();
    DataSet ds;
    ds.colNames = project-&amp;gt;colNames();
    ds.rows.reserve(iter-&amp;gt;size());
    for (; iter-&amp;gt;valid(); iter-&amp;gt;next()) {
        Row row;
        for (auto&amp;amp; col : columns) {
            Value val = col-&amp;gt;expr()-&amp;gt;eval(ctx(iter.get()));
            row.values.emplace_back(std::move(val));
        }
        ds.rows.emplace_back(std::move(row));
    }
    VLOG(1) &amp;lt;&amp;lt; node()-&amp;gt;outputVar() &amp;lt;&amp;lt; ":" &amp;lt;&amp;lt; ds;
    return finish(ResultBuilder().value(Value(std::move(ds))).finish());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the input table of the current Executor cannot be used by the other Executors as their input, the memory occupied by the table will be dropped in the execution phase to reduce memory usage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;void Executor::drop() {
    for (const auto &amp;amp;inputVar : node()-&amp;gt;inputVars()) {
        if (inputVar != nullptr) {
            // Make sure use the variable happened-before decrement count
            if (inputVar-&amp;gt;userCount.fetch_sub(1, std::memory_order_release) == 1) {
                // Make sure drop happened-after count decrement
                CHECK_EQ(inputVar-&amp;gt;userCount.load(std::memory_order_acquire), 0);
                ectx_-&amp;gt;dropResult(inputVar-&amp;gt;name);
                VLOG(1) &amp;lt;&amp;lt; "Drop variable " &amp;lt;&amp;lt; node()-&amp;gt;outputVar();
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#close"&gt;
  &lt;/a&gt;
  close
&lt;/h3&gt;

&lt;p&gt;After the execution of an Executor is done, some collected execution information, such as execution time and the number of rows in the output table, is added to the profiling statistics. You can run a PROFILE statement and then view the statistics in the returned result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Execution Plan (optimize time 141 us)

-----+------------------+--------------+-----------------------------------------------------+--------------------------------------
| id | name             | dependencies | profiling data                                      | operator info                       |
-----+------------------+--------------+-----------------------------------------------------+--------------------------------------
|  2 | Project          | 3            | ver: 0, rows: 56, execTime: 147us, totalTime: 160us | outputVar: [                        |
|    |                  |              |                                                     |   {                                 |
|    |                  |              |                                                     |     "colNames": [                   |
|    |                  |              |                                                     |       "VertexID",                   |
|    |                  |              |                                                     |       "player.age"                  |
|    |                  |              |                                                     |     ],                              |
|    |                  |              |                                                     |     "name": "__Project_2",          |
|    |                  |              |                                                     |     "type": "DATASET"               |
|    |                  |              |                                                     |   }                                 |
|    |                  |              |                                                     | ]                                   |
|    |                  |              |                                                     | inputVar: __TagIndexFullScan_1      |
|    |                  |              |                                                     | columns: [                          |
|    |                  |              |                                                     |   "$-.VertexID AS VertexID",        |
|    |                  |              |                                                     |   "player.age"                      |
|    |                  |              |                                                     | ]                                   |
----------+------------------+--------------+-----------------------------------------------------+--------------------------------------
|  3 | TagIndexFullScan | 0            | ver: 0, rows: 56, execTime: 0us, totalTime: 6863us  | outputVar: [                        |
|    |                  |              |                                                     |   {                                 |
|    |                  |              |                                                     |     "colNames": [                   |
|    |                  |              |                                                     |       "VertexID",                   |
|    |                  |              |                                                     |       "player.age"                  |
|    |                  |              |                                                     |     ],                              |
|    |                  |              |                                                     |     "name": "__TagIndexFullScan_1", |
|    |                  |              |                                                     |     "type": "DATASET"               |
|    |                  |              |                                                     |   }                                 |
|    |                  |              |                                                     | ]                                   |
|    |                  |              |                                                     | inputVar:                           |
|    |                  |              |                                                     | space: 318                          |
|    |                  |              |                                                     | dedup: false                        |
|    |                  |              |                                                     | limit: 9223372036854775807          |
|    |                  |              |                                                     | filter:                             |
|    |                  |              |                                                     | orderBy: []                         |
|    |                  |              |                                                     | schemaId: 319                       |
|    |                  |              |                                                     | isEdge: false                       |
|    |                  |              |                                                     | returnCols: [                       |
|    |                  |              |                                                     |   "_vid",                           |
|    |                  |              |                                                     |   "age"                             |
|    |                  |              |                                                     | ]                                   |
|    |                  |              |                                                     | indexCtx: [                         |
|    |                  |              |                                                     |   {                                 |
|    |                  |              |                                                     |     "columnHints": [],              |
|    |                  |              |                                                     |     "index_id": 325,                |
|    |                  |              |                                                     |     "filter": ""                    |
|    |                  |              |                                                     |   }                                 |
|    |                  |              |                                                     | ]                                   |
----------+------------------+--------------+-----------------------------------------------------+--------------------------------------
|  0 | Start            |              | ver: 0, rows: 0, execTime: 1us, totalTime: 19us     | outputVar: [                        |
|    |                  |              |                                                     |   {                                 |
|    |                  |              |                                                     |     "colNames": [],                 |
|    |                  |              |                                                     |     "type": "DATASET",              |
|    |                  |              |                                                     |     "name": "__Start_0"             |
|    |                  |              |                                                     |   }                                 |
|    |                  |              |                                                     | ]                                   |
----------+------------------+--------------+-----------------------------------------------------+--------------------------------------  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So far, the explanation of the query engine source code has been completed. Next time we will explain the implementation of some features of Nebula Graph.&lt;/p&gt;

&lt;p&gt;If you encounter any problems in the process of using Nebula Graph, please refer to &lt;a href="https://docs.nebula-graph.io/2.5.0/pdf/NebulaGraph-EN.pdf"&gt;Nebula Graph Database Manual&lt;/a&gt; to troubleshoot the problem. It records in detail the knowledge points and specific usage of the graph database and the graph database Nebula Graph.&lt;/p&gt;

</description>
      <category>database</category>
      <category>devops</category>
      <category>opensource</category>
      <category>programming</category>
    </item>
    <item>
      <title>10 Amazing Tips to become a great programmer</title>
      <author>Code</author>
      <pubDate>Mon, 11 Oct 2021 07:21:33 +0000</pubDate>
      <link>https://dev.to/coderzs/10-amazing-tips-to-become-a-great-programmer-do8</link>
      <guid>https://dev.to/coderzs/10-amazing-tips-to-become-a-great-programmer-do8</guid>
      <description>&lt;p&gt; A good programmer is someone who always looks both ways before crossing a one-way street. ~Doug Linder&lt;/p&gt;

&lt;p&gt;Let me start by saying that I do not consider myself to be a competent coder. I consider my coding abilities to be mediocre, and I am still learning and have a long way to go before I am even remotely satisfied with them.Yes, I am better at programming than a lot of others, but that is just because they are lazy and choose to sit about idle all day instead of programming. Their dreadful abilities make my less dreadful abilities appear fantastic.&lt;/p&gt;

&lt;p&gt;So most of the tips I will mention below are lessons learnt from failed endeavours, they are what I have wanted to be and I am not. So lets dive in. &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/tips-to-become-a-great-programmer/"&gt;Tips to become a great programmer&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>A Web Server For Bug Bounty Hunters (Part 1)</title>
      <author>Mutasim Abubakar</author>
      <pubDate>Mon, 11 Oct 2021 07:21:13 +0000</pubDate>
      <link>https://dev.to/fulplan/insight-of-a-web-server-part-1-g00</link>
      <guid>https://dev.to/fulplan/insight-of-a-web-server-part-1-g00</guid>
      <description>&lt;p&gt;Hello respectful readers. I am Mutasim Abubakar known as fulplan a bug bounty hunter and cybersecurity enthusiasm in today’s write-up. I want to explain the concept of web server, web server attack, and web server attack methodology. And in the conclusion of my write-up, I will explain the preventive measures to take to prevent web server attacks.&lt;/p&gt;

&lt;p&gt;-Web Server Concept&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web Server Attack&lt;/li&gt;
&lt;li&gt;Web Server Attack Methodology&lt;/li&gt;
&lt;li&gt;Web Server Preventive Measures&lt;/li&gt;
&lt;li&gt;Web Server Concept&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To be able to completely compromise a server, you have to understand the theory of a web server and its architecture.&lt;br&gt;
Let talk about what a web server is, A web server is computer software or hardware which has the functionality to store data and process data and deliver data through a client web application called a web browser such as (Firefox, Chrome, Opera Mini, etc.) through HTTP/HTTP’s, web network protocol.&lt;br&gt;
A web server has some components:&lt;/p&gt;

&lt;p&gt;1.&lt;strong&gt;Document Root:&lt;/strong&gt; &lt;em&gt;This is used to store critical HTML files related to the web pages of a domain that will be rendered when a client user sends an HTTP request or communicate with the server. This is mostly found in a server system directory it’s also the writable counterpart to other User Binaries &amp;amp; Read-Only Data found on a web server directory, which must be read-only in normal operation for everyone accessing the server on the web. In simple words: When someone else looks at your website, The Document root directory is the location they will be accessing.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The document root is the “WWW” mostly by default on the Linux systems directory, but of course, some hosts may well use a different folder. Some of the more common alternatives are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;htdocs&lt;/li&gt;
&lt;li&gt;httpdocs&lt;/li&gt;
&lt;li&gt;html&lt;/li&gt;
&lt;li&gt;public_html&lt;/li&gt;
&lt;li&gt;web&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2.&lt;strong&gt;Server Root:&lt;/strong&gt; *This is the important root directory under the directory tree in which configurations and errors, executables, and logs are stored. The server root consists of four files one file is purposely the code that implements the server whiles the other three files are subdirectories, namely Conf, Logs, Cgi-bin.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Conf — A Conf file is a configuration or “config” file used on Unix and Linux based systems. It stores settings used to configure system processes and applications.*&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Logs — Log file is used to maintain a set of records for the administrators or owner to keep track of important events. They contain messages about the computer/server, including the kernel, services, and applications running on it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cgi-bin - Popularly known as CGI Common Gateway Interface. Which is used for accommodating the use of scripts in Web design. It is also a standard for interfacing external applications with Apache Web servers. /usr/lib/cgi-bin/ is cgi-bin directory. If you have public_htm directory, then cgi-bin directory should be inside this directory. Once you located cgi-bin directory, you can use it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3.&lt;strong&gt;Virtual Document Tree:&lt;/strong&gt; &lt;em&gt;This is similar to virtual hosting, but for virtual document tree, it is used to provide storage on a different machine or disk after the original disk is full. Such as (cloud Dropbox, iCloud, Google Drive, Microsoft One Drive and IDrive, and more)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;strong&gt;Virtual Hosting:&lt;/strong&gt; This is a technique used for hosting multiple domain names or a website on a single server. This allows one server to share its resources, such as memory and processor cycles, without requiring all services provided to use the same hostname.&lt;br&gt;
5.&lt;strong&gt;Web Proxy:&lt;/strong&gt; &lt;em&gt;This is a tool that acts as another client in a middle of a network protocol that facilitates your connection to a web server.&lt;/em&gt;&lt;br&gt;
&lt;em&gt;It makes requests to the real server on behalf of the client, or sometimes fulfills the claim itself.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>linux</category>
      <category>100daysofcode</category>
      <category>programming</category>
    </item>
    <item>
      <title>Set vs Array</title>
      <author>Omotayo David</author>
      <pubDate>Mon, 11 Oct 2021 07:13:52 +0000</pubDate>
      <link>https://dev.to/david4473/set-vs-array-14c0</link>
      <guid>https://dev.to/david4473/set-vs-array-14c0</guid>
      <description>&lt;p&gt;There are several ways you can solve coding problems as a JavaScript developer, thanks to the plethora of pre-established data structures designed to solve simple to real-world problems. &lt;/p&gt;

&lt;p&gt;Data structures are techniques for storing and organizing data, which enables efficient modification. The data structure also determines relationships between data and functions to use in accessing them.&lt;/p&gt;

&lt;p&gt;JavaScript data structures have their respective use-cases; this is due to the unique properties each object possess. However, this doesn't mean there isn't any form of similarities between them. The Array and Set data structure types have a lot in common, and we're going to be looking at what similarities they share, how they differ from each other and their use-cases.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-a-set-and-an-array"&gt;
  &lt;/a&gt;
  What is a Set and an Array?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#set"&gt;
  &lt;/a&gt;
  Set
&lt;/h3&gt;

&lt;p&gt;Set is a data type that stores data that are unique values of any type, whether primitive or object references. Set stores data in collections with keys that are iterable in the order of insertion.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#array"&gt;
  &lt;/a&gt;
  Array
&lt;/h3&gt;

&lt;p&gt;An array on the other hand - is a global object that stores high-level list-like objects called arrays in the consecutive memory for later use. Every array has several cells, and each cell has a numeric index that is used to access its data. It is the most basic and most used of all data structures.&lt;/p&gt;

&lt;p&gt;Now that we know what they are, let's take a look at the similarities between these objects.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#similarities-amp-differences"&gt;
  &lt;/a&gt;
  Similarities &amp;amp; Differences
&lt;/h2&gt;

&lt;p&gt;For us to comprehend some of the technical aspects of this section, we need to understand how to construct or initialize either of the objects.&lt;/p&gt;

&lt;p&gt;Both objects have a built-in constructor which utilises the &lt;code&gt;new&lt;/code&gt; syntax for declaring a new data structure. However, unlike a set, an array is not limited to this method of declaration. An array can also be declared with the literal method.&lt;/p&gt;

&lt;p&gt;You can initialize a new Set like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And a new array like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In addition, the literal method of initialising an array is much faster; construction-wise, and even performance-wise. The constructor method, however - is slower compared to the former, and prone to mistakes such as this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;//outputs: undefined&lt;/span&gt;

&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="c1"&gt;//outputs: 10&lt;/span&gt;

&lt;span class="c1"&gt;//Literal method&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrLtr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;arrLtr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;//outputs: 20&lt;/span&gt;

&lt;span class="nx"&gt;arrLtr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="c1"&gt;//outputs: 1&lt;/span&gt;

&lt;span class="c1"&gt;//The later is accurate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that out of the way, we can now go into the nitty-gritty of what these objects have in common.&lt;/p&gt;

&lt;p&gt;The similarities between Set and Array is conspicuous. if you've ever worked with arrays before (who hasn't anyway), you'll immediately notice some of the things they have in common. But even with the glaring dead ringer, the differences between them are quite stretched.&lt;/p&gt;

&lt;p&gt;One of the biggest, perhaps the biggest, differences between Set and Array is that; Set can only contain one instance of a value. For example, in an array of &lt;code&gt;people&lt;/code&gt;, a &lt;code&gt;peter&lt;/code&gt; value can appear as many times as you want. Whereas in Set, you can only have one &lt;code&gt;peter&lt;/code&gt; value. If you try to add more, nothing happens.&lt;/p&gt;

&lt;p&gt;What if you hard-code duplicate values into a set, what happens?&lt;br&gt;
Set will only pick one of the duplicate values and delete the rest.&lt;br&gt;
However, Set's intolerance for duplicate data values has its perks, especially in cases where you don't want duplicate values or data leaks in your data structure.&lt;/p&gt;

&lt;p&gt;Most of Set and Array's likeness lies within how they operate; how they populate their structure with data and otherwise.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#inserting-and-removing-elements"&gt;
  &lt;/a&gt;
  Inserting and removing elements
&lt;/h2&gt;

&lt;p&gt;Each object has its built-in methods for adding and removing values from its respective structure. While Array has more than one method of inserting or removing values, Set only has one. &lt;/p&gt;

&lt;p&gt;Before going deep into this section, we first need to understand how items are inserted and removed from a data structure.&lt;/p&gt;

&lt;p&gt;A Data structure is basically a stack of objects that are inserted and removed according to the last-in-first-out principle, which is also known as (LIFO).&lt;br&gt;
Elements can only be added and removed from the top of the stack. A helpful analogy is to think of a stack of books; you can add new books from the top and remove only the book at the top.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/tC5t2np7BZK5WI3G3O/source.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/tC5t2np7BZK5WI3G3O/source.gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#inserting-and-removing-elements-in-an-array"&gt;
  &lt;/a&gt;
  Inserting and removing elements in an Array
&lt;/h3&gt;

&lt;p&gt;The Array has two methods for this functionality &lt;code&gt;push()&lt;/code&gt; and &lt;code&gt;pop()&lt;/code&gt;. The push method adds new items to the top of the data structure, while pop removes items from the top of the structure i.e the last item added. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#arrayprotoypepush"&gt;
  &lt;/a&gt;
  Array.protoype.push()
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mario&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Mario&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#arrayprotoypepop"&gt;
  &lt;/a&gt;
  Array.protoype.pop()
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mario&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Luigi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bowser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;//Remove "Bowser" &lt;/span&gt;
&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;//Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Mario, Luigi&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#arrayprotoypeunshift-shift"&gt;
  &lt;/a&gt;
  Array.protoype.unshift() / shift()
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;unshift()&lt;/code&gt; and &lt;code&gt;shift()&lt;/code&gt; methods works contrary to the LIFO principle, these methods are used to insert and remove items to the bottom of a data structure i.e at index &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#arrayprotoypeunshift"&gt;
  &lt;/a&gt;
  Array.protoype.unshift()
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;//Add 2 to index 0&lt;/span&gt;
&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unshift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;//Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 2, 4, 6, 8, 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#arrayprotoypeshift"&gt;
  &lt;/a&gt;
  Array.protoype.shift()
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;//Remove 2 from index 0&lt;/span&gt;
&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;//Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 4, 6, 8, 10&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#arrayprotoypesplice"&gt;
  &lt;/a&gt;
  Array.protoype.splice()
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;splice()&lt;/code&gt; is another array method that can be used to remove or replace an existing element in an array. The method takes in two parameters for deleting an element and three for replacing or adding a new element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;deleteCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;deleteCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;start&lt;/code&gt;&lt;br&gt;
The index at which you want to start inserting or delete elements from an array.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;deleteCount&lt;/code&gt;&lt;br&gt;
An integer specifying the number of elements to be removed from the &lt;code&gt;start&lt;/code&gt; index. N.B This is an optional parameter.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;item&lt;/code&gt;&lt;br&gt;
This is the element to be added to an array from the &lt;code&gt;start&lt;/code&gt; index. This is also an optional parameter.&lt;/p&gt;

&lt;p&gt;Here is a basic &lt;code&gt;splice()&lt;/code&gt; demo:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remove 0 (zero) elements before index 2, and insert "John".&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;students&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hugh&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dave&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Katerina&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; 
&lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;student&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Output:&lt;/span&gt;
&lt;span class="c1"&gt;//['Hugh', 'Jack', 'john' , 'Dave', 'Katerina']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Remove 1 element at index 1&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;students&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hugh&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dave&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Katerina&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; 
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removedStudents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Students:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Removed students:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;removedStudents&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Output:&lt;/span&gt;
&lt;span class="c1"&gt;//Students: ['Hugh', 'Jack', 'john' , 'Dave', 'Katerina']&lt;/span&gt;
&lt;span class="c1"&gt;//Removed students: [ 'jack' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;splice()&lt;/code&gt; can also be used to instantly clear every element in an array like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mangos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;papaya&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;//Output:&lt;/span&gt;
  &lt;span class="c1"&gt;// [ ] Empty array&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For a more in-depth analysis on &lt;code&gt;splice()&lt;/code&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice"&gt;Visit the Mozilla docs&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#arrayfrom"&gt;
  &lt;/a&gt;
  Array.from()
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;from()&lt;/code&gt; method lets you populate an array with an array-like or iterable object. That is; an object with a length property and iterable objects such as a &lt;code&gt;set&lt;/code&gt;. In a nutshell, you can populate an array with elements in a pre-existing &lt;code&gt;set&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mangos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;papaya&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  

  &lt;span class="c1"&gt;//Output:&lt;/span&gt;
  &lt;span class="c1"&gt;// [ 'Mangos', 'papaya', 'Apple' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#inserting-and-removing-items-in-a-set"&gt;
  &lt;/a&gt;
  Inserting and removing items in a Set
&lt;/h3&gt;

&lt;p&gt;Just as stated above, Set has only one method of adding items to its structure; using the &lt;code&gt;add()&lt;/code&gt; method. This method works just like Array's &lt;code&gt;push()&lt;/code&gt; method. It also has a &lt;code&gt;delete()&lt;/code&gt; method for removing items just like the &lt;code&gt;pop()&lt;/code&gt; method. &lt;br&gt;
Set follows the LIFO principle of inserting and removing elements in a data structure, but unlike Array, Set doesn't have a way around the LIFO principle; elements can only be inserted and removed from the top of a set data structure.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#setprototypeadd"&gt;
  &lt;/a&gt;
  set.prototype.add()
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Peach&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mario&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;//Output:&lt;/span&gt;
&lt;span class="c1"&gt;// "Peach", "Mario"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#setprototypedelete"&gt;
  &lt;/a&gt;
  set.prototype.delete()
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Peach&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mario&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bowser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bowser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Output:&lt;/span&gt;
&lt;span class="c1"&gt;// "Peach", "Mario" &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Similarly to Array's &lt;code&gt;from()&lt;/code&gt; method, Set can also populate its structure with a pre-existing array. Set doesn't require an extra method for this functionality, the constructor handles it just fine:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Steph&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newSet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newSet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Output:&lt;/span&gt;
  &lt;span class="c1"&gt;// { 'John', 'Mike', 'Steph' }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#setprototypeclear"&gt;
  &lt;/a&gt;
  set.prototype.clear()
&lt;/h4&gt;

&lt;p&gt;Set's &lt;code&gt;clear()&lt;/code&gt; method is a very straightforward and efficient method for clearing out elements in a data structure. It doesn't require extra arguments like the former's method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newSet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Steph&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;]);&lt;/span&gt;
   &lt;span class="nx"&gt;newSet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newSet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Output:&lt;/span&gt;
  &lt;span class="c1"&gt;// { } Empty set object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#accessing-elements"&gt;
  &lt;/a&gt;
  Accessing elements
&lt;/h2&gt;

&lt;p&gt;How elements in a data structure are accessed or selected is determined by the data type being used. Take an Array, for example, elements in an array are accessed by their cell's numeric index. This means, the first element in an array can be accessed at index 0, and the last element; at the index value equal to the array's length minus 1.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Accessing the first element&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mouse&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="c1"&gt;//This will output 'cat'&lt;/span&gt;
  &lt;span class="c1"&gt;//Because the 'cat' value is at index 0&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Accessing the last element&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mouse&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="c1"&gt;//This will output 'mouse'&lt;/span&gt;
  &lt;span class="c1"&gt;//Because the 'mouse' element is the last in the array&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Set accesses elements in a data structure differently. This is because a set does not support the selection of random elements by its index like Array. So the &lt;code&gt;indexOf()&lt;/code&gt; method will only work with an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mouse&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newSet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// outputs 'cat'&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newSet&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// outputs undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Set checks if an element is in its structure with the &lt;code&gt;has()&lt;/code&gt; method. This method is simpler compared to Array's technique for checking elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;animalSet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mouse&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isMouse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;animalSet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mouse&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isMouse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// outputs true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Performing something similar in an array requires an extra conditional check and code with the &lt;code&gt;indexOf()&lt;/code&gt; method like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Peach&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mario&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bowser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;//checks if Mario is at index 1&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isMario&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mario&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isMario&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// outputs true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;indexOf()&lt;/code&gt; method returns  &lt;code&gt;-1&lt;/code&gt; if the element being searched for is not present in the structure.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#length-and-size"&gt;
  &lt;/a&gt;
  Length and size
&lt;/h2&gt;

&lt;p&gt;Certain functionalities require we check the total amount of elements present in an array or set structure. Javascript has a global &lt;code&gt;length&lt;/code&gt; property for displaying the number of characters in a string and elements in any data type that stores list-like elements. &lt;br&gt;
And If there's anything to go by, it's that an array works with almost every global method and property in Javascript. So without dwelling too much on it, here's a demo of the &lt;code&gt;length&lt;/code&gt; property in an array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;//Outputs&lt;/span&gt;
&lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Set has its unique method for checking the number of elements in a set; with the &lt;code&gt;size&lt;/code&gt; method. This method works exactly like the length property:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;//Outputs&lt;/span&gt;
&lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#iteration"&gt;
  &lt;/a&gt;
  Iteration
&lt;/h2&gt;

&lt;p&gt;There are different ways one could iterate over elements in an array or set, but unlike the former; set isn't compatible with the conventional techniques for iterating over elements in programming using functions like the &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt; loop statements.&lt;/p&gt;

&lt;p&gt;Looping in a set can be easily done with the &lt;code&gt;forEach()&lt;/code&gt; method. Although several other methods can be used in its stead, methods like:&lt;/p&gt;

&lt;p&gt;iterator()&lt;br&gt;
values()&lt;br&gt;
entries()...&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;forEach()&lt;/code&gt; method is perhaps the most unequivocal of them all.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;breeds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;breeds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dog&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;breeds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;breeds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bunny&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;iterate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; breed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;breeds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;iterate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Outputs:&lt;/span&gt;
&lt;span class="c1"&gt;// dog breed&lt;/span&gt;
&lt;span class="c1"&gt;// cat breed&lt;/span&gt;
&lt;span class="c1"&gt;// bunny breed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When it comes to iteration, an array has a list of flexible options to choose from, your choice is often determined by the kind of functionality you're trying to implement. We can't go deeply into every one of these methods as they are beyond the scope of this article, but we'll examine the most used of them all; the &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt; loop.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#for-loop"&gt;
  &lt;/a&gt;
  For loop
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//Output:&lt;/span&gt;
&lt;span class="c1"&gt;// number: 1&lt;/span&gt;
&lt;span class="c1"&gt;// number: 2&lt;/span&gt;
&lt;span class="c1"&gt;// number: 3&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#while-loop"&gt;
  &lt;/a&gt;
  While loop
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 5&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Visit the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration"&gt;Mozilla docs&lt;/a&gt; to learn more about these statements.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#when-to-use-set-or-array"&gt;
  &lt;/a&gt;
  When to use Set or Array
&lt;/h2&gt;

&lt;p&gt;Knowing when to use a set or an array is a no-brainer, it generally boils down to two things; unique elements and Performance.&lt;/p&gt;

&lt;p&gt;Use set when you want unique elements in your data structure. Although an array can be modified to accept unique elements, set is, however, optimized for such functionalities out of the box.&lt;/p&gt;

&lt;p&gt;If you want high-performance element lookups use set's &lt;code&gt;has()&lt;/code&gt; method. &lt;/p&gt;

&lt;p&gt;If you want an easy access of elements, easy element swapping and binary search of elements ( i.e accessing elements located in any part of a data structure; front, middle and back ), an array is your best bet.&lt;/p&gt;

&lt;p&gt;If you want to prevent memory leaks in your data structure, use a set.&lt;/p&gt;

&lt;p&gt;If you want flexibility and more feature, use an array.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;One thing to note is that both objects shine within their range of specialities, even though the array has the efficacy of becoming the Swiss army knife of data structure; set's high-performance methods and intolerance for duplicates makes it stand out.&lt;/p&gt;

&lt;p&gt;Your decision on which to use will be highly influenced by the nature of the project you're working on. It's not really about which is better, but which is right for the job.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Laravel Jetstream database session with multiple user table</title>
      <author>Hafiq Iqmal</author>
      <pubDate>Mon, 11 Oct 2021 07:10:19 +0000</pubDate>
      <link>https://dev.to/afiqiqmal/laravel-jetstream-database-session-with-multiple-user-table-47ia</link>
      <guid>https://dev.to/afiqiqmal/laravel-jetstream-database-session-with-multiple-user-table-47ia</guid>
      <description>&lt;p&gt;If you are using Jetsream, you might notice that there is a feature called &lt;a href="https://jetstream.laravel.com/2.x/features/browser-sessions.html#browser-sessions"&gt;Browser Sessions&lt;/a&gt;. This feature allow the user to view the browser sessions associated with their account. Plus, the user may revoke other browser sessions other than the one being used by the device they are currently using.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-what-is-the-problem"&gt;
  &lt;/a&gt;
  So, what is the problem?
&lt;/h3&gt;

&lt;p&gt;The problem is that, when multiple guard authentication happen, session is stored only based on user primary key in &lt;code&gt;user_id&lt;/code&gt; column. Based on component Jetstream &lt;strong&gt;&lt;code&gt;LogoutOtherBrowserSessionsForm&lt;/code&gt;&lt;/strong&gt; , the logic is where if there are 2 guard with same id is stored and one of the guard user click revoke session in Jetstream, both of the session would be deleted. It would be nice if the session table accept polymorphic relationship&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cRaLpQuq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qlm1nqjd45pomjqr4z8u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cRaLpQuq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qlm1nqjd45pomjqr4z8u.png" alt="Figure 1"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#how-about-the-solution"&gt;
  &lt;/a&gt;
  How about the solution?
&lt;/h3&gt;

&lt;p&gt;So, i decide to came out a solution&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a custom session driver to override database session used by Laravel default database session manager&lt;/li&gt;
&lt;li&gt;Alter current session to accept polymorphic relation&lt;/li&gt;
&lt;li&gt;Implement polymorphic relation to &lt;code&gt;LogoutOtherBrowserSessionsForm&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Lets get started
&lt;/h2&gt;

&lt;p&gt;If you are not using database driver for session, this article might not for you.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#create-a-custom-session-driver"&gt;
  &lt;/a&gt;
  Create a custom session driver
&lt;/h3&gt;

&lt;p&gt;So, let’s start by looking at &lt;code&gt;\Illuminate\Session\DatabaseSessionHandler&lt;/code&gt;. You will notice that there is method &lt;code&gt;addUserInformation&lt;/code&gt; to add &lt;code&gt;user_id&lt;/code&gt; to the payload of session table. This is where we can extend this class and override this method to add our polymorphic relation.&lt;/p&gt;

&lt;p&gt;Create a class name as &lt;code&gt;DatabaseSessionHandler&lt;/code&gt; extend from &lt;code&gt;\Illuminate\Session\DatabaseSessionHandler&lt;/code&gt;. Override &lt;code&gt;addUserInformation&lt;/code&gt; and add to the payload with morph column. We might want to keep the parent method to keep the old session driver. Here the full snippet :-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?php

class DatabaseSessionHandler extends \Illuminate\Session\DatabaseSessionHandler
{
    protected function addUserInformation(&amp;amp;$payload)
    {
        if ($this-&amp;gt;container-&amp;gt;bound(Guard::class)) {
            $payload['authenticable_id'] = $this-&amp;gt;userId();
            $payload['authenticable_type'] = $this-&amp;gt;container-&amp;gt;make(Guard::class)-&amp;gt;user()?-&amp;gt;getMorphClass();
        }

        return parent::addUserInformation($payload);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Done extending the &lt;code&gt;DatabaseSessionHandler&lt;/code&gt;. Now, registering the &lt;code&gt;DatabaseSessionHandler&lt;/code&gt; is done through a provider, which is set up the same way as the built-in &lt;code&gt;\Illuminate\Session\DatabaseSessionHandler&lt;/code&gt;. Im using name “database2” as a driver name. You may freely change the driver name as you wish&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?php


class SessionServiceProvider extends ServiceProvider
{
    public function boot()
    {
        \Session::extend('database2', function ($app) {
            return new DatabaseSessionHandler(
                $app['db']-&amp;gt;connection($app['config']['session.connection']), 
                $app['config']['session.table'], 
                $app['config']['session.lifetime'], 
                $app
            );
        });
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the custom session database driver is now registered.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#createalter-session-migration-table"&gt;
  &lt;/a&gt;
  Create/Alter Session Migration Table
&lt;/h3&gt;

&lt;p&gt;Lets start with by publishing a migration for session table if not exist&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; php artisan session:table
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The content of the session would look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Schema::create('sessions', function (Blueprint $table) {
    $table-&amp;gt;string('id')-&amp;gt;primary();
    $table-&amp;gt;foreignId('user_id')-&amp;gt;nullable()-&amp;gt;index();
    $table-&amp;gt;string('ip_address', 45)-&amp;gt;nullable();
    $table-&amp;gt;text('user_agent')-&amp;gt;nullable();
    $table-&amp;gt;text('payload');
    $table-&amp;gt;integer('last_activity')-&amp;gt;index();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You would notice this migration doesn’t come with polymorphic relationship. This is where we need to alter the table. Add morphs relation named it as &lt;code&gt;authenticable&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Schema::create('sessions', function (Blueprint $table) {
    $table-&amp;gt;string('id')-&amp;gt;primary();
    $table-&amp;gt;nullableMorphs('authenticable'); // add this

    $table-&amp;gt;foreignId('user_id')-&amp;gt;nullable()-&amp;gt;index();

    $table-&amp;gt;string('ip_address', 45)-&amp;gt;nullable();
    $table-&amp;gt;text('user_agent')-&amp;gt;nullable();
    $table-&amp;gt;text('payload');
    $table-&amp;gt;integer('last_activity')-&amp;gt;index();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I would suggest not to remove the user_id column because we shared session table. In case, you want to revert back to original session database driver, it wont be a problem. Unless you specify another table for new session driver.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In case you already have session table&lt;/strong&gt;, you might want to alter the table. Just create another migration to alter the table&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; php artisan make:migration alter_session_table --table=sessions
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might need to delete all the existing session. Just add DB truncate before migration happen. You may follow like below :-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?php

class AlterSessionTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        DB::table('sessions')-&amp;gt;truncate();

        Schema::table('sessions', function(Blueprint $table) {
            $table-&amp;gt;after('id', function (Blueprint $table ){
                $table-&amp;gt;nullableMorphs('authenticable');
            });
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('sessions', function(Blueprint $table) {
            $table-&amp;gt;dropMorphs('authenticable');
        });
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#change-session-driver-in-env-file"&gt;
  &lt;/a&gt;
  Change session driver in env file
&lt;/h3&gt;

&lt;p&gt;At this point, you can change session default driver to your new custom session driver.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
QUEUE_CONNECTION=
SESSION_DRIVER=database2
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may try to login and you will notice in your session driver table, the morph column started to filled in.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tFuafTHZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5ebbkblbycgif6ue9hn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tFuafTHZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5ebbkblbycgif6ue9hn.png" alt="Figure 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#customize-logoutotherbrowsersessionsform-jetstream"&gt;
  &lt;/a&gt;
  Customize LogoutOtherBrowserSessionsForm (Jetstream)
&lt;/h3&gt;

&lt;p&gt;Let’s take a look at Jetstream &lt;code&gt;LogoutOtherBrowserSessionsForm class&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fdpC76co--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghxyrbpp9gnm8bgng0te.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fdpC76co--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghxyrbpp9gnm8bgng0te.png" alt="Figure 3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The red line shows the logic used to display and revoke session in the browser session feature. As mention, the query is not handling multi table or multi guard which cause see session of others. Let’s create new livewire component and extend this class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; php artisan make:livewire LogoutOtherBrowserSessionsForm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now alter the file and extend to Jetstream class&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?php

use Laravel\Jetstream\Http\Livewire\LogoutOtherBrowserSessionsForm as BaseLogoutOtherBrowserSessionsForm;

class LogoutOtherBrowserSessionsForm extends BaseLogoutOtherBrowserSessionsForm
{
   //
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Override both method &lt;code&gt;deleteOtherSessionRecords&lt;/code&gt; and &lt;code&gt;getSessionsProperty&lt;/code&gt; to meet the requirement. Adding extra query and fix some logic and it will look like this :-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?php

namespace App\Http\Livewire;

use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;
use Laravel\Jetstream\Http\Livewire\LogoutOtherBrowserSessionsForm as BaseLogoutOtherBrowserSessionsForm;

class LogoutOtherBrowserSessionsForm extends BaseLogoutOtherBrowserSessionsForm
{
    /**
     * Delete the other browser session records from storage.
     *
     * @return void
     */
     protected function deleteOtherSessionRecords()
     {
         if (!Str::contains(config('session.driver'), 'database')) {
             return;
         }

         DB::connection(config('session.connection'))
             -&amp;gt;table(config('session.table', 'sessions'))
             -&amp;gt;where('authenticable_id', Auth::user()-&amp;gt;getAuthIdentifier())
             -&amp;gt;where('authenticable_type', Auth::user()-&amp;gt;getMorphClass())
             -&amp;gt;where('id', '!=', request()-&amp;gt;session()-&amp;gt;getId())
             -&amp;gt;delete();
     }

    /**
     * Get the current sessions.
     *
     * @return \Illuminate\Support\Collection
     */
    public function getSessionsProperty(): \Illuminate\Support\Collection
    {
        if (!Str::contains(config('session.driver'), 'database')) {
            return collect();
        }

        return collect(
            DB::connection(config('session.connection'))
                -&amp;gt;table(config('session.table', 'sessions'))
                -&amp;gt;where('authenticable_id', Auth::user()-&amp;gt;getAuthIdentifier())
                -&amp;gt;where('authenticable_type', Auth::user()-&amp;gt;getMorphClass())
                -&amp;gt;orderBy('last_activity', 'desc')
                -&amp;gt;get()
        )-&amp;gt;map(function ($session) {
            return (object) [
                'agent' =&amp;gt; $this-&amp;gt;createAgent($session),
                'ip_address' =&amp;gt; $session-&amp;gt;ip_address,
                'is_current_device' =&amp;gt; $session-&amp;gt;id === request()-&amp;gt;session()-&amp;gt;getId(),
                'last_active' =&amp;gt; Carbon::createFromTimestamp($session-&amp;gt;last_activity)-&amp;gt;diffForHumans(),
            ];
        });
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok now everything is set up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LiljUPsR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewqc5m9my114k4hu9ds7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LiljUPsR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewqc5m9my114k4hu9ds7.png" alt="Figure 4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once verified, the browser session shows only the one i’m using logged in based on guard. Means that our custom session are working fine. 🤘&lt;/p&gt;

&lt;p&gt;That’s it. Hope its help 😁. Thanks for your time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://jetstream.laravel.com/2.x/introduction.html"&gt;https://jetstream.laravel.com/2.x/introduction.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>jetstream</category>
      <category>php</category>
    </item>
    <item>
      <title>Ethical Hacking Roadmap - A Beginners Tutorial</title>
      <author>Code</author>
      <pubDate>Mon, 11 Oct 2021 07:07:18 +0000</pubDate>
      <link>https://dev.to/coderzs/ethical-hacking-roadmap-a-beginners-tutorial-3l4n</link>
      <guid>https://dev.to/coderzs/ethical-hacking-roadmap-a-beginners-tutorial-3l4n</guid>
      <description>&lt;h2&gt;&lt;strong&gt;Who is an Ethical Hacker?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;An ethical hacker is a computer network specialist who deals with the security posture of an organization. His job involves eliciting security flaws in the organization he is working for by testing all aspects of the system and its services for any sort of vulnerabilities. The key point to notice is that all this is done with the permission of the owners of the organization and without any malicious intent. An ethical hacker is also known as a white hat hacker and is the stark opposite of a black hat hacker, a.k.a crackers who hack with the sole purpose of bringing about some sort of disruption, or chaos from the vulnerabilities they find. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/ethical-hacking-roadmap-a-beginners-guide/&amp;amp;ved=2ahUKEwjSy6-98ZvzAhXQxTgGHSS8Bu84ChAWegQIGxAB&amp;amp;usg=AOvVaw3-vFooaWUJypOS-FfvXpjK"&gt;Ethical Hacking Roadmap - A Beginners Guide&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>AWS open source news and updates #85</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Mon, 11 Oct 2021 07:06:18 +0000</pubDate>
      <link>https://dev.to/aws/aws-open-source-news-and-updates-85-4826</link>
      <guid>https://dev.to/aws/aws-open-source-news-and-updates-85-4826</guid>
      <description>&lt;h2&gt;
  &lt;a href="#october-11th-2021-instalment-85"&gt;
  &lt;/a&gt;
  October 11th, 2021 - Instalment #85
&lt;/h2&gt;

&lt;p&gt;Newsletter #85.&lt;/p&gt;

&lt;p&gt;This week we have an interesting gaming flavour to this newsletter, with a couple of projects that are influenced or are directly related to gaming. We also have other new open source projects including one that shows you how you can run an OpenVSCode Server for AWS Graviton2. This weeks blog post and tutorials cover Apache Airflow, Apache Spark, Apache Kafka, Apache Ranger, Apache Flink, OpenSearch, Apache Lucene, PostgreSQL, AWS CDK, and Kubernetes. For those interested in machine learning, we have a literal Feast for you, in a nice post covering the open source project Feast. We also have a great post for those of you looking who are applying the open source way of working, internally (sometimes referred to as Innersource) so make sure you check that post out as it is really nice. Finally we have some new events added, so check those out and a couple of videos that you will want to bookmark/view.&lt;/p&gt;

&lt;p&gt;With KubeCon happening this week, make sure you check out the Container Day. These are always packed full of the latest updates and great presentations from the containers team at AWS. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Container Day x KubeCon&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Next week, the AWS Kubernetes team is back for the next instalment of Container Day x KubeCon, a full day of sessions on Amazon EKS and Kubernetes at AWS. In this live and virtual Twitch event, the AWS Kubernetes team, hosted by developer advocates Justin Garrison and Jesse Butler, will be covering new launches, demoing products and features, and answering your questions. Read more in the post, &lt;a href="https://aws-oss.beachgeek.co.uk/zd"&gt;Save the date: Container Day x KubeCon&lt;/a&gt; to find out about the sessions and you can &lt;a href="https://aws-oss.beachgeek.co.uk/cr"&gt;sign up here&lt;/a&gt; to be reminded when things kick off.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#celebrating-open-source-contributors"&gt;
  &lt;/a&gt;
  Celebrating open source contributors
&lt;/h3&gt;

&lt;p&gt;The articles posted in this series are only possible thanks to contributors and project maintainers and so I would like to shout out and thank those folks who really do power open source and enable us all to build on top of what they have created. &lt;/p&gt;

&lt;p&gt;So thank you to the following open source heroes: Starr Shaw, John Kennedy, Nico Triballier, Michael Hamilton, Joe Losinski, Eng-Hwa Tan, Raffa aka Picster, Debashish Chakrabarty, Akash Verma, Ian Mckay, Naga Appani, Chinmayi Narasimhadevara, Uma Ramadoss, Willem Pienaar, Matt Asay, Marcus Eagan, Henry Robalino, Varun Rao Bhamidimarri, Jalpan Randeri, Virginia Chu, Hunter Tom, Om Prakash Jha and Michael Hausenblas&lt;/p&gt;

&lt;p&gt;Make sure you find and follow these builders and keep up to date with their open source projects and contributions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#latest-open-source-projects"&gt;
  &lt;/a&gt;
  Latest open source projects
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;vscode-spoty-army&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/z5"&gt;vscode-spoty-army&lt;/a&gt; Gitpod is a great open source project that helps you to tun upstream VS Code on a remote machine with access through a modern web browser from any device, anywhere, via the &lt;a href="https://aws-oss.beachgeek.co.uk/z6"&gt;OpenVSCode Server project&lt;/a&gt;. This project from Eng-Hwa Tan will help you to deploy an OpenVSCode Server for AWS Graviton2 (arm64) with spot instance using Amazon ECS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cloudkeeper-ckui&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://aws-oss.beachgeek.co.uk/z7"&gt;cloudkeeper-ckui&lt;/a&gt; this project really impressed me last week and got me thinking should game designers be hired by all projects/organisations to help design their UI's. Cloudkeeper is an open source project that indexes resources, captures dependencies and maps out your AWS infrastructure in a graph so that it’s understandable for a human. Raffa aka Picster shared news last week on Reddit about a new project he is working on, a UI for this project. Check out the &lt;a href="https://aws-oss.beachgeek.co.uk/z7"&gt;thread in Reddit&lt;/a&gt;, or the video that provides a glimpse of what you can see. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/jOB0yUst2eg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Planet_Storm&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/zo"&gt;Planet_Storm&lt;/a&gt; from application of a games UI to an actual game. This project provides an example game called Planet Storm, that is imagined as a 3D, physics-based, side-scrolling platformer inspired by the 1980’s IREM classic “Moon Patrol”. It uses the Open 3D Engine (O3DE) engine and the developers behind this, Starr Shaw and John Kennedy, share how you can build this yourself in the blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/zp"&gt;We Also Make Games: AWS’ First Internal O3DE Game is Now Available!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XQHRVYE6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/91032ad7bbcb6cf72875e8e8207dcfba80173f7c/2021/10/07/graphic-007.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XQHRVYE6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/91032ad7bbcb6cf72875e8e8207dcfba80173f7c/2021/10/07/graphic-007.png" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-instance-scheduler&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/z4"&gt;aws-instance-scheduler&lt;/a&gt; if you ever needed to schedule the stopping and starting of EC2 and RDS resources across your AWS accounts, then this project is what you have been looking for. This helps reduce operational costs by stopping resources that are not in use and starting resources when their capacity is needed. It provides a solution for Cross-Account and Cross-Region scheduling EC2 and RDS instances/clusters using SSM Automation Runbooks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VyWXd7Io--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awslabs/aws-instance-scheduler/blob/master/source/architecture.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VyWXd7Io--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awslabs/aws-instance-scheduler/blob/master/source/architecture.png%3Fraw%3Dtrue" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;glue-workflow-aws-cdk&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/z2"&gt;glue-workflow-aws-cdk&lt;/a&gt; this repository contains an example that creates a Glue Workflow containing multiple crawlers, glue jobs and triggers for the workflow. The workflow is manually triggered, but the script can be updated to run on a cron schedule.&lt;/p&gt;

&lt;p&gt;Follow the blog post &lt;a href="https://aws-oss.beachgeek.co.uk/z3"&gt;Field Notes: How to Build an AWS Glue Workflow using the AWS Cloud Development Kit&lt;/a&gt; from Michael Hamilton and Joe Losinski to get started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YdQQQZ2A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2021/10/05/figure-1-4-1024x553.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YdQQQZ2A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2021/10/05/figure-1-4-1024x553.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-and-community-blog-posts"&gt;
  &lt;/a&gt;
  AWS and Community blog posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Virginia Chu and Hunter Tom write in their post, &lt;a href="https://aws-oss.beachgeek.co.uk/zl"&gt;Simplifying Kubernetes configurations using AWS Lambda&lt;/a&gt; how to create a multi-stage Dockerfile that uses eksctl, kubectl, and aws-auth. Why would you want to do that? This will help you manage your Amazon EKS clusters dynamically using a Lambda function rather than installing kubectl or eksctl on a local machine. Additionally, all container images are stored in a versioned format as infrastructure as code.&lt;/p&gt;

&lt;p&gt;I also read this post from Okta, &lt;a href="https://aws-oss.beachgeek.co.uk/zq"&gt;Secure Access to AWS EKS Clusters for Admins&lt;/a&gt; from Nico Triballier. In this tutorial, Nico shows you how you can use OpenID Connect (OIDC) to allow developers to securely access Amazon EKS clusters on AWS. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenSearch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS Hero and open sourcerer Ian Mckay put together this blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/zc"&gt;Migrating to OpenSearch with CloudFormation&lt;/a&gt; on how to migrate from an Elasticsearch domain to an OpenSearch domain. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Lucene&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It was great to see this post from former colleague Matt Asay and Marcus Eagan from MongoDB, diving deep on how MongoDB Atlas uses Apache Lucene within Atlas Search. Read the post, &lt;a href="https://aws-oss.beachgeek.co.uk/zi"&gt;How AWS and MongoDB collaborate to unlock the power of Apache Lucene&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IRZoU10n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/09/23/mongo_lucene_f1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IRZoU10n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/09/23/mongo_lucene_f1.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Innersource&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;InnerSource is the term for the emerging practice of organisations adopting the open source methodology and tools in order to build their applications. I was very excited to read &lt;a href="https://aws-oss.beachgeek.co.uk/z9"&gt;Building an InnerSource ecosystem using AWS DevOps tools&lt;/a&gt; from Debashish Chakrabarty and Akash Verma. The post discusses how to build a model InnerSource ecosystem that leverages multiple AWS services, such as CodeBuild, CodeCommit, CodePipeline, CodeArtifact, and CodeGuru, along with other AWS services and open source tools such as the &lt;a href="https://aws-oss.beachgeek.co.uk/zb"&gt;InnerSource Portal from SAP&lt;/a&gt;. The post provides a nice tool, the &lt;a href="https://aws-oss.beachgeek.co.uk/za"&gt;codecommit-crawler-innersource&lt;/a&gt; that provides a custom crawler for AWS CodeCommit that generates the repos.json that can be used by the SAP InnerSource Portal. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wL8tnQkF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2021/09/28/InnerSource-Architecture-1024x506.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wL8tnQkF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2021/09/28/InnerSource-Architecture-1024x506.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feast&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Feast is an open source feature store and a fast, convenient way to serve machine learning (ML) features for training and online inference. Feast lets you build point-in-time correct training datasets from feature data, allows you to deploy a production-grade feature serving stack to AWS and simplifies tracking features models are using. Willem Pienaar, Principal Engineer at Tecton and creator of Feast created a post, &lt;a href="https://aws-oss.beachgeek.co.uk/zg"&gt;Getting started with Feast, an open source feature store running on AWS Managed Services&lt;/a&gt; that does what it says on the tin - walks you through how you can use Feast using a real-time credit scoring example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UVCWte0P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://awsopensourceblog.s3.us-east-2.amazonaws.com/assets/phi_feast/phi-feast_f1_1000x500.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UVCWte0P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://awsopensourceblog.s3.us-east-2.amazonaws.com/assets/phi_feast/phi-feast_f1_1000x500.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Airflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A couple of Apache Airflow posts this week (neither by me!), covering some cool topics that I often hear developers wanting to know how to do.&lt;/p&gt;

&lt;p&gt;First up we have Uma Ramadoss who has put together this post, &lt;a href="https://aws-oss.beachgeek.co.uk/zh"&gt;Automating a DAG deployment with Amazon Managed Workflows for Apache Airflow&lt;/a&gt; that goes beyond just creating a simple CI/CD pipeline for your workflows, and includes how you test them and then how you automate the deployment and updating of your MWAA environments. Super useful. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--whsSvPDz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/09/27/ramadu_dag_mwaa_f1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--whsSvPDz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/09/27/ramadu_dag_mwaa_f1.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To follow that, we have Henry Robalino who wrote &lt;a href="https://aws-oss.beachgeek.co.uk/zj"&gt;Using Okta as an identity provider with Amazon MWAA&lt;/a&gt; which shows you how you can integrate an existing identity provider (in this instance, Okta) to authenticate via AWS SSO to your Amazon Managed Workflows for Apache Airflow (Amazon MWAA) environments. Very nice post indeed. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Flink/Apache Kafka&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Chinmayi Narasimhadevara walks you through how to create stream processing applications using Apache Flink, in this hands on post, &lt;a href="https://aws-oss.beachgeek.co.uk/zf"&gt;Query your Amazon MSK topics interactively using Amazon Kinesis Data Analytics Studio&lt;/a&gt;. Apache Flink is an open-source framework and engine for processing data streams, and in the post she walks you through creating some example applications to interact with streaming data from Apache Kafka in Scala, Python and SQL.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Ranger&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Apache Ranger is an open source project that provides security capabilities for Hadoop clusters, and in this post &lt;a href="https://aws-oss.beachgeek.co.uk/zk"&gt;Authorize SparkSQL data manipulation on Amazon EMR using Apache Ranger&lt;/a&gt; from Varun Rao Bhamidimarri and Jalpan Randeri, you will learn more about how Amazon EMR 6.4 has introduced additional authorising capabilities for data manipulation statements with Apache Ranger 2.0.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jBQi-JEj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/10/04/Ranger-Spark-feature.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jBQi-JEj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/10/04/Ranger-Spark-feature.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Naga Appani has put together this post, &lt;a href="https://aws-oss.beachgeek.co.uk/ze"&gt;Tune sorting operations in PostgreSQL with work_mem&lt;/a&gt; where he talks about how and where to identify queries that are suboptimal, such as ones that require sorting on disk, and how to use various optimisation techniques to improve performance. What is work_mem? Read the post to find out what it is and why it is important in how you optimise your queries.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS CDK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Om Prakash Jha writes in his post, &lt;a href="https://aws-oss.beachgeek.co.uk/zm"&gt;Align with best practices while creating infrastructure using CDK Aspects&lt;/a&gt;, how if you are utilising AWS CDK to provision your infrastructure, you can apply some best practices to not only to evaluate compliance of your resources against the best practices, but also modify their state to make them compliant before they are created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CuaMwW0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2021/09/27/cdk-lifecycle.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CuaMwW0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2021/09/27/cdk-lifecycle.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-updates"&gt;
  &lt;/a&gt;
  Quick updates
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Apache Spark&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon EMR now supports Apache Spark SQL to insert data into and update Apache Hive metadata tables when Apache Ranger integration is enabled. In January we launched Amazon EMR integration with Apache Ranger, a feature that allows you to define and enforce database, table, and column-level permissions when Apache Spark users access data in Amazon S3 through the Hive Metastore. &lt;/p&gt;

&lt;p&gt;Previously, with Apache Ranger is enabled, you were limited to only being able to read data using Spark SQL statements such as SHOW DATABASES and DESCRIBE TABLE. &lt;strong&gt;Now&lt;/strong&gt;, you can also insert data into, or update the Apache Hive metadata tables with these statements: INSERT INTO, INSERT OVERWRITE, and ALTER TABLE.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon Relational Database Service (Amazon RDS) for PostgreSQL now supports PostGIS major version 3.1. This new version of PostGIS is available on PostgreSQL versions 13.4, 12.8, 11.13, 10.18, and higher. &lt;/p&gt;

&lt;p&gt;PostGIS allows you to store, query and analyse geospatial data within a PostgreSQL database. PostGIS 3.1 significantly improves performance such as spatial joins, which now run up to 6.8X faster on PostgreSQL 13. As an example, you could use a spatial join to count the number of people living in an area defined by the reception of mobile phones from radio towers.&lt;/p&gt;

&lt;p&gt;PostGIS 3.1 is the new default version on PostgreSQL 10 and higher starting with the new minor versions. However, you can still create older versions of PostGIS in your PostgreSQL database, e.g., if you require version stability.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ubuntu&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon EC2 now supports Hibernation for Ubuntu 20.04 LTS operating system. Hibernation allows you to pause your EC2 Instances and resume them at a later time, rather than fully terminating and restarting them. Resuming your instance lets your applications continue from where they left off so that you don’t have to restart your OS and application from scratch. Hibernation is useful for cases where rebuilding application state is time-consuming (e.g., developer desktops) or an application’s start-up steps can be prepared in advance of a scale-out.&lt;/p&gt;

&lt;p&gt;For Ubuntu 20.04 LTS, Hibernation is supported for On-Demand Instances running on C3, C4, C5, C5d, I3, M3, M4, M5, M5a, M5ad, M5d, R3, R4, R5, R5a, R5ad, R5d, T2, T3, and T3a with up to 150 GB of RAM.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video-of-the-week"&gt;
  &lt;/a&gt;
  Video of the week
&lt;/h3&gt;

&lt;p&gt;This week we have Michael Hausenblas' session at the Swiss Cloud Native Day, where he gave this session How open source made observability mainstream.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kZci80ksfAM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Following that we have this recorded workshop from Provectus, Amazon SageMaker and Open-Source Tools for ML: Better Together.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/0EnJyyV10sU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#workshops"&gt;
  &lt;/a&gt;
  Workshops
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Hadoop on Kubernetes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you have not seen or worked through this workshop, &lt;a href="https://aws-oss.beachgeek.co.uk/zn"&gt;EMR on EKS Workshop&lt;/a&gt; then it provides a nice entry point into running some of the open source analytics tools such as Apache Spark on Kubernetes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events-for-your-diary"&gt;
  &lt;/a&gt;
  Events for your diary
&lt;/h3&gt;

&lt;p&gt;Coming up later this week we have...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Container Day x KubeCon&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;October 12th, 8:00 AM – 4:00 PM (PDT)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The AWS Kubernetes team is back for the next instillment of Container Day x KubeCon, a full day of sessions on Amazon EKS and Kubernetes at AWS. In this live and virtual Twitch event, the AWS Kubernetes team, hosted by developer advocates Justin Garrison and Jesse Butler, will be covering new launches, demoing products and features, and answering your questions. &lt;a href="https://aws-oss.beachgeek.co.uk/cr"&gt;Sign up&lt;/a&gt; to be reminded when things kick off.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GraphQL API security best practices with AWS AppSync and AWS Amplify&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;14th October, 11am AEST&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As a developer, the most important parts of managing your applications should always include enhancing performance while strengthening security. In this webinar, we take you through security best practices for your GraphQL API’s with AWS AppSync and AWS Amplify, providing you with an understanding of how these can be applied to your applications. In this session, you will learn about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GraphQL Protocol and how to configure a schema&lt;/li&gt;
&lt;li&gt;Possible ways to authenticate and authorise access to GraphQL APIs&lt;/li&gt;
&lt;li&gt;How to configure network security for your API&lt;/li&gt;
&lt;li&gt;How to enable observability for your API with logging, tracing or auditing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To &lt;a href="https://aws-oss.beachgeek.co.uk/ue"&gt;register for this event, use this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flink Forwards Global 2021&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;October 26th/27th&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Flink Forward Global 2021 is a 2-day virtual conference for the Apache Flink and stream processing communities. Apache Flink is an open-source distributed engine for processing data streams that can support both streaming and batch workloads. Flink Forward has keynote presentations and talks on production Flink use cases, technical deep dive sessions, and the growth of the Flink ecosystem. You can meet core Flink committers, new and experienced users, and thought leaders who share experiences and best practices in stream processing, real-time analytics, and the management of mission-critical Flink deployments in production.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/wh"&gt;Read more and sign up here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Databricks | AWS Lakehouse Dev Day Live Workshop&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;November 16th 9:00 AM PT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Delta Lake is an open source storage layer that provides ACID transactions, scalable metadata handling, and unifies streaming and batch data processing. You can use Delta Lake on top of your existing data lake. During this workshop you will learn how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make your existing Amazon S3 data lakes into a lakehouse with Delta Lake.
&lt;/li&gt;
&lt;li&gt;Provide an easy-to-use platform for analysts to directly query data on your data lake using SQL Analytics&lt;/li&gt;
&lt;li&gt;Simplify and automate data pipelines for streaming and batch data to lower costs and boost productivity for your data teams&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/zs"&gt;Read more and sign up here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stay-in-touch-with-open-source-at-aws"&gt;
  &lt;/a&gt;
  Stay in touch with open source at AWS
&lt;/h3&gt;

&lt;p&gt;I hope this summary has been useful. Remember to check out the &lt;a href="https://aws.amazon.com/opensource/?opensource-all.sort-by=item.additionalFields.startDate&amp;amp;opensource-all.sort-order=asc"&gt;Open Source homepage&lt;/a&gt; to keep up to date with all our activity in open source by following us on &lt;a href="https://twitter.com/AWSOpen"&gt;@AWSOpen&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>aws</category>
    </item>
    <item>
      <title>Dashboard Widget with Tailwind CSS &amp; Chart.js</title>
      <author>Rupak Dey</author>
      <pubDate>Mon, 11 Oct 2021 06:59:00 +0000</pubDate>
      <link>https://dev.to/deyrupak/dashboard-widget-with-tailwind-css-chart-js-20j8</link>
      <guid>https://dev.to/deyrupak/dashboard-widget-with-tailwind-css-chart-js-20j8</guid>
      <description>&lt;p&gt;&lt;em&gt;Save for later.&lt;/em&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Hello. Through this post we'll see how we can make a dashboard widget (in the cover photo) with the help of Tailwind CSS and Chart.js!&lt;/p&gt;

&lt;p&gt;Let's directly get into it 🚀&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#step-1-include-the-assets"&gt;
  &lt;/a&gt;
  Step 1: Include the assets
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;You may do this either via CDN or NPM. I've used CDN here.&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;link rel="stylesheet" 
href="https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css"  
/&amp;gt;
&amp;lt;link rel="stylesheet" 
href="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.css"
/&amp;gt;
&amp;lt;script 
src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.js"&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-2-build-the-interface"&gt;
  &lt;/a&gt;
  &lt;br&gt;Step 2 : Build the interface
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;This consists of making the card, placing the text and chart.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="min-w-screen min-h-screen bg-gray-200 flex items-center justify-center px-5 py-5"&amp;gt;
  &amp;lt;div class="w-full max-w-3xl"&amp;gt;
    &amp;lt;div class="-mx-2 md:flex"&amp;gt;
      &amp;lt;div class="w-full md:w-1/3 px-2"&amp;gt;
        &amp;lt;div class="rounded-lg shadow-sm mb-4"&amp;gt;
          &amp;lt;div class="rounded-lg bg-white shadow-lg md:shadow-xl relative overflow:hidden"&amp;gt;
            &amp;lt;div class="px-3 pt-8 pb-10 text-center relative z-10"&amp;gt;
              &amp;lt;h4 class="text-sm uppercase text-gray-500 leading-tight"&amp;gt;
                Followers
              &amp;lt;/h4&amp;gt;
              &amp;lt;h3 class="text-3xl text-gray-700 font-semibold leading-tight my-3"&amp;gt;
                13,579
              &amp;lt;/h3&amp;gt;
              &amp;lt;p class="text-xs text-green-500 leading-tight"&amp;gt;
                🔺 40.9%
              &amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="absolute bottom-0 inset-x-0"&amp;gt;
              &amp;lt;canvas id="chart1" height="70"&amp;gt;&amp;lt;/canvas&amp;gt;
            &amp;lt;/div&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-3-add-the-chart"&gt;
  &lt;/a&gt;
  &lt;br&gt;Step 3 : Add the chart
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;This is the JavaScript we need to generate the chart.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
        const chartOptions = {
        maintainAspectRation: false,
        legend: {
          display: false
        },
        tooltips: {
          enable: false
        },
        elements: {
          point: {
            radius: 0
          }
        },
        scales: {
          xAxes: [
            {
              gridLines: false,
              scaleLabel: false,
              ticks: {
                display: false
              }
            }
          ],
          yAxes: [
            {
              gridLines: false,
              scaleLabel: false,
              ticks: {
                display: false,
                suggestedMin: 0,
                suggestedMax: 10
              }
            }
          ]
        }
      };

      var ctx = document.getElementById("chart1").getContext("2d");
      var chart = new Chart(ctx, {
        type: "line",
        data: {
          labels: [1, 2, 1, 3, 5, 4, 7],
          datasets: [
            {
              backgroundColor: "rgba(101, 116, 205, 0.1)",
              borderColor: "rgba(101, 116, 205, 0.8)",
              borderWidth: 2,
              data: [1, 2, 1, 3, 5, 4, 7]
            }
          ]
        },
        options: chartOptions
      });
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  &lt;br&gt;Output!
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;This is how it turns out to be.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Diqd0lPl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/naugbs3bzw2xtd6f49vo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Diqd0lPl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/naugbs3bzw2xtd6f49vo.png" alt="Output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Congrats! You've made a dashboard widget successfully. Do modify it according to your style and share it in the comment section below!&lt;br&gt;
🙌🏻&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Thank you for reading. Please leave a like if you enjoyed the post and follow for upcoming articles!&lt;/p&gt;

&lt;p&gt;&lt;br&gt;P.S. Want the next post to be something specific? Do let me know in the comments.&lt;/p&gt;

&lt;p&gt;🤘🏻&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Connect with me : &lt;a href="https://github.com/deyRupak"&gt;Github&lt;/a&gt;&lt;br&gt;
Support me : &lt;a href="https://paypal.me/deyrdx?locale.x=en_GB"&gt;Buy me a coffee!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>uiweekly</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
