<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Communication is Key</title>
      <author>Dany Tulumidis</author>
      <pubDate>Sun, 16 May 2021 08:21:28 +0000</pubDate>
      <link>https://dev.to/danytulumidis/communication-is-key-4h48</link>
      <guid>https://dev.to/danytulumidis/communication-is-key-4h48</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Nowadays developers arent just nerdy guys sitting in their basement and talk to nobody except their mothers that bring them food. Developers are the crucial link between a company and the customer. They deliver a valuable outcome for both sides. But to maximize this outcome developers need to communicate. &lt;strong&gt;A lot.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Communication is omnipresent and developers do it all the time. And no, i'm not talking about APIs. But fair point!&lt;/p&gt;

&lt;p&gt;We communicate with a lot of different people at work. With other developers, with team leaders, managers, our bosses, and so on. And on top of that, we communicate in many different ways. In this article, i want to highlight online communication as this is currently the way most of us are working.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#online-presence"&gt;
  &lt;/a&gt;
  Online Presence
&lt;/h1&gt;

&lt;p&gt;Discord, Slack, Microsoft Teams, etc. In times of a pandemic, we mostly use this kind of tool to communicate with our colleagues at work. This changed the way we communicate. Body language? Gone. Pronunciation? Gone. We only type in a chat. It's a bit like what i'm doing here. Sure we have meetings where we talk with other people but most of the time we use the chat function.&lt;/p&gt;

&lt;p&gt;Only having this one medium can be a blocker. It can be frightening. The most crucial thing i noticed and want to emphasize is this:&lt;/p&gt;

&lt;p&gt;Don't take it too seriously. If you are like me you communicate a lot with your feelings. In a chat, you can do it with smileys or general emoticons. You will face people that don't use them and you might think: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Uhh, that was harsh. &lt;/p&gt;

&lt;p&gt;Why is he/she such in a bad mood? &lt;/p&gt;

&lt;p&gt;Is he/she in a rush? I shouldn't disturb him/her anymore.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is not the case. In like 95 % of those cases it's just them chatting in that way. They don't like to use emoticons. But they aren't necessarily pissed.&lt;/p&gt;

&lt;p&gt;Don't let that block you from communicating with those persons!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#do-good-things-and-talk-about-them"&gt;
  &lt;/a&gt;
  Do good things and talk about them
&lt;/h1&gt;

&lt;p&gt;This is something i also need to work on and it's very important. In a world where we communicate via applications like Microsoft Teams, we don't have that small talk in the office where we talk about the work we do on a daily basis. We don't talk or talk less about things we improved or where we think we could improve them.&lt;/p&gt;

&lt;p&gt;Talking about all things that you do in your work has many benefits. For you and for your colleagues such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Encourage others and motivate them&lt;/li&gt;
&lt;li&gt;Discover new technologies and new ways on how to tackle a specific problem&lt;/li&gt;
&lt;li&gt;Train your communication skillset&lt;/li&gt;
&lt;li&gt;Motivate yourself as your bosses and colleagues will notice it and encourage you&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For me and many others, this could be strange in the beginning. I'm more of an introverted person and i don't talk about everything i do. If i do things on my work like refactor code i don't tell people about it because i think it's not a big deal. But that's not true. If you talk about stuff like that you encourage other people to do the same! Maybe others think about your changes and why you made those changes. Maybe they take those code examples to improve their own coding style to adapt to that. Who knows. But you gave them the choice.&lt;/p&gt;

&lt;p&gt;Unbelievable things can happen if you communicate enough. You could suggest a feature that you are missing in the application. And one week later you work on a new feature, maybe with new and cool technologies to implement them.&lt;/p&gt;

&lt;p&gt;Talk about your work. Talk about improvements. Talk about your failures. Give your colleagues the possibility to learn from and with you!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#soft-skills-gt-hard-skills"&gt;
  &lt;/a&gt;
  Soft Skills &amp;gt; Hard Skills
&lt;/h1&gt;

&lt;p&gt;Communication is something that is called a "Soft Skill". Know your programming languages, algorithms, etc. are hard skills.&lt;br&gt;
Many times people overvalue hard skills and undervalue soft skills. &lt;/p&gt;

&lt;p&gt;Communication skills are the #1 most wanted skill companies are looking for. These times are perfect to train those skills, especially as an introverted person. You are safe at home behind your screen and don't have to expose yourself and your body to a strange environment. Perfect conditions for you to train your communication skillset!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Communication is key. In a world like ours, online communication is our daily bread. It changed our whole life and many of us have to adapt to that. Not all of us likes only online communication but we can do the best out of it and use it to improve our communication skillset. Do good things and talk about them!&lt;/p&gt;

&lt;p&gt;Stay connected to me and my content on &lt;a href="https://twitter.com/danytulumidis"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I love to improve myself every single day even if its just a tiny bit!&lt;/p&gt;

&lt;p&gt;Stay save and healthy guys!&lt;/p&gt;

&lt;p&gt;And as always: develop yourself!&lt;/p&gt;

</description>
      <category>communication</category>
      <category>productivity</category>
      <category>selfimprovement</category>
    </item>
    <item>
      <title>Strategy Pattern - Design Patterns</title>
      <author>Karthik Raja</author>
      <pubDate>Sun, 16 May 2021 06:33:00 +0000</pubDate>
      <link>https://dev.to/karthikraja34/strategy-pattern-design-patterns-10cb</link>
      <guid>https://dev.to/karthikraja34/strategy-pattern-design-patterns-10cb</guid>
      <description>&lt;p&gt;In this post, I am going to talk about one of the popular design patterns - Strategy pattern. Before learning it let me give you a small introduction about what is a design pattern.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-design-patterns"&gt;
  &lt;/a&gt;
  What are design patterns?
&lt;/h3&gt;

&lt;p&gt;Design patterns are solutions for commonly occurring problems in software design. They heavily depend on object-oriented principles and are introduced by a group of programmers known as &lt;a href="https://en.wikipedia.org/wiki/Design_Patterns"&gt;Gang of Four&lt;/a&gt;. There are totally 24 design patterns divided among categories such as&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creational patterns&lt;/li&gt;
&lt;li&gt;Structural patterns&lt;/li&gt;
&lt;li&gt;Behavioral patterns&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Without further ado, let's see the strategy pattern.&lt;/p&gt;

&lt;p&gt;According to Wikipedia, Strategy pattern helps in the selection of algorithm at runtime.  This pattern lets the algorithm vary independently from clients that use it.&lt;/p&gt;

&lt;p&gt;To explain the above, let me describe a most common problem and how it is handled using a strategy pattern&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h3&gt;

&lt;p&gt;Let's say we are building an eCommerce application and we have multiple payment options such as credit card, debit card, PayPal, etc.., Another thing to note is we may get new payment options in the future.&lt;/p&gt;

&lt;p&gt;For the above problem, We can create separate strategy classes for each payment option, and then finally we can create a class that would accept a payment algorithm and then let that algorithm decide how the user pays. Payment algorithm can be credit card, debit card, etc..,&lt;/p&gt;

&lt;p&gt;The advantage in using the above approach is Whenever a new payment option comes, we can write a new payment algorithm class and then use that strategy. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages"&gt;
  &lt;/a&gt;
  Advantages
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Follows clean code and Open-Closed principle&lt;/li&gt;
&lt;li&gt;It is easy to switch between different algorithms/strategies in runtime.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#basic-implementation"&gt;
  &lt;/a&gt;
  Basic Implementation
&lt;/h3&gt;

&lt;p&gt;Let's consider we have a list of elements which we need to sort. It should support any sorting algorithm.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;abc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ABC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;abstractmethod&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Strategy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ABC&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;abstractmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BubbleSortStrategy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Strategy&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Sorting Logic
&lt;/span&gt;        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Using Bubble Sort"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InsertionSortStrategy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Strategy&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Sorting Logic
&lt;/span&gt;        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Using Insertion Sort"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, we created a base class &lt;code&gt;Strategy&lt;/code&gt; that has abstract method &lt;code&gt;sort&lt;/code&gt; . Now, whichever sorting algorithm we require should extend this class and implement the &lt;code&gt;sort&lt;/code&gt; method. For the sake of simplicity, I have just printed which sorted algorithm we are using instead of actually sorting with that algorithm.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Sorter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;elements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_strategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BubbleSortStrategy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_strategy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Strategy&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_strategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strategy&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;elements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_strategy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Sorter&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# By default this uses bubble sorting algorithm
&lt;/span&gt;    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_strategy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InsertionSortStrategy&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you see in the above code, we created a class called &lt;code&gt;Sorter&lt;/code&gt; which has the elements to be sorted, and also it has a method &lt;code&gt;set_strategy&lt;/code&gt; we can provide an instance of SortingStrategy as input to that during runtime. It will use the provided strategy to sort the elements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;This pattern helps in choosing a specific algorithm from multiple algorithms. &lt;a href="http://www.passportjs.org/"&gt;Passport js&lt;/a&gt; uses this pattern to select which authentication mechanism to use when a user logs in to a web app.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>🔥 Working of Node.js | Blocking &amp; Non-Blocking Architecture Explained (video)</title>
      <author>The Nerdy Dev</author>
      <pubDate>Sun, 16 May 2021 04:54:22 +0000</pubDate>
      <link>https://dev.to/thenerdydev/working-of-node-js-blocking-non-blocking-architecture-explained-video-74d</link>
      <guid>https://dev.to/thenerdydev/working-of-node-js-blocking-non-blocking-architecture-explained-video-74d</guid>
      <description>&lt;p&gt;In this video, we will understand how Node.js works and then we will understand the difference between the blocking and non-blocking architecture. Node.js as we know is asynchronous and non-blocking and we will understand why this architecture that Node.js uses is better than a conventional blocking architecture.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/QtDO5_5ttAE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Follow me on:&lt;br&gt;
👉 Twitter: &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt;&lt;br&gt;
👉 Instagram: &lt;a href="https://instagram.com/thenerdydev"&gt;https://instagram.com/thenerdydev&lt;/a&gt;&lt;br&gt;
👉 YouTube: &lt;a href="https://youtube.com/thenerdydev"&gt;https://youtube.com/thenerdydev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt; - Make sure to subscribe to my YouTube Channel for FREE content on Web Development and loads of other technologies. &lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>100daysofcode</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Zero to Hero: Get started with Open Source Projects</title>
      <author>Tapajyoti Bose</author>
      <pubDate>Sun, 16 May 2021 04:40:10 +0000</pubDate>
      <link>https://dev.to/ruppysuppy/zero-to-hero-get-started-with-open-source-10b7</link>
      <guid>https://dev.to/ruppysuppy/zero-to-hero-get-started-with-open-source-10b7</guid>
      <description>&lt;p&gt;I had been super interested in contributing to &lt;strong&gt;Open Source Projects&lt;/strong&gt; for a long time but didn't have any idea on how to get started. This article is for anyone who wants to get into &lt;strong&gt;Open Source Projects&lt;/strong&gt; development but feels overwhelmed on how to start.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite
&lt;/h1&gt;

&lt;p&gt;You will need basic knowledge of &lt;code&gt;git&lt;/code&gt; to follow along with this article. We will be focusing on &lt;strong&gt;Open Source Projects&lt;/strong&gt; on &lt;strong&gt;GitHub&lt;/strong&gt;, but the same skillset is transferable to any other &lt;code&gt;git&lt;/code&gt; based site like &lt;strong&gt;GitLab&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The first thing to do is &lt;em&gt;Fork&lt;/em&gt; the repository you want to contribute to:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AgWN7BDF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrh8x832a2ylzeoh9j3j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AgWN7BDF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrh8x832a2ylzeoh9j3j.png" alt="Github Fork"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you have a copy of the repository in your &lt;strong&gt;GitHub&lt;/strong&gt; account.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copy the &lt;code&gt;clone&lt;/code&gt; link:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b-Wjk2mX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfhhkuajgl918t1cqy35.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b-Wjk2mX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfhhkuajgl918t1cqy35.png" alt="GitHub Clone Link"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Execute the command:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
  git clone &amp;lt;clone link&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A copy of the repository will be created on your machine. Add &lt;em&gt;Upstream&lt;/em&gt; remote, which is just a fancy name for the source repository, using:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
  git remote add &amp;lt;upstream remote name&amp;gt; &amp;lt;source repository clone link&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now you can modify the code. Make sure to commit all the changes you make.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After committing changes, you can update the source repository using:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
  git push origin &amp;lt;branch name to push changes&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now you can create a &lt;em&gt;Pull Request&lt;/em&gt; in the source repository and the maintainers would review and merge your code.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#how-to-overcome-the-fear-of-starting"&gt;
  &lt;/a&gt;
  How to overcome the fear of starting?
&lt;/h1&gt;

&lt;p&gt;Now that you know how to contribute to &lt;strong&gt;Open Source Projects&lt;/strong&gt;, you might just want to jump right in and contribute to the largest projects on the planet. But I can assure you when you are about to open your first few &lt;em&gt;Pull Request&lt;/em&gt;, &lt;strong&gt;Imposter Syndrome&lt;/strong&gt; will hit you real hard with questions like &lt;em&gt;"Would I be able to do this correctly?"&lt;/em&gt; and &lt;em&gt;"What if I fail?"&lt;/em&gt;. The only antidote to this fear is &lt;strong&gt;ACTION&lt;/strong&gt;! If you are feeling unsure, contact the members of the organisation you want to contribute to, as most organisations use some platform like &lt;strong&gt;Discord&lt;/strong&gt; to discuss about the contributions. One year ago I was exactly in your shoes, and now I do have a couple of contributions in some amazing repositories:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ez58eqz5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gltqercd4zewsvofb85.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ez58eqz5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gltqercd4zewsvofb85.PNG" alt="Git Contribution"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you start on this journey and keep putting one foot in front of the other even when challenges and difficulties show up, you will make it! Best of Luck :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uZaFj7tB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bzs4akyew80oy0r8f2j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uZaFj7tB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bzs4akyew80oy0r8f2j.jpg" alt="You Got This"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h1&gt;

&lt;p&gt;Want to work together? Contact me on &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Connect to me on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.linkedin.com/in/tapajyoti-bose-429a601a0"&gt;LinkedIn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://tapajyoti-bose.vercel.app"&gt;Portfolio&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>opensource</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Curated list of Newsletters to level up your coding skills
</title>
      <author>Amandeep Singh</author>
      <pubDate>Sun, 16 May 2021 04:34:04 +0000</pubDate>
      <link>https://dev.to/aman_singh/curated-list-of-newsletters-to-level-up-your-coding-skills-4heb</link>
      <guid>https://dev.to/aman_singh/curated-list-of-newsletters-to-level-up-your-coding-skills-4heb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#taking-one-step-forward"&gt;
  &lt;/a&gt;
  Taking one step forward
&lt;/h2&gt;

&lt;p&gt;Learning is an unending process. The era we live in carries a plethora of resources to grab those learning opportunities—a major one is the 'Internet'. &lt;/p&gt;

&lt;p&gt;If you're working for a company, you might be learning from your peers, seniors, &amp;amp; colleagues. This is important to hone your skills, especially in software engineering where things are evolving every day. And as the metaphor goes, &lt;a href="https://en.wikipedia.org/wiki/Standing_on_the_shoulders_of_giants"&gt;Standing on the shoulders of giants&lt;/a&gt;, is completely true, and so does this quote, "&lt;em&gt;If you don't step forward, you're always in the same place&lt;/em&gt;".&lt;/p&gt;

&lt;p&gt;So, let's take one step forward, and I'd like to share a list of newsletters, which I have had been reading for a while. These newsletters are mostly focused on front-end (JavaScript, CSS, HTML, and Accessibility) topics but also cover UX, Usability, and Design. &lt;/p&gt;

&lt;p&gt;Overall great freebie packages, written by industry professionals, which get delivered to you while you sleep in the night 🛌. Let's get started.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-css-html"&gt;
  &lt;/a&gt;
  1. CSS, HTML
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://csslayout.news/"&gt;CSS Layout&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;about: &lt;em&gt;tutorials, news, information on all things CSS Layout&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;frequency: &lt;em&gt;weekly&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;by: &lt;em&gt;&lt;a href="https://twitter.com/rachelandrew"&gt;Rachel Andrew&lt;/a&gt;&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;a href="https://css-weekly.com"&gt;CSS Weekly&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;about: &lt;em&gt;CSS articles, tutorials, experiments, and tools&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;by: &lt;em&gt;&lt;a href="https://twitter.com/ZoranJambor"&gt;Zoran jambor&lt;/a&gt;&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/newsletter/"&gt;CSS-Tricks&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;about: &lt;em&gt;focussed on CSS, but covers other web dev topics too&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;frequency: &lt;em&gt;weekly&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;by: &lt;em&gt;&lt;a href="https://chriscoyier.net/"&gt;Chris&lt;/a&gt; and &lt;a href="https://css-tricks.com/about"&gt;CSS-Tricks team&lt;/a&gt;&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;a href="https://moderncss.dev/newsletter/"&gt;Modern CSS&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;about: &lt;em&gt;CSS tips, accessibility, updates &amp;amp; front-end resources&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;by: &lt;em&gt;&lt;a href="https://thinkdobecreate.com/"&gt;Stephanie Eckles&lt;/a&gt;&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;a href="https://www.smashingmagazine.com/the-smashing-newsletter/"&gt;Smashing Magazine&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;about: &lt;em&gt;Front-End, UX&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;frequency: &lt;em&gt;weekly&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;by: &lt;em&gt;&lt;a href="https://www.smashingmagazine.com/"&gt;Smashing Magazine&lt;/a&gt;&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-javascript"&gt;
  &lt;/a&gt;
  2. JavaScript
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://bytes.dev/"&gt;bytes by U;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;about: &lt;em&gt;JavaScript ecosystem&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;frequency: &lt;em&gt;every Monday&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;by: &lt;em&gt;&lt;a href="https://twitter.com/tylermcginnis"&gt;Tyler McGinnis&lt;/a&gt;&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;a href="http://esnextnews.com/"&gt;ES.next&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;about: &lt;em&gt;the latest in JavaScript and cross-platform tools&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;frequency: &lt;em&gt;weekly&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;by: &lt;em&gt;&lt;a href="https://twitter.com/rauschma"&gt;Dr. Axel Rauschmayer&lt;/a&gt; and &lt;a href="https://twitter.com/jowe"&gt;Johannes Weber&lt;/a&gt;&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;a href="https://javascriptweekly.com/"&gt;JavaScript Weekly&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;about: &lt;em&gt;JavaScript articles, news and cool projects&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;by: &lt;em&gt;&lt;a href="https://Cooperpress.com"&gt;Cooper Press&lt;/a&gt;&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;a href="https://gomakethings.com/"&gt;Go Make things&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;about: &lt;em&gt;short email focussed on vanilla JavaScript, code snippets, tools, techniques&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;frequency: &lt;em&gt;each weekday&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;by: &lt;em&gt;&lt;a href="https://gomakethings.com/about/"&gt;Chris Ferdinandi&lt;/a&gt;&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-accessibility-ux-design"&gt;
  &lt;/a&gt;
  3. Accessibility, UX, Design
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://adamsilver.io/signup/"&gt;Good Design&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;about: &lt;em&gt;Design, UI, and UX&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;frequency: &lt;em&gt;monthly&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;by: &lt;em&gt;&lt;a href="https://adamsilver.io/"&gt;Adam Silver&lt;/a&gt;&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;a href="https://www.nngroup.com/articles/subscribe/"&gt;Neilsen Norman Group&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;about: &lt;em&gt;Design, Usability, and UX research&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;frequency: &lt;em&gt;weekly&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;by: &lt;em&gt;&lt;a href="https://www.nngroup.com/"&gt;Nielsen Norman Group&lt;/a&gt;&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-reactjs"&gt;
  &lt;/a&gt;
  4. ReactJS
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://reactnewsletter.com/"&gt;React Newsletter&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;about: &lt;em&gt;React news, tutorials, resources&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;frequency: &lt;em&gt;every Tuesday&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;by: &lt;em&gt;&lt;a href="https://twitter.com/tylermcginnis"&gt;Tyler McGinnis&lt;/a&gt;&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;a href="https://kentcdodds.com/subscribe/"&gt;Kentcdodds newsletter&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;about: &lt;em&gt;tutorials and articles on React, JavaScript and Node&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;by: &lt;em&gt;&lt;a href="https://kentcdodds.com/"&gt;Kentcdodds&lt;/a&gt;&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-nodejs"&gt;
  &lt;/a&gt;
  5. NodeJS
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://nodeweekly.com/"&gt;Node Weekly&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;about: &lt;em&gt;Node.js news and article&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;by: &lt;em&gt;&lt;a href="https://Cooperpress.com"&gt;Cooper Press&lt;/a&gt;&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#6-graphql"&gt;
  &lt;/a&gt;
  6. GraphQL
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.graphqlweekly.com/"&gt;GraphQL Weekly&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;about: &lt;em&gt;news, articles and projects about GraphQL&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;by: &lt;em&gt;&lt;a href="https://www.prisma.io/"&gt;Prisma&lt;/a&gt;, &lt;a href="https://www.novvum.io/"&gt;Novvum&lt;/a&gt;&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#7-web-dev-amp-tips"&gt;
  &lt;/a&gt;
  7. Web Dev &amp;amp; Tips
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.stefanjudis.com/newsletter/"&gt;Stefan's web weekly&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;about: &lt;em&gt;web dev learnings, productivity tips, useful GitHub projects, devsheets, &amp;amp; music&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;by: &lt;em&gt;&lt;a href="https://www.stefanjudis.com/"&gt;Stefan Judis&lt;/a&gt;&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#8-career-growth"&gt;
  &lt;/a&gt;
  8. Career Growth
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://humanwhocodes.com/newsletter/"&gt;Human Who Codes&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;about: &lt;em&gt;intended for web application engineers who want to grow their career; covers JS, web dev, leadership, architecture, teamwork&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;frequency: &lt;em&gt;every other Tuesday of the month&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;by: &lt;em&gt;&lt;a href="https://www.twitter.com/slicknet/"&gt;Nicholas C.Zakas&lt;/a&gt;&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Subscribing to these newsletters is half the battle won. You need to schedule a plan to read them on regular basis, otherwise, these emails might will start to feel overwhelmed. In your inbox, you can also filter and label them accordingly based on the category I showed you above. And then pick one or two specific topics to read on a regular interval. It's about putting in small efforts and being consistent.&lt;/p&gt;

&lt;p&gt;If you work for a company, you can share these new updates in a brown bag, or knowledge-sharing sessions. Soon you'll realise how far have you come.&lt;/p&gt;

&lt;p&gt;Thanks for reading, and do share this list with others so that they can join you on &lt;code&gt;riding the giants&lt;/code&gt;. Good luck 🙂.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>node</category>
      <category>css</category>
    </item>
    <item>
      <title>Best Tools to Debug Your HTML Code</title>
      <author>Tannu Daral</author>
      <pubDate>Sun, 16 May 2021 04:19:08 +0000</pubDate>
      <link>https://dev.to/tannudaral/best-tools-to-debug-your-html-code-13gc</link>
      <guid>https://dev.to/tannudaral/best-tools-to-debug-your-html-code-13gc</guid>
      <description>&lt;p&gt;As a website developer, our aim should be to make our content accessible to a maximum number of people and for that, our code should be bug-free and syntactically and semantically correct. Here are some of the best tools I've come across:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A Validator&lt;br&gt;
The &lt;a href="https://validator.w3.org/"&gt;W3C validator&lt;/a&gt; is great. You can validate your code either by directly uploading the file or the URL(Uniform Resource Locator) or by direct input. Always use a validator after finishing writing the code as this will help you to write efficient and error-free code. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;WAVE Web Accessibility Evaluation Tool&lt;br&gt;
&lt;a href="http://wave.webaim.org/"&gt;Wave&lt;/a&gt; is an amazing tool as it helps you make your website accessible to a maximum number of people. It also helps you find errors that might normally stay hidden.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Funkify &lt;br&gt;
&lt;a href="https://www.funkify.org/"&gt;Funkify&lt;/a&gt; is an extension for Chrome that helps you experience the web and interfaces through the eyes of extreme users with different abilities and disabilities. Add this extension to your chrome and write better accessible code.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you have other suggestions, kindly put them in the comments.&lt;/p&gt;

&lt;p&gt;Keep Learning!&lt;br&gt;
Keep Coding!&lt;/p&gt;

</description>
      <category>html</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>10 basic concepts of React JS</title>
      <author>Sayem Mohammad Ismail</author>
      <pubDate>Sun, 16 May 2021 04:16:37 +0000</pubDate>
      <link>https://dev.to/smismail/10-basic-concepts-of-react-js-4hfh</link>
      <guid>https://dev.to/smismail/10-basic-concepts-of-react-js-4hfh</guid>
      <description>&lt;p&gt;Nowadays React Js has been quite a popular framework for web development. It has some incredible features to offer that made it so successful. Here, I present 10 of them that I find interesting — &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#virtual-dom"&gt;
  &lt;/a&gt;
  Virtual DOM:
&lt;/h3&gt;

&lt;p&gt;The virtual DOM (VDOM) is a programming concept where an ideal, or “virtual”, representation of a UI is kept in memory and synced with the “real” DOM by a library such as ReactDOM. &lt;/p&gt;

&lt;p&gt;DOM manipulation in most JavaScript frameworks get the DOM updated/rebuilt in its entirety in response to any change, even for a very small change. Modern websites may have a lot of data and may use a big amount of DOM manipulation. In such a scenario the process gets very inefficient. &lt;/p&gt;

&lt;p&gt;The Virtual DOM acts like a blueprint for the real DOM. For every DOM object react creates a corresponding virtual DOM object which becomes a representation of the DOM. Such a VDOM same properties as real DOM but lacks the power to change the screen display elements directly. Manipulating DOM might be slow but manipulating the VDOM is faster as nothing is onscreen. Though VDOM update also makes all of the VDOM objects updated, it is still incredibly faster as mentioned before. Once VDOM gets updated, react compares the updated VDOM with the immediate previous VDOM (before the update). This way react gets to know exactly which VDOM objects got changed and it makes only and only that change to the actual DOM to show on screen. &lt;/p&gt;

&lt;p&gt;Thus, react updates only the required parts of the DOM making it very efficient. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jsx-"&gt;
  &lt;/a&gt;
  JSX :
&lt;/h3&gt;

&lt;p&gt;The JSX in react is a syntactic version of writing just the function &lt;code&gt;React.createElement(component, props, ...children)&lt;/code&gt;. And the code format for JSX is,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const jsxElement = &amp;lt;h1 className= ”greeting”&amp;gt; Hello World ! &amp;lt;/h1&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is called JSX and it is a syntax extension of JavaScript. This code compiles into &lt;code&gt;React.createElements()&lt;/code&gt; calls, this way,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;React.createElemet(
    ‘h1’,
    {className: ‘greeting’},
    ‘Hello World !’
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function in turn converts into a object like,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const jsxElement = {
    type: ‘h1’,
    props: { 
        className: ‘greeting’,
        children: ‘Hello World !’
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#embedding-expressions-in-jsx"&gt;
  &lt;/a&gt;
  Embedding expressions in JSX
&lt;/h3&gt;

&lt;p&gt;Valid JavaScript expressions can be embedded in a JSX code, such as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const user = “Tom Cruise”
const jsxElement = &amp;lt;h1&amp;gt; Hello, {user} &amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#react-elements"&gt;
  &lt;/a&gt;
  React Elements:
&lt;/h3&gt;

&lt;p&gt;Elements are the building blocks for components. An example for a simple element is such,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const element = &amp;lt;h1&amp;gt;I am an Element&amp;lt;/h1&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rendering-elements"&gt;
  &lt;/a&gt;
  Rendering Elements:
&lt;/h3&gt;

&lt;p&gt;React apps usually have a single &lt;code&gt;root DOM node&lt;/code&gt; in the HTML file, which is &lt;code&gt;&amp;lt;div id="root"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; and react DOM manages everything inside it.&lt;br&gt;&lt;br&gt;
In order to render a react element in the root DOM node, both of them have to passed into &lt;code&gt;ReactDOM.render()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const element = &amp;lt;h1&amp;gt;I am an Element&amp;lt;/h1&amp;gt; ;
ReactDOM.render(element, document.getElementById("root"));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components:
&lt;/h3&gt;

&lt;p&gt;Components are JavaScript functions that take arbitrary inputs as &lt;code&gt;props&lt;/code&gt; and return the elements for UI. It allows the developer to work with different sections of the app discreetly.&lt;br&gt;&lt;br&gt;
Component is defined as a JavaScript function,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Greeting (props) {
    return &amp;lt;h1&amp;gt;Hello, {props.name}&amp;lt;/h1&amp;gt;
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now this function can be called as component &lt;code&gt;&amp;lt;Greeting /&amp;gt;&lt;/code&gt; . &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#class-components"&gt;
  &lt;/a&gt;
  Class Components:
&lt;/h3&gt;

&lt;p&gt;Components a]can also be defined as ES6 class. Both function and class components have the same features.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Greeting extends React.Component {
    render () {
         &amp;lt;h1&amp;gt;Hello, {this.props.name}&amp;lt;/h1&amp;gt;
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both ways of defining components are equivalent to react. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#component-rendering"&gt;
  &lt;/a&gt;
  Component rendering:
&lt;/h3&gt;

&lt;p&gt;Rendering a component is the same as rendering an element. The element here shall represent the component defined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Greeting (props) {
    return &amp;lt;h1&amp;gt;Hello, {props.name}&amp;lt;/h1&amp;gt;
}

const element = &amp;lt;Greeting /&amp;gt;;

ReactDOM.render(
    element,
    document.getElementById(“root”)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#component-lifecycle"&gt;
  &lt;/a&gt;
  Component Lifecycle:
&lt;/h3&gt;

&lt;p&gt;There are many component lifecycle methods to be called upon either the rending of the component (called “mounting” in react) or removal of the component (called “Unmounting” in react) or change in the props or state (called “updating” in react).&lt;/p&gt;

&lt;p&gt;The commonly used Lifecycle methods are as given below,&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#mounting"&gt;
  &lt;/a&gt;
  mounting
&lt;/h6&gt;

&lt;p&gt;These methods are called in the following order when an instance of a component being created and inserted into the DOM. &lt;br&gt;
&lt;code&gt;constructor()&lt;/code&gt;&lt;br&gt;
&lt;code&gt;render()&lt;/code&gt;&lt;br&gt;
&lt;code&gt;componentDidMount()&lt;/code&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#updating"&gt;
  &lt;/a&gt;
  updating
&lt;/h6&gt;

&lt;p&gt;An update can be caused by the change in props or state. These methods are called in the following order when a component is re-rendered.&lt;br&gt;
&lt;code&gt;render()&lt;/code&gt;&lt;br&gt;
&lt;code&gt;componentDidUpdate()&lt;/code&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#unmounting"&gt;
  &lt;/a&gt;
  unmounting
&lt;/h6&gt;

&lt;p&gt;This method is called when a component gets removed from the DOM. &lt;br&gt;
&lt;code&gt;componentWillUnmount()&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-apis-and-properties"&gt;
  &lt;/a&gt;
  Other APIs and Properties:
&lt;/h3&gt;

&lt;p&gt;There are Two other APIs that can be called from the component,&lt;br&gt;
&lt;code&gt;setState()&lt;/code&gt;&lt;br&gt;
&lt;code&gt;forceUpdate()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There are properties of two categories, and they are class properties and instance properties.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#class-properties"&gt;
  &lt;/a&gt;
  Class Properties
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;defaultProps&lt;/code&gt;&lt;br&gt;
&lt;code&gt;displayName&lt;/code&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#instance-properties"&gt;
  &lt;/a&gt;
  Instance Properties
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;props&lt;/code&gt;&lt;br&gt;
&lt;code&gt;state&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sources:&lt;/em&gt; &lt;a href="https://reactjs.org/docs/faq-internals.html#:~:text=The%20virtual%20DOM%20(VDOM)%20is,This%20process%20is%20called%20reconciliation."&gt;VDOM&lt;/a&gt;, &lt;a href="https://reactjs.org/docs/jsx-in-depth.html"&gt;JSX&lt;/a&gt;, &lt;a href="https://reactjs.org/docs/rendering-elements.html"&gt;elements&lt;/a&gt;, &lt;a href="https://reactjs.org/docs/components-and-props.html"&gt;components and props&lt;/a&gt;, &lt;a href="https://reactjs.org/docs/state-and-lifecycle.html"&gt;state and lifecycle&lt;/a&gt;, &lt;a href="https://reactjs.org/docs/react-component.html#defaultprops"&gt;default props&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>How to write print statement syntax in Java same as C language?</title>
      <author>Keshav Kumar</author>
      <pubDate>Sun, 16 May 2021 04:12:47 +0000</pubDate>
      <link>https://dev.to/keshavcodex/how-to-write-print-statement-syntax-in-java-same-as-c-language-e8i</link>
      <guid>https://dev.to/keshavcodex/how-to-write-print-statement-syntax-in-java-same-as-c-language-e8i</guid>
      <description>&lt;p&gt;There are basically 4 print statements in java,since the most used ones are &lt;br&gt;
System.out.println();&lt;br&gt;
System.out.print();&lt;/p&gt;

&lt;p&gt;but there are 2 more statements, those are&lt;br&gt;
System.out.printf();&lt;br&gt;
System.out.format();&lt;/p&gt;

&lt;p&gt;by using these 2 you will be able to write print statement with syntax same as C language.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>JavaScript Made Easy: Part 14</title>
      <author>David Tetreau</author>
      <pubDate>Sun, 16 May 2021 02:48:51 +0000</pubDate>
      <link>https://dev.to/dtetreau/javascript-made-easy-part-14-10ce</link>
      <guid>https://dev.to/dtetreau/javascript-made-easy-part-14-10ce</guid>
      <description>&lt;p&gt;There are many built-in methods in JavaScript that we can use to make programming easier. For Part 14, we will go over some of the more common string methods. Open up your repl and code along!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#string-methods"&gt;
  &lt;/a&gt;
  String Methods
&lt;/h2&gt;

&lt;p&gt;String methods help you to work with strings. It can save a lot of time! These built-in methods handle tasks much more quickly and efficiently than doing things manually. Here are some important string methods:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#length"&gt;
  &lt;/a&gt;
  .length
&lt;/h3&gt;

&lt;p&gt;This is a method that will return the number of characters in a string. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gorilla&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// logs 7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The .length method checked the animal string and returned its length. Then, the number 7 was logged to the console. This represents the total number of characters in the string. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#indexof"&gt;
  &lt;/a&gt;
  indexOf()
&lt;/h3&gt;

&lt;p&gt;This method tells you the location (index) of the first time specified characters appear in a string. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light blue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// returns 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method is different from .length because .length returns the total character count, whereas .indexOf returns the index of the first character of the part of the string you're looking for. The indexes in a string start at 0. If the .indexOf method does not find the specified characters in a string, it will return -1. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lastindexof"&gt;
  &lt;/a&gt;
  lastIndexOf()
&lt;/h3&gt;

&lt;p&gt;This method gives you the location (index) of the last time specified characters appear in a string. The number that is returned is the location of the first character of the specified characters which the method is searching for.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shark&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My favorite shark is the Great White Shark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shark&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastIndexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;shark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// returns 12&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the lastIndexOf("shark") is case sensitive. Therefore, it returns the index of 12 because that is last time the lowercase version of "shark" appears in the sentence. Also, notice that it returns the index of the first character of that word.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sliceindex1-index2"&gt;
  &lt;/a&gt;
  slice(index1, index2)
&lt;/h3&gt;

&lt;p&gt;This method takes strings and returns the part you slice out of it. The method takes a start point and an end point (indexes). To use this method, you have to know where the substring you are interested in starts. Here’s an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;superheroes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Superman&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;superheroes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;//up&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;superheroes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Superman&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run this code, you will see that when you slice from index 1 to index 3 in the array, it just makes a copy of that part of the array without changing the original array. You can see this by running console.log() on the original array after slicing. If you only provide one parameter, the remainder of the string will be sliced. If you provide a negative parameter, the slice will start from the end of the string and work backwards. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#substring"&gt;
  &lt;/a&gt;
  substring()
&lt;/h3&gt;

&lt;p&gt;According to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring"&gt;MDN Web Docs&lt;/a&gt; "The substring() and slice() methods are almost identical, but there are a couple of subtle differences between the two." Here are the differences:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;With the substring method, if the first index is greater than the second index, the arguments are automatically swapped. The slice method will return an empty string. &lt;/li&gt;
&lt;li&gt;The substring method automatically treats arguments that are negative or NAN as being the number 0. Whereas, with the slice method, negative values are counted backwards from the end of the string. Here's an example:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Soul&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Sou&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// becomes (0, 0)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#replace-"&gt;
  &lt;/a&gt;
  replace(" "," ")
&lt;/h3&gt;

&lt;p&gt;This method is very simple. It replaces a group of characters in a string and substitutes another. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;favoriteColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My favorite color is green&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;favoriteColor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;green&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#touppercase-and-tolowercase"&gt;
  &lt;/a&gt;
  toUpperCase() and toLowerCase()
&lt;/h3&gt;

&lt;p&gt;A string is converted to upper case with toUpperCase() and a string is converted to lower case with toLowerCase(). Here is an example of both of these methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;alphabet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a, B, c, D, e, F, g, H, i, J, k, L, m&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="c1"&gt;// all uppercase&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="c1"&gt;// all lowercase&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#concat"&gt;
  &lt;/a&gt;
  concat()
&lt;/h3&gt;

&lt;p&gt;concat() joins strings together. Here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;brand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Microsoft&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;system&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; Windows&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;operatingSystem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;brand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;system&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;operatingSystem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method is another way to accomplish string concatenation which we learned about in a previous post. &lt;/p&gt;

&lt;p&gt;I hope you have enjoyed this post! Please check out the entire "JavaScript Made Easy" series by David Tetreau. There will be a new post daily.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>8 TedX talk for Developer you can't miss</title>
      <author>Dev Write Ups</author>
      <pubDate>Sun, 16 May 2021 02:40:26 +0000</pubDate>
      <link>https://dev.to/devwriteups/8-tedx-talk-for-developer-you-can-t-miss-27fl</link>
      <guid>https://dev.to/devwriteups/8-tedx-talk-for-developer-you-can-t-miss-27fl</guid>
      <description>&lt;p&gt;TedX talks don't teach how to to code bu rather how to be a coder. Knowing how to think is the key. It could assist you with improving your meeting methods and trust in gatherings assisting you with propelling your vocation once you get your foot in the entryway. Let's explore the list of talk we think you should watch. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#a-delightful-way-to-teach-kids-about-computers-linda-liukas"&gt;
  &lt;/a&gt;
  A delightful way to teach kids about computers | Linda Liukas
&lt;/h3&gt;

&lt;p&gt;PC codes is the following all inclusive language, and its syntax will be restricted simply by the minds of the up and coming age of developers. Linda Liukas is assisting with teaching critical thinking kids, urging them to see PCs not as mechanical, exhausting and confounded however as bright, expressive machines intended to be dabbled with.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thomas-suarez-12-year-old-developer-2012"&gt;
  &lt;/a&gt;
  Thomas Suarez | 12 Year Old Developer (2012)
&lt;/h3&gt;

&lt;p&gt;Most 12-year-olds love playing videogames - Thomas Suarez showed himself how to make them. In the wake of creating iPhone applications like "Bustin Jeiber," a whack-a-mole game, he is currently utilizing his abilities to help different children become engineers&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#elon-musk-the-future-were-building"&gt;
  &lt;/a&gt;
  Elon Musk | The future we're building
&lt;/h3&gt;

&lt;p&gt;Elon Musk talks about his new task burrowing burrows under LA, the most recent from Tesla and SpaceX and his inspiration for building a future on Mars in discussion with TED's Head Curator, Chris Anderson.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inside-the-mind-of-a-master-procrastinator-tim-urban"&gt;
  &lt;/a&gt;
  Inside the mind of a master procrastinator | Tim Urban
&lt;/h3&gt;

&lt;p&gt;Tim Urban realizes that lingering doesn't bode well, however he's always been unable to shake his propensity for holding up until the last moment to complete things.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-mind-behind-linux"&gt;
  &lt;/a&gt;
  The mind behind Linux
&lt;/h3&gt;

&lt;p&gt;Linus Torvalds changed innovation twice — first with the Linux kernel, which helps power the Internet, and again with Git, the source code the executives framework utilized by designers around the world. In an uncommon meeting with TED Curator Chris Anderson, Torvalds talks about with astounding receptiveness the character characteristics that incited his exceptional way of thinking of work, designing and life.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-algorithms-shape-our-world-kevin-slavin"&gt;
  &lt;/a&gt;
  How algorithms shape our world - Kevin Slavin
&lt;/h3&gt;

&lt;p&gt;Kevin Slavin contends that we're living in a world intended for - and progressively constrained by - algorithms. In this arresting talk from TEDGlobal, he shows how these intricate PC programs decide surveillance strategies, stock costs, film contents, and design. Slavin additionally cautions that we are composing code we can't comprehend with suggestions we can't handle.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-a-handful-of-tech-companies-control-billions-of-minds-every-day-tristan-harris"&gt;
  &lt;/a&gt;
  How a handful of tech companies control billions of minds every day | Tristan Harris
&lt;/h3&gt;

&lt;p&gt;A small bunch of individuals working at a modest bunch of tech organizations steer the contemplation of billions of individuals consistently, says design thinker Tristan Harris. From Facebook notices to Snapstreaks to YouTube autoplays, they're all going after a certain something: your consideration. Harris shares how these organizations go after our brain science for their own benefit and requires a plan renaissance wherein our tech rather urges us to experience the timetable we need.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-get-your-brain-to-focus-chris-bailey-tedxmanchester"&gt;
  &lt;/a&gt;
  How to Get Your Brain to Focus | Chris Bailey | TEDxManchester
&lt;/h3&gt;

&lt;p&gt;So how would we tackle our thoughtfulness regarding center further, get occupied less, and surprisingly become more inventive? Chris Bailey, writer of the new book Hyperfocus, discusses how our capacity to center is the way to profitability, innovativeness, and carrying on with a significant life.&lt;/p&gt;




&lt;p&gt;😎Thanks For Reading | Happy Coding⚡&lt;/p&gt;

&lt;p&gt;Thank you For Reading🤩 Subscribe to our  &lt;a href="https://www.devintro.com"&gt;newsletter&lt;/a&gt; , we send it occasionally with amazing news, resources and many thing.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>learning</category>
      <category>programming</category>
    </item>
    <item>
      <title>AWS Identity and Access Management</title>
      <author>Ajit Singh</author>
      <pubDate>Sun, 16 May 2021 02:14:40 +0000</pubDate>
      <link>https://dev.to/ajitsinghkaler/aws-identity-and-access-management-4jc2</link>
      <guid>https://dev.to/ajitsinghkaler/aws-identity-and-access-management-4jc2</guid>
      <description>&lt;p&gt;IAM is the Identity and Access Management service in AWS it is used to create users and assign them to groups. Whenever anyone needs access to an AWS service within out organisation then we only want them to access only some services on our account because they can change something because of malicious intent or a mistake. We want to give them as little access as possible to complete there job to reduce any mishaps but when we create an account on AWS that user by default has root access. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-of-iam"&gt;
  &lt;/a&gt;
  Use of IAM
&lt;/h2&gt;

&lt;p&gt;To combat this situation AWS has a service which allows us to create users and allow them only certain restrictions that service is IAM. In IAM for each user we create a new account and give them certain accesses and privileges. We can also create some groups which already contain access and privileges required to complete some tasks. After that we can add users to these certain groups.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#iam-concepts"&gt;
  &lt;/a&gt;
  IAM concepts
&lt;/h2&gt;

&lt;p&gt;Majorly IAM is divided into 4 concepts:-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;User groups&lt;/li&gt;
&lt;li&gt;Users&lt;/li&gt;
&lt;li&gt;Roles&lt;/li&gt;
&lt;li&gt;Policies &lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#user-groups"&gt;
  &lt;/a&gt;
  User Groups
&lt;/h3&gt;

&lt;p&gt;User groups are groups that are created to reuse access given to a certain user. Whenever we create groups we can attach certain access to a group. After that we can add users to a group. This helps in managing users to that all users that are in a group contain the same access. We can also add a user to multiple groups.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#users"&gt;
  &lt;/a&gt;
  Users
&lt;/h3&gt;

&lt;p&gt;These are the users created by IAM&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#roles"&gt;
  &lt;/a&gt;
  Roles
&lt;/h3&gt;

&lt;p&gt;Whenever an AWS service needs access to other services than we create a role an we can add access to other services buy using roles. I also allows application code running on an EC2 instance access perform actions on AWS resources.&lt;/p&gt;

&lt;p&gt;I also allows to add users from other organisations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#policies"&gt;
  &lt;/a&gt;
  Policies
&lt;/h3&gt;

&lt;p&gt;Policies are the list of accesses provided to a user, user group or role in a JSON format AWS already contains many preexisting policies which are really helpful in providing access to AWS users.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>cloudskills</category>
      <category>cloudnewbie</category>
    </item>
    <item>
      <title>A Simple Introduction to Web Sockets</title>
      <author>Tamerlan Gudabayev</author>
      <pubDate>Sun, 16 May 2021 02:08:15 +0000</pubDate>
      <link>https://dev.to/tamerlang/a-simple-introduction-to-web-sockets-g1j</link>
      <guid>https://dev.to/tamerlang/a-simple-introduction-to-web-sockets-g1j</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;As a backend developer, you sometimes get tired of making basic CRUD applications, it's all the same thing but with different business logic. &lt;/p&gt;

&lt;p&gt;You wanna do more interesting stuff.&lt;/p&gt;

&lt;p&gt;Well, a month ago, I had this revelation. From that, I started to research all sorts of new topics. One of the topics I had in mind was web sockets, all this time I kept hearing of the word, but never fully understood it. So I just went and did it, and it's a lot easier than I thought it would be. Today I want to teach you what I taught myself over the past couple of days.&lt;/p&gt;

&lt;p&gt;You will learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is web sockets?&lt;/li&gt;
&lt;li&gt;How does web sockets work?&lt;/li&gt;
&lt;li&gt;What problems do web sockets fix?&lt;/li&gt;
&lt;li&gt;Web sockets pros and cons&lt;/li&gt;
&lt;li&gt;Alternatives to web sockets&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#http"&gt;
  &lt;/a&gt;
  HTTP
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XZUKuEAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oe8cayrrkvcu5e5mbv9k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XZUKuEAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oe8cayrrkvcu5e5mbv9k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every technology was made to fix some problem, for web sockets, it was the limitations of the HTTP protocol. But before we move on to its problems, let us quickly cover HTTP.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTP (Hypertext-Transport-Protocol) is a protocol used to transmit hypermedia documents such as HTML (Hypertext-Markup-Language).&lt;/li&gt;
&lt;li&gt;It is built upon the TCP (Transmission Control Protocol).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So how does HTTP work?&lt;/p&gt;

&lt;p&gt;It's pretty simple, you have two entities, the client, and the server. In web-development terms, the client is your frontend, and the server is the backend. &lt;/p&gt;

&lt;p&gt;The process goes like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The clients opens a TCP connection.&lt;/li&gt;
&lt;li&gt;The client then sends a request (GET, POST, etc...) to the server and waits for a response.&lt;/li&gt;
&lt;li&gt;The server receives and processes the request, then returns back the appropriate data to the client. &lt;/li&gt;
&lt;li&gt;The client receives the response and closes the TCP connection.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In a nutshell, it works like this, there are other variations of HTTP such as HTTP 1.1, HTTP 2, and HTTP 3. They work differently but essentially it's all request-response. Feel free to research them on your own time. &lt;/p&gt;

&lt;p&gt;This approach of request-response works great. It is still used today (2021) and will be used in the future, but it has some flaws. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problems-with-http"&gt;
  &lt;/a&gt;
  Problems with HTTP
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--whJ-vrn0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sh1mr0yh1dzuzlwzmmtl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--whJ-vrn0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sh1mr0yh1dzuzlwzmmtl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Over time, web sites became more and more complex. Facebook started out as a simple social media site, but now it isn't just a site, it's a whole platform. The world became more connected, messaging apps started to dominate the market. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;People wanted to text each other in real-time.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Unfortunately, HTTP wasn't made for this. &lt;/p&gt;

&lt;p&gt;As you may recall, HTTP architecture is request-response, the client must initiate the connection, and once it receives its data, it closes it. But what if we want the server to send updated data to the client, for example, someone sends a message to a group chat, then all other members must be notified. The user can simply refresh the page, and fetch the updated data, but this is a horrible experience for the user. &lt;/p&gt;

&lt;p&gt;Smart computer scientists realized this and concluded that we need to create a new protocol.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-sockets"&gt;
  &lt;/a&gt;
  Web Sockets
&lt;/h2&gt;

&lt;p&gt;This is where web sockets come into the picture, web sockets is a protocol that allows bi-directional communication between the server and the client over a single TCP connection. &lt;/p&gt;

&lt;p&gt;Okay, this may sound complicated but don't worry it's not. &lt;/p&gt;

&lt;p&gt;Let's go through the flow of web sockets. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_AvLofyv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57mw04oj87550359cmtr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_AvLofyv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57mw04oj87550359cmtr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The client sends a request to the server, requesting to change the protocol. &lt;/li&gt;
&lt;li&gt;The server receives the request, and if it supports web sockets, it would change its protocol to it.&lt;/li&gt;
&lt;li&gt;Web socket connection is open and the client and server can continuously talk to each other. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Step 1 and 2 are known as the web socket handshake.&lt;/p&gt;

&lt;p&gt;With web sockets now, the server can send the new messages back to the client, whenever it gets updated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-sockets-use-cases"&gt;
  &lt;/a&gt;
  Web Sockets Use Cases
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Messaging&lt;/li&gt;
&lt;li&gt;Social feeds&lt;/li&gt;
&lt;li&gt;Multiplayer games&lt;/li&gt;
&lt;li&gt;Collaborative editing/coding&lt;/li&gt;
&lt;li&gt;Clickstream data&lt;/li&gt;
&lt;li&gt;Financial tickers&lt;/li&gt;
&lt;li&gt;Sports updates&lt;/li&gt;
&lt;li&gt;Multimedia chat&lt;/li&gt;
&lt;li&gt;Location-based apps&lt;/li&gt;
&lt;li&gt;Online education&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#web-sockets-pros-and-cons"&gt;
  &lt;/a&gt;
  Web Sockets Pros and Cons
&lt;/h2&gt;

&lt;p&gt;Technology is not perfect, everything has its strengths and weaknesses. The main advantage of web sockets are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's bi-directional communication.&lt;/li&gt;
&lt;li&gt;It's HTTP compatibility.&lt;/li&gt;
&lt;li&gt;Because it's HTTP compatible, it's also firewall-friendly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The downsides are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Proxying is tricky.&lt;/li&gt;
&lt;li&gt;Load balancing is challenging.&lt;/li&gt;
&lt;li&gt;Stateful — meaning it's hard to horizontally scale.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#alternatives-to-web-sockets"&gt;
  &lt;/a&gt;
  Alternatives to Web Sockets
&lt;/h2&gt;

&lt;p&gt;There are several alternatives to web sockets, but each has its preferred use case.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WebHooks&lt;/li&gt;
&lt;li&gt;HTTP streaming&lt;/li&gt;
&lt;li&gt;Web Transport (still very new but definitely keep an eye on it)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I encourage everyone to test out this technology, it's not very hard to implement especially in JavaScript. You can create a simple chat app. Anyways, I hope you learned something today, and as always if you got any questions feel free to leave them down in the comments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#additional-references"&gt;
  &lt;/a&gt;
  Additional References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=2Nt-ZrNP22A"&gt;https://www.youtube.com/watch?v=2Nt-ZrNP22A&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=PjiXkJ6P9pQ"&gt;https://www.youtube.com/watch?v=PjiXkJ6P9pQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=6RvlKYgRFYQ"&gt;https://www.youtube.com/watch?v=6RvlKYgRFYQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>computerscience</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
