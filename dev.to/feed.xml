<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Lessons Learned from Building Businesses as a Technical Solo Founder</title>
      <author>Mo Boudra</author>
      <pubDate>Thu, 30 Dec 2021 07:58:27 +0000</pubDate>
      <link>https://dev.to/moboudra/lessons-learned-from-building-businesses-as-a-technical-solo-founder-5dpb</link>
      <guid>https://dev.to/moboudra/lessons-learned-from-building-businesses-as-a-technical-solo-founder-5dpb</guid>
      <description>&lt;p&gt;I've been working on my SaaS projects all by myself over the last four years, and I've had some failures and some success, here are some of the lessons that I've learned!&lt;/p&gt;

&lt;p&gt;Although it may look easy from the outside, doing all the development, marketing, customer service and everything else required to run a business takes a lot of time and effort, but it's not impossible. There are countless examples of highly successful businesses operated by a one-person team.&lt;/p&gt;

&lt;p&gt;Some examples that I know of are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a ref="nofollow" href="https://unicornplatform.com/"&gt;Unicorn Platform ($19k MRR)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a ref="nofollow" href="https://bannerbear.com/"&gt;Bannerbear ($27k MRR)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a ref="nofollow" href="https://nomadlist.com/"&gt;NomadList ($46K MRR)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As far as I know, they're all run by a single person doing all the things, including the development of the product. They're all very open about how they go about things and their blogs are a great source of inspiration!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#tame-your-inner-perfectionist"&gt;
  &lt;/a&gt;
  Tame your inner perfectionist
&lt;/h2&gt;

&lt;p&gt;You have to let go of your ego and allow yourself to ship something that might embarrass you.&lt;/p&gt;

&lt;p&gt;Don't get me wrong, I am not talking about shipping a half-assed product or something that doesn't work . The hustle MVP mentality of building something functional in a weekend, and releasing it to see if anyone is desperate enough to buy your product is not sustainable either, there's a middle ground where you can be proud of your product but release with some rough edges.&lt;/p&gt;

&lt;p&gt;For some reason we think that when we release a project to the wild people will start flocking to the signup page, "you build it, they will come" right? but it's never the case, which yeah it is frustrating.&lt;/p&gt;

&lt;p&gt;You've spent all this time building this great but no one knows about it yet, marketing is as important if not more important than the development of the product, so make sure you allocate some time for that.&lt;/p&gt;

&lt;p&gt;In my experience, unless you already have an audience, it's going to be a long time form when you deploy your project to get paid customers that are not your family or buddies, so the earlier you launch that the earlier you can start getting real feedback and iterate on your product.&lt;/p&gt;

&lt;p&gt;Whenever I get the urge to spend a whole day refactoring simple things I ask myself if this will bring more value to the customer, if in the same amount of time that it will take me to refactor this little thing I can provide more value elsewhere I try to do that instead. I know, easier said than done :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#focus-on-what-energizes-you"&gt;
  &lt;/a&gt;
  Focus on what energizes you
&lt;/h2&gt;

&lt;p&gt;A business needs constant attention and you have to be able to put in the hours, even when you don't want to, the worst thing is having to work in areas that you don't enjoy. Make sure you work on something that uses your strengths as much as possible, this will also give you a competitive advantage against the competition.&lt;/p&gt;

&lt;p&gt;This is the reason why I decided to work on something like &lt;a href="https://geniebot.co"&gt;Genie&lt;/a&gt;, it's a problem that I am passionate about and I can see it evolve in many directions, which excites me and I know will keep me on my toes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-it-for-the-right-reasons"&gt;
  &lt;/a&gt;
  Do it for the right reasons
&lt;/h2&gt;

&lt;p&gt;I have realized that all my failed projects had something in common, they were all built for the wrong reasons. I was chasing a trend, trying to take advantage of a growth opportunity, or unconsciously copying someone else's idea.&lt;/p&gt;

&lt;p&gt;When that happens it eventually gets to a point where you don't have the energy to work on it anymore and lose motivation, whenever you start a new project you should ask whether you can see yourself working on this in the next years and if you don't then the idea might not be worth pursuing.&lt;/p&gt;

&lt;p&gt;You have to figure out the right reasons yourself as everyone has different priorities, my reason at the moment is that I'd like to make a living doing what I enjoy doing, so I start from there, and then pick something that can solve a real problem and turn it into a business, and not the other way around.&lt;/p&gt;

&lt;p&gt;It's been proven that most of what makes a business successful is being consistent and relentlessly market and improving your product to solve real problems, so ensuring that you work on something that you'll be able to still enjoy during years is a pretty great indicator of future success.&lt;/p&gt;




&lt;p&gt;I hope you found this insightful! Share if you did :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I am currently working on &lt;a href="https://geniebot.co"&gt;Genie&lt;/a&gt;, a platform that streamlines the process of building and deploying custom bots.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>technical</category>
      <category>founder</category>
      <category>financial</category>
      <category>independence</category>
    </item>
    <item>
      <title>🛑 Stop Use Of Javascript Like This.</title>
      <author>CTen_A Live</author>
      <pubDate>Thu, 30 Dec 2021 07:51:17 +0000</pubDate>
      <link>https://dev.to/ctenlive/stop-use-of-javascript-like-this-oi9</link>
      <guid>https://dev.to/ctenlive/stop-use-of-javascript-like-this-oi9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello"&gt;
  &lt;/a&gt;
  Hello
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1.Use Arrow function instead regular function.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thanks for Reading.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>＄Tracing Money in Development</title>
      <author>Yusuf Turhan Papurcu</author>
      <pubDate>Thu, 30 Dec 2021 07:26:50 +0000</pubDate>
      <link>https://dev.to/yusufpapurcu/tracing-money-in-development-54dg</link>
      <guid>https://dev.to/yusufpapurcu/tracing-money-in-development-54dg</guid>
      <description>&lt;p&gt;After nearly 1 month, I am here with %40 but noticeable progress. I was so busy so I had a little chances in weeks to develop this fun product. In 1 month I worked less than 10 hours for this project.&lt;/p&gt;

&lt;p&gt;And we have a really basic telegram bot 🎉🎉🎉&lt;/p&gt;

&lt;p&gt;I am saying basic because this telegram bot has 2 commands at all. One command for expense logging and one command for income logging. It works and stores data to supabase. I think thats enough for first step. So before talking about our next steps lets talk about progress some.&lt;/p&gt;

&lt;p&gt;I used &lt;a href="//github.com/go-telegram-bot-api/telegram-bot-api"&gt;&lt;code&gt;go-telegram-bot-api&lt;/code&gt;&lt;/a&gt; as a telegram bot client library. This library is useful enough to create this bot. Also I used &lt;a href="//github.com/supabase/postgrest-go"&gt;&lt;code&gt;postgrest-go&lt;/code&gt;&lt;/a&gt; for implementing supabase. Also with &lt;code&gt;postgrest-go&lt;/code&gt; I can use local postgreSQL for testing. Thats a nice feature.&lt;/p&gt;

&lt;p&gt;For testing I created very basic &lt;code&gt;docker-compose&lt;/code&gt;. Even I didn't write that. I copied from postgrest document :)&lt;/p&gt;

&lt;p&gt;And thats the progress. Oh also I created a logo for this project. You can see it on &lt;a href="https://github.com/tracingmoney"&gt;github organization&lt;/a&gt;. I wrote &lt;code&gt;$&lt;/code&gt; in excalidraw and screenshooted it.&lt;/p&gt;

&lt;p&gt;For next I will do some data science and I will create usage analysis for my expenses. I hope this project can reach its destination.&lt;/p&gt;

</description>
      <category>go</category>
      <category>product</category>
      <category>opensource</category>
      <category>programming</category>
    </item>
    <item>
      <title>RPA: Catalyst of Industrial Revolution 4.0</title>
      <author>K S Monish Kumar</author>
      <pubDate>Thu, 30 Dec 2021 06:56:59 +0000</pubDate>
      <link>https://dev.to/monish3004/rpa-catalyst-of-industrial-revolution-40-53nj</link>
      <guid>https://dev.to/monish3004/rpa-catalyst-of-industrial-revolution-40-53nj</guid>
      <description>&lt;p&gt;Robotic Process Automation popularly known as RPA. It is used to automate a repetitive task such as sending 500 emails per day, extracting some data from any number of invoices which are partially structured and a storing it in a excel file which is structured.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It was invented to convert unstructured data generated in the third industrial revolution into structured data by analyzing it. It is capable of mimicking human actions.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are many IDE's (Integrated Development Environment) to handle RPA. The environment can be categorized into &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;No Code Platform&lt;/li&gt;
&lt;li&gt;Coding Platform&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;No Code Platform is preferred by everyone as it is efficient in many ways. The major Platforms are as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;UiPath&lt;/li&gt;
&lt;li&gt;Blue Prism&lt;/li&gt;
&lt;li&gt;Automation Anywhere&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is a automations that I have made which makes my life easy.&lt;/p&gt;

&lt;p&gt;During the pandemic everyone has to join meetings or classes virtually.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#joining-classes-or-meeting-on-the-scheduled-time"&gt;
  &lt;/a&gt;
  Joining classes or meeting on the scheduled time
&lt;/h2&gt;

&lt;p&gt;Here is the link for the video for the automation:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://drive.google.com/file/d/1qs4yHUd32eKIKEmarNo7bDpO4BNL_5kw/view?usp=sharing"&gt;Video Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Subscribe for more automations.&lt;/p&gt;

</description>
      <category>automation</category>
      <category>uipath</category>
    </item>
    <item>
      <title>Create React App. Part 3 of 10: Routing</title>
      <author>101samovar</author>
      <pubDate>Thu, 30 Dec 2021 06:55:34 +0000</pubDate>
      <link>https://dev.to/101samovar/create-react-app-part-3-of-10-routing-gap</link>
      <guid>https://dev.to/101samovar/create-react-app-part-3-of-10-routing-gap</guid>
      <description>&lt;p&gt;We are creating a React App.&lt;br&gt;
The React MindMap App.&lt;br&gt;
We have done the layout.&lt;br&gt;
We have created icon buttons and toolbars.&lt;br&gt;
Now we need routing to change screens.&lt;/p&gt;

&lt;p&gt;Source code:&lt;br&gt;
&lt;a href="https://github.com/101samovar/react-mindmap.git"&gt;https://github.com/101samovar/react-mindmap.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our channel:&lt;br&gt;
&lt;a href="https://youtu.be/0XYtePSyFUs"&gt;https://youtu.be/0XYtePSyFUs&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Awesome VSCode extensions for a better coding experience [ Part 1 ]</title>
      <author>Hyperloop007</author>
      <pubDate>Thu, 30 Dec 2021 06:52:36 +0000</pubDate>
      <link>https://dev.to/hyperloop/awesome-vscode-extensions-for-a-better-coding-experience-part-1--3i9b</link>
      <guid>https://dev.to/hyperloop/awesome-vscode-extensions-for-a-better-coding-experience-part-1--3i9b</guid>
      <description>&lt;p&gt;Imagine yourself typing all the HTML boilerplate code when you decided to make a new project or imagine not being able to recall the name of that single property in css and searching the web for it. Why am I talking about all this? It's obvious because this kind of stuff would really suck. So, that brings us to the wonderful extensions that we have in vscode made by a lot of people and you can use them for free.&lt;/p&gt;

&lt;p&gt;What are vscode extensions anyway?&lt;/p&gt;

&lt;p&gt;VSCode extensions let you add debuggers and various tools to your environment and works through various custom settings that the extensions bring with them.&lt;/p&gt;

&lt;p&gt;VSCode extensions are a great way to reduce your workload and make it easy for you to write your code and format it. You can even create your own vscode extensions but we won't talk about it here. There are a lots of extensions available on vscode as of today but I will mention some of which I find really useful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Auto Close Tag:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As you can probably figure out from the name here this extension automatically closes the HTML/XML opening tags you write. You can customize or change the settings from the vscode auto close tag settings.&lt;br&gt;
It can even be used to close the self closing tags in HTML.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---TaGmQfL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwgs7zwzi13bqlguqjif.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---TaGmQfL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwgs7zwzi13bqlguqjif.gif" alt="Image description" width="880" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Auto Rename Tag:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This very extension lets you rename both the opening and the closing tag at once saving you the pain of renaming the tags one by one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HjFaKrW0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ix2qhh1ykrcudrisciol.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HjFaKrW0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ix2qhh1ykrcudrisciol.gif" alt="Image description" width="880" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Bracket Pair Colorizer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This extension colors bracket pairs based on their positioning in the code i.e. bracket pairs adjacent to each other will have different set of color from each other.&lt;/p&gt;

&lt;p&gt;This makes the code look really clean and makes it easy to figure out the block of code you want to go to.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zWo1vZOX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlowfxqsmbh9j83c8ewq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zWo1vZOX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlowfxqsmbh9j83c8ewq.jpg" alt="Image description" width="859" height="421"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Indent Rainbows:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This extension is not all that different from the Bracket Pair Colorizer, just that it does the same with levels of indentations which can prove to be helpful in a language like python.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VwlXPE51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0eh2rsmjybtnmuc3mu4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VwlXPE51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0eh2rsmjybtnmuc3mu4.png" alt="Image description" width="443" height="156"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Live Server:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Not much needs to be said about one of the most popular and useful extensions of all in vscode where you can see live previews and changes of your work with just a single click.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8qdqkQeM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fdsh89duovgb9luf8v1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8qdqkQeM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fdsh89duovgb9luf8v1.gif" alt="Image description" width="880" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Many more to come in part 2...&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>vscode</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>ChristmasLight Css</title>
      <author>0xKirz</author>
      <pubDate>Thu, 30 Dec 2021 05:42:31 +0000</pubDate>
      <link>https://dev.to/kirzin/christmaslight-css-593a</link>
      <guid>https://dev.to/kirzin/christmaslight-css-593a</guid>
      <description>&lt;p&gt;&lt;strong&gt;Merry Christmas &amp;amp; Happy New year Everyone&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BM9_6Xu6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sth2alarcjgu8nsvuqh1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BM9_6Xu6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sth2alarcjgu8nsvuqh1.png" alt="Image description" width="880" height="562"&gt;&lt;/a&gt;&lt;iframe height="600" src="https://codepen.io/kirzin/embed/RwLQQMZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>How to Rice Windows.</title>
      <author>Dhruv Anand</author>
      <pubDate>Thu, 30 Dec 2021 05:29:21 +0000</pubDate>
      <link>https://dev.to/ananddhruv295/how-to-rice-windows-2h12</link>
      <guid>https://dev.to/ananddhruv295/how-to-rice-windows-2h12</guid>
      <description>&lt;h2&gt;
  &lt;a href="#ricing-windows"&gt;
  &lt;/a&gt;
  &lt;em&gt;Ricing Windows&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wg5_8xod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o1p30bfgxqu3gmi849es.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wg5_8xod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o1p30bfgxqu3gmi849es.png" alt="Desktop Preview" width="880" height="476"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#make-your-desktop-look-sick-amp-clean"&gt;
  &lt;/a&gt;
  Make your Desktop look sick &amp;amp; clean.
&lt;/h5&gt;




&lt;p&gt;Here is a list if software and applications that I have used to rice my desktop. &lt;/p&gt;

&lt;p&gt;&lt;u&gt;Web Browser&lt;/u&gt; ▻ &lt;strong&gt;Firefox&lt;/strong&gt;&lt;br&gt;
&lt;u&gt;Music Streaming&lt;/u&gt; ▻ &lt;strong&gt;Spotify&lt;/strong&gt; &lt;br&gt;
&lt;u&gt;Messaging Platform&lt;/u&gt; ▻ &lt;strong&gt;Discord&lt;/strong&gt;&lt;br&gt;
&lt;u&gt;Text Editor&lt;/u&gt; ▻ &lt;strong&gt;Visual Studio Code&lt;/strong&gt;&lt;br&gt;
&lt;u&gt;Terminal&lt;/u&gt;▻ &lt;strong&gt;Windows Terminal&lt;/strong&gt;&lt;br&gt;
&lt;u&gt;File Manager&lt;/u&gt; ▻ &lt;strong&gt;Files&lt;/strong&gt; &lt;br&gt;
&lt;u&gt;Wallpaper Manager&lt;/u&gt; ▻ &lt;strong&gt;Lively&lt;/strong&gt;&lt;br&gt;
&lt;u&gt;App Launcher&lt;/u&gt; ▻ &lt;strong&gt;PowerToys Run&lt;/strong&gt;&lt;br&gt;
&lt;u&gt;Status Bar&lt;/u&gt; ▻ &lt;strong&gt;PolyBar&lt;/strong&gt;&lt;br&gt;
&lt;u&gt;Music Widget&lt;/u&gt; ▻ &lt;strong&gt;ModularPlayers&lt;/strong&gt;&lt;br&gt;
&lt;u&gt;Dock&lt;/u&gt; ▻ &lt;strong&gt;Nexus&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;Head over to my GitHub repository ↴&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/iDCoded"&gt;
        iDCoded
      &lt;/a&gt; / &lt;a href="https://github.com/iDCoded/Windows-Rice"&gt;
        Windows-Rice
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      How to rice Windows. 
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;i&gt;Windows Ricing&lt;/i&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/65074550/147634871-af27d9fd-152c-4ea5-be52-48861ed60908.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4vKqtm8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/65074550/147634871-af27d9fd-152c-4ea5-be52-48861ed60908.png" alt="Desktop"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Wallpaper&lt;/strong&gt; : Spaceman Wallpaper → &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/3bc9ba24d3301ac7fe8cf73062e44e7aba87e7d9fbb873b46422ca066ccc64b4/68747470733a2f2f6d796c69766577616c6c7061706572732e636f6d2f66616e746173792f73706163656d616e2d6a656c6c79666973682d6c6976652d77616c6c70617065722f"&gt;&lt;img src="https://camo.githubusercontent.com/3bc9ba24d3301ac7fe8cf73062e44e7aba87e7d9fbb873b46422ca066ccc64b4/68747470733a2f2f6d796c69766577616c6c7061706572732e636f6d2f66616e746173792f73706163656d616e2d6a656c6c79666973682d6c6976652d77616c6c70617065722f" alt="Here"&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;I have used &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/a8926e4dcecc7bec7e3d82f91bce9d4ded6646cb77639656a7e97408c184c452/68747470733a2f2f6c6976656c7977616c6c70617065722e6e65742f"&gt;&lt;img src="https://camo.githubusercontent.com/a8926e4dcecc7bec7e3d82f91bce9d4ded6646cb77639656a7e97408c184c452/68747470733a2f2f6c6976656c7977616c6c70617065722e6e65742f" alt="Lively"&gt;&lt;/a&gt; for a live wallpaper.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Top bar&lt;/strong&gt; : &lt;a rel="noopener noreferrer" href="https://github.com/khanhas/Polybar"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jOULg9Sf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/khanhas/Polybar" alt="Polybar"&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/73d2b848a51f3c355407ca539ce9318245a9b2e4cf7b7dcd2eadcc27259f8875/68747470733a2f2f7777772e7261696e6d657465722e6e65742f"&gt;&lt;img src="https://camo.githubusercontent.com/73d2b848a51f3c355407ca539ce9318245a9b2e4cf7b7dcd2eadcc27259f8875/68747470733a2f2f7777772e7261696e6d657465722e6e65742f" alt="Rainmeter"&gt;&lt;/a&gt; to add Widgets.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Dock&lt;/strong&gt; : &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/2155e470231cba17281232606d788f55fc0da9a748585fe48cbfae2f4b930f26/68747470733a2f2f7777772e77696e737465702e6e65742f"&gt;&lt;img src="https://camo.githubusercontent.com/2155e470231cba17281232606d788f55fc0da9a748585fe48cbfae2f4b930f26/68747470733a2f2f7777772e77696e737465702e6e65742f" alt="Nexus"&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Music Controller&lt;/strong&gt; : &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/e724f97f5d9c028f73a9b0141325e113c3efe41f0ac13d0d20bf06b49358580c/68747470733a2f2f7777772e64657669616e746172742e636f6d2f6a61786f726967696e616c732f6172742f4d6f64756c6172506c61796572732d76312d332d383836353737323536"&gt;&lt;img src="https://camo.githubusercontent.com/e724f97f5d9c028f73a9b0141325e113c3efe41f0ac13d0d20bf06b49358580c/68747470733a2f2f7777772e64657669616e746172742e636f6d2f6a61786f726967696e616c732f6172742f4d6f64756c6172506c61796572732d76312d332d383836353737323536" alt="ModularPlayers"&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
Applications&lt;/h1&gt;
&lt;h3&gt;
Discord&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/65074550/147639804-098fe178-7ede-4437-83c1-d50cc108d2ee.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XZpu0YpG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/65074550/147639804-098fe178-7ede-4437-83c1-d50cc108d2ee.png" alt="discord"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/iDCoded/Windows-Ricebetterdiscord.app/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vv-3L_yb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/iDCoded/Windows-Ricebetterdiscord.app/" alt="BetterDiscord"&gt;&lt;/a&gt; for &lt;strong&gt;Plugins&lt;/strong&gt; &amp;amp; &lt;strong&gt;Themes&lt;/strong&gt; to enhance Discord.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Theme&lt;/strong&gt; : &lt;a rel="noopener noreferrer" href="https://github.com/CapnKitten/Material-Discord"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p6l9UtGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/CapnKitten/Material-Discord" alt="MaterialDiscord"&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plugins&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Plugins&lt;/th&gt;
&lt;th&gt;Links&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;AppNotifications&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://betterdiscord.app/plugin/AppNotifications" rel="nofollow"&gt;https://betterdiscord.app/plugin/AppNotifications&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;BetterImageViewer&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://1lighty.github.io/BetterDiscordStuff/?plugin=BetterImageViewer" rel="nofollow"&gt;https://1lighty.github.io/BetterDiscordStuff/?plugin=BetterImageViewer&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;GameActivityToggle&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://betterdiscord.app/plugin/GameActivityToggle" rel="nofollow"&gt;https://betterdiscord.app/plugin/GameActivityToggle&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;SpotifyControls&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://betterdiscord.app/plugin/SpotifyControls" rel="nofollow"&gt;https://betterdiscord.app/plugin/SpotifyControls&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h3&gt;
Spotify&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/65074550/147640259-aa7d17a3-3f1a-442d-b290-06fbe7a1f63e.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MLRWKc1q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/65074550/147640259-aa7d17a3-3f1a-442d-b290-06fbe7a1f63e.png" alt="spotify"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/317e2b641f21fade5e938163f6625394c2ede2e15069754c41faadad84531308/68747470733a2f2f7370696365746966792e6170702f"&gt;&lt;img src="https://camo.githubusercontent.com/317e2b641f21fade5e938163f6625394c2ede2e15069754c41faadad84531308/68747470733a2f2f7370696365746966792e6170702f" alt="Spicetify-cli"&gt;&lt;/a&gt; Commandline tool to customize Spotify client.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Theme&lt;/strong&gt; : &lt;strong&gt;Dribbblish&lt;/strong&gt; Color scheme : &lt;strong&gt;Nord-dark&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Extensions&lt;/strong&gt; : &lt;strong&gt;Dribbblish&lt;/strong&gt;, &lt;strong&gt;Popup-Lyrics&lt;/strong&gt;, &lt;strong&gt;Full App Display&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Editor&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Visual Studio Code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/65074550/147641740-3f65c4f6-2582-49bf-b5fb-e40007b5a328.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cWqfL_v5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/65074550/147641740-3f65c4f6-2582-49bf-b5fb-e40007b5a328.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Theme&lt;/strong&gt; : &lt;strong&gt;GitHub Dark&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Font&lt;/strong&gt; : &lt;strong&gt;Fira Code&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Terminal&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Windows Terminal&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/65074550/147642117-409d2389-6c13-428c-83d1-739022060ad8.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eYSlU7Yt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/65074550/147642117-409d2389-6c13-428c-83d1-739022060ad8.png" alt="windows terminal"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Colorscheme&lt;/strong&gt; : &lt;strong&gt;One Half Dark&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;System Info&lt;/strong&gt; : &lt;strong&gt;Screenfetch&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
File Manager&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Files&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/65074550/147641318-768e3acd-3bb9-447d-9148-227d17a6ae1d.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pTwG4lii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/65074550/147641318-768e3acd-3bb9-447d-9148-227d17a6ae1d.png" alt="files"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Custom Theme&lt;/strong&gt; : &lt;strong&gt;Glass&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
App Launcher&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;PowerToys Run&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/65074550/147641624-5eff79c0-975d-47a6-82ce-6c40061045e5.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s----OCf1PQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/65074550/147641624-5eff79c0-975d-47a6-82ce-6c40061045e5.png" alt="powertoys run"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/iDCoded/Windows-Rice"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


</description>
      <category>windows</category>
      <category>ricing</category>
      <category>customization</category>
    </item>
    <item>
      <title>Reverse HTTP proxy over WebSocket in Go (Part 5)</title>
      <author>Kazuki Higashiguchi</author>
      <pubDate>Thu, 30 Dec 2021 04:51:58 +0000</pubDate>
      <link>https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-5-2i0f</link>
      <guid>https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-5-2i0f</guid>
      <description>&lt;h2&gt;
  &lt;a href="#series-introduction"&gt;
  &lt;/a&gt;
  Series introduction
&lt;/h2&gt;

&lt;p&gt;In &lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-4-3g7c"&gt;part 4&lt;/a&gt; I talked about how to relay TCP connection from "App" to the peer of WebSocket, especially implementation to take a WebSocket connection available from pools for relaying received requests.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hgsgtk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4fiWd75c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bSqJvDso--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/720068/2aaac932-cc7d-4d7b-88a0-a1a09290e523.jpeg" alt="hgsgtk"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-4-3g7c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Reverse HTTP proxy over WebSocket in Go (Part 4)&lt;/h2&gt;
      &lt;h3&gt;Kazuki Higashiguchi ・ Dec 28 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#go&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#websocket&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;In this post, I will be starting to talk about how to send the request to the peer through the WebSocket connection.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start a WebSocket server (&lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-1-13n4"&gt;Part 1&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Establish a WebSocket connection (&lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-2-o4a"&gt;Part 2&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Relay TCP connection from "App" to the peer of WebSocket (&lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-3-2ggd"&gt;Part 3&lt;/a&gt; | &lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-4-213i-temp-slug-1615861"&gt;Part 4&lt;/a&gt; | Part 5)&lt;/li&gt;
&lt;li&gt;Relay TCP connection in WebSocket data to "internal API"&lt;/li&gt;
&lt;li&gt;Keep a established connection&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#reverse-http-proxy-over-websocket"&gt;
  &lt;/a&gt;
  Reverse HTTP proxy over WebSocket
&lt;/h2&gt;

&lt;p&gt;A reverse HTTP proxy over WebSocket is a type of proxies, which retrieves resources on behalf on a client from servers and uses the WebSocket protocol as a "tunnel" to pass TCP communication from server to client.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--46eqlV8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iupaoeq283lyeqpkg049.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--46eqlV8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iupaoeq283lyeqpkg049.png" alt="A network diagram for reverse proxy over WebSocket" width="681" height="341"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll introduce Go sample project forked from &lt;a href="https://github.com/root-gg/wsp"&gt;root-gg/wsp&lt;/a&gt; (I forked it because maintenance has stopped and the Go language and libraries version needed to be updated).&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/hgsgtk"&gt;
        hgsgtk
      &lt;/a&gt; / &lt;a href="https://github.com/hgsgtk/wsp"&gt;
        wsp
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      HTTP tunnel over Websocket
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#send-the-request-to-the-peer-through-the-websocket-connection"&gt;
  &lt;/a&gt;
  Send the request to the peer through the WebSocket connection
&lt;/h2&gt;

&lt;p&gt;Let's take a look at the continuation of the previous &lt;a href="https://github.com/hgsgtk/wsp/blob/8d7d7b4eb6aa700950c41756608177514b935507/server/server.go#L189"&gt;HTTP handler code&lt;/a&gt;, which waits the request from "app" to the endpoint &lt;code&gt;/requests/&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit): [1]: Receive requests to be proxied&lt;/span&gt;

    &lt;span class="c"&gt;// [2]: Take a WebSocket connection available from pools for relaying received requests.&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;NewConnectionRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetTimeout&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="c"&gt;// "Dispatcher" is running in a separate thread from the server by `go s.dispatchConnections()`.&lt;/span&gt;
    &lt;span class="c"&gt;// It waits to receive requests to dispatch connection from available pools to clients requests.&lt;/span&gt;
    &lt;span class="c"&gt;// https://github.com/hgsgtk/wsp/blob/ea4902a8e11f820268e52a6245092728efeffd7f/server/server.go#L93&lt;/span&gt;
    &lt;span class="c"&gt;//&lt;/span&gt;
    &lt;span class="c"&gt;// Notify request from handler to dispatcher through Server.dispatcher channel.&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatcher&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
    &lt;span class="c"&gt;// Dispatcher tries to find an available connection pool,&lt;/span&gt;
    &lt;span class="c"&gt;// and it returns the connection through Server.connection channel.&lt;/span&gt;
    &lt;span class="c"&gt;// https://github.com/hgsgtk/wsp/blob/ea4902a8e11f820268e52a6245092728efeffd7f/server/server.go#L189&lt;/span&gt;
    &lt;span class="c"&gt;//&lt;/span&gt;
    &lt;span class="c"&gt;// Here waiting for a result from dispatcher.&lt;/span&gt;
    &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// It means that dispatcher has set `nil` which is a system error case that is&lt;/span&gt;
        &lt;span class="c"&gt;// not expected in the normal flow.&lt;/span&gt;
        &lt;span class="n"&gt;wsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProxyErrorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Unable to get a proxy connection"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// [3]: Send the request to the peer through the WebSocket connection.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proxyRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// An error occurred throw the connection away&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c"&gt;// Try to return an error to the client&lt;/span&gt;
        &lt;span class="c"&gt;// This might fail if response headers have already been sent&lt;/span&gt;
        &lt;span class="n"&gt;wsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProxyError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the implementation up to &lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-4-3g7c"&gt;part 4&lt;/a&gt;, we were able to identify the WebSocket connection to be relayed. Next, send an HTTP request over the connection.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/hgsgtk/wsp/blob/191adde5c2b3ac535f8b94cdc345848b2f6f4258/server/connection.go#L109"&gt;connection.proxyRequest&lt;/a&gt; does it. Let's look at the implementation. There are six steps.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Serialize HTTP request&lt;/li&gt;
&lt;li&gt;Send the HTTP request to the peer&lt;/li&gt;
&lt;li&gt;Wait the HTTP response is ready&lt;/li&gt;
&lt;li&gt;Read the HTTP response from the peer&lt;/li&gt;
&lt;li&gt;Wait the HTTP response body is ready&lt;/li&gt;
&lt;li&gt;Read the HTTP response body from the peer&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is a diagram describing the steps of communication over the WebSocket connection.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VgDGHB1E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzk8wn9u2b5l9grhfjl3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VgDGHB1E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzk8wn9u2b5l9grhfjl3.png" alt="A diagram describing the steps of communication over the WebSocket connection" width="880" height="510"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-serialize-http-request-2-send-an-http-request-on-the-websocket-connection"&gt;
  &lt;/a&gt;
  1. Serialize HTTP request / 2. send an HTTP request on the WebSocket connection
&lt;/h2&gt;

&lt;p&gt;At first, it serializes an HTTP request and send it to the WebSocket connection peer.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;proxyRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"proxy request to %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// [1]: Serialize HTTP request&lt;/span&gt;
    &lt;span class="n"&gt;jsonReq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Marshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SerializeHTTPRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"unable to serialize request : %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// [2]: Send the HTTP request to the peer&lt;/span&gt;
    &lt;span class="c"&gt;// Send the serialized HTTP request to the the peer&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jsonReq&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"unable to write request : %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Pipe the HTTP request body to the the peer&lt;/span&gt;
    &lt;span class="n"&gt;bodyWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NextWriter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BinaryMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"unable to get request body writer : %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bodyWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"unable to pipe request body : %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;bodyWriter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"unable to pipe request body (close) : %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In WebSocket connection, the kind of message is defined in the  &lt;a href="https://datatracker.ietf.org/doc/html/rfc6455#section-11.8"&gt;RFC 6455&lt;/a&gt; called Opcode, and Text Frame and Binary Frame can be used for data exchange. &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Opcode&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Continuation Frame&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Text Frame&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Binary Frame&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;Connection Close Frame&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;Ping Frame&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;Pong Frame&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;In this case, it sends a JSON serialized HTTP meta data (URL, Method, Header, and Content-Length) in Text Frame, and sends a  request body in Binary Frame.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;HTTPRequest&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Method&lt;/span&gt;        &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="n"&gt;URL&lt;/span&gt;           &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="n"&gt;Header&lt;/span&gt;        &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;][]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="n"&gt;ContentLength&lt;/span&gt; &lt;span class="kt"&gt;int64&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;SerializeHTTPRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;HTTPRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HTTPRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Method&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentLength&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/hgsgtk/wsp/blob/191adde5c2b3ac535f8b94cdc345848b2f6f4258/request.go#L19"&gt;SerializeHTTPRequest&lt;/a&gt; serializes HTTP request.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;req.Header&lt;/code&gt; is a value who type is &lt;a href="https://pkg.go.dev/net/http#Header"&gt;http.Header&lt;/a&gt;. A Header represents the key-value pairs in an HTTP header.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Header&lt;/span&gt; &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;][]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;A Header represents the key-value pairs in an HTTP header.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Accept"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"*/*"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"User-Agent"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"curl/7.77.0"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"X-Proxy-Destination"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"http://localhost:8081/hello"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://pkg.go.dev/encoding/json#Marshal"&gt;json.Marshal&lt;/a&gt;  returns the JSON encoding of the value. Struct values encode as JSON objects.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;jsonReq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Marshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SerializeHTTPRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Each exported struct field becomes a member of the object. If you want to customize the encoding struct field, you can use the struct field's tag &lt;code&gt;json&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;HTTPRequest&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Method&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"customized"`&lt;/span&gt; &lt;span class="c"&gt;// {"customized":"GET"}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Send JSON data when serialize is complete.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jsonReq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://pkg.go.dev/github.com/gorilla/websocket@v1.4.2#Conn.WriteMessage"&gt;websocket.WriteMessage&lt;/a&gt; is the function to write any message in the connection, and &lt;a href="https://pkg.go.dev/github.com/gorilla/websocket@v1.4.2#TextMessage"&gt;websocket.TextMessage&lt;/a&gt; is a constant representing a text data message.&lt;/p&gt;

&lt;p&gt;Then, pipe the HTTP request body to the WebSocket connection peer.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// Pipe the HTTP request body to the the peer&lt;/span&gt;
&lt;span class="n"&gt;bodyWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NextWriter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BinaryMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"unable to get request body writer : %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bodyWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"unable to pipe request body : %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;bodyWriter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"unable to pipe request body (close) : %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://pkg.go.dev/github.com/gorilla/websocket@v1.4.2#Conn.NextWriter"&gt;websocket.NextWriter&lt;/a&gt; returns a writer for the next message to send. An application can send and receive messages using the io.WriteCloser and io.Reader interfaces. In this case, The content of &lt;code&gt;r.Body&lt;/code&gt; is written to writer.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-wait-the-http-response-is-ready-to-read"&gt;
  &lt;/a&gt;
  3. Wait the HTTP response is ready to read
&lt;/h2&gt;

&lt;p&gt;Let's move on the rest code, to receive an HTTP response and parse it. Here is one of difficult points to proxy an HTTP request over an WebSocket connection, because the &lt;code&gt;wsp_server&lt;/code&gt; does not know when the &lt;code&gt;wsp_client&lt;/code&gt; writes the HTTP response over the WebSocket connection. We need to implement waiting for response to come back.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9UFO-NpR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fr5h4tfs2m4dtxfefwl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9UFO-NpR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fr5h4tfs2m4dtxfefwl.png" alt="A diagram describing the communication flow between wsp_server and wsp_client" width="880" height="322"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll show you the whole picture first to address the issue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tkHO8BZO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zibzczwpdckbgwkllr9y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tkHO8BZO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zibzczwpdckbgwkllr9y.png" alt="The whole picture" width="880" height="534"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;In advance, the &lt;a href="https://github.com/hgsgtk/wsp/blob/3ffb7b3da3ad80d2ddaa322da8150264766e62a7/server/connection.go#L70"&gt;read&lt;/a&gt; function waits to receive the HTTP response as an another thread (goroutine) "reader”.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Connection&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)&lt;/span&gt;
    &lt;span class="n"&gt;nextResponse&lt;/span&gt; &lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reader&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// NewConnection returns a new Connection.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Pool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ws&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit: Initialize a new Connection)&lt;/span&gt;

    &lt;span class="c"&gt;// Start to listen to incoming messages over the WebSocket connection&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;recover&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"WebSocket crash recovered : %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;Closed&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c"&gt;// https://godoc.org/github.com/gorilla/websocket#hdr-Control_Messages&lt;/span&gt;
        &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NextReader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;Busy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// We received a wild unexpected message&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c"&gt;// When it gets here, it is expected to be either a HttpResponse or a HttpResponseBody has been returned.&lt;/span&gt;
        &lt;span class="c"&gt;//&lt;/span&gt;
        &lt;span class="c"&gt;// Next, it waits to receive the value from the Connection.proxyRequest function that is invoked in the "server" thread.&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nextResponse&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// We have been unlocked by Close()&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c"&gt;// Send the reader back to Connection.proxyRequest&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;

        &lt;span class="c"&gt;// Wait for proxyRequest to close the channel&lt;/span&gt;
        &lt;span class="c"&gt;// this notify that it is done with the reader&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;When the new WebSocket connection is connected, it starts a goroutine which listens to incoming messages over the WebSocket connection. It continues running until the connection itself is closed or any unexpected error occurs. In this loop, use &lt;a href="https://pkg.go.dev/github.com/gorilla/websocket@v1.4.2#Conn.NextReader"&gt;websocket.NewReader&lt;/a&gt; to read incoming messages.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// read loop&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NextReader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;NextReader returns the next data message received from the peer. In this case, it means the message from a &lt;code&gt;wsp_client&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;NextReader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;messageType&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The returned messageType, which means opcode in RFC 6455, is either TextMessage or BinaryMessage. In addition to these opcodes, the WebSocket protocol defines three control messages: close (8: Connection Close Frame), ping (9: Ping Frame), and pong (10: Pong Frame). If you implement WebSocket messaging from scratch, you need to process these control messages, but &lt;a href="https://pkg.go.dev/github.com/gorilla/websocket"&gt;gorilla/websocket&lt;/a&gt; is designed so that you don't have to be concern about it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If the application is not otherwise interested in messages from the peer, then the application should start a goroutine to read and discard messages from the peer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pkg.go.dev/github.com/gorilla/websocket@v1.4.2#hdr-Control_Messages"&gt;https://pkg.go.dev/github.com/gorilla/websocket@v1.4.2#hdr-Control_Messages&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And, the a must break out of the read loop when &lt;a href="https://pkg.go.dev/github.com/gorilla/websocket@v1.4.2#Conn.NextReader"&gt;websocket.NextReader&lt;/a&gt; returns a non-nil error value. &lt;a href="https://github.com/gorilla/websocket/blob/v1.4.2/conn.go#L999"&gt;gorilla/websocket&lt;/a&gt; implements that if you do not break out the read loop and repeat many times, you will get a panic like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// gorilla/websocket conn.go&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;NextReader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;messageType&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)&lt;/span&gt;

    &lt;span class="c"&gt;// Applications that do handle the error returned from this method spin in&lt;/span&gt;
    &lt;span class="c"&gt;// tight loop on connection failure. To help application developers detect&lt;/span&gt;
    &lt;span class="c"&gt;// this error, panic on repeated reads to the failed connection.&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readErrCount&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readErrCount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;1000&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"repeated read on failed websocket connection"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;noFrame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readErr&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;NextReader will block here until a message is received or the WebSocket connection is closed. The following code in &lt;a href="https://github.com/gorilla/websocket/blob/v1.4.2/conn.go#L979"&gt;gorolla/websocket&lt;/a&gt; keeps reading the next data frame until a TextMessage or BinaryMessage is received. Note that &lt;a href="https://datatracker.ietf.org/doc/html/rfc6455#section-5"&gt;data frame&lt;/a&gt; is a message format in the WebSocket protocol defined in RFC 6455.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// gorilla/websocket conn.go&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;NextReader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;messageType&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readErr&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;frameType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;advanceFrame&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readErr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hideTempErr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;frameType&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;TextMessage&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;frameType&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;BinaryMessage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;messageReader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;messageReader&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;messageReader&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readDecompress&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newDecompressionReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;frameType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// (omit)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;See the following link more detail.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hgsgtk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4fiWd75c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bSqJvDso--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/720068/2aaac932-cc7d-4d7b-88a0-a1a09290e523.jpeg" alt="hgsgtk"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hgsgtk/how-websocket-protocol-designs-bidirectional-messaging-and-implements-in-go-260f" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How WebSocket protocol designs bidirectional messaging and implements in Go&lt;/h2&gt;
      &lt;h3&gt;Kazuki Higashiguchi ・ Dec 13 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#websocket&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#go&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;After a message is received from the peer, it waits to receive the value from the Connection.proxyRequest function that is invoked in the "server" thread.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5nhCkw7M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dj0tc7f5ljm9pf5xgkig.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5nhCkw7M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dj0tc7f5ljm9pf5xgkig.png" alt='"reader" waits to receive a value from the nextResponse channel' width="880" height="384"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// (omit)&lt;/span&gt;

        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nextResponse&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// We have been unlocked by Close()&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c"&gt;// Send the reader back to Connection.proxyRequest&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;

        &lt;span class="c"&gt;// (omit)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When a "server" thread proxies, it sends the HTTP request over the WebSocket, and sends the channel of the io.Reader interface (chan io.Reader) that can read the HTTP response to the field &lt;code&gt;nextResponse&lt;/code&gt;, then waits until the value is written in the channel (chan io.Reader) by another thread "reader” (&lt;a href="https://github.com/hgsgtk/wsp/blob/29cc73bbd67de18f1df295809166a7a5ef52e9fa/server/connection.go#L143"&gt;code&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bIwnlWo2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/opxehstr9thsk65y3usy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bIwnlWo2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/opxehstr9thsk65y3usy.png" alt='"server" waits to receive a value from the responseChannel' width="880" height="388"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the thread "reader" detects that the HTTP response from the peer of the WebSocket connection has been written, it sends the value to the channel (chan io.Reader), and the "server" thread can proceed to process the rest procedures.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Connection&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)&lt;/span&gt;
    &lt;span class="n"&gt;nextResponse&lt;/span&gt; &lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reader&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;proxyRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit) [1]: Serialize HTTP request&lt;/span&gt;
    &lt;span class="c"&gt;// (omit) [2]: Send the HTTP request to the peer&lt;/span&gt;

    &lt;span class="c"&gt;// [3]: Wait the HTTP response is ready to read&lt;/span&gt;
    &lt;span class="n"&gt;responseChannel&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nextResponse&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;responseChannel&lt;/span&gt;
    &lt;span class="n"&gt;responseReader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;responseChannel&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;responseReader&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// The value of ok is false, the channel is closed and empty.&lt;/span&gt;
            &lt;span class="c"&gt;// See the Receiver operator in https://go.dev/ref/spec for more information.&lt;/span&gt;
            &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responseChannel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"unable to get http response reader : %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we get to this point, we are ready to read the response written over the WebSocket connection.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-read-the-http-response-from-the-peer"&gt;
  &lt;/a&gt;
  4. Read the HTTP response from the peer
&lt;/h2&gt;

&lt;p&gt;Let's move on the next step: read the HTTP response from the peer, where gets the serialized HTTP response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;HTTPResponse&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;StatusCode&lt;/span&gt;    &lt;span class="kt"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;Header&lt;/span&gt;        &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;
    &lt;span class="n"&gt;ContentLength&lt;/span&gt; &lt;span class="kt"&gt;int64&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;proxyRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)&lt;/span&gt;

    &lt;span class="c"&gt;// [4]: Read the HTTP response from the peer&lt;/span&gt;
    &lt;span class="c"&gt;// Get the serialized HTTP Response from the peer&lt;/span&gt;
    &lt;span class="n"&gt;jsonResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responseReader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responseChannel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"unable to read http response : %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Notify the read() goroutine that we are done reading the response&lt;/span&gt;
    &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responseChannel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Deserialize the HTTP Response&lt;/span&gt;
    &lt;span class="n"&gt;httpResponse&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTPResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unmarshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;httpResponse&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"unable to unserialize http response : %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Write response headers back to the client&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;httpResponse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;httpResponse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// (omit)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The value &lt;code&gt;responseReader&lt;/code&gt; implements &lt;a href="https://pkg.go.dev/io#Reader"&gt;io.Reader&lt;/a&gt; interface, that's why we can read the data in &lt;code&gt;responseReader&lt;/code&gt; by &lt;a href="https://pkg.go.dev/io#ReadAll"&gt;io.ReadAll&lt;/a&gt;, which is added in Go 1.16. &lt;/p&gt;

&lt;p&gt;After that, it closes the channel &lt;code&gt;responseChannel&lt;/code&gt; so that the "reader" thread will be notified that the response is finished to read.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// (omit)&lt;/span&gt;

        &lt;span class="c"&gt;// Send the reader back to Connection.proxyRequest&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;

        &lt;span class="c"&gt;// Wait for proxyRequest to close the channel&lt;/span&gt;
        &lt;span class="c"&gt;// this notify that it is done with the reader&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The "reader" thread waits until the "server" thread closes the &lt;code&gt;responseChannel&lt;/code&gt; channel because of the requirements of &lt;a href="https://pkg.go.dev/github.com/gorilla/websocket@v1.4.2#Conn.NextReader"&gt;websocket.NextReader&lt;/a&gt;. As explained in &lt;a href="https://pkg.go.dev/github.com/gorilla/websocket#hdr-Control_Messages"&gt;godoc&lt;/a&gt;, we need to consider several specifications:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No more than one goroutine calls the read methods (NextReader, SetReadDeadline, ReadMessage, ReadJSON, SetPongHandler, SetPingHandler) concurrently&lt;/li&gt;
&lt;li&gt;Connections support one concurrent reader and one concurrent writer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's why we need to wait for websocket.NextReader to be consumed before requesting the next one.&lt;/p&gt;

&lt;p&gt;Then next, unmarshal JSON into the struct &lt;code&gt;HTTPResponse&lt;/code&gt; by &lt;a href="https://pkg.go.dev/encoding/json#Unmarshal"&gt;json.Unmarshal&lt;/a&gt;. json.Unmarshal matches incoming JSON object keys to the keys used by Marshal, either the struct field name or its tag (&lt;code&gt;json:"xxx"&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Now we can get the HTTP response headers and status code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-wait-the-http-response-body-is-ready-6-read-the-http-response-body-from-the-peer"&gt;
  &lt;/a&gt;
  5. Wait the HTTP response body is ready / 6. Read the HTTP response body from the peer
&lt;/h2&gt;

&lt;p&gt;Finally, follow the same steps again to read the HTTP response body again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;proxyRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)&lt;/span&gt;

    &lt;span class="c"&gt;// [5]: Wait the HTTP response body is ready&lt;/span&gt;
    &lt;span class="c"&gt;// Get the HTTP Response body from the the peer&lt;/span&gt;
    &lt;span class="c"&gt;// To do so send a new channel to the read() goroutine&lt;/span&gt;
    &lt;span class="c"&gt;// to get the next message reader&lt;/span&gt;
    &lt;span class="n"&gt;responseBodyChannel&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nextResponse&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;responseBodyChannel&lt;/span&gt;
    &lt;span class="n"&gt;responseBodyReader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;responseBodyChannel&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;responseBodyReader&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// If more is false the channel is already closed&lt;/span&gt;
            &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responseChannel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"unable to get http response body reader : %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// [6]: Read the HTTP response body from the peer&lt;/span&gt;
    &lt;span class="c"&gt;// Pipe the HTTP response body right from the remote Proxy to the client&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;responseBodyReader&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responseBodyChannel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"unable to pipe response body : %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Notify read() that we are done reading the response body&lt;/span&gt;
    &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responseBodyChannel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Release&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Following &lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-3-2ggd"&gt;part 3&lt;/a&gt; and &lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-4-3g7c"&gt;part 4&lt;/a&gt;, I explained how to relay TCP connection from "App" to the peer of WebSocket. &lt;/p&gt;

&lt;p&gt;In part 6, I'll explain how to relay TCP connection in WebSocket data to "internal API".&lt;/p&gt;

</description>
      <category>go</category>
      <category>webdev</category>
      <category>websocket</category>
    </item>
    <item>
      <title>What is the "XSLT" equivalent for JSON? Here is the new answer</title>
      <author>suntong</author>
      <pubDate>Thu, 30 Dec 2021 04:33:55 +0000</pubDate>
      <link>https://dev.to/suntong/what-is-the-xslt-equivalent-for-json-here-is-the-new-answer-7la</link>
      <guid>https://dev.to/suntong/what-is-the-xslt-equivalent-for-json-here-is-the-new-answer-7la</guid>
      <description>&lt;h3&gt;
  &lt;a href="#prefix"&gt;
  &lt;/a&gt;
  Prefix
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;What is the "XSLT" equivalent for JSON?&lt;/em&gt;  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is the question that people had been asking &lt;a href="https://stackoverflow.com/questions/1618038/xslt-equivalent-for-json"&gt;more than 10 years ago&lt;/a&gt;. By then the &lt;code&gt;xslt&lt;/code&gt; is still the number one answer.&lt;br&gt;&lt;br&gt;
It's high time to take a look at the new kids in town now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-xslt"&gt;
  &lt;/a&gt;
  What is "XSLT"?
&lt;/h3&gt;

&lt;p&gt;XSLT stands for XSL Transformation. It is used to transform XML documents into into various other types of document (like transforming XML into HTML).&lt;/p&gt;

&lt;p&gt;It's most important purpose is transform data, from XML form into a format more presentable to human beings.&lt;br&gt;&lt;br&gt;
XSL is to XML is similar as CSS is to HTML. XSLT can be viewed as the rendering engine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-the-new-choices-now"&gt;
  &lt;/a&gt;
  What are the new choices now?
&lt;/h3&gt;

&lt;p&gt;The second choice in the above answer had been &lt;a href="https://stedolan.github.io/jq/"&gt;&lt;code&gt;jq&lt;/code&gt;&lt;/a&gt;, and I agree that it is very powerful.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;jq is like sed for JSON data - you can use it to slice and filter and map and transform structured data with the same ease that sed, awk, grep and friends let you play with text. There are install packages for different OS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But comparing to &lt;code&gt;jsonpath&lt;/code&gt; it is more difficult to learn to most people, which brings us to the first tool to recommend this time -- &lt;a href="https://github.com/go-jsonfile/jp/"&gt;&lt;code&gt;jp&lt;/code&gt;&lt;/a&gt;, because&lt;/p&gt;

&lt;p&gt;&lt;code&gt;jp&lt;/code&gt; is as simple as &lt;code&gt;jsonpath&lt;/code&gt; but as powerful as &lt;code&gt;jq&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-about-the-rendering-engine-part"&gt;
  &lt;/a&gt;
  How about the rendering engine part?
&lt;/h3&gt;

&lt;p&gt;The problem of both &lt;code&gt;jq&lt;/code&gt; or &lt;code&gt;jp&lt;/code&gt; is that although they can do data projection in any direction (doing data filtering in any way), their purpose are still focusing on data transformation, but when talking about rendering &lt;code&gt;json&lt;/code&gt; data into a format more presentable to human beings, then there is no better tools than &lt;a href="https://github.com/go-easygen/easygen/"&gt;&lt;code&gt;easygen&lt;/code&gt;&lt;/a&gt;. In fact, the &lt;code&gt;easygen&lt;/code&gt; is a universal code/text generator that not only works on &lt;code&gt;json&lt;/code&gt; data but it can take in data defined in YAML format as well. It can be used as any text (or html, or any other forms) generator for arbitrary purposes with arbitrary data and templates. It is built on top of the powerful Go template engine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#to-put-them-together"&gt;
  &lt;/a&gt;
  To put them together
&lt;/h3&gt;

&lt;p&gt;So the other day, I&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;download &lt;code&gt;json&lt;/code&gt; data via API&lt;/li&gt;
&lt;li&gt;filter the &lt;code&gt;json&lt;/code&gt; data with the &lt;a href="https://github.com/go-jsonfile/jp/releases/tag/v0.2.2"&gt;&lt;code&gt;jp&lt;/code&gt;&lt;/a&gt; that supports filtering by regular expression (&lt;em&gt;hint: do you know any json filter that when given a video's file name, can tell a tv-series apart from a movie?&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;then present the &lt;code&gt;json&lt;/code&gt; data in human friendly format with the new &lt;code&gt;easygen&lt;/code&gt; that can read from &lt;code&gt;stdin&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;in the human friendly form, I need to convert the long number of size in bytes to the size in MB and GB, and I had to search for how to do calculation in Go template, but then was &lt;em&gt;delighted&lt;/em&gt; to realized that &lt;code&gt;easygen&lt;/code&gt; &lt;em&gt;already&lt;/em&gt; supports the &lt;a href="https://github.com/go-easygen/easygen/issues/25#cal"&gt;calculation in Go template&lt;/a&gt; long time ago.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'll give a more concrete example in the next article.&lt;/p&gt;

&lt;p&gt;To me now,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;easygen&lt;/code&gt; is to &lt;code&gt;json&lt;/code&gt; what &lt;code&gt;xslt&lt;/code&gt; is to &lt;code&gt;xml&lt;/code&gt;, but much more powerful and versatile.&lt;/p&gt;

</description>
      <category>json</category>
      <category>transform</category>
      <category>easygen</category>
      <category>generator</category>
    </item>
    <item>
      <title>Binary Search Implementation In Java</title>
      <author>Pratik</author>
      <pubDate>Thu, 30 Dec 2021 04:32:10 +0000</pubDate>
      <link>https://dev.to/pratikdhame/binary-search-implementation-in-java-d0g</link>
      <guid>https://dev.to/pratikdhame/binary-search-implementation-in-java-d0g</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZhfnFtN3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v56yyav4nozo3cw4do3j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZhfnFtN3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v56yyav4nozo3cw4do3j.png" alt="Image description" width="880" height="701"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>My Visual studio Theme</title>
      <author>Prince Verma</author>
      <pubDate>Thu, 30 Dec 2021 04:23:20 +0000</pubDate>
      <link>https://dev.to/vermaprince123/my-visual-studio-theme-58bg</link>
      <guid>https://dev.to/vermaprince123/my-visual-studio-theme-58bg</guid>
      <description>&lt;p&gt;Try it at least once , I will 100% sure you love this theme !!!&lt;br&gt;
And give your valuable feedback.....&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tBU_2xZk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjpr3wnppi72dcoab8bx.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tBU_2xZk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjpr3wnppi72dcoab8bx.PNG" alt="Image description" width="880" height="471"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>ux</category>
      <category>design</category>
      <category>react</category>
    </item>
  </channel>
</rss>
