<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Weekly Digest 41/2021</title>
      <author>Marco Biedermann</author>
      <pubDate>Sun, 17 Oct 2021 20:04:07 +0000</pubDate>
      <link>https://dev.to/marcobiedermann/weekly-digest-412021-4e9e</link>
      <guid>https://dev.to/marcobiedermann/weekly-digest-412021-4e9e</guid>
      <description>&lt;p&gt;Welcome to my Weekly Digest #41 of this year.&lt;/p&gt;

&lt;p&gt;This weekly digest contains a lot of interesting and inspiring articles, videos, tweets, and designs I consumed during this week.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interesting-articles-to-read"&gt;
  &lt;/a&gt;
  Interesting articles to read
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#storybook-ondemand-architecture"&gt;
  &lt;/a&gt;
  Storybook on-demand architecture
&lt;/h3&gt;

&lt;p&gt;3x smaller builds &amp;amp; faster load times for built Storybooks&lt;/p&gt;

&lt;p&gt;&lt;a href="https://storybook.js.org/blog/storybook-on-demand-architecture/"&gt;Storybook on-demand architecture&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#smart-css-solutions-for-common-ui-challenges"&gt;
  &lt;/a&gt;
  Smart CSS Solutions For Common UI Challenges
&lt;/h3&gt;

&lt;p&gt;Writing CSS has probably never been more fun and exciting than it is today. In this post we’ll take a look at common problems and use cases we all have to face in our work and how to solve them with modern CSS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.smashingmagazine.com/2021/10/modern-css-solutions-for-common-problems/"&gt;Smart CSS Solutions For Common UI Challenges - Smashing Magazine&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-great-videos-i-watched-this-week"&gt;
  &lt;/a&gt;
  Some great videos I watched this week
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#dart-in-100-seconds"&gt;
  &lt;/a&gt;
  Dart in 100 Seconds
&lt;/h3&gt;

&lt;p&gt;Dart is high-productivity statically-typed programming language capable of targeting multiple platforms. It's used by Flutter to produce fast client apps with an awesome developer experience.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/NrO0CJCbYLA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/fireship_dev"&gt;Fireship&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chrome-95-whats-new-in-devtools"&gt;
  &lt;/a&gt;
  Chrome 95 - What’s New in DevTools
&lt;/h3&gt;

&lt;p&gt;New CSS length authoring tools, hide issues in the Issues tab, improved the display of properties, and more.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/T_Ppg7ghrWM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/ChromiumDev"&gt;Google Chrome Developers&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vector-dot-product"&gt;
  &lt;/a&gt;
  Vector Dot Product
&lt;/h3&gt;

&lt;p&gt;This video covers the dot product and scalar projection with p5.js and vectors, concepts that Daniel will need for finding the distance between a point and a line which will lead to the path following steering behavior in the next video!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/DHPfoqiE4yQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/shiffman"&gt;Daniel Shiffman&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thinking-on-ways-to-solve-multiselect"&gt;
  &lt;/a&gt;
  Thinking on ways to solve multi-select
&lt;/h3&gt;

&lt;p&gt;In today's GUI challenge I share my thinking on a way to enable users to multi-select. To demonstrate multi-select I've prepared a filterable grid which accepts input from both a -select multiple- and a set of -fieldset- elements. Two multi-select methods yep, each tailored for their use case.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/x0aCdLDZ8BM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/argyleink"&gt;Adam Argyle&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-es-modules-on-codepen"&gt;
  &lt;/a&gt;
  Using ES Modules on CodePen
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt;! They seem like such simple things, but having them in the native language of JavaScript is very powerful. CodePen tries to be helpful with them, and in conjunction with services like Skypack, there is an awful lot you can do.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/FmOGSlWpCaQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/CodePen"&gt;CodePen&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useful-github-repositories"&gt;
  &lt;/a&gt;
  Useful GitHub repositories
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#awesome-new"&gt;
  &lt;/a&gt;
  Awesome New
&lt;/h3&gt;

&lt;p&gt;A list of &lt;code&gt;.new&lt;/code&gt; domains to perform online actions in one quick action.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/yjose"&gt;
        yjose
      &lt;/a&gt; / &lt;a href="https://github.com/yjose/awesome-new"&gt;
        awesome-new
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A list of `.new` domains to perform online actions in one quick action.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;A list of &lt;code&gt;.new&lt;/code&gt; domain to perform online actions in one quick step.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://doc.new" rel="nofollow"&gt;Doc.new&lt;/a&gt; : New Google Doc.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://sheet.new" rel="nofollow"&gt;Sheet.new&lt;/a&gt; : New Google sheet.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://slide.new" rel="nofollow"&gt;Slide.new&lt;/a&gt; : New Google Slide.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://form.new" rel="nofollow"&gt;Form.new&lt;/a&gt; : New Google form.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://meet.new" rel="nofollow"&gt;Meet.new&lt;/a&gt; : New video call with Google Meet.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://meeting.new" rel="nofollow"&gt;Meeting.new&lt;/a&gt; : New Google Calendar event.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cal.new" rel="nofollow"&gt;Cal.new&lt;/a&gt; : New Google Calendar event.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://keep.new" rel="nofollow"&gt;Keep.new&lt;/a&gt; : New Google note.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://site.new" rel="nofollow"&gt;Site.new&lt;/a&gt; : New Google Site.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://next.new" rel="nofollow"&gt;Next.new&lt;/a&gt; : New NextJS project using stackblitz.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://node.new" rel="nofollow"&gt;Node.new&lt;/a&gt; : New Node.js Project using stackblitz.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://react.new" rel="nofollow"&gt;React.new&lt;/a&gt; : New React project using codeSandbox.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ts.new" rel="nofollow"&gt;Ts.new&lt;/a&gt; : New Typescript project using codeSandbox.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://js.new" rel="nofollow"&gt;Js.new&lt;/a&gt; : New Javascript project using codeSandbox.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://vue.new" rel="nofollow"&gt;Vue.new&lt;/a&gt; : New Vue project using codeSandbox.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nuxt.new" rel="nofollow"&gt;Nuxt.new&lt;/a&gt; : New Nuxt project using codeSandbox.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ng.new" rel="nofollow"&gt;Ng.new&lt;/a&gt; : New Angular project using codeSandbox.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://csb.new" rel="nofollow"&gt;Csb.new&lt;/a&gt; : New codeSandbox project.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://pen.new" rel="nofollow"&gt;Pen.new&lt;/a&gt; : New codePen project.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://repo.new" rel="nofollow"&gt;Repo.new&lt;/a&gt; : New Github repo.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gist.new" rel="nofollow"&gt;Gist.new&lt;/a&gt; : New Github gist.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://story.new" rel="nofollow"&gt;Story.new&lt;/a&gt; : New Medium story.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://design.new" rel="nofollow"&gt;Design.new&lt;/a&gt; : New Canva design.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://link.new" rel="nofollow"&gt;Link.new&lt;/a&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/yjose/awesome-new"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#swcnode"&gt;
  &lt;/a&gt;
  swc-node
&lt;/h3&gt;

&lt;p&gt;Fast TypeScript/JavaScript transformer without &lt;code&gt;node-gyp&lt;/code&gt; and &lt;code&gt;postinstall&lt;/code&gt; script.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Brooooooklyn"&gt;
        Brooooooklyn
      &lt;/a&gt; / &lt;a href="https://github.com/Brooooooklyn/swc-node"&gt;
        swc-node
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Faster ts-node without typecheck
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;code&gt;swc-node&lt;/code&gt;
&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;🚀 Help me to become a full-time open-source developer by &lt;a href="https://github.com/sponsors/Brooooooklyn"&gt;sponsoring me on Github&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Fast &lt;code&gt;TypeScript/JavaScript&lt;/code&gt; transformer without &lt;code&gt;node-gyp&lt;/code&gt; and postinstall script&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;
  &lt;a href="https://github.com/Brooooooklyn/swc-node/actions"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Of9P1No_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Brooooooklyn/swc-node/workflows/CI/badge.svg" alt="Build Status"&gt;&lt;/a&gt;
  &lt;a href="https://npmcharts.com/compare/@swc-node/core?minimal=true" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/83e973f70d2e8c94be30186dea87caf95d5daea4fb833c19df86a71f3d75af54/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f407377632d6e6f64652f636f72652e7376673f73616e6974697a653d74727565" alt="Downloads"&gt;&lt;/a&gt;
  &lt;a href="https://github.com/Brooooooklyn/swc-node/blob/master/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/d053f2858071a667a1e73f0fe76b43652244410852928d896546202c970c2736/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f6c2f407377632d6e6f64652f636f72652e7376673f73616e6974697a653d74727565" alt="License"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
Support matrix&lt;/h2&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;node10&lt;/th&gt;
&lt;th&gt;node12&lt;/th&gt;
&lt;th&gt;node14&lt;/th&gt;
&lt;th&gt;node16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Windows x64&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Windows x32&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Windows arm64&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;macOS x64&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;macOS arm64&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Linux x64 gnu&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Linux x64 musl&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Linux arm gnueabihf&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Linux arm64 gnu&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Linux arm64 musl&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Android arm64&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FreeBSD x64&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
@swc-node/core&lt;/h2&gt;
&lt;p&gt;Fastest &lt;code&gt;TypeScript&lt;/code&gt; transformer.&lt;/p&gt;
&lt;p&gt;Detail: &lt;a href="https://github.com/Brooooooklyn/swc-node./packages/core"&gt;@swc-node/core&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Benchmark&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;transform RxJS &lt;code&gt;AjaxObservable.ts&lt;/code&gt; to ES2015 &amp;amp; CommonJS &lt;code&gt;JavaScript&lt;/code&gt;. Benchmark code: &lt;a href="https://github.com/Brooooooklyn/swc-node./bench/index.js"&gt;bench&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hardware info&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;
&lt;pre&gt;&lt;code&gt;Model Name: MacBook Pro
Model Identifier: MacBookPro15,1
Processor Name: 6-Core Intel Core i7
Processor Speed: 2.6 GHz
Number of Processors: 1&lt;/code&gt;&lt;/pre&gt;…&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Brooooooklyn/swc-node"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#bootstrap-icons"&gt;
  &lt;/a&gt;
  Bootstrap Icons
&lt;/h3&gt;

&lt;p&gt;Official open source SVG icon library for Bootstrap with over 1,400 icons.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/twbs"&gt;
        twbs
      &lt;/a&gt; / &lt;a href="https://github.com/twbs/icons"&gt;
        icons
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Official open source SVG icon library for Bootstrap.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a href="https://v5.getbootstrap.com/" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/bec2c92468d081617cb3145a8f3d8103e268bca400f6169c3a68dc66e05c971e/68747470733a2f2f76352e676574626f6f7473747261702e636f6d2f646f63732f352e302f6173736574732f6272616e642f626f6f7473747261702d6c6f676f2d736861646f772e706e67" alt="Bootstrap logo" width="200" height="165"&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;h3&gt;
Bootstrap Icons&lt;/h3&gt;
&lt;p&gt;
  Official open source SVG icon library for Bootstrap with over 1,400 icons
  &lt;br&gt;
  &lt;a href="https://icons.getbootstrap.com/" rel="nofollow"&gt;&lt;strong&gt;Explore Bootstrap Icons »&lt;/strong&gt;&lt;/a&gt;
  &lt;br&gt;
  &lt;br&gt;
  &lt;a href="https://getbootstrap.com/" rel="nofollow"&gt;Bootstrap&lt;/a&gt;
  ·
  &lt;a href="https://themes.getbootstrap.com/" rel="nofollow"&gt;Themes&lt;/a&gt;
  ·
  &lt;a href="https://blog.getbootstrap.com/" rel="nofollow"&gt;Blog&lt;/a&gt;
  &lt;br&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href="https://icons.getbootstrap.com" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TM0YEL54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/twbs/icons/raw/main/.github/preview.png" alt="Bootstrap Icons preview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Install&lt;/h2&gt;
&lt;p&gt;Bootstrap Icons are packaged up and published to npm. We only include the processed SVGs in this package—it's up to you and your team to implement. &lt;a href="https://icons.getbootstrap.com/" rel="nofollow"&gt;Read our docs&lt;/a&gt; for usage instructions.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm i bootstrap-icons&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;For those &lt;a href="https://packagist.org/packages/twbs/bootstrap-icons" rel="nofollow"&gt;using Packagist&lt;/a&gt;, you can also install Bootstrap Icons via Composer:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;composer require twbs/bootstrap-icons&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://www.figma.com/file/cKgRyErzl4pR1WN4NcB5lv/Bootstrap-Icons" rel="nofollow"&gt;Also available in Figma.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;Depending on your setup, you can include Bootstrap Icons in a handful of ways.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Copy-paste SVGs as embedded HTML&lt;/li&gt;
&lt;li&gt;Reference via &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element&lt;/li&gt;
&lt;li&gt;Use the SVG sprite&lt;/li&gt;
&lt;li&gt;Include via CSS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://icons.getbootstrap.com/#usage" rel="nofollow"&gt;See the docs for more information.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Development&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/twbs/icons/actions?workflow=Tests"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--knb6tOgw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/twbs/icons/workflows/Tests/badge.svg" alt="Build Status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Clone the repo, install dependencies, and start the Hugo server locally.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;git clone https://github.com/twbs/icons/
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; icons
npm i
npm start&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Then open &lt;code&gt;http://localhost:4000&lt;/code&gt; in your browser.&lt;/p&gt;
&lt;h3&gt;
npm scripts&lt;/h3&gt;
&lt;p&gt;Here are some key scripts…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/twbs/icons"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#dribbble-shots"&gt;
  &lt;/a&gt;
  dribbble shots
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#tket-app"&gt;
  &lt;/a&gt;
  T-Ket app
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N1NgFl8k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/2039805/screenshots/16664248/media/59536129d192b460b056c16789282004.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N1NgFl8k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/2039805/screenshots/16664248/media/59536129d192b460b056c16789282004.png" alt="https://cdn.dribbble.com/users/2039805/screenshots/16664248/media/59536129d192b460b056c16789282004.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/16664248-T-Ket-app-Calendar-view"&gt;11Daniyal&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#travel-app"&gt;
  &lt;/a&gt;
  Travel App
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XdXUVb7A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/1684108/screenshots/16668499/media/74d5ea5d1744ac5662580f41b72cb477.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XdXUVb7A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/1684108/screenshots/16668499/media/74d5ea5d1744ac5662580f41b72cb477.jpeg" alt="https://cdn.dribbble.com/users/1684108/screenshots/16668499/media/74d5ea5d1744ac5662580f41b72cb477.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/16668499-Travel-App"&gt;QClay&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scooter-mobile-app"&gt;
  &lt;/a&gt;
  Scooter mobile app
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jEpDqgH4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/6081502/screenshots/16668775/media/09c737d38f9f26af35d4ce0bb35c37ba.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jEpDqgH4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/6081502/screenshots/16668775/media/09c737d38f9f26af35d4ce0bb35c37ba.jpg" alt="https://cdn.dribbble.com/users/6081502/screenshots/16668775/media/09c737d38f9f26af35d4ce0bb35c37ba.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/16668775-Scooter-mobile-app"&gt;Design Hub&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tweets"&gt;
  &lt;/a&gt;
  Tweets
&lt;/h2&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7BL53ajN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1448690180727230467/pu/img/hqY-EFBVXjubMEae.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--HtAuZn5w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1188024416313196546/zGxQhsWI_normal.jpg" alt="Stefan Judis profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Stefan Judis
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/stefanjudis"&gt;@stefanjudis&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Oh I love that! If you're confused about what &lt;a href="https://twitter.com/hashtag/css"&gt;#css&lt;/a&gt; "adjacent sibling combinators" or a "declaration blocks" are, CSS vocabulary can help!&lt;br&gt;&lt;br&gt;Thanks &lt;a href="https://twitter.com/sakamies"&gt;@sakamies&lt;/a&gt;! 👏&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/I8vlnHpDtP"&gt;apps.workflower.fi/vocabs/css/en&lt;/a&gt;&lt;br&gt;&lt;br&gt;Video alt: Application that highlights CSS code depending on a chosen term. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:41 PM - 14 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1448690491898400768" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1448690491898400768" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1448690491898400768" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vsgZ-JWH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/FBrBKv8WYAItF-D.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--rVrHrktw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1427714836289425414/5iceg0nm_normal.jpg" alt="rauno profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        rauno
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @raunofreiberg
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      How about a token-aware GUI that would edit existing  &lt;a href="https://twitter.com/stitchesjs"&gt;@stitchesjs&lt;/a&gt; components and sync changes back to code? 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:11 PM - 14 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1448682856620953610" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1448682856620953610" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1448682856620953610" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YY78Cb8k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FBu4VD2XIAs-bMQ.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--PUv9KUkw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1308385514744098816/oDXuaci__normal.jpg" alt="Marko ⚡ Denic profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Marko ⚡ Denic
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/denicmarko"&gt;@denicmarko&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      CSS tip:&lt;br&gt;&lt;br&gt;You can change the color of the text input cursor. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      10:12 AM - 15 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1448954897903362053" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1448954897903362053" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1448954897903362053" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
    &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__two-pics"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7r_qlN_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FBz9iATUUAQ7Szs.png" alt="unknown tweet media content"&gt;
    &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--bJRG8q9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1415312335061848064/6Em2F0jL_normal.jpg" alt="Jiachi profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jiachi
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/huozhi"&gt;@huozhi&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      By replacing ts-jest with swc-node/jest for swr's jest preset, the testing speed is even doubled on my mac m1 🤯🤯 Amazing speed of rust and kudos to &lt;a href="https://twitter.com/Brooooook_lyn"&gt;@Brooooook_lyn&lt;/a&gt; for leveraging &lt;a href="https://twitter.com/swc_rs"&gt;@swc_rs&lt;/a&gt; to create this awesom library! 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      10:01 AM - 16 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1449314595861004292" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1449314595861004292" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1449314595861004292" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AoRNTubS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1433574506400923680/pu/img/73dH5MZ6vLcCx5Cf.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--iTK9VHSV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1435103134842454016/DfF093MF_normal.jpg" alt="Palash ⚡ profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Palash ⚡
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @palashv2
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Chrome DevTools CSS Shadow Editor is just awesome!&lt;br&gt;&lt;br&gt;Have you used it for your projects? &lt;br&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:15 PM - 16 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1449378345007808520" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1449378345007808520" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1449378345007808520" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#picked-pens"&gt;
  &lt;/a&gt;
  Picked Pens
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#one-div-snow-divtober"&gt;
  &lt;/a&gt;
  one div snow - divtober
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/BadjOJQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/ChallengesCss"&gt;Temani Afif&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#single-div-css-items-that-float"&gt;
  &lt;/a&gt;
  Single div CSS items that float
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lynnandtonic/embed/XWaXBGz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/lynnandtonic"&gt;Lynn Fisher&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading, talk to you next week, and stay safe! 👋&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>{ Zero to Helm }: Part 2 - Architecture</title>
      <author>Stephen Rodriguez</author>
      <pubDate>Sun, 17 Oct 2021 19:58:48 +0000</pubDate>
      <link>https://dev.to/kinagi/-zero-to-helm-part-2-architecture-4am0</link>
      <guid>https://dev.to/kinagi/-zero-to-helm-part-2-architecture-4am0</guid>
      <description>&lt;p&gt;Welcome back to the next chapter of { Zero to Helm }. A blog-series in which I create "byte"-sized pieces of content aimed at mastering Kubernetes.&lt;/p&gt;

&lt;p&gt;In this section, we are going to look to take a surface dive into Kubernetes by inspecting its architecture. Whether you are a fan of minimal version of k8s like &lt;a href="https://k3s.io/"&gt;k3s&lt;/a&gt; or robust cloud-specific versions like &lt;a href="https://aws.amazon.com/eks/"&gt;EKS&lt;/a&gt;, &lt;a href="https://azure.microsoft.com/en-us/services/kubernetes-service/"&gt;AKS&lt;/a&gt;, or &lt;a href="%5Bhttps://cloud.google.com/kubernetes-engine"&gt;GKE&lt;/a&gt; - the information explained here applies to all of them.&lt;/p&gt;

&lt;p&gt;So lets start to breakdown this architecture:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aNLr7-Z8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jzpmhly6byjnicyb9ihb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aNLr7-Z8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jzpmhly6byjnicyb9ihb.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#nodes"&gt;
  &lt;/a&gt;
  Nodes
&lt;/h2&gt;

&lt;p&gt;Kubernetes at its essence is a collection of servers that work together to achieve a single purpose; run your workloads. These servers are referenced as "Nodes", and their responsibility is to run your workloads by placing containers into Pods.&lt;/p&gt;

&lt;p&gt;Since Nodes are servers, they can be anything from physical machines to even virtual ones! But each node is managed by something called a "control plane". Which is a collection of essential services that run on the node in order for Pods to be created, and managed by the node. Those services are the &lt;a href="https://kubernetes.io/docs/reference/generated/kubelet"&gt;kubelet&lt;/a&gt;, a &lt;a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes"&gt;container runtime&lt;/a&gt;, and the &lt;a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kube-proxy/"&gt;kube-proxy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once a node is connected to a Kubernetes master node, it will begin to report vital information like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CPU/Memory availability&lt;/li&gt;
&lt;li&gt;Info about the host/kernel&lt;/li&gt;
&lt;li&gt;Heartbeats&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of this information help the control plane make decisions about where workloads get scheduled/assigned.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#control-plane-communication"&gt;
  &lt;/a&gt;
  Control Plane Communication
&lt;/h2&gt;

&lt;p&gt;When we say “Control Plane” - we are speaking about the essential services that run on the master nodes of your Kubernetes Cluster. Collectively, these services help Kubernetes perform most of its magic for being easily extensible, accessible, and able to run workloads efficiently.&lt;/p&gt;

&lt;p&gt;Now - those magical services are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;kube-apiserver&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Exposes the Kubernetes API that is used by worker nodes, kubectl, and other services to interact with the entire k8s control plane.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;etcd&lt;/em&gt;*&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This service can differ based on your k8s flavour but a simple highly available key/value store is used in k8s to track cluster states such as pod information, workload assignments, etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;kube-scheduler&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Watches for new pods without a node assignment and selects one for them. Various factors are taken into account but the assignment is based on the pod’s manifest and key scheduling information collected from the cluster’s available nodes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;kube-controller-manager&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Runs controller processes like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Node Controller =&amp;gt; Monitors cluster nodes&lt;/li&gt;
&lt;li&gt;Jobs Controller =&amp;gt; Monitors Pods that run one-off tasks&lt;/li&gt;
&lt;/ul&gt;


&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;em&gt;cloud-controller-manager&lt;/em&gt;*&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;This one is a bit of a special one because not every flavour of k8s will include it. But this service typically handles cloud specific control logic like identity permission controls, network rules, and anything else your cloud-hosting provider specifically requires for their flavour of k8s.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More info: &lt;a href="https://kubernetes.io/docs/concepts/overview/components/"&gt;Kubernetes Components | Kubernetes&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;And that’s it! It really is that simple at a high level. There is a lot more additional terminology like Services, Ingress, and Namespaces - but all in good time! The point here is not to overwhelm but rather to encourage individual discovery.&lt;/p&gt;

&lt;p&gt;There are a lot of helpful links throughout here and I highly encourage you to dive deeper and investigate what other flavours of k8s look like! How do they differ? What’s similar…?!&lt;/p&gt;

&lt;p&gt;As always, feel free to give feedback and let me know about your journey with Kubernetes! Until next time, happy coding!&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
      <category>sre</category>
    </item>
    <item>
      <title>Infinite Scroll with HOTWire - Part 2: Adding Stimulus </title>
      <author>Ahmad khattab</author>
      <pubDate>Sun, 17 Oct 2021 19:51:56 +0000</pubDate>
      <link>https://dev.to/rockwell/infinite-scroll-with-hotwire-part-2-adding-stimulus-48o2</link>
      <guid>https://dev.to/rockwell/infinite-scroll-with-hotwire-part-2-adding-stimulus-48o2</guid>
      <description>&lt;p&gt;You can follow along if you missed the first part.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/rockwell" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AUJBo3bf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--21nHLSMN--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/616139/8914a442-3fed-4a22-b02d-bd9e6c3b9dd2.png" alt="rockwell"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/rockwell/infinite-scroll-with-hotwire-part-1-configuration-4n32" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Infinite Scroll with HOTWire Part 1: Configuration&lt;/h2&gt;
      &lt;h3&gt;Ahmad khattab ・ Oct 17 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#rails&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#ruby&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#stimulus&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#adding-stimulus"&gt;
  &lt;/a&gt;
  Adding Stimulus
&lt;/h2&gt;

&lt;p&gt;Now as our data is ready and we can scroll to the bottom of the screen. We are ready to add a stimulus controller that is responsible for the pagination.&lt;/p&gt;

&lt;p&gt;first, create a new file at &lt;code&gt;app/javascript/controllers/pagination_controller.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pagination_controller.js&lt;/span&gt;


&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stimulus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;page&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scroll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageValue&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scroll&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollReachedEnd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_fetchNewPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;_fetchNewPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// fetch new url&lt;/span&gt;
    &lt;span class="c1"&gt;// update new page&lt;/span&gt;
    &lt;span class="c1"&gt;// ensure that we are on the last page&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;scrollReachedEnd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;scrollHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;scrollTop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clientHeight&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;distanceFromBottom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;scrollHeight&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;scrollTop&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;clientHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;distanceFromBottom&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// adjust the number 20 yourself&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's a simple controller that attaches a &lt;code&gt;scroll&lt;/code&gt; listener on the element and calls &lt;code&gt;_fetchNewPage&lt;/code&gt; when the scroll has reached the end. Now, let's populate the method body.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/rails/request.js"&gt;request.js&lt;/a&gt; is a minimalistic JavaScript pacakge that is set to replace Rails UJS in the near future. We will be using it to fetch new pages from the server. Let's install the package&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add @rails/request.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#adding-logic-to-the-method-body"&gt;
  &lt;/a&gt;
  Adding logic to the method body
&lt;/h3&gt;

&lt;p&gt;What we want to do is that when the &lt;code&gt;_fetchNewPage&lt;/code&gt; method is called, a) request the server the &lt;code&gt;urlValue&lt;/code&gt; and add the &lt;code&gt;pageValue&lt;/code&gt; as a query param.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;_fetchNewPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;searchParams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;page&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;responseKind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;turbo-stream&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageValue&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's connect the controller to the dom.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
  &lt;span class="na"&gt;data-controller=&lt;/span&gt;&lt;span class="s"&gt;"pagination"&lt;/span&gt;
  &lt;span class="na"&gt;data-pagination-url-value=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;posts_url&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt; "&lt;/span&gt;
  &lt;span class="na"&gt;data-pagination-page-value=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="vi"&gt;@posts&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://i.giphy.com/media/d7zdaTxxYYpIZWVQnu/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/d7zdaTxxYYpIZWVQnu/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-tubrostream-responses"&gt;
  &lt;/a&gt;
  Adding tubro_stream responses
&lt;/h2&gt;

&lt;p&gt;The requests made by the scroll is of type &lt;code&gt;"text/vnd.turbo-stream.html"&lt;/code&gt;. So, we'll need to handle that type of request.&lt;/p&gt;

&lt;p&gt;create a new file named &lt;code&gt;app/views/posts/index.turbo_stream.erb&lt;/code&gt; and add this code into it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;append&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="vi"&gt;@posts&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;with this, add &lt;code&gt;id="posts"&lt;/code&gt; to the div for turbo to know where to append the new posts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;# posts/index.html.erb
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
  &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"posts"&lt;/span&gt;
  &lt;span class="na"&gt;data-controller=&lt;/span&gt;&lt;span class="s"&gt;"pagination"&lt;/span&gt;
  &lt;span class="na"&gt;data-pagination-url-value=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;posts_path&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt; "&lt;/span&gt;
  &lt;span class="na"&gt;data-pagination-page-value=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="vi"&gt;@posts&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's look at what the controller does now.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/ueCLJjJtJ6fBaj5cIN/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ueCLJjJtJ6fBaj5cIN/giphy.gif"&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-stop"&gt;
  &lt;/a&gt;
  When to stop?
&lt;/h2&gt;

&lt;p&gt;Obviously, an scroll should be infinite while there are records to fetch, if there are no more records we must not fetch anymore records. With our current implementation our code would send infinite requests as long the user is scrolling to the end. Let's change that.&lt;/p&gt;

&lt;p&gt;Inside &lt;code&gt;app/views/products/index.turbo_stream.erb&lt;/code&gt; add this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;append&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="vi"&gt;@posts&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;

  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;out_of_range?&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;data-pagination-target=&lt;/span&gt;&lt;span class="s"&gt;"lastPage"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's add a little bit code into our stimulus controller.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollReachedEnd&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasLastPageTarget&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_fetchNewPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we check, if there is a &lt;code&gt;lastPage&lt;/code&gt; target present, then we stop fetching new page. This would only be true when there are no more pages left.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;out_of_range?&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;data-pagination-target=&lt;/span&gt;&lt;span class="s"&gt;"lastPage"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bonus-add-button-to-load-data-instead-of-infinite-scroll"&gt;
  &lt;/a&gt;
  Bonus, add button to load data instead of infinite scroll
&lt;/h2&gt;

&lt;p&gt;Sometimes, you would like only for when a button pressed to load the data, not when the user reaches end of scrolling. Extending the controller is easy, let's perform just that. Inside &lt;code&gt;pagination_controller&lt;/code&gt; add these&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;page&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;


  &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// return and don't attach the scroll event listener&lt;/span&gt;
     &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scroll&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;paginate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_fetchNewPage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the new &lt;code&gt;scroll&lt;/code&gt; boolean will determine if we should infinite-scroll or not. Change the content of &lt;code&gt;app/views/posts/index.html.erb&lt;/code&gt; to the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
  &lt;span class="na"&gt;data-controller=&lt;/span&gt;&lt;span class="s"&gt;"pagination"&lt;/span&gt;
  &lt;span class="na"&gt;data-pagination-url-value=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;posts_url&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt; "&lt;/span&gt;
  &lt;span class="na"&gt;data-pagination-page-value=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
  &lt;span class="na"&gt;data-pagination-scroll-value=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;
  &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"overflow-y: scroll"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"posts"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="vi"&gt;@posts&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;data-action=&lt;/span&gt;&lt;span class="s"&gt;"click-&amp;gt;pagination#paginate"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Load more
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's look at the behaviour&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/PRznalMcfwSDfvsZ7W/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/PRznalMcfwSDfvsZ7W/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We've first created and configured the dependencies and installed them. After that, we introduced our Stimulus pagination controller to aid us to paginate items. Then, we added a target that indicates we are on the last page, to stop the browser from sending infinite useless requests once we are in the last page. Finally, we've added another way to use the controller, that is, by clicking a button the next page shall load.&lt;/p&gt;

&lt;p&gt;Thanks for your reading, hope it helps you in a way. Happy coding!&lt;/p&gt;

&lt;p&gt;You can also clone the repo &lt;a href="https://github.com/A7madXatab/hotwire-infinite-scroll"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Links&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rails/request.js"&gt;request.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/URL"&gt;MDN URL docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
      <category>hotwire</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Infinite Scroll with HOTWire Part 1: Configuration</title>
      <author>Ahmad khattab</author>
      <pubDate>Sun, 17 Oct 2021 19:51:50 +0000</pubDate>
      <link>https://dev.to/rockwell/infinite-scroll-with-hotwire-part-1-configuration-4n32</link>
      <guid>https://dev.to/rockwell/infinite-scroll-with-hotwire-part-1-configuration-4n32</guid>
      <description>&lt;p&gt;Infinite scroll is a pagination mechanism where whenever the user reaches the end of the scroll area more content is loaded till there are no more content to load.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://hotwired.dev/"&gt;HOTWire&lt;/a&gt; is a new set of tools extracted from Hey by Basecamp. It uses Asynchronous HTML and HTTP (also known as &lt;a href="http://microformats.org/wiki/rest/ahah"&gt;AHAH&lt;/a&gt;) to render partial updates to the DOM without full browser reload. You build your servers with any language of your choice and let Turbo handle the partial updates for you. Which makes your application to have a speed of an SPA while having the benefits of server-rendered partials.&lt;/p&gt;

&lt;p&gt;HOTWire is not a single tool, but three tools that allow you to build super fast apps while not having to write tons of client-side JavaScript to manage the updates. The tools within HOTWire are&lt;/p&gt;

&lt;p&gt;1- Turbo: which is responsible for the navigation in your application and rendering the server responses to update the correct partial in the DOM.&lt;/p&gt;

&lt;p&gt;2- Stimulus: Sometimes we would like to add a little bit of client-side behaviour to our site, the feature is too simple to let Turbo manage it and doesn't require a round trip to the server. There, Stimulus comes into play. You add behaviour to your HTML and sprinkles of JavaScript for this.&lt;/p&gt;

&lt;p&gt;3- Strada: &lt;em&gt;Standardizes the way that web and native parts of a mobile hybrid application talk to each other via HTML bridge attributes&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-the-application"&gt;
  &lt;/a&gt;
  Building the Application
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-installing-dependencies"&gt;
  &lt;/a&gt;
  1- Installing dependencies
&lt;/h3&gt;

&lt;p&gt;The application we are going to build is going to be a simple app with one resource. A &lt;code&gt;Post&lt;/code&gt; resource that we will paginate.&lt;/p&gt;

&lt;p&gt;1- let's create a brand new rails application&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails new hotwire-infinite-scroll
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;2- Install HOTWire gems and configure them&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'hotwire-rails'&lt;/span&gt; &lt;span class="c1"&gt;# add to your Gemfile.rb&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;and hit &lt;code&gt;bundle install&lt;/code&gt; to install the gem.&lt;/p&gt;

&lt;p&gt;To configure the gem simply run this command in the console&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails hotwire:install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will install the dependenceis and configure your &lt;code&gt;app/javascript&lt;/code&gt; directory and imports Stimulus.&lt;/p&gt;

&lt;p&gt;3- To use pagination we will be using the &lt;a href="https://github.com/kaminari/kaminari"&gt;kaminari&lt;/a&gt; gem. Simply add this line to your &lt;code&gt;Gemfile.rb&lt;/code&gt; and hit &lt;code&gt;bundle install&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'kaminari'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#2-seeding-data-and-running-the-server"&gt;
  &lt;/a&gt;
  2- Seeding data and Running the server.
&lt;/h3&gt;

&lt;p&gt;1- To seed the data for testing. We will be using the &lt;a href="https://github.com/faker-ruby/faker"&gt;Faker&lt;/a&gt; library for the seeds. Inside &lt;code&gt;db/seeds.rb&lt;/code&gt; paste in this code&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'faker'&lt;/span&gt;

&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt; &lt;span class="ss"&gt;title: &lt;/span&gt;&lt;span class="no"&gt;Faker&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;body: &lt;/span&gt;&lt;span class="no"&gt;Faker&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Lorem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;paragraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;sentence_count: &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;2- Last step is to generate a controller for us to view the posts. Let's create a posts controller, run the following command&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will create a &lt;code&gt;PostsController&lt;/code&gt; with the action &lt;code&gt;index&lt;/code&gt; inside &lt;code&gt;app/controllers&lt;/code&gt;, it will also create a view folder inside &lt;code&gt;app/views/posts&lt;/code&gt;. We load the first page of the posts by using the &lt;code&gt;.page&lt;/code&gt; method added by Kaminari.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;
    &lt;span class="vi"&gt;@page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:page&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="vi"&gt;@posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;page&lt;/span&gt; &lt;span class="vi"&gt;@page&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Finally&lt;/strong&gt;, let's run the server. Run&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;and go to &lt;a href="http://127.0.0.1:3000/posts"&gt;http://127.0.0.1:3000/posts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/oicUqBVk1pdptHwoRc/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/oicUqBVk1pdptHwoRc/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#part-2"&gt;
  &lt;/a&gt;
  Part 2
&lt;/h3&gt;

&lt;p&gt;Follow along with the next part, where we finish this together!.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/rockwell" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AUJBo3bf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--21nHLSMN--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/616139/8914a442-3fed-4a22-b02d-bd9e6c3b9dd2.png" alt="rockwell"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/rockwell/infinite-scroll-with-hotwire-part-2-adding-stimulus-48o2" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Infinite Scroll with HOTWire - Part 2: Adding Stimulus &lt;/h2&gt;
      &lt;h3&gt;Ahmad khattab ・ Oct 17 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#rails&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#ruby&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#hotwire&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;You can also clone the repo &lt;a href="https://github.com/A7madXatab/hotwire-infinite-scroll"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for your reading, hope it helps you in a way. Happy coding!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hotwired.dev/"&gt;HOTWire&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://microformats.org/wiki/rest/ahah"&gt;AHAH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kaminari/kaminari"&gt;kaminari&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/faker-ruby/faker"&gt;Faker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://stevepolito.design/blog/rails-infinite-scrolling-blog-roll/"&gt;create an infinite scrolling blog roll in rails with hotwire
&lt;/a&gt; by &lt;a href="https://twitter.com/stevepolitodsgn"&gt;Steve Polito
&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hotwired/hotwire-rails"&gt;hotwire-rails repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://basecamp.com/"&gt;Basecamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hey.com/"&gt;Hey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://masilotti.com/newsletter/"&gt;HOTWire newsletter&lt;/a&gt; by &lt;a href="https://twitter.com/joemasilotti"&gt;Joe Masilotti&lt;/a&gt; &lt;strong&gt;highly recommend&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
      <category>stimulus</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Write less, test faster with jest-test-gen</title>
      <author>Giulio Dellorbo</author>
      <pubDate>Sun, 17 Oct 2021 19:50:57 +0000</pubDate>
      <link>https://dev.to/egm0121/write-less-test-faster-with-jest-test-gen-3lm0</link>
      <guid>https://dev.to/egm0121/write-less-test-faster-with-jest-test-gen-3lm0</guid>
      <description>&lt;p&gt;Hello everyone 👋&lt;/p&gt;

&lt;p&gt;First time posting here in the dev.to community!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-jesttestgen"&gt;
  &lt;/a&gt;
  What is jest-test-gen
&lt;/h1&gt;

&lt;p&gt;I wanted to introduce a small cli utility &lt;a href="https://www.npmjs.com/package/jest-test-gen"&gt;jest-test-gen&lt;/a&gt; that I wrote to speed up writing Jest unit tests.&lt;/p&gt;

&lt;p&gt;Every time I start writing a new test file for my code some initial boilerplate is always required:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;import all the exports from the source file to be tested&lt;/li&gt;
&lt;li&gt;import the external dependencies used in my source file&lt;/li&gt;
&lt;li&gt;setup jest mocks for the dependencies used in the source code&lt;/li&gt;
&lt;li&gt;create tests blocks for every exported function / class method in my source file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I wanted to automate part of this process by parsing the source file and generating an initial test file containing the initial scaffolding, this way I can quickly start writing the actual logic for my tests.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-use-it"&gt;
  &lt;/a&gt;
  How to use it
&lt;/h1&gt;

&lt;p&gt;To generate a test file just install the tool&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm i -g jest-test-gen&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and invoke it passing the path to your source file as the first argument:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;jest-test-gen ~/demoproject/src/services/myServiceClass.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The tool will generate a file named &lt;code&gt;myServiceClass.generated.test.js&lt;/code&gt; in the same folder.&lt;/p&gt;

&lt;p&gt;Try it out and give it a like here or ⭐️ the repo if you find it useful.&lt;/p&gt;

&lt;p&gt;You can find the repo here: &lt;a href="https://github.com/egm0121/jest-test-gen"&gt;jest-test-gen on Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>testing</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Abstract Factory</title>
      <author>GauravRatnawat</author>
      <pubDate>Sun, 17 Oct 2021 19:38:03 +0000</pubDate>
      <link>https://dev.to/gauravratnawat/abstract-factory-haf</link>
      <guid>https://dev.to/gauravratnawat/abstract-factory-haf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#creational-design-pattern"&gt;
  &lt;/a&gt;
  Creational Design Pattern
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=""&gt;Abstract Factory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use"&gt;
  &lt;/a&gt;
  When to use
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;To support families of related or dependent objects.&lt;/li&gt;
&lt;li&gt;To encapsulate platform dependencies to make an application portable.&lt;/li&gt;
&lt;li&gt;To prevent client code from using the 'new' operator.&lt;/li&gt;
&lt;li&gt;To easily swap the underlying platform with minimal changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#intent"&gt;
  &lt;/a&gt;
  Intent
&lt;/h3&gt;

&lt;p&gt;Provide an interface for creating families of related or dependent objects without specifying their concrete classes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;An Abstract Factory class (public)&lt;/li&gt;
&lt;li&gt;Factory Implementations for various familes (protected)&lt;/li&gt;
&lt;li&gt;Interfaces for various products (public)
*Set of product implementations for various families (protected)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#structure"&gt;
  &lt;/a&gt;
  Structure
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ouNNBftr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61ayjyx0haumjg8oqz31.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ouNNBftr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61ayjyx0haumjg8oqz31.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Define interfaces for different types products/objects. Each family will have all these parts.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.abstractfactory;

public interface Engine {

  public void design();
  public void manufacture();
  public void test();

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.abstractfactory;

public interface Tyre {

  public void design();
  public void manufacture();

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Create sets of implementation subclasses for the above interfaces. Classes are access protected to prohibit instantiations in client modules using the 'new' operator.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.abstractfactory;

class CarEngine implements Engine {

  @Override
  public void design() {
    System.out.println("Designing Car Engine");
  }

  @Override
  public void manufacture() {
    System.out.println("Manufacturing Car Engine");
  }

  @Override
  public void test() {
    System.out.println("Testing Car Engine");
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.abstractfactory;

class CarEngine implements Engine {

  @Override
  public void design() {
    System.out.println("Designing Car Engine");
  }

  @Override
  public void manufacture() {
    System.out.println("Manufacturing Car Engine");
  }

  @Override
  public void test() {
    System.out.println("Testing Car Engine");
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.abstractfactory;

class CarTyre implements Tyre {

  @Override
  public void design() {
    System.out.println("Designing Car Tyre");
  }

  @Override
  public void manufacture() {
    System.out.println("Manufacturing Car Tyre");
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
package com.gaurav.abstractfactory;

class TruckTyre implements Tyre {

  @Override
  public void design() {
    System.out.println("Designing Truck Tyre");
  }

  @Override
  public void manufacture() {
    System.out.println("Manufacturing Truck Tyre");
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Create a Abstract Factory class with factory method 'getFactory()'. Clients can use this method to get an object the required factory. This example uses both Singleton and Factory Method patterns for better design.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.abstractfactory;

public abstract class Factory {

  /* Singleton Factory objects */
  private static Factory carFactory = null;
  private static Factory truckFactory = null;

  public abstract Engine getEngine();
  public abstract Tyre getTyre();

  /*
   * This is the factory method exposed to the client.
   * Client requests for a factory instance by passing the type.
   * Client does not need to know about which &amp;amp; how
   * object is created internally.
   */
  public static Factory getFactory(String vehicleType)
      throws UnknownVehicleException {

    if (vehicleType == null) {
      return null;
    }

    Factory factory = null;
    switch (vehicleType) {
      case "car":
        if (carFactory == null)
          carFactory = new CarFactory();
        factory = carFactory;
        break;
      case "truck":
        if (truckFactory == null)
          truckFactory = new TruckFactory();
        factory = truckFactory;
        break;
      default:
        throw new UnknownVehicleException();
    }

    return factory;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Create Factory implementations. Classes are protected to prohibit direct access in client modules.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.abstractfactory;

class CarFactory extends Factory {

  @Override
  public Engine getEngine() {
    return new CarEngine();
  }

  @Override
  public Tyre getTyre() {
    return new CarTyre();
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
package com.gaurav.abstractfactory;

public class TruckFactory extends Factory {

  TruckFactory() {}

  @Override
  public Engine getEngine() {
    return new TruckEngine();
  }

  @Override
  public Tyre getTyre() {
    return new TruckTyre();
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;The client code. Client is exposed to only the Abstract Factory class and the interfaces.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.client;

import java.util.Scanner;

import com.gaurav.abstractfactory.Engine;
import com.gaurav.abstractfactory.Factory;
import com.gaurav.abstractfactory.Tyre;
import com.gaurav.abstractfactory.UnknownVehicleException;

public class AbstractFactoryClient {

  public static void main(String[] args) {

    Scanner in = new Scanner(System.in);
    String vehicleType = in.nextLine().toLowerCase();

    /* Get the factory instance */
    Factory factory;
    try {
      factory = Factory.getFactory(vehicleType);

      /* Get the Engine from the factory */
      Engine engine = factory.getEngine();
      engine.design();
      engine.manufacture();
      engine.test();

      /* Get the Tyre from the factory */
      Tyre tyre = factory.getTyre();
      tyre.design();
      tyre.manufacture();

    } catch (UnknownVehicleException e) {
      System.out.println("Invalid vehicle type entered!");
    }

    in.close();
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[input1]
    Car
[output1]
    Designing Car Engine
    Manufacturing Car Engine
    Testing Car Engine
    Designing Car Tyre
    Manufacturing Car Tyre

[input2]
    Bus
[output2]
    Invalid vehicle type entered!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Loosely coupled code.&lt;/li&gt;
&lt;li&gt;Abstract Factory provides a single point of access for all products in a family.&lt;/li&gt;
&lt;li&gt;New product family can be easily supported.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#drawbacks"&gt;
  &lt;/a&gt;
  Drawbacks
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;More layers of abstraction increases complexity.&lt;/li&gt;
&lt;li&gt;If there are any changes to any underlying detail of one factory, the interface might need to be modified for all the factories.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#real-world-examples"&gt;
  &lt;/a&gt;
  Real World Examples
&lt;/h3&gt;

&lt;p&gt;Providing data access to two different data sources (e.g. a SQL Database and a XML file). You have two different data access classes (a gateway to the datastore). Both inherit from a base class that defines the common methods to be implemented (e.g. Load, Save, Delete). Which data source shall be used shouldn't change the way client code retrieves it's data access class. Your Abstract Factory knows which data source shall be used and returns an appropriate instance on request. The factory returns this instance as the base class type.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#software-examples"&gt;
  &lt;/a&gt;
  Software Examples
&lt;/h3&gt;

&lt;p&gt;Dependency Injection&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#java-sdk-examples"&gt;
  &lt;/a&gt;
  Java SDK Examples
&lt;/h4&gt;

&lt;p&gt;javax.xml.parsers.DocumentBuilderFactory newInstance()&lt;br&gt;
javax.xml.transform.TransformerFactory newInstance()&lt;br&gt;
javax.xml.xpath.XPathFactory newInstance()&lt;/p&gt;

</description>
      <category>java</category>
      <category>design</category>
      <category>architecture</category>
      <category>designpattern</category>
    </item>
    <item>
      <title>Amazon Textract with expense analyzing</title>
      <author>Jones Zachariah Noel</author>
      <pubDate>Sun, 17 Oct 2021 19:09:50 +0000</pubDate>
      <link>https://dev.to/aws-builders/amazon-textract-with-expense-analyzing-516b</link>
      <guid>https://dev.to/aws-builders/amazon-textract-with-expense-analyzing-516b</guid>
      <description>&lt;p&gt;&lt;a href="https://aws.amazon.com/textract"&gt;Amazon Textract&lt;/a&gt; now supports receipts and invoices processing which makes expense management systems analyze better with &lt;em&gt;only receipt's or invoice's&lt;/em&gt; image or document. &lt;br&gt;
Read more about the &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/07/amazon-textract-announces-specialized-support-automated-processing-invoices-receipts/"&gt;announcement&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#key-takeaways-from-the-blog"&gt;
  &lt;/a&gt;
  Key takeaways from the blog
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-textract"&gt;What is Textract?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#receipts-and-invoices"&gt;How Textract processes receipts and invoices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#textract-implementation"&gt;Implementing Textract with NodeJS SDK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#what-is-textract"&gt;
  &lt;/a&gt;
  What is Textract? &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/textract"&gt;Amazon Textract&lt;/a&gt; is a fully-managed Machine Learning service which extract textual information from documents and images. The Textract &lt;code&gt;DetectDocumentText&lt;/code&gt; API is capable of detecting and extracting textual data which are handwritten or typed present either as texts, forms or tables in the document or image. &lt;/p&gt;

&lt;p&gt;Common use-cases of Textract are - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data capture from forms.&lt;/li&gt;
&lt;li&gt;Automating certain processes similar to KYC process.
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hGPOi-lo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/Em9AG0nVoAYV-YQ.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--qv16LiyE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1368794503285383171/qoMhip1Z_normal.jpg" alt="Jeff Barr ☁️ (@ 🏠 ) 💉 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jeff Barr ☁️ (@ 🏠 ) 💉
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @jeffbarr
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Cool demo video &lt;a href="https://twitter.com/mikegchambers"&gt;@mikegchambers&lt;/a&gt; - Amazon Textract Handwriting Recognition (New) - &lt;a href="https://t.co/MXKDL4p8Pr"&gt;youtube.com/watch?v=Efbgai…&lt;/a&gt; . Be sure to fill in those TPS Reports... 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:55 PM - 16 Nov 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1328351004903948288" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1328351004903948288" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1328351004903948288" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aeVGONp8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E4wFsduWUAIwFaU.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--uxE8Xk6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1322901525476331520/-8TMD1WC_normal.jpg" alt="Danilo Poccia profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Danilo Poccia
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/danilop"&gt;@danilop&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Improve newspaper digitalization efficacy with a generic document segmentation tool using Amazon Textract &lt;a href="https://t.co/ObIlGsEhKs"&gt;buff.ly/3xFEKnp&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/AWS"&gt;#AWS&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/MachineLearning"&gt;#MachineLearning&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:27 PM - 25 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1408507048111845386" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1408507048111845386" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1408507048111845386" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

And more use-cases available on &lt;a href="https://docs.aws.amazon.com/textract/latest/dg/what-is.html#first-time-user"&gt;Amazon Textract documentation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Textract exposes the following SDK APIs for developers to integrate - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;AnalyzeDocument&lt;/code&gt; (&lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_AnalyzeDocument.html"&gt;documentation&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;AnalyzeExpense&lt;/code&gt; (&lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_AnalyzeExpense.html"&gt;documentation&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DetectDocumentText&lt;/code&gt; (&lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_DetectDocumentText.html"&gt;documentation&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GetDocumentAnalysis&lt;/code&gt; (&lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_GetDocumentAnalysis.html"&gt;documentation&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GetDocumentTextDetection&lt;/code&gt; (&lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_GetDocumentTextDetection.html"&gt;documentation&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;StartDocumentAnalysis&lt;/code&gt; (&lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_StartDocumentAnalysis.html"&gt;documentation&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;StartDocumentTextDetection&lt;/code&gt; (&lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_StartDocumentTextDetection.html"&gt;documentation&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With Textract, the processing of images or documents can be handled &lt;a href="https://docs.aws.amazon.com/textract/latest/dg/sync.html"&gt;synchronously&lt;/a&gt; or &lt;a href="https://docs.aws.amazon.com/textract/latest/dg/async.html"&gt;asynchronous&lt;/a&gt;.&lt;br&gt;
&lt;code&gt;StartDocumentAnalysis&lt;/code&gt; / &lt;code&gt;GetDocumentAnalysis&lt;/code&gt; and &lt;code&gt;StartDocumentTextDetection&lt;/code&gt; / &lt;code&gt;GetDocumentTextDetection&lt;/code&gt; are the asynchronous implementation of Amazon Textract and whenever the action start (&lt;code&gt;StartDocumentAnalysis&lt;/code&gt; and &lt;code&gt;StartDocumentTextDetection&lt;/code&gt;) is executed, it returns a &lt;code&gt;JobID&lt;/code&gt; which is referred to when getting the data.&lt;/p&gt;

&lt;p&gt;Textract APIs are flexible to take either document/image buffer data or the object stored on S3 to process and extract textual information. &lt;/p&gt;

&lt;p&gt;Python samples are available in - &lt;a href="https://github.com/awsdocs/aws-doc-sdk-examples/tree/main/python/example_code/textract"&gt;GitHub/awsdocs&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/aws-samples"&gt;
        aws-samples
      &lt;/a&gt; / &lt;a href="https://github.com/aws-samples/amazon-textract-code-samples"&gt;
        amazon-textract-code-samples
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Amazon Textract Code Samples
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h2&gt;
Amazon Textract Code Samples&lt;/h2&gt;
&lt;p&gt;This repository contains example code snippets showing how Amazon Textract and other AWS services can be used to get insights from documents.&lt;/p&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;python3 01-detect-text-local.py&lt;/p&gt;
&lt;p&gt;For examples that use S3 bucket, upload sample images to an S3 bucket and update variable "s3BucketName" in the example before running it.&lt;/p&gt;
&lt;h2&gt;
Python Samples&lt;/h2&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/01-detect-text-local.py"&gt;01-detect-text-local.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing processing a document on local machine.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/02-detect-text-s3.py"&gt;02-detect-text-s3.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing processing a document in Amazon S3 bucket.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/03-reading-order.py"&gt;03-reading-order.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing printing document in reading order.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/04-nlp-comprehend.py"&gt;04-nlp-comprehend.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing detecting entities and sentiment.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/05-nlp-medical.py"&gt;05-nlp-medical.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing detecting medical entities.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/06-translate.py"&gt;06-translate.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing translation of documents.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/07-search.py"&gt;07-search.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing document indexing in Elasticsearch.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/08-forms.py"&gt;08-forms.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing form (key/value) processing.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/09-forms-redaction.py"&gt;09-forms-redaction.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing redacting information in document.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/10-tables.py"&gt;10-tables.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing table processing.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/11-tables-expense.py"&gt;11-tables-expense.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing validation of table data.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/12-pdf-text.py"&gt;12-pdf-text.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing PDF document processing.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
.NET Usage&lt;/h2&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;
&lt;pre&gt;&lt;code&gt;Usage: dotnet run [--switch]
To run this console&lt;/code&gt;&lt;/pre&gt;…&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/aws-samples/amazon-textract-code-samples"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
NodeJS samples are in an open pull request - &lt;br&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/aws-samples/amazon-textract-code-samples/pull/18"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Added NodeJS samples
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#18&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/zachjonesnoel"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--BEC0gOey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/12515425%3Fv%3D4" alt="zachjonesnoel avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/zachjonesnoel"&gt;zachjonesnoel&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/aws-samples/amazon-textract-code-samples/pull/18"&gt;&lt;time&gt;Sep 18, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;&lt;em&gt;Issue #, if available:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Description of changes:&lt;/em&gt;
Added NodeJS text detect samples.&lt;/p&gt;
&lt;p&gt;By submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/aws-samples/amazon-textract-code-samples/pull/18"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#how-textract-processes-receipts-and-invoices"&gt;
  &lt;/a&gt;
  How Textract processes receipts and invoices &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Textract &lt;code&gt;AnalyzeExpense&lt;/code&gt; API processes the data and extracts the key information from the document such as &lt;em&gt;Vendor names&lt;/em&gt;, &lt;em&gt;Receipt number&lt;/em&gt; or &lt;em&gt;Invoice number&lt;/em&gt;. &lt;code&gt;AnalyzeExpense&lt;/code&gt; API is available &lt;strong&gt;only in the latest version of SDK&lt;/strong&gt;, as this is one of the new functions available now. So ensure, you have updated your SDK.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Starting today, Amazon Textract adds the following capabilities for receipts and invoices: 1) Identifies Vendor Name - Amazon Textract can find the vendor name on a receipt even if it's only indicated within a logo on the page without an explicit label called “vendor”. It can also find and extract item, quantity, and prices that are not labeled with column headers for line items, 2) Enables consolidation of output from many documents - Textract normalizes keynames and column headers when extracting data from invoices and receipts, into a standard taxonomy. For example, it detects that “invoice no.” “invoice number” and “receipt #” are identical and outputs “INVOICE_RECEIPT_ID,” so that downstream applications can easily compare output from many documents, and 3) Extracts line item details, even when the column headers are missing - Textract extracts line items including items, quantities, and prices of individual goods purchased from an invoice or a receipt. If the table of line items does not include column headers, Textract now infers what the column headers are meant to be based on the table content.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As described in the &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/07/amazon-textract-announces-specialized-support-automated-processing-invoices-receipts/"&gt;announcement&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This makes it easier for systems which are integrating Textract to manage expense analysis with the consolidated information.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#implementing-textract-with-nodejs-sdk"&gt;
  &lt;/a&gt;
  Implementing Textract with NodeJS SDK &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;In this walkthrough, we will be using the &lt;code&gt;AnalyzeExpense&lt;/code&gt; and &lt;code&gt;AnalyzeDocument&lt;/code&gt; API from Textract. &lt;/p&gt;

&lt;p&gt;To get started, you can navigate to &lt;em&gt;Amazon Textract&lt;/em&gt; AWS Console from where you will be able to run Textract on sample documents and view the response pretty-formatted on the console. &lt;/p&gt;

&lt;p&gt;Image used for the demo - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pCxWYwzr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6sb11vrufnvowmhv16nd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pCxWYwzr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6sb11vrufnvowmhv16nd.png" alt="Image used for the demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When using &lt;code&gt;AnalyzeDocument&lt;/code&gt; from the console/ SDK API, you would have to use what type of feature you want to extract. From SDK API you would have to pass the input for &lt;code&gt;FeatureTypes&lt;/code&gt; as &lt;code&gt;TABLES&lt;/code&gt; or &lt;code&gt;FORMS&lt;/code&gt;, if you are trying this from the console, you can additionally extract all the text as &lt;code&gt;RAW TEXT&lt;/code&gt; also.&lt;br&gt;
Raw text - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1vSzhe0n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h870m55u4vvpe3vj7doh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1vSzhe0n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h870m55u4vvpe3vj7doh.png" alt="RAW TEXT"&gt;&lt;/a&gt;&lt;br&gt;
Forms - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BpvF_Zmk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2to2u7uufwxfck0dxqkj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BpvF_Zmk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2to2u7uufwxfck0dxqkj.png" alt="Forms"&gt;&lt;/a&gt;&lt;br&gt;
Tables - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SE9z8l9P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/quwjjls2amtzxa6zepnc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SE9z8l9P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/quwjjls2amtzxa6zepnc.png" alt="Tables"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="na"&gt;S3Object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;Bucket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;xxxxxx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;download.jfif&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;FeatureTypes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;TABLES&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FORMS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;textract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;analyzeDocument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Response available on &lt;a href="https://gist.github.com/zachjonesnoel/c56763bdea593f0ad30e6d9246557401#file-analyzedocumentresponse-json"&gt;GitHub Gist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For &lt;code&gt;AnalyzeExpense&lt;/code&gt; API, from the console and SDK API, you will get the response with both &lt;code&gt;SummaryFields&lt;/code&gt; and &lt;code&gt;LineItemFields&lt;/code&gt;.&lt;br&gt;
Summary fields - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hry_XvtK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2vs16e31xblixe0gyww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hry_XvtK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2vs16e31xblixe0gyww.png" alt="SummaryFields"&gt;&lt;/a&gt;&lt;br&gt;
Line item fields&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gdhjKRxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsszs6hc98gvda963upm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gdhjKRxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsszs6hc98gvda963upm.png" alt="LineItemFields"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="na"&gt;S3Object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;Bucket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;xxxxxx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;download.jfif&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;textract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;analyzeExpense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Response available on &lt;a href="https://gist.github.com/zachjonesnoel/c56763bdea593f0ad30e6d9246557401#file-analyzeexpenseresponse-json"&gt;GitHub Gist&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h4&gt;

&lt;p&gt;Amazon Textract's pricing varies upon the API that is executed as internally it uses &lt;em&gt;OCR technology&lt;/em&gt; to process and extract textual information. Also based on the feature type, it focuses to extract either &lt;code&gt;FORM&lt;/code&gt; or &lt;code&gt;TABLE&lt;/code&gt; data.&lt;br&gt;
Detailed information on pricing is available &lt;a href="https://aws.amazon.com/textract/pricing/"&gt;on Textract pricing page&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;Amazon Textract enables applications to integrate with SDK APIs so that the documents or images with textual data from various representations of text in form of raw text, forms, tables are easily extratable. Now with the expense analysis support, Textract goes a level ahead to consolidate the items and also extract key information from the invoice or receipts. Textract also provides the confidence level / percentage of the extracted text making it a choice for the integrating applications to either consider it or neglect it. &lt;/p&gt;

</description>
      <category>textract</category>
      <category>aws</category>
      <category>machinelearning</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Using Chi as a router for Go APIs</title>
      <author>Sam Newby</author>
      <pubDate>Sun, 17 Oct 2021 18:55:45 +0000</pubDate>
      <link>https://dev.to/nwby/using-chi-as-a-router-for-go-apis-53n2</link>
      <guid>https://dev.to/nwby/using-chi-as-a-router-for-go-apis-53n2</guid>
      <description>&lt;p&gt;The Go &lt;code&gt;net/http&lt;/code&gt; package is great, it provides Go developers with a fantastic build block for building super fast APIs with Go.&lt;/p&gt;

&lt;p&gt;However, it doesn't have a built in router that most developers would be used to. Luckily, a lot of community members have built really simple routers that can be used with the standard &lt;code&gt;net/http&lt;/code&gt; package. There is a lot of options out there, but my personal favourite is &lt;a href="https://go-chi.io/#/"&gt;Chi&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Disclaimer: I'm not going to go into a lot of detail why I personally prefer Chi as I believe that those who are new to Go should be allowed to freely make there own choice on their favourite router without influence from others.&lt;/p&gt;

&lt;p&gt;Right, let's take a look at how we can build a small API using Chi as our router.&lt;/p&gt;

&lt;p&gt;Firstly, let's install Chi&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go get -u github.com/go-chi/chi/v5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we'll define our &lt;code&gt;main.go&lt;/code&gt; and start using Chi straight away. We're going to declare a new router and create an initial route to receive a &lt;code&gt;GET&lt;/code&gt; request and then start our &lt;code&gt;http&lt;/code&gt; server. That will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import (
    "net/http"
    "github.com/go-chi/chi/v5"
)

func main() {
    router := chi.NewRouter()

    r.Get("/", testHandler)

    http.ListenAndServe(":8000", r)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To recap this we're importing &lt;code&gt;chi&lt;/code&gt; and &lt;code&gt;net/http&lt;/code&gt; then defining a main function and creating a new Chi router and assigning it a new variable called &lt;code&gt;router&lt;/code&gt;. We're then defining a new route at the path &lt;code&gt;/&lt;/code&gt; that will receive a &lt;code&gt;GET&lt;/code&gt; request and will run the &lt;code&gt;testHandler&lt;/code&gt; function, we haven't defined that handler and we won't to keep this tutorial short. We then start the &lt;code&gt;http&lt;/code&gt; server on port 8000 and pass the Chi router.&lt;/p&gt;

&lt;p&gt;This has just touched the surface on Chi and it has a lot more features to offer when building an API and I plan to write more on the power of Chi in the future.&lt;/p&gt;

&lt;p&gt;If you'd like to stay up to date with my content, make sure to follow me on &lt;a href="https://twitter.com/samnewby_"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>chi</category>
      <category>apis</category>
    </item>
    <item>
      <title>Why Good Syntax Highlighting is Important</title>
      <author>Ashish Bailkeri</author>
      <pubDate>Sun, 17 Oct 2021 18:30:11 +0000</pubDate>
      <link>https://dev.to/aboss123/why-good-syntax-highlighting-is-important-4gan</link>
      <guid>https://dev.to/aboss123/why-good-syntax-highlighting-is-important-4gan</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;All code snippets posted are under the &lt;strong&gt;MIT License&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#so-does-it-really-matter"&gt;
  &lt;/a&gt;
  So does it really matter?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Yes.&lt;/strong&gt; There good programming practices in certain programming languages but there is also good developing practices and this is one of them. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-are-the-advantages"&gt;
  &lt;/a&gt;
  So what are the advantages?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Higher Productivity 

&lt;ul&gt;
&lt;li&gt;When programming with better syntax highlighting it becomes easier to identify where parts of your program is based on the color. With color schemes with limiting syntax highlighting on certain semantics, it can be really difficult to differentiate between what may be a parameter variable or a local variable, or in the case of C++, macros, enum values, global variables, etc.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Encourages you to code

&lt;ul&gt;
&lt;li&gt;What do I mean by this? I mean that you actually feel more engaged looking at a diverse array of colors on your screen rather than dull jumbled array of words that happen to put together a program. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me show you what I mean:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Colorful Example&lt;/strong&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T771lJKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dyaroxfhhy8hj9ciity7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T771lJKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dyaroxfhhy8hj9ciity7.png" alt="Good Syntax Highlighting Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Snippet from &lt;a href="https://github.com/The-NextGen-Project/jet"&gt;&lt;strong&gt;Jet&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What does this do well? It has a vast amount of colors that is easy to differentiate parts of the program immediately, it is not just about I have highlighting, but it really tries and brings out different parts of the program. I can easily point out macros, class variables, parameters, and functions almost instantly through this highlighting. But for some, this might be overkill in colors.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is my opinion of course, but in general you should choose a theme that suits your programming style the best&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of course, this also depends on your editor's capability but other popular editors like Visual Studio Code, still provide support for &lt;a href="https://code.visualstudio.com/api/language-extensions/semantic-highlight-guide"&gt;semantic highlighting&lt;/a&gt;. But we can see clearly how this highlighting can improve the coder's experience and provides clarity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Blander Example&lt;/strong&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XJhv2dz8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nul4bkga0fbhh4zkpm76.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XJhv2dz8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nul4bkga0fbhh4zkpm76.png" alt="Okay Syntax Highlighting Example"&gt;&lt;/a&gt;&lt;br&gt;
This theme is known as &lt;strong&gt;Darcula&lt;/strong&gt;, JetBrains's default dark theme syntax highlighting, and while it does the job, is less attractive. Important type values such as &lt;code&gt;size_t&lt;/code&gt; are not highlighted in this example and can easily be overlooked as they have a very similar color to the delimiter tokens. This is not say it isn't a good theme, it is, and is far better than editors with only keyword highlights. In general, good syntax highlighting themes needs to be able to have ways of identifying important parts of the program.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages-of-good-syntax-highlighting"&gt;
  &lt;/a&gt;
  Disadvantages of Good Syntax Highlighting
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Get lost in the sea of colors that is your code

&lt;ul&gt;
&lt;li&gt;No? That's just me? Well let's move on then.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;My opinion is this: the making of a good programmer is one that knows how to use the tools available today to further increase their skills, and this includes something as subtle as syntax highlighting and font choice. You don't have to stick with something like my syntax highlighting, rather you should find the one best suitable for you.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>beginners</category>
      <category>development</category>
      <category>programming</category>
    </item>
    <item>
      <title>Pop culture design patterns: creational</title>
      <author>MeStrak</author>
      <pubDate>Sun, 17 Oct 2021 18:28:44 +0000</pubDate>
      <link>https://dev.to/mestrak/pop-culture-design-patterns-creational-3m32</link>
      <guid>https://dev.to/mestrak/pop-culture-design-patterns-creational-3m32</guid>
      <description>&lt;p&gt;During a recent interview I asked the candidate about their understanding of design patterns. I was impressed not only with their honesty, telling me they only had basic knowledge, but also with their description of the Singleton pattern:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It's like Highlander … there can be only one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since then I discovered that there are already some memes floating around with the same joke, but it made me chuckle anyway. It got me thinking that perhaps there is something in the idea of using pop culture references to remember the fundamental goals of design patterns.&lt;/p&gt;

&lt;p&gt;This series is my attempt to choose some good references. It's not to be taken too seriously, and I won't provide in depth explanations of each pattern as there are already amazing sites for this like &lt;a href="https://refactoring.guru"&gt;https://refactoring.guru&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's try creational patterns first. Here goes …&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#singleton-highlander-there-can-be-only-one"&gt;
  &lt;/a&gt;
  Singleton: Highlander - there can be only one
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8UJuolwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ebeesxz1sp1v7tpd645f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8UJuolwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ebeesxz1sp1v7tpd645f.png" alt="Highlander movie poster"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Image sourced from: &lt;a href="https://www.vintagemovieposters.co.uk/wp-content/uploads/2021/03/IMG_1541-scaled.jpeg"&gt;https://www.vintagemovieposters.co.uk/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Singleton ensures that only one instance of the class which implements it can exist. Global access to that object can be used within state management applications (think Redux).&lt;/p&gt;

&lt;p&gt;If you haven't seen The Highlander, you're missing out. I love it, even though it's 80s cheese. Immortals battle it out to be the only immortal, because just like the Singleton pattern 'THERE CAN BE ONLY ONE!'.&lt;/p&gt;

&lt;p&gt;Other similarities between Singleton and The Highlander:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They're both classics, and both much criticised. I'm not afraid to say that I love both of them - I can still remember my first time implementing a Singleton.&lt;/li&gt;
&lt;li&gt;In The Highlander, after beheading another immortal, all knowledge that person has obtained during their lifetime is transferred to the surviving immortal in a process called The Quickening. One of the criticisms of Singleton is that it can be used as a global store for everything, resulting in separate components of an application knowing too much about each other.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#builder-five-guys"&gt;
  &lt;/a&gt;
  Builder: Five Guys
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XieV3ZhI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wza2d9qri3slhfvkw3hm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XieV3ZhI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wza2d9qri3slhfvkw3hm.png" alt="Five Guys burger, fries and milkshake"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Image sourced from: &lt;a href="https://www.timeout.com/miami/restaurants/everything-on-the-five-guys-menu-ranked"&gt;https://www.timeout.com/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The goal of the Builder pattern is to construct complex objects, and allow you to create variations on those objects using the same code.&lt;/p&gt;

&lt;p&gt;A frequently used analogy for this pattern is assembling a meal in a fast food restaurant. My somewhat limited imagination allowed me to think of Five Guys. Think of making a burger as a complex task - implement the Builder pattern to call:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;AddPickles()
AddBacon()
AddCheese()
AddKetchup()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Obviously if those are your only choices of Five Guys burger toppings something has gone wrong, but hopefully you get the idea.&lt;/p&gt;

&lt;p&gt;Builder also has an optional implementation of a Director, further abstracting the implementation and simplifying things for the client. This is like your Five Guys cashier who takes your order for a burger all the way, and a crazy milkshake with 11 mixins, and then sends all required instructions to the builder team who assemble and deliver your meal.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prototype-futurama-s6e17-benderama"&gt;
  &lt;/a&gt;
  Prototype: Futurama S6E17 - Benderama
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T4xAgUNq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/myx2pzjyi90t47synirh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T4xAgUNq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/myx2pzjyi90t47synirh.png" alt="Bender from Futurama with his clones on a triple bike"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Image sourced from: &lt;a href="https://www.assignmentx.com/wp-content/uploads/2011/06/FUTURAMA-Season-6B-Benderama2.jpg"&gt;https://www.assignmentx.com/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Prototype pattern is used to remove complexity from copying objects. Objects that implement the Prototype pattern know how to clone themselves, so code that needs to make a copy does not need to know the complexity of the class.&lt;/p&gt;

&lt;p&gt;In Benderama, Bender makes clones of himself. Unfortunately each clone is smaller than the previous one and when they reach molecular level they nearly destroy the world. Obviously knowing that detail this analogy falls down entirely.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#factory-method-the-pepsi-challenge"&gt;
  &lt;/a&gt;
  Factory Method: The Pepsi Challenge
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OQvnfOZo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0b6se6ovocrk7zdl9k4h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OQvnfOZo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0b6se6ovocrk7zdl9k4h.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Image sourced from &lt;a href="https://abcnews.go.com/Business/pepsi-challenge-returns-bubbly-twist/story?id=29552172"&gt;https://abcnews.go.com/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Factory Method provides a way for a class to create similar objects, but to leave the individual subclasses to use their own logic. This is done by defining an interface implemented by all subclasses so individual objects can be created using common methods, but without knowing the details of what's inside.&lt;/p&gt;

&lt;p&gt;First of all, in case you don't know what it is, the Pepsi Challenge is a marketing campaign from the 1980s where shoppers would do a blind tasting of Coke and Pepsi and say which one they preferred.&lt;/p&gt;

&lt;p&gt;Why is Factory Method similar to the Pepsi Challenge? Think of an abstract class called &lt;code&gt;SoftDrink&lt;/code&gt; which provides a creational method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CreateDrink()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And an interface implemented by every soft drink providing the following common methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FillBottle()
OpenBottle()
PourDrink()
DrinkCola()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is Factory Method! The creational logic of each drink is the secret recipe closely guarded by Coke or Pepsi. When the consumer takes the challenge, they call the &lt;code&gt;DrinkCola()&lt;/code&gt; function but they do not know if they are doing that for Coke or Pepsi, thanks to the Factory Method which hides that complexity (in the form of a big yellow box).&lt;/p&gt;

&lt;p&gt;Using this approach, Pepsi could add as many drinks as they want to into the challenge. They don't really need to do that though, as instead through shameless capitalism the two companies have successfully wiped out or bought out most other competition.&lt;/p&gt;

&lt;p&gt;One drawback of the Factory Method is that requires implementation of many subclasses. This can make quite a simple concept harder to understand than intended when actually implemented, just like my attempt to use the Pepsi Challenge to explain this pattern.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#abstract-factory-ikea"&gt;
  &lt;/a&gt;
  Abstract Factory: Ikea
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p-TAvmDS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i86et0u2jrknmdq8yskj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p-TAvmDS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i86et0u2jrknmdq8yskj.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Image sourced from &lt;a href="https://about.ikea.com/"&gt;https://about.ikea.com/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You may guess from the name that this one adds a layer of abstraction to the Factory Method. It is used for creating groups of related objects (a family). The Abstract Factory class holds a bunch of abstract creation methods which know how to create instances of the objects. Concrete factories will then be called to actually create the object.&lt;/p&gt;

&lt;p&gt;Think of each family like a set of matching furniture from Ikea. The furniture family might contain a chair, sofa and a table. Different style chairs would have the same chair interface, the &lt;code&gt;create()&lt;/code&gt; method would implement the style of that chair's given family. The factory for a given family will call the specific &lt;code&gt;create()&lt;/code&gt; methods to create each furniture type with the correct style matching the family.&lt;/p&gt;

&lt;p&gt;I'm sorry to say that I had a lack of imagination for this one, and the chosen analogy is the same as several other examples online. One of those is the excellently written article on &lt;a href="https://refactoring.guru/design-patterns/abstract-factory"&gt;https://refactoring.guru/&lt;/a&gt; which has a great explanation. I recommend that you spend some time reading that, and hopefully the Ikea link will start to stick.&lt;/p&gt;




&lt;p&gt;And there you have it, hopefully some memorable references for Singleton, Builder, Prototype Factory and Abstract Factory creational design patterns.&lt;/p&gt;

&lt;p&gt;Look out for further posts in this series where I will &lt;em&gt;try&lt;/em&gt; to do the same for Structural and Behavioural patterns.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Fin.&lt;/code&gt;&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>culture</category>
      <category>design</category>
    </item>
    <item>
      <title>Introduction to GitHub Actions</title>
      <author>Peter Mbanugo</author>
      <pubDate>Sun, 17 Oct 2021 18:19:00 +0000</pubDate>
      <link>https://dev.to/pmbanugo/introduction-to-github-actions-4bp5</link>
      <guid>https://dev.to/pmbanugo/introduction-to-github-actions-4bp5</guid>
      <description>&lt;p&gt;GitHub is fast becoming an all-in-one platform where developers build, maintain and ship their software. You may use it primarily as a collaborative code management tool for your software. But today, you have features like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/features/codespaces"&gt;Codespaces&lt;/a&gt;, a cloud-powered development environment that allows you to build, run and debug your code in the cloud.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/features/actions"&gt;Actions&lt;/a&gt;, an automation platform that allows you to automate your development workflow.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm going to focus on GitHub Actions in this post. This will be a basic introduction to the concept of GitHub Actions for developers of all skill levels. I'll start out with a simple action that prints out text, and then finish off with an Actions workflow that will run the test script of a Node.js application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-github-actions"&gt;
  &lt;/a&gt;
  What Is GitHub Actions?
&lt;/h2&gt;

&lt;p&gt;GitHub Actions is an event-driven, automation platform that allows you to run a series of commands after a specified event has occurred. For example, when a commit is made to your staging branch, and you want to build, test and then deploy the changes to your staging environment. With Actions, you can automate tasks within your development lifecycle, all within GitHub.&lt;/p&gt;

&lt;p&gt;A common use case for Actions is automated continuous integration and deployment, and you may ask if you need to know yet another CI/CD tool, or which is better. GitHub Actions is much more than a CI/CD tool. You can use it to automate any task based on any event related to your GitHub project. They can be events related to GitHub Issues where you want to automatically triage issues and label them, or block pull requests that reference no existing issues. It's more of an automation tool than a CI/CD tool.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-first-hello-world-github-actions"&gt;
  &lt;/a&gt;
  Your First Hello World GitHub Actions
&lt;/h2&gt;

&lt;p&gt;We're going to create a simple Actions workflow that can be manually invoked, or run automatically for every commit pushed to the &lt;code&gt;main&lt;/code&gt; branch. GitHub Actions are stored in your repository, in a directory called &lt;strong&gt;.github/workflows&lt;/strong&gt;, and they're defined using the YAML syntax. &lt;/p&gt;

&lt;p&gt;To get started, fork and clone this &lt;a href="https://github.com/pmbanugo/hello-world-actions"&gt;repository on GitHub&lt;/a&gt;. Create the directory &lt;strong&gt;.github/workflows&lt;/strong&gt;, then add a new file &lt;strong&gt;hello-world-actions.yml&lt;/strong&gt; and paste the code below in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# This is a basic workflow to help you get started with Actions&lt;/span&gt;

&lt;span class="c1"&gt;#The name of your workflow that'll be displayed in the Actions tab&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Hello-World-Actions&lt;/span&gt;

&lt;span class="c1"&gt;# Events that control when the action will run.&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# Triggers the workflow on push events but only for the main branch&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

  &lt;span class="c1"&gt;# Allows you to run this workflow manually from the Actions tab&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

&lt;span class="c1"&gt;# A workflow run is made up of one or more jobs that can run sequentially or in parallel&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# This workflow contains a single job called "say_hello"&lt;/span&gt;
  &lt;span class="na"&gt;say_hello&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# The type of runner that the job will run on&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="c1"&gt;# Steps represent a sequence of tasks that will be executed as part of the job&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# Runs a single command using the runners shell&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Say Hello&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo Hello World!&lt;/span&gt;

      &lt;span class="c1"&gt;# Runs a set of commands using the runners shell&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Say Goodbye&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;echo Job Finished.&lt;/span&gt;
          &lt;span class="s"&gt;echo Goodbye!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's break down the content of this file to help you understand the component of GitHub Actions. But before that, commit and push this change to the upstream branch.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#workflow"&gt;
  &lt;/a&gt;
  Workflow
&lt;/h3&gt;

&lt;p&gt;The file you added represents a workflow. A workflow is a configurable automated process made up of one or more jobs and can be scheduled or triggered by an event. A workflow can be used to build, test, package, release or deploy a project. &lt;/p&gt;

&lt;p&gt;GitHub displays the name of your workflow on your repository's Actions page. You can set the name using the &lt;code&gt;name&lt;/code&gt; key in your YAML file, and, if omitted, GitHub sets it to the file path relative to the root of the repository. In the example above, we specified the name as &lt;code&gt;Hello-World-Actions&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events"&gt;
  &lt;/a&gt;
  Events
&lt;/h3&gt;

&lt;p&gt;A workflow can be triggered manually or in response to specific events. To specify the events that trigger a workflow, you use the &lt;code&gt;on&lt;/code&gt; keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This example executes the workflow on push to the main branch and can be triggered manually from the Actions page because we specified &lt;code&gt;workflow_dispatch&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jobs-runners-and-steps"&gt;
  &lt;/a&gt;
  Jobs, Runners and Steps
&lt;/h3&gt;

&lt;p&gt;A workflow execution is made up of one or more jobs. In our example, we have a single job named &lt;code&gt;say_hello&lt;/code&gt;. A job is a set of steps that execute a series of commands, using the specified runner.&lt;/p&gt;

&lt;p&gt;A runner is a server that has the &lt;a href="https://github.com/actions/runner"&gt;GitHub Actions runner application&lt;/a&gt; installed. It listens for available jobs, runs one job at a time, and reports the progress, logs and results back to GitHub. You can host your own runner or use GitHub hosted runners. In our example, we're using the Ubuntu runner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After you specify the runner, then you specify the steps with the commands to run.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Runs a single command using the runners shell&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Say Hello&lt;/span&gt;
        &lt;span class="s"&gt;run&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo Hello World!&lt;/span&gt;

    &lt;span class="c1"&gt;# Runs a set of commands using the runners shell&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Say Goodbye&lt;/span&gt;
        &lt;span class="s"&gt;run&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;echo Job Finished.&lt;/span&gt;
          &lt;span class="s"&gt;echo Goodbye!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;run&lt;/code&gt; keyword tells the job to execute a command on the runner. In this case, run the &lt;code&gt;echo&lt;/code&gt; command with the specified values.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#viewing-the-workflow-activity"&gt;
  &lt;/a&gt;
  Viewing the Workflow Activity
&lt;/h3&gt;

&lt;p&gt;With the changes you made, whenever you push a change to the &lt;code&gt;main&lt;/code&gt; branch, it'll run this workflow. Since you already pushed the change to GitHub, you should have had your workflow executed. You will see the workflow executions on the Actions page on GitHub. You can see a visual graph of the progress for each execution, and also drill down into the details of each step. &lt;/p&gt;

&lt;p&gt;Follow the instructions below to see the workflow executions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open GitHub and go to the main page of your repository.&lt;/li&gt;
&lt;li&gt;You will find the &lt;em&gt;Actions&lt;/em&gt; tab after &lt;em&gt;Pull requests&lt;/em&gt;. Click &lt;em&gt;Actions&lt;/em&gt; to open the Actions page.&lt;/li&gt;
&lt;li&gt;You should see the workflow listed in the left sidebar, and the run for the workflow listed on the main page. Click any of the workflow runs you would like to see more information about its execution.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bw-UEMZj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/4036118/117479820-14c3d900-af61-11eb-9df6-f554b2308c6d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bw-UEMZj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/4036118/117479820-14c3d900-af61-11eb-9df6-f554b2308c6d.png" alt="workflow run" title="workflow run"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ybkPkCtZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/4036118/117481148-d3ccc400-af62-11eb-97ca-a3da0036db34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ybkPkCtZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/4036118/117481148-d3ccc400-af62-11eb-97ca-a3da0036db34.png" alt="job details" title="job details"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-workflow-to-run-tests"&gt;
  &lt;/a&gt;
  Create a Workflow to Run Tests
&lt;/h2&gt;

&lt;p&gt;While you can write your own workflow and actions from scratch, there are community contributed ones that you can use and customize. The GitHub marketplace is a central location for you to find actions created by the GitHub community. We will create a new workflow that will run the test in the project. For this, we will use the GitHub interface to create a workflow using one of the suggested templates, then, within the workflow, you will use a public action to set up Node.js.&lt;/p&gt;

&lt;p&gt;Open GitHub and click the &lt;strong&gt;Actions&lt;/strong&gt; tab in order to open the actions page. On the left sidebar, click the &lt;strong&gt;New workflow&lt;/strong&gt; button. You will be presented with a page that contains suggestions for templates that you can modify to create a workflow. Click the &lt;strong&gt;Set up this workflow&lt;/strong&gt; button in the Node.js workflow template card.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eZVAzAN0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/4036118/117490650-5ce9f800-af6f-11eb-9606-8431ff29c33b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eZVAzAN0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/4036118/117490650-5ce9f800-af6f-11eb-9606-8431ff29c33b.png" alt="workflow suggestions" title="workflow suggestions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This opens the workflow editor with the file prefilled with jobs and steps. Change the name of the file to &lt;code&gt;test.yml&lt;/code&gt;. This file is similar to the one you saw earlier but with a few new syntaxes. On lines 17 and 18, you notice the &lt;code&gt;strategy&lt;/code&gt; and &lt;code&gt;matrix&lt;/code&gt; keywords.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;matrix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;10.x&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;12.x&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;14.x&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;15.x&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The strategy creates a build matrix for the jobs, such that your job will run against the specified variations. In this example, the specified job will run multiple times for the specified Node.js versions in the array. We don't want to run against Node.js 10.x; therefore, we will update line 19 as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node-version: [12.x, 14.x, 15.x, 16.x]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will notice the use of the &lt;code&gt;uses&lt;/code&gt; keyword in this workflow. This is a way to specify actions that you want to execute for the step. An action is a reusable set of commands that can be defined in the same repository as the workflow, a public repository or a Docker image. You can create your own actions, or use actions created by the GitHub community.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;uses: actions/checkout@v2&lt;/code&gt; statement tells the job to retrieve &lt;em&gt;v2&lt;/em&gt; of the community action named &lt;code&gt;actions/checkout@v2&lt;/code&gt;. This is an action that checks out your repository at a particular version, then downloads it to the runner. This allows you to run actions against your code, and you can use this action any time your workflow will run against the repository's code.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;actions/setup-node@v2&lt;/code&gt; action installs the &lt;strong&gt;Node&lt;/strong&gt; software package on the runner, thereby giving you access to &lt;strong&gt;node&lt;/strong&gt; and &lt;strong&gt;npm&lt;/strong&gt; commands.&lt;/p&gt;

&lt;p&gt;The rest of the command runs &lt;strong&gt;npm&lt;/strong&gt; to install the project dependencies and then run the &lt;em&gt;test&lt;/em&gt; script.&lt;/p&gt;

&lt;p&gt;Commit and push these changes and observe the workflow run on the Actions page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fv-hD4H5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/4036118/117639711-80d25700-b184-11eb-8a06-589a720eabb5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fv-hD4H5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/4036118/117639711-80d25700-b184-11eb-8a06-589a720eabb5.png" alt="Node CI Workflow Run" title="Node CI Workflow Run"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapup"&gt;
  &lt;/a&gt;
  Wrap-up
&lt;/h2&gt;

&lt;p&gt;GitHub Actions is a nice addition to the suite of features available on GitHub. It enables you to automate your development tasks and visualize how those tasks run, all within GitHub. It can be used to automate CI/CD tasks or automate how you triage issues or labelling of pull requests. Actions serves as your serverless workflow engine, with the automation code maintained alongside the code for the application. The &lt;a href="https://github.com/marketplace"&gt;GitHub marketplace&lt;/a&gt; is where you can find actions for common tasks such as building and publishing a Docker image, and you can also create and share your actions in the marketplace.&lt;/p&gt;

&lt;p&gt;Try it out, and let me know how Actions worked out for you by leaving a comment here or DMing me on &lt;a href="https://twitter.com/p_mbanugo"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Originally published at &lt;a href="https://www.telerik.com/blogs/introduction-github-actions"&gt;https://www.telerik.com/blogs/introduction-github-actions&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>devops</category>
      <category>cicd</category>
      <category>github</category>
    </item>
    <item>
      <title>8 Steps Guide To Ace A System Design Interview</title>
      <author>Sunil Kumar</author>
      <pubDate>Sun, 17 Oct 2021 18:02:00 +0000</pubDate>
      <link>https://dev.to/sunilc_/8-steps-guide-to-ace-a-system-design-interview-2j8b</link>
      <guid>https://dev.to/sunilc_/8-steps-guide-to-ace-a-system-design-interview-2j8b</guid>
      <description>&lt;p&gt;System Designing has become one of the important rounds to crack a Software Developer job interview, especially for a senior-level position. Preparing for this round is necessary to crack interviews of some of the popular companies like Amazon, Netflix, Google, Twitter, etc.&lt;/p&gt;

&lt;p&gt;In this round, you are basically expected to discuss the design of a large-scale distributed system like Twitter, Uber, Facebook, Dropbox, etc. &lt;/p&gt;

&lt;p&gt;There is no one right solution when it comes to designing a system. There can be multiple ways to solve a problem and thus this round is going to be an open-ended round where the focus will be on a working design + your thought process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-is-it-important-to-prepare-for-a-system-design%C2%A0round"&gt;
  &lt;/a&gt;
  Why Is It Important To Prepare for a System Design Round:
&lt;/h3&gt;

&lt;p&gt;Due to the lack of experience or knowledge in building scalable systems in everyday work, a lot of developers struggle with this round. Even after being a good Software Developer, they fail to get into good companies just because they fail to clear this round.&lt;/p&gt;

&lt;p&gt;So it's important to focus on this round and prepare well to get into your dream company.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-to-expect-in-a-system-design-interview"&gt;
  &lt;/a&gt;
  What To Expect in a System Design Interview:
&lt;/h3&gt;

&lt;p&gt;Great engineers spend years of time building a robust and scalable system. You cannot possibly come up with a  similar solution in a short duration of 1–1.5 hours in a System Design interview. &lt;/p&gt;

&lt;p&gt;So generally only a part of the entire system is discussed in this round.&lt;/p&gt;

&lt;p&gt;As mentioned earlier there is no one right solution in designing a good system. This round is generally open-ended and discussion can go in any direction based on what the interviewer is interested in, how you lead the discussion, and in what direction you take it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sample-questions-asked-in-a-system-design-interview"&gt;
  &lt;/a&gt;
  Sample Questions Asked in a System Design Interview:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Design a chat service like WhatsApp&lt;/li&gt;
&lt;li&gt;Design a parking lot&lt;/li&gt;
&lt;li&gt;Design a URL shortener service like TinyURL&lt;/li&gt;
&lt;li&gt;Design a video streaming service like YouTube/Netflix&lt;/li&gt;
&lt;li&gt;Design a file sharing service like Google Drive&lt;/li&gt;
&lt;li&gt;Design a Social Media platform like Instagram, Twitter, or Facebook.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are some of the popular questions that are asked in this round. As you can see the questions are vague and the problem statement doesn't provide specific details on what part of the system should be designed. &lt;/p&gt;

&lt;p&gt;So, it's important to know how to approach this round to come up with a good design at the end of this discussion.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#different-system-design%C2%A0rounds"&gt;
  &lt;/a&gt;
  Different System Design Rounds:
&lt;/h3&gt;

&lt;p&gt;System Design is generally split into two separate rounds. &lt;/p&gt;

&lt;p&gt;But again, it depends on the company and its process. So be prepared to design both high-level and low-level components of a system in this round.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;High-level Design&lt;/li&gt;
&lt;li&gt;Low-level Design&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#highlevel-design"&gt;
  &lt;/a&gt;
  High-Level Design:
&lt;/h4&gt;

&lt;p&gt;This round mainly checks your ability to architect &amp;amp; design high-level components for the given requirements.&lt;/p&gt;

&lt;p&gt;For example, given a problem statement like &lt;code&gt;Design a social media platform like Instagram&lt;/code&gt;, you need to come up with the different microservices you will need, the pub-sub mechanism (if needed), queues, databases, caching, etc.&lt;/p&gt;

&lt;p&gt;The interviewer will ask questions on how data would flow through different microservices in the design, fault tolerance, retry mechanism, etc. You can also expect questions around non-functional requirements like scalability, data consistency, concurrency, etc.&lt;/p&gt;

&lt;p&gt;Building a distributed scalable system is hard. You need to think about different scenarios while coming up with an architecture.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#different-concepts-you-should-learn-about-to-prepare-for-an-hld%C2%A0round"&gt;
  &lt;/a&gt;
  Different concepts you should learn about to prepare for an HLD round:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Key Characteristics of Distributed Systems&lt;/li&gt;
&lt;li&gt;Load Balancing&lt;/li&gt;
&lt;li&gt;Caching&lt;/li&gt;
&lt;li&gt;Data Partitioning&lt;/li&gt;
&lt;li&gt;Indexes&lt;/li&gt;
&lt;li&gt;Proxies&lt;/li&gt;
&lt;li&gt;Redundancy and Replication&lt;/li&gt;
&lt;li&gt;SQL vs. NoSQL&lt;/li&gt;
&lt;li&gt;CAP Theorem&lt;/li&gt;
&lt;li&gt;Consistent Hashing&lt;/li&gt;
&lt;li&gt;Long-Polling vs WebSockets vs Server-Sent Events&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#lowlevel-design"&gt;
  &lt;/a&gt;
  Low-Level Design:
&lt;/h4&gt;

&lt;p&gt;This round mainly focuses on your ability to design low-level components of your HLD. Given a problem statement you should come up with a design with different entities, classes &amp;amp; attributes, inheritance, composition, design patterns, databases, tables &amp;amp; schema, etc.&lt;/p&gt;

&lt;p&gt;You cannot possibly cover all of these in one interview round. The interviewer may be interested in anyone depending on how the discussion goes.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#different-concepts-you-should-learn-about-to-prepare-for-an-lld%C2%A0round"&gt;
  &lt;/a&gt;
  Different concepts you should learn about to prepare for an LLD round:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;UML&lt;/li&gt;
&lt;li&gt;Use case diagram&lt;/li&gt;
&lt;li&gt;Class diagram&lt;/li&gt;
&lt;li&gt;Database design&lt;/li&gt;
&lt;li&gt;Sequence diagram&lt;/li&gt;
&lt;li&gt;Activity diagram&lt;/li&gt;
&lt;li&gt;Separation of concerns&lt;/li&gt;
&lt;li&gt;OOP principles&lt;/li&gt;
&lt;li&gt;SOLID principles etc&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-to-approach-a-system-design-interview-round"&gt;
  &lt;/a&gt;
  How To Approach a System Design Interview Round:
&lt;/h3&gt;

&lt;p&gt;Here is my 8 step guide to approaching System Design rounds effectively.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-1-ask-a-lot-of-questions-and-set-the-scope-for-the-interview"&gt;
  &lt;/a&gt;
  Step 1: Ask a lot of questions and set the scope for the interview:
&lt;/h4&gt;

&lt;p&gt;System Design problem statements are vague. And there's no one right answer. So, it's important to ask a lot of questions and clarify the scope of the discussion.&lt;/p&gt;

&lt;p&gt;Candidates who ask a lot of questions have a better chance of success. For example here is a list of questions you can ask for the Design Instagram question:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What are the different types of accounts possible?&lt;br&gt;
A: Only users. We will not consider business accounts for now&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What type of posts can a user post?&lt;br&gt;
A: Let's consider users can post only images for this discussion. Videos are out of scope.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Can users follow other users?&lt;br&gt;&lt;br&gt;
A: Yes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Should we support tags for each post?&lt;br&gt;&lt;br&gt;
A: Yes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Can posts be private?&lt;br&gt;&lt;br&gt;
A: Let's assume posts can only be public for this discussion.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Can users search for posts?&lt;br&gt;&lt;br&gt;
A: Yes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Should we focus on the client-side architecture or the server-side architecture?&lt;br&gt;&lt;br&gt;
A: I would like to understand the client-server interaction on a high level. But the focus should be more on building a scalable backend system.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How many users are expected to use the system every day?&lt;br&gt;&lt;br&gt;
A: Let's assume we have around 100M users logging in every day.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Should we focus on generating a user's home feed?&lt;br&gt;&lt;br&gt;
A: Let's not focus on the feed generation algorithm&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Should we focus on the high-level or low-level design of the system?&lt;br&gt;&lt;br&gt;
A: Let's discuss the high-level design of the system in this discussion&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;These are some of the example questions you can ask to set the scope of the discussion. As you see now we know we need to focus on building the high-level design of Instagram. We don't need to consider users posting videos. We don't need to consider generating users' home feeds in an intelligent way. etc&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-2-system-interface-definition"&gt;
  &lt;/a&gt;
  Step 2: System Interface Definition
&lt;/h4&gt;

&lt;p&gt;Once we have the requirements finalized, the next step is to come up with a list of APIs we will need to build the system.&lt;/p&gt;

&lt;p&gt;You should define the different REST APIs and their contract to support the requirements given.&lt;/p&gt;

&lt;p&gt;For example in our Instagram example, here are some example APIs we will need:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;storePhoto(user_id, tags, image_url, user_location,…)&lt;br&gt;&lt;br&gt;
getPhoto(image_id)&lt;br&gt;&lt;br&gt;
likePhoto(image_id, user_id)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Of course these are example APIs. The APIs used in a real-world application are much more complicated.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-3-capacity-estimation-and-constraints"&gt;
  &lt;/a&gt;
  Step 3: Capacity Estimation and Constraints
&lt;/h4&gt;

&lt;p&gt;Your system should have enough storage and resources to handle the expected load and number of users who might use your system in 1 year from now, 5 years from now, etc.&lt;/p&gt;

&lt;p&gt;So it's important to estimate how much resources you need to allocate when designing a system to avoid running into problems in the future.&lt;/p&gt;

&lt;p&gt;If you have a database in your system design, cache in your system, the capacity estimation process generally involves calculating how much memory is used on a daily basis across all the databases and cache clusters. &lt;/p&gt;

&lt;p&gt;This gives us a good estimation of how much memory we will need in years from now.&lt;br&gt;
Capacity estimation also helps in the way we design our system so that it is horizontally and vertically scalable for higher capacity requirements in the future.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here's a calculation of how much storage is needed to store photos in our Instagram example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We have 100M users log in every day based on our assumption above&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let's assume 1M users upload an average of 2 photos every day&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;2M photos are uploaded every day&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This computes to 23 photos added every second&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let's assume an average photo size of 400KB&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Storage needed each day: 2M * 400KB =&amp;gt; 800 GB&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Storage needed for 5 years:&lt;br&gt;&lt;br&gt;
*800GB * 365 (days a year) * 5(years) ~= 1425TB&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Storage needed for 10years:&lt;br&gt;&lt;br&gt;
800GB * 365 (days a year) * 10(years) ~= 2850TB&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-4-highlevel-design"&gt;
  &lt;/a&gt;
  Step 4: High-Level Design
&lt;/h4&gt;

&lt;p&gt;At this point, it helps to list down all the high-level components that are involved in the system and how they interact with each other. &lt;/p&gt;

&lt;p&gt;It can be microservices, databases, caches, messaging queues, low-cost storage services, etc.&lt;/p&gt;

&lt;p&gt;For our Instagram example, we can create two separate microservices. One service is responsible for uploading the photos. Another service for retrieving the photos.&lt;/p&gt;

&lt;p&gt;What's the point of two separate microservices you may ask?&lt;/p&gt;

&lt;p&gt;The reason for this is the upload photos requests are generally lower than reading photos requests. So we can scale the services separately based on the traffic demands.&lt;/p&gt;

&lt;p&gt;We can even use low-cost storage to store photos and a SQL metadata database to store the details about a photo like uploaded_by, location, image_name, size, created_at, etc.&lt;/p&gt;

&lt;p&gt;You should be able to explain how the data would flow through these high-level components once you have this ready.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-5-database-schema%C2%A0design"&gt;
  &lt;/a&gt;
  Step 5: Database Schema Design
&lt;/h4&gt;

&lt;p&gt;In DB design we decide what kind of database suits our use case: A SQL or NoSQL and also the entities and the relationships between them.&lt;/p&gt;

&lt;p&gt;If we're building a banking application where the movement of money is involved we cannot use NoSQL databases that are eventually consistent in nature.&lt;/p&gt;

&lt;p&gt;Similarly, we cannot use a SQL database where data changes very frequently. In our Instagram example, we can use a NoSQL database to store metadata details for a post.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;Because a post may have properties like likes, image_url, created_at, created_by, etc. But in the future let's say we want to introduce other features like dislike, tags, etc, it can be easily done using a NoSQL DB without any schema changes.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-6-class%C2%A0design"&gt;
  &lt;/a&gt;
  Step 6: Class Design
&lt;/h4&gt;

&lt;p&gt;In class design, we come up with the low-level class entities which share the same responsibilities, relationships, operations, attributes, and semantics.&lt;/p&gt;

&lt;p&gt;We basically list down the classes, their attributes, methods, and their relationship with other classes.&lt;/p&gt;

&lt;p&gt;The way you're evaluated depends on whether you're using the right object-oriented concepts, principles, and design patterns. A good system is designed keeping all of these in mind: Abstraction, Encapsulation, Inheritance &amp;amp; Polymorphism.&lt;/p&gt;

&lt;p&gt;It's also important to learn about the &lt;strong&gt;SOLID principles&lt;/strong&gt; (&lt;strong&gt;The First 5 Principles of Object-Oriented Design&lt;/strong&gt;). These principles will help you design software that is easier to maintain and extend as it grows.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;S - Single-responsibility Principle&lt;/li&gt;
&lt;li&gt;O - Open-closed Principle&lt;/li&gt;
&lt;li&gt;L - Liskov Substitution Principle&lt;/li&gt;
&lt;li&gt;I - Interface Segregation Principle&lt;/li&gt;
&lt;li&gt;D - Dependency Inversion Principle&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#step-7%C2%A0caching"&gt;
  &lt;/a&gt;
  Step 7: Caching
&lt;/h4&gt;

&lt;p&gt;A cache is a high-speed, in-memory data storage layer to store data for faster access in the future. It's a means to improve the overall system performance. Caching is important in any system that needs to scale. &lt;/p&gt;

&lt;p&gt;We basically cache the data that is frequently used. Doing this will result in applications taking lesser time compared to accessing the data from a database every time.&lt;/p&gt;

&lt;p&gt;In our Instagram example, we can cache the metadata of photos like created_by, location, created_at, etc since these parameters are never going to change for a given photo. Other parameters like comments, likes, etc cannot be cached since they are changing frequently.&lt;/p&gt;

&lt;p&gt;The moment we start using cache in our design we also need to think about the eviction policies. Since caches are costlier than database storage we have to keep a check on the amount of data we store in a cache. So cache eviction becomes important.&lt;/p&gt;

&lt;p&gt;There are many eviction policies like LRU (Least Recently Used), FIFO (First In First Out), LFU (Least Frequently Used), etc.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-8-data-partitioningsharding"&gt;
  &lt;/a&gt;
  Step 8: Data Partitioning/Sharding
&lt;/h4&gt;

&lt;p&gt;Often times it happens that all the data in our application cannot be stored on a single database server. In cases like these, we need to come up with strategies to store the data on multiple database servers.&lt;/p&gt;

&lt;p&gt;Here we basically split the large set of data into multiple chunks (logical partitions) and we store these chunks on multiple nodes.&lt;/p&gt;

&lt;p&gt;Sharding is a good technique to scale a growing application.&lt;/p&gt;

&lt;p&gt;There are many techniques to partition data:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Range based partitioning&lt;/li&gt;
&lt;li&gt;Hash-based partitioning&lt;/li&gt;
&lt;li&gt;Directory-based partitioning&lt;/li&gt;
&lt;li&gt;Vertical partitioning etc&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You should read about these in order to understand which partitioning schemes are suitable in which scenarios.&lt;/p&gt;

&lt;p&gt;This 8 steps approach gives you a framework to approach any system design question. But remember that the interviewer may be interested in any one of these steps in which case you should be able to focus only on that step and figure out the details.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#more-tips"&gt;
  &lt;/a&gt;
  More Tips:
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#system-before%C2%A0scale"&gt;
  &lt;/a&gt;
  System before scale
&lt;/h4&gt;

&lt;p&gt;Many candidates try to focus on building a scalable system before even they have a design for a working system. Focus on building the system first and then think about scaling it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#start-highlevel-and-then-drill%C2%A0down"&gt;
  &lt;/a&gt;
  Start High-level and then drill down
&lt;/h4&gt;

&lt;p&gt;Start with writing down the high-level components we need for the system we are building. Then drill down on any of the lower-level components the interviewer suggests. &lt;/p&gt;

&lt;p&gt;This keeps your mind clear and helps you design a better system during the interview.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#mention-all-the-assumptions-youre%C2%A0making"&gt;
  &lt;/a&gt;
  Mention all the assumptions you're making
&lt;/h4&gt;

&lt;p&gt;You should mention all the assumptions you're making during the interview. It's important that you and the interviewer are on the same page.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#consider-both-function-and-nonfunctional-requirements"&gt;
  &lt;/a&gt;
  Consider both function and non-functional requirements
&lt;/h4&gt;

&lt;p&gt;Keep both functional and non-functional requirements in mind when designing the system.&lt;/p&gt;

&lt;p&gt;Sometimes it becomes difficult to support non-functional requirements like consistency, availability, data durability, etc.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#core-algorithm"&gt;
  &lt;/a&gt;
  Core Algorithm
&lt;/h4&gt;

&lt;p&gt;Some systems need a core algorithm to be implemented for the system to work. For example, if you want to designs a TinyURL-like system, you need to come up with an algorithm to generate the tiny URLs for a given long URL.&lt;/p&gt;

&lt;p&gt;Not many system design questions need a complex algorithm to be implemented.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#design-for-the-right%C2%A0scale"&gt;
  &lt;/a&gt;
  Design for the right scale
&lt;/h4&gt;

&lt;p&gt;The same system can be designed in completely different ways based on the scale needed. So, clarify the scale you're designing the system for at the beginning of the discussion.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#recommended-courses-to-prepare-for-system-design-interviews"&gt;
  &lt;/a&gt;
  Recommended Courses To Prepare For System Design Interviews:
&lt;/h3&gt;

&lt;p&gt;Here are the best courses that I recommend for preparing for System Design interviews:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/courses/grokking-the-system-design-interview?aff=xmn2"&gt;Grokking the System Design Interview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/courses/grokking-the-object-oriented-design-interview?aff=xmn2"&gt;Grokking the Object Oriented Design Interview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCn1XnDWhsLS5URXTi5wtFTA"&gt;Tech Dummies Narendra L&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLMCXHnjXnTnvo6alSjVkgxV-VH6EPyvoX"&gt;System Design by Gaurav Sen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLAC2AM9O1C5KioUMeH9qIjbAV_RMmX8rd"&gt;Low Level Design | The Code Mate&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Think of the System Design interview as an open-ended discussion with your colleague.&lt;/li&gt;
&lt;li&gt;You cannot possibly come up with the best possible solution for a system in the given 1–1.5 hours.&lt;/li&gt;
&lt;li&gt;Clarify all the requirements and set the scope for the discussion.&lt;/li&gt;
&lt;li&gt;Make sure you and the interviewer are on the same page throughout the discussion.&lt;/li&gt;
&lt;li&gt;Learn how to estimate the data capacity required in the next 5–10 years and design the system for the capacity expected.&lt;/li&gt;
&lt;li&gt;Mention all the assumptions you are making during the interview.&lt;/li&gt;
&lt;li&gt;Given a problem statement, try to think of all the high-level components (services, databases, caches, message queues, etc) first. Then figure out the lower-level details of the system.&lt;/li&gt;
&lt;li&gt;It is important to learn how to design classes, databases, and APIs.&lt;/li&gt;
&lt;li&gt;It's is important to learn Object-Oriented and SOLID principles for low-level design interviews.&lt;/li&gt;
&lt;li&gt;The interviewer wants to know how you approach a given problem and the thought process behind it. As long as you are able to justify why a component is designed in a certain way, you're good.&lt;/li&gt;
&lt;li&gt;Practice solving system design problems. That's the only way to do well in this round.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;The article was originally published on my blog. You can find it &lt;a href="https://sunilkumarc.in/8-steps-guide-to-ace-a-system-design-interview"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can connect with me on &lt;a href="https://twitter.com/sunilc_"&gt;twitter&lt;/a&gt; where I usually share my knowledge more frequently on topics like Software Development, freelancing, creating multiple passive income streams etc.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>systems</category>
      <category>architecture</category>
      <category>cloud</category>
    </item>
  </channel>
</rss>
