<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>15 reasons why you should learn JavaScript right now</title>
      <author>Coders</author>
      <pubDate>Mon, 18 Oct 2021 04:51:40 +0000</pubDate>
      <link>https://dev.to/codingmania/15-reasons-why-you-should-learn-javascript-right-now-3ej9</link>
      <guid>https://dev.to/codingmania/15-reasons-why-you-should-learn-javascript-right-now-3ej9</guid>
      <description>&lt;p&gt;There are two reasons why it’s sometimes hard to make a choice; either there are too few options to choose from, or there are too many. When it comes to programming languages, there is an embarrassment of riches, which in turn can cause mental gridlock. There’s Python, Java, JavaScript, C/CPP, PHP, Swift, C#, Ruby, Objective-C, and SQL, and that’s not even the full list! How do you choose?&lt;/p&gt;
&lt;p&gt;Now, bear in mind that as far as programmers go, there’s no such thing as knowing too many languages. A programmer with a grasp of many languages is a programmer who is highly marketable and very much in demand. Upskilling is always a smart way to go. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/15-reasons-why-you-should-learn-javascript-right-now/&amp;amp;ved=2ahUKEwjq3LetlNPzAhWCjeYKHXtzBaUQFnoECAQQBQ&amp;amp;usg=AOvVaw2jcX34baRnSUligpWiA29Q&amp;amp;cshid=1634532657525"&gt;15 reasons why you should learn JavaScript right now&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>The Complete Ethical Hacking Course [Free]</title>
      <author>Coders</author>
      <pubDate>Mon, 18 Oct 2021 04:47:07 +0000</pubDate>
      <link>https://dev.to/codingmania/the-complete-ethical-hacking-course-free-o3a</link>
      <guid>https://dev.to/codingmania/the-complete-ethical-hacking-course-free-o3a</guid>
      <description>&lt;p&gt; &lt;/p&gt;
&lt;h4&gt;What you’ll learn&lt;/h4&gt;
&lt;p&gt;Complete Ethical Hacking Course 2021: Beginner to Advanced!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setting up your Hacking Lab: Kali Linux and Virtual Machine.&lt;/li&gt;
&lt;li&gt;Practical Ethical hacking skill.&lt;/li&gt;
&lt;li&gt;Different types of phases of hacking.&lt;/li&gt;
&lt;li&gt;will learn about Kali Linux hackers operating system.&lt;/li&gt;
&lt;li&gt;Complete understanding of all the attacks.&lt;/li&gt;
&lt;li&gt;Hack and secure server and client operating system.&lt;/li&gt;
&lt;li&gt;Will create undetectable backdoors.&lt;/li&gt;
&lt;li&gt;learn to crack wifi password of any security level WEP, WPA, WPA2.&lt;/li&gt;
&lt;li&gt;All the attacks are performed live and safest environment.&lt;/li&gt;
&lt;li&gt;Gathering information about the target.&lt;/li&gt;
&lt;li&gt;Learn to secure and protect any network from hackers and loss of data.&lt;/li&gt;
&lt;li&gt;Server-side attack.&lt;/li&gt;
&lt;li&gt;Client-side attack.&lt;/li&gt;
&lt;li&gt;Networking basics.&lt;/li&gt;
&lt;li&gt;Learn to gain access to a router in various ways. &lt;/li&gt;
&lt;/ul&gt;Download: &lt;b&gt;&lt;a href="https://course.codelivly.com/the-complete-ethical-hacking-course-free/"&gt;The Complete Ethical Hacking Course [Free] &lt;/a&gt;&lt;/b&gt;&lt;b&gt;&lt;a href="https://course.codelivly.com/the-complete-ethical-hacking-course-free/"&gt;&lt;br&gt;&lt;/a&gt;&lt;/b&gt;&lt;br&gt;&lt;br&gt;

</description>
    </item>
    <item>
      <title>Tips to become a great programmer</title>
      <author>Coders</author>
      <pubDate>Mon, 18 Oct 2021 04:40:49 +0000</pubDate>
      <link>https://dev.to/codingmania/tips-to-become-a-great-programmer-4m80</link>
      <guid>https://dev.to/codingmania/tips-to-become-a-great-programmer-4m80</guid>
      <description>&lt;p&gt; A good programmer is someone who always looks both ways before crossing a one-way street. ~Doug Linder&lt;/p&gt;

&lt;p&gt;Let me start by saying that I do not consider myself to be a competent coder. I consider my coding abilities to be mediocre, and I am still learning and have a long way to go before I am even remotely satisfied with them.Yes, I am better at programming than a lot of others, but that is just because they are lazy and choose to sit about idle all day instead of programming. Their dreadful abilities make my less dreadful abilities appear fantastic.&lt;/p&gt;

&lt;p&gt;So most of the tips I will mention below are lessons learnt from failed endeavours, they are what I have wanted to be and I am not. So lets dive in. &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/tips-to-become-a-great-programmer/"&gt;Tips to become a great programmer&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>10 Awesome 😎 Github Repos Every Web Developer Should Know</title>
      <author>Coders</author>
      <pubDate>Mon, 18 Oct 2021 04:40:09 +0000</pubDate>
      <link>https://dev.to/codingmania/10-awesome-github-repos-every-web-developer-should-know-4hkg</link>
      <guid>https://dev.to/codingmania/10-awesome-github-repos-every-web-developer-should-know-4hkg</guid>
      <description>&lt;p&gt;&lt;span&gt;Here I list 10 excellent JavaScript based GitHub resources that will help you to understand the language better and help you to write clean code. This list is based on my personal preference. &lt;/span&gt;&lt;/p&gt;
&lt;span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;ReadUI&amp;amp;quot More: &lt;b&gt;&lt;a href="https://news.google.com/articles/CAIiEHRNZDbK-6L3wLhhd1mvgX8qGQgEKhAIACoHCAow7-ynCzDc978DMKOIlgc?hl=en-US&amp;amp;gl=US&amp;amp;ceid=US%3Aen"&gt;10 Awesome Github Repos Every Web Developer Should Know&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;

</description>
    </item>
    <item>
      <title>Simplest way to compare two array in JS</title>
      <author>Shuvo</author>
      <pubDate>Mon, 18 Oct 2021 04:12:10 +0000</pubDate>
      <link>https://dev.to/0shuvo0/simplest-way-to-compare-two-array-in-js-4gio</link>
      <guid>https://dev.to/0shuvo0/simplest-way-to-compare-two-array-in-js-4gio</guid>
      <description>&lt;p&gt;In case of string we can simply use &lt;strong&gt;==&lt;/strong&gt; or &lt;strong&gt;===&lt;/strong&gt; to see if they are same but we can't use those to see in two arrays are similar or in other words they have same elements.&lt;br&gt;
So this wont work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;array2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what if we convert our array to string? Then you can use the comparison operator. This makes the task very easy. We can sort an array using &lt;strong&gt;toString&lt;/strong&gt; method eg. &lt;code&gt;array1.toString()&lt;/code&gt; or we can use this hack&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//logs 1,2,3,4,5&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;//logs string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So basically if we try to concatenate string(empty string in this case) to an array the array will be converted to a string.&lt;br&gt;
so now we can simply use the arrays as strings and compare them&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;array2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also if you want it to work with arrays where the elements are not in order you can first sort them. Let's create a utility function for that&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;compareArr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;compareArr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;array2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// returns true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Server virtualization for roadrunners | Hypervisor</title>
      <author>Tharun Shiv</author>
      <pubDate>Mon, 18 Oct 2021 04:09:43 +0000</pubDate>
      <link>https://dev.to/developertharun/server-virtualization-for-roadrunners-hypervisor-3389</link>
      <guid>https://dev.to/developertharun/server-virtualization-for-roadrunners-hypervisor-3389</guid>
      <description>&lt;h2&gt;
  &lt;a href="#listen-to-the-episode"&gt;
  &lt;/a&gt;
  Listen to the episode
&lt;/h2&gt;

&lt;p&gt;&lt;small&gt;Open on Spotify to listen to the complete episode&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/60cYMUjKPby1LaN0LgDicB"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-yummy-analogy"&gt;
  &lt;/a&gt;
  A Yummy Analogy
&lt;/h2&gt;

&lt;p&gt;Imagine you have ordered your favorite pizza of large size. You see, the pizza is divided into 8 slices. Assuming you are kind enough to share the pizza with 3 of your friends, each of you gets 2 slices each. Now let’s observe the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Cost savings: You can buy one whole pizza, and share it among 4 people&lt;/li&gt;
&lt;li&gt;Isolation: What you do with your slice of pizza has no effect whatsoever on your friend’s slice.&lt;/li&gt;
&lt;li&gt;Efficient pizza sharing: If one of your friends wants to eat 3 slices, and another one just wants one, it can be done.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Compare it with buying a large pizza that you are not able to eat all by yourself and 5 pieces of it going to waste, or a plate of dessert that you have to share with your friends where anyone can eat as much as they want according to their speeds ( which is unfair 😜 ). In these two scenarios, we see that there is no cost savings, no isolation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-virtualization"&gt;
  &lt;/a&gt;
  Introducing Virtualization
&lt;/h2&gt;

&lt;p&gt;I know the article made you hungry, let’s get back to the topic.&lt;/p&gt;

&lt;p&gt;You need to know two basic things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Host machine: Imagine a huge machine on which multiple other smaller machines will be created&lt;/li&gt;
&lt;li&gt;Guest machine: The multiple smaller machines that are created on top of the huge machine, that uses the resources provided by the huge machine is a guest machine.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Virtualization creates a software representation of the underlying hardware resources on a host and shares it among the virtual machines that are created on top of it. Each virtual machine has its own operating system and applications, thereby being able to utilize the resources of a host machine by its guest machines in an isolated manner.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A virtual machine ( VM ) is an isolated guest machine that has it’s own operating system and applications. Each VM is completely independent of other VMs running on the same host machine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you remember our x86 vs x64 architecture systems blog post, the x86 systems are not capable of running more than one operating system or application at a time. The concept of multi-processing came up only with the x64 systems introducing the dual-core, quad-core so on. Because of this reason, the earlier datacenters which were based on x86 systems had to increase the number of servers, whereas the server utilization remained underutilized.&lt;/p&gt;

&lt;p&gt;Today, this is not the scenario. Virtualization has gone beyond just server virtualization and has reached network virtualization, disk virtualization, and so on. But how is this possible?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hypervisor-the-hero-of-our-story"&gt;
  &lt;/a&gt;
  Hypervisor — The hero of our story
&lt;/h2&gt;

&lt;p&gt;The concept of Virtual Machines is made possible only because of the thin layer of software known as the Hypervisor, which is installed on the host machine. The hypervisor enables the virtualization of resources and isolation between the Virtual machines that are created on the same host. This enables efficient and transparent utilization of data center resources.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#types-of-hypervisors"&gt;
  &lt;/a&gt;
  Types of Hypervisors:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Type one hypervisors ( Bare-metal hypervisors )&lt;/li&gt;
&lt;li&gt;Type two hypervisors ( Hosted hypervisors )&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#type-one-hypervisors"&gt;
  &lt;/a&gt;
  Type one hypervisors
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ny4mrBft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m399qk95pzjbdy1m26tu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ny4mrBft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m399qk95pzjbdy1m26tu.png" alt="type one hypervisor"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Type 1 hypervisors as depicted above lay directly above the physical server and host the virtual machines on top of them. They are also known as bare-metal hypervisors. It has shown far better performance than type two hypervisors.&lt;/p&gt;

&lt;p&gt;Dynamic resource allocation in Type 1 hypervisor allows VMs to consume resources only as much as they need to be fully functional, even if you allocate more than that. For example, if you allocate 32GB of RAM to a VM, it will not reserve all 32GB of RAM to the VM, but only that resource which it needs to fully function. ( This is not the case with Type 2 hypervisors ).&lt;/p&gt;

&lt;p&gt;Example: The open-source KVM ( Kernel-based Virtual Machine )&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#type-two-hypervisors"&gt;
  &lt;/a&gt;
  Type two hypervisors
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zzH_2SN1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/91p1qeopnihohi3l8rw8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zzH_2SN1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/91p1qeopnihohi3l8rw8.png" alt="Type two hypervisors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Type 2 hypervisors as depicted above have an operating system on top of the physical server layer, over which a type two hypervisor is installed. So, there is a host operating system ( a software layer ) that comes in between the physical server and the type two hypervisor.&lt;/p&gt;

&lt;p&gt;There is no dynamic resource allocation facility available in type two hypervisors. For example, if you allocate 32GB of RAM to a VM running on a type two hypervisor, it will reserve all 32GB of RAM, even though the VM could be using only a fraction of it, unlike type one hypervisors.&lt;/p&gt;

&lt;p&gt;Example: Oracle VM VirtualBox&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-using-a-hypervisorvirtualization"&gt;
  &lt;/a&gt;
  Benefits of using a hypervisor/virtualization
&lt;/h2&gt;

&lt;p&gt;As we already saw the benefits of sharing a pizza, we can conclude the below benefits:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Cost benefits: There will be huge savings when we allocate just the resources that a VM needs, instead of over-provisioning anywhere, thereby leading to a reduction in the number of servers that are needed and more efficient use of data center.&lt;/li&gt;
&lt;li&gt;Efficient resource utilization: When the resources are shared transparently with the guest VMs, each and every GB of resource can be planned and utilized efficiently, and very few resources will go non-utilized.&lt;/li&gt;
&lt;li&gt;Easier management: With the tools that the hypervisors provide, it becomes easy to manage the VMs, migrate the VMs, have failover for VMs, dynamically allocate resources to the VM, and more with lesser effort.&lt;/li&gt;
&lt;li&gt;Isolation between VMs: Even though the VMs are hosted on the same host, the applications running on one VM cannot affect any other VM running on the same host even if one of the VMs crashes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can find more articles here: &lt;a href="https://www.tharunshiv.com"&gt;https://www.tharunshiv.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Roadrunners is a series that is aimed at delivering concepts as precisely as possible. Here, a roadrunner is referred to as a person who does things super fast &amp;amp; efficiently. Are you a roadrunner?&lt;/p&gt;

&lt;p&gt;Thank you&lt;/p&gt;

</description>
      <category>systems</category>
      <category>linux</category>
      <category>beginners</category>
      <category>devops</category>
    </item>
    <item>
      <title>10 VS Code extensions every Frontend Developer should use</title>
      <author>Coders</author>
      <pubDate>Mon, 18 Oct 2021 03:56:56 +0000</pubDate>
      <link>https://dev.to/codingmania/10-vs-code-extensions-every-frontend-developer-should-use-5073</link>
      <guid>https://dev.to/codingmania/10-vs-code-extensions-every-frontend-developer-should-use-5073</guid>
      <description>&lt;p&gt;Hello everyone, my name is John and I'm a frontend developer. In this blog post, I would like to share 10 VS code extensions that every frontend developer should use. The purpose of using these extensions is to write faster, cleaner, and more consistent code. Let's Jump in! &lt;/p&gt;
&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/10-vs-code-extensions-every-frontend-developer-should-use/"&gt;10 VS Code extensions every Frontend Developer should use&lt;/a&gt;&lt;/b&gt;

</description>
    </item>
    <item>
      <title>Understanding Constructor Functions in JavaScript </title>
      <author>Stacy Daniel </author>
      <pubDate>Mon, 18 Oct 2021 03:00:32 +0000</pubDate>
      <link>https://dev.to/stacytech/understanding-constructor-functions-in-javascript-3eal</link>
      <guid>https://dev.to/stacytech/understanding-constructor-functions-in-javascript-3eal</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-a-constructor-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is a constructor ?&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;In Javascript, a &lt;strong&gt;constructor&lt;/strong&gt; is a special function which creates an instance of a class which is typically called an "object". They are technically regular functions, but What makes them special is that they are always invoked with a powerful operator in JavaScript called the &lt;strong&gt;new&lt;/strong&gt; operator. Constructors provide the means to create as many objects as needed, whilst attaching properties and behaviors to them as required. As convention, the constructor function name usually starts with a capital letter, to be easily recognizable in code. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-happens-when-a-constructor-gets-called-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What happens when a constructor gets called ?&lt;/strong&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#when-a-constructor-is-invoked"&gt;
  &lt;/a&gt;
  When a Constructor is invoked:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A new empty object is created. &lt;/li&gt;
&lt;li&gt;The Javascript keyword  &lt;strong&gt;this&lt;/strong&gt;  starts to refer to the newly created object.&lt;/li&gt;
&lt;li&gt;The value of the newly created object &lt;strong&gt;this&lt;/strong&gt; is then returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Example&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;here is an example of a Bird constructor, which will allow us to create new objects:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     function Bird() {
       this.name = "Tweety";
       this.color = "blue";
     }      

  let blueBird = new Bird();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;this&lt;/strong&gt; &lt;code&gt;inside the constructor always refers to the object being created.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When calling a constructor, the &lt;strong&gt;new&lt;/strong&gt; operator is used to   tell Javascript to create a new instance of the Bird constructor that is called blueBird. &lt;code&gt;Note that the constructor function is not changed, the newly created new context is changed!&lt;/code&gt; Without the new operator, &lt;strong&gt;this&lt;/strong&gt; inside the constructor would not point to the newly created object, giving unexpected results. when a constructor is invoked without the new operator it is invoked as a regular JavaScript function. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Summary&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Note the main purpose of constructors are to implement reusable object creation code. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Constructor functions are regular functions but with a common agreement to defined them with the first letter capitalized.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Constructors use the keyword &lt;strong&gt;this&lt;/strong&gt; to set properties of the object they will create. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Constructor functions can be used to create multiple similar objects.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading this article, I hope you found it useful. Happy Coding 😀        &lt;/p&gt;

</description>
    </item>
    <item>
      <title>18 amazing 🤩 GitHub repositories that will help you 🪄 make a Beautiful Project</title>
      <author>Coders</author>
      <pubDate>Mon, 18 Oct 2021 02:53:23 +0000</pubDate>
      <link>https://dev.to/codingmania/18-amazing-github-repositories-that-will-help-you-make-a-beautiful-project-5ap0</link>
      <guid>https://dev.to/codingmania/18-amazing-github-repositories-that-will-help-you-make-a-beautiful-project-5ap0</guid>
      <description>&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Today I would like to give examples of good GitHub repositories that will help you implement complex animations, as well as useful functions in your projects.&lt;/p&gt;
&lt;p&gt;So let's get started &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/10-awesome-github-repos-every-web-developer-should-know/&amp;amp;ved=2ahUKEwiw1e_qpqbzAhU78HMBHVvBAWkQFnoECBAQAQ&amp;amp;usg=AOvVaw1YdY91hlP3suK6HGMF0MXW"&gt;18 amazing 🤩 GitHub repositories that will help you 🪄 make a Beautiful Project&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How To Display Hyperlinks Without An Underline In HTML</title>
      <author>Coder</author>
      <pubDate>Mon, 18 Oct 2021 02:51:38 +0000</pubDate>
      <link>https://dev.to/codehacker/how-to-display-hyperlinks-without-an-underline-in-html-lib</link>
      <guid>https://dev.to/codehacker/how-to-display-hyperlinks-without-an-underline-in-html-lib</guid>
      <description>&lt;p&gt; &lt;span&gt;&lt;span&gt;Looking for a way to remove the underline in hyperlinks in HTML then you are at the right place because today I will show you how to display hyperlinks without an underline in HTML.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;It is just going to be one line of code which we are going to use it is going to be easy and simple so follow up with me.&lt;/p&gt;
&lt;span id="elementor-toc__heading-anchor-0"&gt;&lt;/span&gt;&lt;h2&gt;&lt;span&gt;Display Hyperlinks Without An Underline In HTML&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;As I have said it is very easy to remove the underline from the hyperlink which is automatically generated when you use the tag below is the example of how it looks.&lt;/p&gt;
&lt;p&gt;To remove that underline from the hyperlink we need to use CSS which is a styling language which makes HTML beautiful so put it in action.&lt;/p&gt;
&lt;span id="elementor-toc__heading-anchor-1"&gt;&lt;/span&gt;&lt;h3&gt;&lt;span&gt;Removing underline from hyperlink with internal CSS&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;To remove the underline from the hyperlink you can use the below code instead of using the regular hyperlink tag.&lt;/p&gt;
&lt;pre class="highlight-height  language-javascript"&gt;&lt;code&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;a style&lt;span class="token operator"&gt;=&lt;/span&gt;&lt;span class="token string"&gt;"text-decoration:none"&lt;/span&gt; href&lt;span class="token operator"&gt;=&lt;/span&gt;&lt;span class="token string"&gt;"&lt;a href="https://coderzway.com"&gt;https://coderzway.com&lt;/a&gt;"&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt;Coderzway&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;a&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;Copy&lt;p&gt;As you can see it is bit different from the regular tag because we have used CSS in the anchor tag this CSS &lt;span&gt;style=”text-decoration:none”. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This is inline css which we have used inside the html tag the better way for this is to use the external css in a seperate file.&lt;/p&gt;
&lt;span id="elementor-toc__heading-anchor-2"&gt;&lt;/span&gt;&lt;h3&gt;&lt;span&gt;Removing Underline from hyperlink with external CSS&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;We can create a seperate class for removing the underline and use it across the html instead of adding the long inline css and another option is use the global tag in CSS which will remove all the underline from the hyperlinks.&lt;/p&gt;
&lt;p&gt;I will show you both methods you can use any one of the method you find easy and simple so let’s how to do it.&lt;/p&gt;
&lt;span id="elementor-toc__heading-anchor-3"&gt;&lt;/span&gt;&lt;h4&gt;Using CSS class to remove underline from hyperlink&lt;/h4&gt;
&lt;pre class="highlight-height  language-css"&gt;&lt;code&gt;&lt;span class="token selector"&gt;.no-underline&lt;/span&gt;&lt;span class="token punctuation"&gt;{&lt;/span&gt;&lt;br&gt;
    &lt;span class="token property"&gt;text-decoration&lt;/span&gt;&lt;span class="token punctuation"&gt;:&lt;/span&gt;none&lt;span class="token punctuation"&gt;;&lt;/span&gt;&lt;br&gt;
&lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;Copy&lt;p&gt;You can use the above class in the anchor tag and it will remove the underline from the hyperlink. You can create this class in the a seperate css file and remember to link this css file inside the head tag in your html file by using the below tag&lt;/p&gt;
&lt;pre class="highlight-height  language-html"&gt;&lt;code&gt;&lt;span class="token tag"&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span&gt;rel&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"&lt;/span&gt;stylesheet&lt;span&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span&gt;href&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"&lt;/span&gt;styles.css&lt;span&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;Copy&lt;span id="elementor-toc__heading-anchor-4"&gt;&lt;/span&gt;&lt;h4&gt;Using global CSS to remove underline from all hyperlinks&lt;/h4&gt;
&lt;pre class="highlight-height  language-css"&gt;&lt;code&gt;&lt;span class="token selector"&gt;*&lt;/span&gt;&lt;span class="token punctuation"&gt;{&lt;/span&gt;&lt;br&gt;
    &lt;span class="token property"&gt;text-decoration&lt;/span&gt;&lt;span class="token punctuation"&gt;:&lt;/span&gt;none&lt;span class="token punctuation"&gt;;&lt;/span&gt;&lt;br&gt;
&lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;Copy&lt;p&gt;If you don’t know about this global CSS property then everything we put inside it will apply to all the elements of the HTML so we set text decoration to none so it will remove the underlines from the hyperlinks you don’t have to manually add the class or css to each anchor tag.&lt;/p&gt;
&lt;p&gt;Another way of doing this is instead of adding css to the global tag we can just set the css to all the anchor tags like this&lt;/p&gt;
&lt;pre class="highlight-height  language-css"&gt;&lt;code&gt;&lt;span class="token selector"&gt;a&lt;/span&gt;&lt;span class="token punctuation"&gt;{&lt;/span&gt;&lt;br&gt;
    &lt;span class="token property"&gt;text-decoration&lt;/span&gt;&lt;span class="token punctuation"&gt;:&lt;/span&gt;none&lt;span class="token punctuation"&gt;;&lt;/span&gt;&lt;br&gt;
&lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;Copy&lt;p&gt;Now this will only remove underline from the hyperlink or anchor tag it will not intefere with the CSS of other HTML elements this is a better approach you can use.&lt;/p&gt;
&lt;p&gt;If you are looking for more HTML solutions or guides then you can always find solutions on the &lt;a href="https://www.w3schools.com/html/default.asp" rel="noopener"&gt;&lt;span&gt;w3schools website&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;span&gt;&lt;span id="elementor-toc__heading-anchor-5"&gt;&lt;/span&gt;&lt;/span&gt;&lt;h2&gt;&lt;span&gt;Summary&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;These were all the methods which you can use to remove an underline in a hyperlink you can use anyone which you find suitable and easy for you. I hope you find this guide helpful and you found what you were looking for .&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Want more solutions and guides like this then join our coding community on Instagram to get  updates and more – &lt;/span&gt;&lt;b&gt;&lt;a href="http://instagram.com/codelivly"&gt;&lt;span&gt;Join &lt;/span&gt;Us at Instagram&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
      <category>html</category>
    </item>
    <item>
      <title>10 Magical PHP Pro Tips &amp; Tricks</title>
      <author>Coders</author>
      <pubDate>Mon, 18 Oct 2021 02:25:32 +0000</pubDate>
      <link>https://dev.to/codingmania/10-magical-php-pro-tips-tricks-1fp1</link>
      <guid>https://dev.to/codingmania/10-magical-php-pro-tips-tricks-1fp1</guid>
      <description>&lt;p&gt;PHP programming has climbed rapidly since its humble beginnings in 1995. Since then, PHP has become the most popular programming language for Web applications. Many popular websites are powered by PHP, and an overwhelming majority of scripts and Web projects are built with the popular language.&lt;/p&gt;
&lt;p&gt;Because of PHP’s huge popularity, it has become almost impossible for Web developers not to have at least a working knowledge of PHP. This tutorial is aimed at people who are just past the beginning stages of learning PHP and are ready to roll up their sleeves and get their hands dirty with the language. Listed below are 10 excellent techniques that PHP developers should learn and use every time they program. These tips will speed up proficiency and make the code much more responsive, cleaner and more optimized for performance. &lt;/p&gt;

&lt;p&gt;Read More : &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/10-magical-php-tips-tricks/&amp;amp;ved=2ahUKEwjLi93W4cbzAhU-4jgGHS7XCvcQFnoECAYQAQ&amp;amp;usg=AOvVaw1fVqnaHNRSL8dTmlcxHzSr"&gt;10 Magical PHP Tips &amp;amp; Tricks &lt;/a&gt;&lt;/b&gt;&lt;/p&gt;



</description>
    </item>
    <item>
      <title>Optimize Renders in React.js Function Components</title>
      <author>Garrick Crouch</author>
      <pubDate>Mon, 18 Oct 2021 01:55:53 +0000</pubDate>
      <link>https://dev.to/localpathcomp/optimize-renders-in-reactjs-function-components-322h</link>
      <guid>https://dev.to/localpathcomp/optimize-renders-in-reactjs-function-components-322h</guid>
      <description>&lt;p&gt;You may come across issues in react where transitions and animations fire more than you'd like and in some cases it may be hard to control those renders, especially when dealing with libraries. In my case I had chart animations that would fire when the component was rendered and there wasn't any easy way to throttle that or prevent the duplicate transitions.&lt;/p&gt;

&lt;p&gt;The docs point out that&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This method only exists as a performance optimization. Do not rely on it to “prevent” a render, as this can lead to bugs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Speaking of &lt;a href="https://reactjs.org/docs/react-api.html#reactmemo"&gt;https://reactjs.org/docs/react-api.html#reactmemo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is a memoization technique not afforded by component should update since we're not using class components. To the react docs point it can be buggy, but in my case it works wonders and prevents rampant animations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;options&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;chartData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setChartData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// some advanced filtering for the chart&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[]).&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Chart&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;chartData&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this hypothetical chart component, if the parent would render, well the myComponent would rerender, which normally isn't an issue, but in our case the chart has transitions on it that trigger on every render and we cannot modify that API because it's a 3rd party. This will provide and easy way for us to still use hooks and only have the myComponent to render once, which will run our filter logic on the data and allow a performance optimization as well possibly.&lt;/p&gt;

&lt;p&gt;Important note: hooks still work as you'd expect in a memoized component so you can use them and get renders on state change.&lt;/p&gt;

&lt;p&gt;I think the majority use case is the intended of the react team which is performance for unnecessary renders, but this works perfectly for throttling renders in the case of UI side effects.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
