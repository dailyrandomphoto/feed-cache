<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top 20 JavaScript tips and tricks to increase your Speed and Efficiency</title>
      <author>Coder</author>
      <pubDate>Thu, 09 Sep 2021 02:32:29 +0000</pubDate>
      <link>https://dev.to/coderzz/top-20-javascript-tips-and-tricks-to-increase-your-speed-and-efficiency-bap</link>
      <guid>https://dev.to/coderzz/top-20-javascript-tips-and-tricks-to-increase-your-speed-and-efficiency-bap</guid>
      <description>&lt;p&gt;¬†&lt;/p&gt;
&lt;h3&gt;Convenient and useful techniques to reduce the lines of code and pace up your Dev Work!&lt;/h3&gt;
&lt;p&gt;In our daily tasks, we get to write functions such as sorting, searching, finding unique values, passing parameters, swapping values etc, so here I present my list of shorthand techniques to write all of them as a Pro!‚úåüèª&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WgxQe1g9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh2m04o3fgw3a6i8bzha.jpg"&gt;&lt;img alt="Increase Your Performance" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ftNfvGUp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--WgxQe1g9--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh2m04o3fgw3a6i8bzha.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;JavaScript is truly an awesome languageüíõ to learn and work with. And there can be more than one approach to reach to the same solution for given problem. In this article, we will discuss only the quickest ones.üöÄ&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;These approaches will definitely help you in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reducing the number of LOC(lines of code),&lt;/li&gt;
&lt;li&gt;Coding Competitions,&lt;/li&gt;
&lt;li&gt;Hackathons or&lt;/li&gt;
&lt;li&gt;Other time bound tasks.‚è±&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of these JavaScript Hacks uses techniques from ECMAScript6(ES2015) onwards, though the latest version is ECMAScript11(ES2020).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: All below tricks have been tested on the Console of Google Chrome.¬†&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;br&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/top-20-javascript-tips-and-tricks/"&gt;Top 20 JavaScript tips and tricks to increase your Speed and Efficiency¬†&lt;/a&gt;&lt;/b&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;br&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;br&gt;&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>EKS Anywhere - Running EKS Cluster on your own infrastructure</title>
      <author>Sivamuthu Kumar</author>
      <pubDate>Thu, 09 Sep 2021 02:24:23 +0000</pubDate>
      <link>https://dev.to/aws-builders/eks-anywhere-running-eks-cluster-on-your-own-infrastructure-1n19</link>
      <guid>https://dev.to/aws-builders/eks-anywhere-running-eks-cluster-on-your-own-infrastructure-1n19</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-eks-anywhere"&gt;What is EKS Anywhere?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-does-eks-anywhere-solve"&gt;What does EKS Anywhere solve?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#announcement"&gt;Announcement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#first-look-"&gt;First Look üëÄ&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#installing-eks-anywhere-local"&gt;Installing EKS Anywhere (Local)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#manage-on-premise-eks-anywhere-cluster-from-aws-eks-console"&gt;Manage on-premise EKS Anywhere Cluster from AWS EKS Console&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setup-gitops-in-eks-anywhere-cluster"&gt;Setup GitOps in EKS Anywhere Cluster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-eks-anywhere"&gt;
  &lt;/a&gt;
  What is EKS Anywhere?
&lt;/h2&gt;

&lt;p&gt;Amazon EKS Anywhere is a new deployment option for Amazon EKS that enables you to easily create and operate Kubernetes clusters on-premises with your virtual machines. It brings a consistent AWS management experience to your data center, building on the strengths of Amazon EKS Distro, the same distribution of Kubernetes that powers EKS on AWS. Its goal is to include complete lifecycle management of multiple Kubernetes clusters capable of operating entirely independently of any AWS services.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-eks-anywhere-solve"&gt;
  &lt;/a&gt;
  What does EKS Anywhere solve?
&lt;/h2&gt;

&lt;p&gt;The central selling point of EKS Anywhere is that it allows customers to use Amazon‚Äôs Kubernetes software within private data centers. It makes EKS Anywhere handy in situations where businesses already have a large on-premises infrastructure that they want to modernize the cloud, keep the data in their private network due to legal reasons, or where they believe their total cost of ownership will be lower if they host workloads on their servers instead of in the public cloud.&lt;/p&gt;

&lt;p&gt;So, the use cases the EKS Anywhere solves are&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Hybrid Cloud Consistency&lt;/li&gt;
&lt;li&gt;Disconnected Environment&lt;/li&gt;
&lt;li&gt;Application Modernization&lt;/li&gt;
&lt;li&gt;Data sovereignty&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#announcement"&gt;
  &lt;/a&gt;
  Announcement
&lt;/h2&gt;

&lt;p&gt;ECS Anywhere and EKS Anywhere ‚Äî two new versions of AWS' managed containers and managed Kubernetes services announcements are made at AWS re: Invent 2020. In &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/05/amazon-elastic-container-service-anywhere-is-now-generally-available/"&gt;May 2021, ECS Anywhere was generally available&lt;/a&gt;, and today (8th September 2021 &lt;a href="https://aws.amazon.com/blogs/aws/amazon-eks-anywhere-now-generally-available-to-create-and-manage-kubernetes-clusters-on-premises/"&gt;the EKS Anywhere is available&lt;/a&gt; for general use.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--j5HMvnGY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1431724196288208899/TXMi8JCw_normal.jpg" alt="Sivamuthu Kumar (‡Æö‡Æø‡Æµ‡ÆÆ‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æï‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç) profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Sivamuthu Kumar (‡Æö‡Æø‡Æµ‡ÆÆ‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æï‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç)
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/ksivamuthu"&gt;@ksivamuthu&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Super excited about this launch. EKS üöÄ &lt;a href="https://t.co/1ZxNxtBBW5"&gt;twitter.com/awscloud/statu‚Ä¶&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      18:58 PM - 08 Sep 2021
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            Amazon Web Services
          &lt;/span&gt;
          @awscloud
        &lt;/div&gt;
        No need to contain excitement for containers. ‚òÅÔ∏è üì¶ üíª With Amazon EKS Anywhere, easily create and operate #Kubernetes clusters on-prem‚Äîon your own infrastructure in one installable software package. https://t.co/inWq7Vso35 #AWS #CloudComputing #Developer https://t.co/g0JtALxj5j
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1435678851435311110" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1435678851435311110" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1435678851435311110" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#first-look"&gt;
  &lt;/a&gt;
  First Look üëÄ
&lt;/h2&gt;

&lt;p&gt;I planned to explore AWS EKS with the three features I'm excited about.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installation methods. (Local and/or typical Production on-premise environments (VMware)&lt;/li&gt;
&lt;li&gt;Manage on-premise EKS Anywhere Cluster from AWS EKS Console&lt;/li&gt;
&lt;li&gt;Setup GitOps in EKS Anywhere Cluster&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this blog post, I'm capturing the steps I followed and my thoughts on them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-eks-anywhere-local"&gt;
  &lt;/a&gt;
  Installing EKS Anywhere (Local)
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://github.com/weaveworks/eksctl"&gt;eksctl&lt;/a&gt; tool is my favorite tool for creating the EKS cluster in AWS. To install "EKS Anywhere" eksctl got a plugin called &lt;code&gt;eksctl-anywhere&lt;/code&gt; . This will let you create a cluster in multiple providers for local development or production workloads.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I tried macOS first. It got stuck at "Creating new bootstrap cluster" ending up a lot of containers created and exiting. Maybe, it's an issue with my macOS resource requirements. (16GB RAM, 4GB assigned for docker). Later I switched to Linux VM (2 Core, 8GB Ram) created in Azure.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To install in macOS using home brew.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install aws/tap/eks-anywhere

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or install plugin using the following command in Linux.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export EKSA_RELEASE="0.5.0" OS="$(uname -s | tr A-Z a-z)"
curl "https://anywhere-assets.eks.amazonaws.com/releases/eks-a/1/artifacts/eks-a/v${EKSA_RELEASE}/${OS}/eksctl-anywhere-v${EKSA_RELEASE}-${OS}-amd64.tar.gz" \
    --silent --location \
    | tar xz ./eksctl-anywhere
sudo mv ./eksctl-anywhere /usr/local/bin/

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we are going to install the EKS Anywhere in the local environment using the docker provider.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;eksctl anywhere generate clusterconfig siva-dev --provider docker &amp;gt; siva-dev.yaml
eksctl anywhere create cluster -f siva-dev.yaml

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The cluster is created successfully in a Linux VM.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;root@eks-anywhere-vm:/home/azureuser# eksctl anywhere create cluster -f siva-dev.yaml
Performing setup and validations
Warning: The docker infrastructure provider is meant for local development and testing only
‚úÖ Docker Provider setup is valid
Creating new bootstrap cluster
Installing cluster-api providers on bootstrap cluster
Provider specific setup
Creating new workload cluster
Installing networking on workload cluster
Installing storage class on workload cluster
Installing cluster-api providers on workload cluster
Moving cluster management from bootstrap to workload cluster
Installing EKS-A custom components (CRD and controller) on workload cluster
Creating EKS-A CRDs instances on workload cluster
Installing AddonManager and GitOps Toolkit on workload cluster
GitOps field not specified, bootstrap flux skipped
Writing cluster config file
Deleting bootstrap cluster
üéâ Cluster created!

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install test workloads.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.0.0/docs/examples/echoservice/echoserver-namespace.yaml &amp;amp;&amp;amp;\
&amp;gt; kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.0.0/docs/examples/echoservice/echoserver-service.yaml &amp;amp;&amp;amp;\
&amp;gt; kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.0.0/docs/examples/echoservice/echoserver-deployment.yaml

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and verify the resources are created.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;root@eks-anywhere-vm:/home/azureuser# k get all -n echoserver
NAME READY STATUS RESTARTS AGE
pod/echoserver-7dd65ffdd6-jzl4f 1/1 Running 0 3m20s

NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE
service/echoserver NodePort 10.137.108.237 &amp;lt;none&amp;gt; 80:30795/TCP 3m21s

NAME READY UP-TO-DATE AVAILABLE AGE
deployment.apps/echoserver 1/1 1 1 3m20s

NAME DESIRED CURRENT READY AGE
replicaset.apps/echoserver-7dd65ffdd6 1 1 1 3m20s

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Installing EKS Anywhere (VMWare)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I didn't try this out in VMWare yet. You can follow through with the documentation &lt;a href="https://anywhere.eks.amazonaws.com/docs/getting-started/production-environment/"&gt;here&lt;/a&gt;. The bare metal support is planned to release in 2022.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#manage-onpremise-eks-anywhere-cluster-from-aws-eks-console"&gt;
  &lt;/a&gt;
  Manage on-premise EKS Anywhere Cluster from AWS EKS Console
&lt;/h3&gt;

&lt;p&gt;The eksctl and kubectl tools are helping us to manage the on-premise EKS Anywhere cluster. Now let's see how to connect this on-premise cluster in the AWS EKS console and manage it from there as a single pane of a dashboard of all of your EKS clusters in AWS EKS and on-premise EKS Anywhere. For this purpose, The AWS EKS Connector lets you connect your EKS Anywhere cluster to the AWS EKS console, where you can see your EKS Anywhere cluster, its configuration, workloads, and their status. EKS Connector is a software agent that can be deployed on your EKS Anywhere cluster, enabling the cluster to register with the EKS console.&lt;/p&gt;

&lt;p&gt;Create the required IAM roles and policies to register a cluster. I followed the documentation &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/eks-connector.html"&gt;here&lt;/a&gt;. Create a service-linked role - Don't miss this step. I got stuck in this without any idea why EKS Anywhere Cluster is not registering.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws iam create-service-linked-role --aws-service-name eks-connector.amazonaws.com

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Register the EKS cluster by selecting EKS Anywhere Provider and IAM role. It will give you the yaml file of the &lt;strong&gt;&lt;em&gt;eks-connector-agent&lt;/em&gt;&lt;/strong&gt; to install in the EKS anywhere cluster. And if you apply t&lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/connector-grant-access.html"&gt;he necessary permissions to the IAM for managing the cluster&lt;/a&gt;, all set.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eeQbWAPV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631152082138/d_j5QtwtO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eeQbWAPV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631152082138/d_j5QtwtO.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gxPtR-Ux--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631152105679/HNMCEGNnH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gxPtR-Ux--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631152105679/HNMCEGNnH.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you can manage the workloads, configuration of the EKS anywhere cluster from the AWS EKS console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tm-WQ6r5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631152138798/B1tbPstZC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tm-WQ6r5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631152138798/B1tbPstZC.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup-gitops-in-eks-anywhere-cluster"&gt;
  &lt;/a&gt;
  Setup GitOps in EKS Anywhere Cluster
&lt;/h3&gt;

&lt;p&gt;EKS Anywhere supports a &lt;a href="https://www.weave.works/technologies/gitops/"&gt;GitOps&lt;/a&gt; workflow for the management of your cluster. This is another feature I'm very much interested in - to manage the cluster configuration and workloads from the version-controlled source repo in Git.&lt;/p&gt;

&lt;p&gt;When you create a cluster with GitOps enabled, EKS Anywhere will automatically commit your cluster configuration to the provided GitHub repository and install a GitOps toolkit on your cluster which watches that committed configuration file. Once a change is detected by the GitOps controller running in your cluster, the cluster will be adjusted to match the committed configuration file.&lt;/p&gt;

&lt;p&gt;Add the gitops configuration as below in the YAML file you generated above. There is no way to modify the existing cluster from eksctl anywhere. So I deleted the cluster and recreated it with gitops configuration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: anywhere.eks.amazonaws.com/v1alpha1
kind: Cluster
metadata:
  name: siva-dev
spec:
    ...
  gitopsRef:
    kind: GitOpsConfig
    name: siva-dev-gitops
---
apiVersion: anywhere.eks.amazonaws.com/v1alpha1
kind: DockerDatacenterConfig
metadata:
  name: siva-dev
spec: {}

---
apiVersion: anywhere.eks.amazonaws.com/v1alpha1
kind: GitOpsConfig
metadata:
  name: siva-dev-gitops
spec:
  flux:
    github:
      personal: true
      repository: eks-anywhere-gitops
      owner: ksivamuthu

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The repo is set and the flux is installed in the cluster pointing to the repo we configured. The changes in the configuration you pushed to the git branch will be monitored by the GitOps controller. GitOps Controller pulls the changes and apply the changes in the cluster - configuration and workloads.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;root@eks-anywhere-vm:/home/azureuser# k get pods -n flux-system
NAME READY STATUS RESTARTS AGE
helm-controller-6d875c9745-8np9b 1/1 Running 0 8m9s
kustomize-controller-74c85f9944-8f48m 1/1 Running 0 8m9s
notification-controller-7c59756d9d-krtrc 1/1 Running 0 8m9s
source-controller-65dcfdf7f7-twds7 1/1 Running 0 8m9s

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gMPdoceh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631152739634/2Mhy6pTsu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gMPdoceh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631152739634/2Mhy6pTsu.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;With Amazon EKS Anywhere, customers can now create and run Kubernetes clusters on-premises using VMware Inc.‚Äôs vSphere. It comes with an installable software package to create and operate Kubernetes, plus automation tools for cluster lifecycle support. I'm so interested to explore the possibilities of EKS Anywhere at the customer's on-premise environments on modernization of legacy workloads. Let me know your thoughts in the comments below.&lt;/p&gt;

&lt;p&gt;I'm Siva - working as Sr. Software Architect at &lt;a href="https://www.ceiamerica.com"&gt;Computer Enterprises Inc&lt;/a&gt; from Orlando. I'm an AWS Community builder, Auth0 Ambassador and I am going to write a lot about Cloud, Containers, IoT, and Devops. If you are interested in any of that, make sure to follow me if you haven‚Äôt already. Please follow me &lt;a href="https://www.twitter.com/ksivamuthu"&gt;@ksivamuthu&lt;/a&gt; Twitter or check out my blogs at &lt;a href="https://blog.sivamuthukumar.com"&gt;https://blog.sivamuthukumar.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>showdev</category>
      <category>kubernetes</category>
      <category>containers</category>
    </item>
    <item>
      <title>10 VS Code Extension For Every Frontend Developers</title>
      <author>Coder</author>
      <pubDate>Thu, 09 Sep 2021 02:14:53 +0000</pubDate>
      <link>https://dev.to/coderzz/10-vs-code-extension-for-every-frontend-developers-4imo</link>
      <guid>https://dev.to/coderzz/10-vs-code-extension-for-every-frontend-developers-4imo</guid>
      <description>&lt;p&gt;Hello everyone, my name is Vansh and I'm a frontend developer. In this blog post, I would like to share 10 VS code extensions that every frontend developer should use. The purpose of using these extensions is to write faster, cleaner, and more consistent code. Let's Jump in!¬†&lt;/p&gt;
&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/10-vs-code-extensions-every-frontend-developer-should-use/"&gt;10 VS Code extensions every Frontend Developer should use&lt;/a&gt;&lt;/b&gt;

</description>
    </item>
    <item>
      <title>Best CSS Properties For Building A powerful Website</title>
      <author>Coder</author>
      <pubDate>Thu, 09 Sep 2021 02:10:27 +0000</pubDate>
      <link>https://dev.to/coderzz/best-css-properties-for-building-a-powerful-website-4d1l</link>
      <guid>https://dev.to/coderzz/best-css-properties-for-building-a-powerful-website-4d1l</guid>
      <description>&lt;p&gt;Whether you're at the beginning of your CSS journey or somewhere else, you got to admit‚Ää-‚Ääa number of CSS properties is massive.&lt;/p&gt;
&lt;p&gt;And it's easy to confuse yourself in that vast sea.¬†&lt;/p&gt;
&lt;p&gt;You're copying code from StackOverflow until you find a solution that fits. But how will that scale? Why does it even work?&lt;/p&gt;
&lt;p&gt;Most of the time, you don't care about the answer. You just focus on the result.&lt;/p&gt;
&lt;p&gt;When building a website, some of the CSS properties are must-haves; yet, it's hard to recognize them.¬†&lt;/p&gt;
&lt;p&gt;This article exists to help you solve the most common CSS problems while building a website.&lt;/p&gt;
&lt;p&gt;Let's dive into properties you cannot avoid.¬†&lt;/p&gt;

&lt;p&gt;Read More: &lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/all-css-properties-you-need-to-know-to-build-a-website/&amp;amp;ved=2ahUKEwj-otjisOfyAhVJyzgGHXG4CUcQFnoECAMQBQ&amp;amp;usg=AOvVaw2_ALco9oEYEYfcDMBxpqL0&amp;amp;cshid=1630829382032"&gt;&lt;b&gt;Best CSS Properties For Building A powerful Website&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Run, JavaScript, Run</title>
      <author>Valerii Udodov</author>
      <pubDate>Thu, 09 Sep 2021 02:09:10 +0000</pubDate>
      <link>https://dev.to/vudodov/run-javascript-run-3lf4</link>
      <guid>https://dev.to/vudodov/run-javascript-run-3lf4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#preamble"&gt;
  &lt;/a&gt;
  Preamble
&lt;/h2&gt;

&lt;p&gt;Let's admit. JavaScript is not the most predictable language out there. It might get pretty quirky very easily.&lt;br&gt;
Let's look at the following example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1. timeout&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2. console&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3. promise&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// prints&lt;/span&gt;
&lt;span class="c1"&gt;// 2. console&lt;/span&gt;
&lt;span class="c1"&gt;// 3. promise&lt;/span&gt;
&lt;span class="c1"&gt;// 1. timeout&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even if we will change the order of instructions, it won't impact the final result ü§®&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1. promise&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2. timeout&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3. console&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// prints&lt;/span&gt;
&lt;span class="c1"&gt;// 3. console&lt;/span&gt;
&lt;span class="c1"&gt;// 1. promise&lt;/span&gt;
&lt;span class="c1"&gt;// 2. timeout&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It doesn't matter how we will shuffle these three lines, they will always end up executed in the same order &lt;code&gt;console, promise, timeout&lt;/code&gt; üòê&lt;/p&gt;

&lt;p&gt;Why? Well, you know...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--21VUe2F9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ontw129r4wu5zgworoy0.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--21VUe2F9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ontw129r4wu5zgworoy0.jpeg" alt="javascript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course, there is a good (enough) reason for that. And we'll get to it shortly. But first, we need to clarify a thing or two.&lt;br&gt;
Put on your JavaScript hat and let's go! üé©&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We are going to focus on the Web Browser JavaScript, nonetheless most of the things we are going to discuss can be correlated to other agents, such as NodeJS.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;‚ÑπÔ∏è &lt;em&gt;Worth mentioning&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code&gt;setTimeout(() =&amp;gt; {})&lt;/code&gt; is equal to calling &lt;code&gt;setTimeout(() =&amp;gt; {}, 0)&lt;/code&gt;.&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Although neither will guaranty immediate execution as the timeout value (&lt;code&gt;0&lt;/code&gt;) is used to set the minimum wait period, not the exact period.&lt;br&gt;
Anyhow example above is completely legit in a given context.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#one-thing-at-a-time"&gt;
  &lt;/a&gt;
  One thing at a time
&lt;/h3&gt;

&lt;p&gt;There's one important aspect of JavaScript we need to call out from the start. The single-threaded nature of the environment it runs in. It is hard to overstate the impact of this fact on the language, web browsers, and ultimately anything that runs JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;one thread === one call stack === one thing at a time&lt;/strong&gt;&lt;br&gt;
Pause here for a sec... One thing at a time...&lt;/p&gt;

&lt;p&gt;Even when it seems like multiple things are happening simultaneously, in reality, there's only one single task that gets executed at every given moment, just really fast.&lt;/p&gt;

&lt;p&gt;The single thread we were talking about is called &lt;em&gt;browser main thread&lt;/em&gt; (nowadays more accurate name would be a tab main thread üôÉ)... Thus &lt;strong&gt;everything&lt;/strong&gt; that happening on the page is happening in one single thread.&lt;br&gt;
It is easy to underestimate the scale. While our gorgeous code is running, meantime the web browser is rendering page content, receiving and dispatching all sorts of events, doing garbage collection, distributing future work, and much more...&lt;/p&gt;

&lt;p&gt;‚ÑπÔ∏è &lt;em&gt;What about JavaScript Console, that thing we all use in the Browser Dev Tools?&lt;/em&gt;&lt;br&gt;
&lt;em&gt;It depends, but most likely it will be a different process, hence a different thread.&lt;/em&gt;&lt;/p&gt;



&lt;p&gt;‚ùóException...&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The "single thread" thing is the default behavior, however, we can branch from the main thread and run our JavaScript code in the separate thread with a help of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API"&gt;Web Workers API&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;



&lt;p&gt;A single thread is not a mistake or a bad design. Make JavaScript single-threaded was a conscious decision... Years ago, the average computer had a single core and was less powerful than any mid-range phone today. Websites were not really interactive (if at all), hence didn't really need any JavaScript magic.&lt;br&gt;
Who could foresee where it is going to end up...&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#that-thing-that-runs-your-javascript"&gt;
  &lt;/a&gt;
  That thing that runs your JavaScript
&lt;/h2&gt;

&lt;p&gt;Often terms JavaScript Runtime and JavaScript Engine are used interchangeably. Nevertheless, they are like salt üßÇ and green üü©. Two completely different things. Let me explain what I mean.&lt;/p&gt;

&lt;p&gt;Three main pieces constitute the JavaScript Runtime. They are conceptually separated. And most likely developed by different people/teams/companies, and represent independent pieces of software. However, they work in close collaboration.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;JavaScript Engine&lt;/em&gt;: compiles, optimizes, and executes code, handles memory allocation and garbage collection&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Event Loop&lt;/em&gt;: orchestrates and distributes the work, enables asynchronicity.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Browser Web API&lt;/em&gt;: allows communication with things located outside of the Runtime (e.g system timers, file system, HTTP, address bar, DOM, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Big Picture&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U4G83z2u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jtq5cffeiuq49uyufknm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U4G83z2u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jtq5cffeiuq49uyufknm.jpg" alt="runtime"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-engine"&gt;
  &lt;/a&gt;
  The Engine
&lt;/h2&gt;

&lt;p&gt;The JavaScript Engine... does not run JavaScript...It runs ECMAScript.&lt;br&gt;
Isn't it the same thing? Appears no, I'll explain.&lt;/p&gt;

&lt;p&gt;If we will look through the source code of an arbitrary JavaScript engine (you know, cuz it is a casual thing we do lol ü§™), we will find an implementation of the &lt;a href="https://tc39.es/ecma262/"&gt;ECMAScript declaration&lt;/a&gt;. This will include all sorts of base objects (including &lt;code&gt;Object&lt;/code&gt;) such as &lt;code&gt;Date&lt;/code&gt; and &lt;code&gt;String&lt;/code&gt;, key language constructions like loops, conditions, and so forth.&lt;br&gt;
However, if we will look for say &lt;code&gt;setTimer&lt;/code&gt; or &lt;code&gt;fetch&lt;/code&gt;, we won't find much. Because they are not part of ECMAScript. They are part of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API"&gt;Browser Web API&lt;/a&gt; (nothing to do with Web itself really, more like Browser API üôÉ, but you'll find it going under Web API, Web Browser API, Browser API and simply API).&lt;/p&gt;

&lt;p&gt;The JavaScript Engine will be managing memory and controlling the execution of our fabulous code. Which will never be executed in its original shape, the engine will keep modifying it all the time. Most of the engines are pretty smart, they will keep optimizing the code throughout the page lifetime in the constant chase for performance improvements.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mcceXT2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqci8n6yrtfytqt853pc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mcceXT2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqci8n6yrtfytqt853pc.jpg" alt="engine"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Important though is that the engine &lt;strong&gt;only executes the code&lt;/strong&gt; that it finds in the Stack of Frames (or Call Stack or simply the Stack). Each frame represents a function call. While the engine is running the code, it might discover a new function call (not to be confused with function declaration) and push it to the Call Stack as a new frame. Once a new frame has been added, the engine pauses the execution of the current frame and focuses on the new one. After Engine finishes frame(function) execution it pops it from the stack and continues where it left, assuming it is not the last frame.&lt;br&gt;
Every function call will end up as a new item on the Call Stack. Worth mentioning that Engine does not own exclusive rights on pushes to the Call Stack, new work might be pushed from the outside of the engine boundaries (we'll talk about it next).&lt;br&gt;
The Call Stack controls the execution sequence inside Engine. Engine won't stop popping frames from the Call Stack until it is empty. And it won't allow any interruptions from outside until it is done.&lt;/p&gt;

&lt;p&gt;‚è™ &lt;em&gt;In the previous article &lt;a href="https://valerii-udodov.com/posts/web-browser-anatomy/#the-javascript-engine"&gt;Web Browser Anatomy&lt;/a&gt; we've already discussed some of the key JavaScript engine aspects (parsing, pre-parsing, compilation, and optimization/de-optimization). With a deeper focus on the &lt;a href="https://v8.dev/"&gt;V8&lt;/a&gt; Compilation Pipeline.&lt;/em&gt;&lt;br&gt;
&lt;em&gt;The article is more focused on the code processing itself and slightly touches Browser Engine (not to be confused with JavaScript Engine) and basic rendering concepts, so if it sounds interesting, don't forget to check it out after.&lt;/em&gt; üòè&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-loop"&gt;
  &lt;/a&gt;
  The Loop
&lt;/h2&gt;

&lt;p&gt;The Event Loop is an orchestrator and the main distributor of the work. It does not perform the work itself, but it ensures that the work is distributed in the expected manner (which may vary from browser to browser).&lt;/p&gt;

&lt;p&gt;It is literally an infinite loop ‚ôæÔ∏è which constantly keeps checking if there's any work it can schedule for execution.&lt;br&gt;
A simplified version would look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;allDone&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;thingsToDo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getThingsToDo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;doThings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;thingsToDo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚ÑπÔ∏è &lt;em&gt;On each iteration, the Event Loop performs an ordered series of jobs defined in the &lt;a href="https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model"&gt;processing model documentation&lt;/a&gt;. We will be getting back to it through the course of the article.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-event-loop-and-event-loops"&gt;
  &lt;/a&gt;
  The Event Loop and event loops
&lt;/h2&gt;

&lt;p&gt;The Event Loop we usually refer to in the context of the web browser is a &lt;em&gt;Window Event Loop&lt;/em&gt;. Every &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Origin"&gt;origin&lt;/a&gt; will get one. However, sometimes few tabs/windows from the same origin might share a single loop. Especially when one tab is opened from another. (This is where we can exploit multiple tabs/pages at once)&lt;/p&gt;

&lt;p&gt;Anyhow, &lt;em&gt;Window Event Loop&lt;/em&gt; is not the only one event loop running in the browser. Web workers (and other workers) will use its own &lt;em&gt;Worker Event Loop&lt;/em&gt;. Sometimes it will be shared across all workers. And &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Worklet"&gt;worklets&lt;/a&gt; will have its own &lt;em&gt;Worklet Event Loop&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;But hereafter when we refer to Event Loop we will actually be referring to the &lt;em&gt;Window Event Loop&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tasks-microtasks-and-macrotasks"&gt;
  &lt;/a&gt;
  Tasks, Microtasks and Macrotasks
&lt;/h3&gt;

&lt;p&gt;Given the single-threaded nature of the language, it is hard to overstate the importance of asynchronicity.&lt;br&gt;
The async behavior is implemented by a set of queues (FIFO).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is a very common approach. Queues are very comfortable for implementing asynchronicity in software (and beyond its boundaries).&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Think of a cloud architecture. With a high probability in its heart, there will be some sort of queue that will be dispatching messages all over the place.&lt;br&gt;
Anyway, back to JavaScript.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u30EcP75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7tfc80b3km6fvyjf369.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u30EcP75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7tfc80b3km6fvyjf369.jpg" alt="loop"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are two (not three...) main types of queues, task queue, and microtask queue. At the first glance, it might look like they are identical. And it is true to some degree, they have the same role: postpone code execution for later. The difference lies in how Event Loop uses them.&lt;/p&gt;

&lt;p&gt;‚ùî&lt;em&gt;You probably wondering where did macrotasks go...&lt;br&gt;
Macrotask is just a V8 name for the task. So thereafter we will use the term task and everything we say for the task can be applied to macrotask&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#task-queue"&gt;
  &lt;/a&gt;
  Task queue
&lt;/h4&gt;

&lt;p&gt;The task queue is what keeps the whole thing spinning. This is where most of our code gets scheduled for execution. Event the initial code (the one that we place in-between the &lt;code&gt;&amp;lt;script&amp;gt;...&amp;lt;/script&amp;gt;&lt;/code&gt; tags) gets to the Call Stack through the Task Queue.&lt;/p&gt;

&lt;p&gt;Often our code looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;do this on button click
do that when the server responds
call the server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In other words, we define callbacks (what to do) and assign them to events (when to do) that suppose to trigger them. When the event happens it does not execute the callback immediately, instead, it creates and enqueues a task in the Task Queue, which in its turn will be eventually processed (in other words pushed to the Call Stack).&lt;/p&gt;

&lt;p&gt;The queue is out of our direct reach. Dequeueing is happening inside the event loop. Most of the tasks are enqueued through so-called generic task sources. This includes &lt;a href="https://w3c.github.io/uievents/#event-types"&gt;user interactions&lt;/a&gt;, &lt;a href="https://dom.spec.whatwg.org/#events"&gt;DOM manipulation&lt;/a&gt;, &lt;a href="https://xhr.spec.whatwg.org/#interface-xmlhttprequest"&gt;network activity&lt;/a&gt; and &lt;a href="https://html.spec.whatwg.org/multipage/history.html#history-3"&gt;history&lt;/a&gt;. Although we obviously have a way to impact what and when will get to the Task Queue (e.g through event handling).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ok, that's gonna be a tough sentence, so bear with me here... Dequeueing process happening once per iteration and it will least (keep dequeuing) until the newest task from the previous iteration (that have been in the queue at the moment of the beginning iteration) is still in the queue. Keep in mind that the newest tasks will be in the tail of the queue, due to FIFO (First In First Out) concept.&lt;/em&gt;&lt;br&gt;
&lt;em&gt;In other words, all new tasks we are adding will be executed in the next iteration, all current/old tasks will be executed in this iteration.&lt;br&gt;
As per &lt;a href="https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model"&gt;processing model documentation&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;üòÆ &lt;em&gt;The task queue is not really a queue, but an ordered set. However, it is not very important as its behavior in this context is equivalent to the queue.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There might be (and probably will be) multiple task queues in a single event loop. The most common reason for that is task priority management. E.g. there might be a separate task queue for user interactions and another queue for everything else. This way we can give user interactions higher priority and handle them before anything else.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#microtask-queue"&gt;
  &lt;/a&gt;
  Microtask queue
&lt;/h4&gt;

&lt;p&gt;Promises, asynchronous functions all this goodness is empowered by the microtask queue. It is very similar to the task queue, except for three major differences.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Microtasks are processed at different phases in the Event Loop iteration. We mentioned above that each Event Loop iteration following strict order known as &lt;a href="https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model"&gt;processing model&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;Microtasks can schedule other microtasks and the new iteration of the Event Loop won't begin until we reach the end of the queue;&lt;/li&gt;
&lt;li&gt;We can directly enqueue a microtask with &lt;a href="https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#microtask-queuing"&gt;queueMicrotask&lt;/a&gt;;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The rest is pretty much the same, once a task is dequeued and a callback is extracted, it will be pushed to the Call Stack for immediate execution.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#browser-web-api"&gt;
  &lt;/a&gt;
  Browser Web API
&lt;/h2&gt;

&lt;p&gt;The final piece in the puzzle is an API, the Browser API. The connection bridge between the code and everything outside of the runtime.&lt;/p&gt;

&lt;p&gt;Communication with a file system or remote service calls. Various event subscriptions. Interactions with the address bar and history. And more. Is facilitated by Browser API.&lt;/p&gt;

&lt;p&gt;Browser API allows us to define event handlers. And this is the most common way for developers to pass callbacks (event handlers) to the Task Queue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FrKAYCgm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yv5949pclzakvdgaooyt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FrKAYCgm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yv5949pclzakvdgaooyt.jpg" alt="api"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Browser API are browser-specific. Each browser implements them separately. Hence they work differently, although probably will have the same effect.&lt;br&gt;
Hence every now and then you might bump into a cool new feature that won't be supported by &lt;del&gt;Internet Explorer&lt;/del&gt; Browser X. And the most common reason, the API is not implemented in the Browser X.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;At least nowadays the naming is kinda conventional and no one tries to show uniqueness...&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Imagine writing code when all browsers would name things differently and everything would produce different effects... That would be a nightmare, wouldn't it?&lt;br&gt;
Well, it used to be like that. And it is kinda like this nowadays lol. Fortunately, we have many tools like &lt;a href="https://babeljs.io/"&gt;BabelJS&lt;/a&gt; and a huge community behind that helps mitigate this problem for us.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I still remember üë¥ how you had to implement ajax calls (XMLHTTPRequest) for all possible browsers in your code until the &lt;a href="https://jquery.com/"&gt;jQuery&lt;/a&gt; appeared. That was a game-changer.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#bringing-things-together"&gt;
  &lt;/a&gt;
  Bringing things together
&lt;/h2&gt;

&lt;p&gt;We've discussed quite a few things thus far. Let's bring them all together in a single list. And go over it in the same order as Event Loop will.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hkGUnGyP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sgd2sr9azw5sb65w9nu7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hkGUnGyP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sgd2sr9azw5sb65w9nu7.jpg" alt="ordered runtime"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Remember that once some code gets in the Call Stack, the Engine will hijack control and start popping, executing, and pushing the code until finally, the Call Stack is empty. Once reached the end of the stack it returns control to the same point where it hijacked it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The browser will find some JavaScript either in-between the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags or in the DevTools Console. And ultimately it will push it to the Task Queue...&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The Loop keeps checking the Task Queue. Once it finds the initial code the Loop will move it to the Call Stack. The Engine immediately takes over and doing its job until it empties the Call Stack.&lt;/li&gt;
&lt;li&gt;The Loop will check microtask queue(s). It will keep dequeuing tasks from the queue and pushing them (one item at a time) to the Call Stack (and it will keep executing until empty) from the microtask queue until the microtask queue is empty. Remember that microtask code can push another microtask in the queue and it will be executed during the same iteration (right here).&lt;/li&gt;
&lt;li&gt;Both Engine Call Stack and Microtask Queue are now empty.&lt;/li&gt;
&lt;li&gt;Finally the Loop gets back to the Task Queue. Keep in mind that events were emitting all the time, either in the code or outside of it. The Loop will mark the newest task (the one in the tail of the queue) in the queue and start dequeuing tasks from oldest to newest (head to tail) and pushing code to the Engine Call Stack until it reaches marked task.&lt;/li&gt;
&lt;li&gt;Next it will do some other unrelated to the runtime work, like rendering.&lt;/li&gt;
&lt;li&gt;Once all is done the new iteration starts from point 1&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#the-example"&gt;
  &lt;/a&gt;
  The example
&lt;/h3&gt;

&lt;p&gt;Let's revisit the example from the beginning of the article...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1. timeout&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2. console&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3. promise&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// prints&lt;/span&gt;
&lt;span class="c1"&gt;// 2. console&lt;/span&gt;
&lt;span class="c1"&gt;// 3. promise&lt;/span&gt;
&lt;span class="c1"&gt;// 1. timeout&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Doesn't matter how we would shuffle instruction, the produced result will stay the same&lt;/p&gt;

&lt;p&gt;Actually now it makes much more sense, check it out.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, all this code is sent to the Call Stack and executed sequentially.

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;setTimeout&lt;/code&gt; almost immediately sends a callback to the Task Queue.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;console.log&lt;/code&gt; prints string in the console (this is our first line &lt;code&gt;2. console&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Promise.resolve(...).then(...)&lt;/code&gt; is immediately resolved promise, thus it sends the callback to the Microtask Queue the same moment it is executed.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Stack finishes execution, it is empty and it passes control back to the Event Loop.&lt;/li&gt;
&lt;li&gt;Event Loop checks Microtask Queue and finds there callback from the resolved promise and sends it to the Call Stack (this is our second line &lt;code&gt;3. promise&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Microtask Queue is empty, Call Stack is empty, it is Task Queue turn now.&lt;/li&gt;
&lt;li&gt;The Event Loop finds a timeout callback in the Task Queue and sends it to the Call Stack (this is our third and last line &lt;code&gt;1. timeout&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And we are done, the stack is empty along with all queues.&lt;br&gt;
That wasn't too bad, was it?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#recursion-examples"&gt;
  &lt;/a&gt;
  Recursion Examples
&lt;/h2&gt;

&lt;p&gt;Alright, it is time to have some fun! ü§ì&lt;br&gt;
Given we already know how to interact and what to expect from both queues and a stack. We will try to implement three different infinite recursion examples. Each will utilize one given mechanism.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It will be more fun if you'd open a console and try to run code examples on your own. Just don't use this page's console lol.&lt;/em&gt;&lt;br&gt;
&lt;em&gt;I'd also advise preparing Browser Task Manager to keep an eye on changes in memory and CPU consumption. Most of the modern browsers will have one somewhere in settings.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's start with classics.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#call-stack"&gt;
  &lt;/a&gt;
  Call Stack
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;recursive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;recursive&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;unreachable code&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;recursive&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;unreachable code&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/*
stack
stack
stack
...

Uncaught RangeError: Maximum call stack size exceeded
    at recursive (&amp;lt;anonymous&amp;gt;:2:1)
    at recursive (&amp;lt;anonymous&amp;gt;:3:1)
    at recursive (&amp;lt;anonymous&amp;gt;:3:1)
    at recursive (&amp;lt;anonymous&amp;gt;:3:1)
    at recursive (&amp;lt;anonymous&amp;gt;:3:1)
    at recursive (&amp;lt;anonymous&amp;gt;:3:1)
    at recursive (&amp;lt;anonymous&amp;gt;:3:1)
    at recursive (&amp;lt;anonymous&amp;gt;:3:1)
    at recursive (&amp;lt;anonymous&amp;gt;:3:1)
    at recursive (&amp;lt;anonymous&amp;gt;:3:1)
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The infinite recursion and its good old buddy Stack Overflow Exception. I bet you've seen a few of these before...&lt;br&gt;
The Stack Overflow Exception is about reaching the max size of the Call Stack. Once we exceed the max size it will blow up with a &lt;code&gt;Maximum call stack size exceeded&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note that there are a few &lt;code&gt;console.log&lt;/code&gt; that will never get printed.&lt;br&gt;
Remember that every time we push a new item on the Call Stack, the Engine will immediately switch to it, since we are just pushing new items and never popping. The stack keeps growing until we reach its maximum...&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#task-queue"&gt;
  &lt;/a&gt;
  Task Queue
&lt;/h3&gt;

&lt;p&gt;Let's try the Task Queue now. This one won't blow up immediately, it will run much longer util the browser propose you kill the page (or wait if you are insistent).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;recursiveTask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;task queue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;recursiveTask&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;reachable code 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;recursiveTask&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;reachable code 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/*
reachable code 2
task queue
reachable code 1
task queue
reachable code 1
task queue
reachable code 1
task queue
reachable code 1
...
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that both extra &lt;code&gt;console.log&lt;/code&gt; statements are printed. Because all the time we are adding a new task to the Task Queue, we add it for the next iteration and not for immediate execution. Hence all code in this example is processed before starting a new iteration.&lt;br&gt;
Keep an eye on the memory footprint. It will be growing fairly fast together with CPU usage. Under a minute my tab went over 1 Gig of memory.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#microtask-queue"&gt;
  &lt;/a&gt;
  Microtask Queue
&lt;/h3&gt;

&lt;p&gt;Ok, the final one, we'll do the same stuff, infinite recursion, but this time for the microtask queue.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;recursiveMicrotask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;microtask queue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;queueMicrotask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;recursiveMicrotask&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;reachable code 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;unreachable code 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;recursiveMicrotask&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;reachable code 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;unreachable code 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="cm"&gt;/*
reachable code 2
microtask queue
reachable code 1
microtask queue
reachable code 1
microtask queue
reachable code 1
microtask queue
reachable code 1
...
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note how tasks from the Task Queue are never executed ("unreachable code"). This is happening because we never end up current Event Loop iteration, we keep adding microtasks to the Microtask Queue and it prevents the iteration from finishing.&lt;br&gt;
If you will leave it for long enough you'll notice that the page (including the address bar) becomes less responsive. Until it completely dies.&lt;br&gt;
Of course, the memory footprint (and CPU usage) will keep growing much faster, since we polluting the Task Queue, but if we will remove both &lt;code&gt;setTimeout&lt;/code&gt; it will reduce the pace of memory footprint growth.&lt;/p&gt;



&lt;p&gt;üìù &lt;em&gt;Side note&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Recursion might be dangerous for infinity simulation. I'd recommend looking into generator functions for such matters. We won't get under the boot of generator functions. At least for now.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But here's a small example of an infinite number generator, which shows the gist of it.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;generateNumber&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generateNumbers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it.
&lt;/h2&gt;

&lt;p&gt;Of course, everything we looked at is a simplified representation. However, it illustrates in enough detail how the Runtime functions. It is accurate enough to explain the true nature of asynchronicity and code execution sequences in JavaScript. As well as hopefully reveal some "odd" behavior and "unexpected" race conditions.&lt;/p&gt;

&lt;p&gt;JavaScript has an extremely low entrance barrier. And often it is confused with being unstable.&lt;br&gt;
However, some of its behavior is a trade-off of some sort and payment for such a low entrance barrier. Although few bugs are left there for backward compatibility lol...&lt;/p&gt;

&lt;p&gt;If you enjoyed the read, don't forget to check out another related article &lt;a href="https://valerii-udodov.com/posts/web-browser-anatomy"&gt;Web Browser Anatomy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;üëã&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>web</category>
      <category>frontend</category>
    </item>
    <item>
      <title>AI Project For Beginners</title>
      <author>Coder</author>
      <pubDate>Thu, 09 Sep 2021 02:01:04 +0000</pubDate>
      <link>https://dev.to/coderzz/ai-project-for-beginners-24ph</link>
      <guid>https://dev.to/coderzz/ai-project-for-beginners-24ph</guid>
      <description>&lt;p&gt;Artificial Intelligence has made a significant impact on our daily lives. Every time you scroll through social media, open Spotify, or do a quick Google search, you are using an application of AI. The AI industry has expanded massively in the past few years and is predicted to grow even further, reaching around 126 billion U.S. dollars by 2025. Multinational companies like IBM, Accenture, and Apple are actively hiring AI practitioners. The¬†median salary of an AI engineer¬†as of 2021 is $171, 715 that can go over $250,000.&lt;/p&gt;
&lt;p&gt;The field of AI is vast, and there are many areas within the industry that you can choose to specialise. Say , if you are intrigued by facial recognition systems and image generation, you can choose to work in the field of¬†computer vision.¬†If you‚Äôd like to build models that can converse with people and learn human language, you can work in the field of¬†NLP (Natural Language Processing).&lt;/p&gt;
&lt;p&gt;There is a lot of work being done today for the advancement of Artificial Intelligence. Companies need AI specialists who can build and deploy scalable models to meet growing industry demands. It isn‚Äôt tough to get started in the field of AI. While there is the complexity involved in¬†building machine learning models from scratch,¬†most AI jobs in the industry today don‚Äôt require you to know the math behind these models. Many companies require individuals who can build AI solutions, scale them, and deploy them for the end-user. Many high-level libraries and frameworks can help you do this without an in-depth knowledge of how the models work.¬†&lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/artificial-intelligence-project-for-beginners/"&gt;Artificial Intelligence Project For Beginners 2021&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Vocabulary Building Day 13</title>
      <author>vindhya Hegde </author>
      <pubDate>Thu, 09 Sep 2021 01:56:10 +0000</pubDate>
      <link>https://dev.to/vindhyasadanand/vocabulary-building-day-13-6d6</link>
      <guid>https://dev.to/vindhyasadanand/vocabulary-building-day-13-6d6</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;impudent&lt;/strong&gt;(adjective): improperly forward or bold.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dYrSAAF6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.wordinfo.info/words/images/impudent-2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dYrSAAF6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.wordinfo.info/words/images/impudent-2.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=impudent&amp;amp;oq=impudent&amp;amp;aqs=chrome..69i57j0i433i512j0i512l8.5107j1j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;dogmatic&lt;/strong&gt;(adjective): not accepting that one's own beliefs may not be correct.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jJVEJcmh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/vh6JzYwhCks/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJVEJcmh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/vh6JzYwhCks/maxresdefault.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=dogmatic+meaning&amp;amp;oq=dogmatic&amp;amp;aqs=chrome.0.0i433i512j69i57j0i512l5j0i433i512j0i512l2.3578j1j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;dictatorial&lt;/strong&gt;(adjective):of or typical of a ruler with total power.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yTmdvNVK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://image.shutterstock.com/image-illustration/business-cartoon-about-dictatorial-boss-600w-441753478.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yTmdvNVK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://image.shutterstock.com/image-illustration/business-cartoon-about-dictatorial-boss-600w-441753478.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=dictatorial&amp;amp;oq=dictatorial&amp;amp;aqs=chrome.0.69i59j0i20i263i433i512j0i20i263i512j0i512l7.5343j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;deferential&lt;/strong&gt;(adjective): showing respect.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Os3lS4mZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.tfd.com/wn/4D/608A1-deference.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Os3lS4mZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.tfd.com/wn/4D/608A1-deference.png" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=deferential+meaning&amp;amp;oq=deferential&amp;amp;aqs=chrome.0.0i20i263i433i512j69i57j0i20i263i512j0i512l7.4355j1j4&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;gossamer&lt;/strong&gt;(noun): characterized by unusual lightness and delicacy.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QfTJWAcz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/wQichVTdRy4/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QfTJWAcz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/wQichVTdRy4/maxresdefault.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=gossamer+meaning&amp;amp;oq=gossamer+me&amp;amp;aqs=chrome.0.0i20i263i433i512j69i57j0i20i263i512j0i512l4j69i60.4884j1j4&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;br&gt;
I hope this helps you if you are preparing for GRE exams.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>gre</category>
      <category>day13</category>
    </item>
    <item>
      <title>Tips To Become Great Programmer Of All Time</title>
      <author>Coder</author>
      <pubDate>Thu, 09 Sep 2021 01:51:33 +0000</pubDate>
      <link>https://dev.to/coderzz/tips-to-become-great-programmer-of-all-time-3046</link>
      <guid>https://dev.to/coderzz/tips-to-become-great-programmer-of-all-time-3046</guid>
      <description>&lt;p&gt;¬†A good programmer is someone who always looks both ways before crossing a one-way street. ~Doug Linder&lt;/p&gt;

&lt;p&gt;Let me start by saying that I do not consider myself to be a competent coder. I consider my coding abilities to be mediocre, and I am still learning and have a long way to go before I am even remotely satisfied with them.Yes, I am better at programming than a lot of others, but that is just because they are lazy and choose to sit about idle all day instead of programming. Their dreadful abilities make my less dreadful abilities appear fantastic.&lt;/p&gt;

&lt;p&gt;So most of the tips I will mention below are lessons learnt from failed endeavours, they are what I have wanted to be and I am not. So lets dive in.¬†&lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/tips-to-become-a-great-programmer/"&gt;Tips to become a great programmer&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>15 Must-Have Browser Extensions for Web Developers</title>
      <author>Coder</author>
      <pubDate>Thu, 09 Sep 2021 01:47:33 +0000</pubDate>
      <link>https://dev.to/coderzz/15-must-have-browser-extensions-for-web-developers-215n</link>
      <guid>https://dev.to/coderzz/15-must-have-browser-extensions-for-web-developers-215n</guid>
      <description>&lt;p&gt;Browsers are increasingly incorporating more¬†&lt;span&gt;&lt;a href="#"&gt;extensions, plugins and add-ons&lt;/a&gt;&lt;/span&gt;, which are often developed by their users, making the browser more powerful, and helping us increase our productivity. Here at Awwwards, our mission is to share with you the best resources and tools on the web, so we're writing a series of blog articles on¬†&lt;span&gt;the best extensions and plugins for major browsers&lt;/span&gt;. To kick-off, we're focusing on extensions that are offered in the Chrome Web Store, available for free and easy to install.&lt;/p&gt;
&lt;p&gt;Among the tools, we'll highlight those that are&lt;span&gt;¬†most useful for web designers and developers&lt;/span&gt;. We hope you find them useful and get you better results.¬†&lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/chrome-extensions-for-web-developers/&amp;amp;ved=2ahUKEwjNobWsr-fyAhX_yzgGHYoACLUQFnoECAMQBQ&amp;amp;usg=AOvVaw3LrSRSp_yMsQU7StlCW8qG"&gt;15 Must-Have Browser Extensions for Web Developers&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>GCP Cloud Digital Leader, a certification in search of an identity</title>
      <author>Andrew May</author>
      <pubDate>Thu, 09 Sep 2021 00:03:36 +0000</pubDate>
      <link>https://dev.to/leading-edje/gcp-cloud-digital-leader-a-certification-in-search-of-an-identity-5bk1</link>
      <guid>https://dev.to/leading-edje/gcp-cloud-digital-leader-a-certification-in-search-of-an-identity-5bk1</guid>
      <description>&lt;p&gt;I recently took and passed the exam for the new &lt;a href="https://cloud.google.com/certification/cloud-digital-leader"&gt;GCP Cloud Digital Leader certification&lt;/a&gt;, and I thought I'd share a few thoughts.&lt;/p&gt;

&lt;p&gt;The certification is the first "Foundation" Level certification for GCP, but it seems to sit there uneasily.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#similar-certifications"&gt;
  &lt;/a&gt;
  Similar Certifications
&lt;/h2&gt;

&lt;p&gt;I've previously taken both the AWS Cloud Practitioner and Microsoft Azure Fundamentals certifications (along with a bunch of other AWS certs), and these both provide fairly easy introductions to cloud concepts and a high level overview of the core services in the platform.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#digital-leader"&gt;
  &lt;/a&gt;
  Digital Leader?
&lt;/h2&gt;

&lt;p&gt;The name of the certification seems to be an indication of the aspirations Google had for this new certification, and the training material they provide makes it seem that the certification is squarely aimed at decision makers who are considering moving to the cloud but either need convincing, or need ammunition to convince others.&lt;/p&gt;

&lt;p&gt;The four training courses in their learning path are titled:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Introduction to Digital Transformation with Google Cloud&lt;/li&gt;
&lt;li&gt;Innovating with Data and Google Cloud&lt;/li&gt;
&lt;li&gt;Infrastructure and Application Modernization with Google Cloud &lt;/li&gt;
&lt;li&gt;Understanding Google Cloud Security and Operations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The courses take about 8-10 hours to go through and have a number of simple tests at the end of sections. In the videos you'll hear a lot of reasons for why you should move to the Cloud, and GCP in particular, but you'll learn practically nothing about the individual services available in GCP. Some of the services are mentioned by name, but with no detail - for example Cloud SQL gets a mention, but no details about which RDBMS engines it supports.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSfsSfkh9PE-HjdRRzJ24wPSjZrXF3gLxmncAYx31gyz2rLbtw/viewform"&gt;10 practice test questions&lt;/a&gt; they provide might lead you to think these videos have prepared you reasonably well for the exam, as they ask you to chose between adding resources in your datacenter or creating them in a "public cloud platform" (wink, wink, we mean GCP).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hint: the answer is always moving to the cloud!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are actually a number of these types of questions in the exam, but it feels like they got part way and then realized they had nowhere near enough questions of that type to create a certification.&lt;/p&gt;

&lt;p&gt;Many of the other questions are of a more traditional foundation style, expecting you to select the right service to meet a particular use case. It does seem like they expect you to know &lt;strong&gt;every&lt;/strong&gt; service in GCP unlike the AWS and Azure certs, but at least there are a lot less services in GCP.&lt;/p&gt;

&lt;p&gt;Then there are questions that feel like they were pulled from an Associate Architect exam that doesn't exist, that require you to have a bit deeper understanding of how to select services, or configure IAM etc. The addition of these questions makes the exam feel more difficult as a whole than the other foundation certs, and had me doubting myself a few times.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preparation"&gt;
  &lt;/a&gt;
  Preparation
&lt;/h2&gt;

&lt;p&gt;A group of us at &lt;a href="https://www.leadingedje.com"&gt;Leading EDJE&lt;/a&gt; all decided to get this certification, so we watched the provided videos together. Fortunately before diving headlong into the exam, we did some research and found some reviews of the beta exam that made us realize we were not yet prepared.&lt;/p&gt;

&lt;p&gt;There isn't a lot of third party training available yet because it's such a new certification. I ended up using the &lt;a href="https://www.exampro.co/gcp-cdl"&gt;ExamPro training course&lt;/a&gt; that includes 5.5 hours of videos and practice questions that are designed to be closer to the real exam.&lt;/p&gt;

&lt;p&gt;I also spent some time reading my &lt;a href="https://www.amazon.com/Google-Cloud-Certified-Associate-Engineer/dp/1119564417"&gt;Associate Cloud Engineer Study guide&lt;/a&gt; that I bought a while ago but never got around to using.&lt;/p&gt;

&lt;p&gt;After that I felt pretty prepared for the exam and went ahead and booked it to take a few hours after I finished going through the ExamPro course.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-exam"&gt;
  &lt;/a&gt;
  The exam
&lt;/h2&gt;

&lt;p&gt;GCP uses Webassessor/Kryterion for their exams, and while the process was similar for a remotely proctored exam was similar to the companies used for AWS and Azure tests, the actual pre-exam screening was made significantly more difficult because you can't use your phone to take pictures of the room and have to use your webcam - so there was a lot of trying to scan the room (and under the table) using my laptop, and in a few cases (like verifying my id) I had to take a photo with my phone, zoom in and then hold it up to my webcam.&lt;/p&gt;

&lt;p&gt;The actual exam software and type of question was similar to the AWS Cloud Practitioner, multiple choice questions most with a single answer - none of the variety of question styles that the Azure Fundamentals exam uses. As with AWS, they ask you to take a questionnaire before telling you if you passed or failed.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Currently I just know I've passed, I'm still waiting on the official email from Google.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some of the questions were very straightforward and I answered in seconds, others I wasn't entirely sure about. I answered all the questions in about 30 of the allotted 90 minutes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summing-up"&gt;
  &lt;/a&gt;
  Summing up
&lt;/h2&gt;

&lt;p&gt;If you are a decision maker trying to decide whether to move to the Cloud or not, the provided GCP training videos may be of use, but I'm not convinced studying for the certification exam itself will be a great deal of use.&lt;/p&gt;

&lt;p&gt;If you already know you're going to be using GCP, and want to learn more about the platform, then the provided training is of little use and you're probably better served by studying for the &lt;a href="https://cloud.google.com/certification/cloud-engineer"&gt;Associate Cloud Engineer certification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/leading-edje"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EobIhVhY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/emoex3mjpg9liyomhtax.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>googlecloud</category>
      <category>certification</category>
    </item>
    <item>
      <title>CSS hover &amp; active &amp; some tips</title>
      <author>Etamar</author>
      <pubDate>Wed, 08 Sep 2021 23:53:14 +0000</pubDate>
      <link>https://dev.to/itushthegiant/css-hover-active-some-tips-3l1k</link>
      <guid>https://dev.to/itushthegiant/css-hover-active-some-tips-3l1k</guid>
      <description>&lt;p&gt;Lets start and say CSS is an endless world of styling.&lt;br&gt;
There is a serious amount of options that you can play with to get the styling that you want for your component/element,&lt;br&gt;
I am not going to tell you about everything but I will tell you about the struggle that I had in my last project and how I managed to find the solution for it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#name-the-class"&gt;
  &lt;/a&gt;
  Name the class
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L3plGOCu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8lwn250cjelxl1wvti0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L3plGOCu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8lwn250cjelxl1wvti0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I had a lot of struggle grabbing the specific element using the CSS file in my project so what do you see now is the final result of endless tryouts of naming the right element.&lt;br&gt;
(I know using ID for the elements can be more specific but with React I find it easier with classNames).&lt;br&gt;
Don‚Äôt think i did all this styling by myself, Google was a good friend and there was a lot of coping and pasting.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#devtools"&gt;
  &lt;/a&gt;
  Devtools
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QS7vRsdB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lndbdalqab5s7pp82i9v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QS7vRsdB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lndbdalqab5s7pp82i9v.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think the most fun part with CSS is that you can play with the DOM without changing your code and have all experiments that you want until you have the final product and just copy and past it in your VScode.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4z4eVQ9t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tn9ofmhy5no8ys8jm823.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4z4eVQ9t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tn9ofmhy5no8ys8jm823.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mrf1x6Fv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wnhldgcbebn3sop2k2xe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mrf1x6Fv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wnhldgcbebn3sop2k2xe.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hover-amp-active"&gt;
  &lt;/a&gt;
  hover &amp;amp; active
&lt;/h3&gt;

&lt;p&gt;The big struggle that I had in my project (with styling) was that the button component that I was using from "MaterialUI"&lt;br&gt;
was refusing to work with my simple onChange event,&lt;br&gt;
So I decided to create the button on my own and do all the styling by myself.&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nomWOB05--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vrm7gjigszsgfwyy4s8e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nomWOB05--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vrm7gjigszsgfwyy4s8e.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I discovered how fun it can be with the "hover" &amp;amp; "active" selectors!&lt;br&gt;
I managed to create a really nice Remove button that his color is fading and it has a click effect when you click it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mQjNY419--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a365wgrtlk47a9rnx6xp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mQjNY419--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a365wgrtlk47a9rnx6xp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7_TTyDnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d76bzjldau7gox1g5tj7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7_TTyDnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d76bzjldau7gox1g5tj7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m6SMCyjk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzqziiq6lcv34hpue5x1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m6SMCyjk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzqziiq6lcv34hpue5x1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No doubt that i copied and paste a lot of it but there was a lot of playing around with it and i am very happy with the final result :)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  resources
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/css/css3_buttons.asp"&gt;https://www.w3schools.com/css/css3_buttons.asp&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.w3schools.com/csSref/sel_hover.asp"&gt;https://www.w3schools.com/csSref/sel_hover.asp&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Web Application Hosting in the AWS Cloud</title>
      <author>Ebrahim Gomaa</author>
      <pubDate>Wed, 08 Sep 2021 22:41:15 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/web-application-hosting-in-the-aws-cloud-19j3</link>
      <guid>https://dev.to/awsmenacommunity/web-application-hosting-in-the-aws-cloud-19j3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#an-overview-of-traditional-web-hosting"&gt;
  &lt;/a&gt;
  An overview of traditional web hosting
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tLrgnWBV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27t5puiw8nr8vwiwqize.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tLrgnWBV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27t5puiw8nr8vwiwqize.png" alt="Traditional"&gt;&lt;/a&gt;&lt;br&gt;
This image depicts the traditional architecture of a three-tier web app. In the following sections, we'll show how easily this architecture can be built using AWS.  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#web-app-hosting-in-the-cloud-using-aws"&gt;
  &lt;/a&gt;
  Web app hosting in the cloud using AWS
&lt;/h2&gt;

&lt;p&gt;After studying the value moving to the cloud and deciding its better for your case, this section helps you architect your application in the cloud using AWS&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-can-solve-common-web-app-hosting-problems"&gt;
  &lt;/a&gt;
  AWS can solve common web app hosting problems
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cost effectiveness&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Leveraging automatic scaling (up/down) based on traffic provisioning to cut out useless capacity at non-peak times, to ensure cost-effective usage of resources.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8EERq5l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0ahpdzghryoq7ymvd5w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8EERq5l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0ahpdzghryoq7ymvd5w.png" alt="Cost Effectiveness"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fast-response scalability&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fast-responding scalability in case of unexpected loads if compared to the down time encountered by the traditionally hosted apps in case of unexpected peaks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Managing Different environments&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Easily and cost-effectively manage environments (test/beta/staging) to ensure quality of the application at different stages of its development lifecycle. This helps use this parallel fleet optimally when and as needed. You can also use this parallel fleet as staging environment for your new release and leverage &lt;a href="https://en.wikipedia.org/wiki/Blue-green_deployment"&gt;Blue-Green Deployment&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#an-aws-cloud-architecture-for-web-app-hosting"&gt;
  &lt;/a&gt;
  An AWS Cloud architecture for web app hosting
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---OOJZw2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dqxvobaumakeorbbhjb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---OOJZw2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dqxvobaumakeorbbhjb.png" alt="AWS Cloud Arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;DNS services with Amazon Route 53&lt;/strong&gt; simplifies domain management&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cache-hit-ratio-explained.html"&gt;Edge caching&lt;/a&gt; with AWS CloudFront&lt;/strong&gt; to decrease latency of content to users&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Edge security for Amazon CloudFront with AWS WAF&lt;/strong&gt; customer-defined rules to filter malicious traffic (XSS - SQL injections)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Load balancing with Elastic Load Balancing (ELB)&lt;/strong&gt; spread load over Availability Zones and use AWS Auto Scaling groups for redundancy&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;DDoS protection with AWS Shield&lt;/strong&gt; for Network and Transport layers DDoS attacks protection automatically&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Firewalls with security groups&lt;/strong&gt; host-level stateful firewall for both web and app servers.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Caching with AWS ElastiCache&lt;/strong&gt; leverage Redis and Memcached for lower latency of frequent requests.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Managed Databases with Amazon RDS&lt;/strong&gt; highly available, multi-AZ DB architecture with 6 possible DB engine&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Static Storage and backups with Amazon S3&lt;/strong&gt; simple, HTTP-based object storage for backups and assets.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#key-components-of-aws-cloud-web-app-hosting-architecture"&gt;
  &lt;/a&gt;
  Key Components of AWS Cloud web app hosting architecture
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Network Management&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Security groups provide host-level security&lt;/li&gt;
&lt;li&gt;Amazon VPC :

&lt;ul&gt;
&lt;li&gt;enables running resources in an isolated network that you defined.&lt;/li&gt;
&lt;li&gt;helps create hybrid architecture via hardware VPNs to extend your datacenter using AWS cloud.&lt;/li&gt;
&lt;li&gt;Works with both IPv4 and IPv6.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Content Delivery&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;CDN (Content Delivery Network) provide a network of edge locations to deliver your content in a geo-dispersed fashion though edge caching.&lt;/li&gt;
&lt;li&gt;For dynamic content, CDN retrieves data from the origin server&lt;/li&gt;
&lt;li&gt;You can use CloudFront as a global network of your static, dynamic and streaming content.&lt;/li&gt;
&lt;li&gt;CloudFront is optimized for working with AWS services (like S3 and EC2) with a pay-as-you-go pricing method.&lt;/li&gt;
&lt;li&gt;Any other edge caching solution should work well in the AWS cloud.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Managing public DNS&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Route 53 is a scalable and highly-available AWS-optimized cloud DNS service. It's also fully compliant with IPv6&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Host Security&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Use EC2 security groups, which are analogues to firewalls, to limit inbound access to your instance to only specific subnets, IP addresses and resources.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Load Balancing&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Amazon ELB (Elastic Load Balancer) is used to distribute incoming traffic across multiple targets in the same AZ or across multiple AZs.&lt;/li&gt;
&lt;li&gt;It offers 4 types of LBs, all provided with high-availability, scalability and security.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Finding hosts and services&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Most IPs in the AWS are dynamic&lt;/li&gt;
&lt;li&gt;EC2 instances are provided both public and private DNS endpoints that are accessible through the internet&lt;/li&gt;
&lt;li&gt;You should assign a Static IP address (Elastic IP in the AWS terminology) for instances and services that require consistent endpoints, such as primary databases, central file servers, and EC2-hosted load balancers.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Caching&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Amazon ElastiCache is a highly-available and auto scalable in-memory cache web service that's protocol compliant with Memcached and Redis.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;DB (Config, Backups and failover)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Using Amazon RDS&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Provide access to popular DB engines in the cloud&lt;/li&gt;
&lt;li&gt;Supports MySQL, PostgreSql, MS SQL Server and Oracle.&lt;/li&gt;
&lt;li&gt;Easy and flexible scalability of both compute resources and storage capacity&lt;/li&gt;
&lt;li&gt;Backup with retention periods&lt;/li&gt;
&lt;li&gt;Multi-AZ deployments for increased availability&lt;/li&gt;
&lt;li&gt;Read replicas to scale out for heavy read workloads&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Hosting and RDBMS on EC2 instance&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Install your RDBMS of choice on an EC2 instance&lt;/li&gt;
&lt;li&gt;Ultimate flexibility of architecture to fit your requirements&lt;/li&gt;
&lt;li&gt;Amazon EBS for fault-tolerant storage for data and logs.&lt;/li&gt;
&lt;li&gt;For demanding workloads, you can use Amazon EBS Provisioned IOPS and specify the IOPS required.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Non-relational DBs&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Amazon DynamoDB : Cloud-native solution with all AWS goodness out-of-the-box.&lt;/li&gt;
&lt;li&gt;Amazon DocumentDB : Ready for JSON data at scale. Compatible with MongoDB&lt;/li&gt;
&lt;li&gt;Amazon KeySpace : Full compatibility with Apache Cassandra&lt;/li&gt;
&lt;li&gt;Amazon Neptune : Reliable and fully managed graph DB.&lt;/li&gt;
&lt;li&gt;Amazon QLDB (Quantum Ledger DB) : Fully managed ledger DB with transparent, immutable and cryptographically verifiable transaction log owned by a central authority.&lt;/li&gt;
&lt;li&gt;Amazon Timestream : Server less time series DB for IoT and operational applications.&lt;/li&gt;
&lt;li&gt;You may use EC2 to host any other non-relational DB you're working with&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Storage and backups&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Use Amazon S3 for static storage like files and media.&lt;/li&gt;
&lt;li&gt;Use Amazon EBS as attachable storage volumes with EC2 instances.&lt;/li&gt;
&lt;li&gt;EBS runs in a different lifecycle from that of the instance it's attached to.&lt;/li&gt;
&lt;li&gt;You can take a snapshot of an EBS volume and store it on S3. Since the changes only are stored, more frequent snapshot will decrease snapshot time&lt;/li&gt;
&lt;li&gt;EBS goes as large as 16TB and the ability to stripe volumes for increased IO performance.&lt;/li&gt;
&lt;li&gt;Use EBS Provisioned IOPS to meet the needs of your IO-intensive workloads - 16k (all instance types) to 64k (Nitro systems) and io2 block express volume type for up to 256k IOPS and max storage 64TB&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Automatic Scaling&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Use Auto Scaling alone with CloudWatch and Amazon ELB (Elastic Load Balancer) to scale up/down/in/out your fleet automatically based on monitoring-based results.&lt;/li&gt;
&lt;li&gt;Use Auto Scaling groups to scale different layers of the application independently.&lt;/li&gt;
&lt;li&gt;You can also scale EC2 instances manually using the EC2 API&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Additional Security Features&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The large scale of the AWS network helps protect you against DDoS attacks via scaling up your app in response to the large traffic using ELB, CloudFront and Route53&lt;/li&gt;
&lt;li&gt;AWS Shield : Managed service that protects you against various forms of the DDoS attacks. It's standard offering is free and active in your account and protects against common attacks. The advanced offering provides you with a near-real-time visibility into tha attack, integration with other services and the ability to access the AWS DDoS Response Team for large-scale sophisticated attacks.&lt;/li&gt;
&lt;li&gt;AWS WAF (Web app framework) : Works with CloudFront of Application Load Balancer to protect your apps against XSS, SQL injection and DDoS attacks. Also comes with a fully featured API helping your in automation.&lt;/li&gt;
&lt;li&gt;AWS Firewall Manager : Centrally configure and manage firewall rules across your accounts and applications in &lt;strong&gt;AWS Organizations&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Failover&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Availability Zones are physically separated locations for app redundancy and fault-tolerance. It's recommended to deploy your EC2 instances in multiple AZs. You should make sure that distribution of provisions among AZs guarantees high availability and consistency, which is already managed for you in most of AWS.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#key-considerations-on-using-aws-for-web-app-hosting"&gt;
  &lt;/a&gt;
  Key considerations on using AWS for web app hosting
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#no-more-physical-appliances"&gt;
  &lt;/a&gt;
  No more physical appliances
&lt;/h3&gt;

&lt;p&gt;No more HW firewalls, routers, load balancer with your AWS Cloud architecture, just SW solutions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#firewalls-everywhere"&gt;
  &lt;/a&gt;
  Firewalls everywhere
&lt;/h3&gt;

&lt;p&gt;Every host is locked down with a firewall. You should analyze traffic between hosts within your architecture to determine which ports needs to be open and create security groups in accordance. You can use network access control lists within Amazon VPC for subnet-level lockdown.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#consider-the-availability-of-multiple-datacenters"&gt;
  &lt;/a&gt;
  Consider the availability of multiple Datacenters
&lt;/h3&gt;

&lt;p&gt;Think of AZs within an AWS region as separate Datacenters, logically and physically separated. You can use Amazon VPC to keep your resources in the same logical network while leveraging AZs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#threat-hosts-as-ephemeral-and-dynamic"&gt;
  &lt;/a&gt;
  Threat hosts as ephemeral and dynamic
&lt;/h3&gt;

&lt;p&gt;No assumption on the host IP, location, ever-lasting availability of the host. Your key to fault-tolerance and high scalability of your apps is the dynamic design that fits with the wild nature of the cloud world.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#consider-containers-and-serverless"&gt;
  &lt;/a&gt;
  Consider containers and serverless
&lt;/h3&gt;

&lt;p&gt;Consider modernizing your application using Containers and Serveless technologies, leveraging services like AWS Fargate and AWS Lambda for more agile apps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#consider-automated-deployment"&gt;
  &lt;/a&gt;
  Consider automated deployment
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Amazon Lightsail : Simple app development VPS with everything needed to build a Web app or website. Ideal for simple workloads and quick deployments.&lt;/li&gt;
&lt;li&gt;AWS Elastic Beanstalk : Easy-to-use service for deploying and scaling web apps developed with most of the technologies (Ruby, NodeJS, Docker,..) on familiar servers (Apache, NGINX, ..)&lt;/li&gt;
&lt;li&gt;AWS App Runner : Quickly deploy your containerise Web apps at scale effortlessly and without prior infrastructure knowledge required.&lt;/li&gt;
&lt;li&gt;AWS Amplify : Framework of tools and services to help front-end web and mobile developers to build scalable products with an AWS-powered backend. Also used for deploying static web apps.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Migration to an AWS cloud architecture requires some consideration and changes, but really pays off.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>webdev</category>
      <category>cloud</category>
      <category>devops</category>
    </item>
  </channel>
</rss>
