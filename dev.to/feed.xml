<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>5 Most Unused and Ununderstood HTML TagsüöÄ</title>
      <author>Shubham Jadhav</author>
      <pubDate>Thu, 16 Sep 2021 05:48:52 +0000</pubDate>
      <link>https://dev.to/dev_shubham/5-most-unused-and-ununderstood-html-tags-3lj3</link>
      <guid>https://dev.to/dev_shubham/5-most-unused-and-ununderstood-html-tags-3lj3</guid>
      <description>&lt;p&gt;Here are 5 most rare used html tags which we learn today. While they might familiar but still quite useful in some situations. &lt;br&gt;
   So let's start learning most 5 html unused tags... &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;abbr tag&lt;/p&gt;

&lt;p&gt;abbr tag only used for define abbreviated words. You need to define a title inside a tag and when a user is hover on it the full definition appears below. &lt;br&gt;
 abbr tag is rarely used, but the benefits are many for screen readers, search engine and spellchecker. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rW8KByXG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3jrmwd62ie73iafrp97.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rW8KByXG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3jrmwd62ie73iafrp97.jpg" alt="abbr tag"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2.fieldset tag&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; Fieldset is a nifty little attribute that you can add to your forms to logically group form elements. Once applied the fieldset tag draws a box around the elements within the fieldset. 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--heq9JGWV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z0jdlfk1e47z584jz450.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--heq9JGWV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z0jdlfk1e47z584jz450.jpg" alt="fieldset tag"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.ins tag&lt;/p&gt;

&lt;p&gt;If you want underline without using css, then use ins tag. This tag add underline of the text which is inside the ins tag. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ywJMI5nu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vgl2dbc7j20sfasiy66.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ywJMI5nu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vgl2dbc7j20sfasiy66.jpg" alt="ins tag"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.del tag&lt;/p&gt;

&lt;p&gt;This tag is as similar to ins tag but the difference is ins tag used to underline words and del tag is shown what's been taken out with a strikthrough.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kOUR7mxY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/osz1sa50evjcl8qott56.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kOUR7mxY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/osz1sa50evjcl8qott56.jpg" alt="del tag"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5.cite tag &lt;/p&gt;

&lt;p&gt;cite tag is used to define text inside other elements for a reference. Typically the browser will render the text inside of the cite tag in italics. The cite tag is really useful for citing bibliographic and other site references.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xpnctzfC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvxx14ewvjgk1hzs1dch.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xpnctzfC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvxx14ewvjgk1hzs1dch.jpg" alt="cite tag"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üôè Thanks for reading... &lt;br&gt;
üëâ Stay tuned with us for more &lt;br&gt;
   interesting article.&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Coding Interview: Variables, data types, scope and hoisting in JS</title>
      <author>Karen Molina</author>
      <pubDate>Thu, 16 Sep 2021 05:36:29 +0000</pubDate>
      <link>https://dev.to/voidrizoma/coding-interview-variables-data-types-scope-and-hoisting-in-js-2dgl</link>
      <guid>https://dev.to/voidrizoma/coding-interview-variables-data-types-scope-and-hoisting-in-js-2dgl</guid>
      <description>&lt;p&gt;Hi! &lt;/p&gt;

&lt;p&gt;Some of things we have to know about JS are: variables, data types, scope and hoisting. Why? 'Cause every time we use, transform and manipulate a lot of data. No matter if the data came from our services or the frontend. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-types"&gt;
  &lt;/a&gt;
  Data Types
&lt;/h3&gt;

&lt;p&gt;The Data types are important in every programming languages. In JS we have two classes of types: primitives and objects. Primitives contains different data types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Boolean: represent two logical values; true and false.&lt;/li&gt;
&lt;li&gt;Null: literal represent a null value. &lt;/li&gt;
&lt;li&gt;Undefined: A variable has not been assigned a value. &lt;/li&gt;
&lt;li&gt;Number: Any number&lt;/li&gt;
&lt;li&gt;BigInt: In JS we got two types of numbers, the BigInt means that we have to assign one exact value as: 2n ** 53n&lt;/li&gt;
&lt;li&gt;String: represent textual data. Example: "Hola olla"&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h3&gt;

&lt;p&gt;A variable is a container for a data or value. In Javascript we have 3 ways to declare it: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;var&lt;/li&gt;
&lt;li&gt;let&lt;/li&gt;
&lt;li&gt;const&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#var"&gt;
  &lt;/a&gt;
  var
&lt;/h4&gt;

&lt;p&gt;Before EcmaScript 6, we use only the keyword var to storage our values. But with only one way to declare variables, we got a problem, all the var variables can be redeclared and updated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//var

var sayHello = "Hola olla"

console.log(sayHello) // "Hola olla"

var sayHello= "Hi!"

console.log(sayHello) // "Hi"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#let"&gt;
  &lt;/a&gt;
  let
&lt;/h4&gt;

&lt;p&gt;When ES6 arrived, the problem about updated the variables with var, has ended. Specially when we use variables inside curly brackets. So, ES6 introduce with let a new scope: the block scope.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//let 

let sayHello = "Hola olla"

console.log(sayHello) // "Hola olla"

sayHello = "Hi!"
console.log(sayHello) // "Hi"

let sayHello= "Hi!"

console.log(sayHello) // error: Identifier 'sayHello' has already been declared
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#const"&gt;
  &lt;/a&gt;
  const
&lt;/h4&gt;

&lt;p&gt;Meanwhile let resolve the updated problem. Const resolve both problems. With const we can't updated or redeclared variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// const

const sayHello = "Hola olla"

console.log(sayHello) // "Hola olla"

sayHello = "Hi!" // error: Assignment to constant variable. 

const sayHello= "Hi!" // error: Identifier 'sayHello' has already been declared

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#scope"&gt;
  &lt;/a&gt;
  Scope
&lt;/h3&gt;

&lt;p&gt;Ok, let's talks about scope. The scope determines the visibility or accessibility of variables. We have 3 types of scope: 1) Global scope, 2) Function scope, 3) block scope. But I want to add the local scope and the module scope.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Global scope: All the variables declared outside any function have global scope. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Function scope: When we create any new functions, each function creates a new scope. That's mean, all the variables declared inside the function, don't be accesible from any other functions outside. Other way to recognize the functions scope can be as local scope. All variables declared within a functions, are local variables.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Block scope&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The block scope has been introduced in ES6, with let and const. That's means, every variables declared inside the curly brackets { }, can't be accessed in other scope. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Module scope&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When we create modules, any variables declared outside functions, can be considered as global variables, but no. Any variable declared inside the module just can be accessed inside that module, unless the module is explicitly exported.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hoisting"&gt;
  &lt;/a&gt;
  Hoisting
&lt;/h3&gt;

&lt;p&gt;Sometimes JS is weird. And hoisting can be part of that strange things. The hoisting is a behavior in any variable or function can be used before declare it. That happened more before ES6, when we use the keyword var. &lt;/p&gt;

&lt;p&gt;After ES6, the hoisting is a default behavior of moving any declarations to the top of their scope. Remember, with let and const we have the block scope. So, any declaration is moved to the top. &lt;/p&gt;

&lt;p&gt;Also, one more thing to know is, JS hoists the declarations but cannot initialized. For example, if we have a var declaration, this will be initialized with an undefined value as default. &lt;/p&gt;

&lt;p&gt;I think hoisting is confused in the beginning, but, each time when JS has been compiled, all the declarations and functions are assigned in some memory space. So, the hoisting, move all declarations at top, to save that's declarations in the memory. Really, all the code stay how we wrote them.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>variables</category>
      <category>scope</category>
    </item>
    <item>
      <title>How to Estimate E-commerce Website Development cost in 2021?</title>
      <author>Vrinsoft PTY LTD</author>
      <pubDate>Thu, 16 Sep 2021 05:16:57 +0000</pubDate>
      <link>https://dev.to/vrinsoftau/how-to-estimate-e-commerce-website-development-cost-in-2021-1ee5</link>
      <guid>https://dev.to/vrinsoftau/how-to-estimate-e-commerce-website-development-cost-in-2021-1ee5</guid>
      <description>&lt;p&gt;E-commerce website development cost is one of the wide concepts of 2021 and that is because it is consistently praised. As we are living in the era of digitization, the popularity of online shopping has taken a huge place in 2021. Well, having seen the growth and the importance of e-commerce development, many businesses have thought to get themselves switched into the market of e-commerce development.&lt;/p&gt;

&lt;p&gt;Though e-commerce development companies are earning a good figure, In 2021, e-commerce sales are expected to account for 18.1 percent of retail sales worldwide. Still many of them are confused with e-commerce Website Development Costs. That being said, here we are going to discuss the same:&lt;/p&gt;

&lt;p&gt;For more information visit our blog: &lt;a href="https://www.vrinsoft.com.au/estimated-e-commerce-website-development-cost/"&gt;&lt;strong&gt;How to Estimate E-commerce Website Development cost in 2021?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>awardwinning</category>
      <category>appdevelopmentaustralia</category>
      <category>ecommercewebsitedevelopment</category>
      <category>melbourne</category>
    </item>
    <item>
      <title>Software Testing Training Institute</title>
      <author>QSpiders Rajajinagar</author>
      <pubDate>Thu, 16 Sep 2021 05:02:50 +0000</pubDate>
      <link>https://dev.to/qrajajinagar/software-testing-training-institute-3f52</link>
      <guid>https://dev.to/qrajajinagar/software-testing-training-institute-3f52</guid>
      <description>&lt;p&gt;QSpiders is a best in class training institute that aims in building a strong subject knowledge of the student in the software industry. The institute provides young job aspirants the perfect launch-pad to build a rewarding career in the growing IT sector. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#javascript-webdev-programming-python-testing"&gt;
  &lt;/a&gt;
  javascript #webdev #programming #python #testing
&lt;/h1&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>python</category>
      <category>testing</category>
    </item>
    <item>
      <title>The Difference Between</title>
      <author>Mr.Noixe</author>
      <pubDate>Thu, 16 Sep 2021 04:39:11 +0000</pubDate>
      <link>https://dev.to/mr_noixe/the-difference-between-1m1f</link>
      <guid>https://dev.to/mr_noixe/the-difference-between-1m1f</guid>
      <description>&lt;p&gt;A member of my Discord server was confused about the difference between Git, Git Bash, and Git Hub. This was my explanation.&lt;/p&gt;

&lt;p&gt;What is Git?&lt;/p&gt;

&lt;p&gt;Git is software that enables version control. With each change to a file, even the slightest change can become a new version of the file you working on. You decide what changes will be tracked, but Git is what enables you to track those changes. In case you're asking yourself why it's important to track your changes allow me to walk you through a common use case.&lt;/p&gt;

&lt;p&gt;Imagine you are working on a project that has many files. Let's say that while you working on this project you accidentally introduce a bug in your code. Of course, your first instinct is to try to locate the bug and fix it. However, let's say despite all your efforts to locate and fix the bug, you are unsuccessful. You can not find what is causing your application to malfunction. Now, let me ask you a question. How helpful would it be if you could go back in time to when the document was totally bug-less? That essentially is what Git enables you to do. Using Git you can track your changes and create different versions of your project. Versions that you can then navigate between using applications like Git Hub, we'll talk more about Git Hub a little later. Keep on reading.&lt;/p&gt;

&lt;p&gt;What is Git Bash?&lt;/p&gt;

&lt;p&gt;Git Bash is a terminal. Before there were graphic user interfaces (GUIs) there were terminals. A terminal is a software that is primarily used to navigate the folders and files of a computer. Terminals have other features to be utilized, but for right now think of it as a file explore. Imagine a file explorer without any images or visual layout that you can use to navigate. That's basically what using a terminal is like. Terminals come with commands that you can enter to run certain instructions to your computer. You can use a terminal to create files, navigate into folders, initiate downloads, and more. All from a simple text-only screen.&lt;/p&gt;

&lt;p&gt;Here's an example of what a terminal can look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2XTtCug5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11n3rio1ex3g7j30jmrd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2XTtCug5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11n3rio1ex3g7j30jmrd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Git Bash terminal.&lt;/p&gt;

&lt;p&gt;What is Git Hub&lt;/p&gt;

&lt;p&gt;A folder that holds code is often referred to as a repository or a repo for short. Git Hub is a very popular platform that programming teams use to store and access repositories. With Git Hub, you can do what's called a git pull, which essentially is downloading and connecting a repo on Git Hub to your local machine. From there you can then begin to make edits to the files that are in that repo on your local machine. To save your files locally you can usually click file &amp;gt; then save, to store your changes on your local computer (or ctrl + s as a shortcut). Keep in mind a normal save like this only saves the changes to your local machine. How do you save the changes on Git Hub? To store the changes on Git there are a few commands that you need to run inside of your terminal. To save the changes to Git Hub you must run the Git commit command which commits the changes and creates a new repo version. After committing the changes, in order to add the repo version to Git Hub, you must then run the git push command in your terminal. This officially pushes(adds) the repo to Git Hub. Alternatively, you can use the Git Hub desktop version to complete the same task, but with an actual interface.&lt;/p&gt;

&lt;p&gt;Explaining the Git in Git Hub&lt;/p&gt;

&lt;p&gt;Along with each commit that is pushed to Git Hub comes a timestamp attached to it. In Git Hub you can easily navigate between the different versions of your repo according to the timestamps. Imagine that you committed and pushed separate file changes to Git Hub at 12:00 pm and at 3:45 pm today. For each commit, there will be a repo version to go with it. One repo version for the commit and push made for 12:00 pm today, and the same for the commit and push made at 3:45 pm Today. You will then be able to navigate the history of the commits made to the repo and select which version you would like to view. This capability puts the git in Git Hub. Remember Git is all about version control and here we see that Git Hub enables us to simply travel between the many versions of a repo.&lt;/p&gt;

&lt;p&gt;I hope you found this helpful, this was not meant to be a deep dive but a beginner introduction into the three topics. Let me know if you want to join my discord server, It's made just for beginning developers. I can send you an invite directly.&lt;/p&gt;

&lt;p&gt;Thanks for stopping by,&lt;/p&gt;

&lt;p&gt;Mr.Noixe&lt;/p&gt;

&lt;p&gt;Follow Me On Instagram Here:&lt;a href="https://www.instagram.com/mr.noixe/"&gt;Link&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Follow Me On Twitter: &lt;a href="https://twitter.com/LEGENDWILLIAMS2"&gt;Link&lt;/a&gt; @Mr.Noixe&lt;/p&gt;

&lt;p&gt;More On Git: &lt;a href="https://www.atlassian.com/git/tutorials/what-is-git"&gt;Link&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;More On Git Bash:&lt;a href="https://www.atlassian.com/git/tutorials/git-bash"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More On Git Hub: &lt;a href="https://techcrunch.com/2012/07/14/what-exactly-is-github-anyway/"&gt;Link&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Video On GUI: &lt;a href="https://www.youtube.com/watch?v=XIGSJshYb90&amp;amp;feature=youtu.be"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More On Git Hub: &lt;a href="https://techcrunch.com/2012/07/14/what-exactly-is-github-anyway/"&gt;https://techcrunch.com/2012/07/14/what-exactly-is-github-anyway/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>EventBridge: The Enterprise Service Bus You Probably Didn't Realize Was An ESB</title>
      <author>Rich Dudley</author>
      <pubDate>Thu, 16 Sep 2021 02:40:02 +0000</pubDate>
      <link>https://dev.to/rjdudley/eventbridge-the-enterprise-service-bus-you-probably-didn-t-realize-was-an-esb-5ffa</link>
      <guid>https://dev.to/rjdudley/eventbridge-the-enterprise-service-bus-you-probably-didn-t-realize-was-an-esb-5ffa</guid>
      <description>&lt;p&gt;AWS takes a lot of heat for its product names, usually becasue they're weird, and that's especially true for EventBridge but for a different reason.  EventBridge is often marketed as the successor for Cloudwatch events, but that description greatly undersells the service.  EventBridge is more than just a relay for things which happened, it is by any defintion a fully-fledged enterprise service bus, and is worthy of consideration with Kafka or MuleSoft or other event-based messaging platforms.&lt;/p&gt;

&lt;p&gt;In Services Oriented Architecture, an Enterprise Service Bus is actually a compound pattern realizing seven other subpatterns.  Someone somewhere knew what they were doing when they designed EventBridge because every ESB subpattern can be realized with an EventBridge feature.  Here's how the features line up to the patterns:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;SOA Subpattern&lt;/th&gt;
&lt;th&gt;EventBridge Feature&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Asynchronous Queuing&lt;/td&gt;
&lt;td&gt;EventBridge can use SQS as a destination to queue events before sending to the consumers, as shown in this pattern: &lt;a href="https://serverlessland.com/patterns/eventbridge-sqs"&gt;https://serverlessland.com/patterns/eventbridge-sqs&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Event-driven Messaging&lt;/td&gt;
&lt;td&gt;As a consumer, EventBridge has direct integration with over 130 AWS sources, plus a number of third party SaaS platforms.  Direct integration with the API Gateway as well as a dirext PutEvents API allows for integration from custom sources.  EventBridge supports 35 targets, including API Gateway destinations for custom integrations.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Intermediate Routing&lt;/td&gt;
&lt;td&gt;A rules engine filters events and routes messages to one or more targets.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Policy Centralization&lt;/td&gt;
&lt;td&gt;EventBridge has a schema registry, supporting either OpenAPI or JSON-Schema.  Code bindings for several languages can be downloaded from the schema registry.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reliable Messaging&lt;/td&gt;
&lt;td&gt;EventBridge offers at-least once delivery, with retry and durable storage across multiple availability zones.  EventBridge also features archive and replay of events.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rules Centralization&lt;/td&gt;
&lt;td&gt;Routing and transformation rules are localized to a single service&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Service Broker&lt;/td&gt;
&lt;td&gt;The Service Broker pattern is itself a compound pattern, composed of the Data Format Transformation, Data Model Transformation and Protocol Bridging patterns.  EventBridge transformation rules realize Data Format Transformation and Data Model Transformation, while Protocol Bridging occurs mainly with API Gateway integrations&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;It's hard to understate the value of API endpoints.  These realize Service Loose Coupling, which makes EventBridge completely agnostic to whatever language or application is being used by producers and consumers.  There are no proprietary protocols, libraries or config languages beyond HTTP.  This allows easy integration across applications, business units or even cloud providers.&lt;/p&gt;

&lt;p&gt;Many purpose-built ESBs require a great deal of infrastructure and team members to support them, but EventBridge is serverless.  There is no infrastructure to manage, and no capacity to plan around other than the limits documented at &lt;a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-quota.html"&gt;https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-quota.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;EventBridge itself can be configured in a matter of minutes, and with its direct integrations to so many AWS services events can be flowing shortly thereafter.  Accomplishing so much in a single iteration is a tremendous boost to systems integration.&lt;/p&gt;

&lt;p&gt;In addition to its documentaion, EventBridge is also supported by a number of patterns on Serverlessland, at &lt;a href="https://serverlessland.com/patterns?services=eventbridge"&gt;https://serverlessland.com/patterns?services=eventbridge&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With its speed to implement and ESB-fulfilling features, EventBridge deserves consideration alongside other messaging systems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Enterprise_service_bus"&gt;https://en.wikipedia.org/wiki/Enterprise_service_bus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://patterns.arcitura.com/soa-patterns/compound_patterns/enterprise_service_bus"&gt;https://patterns.arcitura.com/soa-patterns/compound_patterns/enterprise_service_bus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/eventbridge/features/"&gt;https://aws.amazon.com/eventbridge/features/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>An Introduction to Git, Part 1</title>
      <author>Aaron McCollum</author>
      <pubDate>Thu, 16 Sep 2021 02:23:01 +0000</pubDate>
      <link>https://dev.to/aaronmccollum/an-introduction-to-git-part-1-1ph</link>
      <guid>https://dev.to/aaronmccollum/an-introduction-to-git-part-1-1ph</guid>
      <description>&lt;p&gt;This is part 1 of an introduction to Git, a version control system that‚Äôs very popular with software development. Part 2 will be posted later this week.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-history-of-version-control"&gt;
  &lt;/a&gt;
  A History of Version Control
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Version Control Systems&lt;/strong&gt; (VCS for short) have been around for awhile in software development. They are programs that help you make and record changes to files over time with the ability to bring back specific versions later on. It‚Äôs like the Save feature in Microsoft Word but you can have access to all your previous drafts, not just the most recent saved version.&lt;/p&gt;

&lt;p&gt;The first type of version control systems were local only on your computer, without any network connecting. Soon, with the rise of the internet and networks connecting to servers, centralized version control systems that housed projects on a shared server attached to many computers became the popular method. A centralized VCS was better, since multiple people to connect to the server at once to work on a project. The downside with both the local and central VCS systems though was that they both relied on the project being stored in one location. If something happened (stolen computer, server destroyed or compromised, etc.), the project was gone.&lt;/p&gt;

&lt;p&gt;Thus came the &lt;strong&gt;Distributed Version Control System&lt;/strong&gt; (DVCS). A DVCS is the current setup for a version control system, and Git is an example. With a DVCS, the project is cloned on both the server and all the computers working on the project. If connected to a network and the server, you can push updates to the project in the network. However, if you are not connected to a network, you can still push updates locally to the project on your local disk. This means that a compromised server or the destruction of a computer or two will not mean the total loss of your project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-history-of-git"&gt;
  &lt;/a&gt;
  A History of Git
&lt;/h3&gt;

&lt;p&gt;Git was created in 2005 to solve a problem on Linux distributions. Before 2005, Linux had an agreement in place with a proprietary version control system called Bitkeeper (the agreement was created in 2002). In three short years, the relationship between the two sides disappeared and the free use of Bitkeeper was revoked. To fill the void, Linus Torvalds (the creator of Linux) spearheaded the creation of Git, a free open-source DVCS for developers.&lt;/p&gt;

&lt;p&gt;Git‚Äôs focuses on five core areas: speed, simple design, support for non-linear development (it can branch out into various ‚Äòalternative realities‚Äô), fully distributed, and the ability to handle large projects easily.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-git-thinks"&gt;
  &lt;/a&gt;
  How Git Thinks
&lt;/h3&gt;

&lt;p&gt;Git thinks of file changes as snapshots of the project as a whole. With a commit, Git takes a snapshot of your entire project and saves it as a new version, even if you only edited a small part of that project. If other parts of the project are not changed, that part of the snapshot is linked back to the previous identical file. You can also bring up previous snapshots of your project to compare or split off and create new branches of your project.&lt;/p&gt;

&lt;p&gt;Additionally, you have the whole history of the project on your computer when you download the project onto your computer. Since you are working on a local host, the speed is much faster than if you connected and pushed updates to a server only. Also, working on a local host means an internet is not constantly required to make updates to the project on your computer.&lt;/p&gt;

&lt;p&gt;There are three states a file in your project can be in when using Git:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Modified: changes have been made but are not committed yet&lt;/li&gt;
&lt;li&gt;Staged: your file is marked for commit in your next snapshot&lt;/li&gt;
&lt;li&gt;Committed: data is stored in your local project database and a new snapshot is created&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>tutorial</category>
      <category>learning</category>
      <category>git</category>
      <category>github</category>
    </item>
    <item>
      <title>4 Books Every Junior Software Developer Should Read</title>
      <author>Jordan Burroughs</author>
      <pubDate>Thu, 16 Sep 2021 01:59:59 +0000</pubDate>
      <link>https://dev.to/jburroughs/4-books-every-junior-software-developer-should-read-3oi7</link>
      <guid>https://dev.to/jburroughs/4-books-every-junior-software-developer-should-read-3oi7</guid>
      <description>&lt;p&gt;If you decide to click away after seeing that I recommend the same titles that every other article tells you to read, I wouldn't blame you. Although, there is a reason why these books resonate with nearly all software developers that read them (and not only beginners).&lt;/p&gt;

&lt;p&gt;This post will be different because I will be giving you a brief explanation on why you should read them and what you, as a new software developer, should expect to get out of them. &lt;/p&gt;

&lt;p&gt;This is a post that I know would have been helpful to me when I first started looking to enhance my new career not too long ago.&lt;/p&gt;

&lt;p&gt;So I was (and still am) in your shoes. Without further ado, here's what you came for:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CWsH4Ua_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gnp5z322in6no0gc75lb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CWsH4Ua_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gnp5z322in6no0gc75lb.jpg" alt="Cracking the Coding Interview Cover"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-cracking-the-coding-interview"&gt;
  &lt;/a&gt;
  1. Cracking the Coding Interview
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#by-gayle-laakmann-mcdowell"&gt;
  &lt;/a&gt;
  &lt;em&gt;by Gayle Laakmann McDowell&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Whether you are currently looking for a job or whether you are perfectly happy in your current role, this book is an absolute must for any dev, especially juniors. &lt;/p&gt;

&lt;p&gt;Not only are there endless amounts of practice problems with detailed solutions, but the first sections of the book dissect the entire interview process and give quick concept overviews that anyone could find useful for reference, or even last minute cramming (which I would &lt;strong&gt;NOT&lt;/strong&gt; recommend doing, but it doesn't hurt to fill that need).&lt;/p&gt;

&lt;p&gt;I first got this book in college to prep for internship interviews and ever since then, I see myself always referring back to it whenever another interview is coming up, or when I need a quick refresher on certain topics.&lt;/p&gt;

&lt;p&gt;From behavioral and technical interview tips to data structures and algorithms, this one has it all. 13/10 would recommend.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4ZvbgJB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ivx3kmbqikn59nidfyj.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4ZvbgJB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ivx3kmbqikn59nidfyj.jpeg" alt="Living by the Code Cover"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-living-by-the-code"&gt;
  &lt;/a&gt;
  2. Living by the Code
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#by-enrique-l%C3%B3pez-ma%C3%B1as-ray-wenderlich"&gt;
  &lt;/a&gt;
  &lt;em&gt;by Enrique L√≥pez Ma√±as, Ray Wenderlich&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;This one was pretty interesting and unique. The authors basically interview top developers and innovators in the tech space and they give advice to young developers. &lt;/p&gt;

&lt;p&gt;What else do I need to say? You get advice straight from the horse's mouth.&lt;/p&gt;

&lt;p&gt;But here's what I love the most:&lt;/p&gt;

&lt;p&gt;Each interviewee is usually asked questions related to their specific field or domain, but there is also a set questions that the interviewer asks &lt;strong&gt;everyone&lt;/strong&gt;. Among those is: "What are the 3 books (or resources) that have had a lasting impact on how you do your work?" The authors then list that person's recommendations at the end of each interview!&lt;/p&gt;

&lt;p&gt;In the end, you have an endless amount of resources that you can use to spawn new areas of interest and help naturally guide you in the beginnings of your career. From this book alone, my reading list has expanded tenfold and yours can too, as soon as you pick up this book.&lt;/p&gt;

&lt;p&gt;Good starting point to boost your career. 12/10&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BHrDFi7H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bfi6rqlrtwkio3or46u0.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BHrDFi7H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bfi6rqlrtwkio3or46u0.jpeg" alt="Clean Code Cover"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-clean-code-a-handbook-of-agile-software-craftsmanship"&gt;
  &lt;/a&gt;
  3. Clean Code: A Handbook of Agile Software Craftsmanship
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#by-uncle-bob-robert-c-martin"&gt;
  &lt;/a&gt;
  &lt;em&gt;by Uncle Bob (Robert C. Martin)&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Ah yes... the quintessential classic. This book appears on every software dev book recommendation list. It is pretty much the bible for clean code that is a must read for everyone in the field.&lt;/p&gt;

&lt;p&gt;I read this coming out of college and for me, it was a revelation. In school they teach you the basics of programming, computer theory, and maybe even some assembly. But, Uncle Bob teaches you importance of clean code and the advantages of adjusting your style to fit it.&lt;/p&gt;

&lt;p&gt;Hallelujah! 14/10&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yyz3U5gX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxpm2ikp0wdatzlomjoy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yyz3U5gX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxpm2ikp0wdatzlomjoy.jpg" alt="The Pragmatic Programmer Cover"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-the-pragmatic-programmer-from-journeyman-to-master"&gt;
  &lt;/a&gt;
  4. The Pragmatic Programmer: From Journeyman to Master
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#by-andy-hunt-dave-thomas"&gt;
  &lt;/a&gt;
  &lt;em&gt;by Andy Hunt, Dave Thomas&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Let's finish off with yet another classic. With a seemingly endless series of topics (and smaller tips within those) the authors analyze many different aspects of software development and how to think beyond if-statements and for-loops. &lt;/p&gt;

&lt;p&gt;From the perspective of a beginner, you can't get much better than this. There are so many tidbits of information, that any time you reread this book, you'll learn something new to apply directly to your code and career. &lt;/p&gt;

&lt;p&gt;Learn exactly what it means to be a Pragmatic Programmer, you won't regret it. 13/10 - exceptionally pragmatic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;One common theme with all of these books is the idea that you will always find your way back to them throughout your career. That is why it is crucial to get them in your library ASAP.&lt;/p&gt;

&lt;p&gt;There are many other books I have read that didn't make this list (including some non-technical books that can make an &lt;strong&gt;overall&lt;/strong&gt; impact on your life), but let's start with these guys for now. &lt;/p&gt;

&lt;p&gt;I'm always open to book suggestions, so leave a comment with some of your good reads.&lt;/p&gt;

&lt;p&gt;Remember that it is never the wrong choice to invest in your education! The time and money you spend to better yourself now, will always payoff big in the long run. üòÄ&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading-my-first-ever-blog-if-you-want-more-tech-tips-software-stuff-and-bussin-blogs-you-can-throw-me-a-follow-on-twitter"&gt;
  &lt;/a&gt;
  Thanks for reading my first ever blog! If you want more tech tips, software stuff, and bussin' blogs, you can throw me a follow on &lt;a href="https://www.twitter.com/JBurroughsTech"&gt;Twitter&lt;/a&gt;üî•ü§òüèΩüê∂
&lt;/h3&gt;

</description>
      <category>beginners</category>
      <category>books</category>
      <category>career</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Vocabulary Building day15</title>
      <author>vindhya Hegde </author>
      <pubDate>Thu, 16 Sep 2021 01:51:31 +0000</pubDate>
      <link>https://dev.to/vindhyasadanand/vocabulary-building-5eko</link>
      <guid>https://dev.to/vindhyasadanand/vocabulary-building-5eko</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;glut&lt;/strong&gt;(noun): an excessive supply&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--82D3Bl_Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://previews.123rf.com/images/rudall30/rudall301103/rudall30110300067/9187072-iconic-white-figure-sit-with-the-glut.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--82D3Bl_Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://previews.123rf.com/images/rudall30/rudall301103/rudall30110300067/9187072-iconic-white-figure-sit-with-the-glut.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=glut&amp;amp;oq=glut&amp;amp;aqs=chrome..69i57j0i67i433j0i67j0i67i433l2j69i60l2j69i61.1621j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;fortuitous&lt;/strong&gt;(adjective): happening by a lucky chance; fortunate.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Fp9Yk1K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/hrZboPJQV2w/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Fp9Yk1K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/hrZboPJQV2w/maxresdefault.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=fortuitous&amp;amp;oq=fortuitous&amp;amp;aqs=chrome..69i57j0i433i512j0i131i433i512j0i512l7.12059j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;superfluous&lt;/strong&gt;(adjective): unnecessary, especially through being more than enough.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y6e0BPaL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/zZL-r30cla8/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y6e0BPaL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/zZL-r30cla8/maxresdefault.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=superfluous+meaning&amp;amp;oq=superfluous&amp;amp;aqs=chrome.0.0i433i512j69i57j0i512l8.8189j1j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;obscure&lt;/strong&gt;(verb): make unclear.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tk5sqWI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/http://1.bp.blogspot.com/_oOfgV-vqn1E/S7hK5RYtbcI/AAAAAAAAAMY/TyPpZwaoc7Q/s320/AMBIGUOUS-Unclear%2Bin%2Bmeaning%253B%2Bconfusing%253B%2Bcapable%2Bof%2Bbeing%2Binterpreted%2Bin%2Bdifferent%2Bways.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tk5sqWI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/http://1.bp.blogspot.com/_oOfgV-vqn1E/S7hK5RYtbcI/AAAAAAAAAMY/TyPpZwaoc7Q/s320/AMBIGUOUS-Unclear%2Bin%2Bmeaning%253B%2Bconfusing%253B%2Bcapable%2Bof%2Bbeing%2Binterpreted%2Bin%2Bdifferent%2Bways.gif" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=obscure&amp;amp;oq=obscure&amp;amp;aqs=chrome..69i57j46i275i433i512j0i20i263i433i512j0i20i263i512j0i433i512j0i512l3j0i433i512l2.3668j1j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;mitigate&lt;/strong&gt;(verb): make (something bad) less severe, serious, or painful&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DcLuDlkV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://smallbusinessify.com/wp-content/uploads/2018/11/How-to-mitigate-risks-in-my-business-1024x751.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DcLuDlkV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://smallbusinessify.com/wp-content/uploads/2018/11/How-to-mitigate-risks-in-my-business-1024x751.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=mitigate&amp;amp;oq=mitigate&amp;amp;aqs=chrome.0.69i59j0i131i433i512j0i20i263i512j0i512l2j0i433i512l2j0i512l2j0i433i512.3656j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;br&gt;
I hope this helps you if you are preparing for GRE exams.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>gre</category>
      <category>day15</category>
    </item>
    <item>
      <title>Clean your condition üßº</title>
      <author>Heru Hartanto</author>
      <pubDate>Thu, 16 Sep 2021 00:27:58 +0000</pubDate>
      <link>https://dev.to/elukuro/clean-your-condition-4o3n</link>
      <guid>https://dev.to/elukuro/clean-your-condition-4o3n</guid>
      <description>&lt;h2&gt;
  &lt;a href="#always-positive"&gt;
  &lt;/a&gt;
  Always positive
&lt;/h2&gt;

&lt;p&gt;It's need extra effort to understanding logic in negative condition, avoid it as you can&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ‚ùå Don't 

function isUserNotVerified(){

}

if(!userVerified){

}

// ‚úÖ Do

function isUserVerified(){

}

if(userVerified){

}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-shorthands-if-possible"&gt;
  &lt;/a&gt;
  Use Shorthands if possible
&lt;/h2&gt;

&lt;p&gt;Shorthands make your code use less line and easier to read&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ‚ùå Don't

if(isActive ==null){

}

if(firstname !== null || firstname !=='' || firstname !== undefined){

}

const isUserValid = user.isVerified() &amp;amp;&amp;amp; user.isActive() ? true : false;

// ‚úÖ Do

if(isActive) {

}

if(!!firstname){

}

const isUserValid = user.isVerified() &amp;amp;&amp;amp; user.isActive()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#object-literals-over-switch-statements"&gt;
  &lt;/a&gt;
  Object literals over Switch statements
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ‚ùå Don't

const getStatus = (status) =&amp;gt; {
  switch (status) {
    case "success":
      return "green";
    case "failure":
      return "red";
    case "warning":
      return "yellow";
    case "loading":
    default:
      return "blue";
  }
};

// ‚úÖ Do
const statusColors = {
  success: "green",
  failure: "red",
  warning: "yellow",
  loading: "blue",
};

const getStatus = (status) =&amp;gt; statusColors[status] || statusColors.loading;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-optional-chaining"&gt;
  &lt;/a&gt;
  Use optional chaining
&lt;/h2&gt;

&lt;p&gt;Remember that optional chaining is not working with IE browser yet, see &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining"&gt;here&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const alice = {
    name:'Alice',
    cat:{
        name:'Nala'
    }
}
// ‚ùå Don't

const cat = (alice &amp;amp;&amp;amp; alice.cat &amp;amp;&amp;amp; alice.cat.name) || 'N/A';

// ‚úÖ Do

const cat = alice?.cat?.name ?? 'N/A';

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Using a greedy randomized algorithm to create art</title>
      <author>Daniel Dominguez</author>
      <pubDate>Thu, 16 Sep 2021 00:27:34 +0000</pubDate>
      <link>https://dev.to/dominguezdaniel/using-a-greedy-randomized-algorithm-to-create-art-3kpk</link>
      <guid>https://dev.to/dominguezdaniel/using-a-greedy-randomized-algorithm-to-create-art-3kpk</guid>
      <description>&lt;p&gt;The greedy randomized adaptive search procedure (also known as GRASP) is a metaheuristic algorithm commonly applied to combinatorial optimization problems in which each iteration consists basically of two phases: construction and local search. The construction phase builds a feasible solution, whose neighborhood is investigated until a local minimum is found during the local search phase.&lt;/p&gt;

&lt;p&gt;First, the darkest pixel is found. Then a number of random lines are drawn through that point, and the pixel values along each line are added together. The line with the darkest average is chosen, and the value of that line is subtracted from the image. Then the whole process is started over again for however many lines we are drawing. &lt;/p&gt;

&lt;p&gt;By the nature of the algorithm, the optimal line drawing configuration is probably not achieved, but performance is far superior to the naive method of checking every line.&lt;/p&gt;

</description>
      <category>art</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Intro to ViteJS</title>
      <author>Rene Rubalcava</author>
      <pubDate>Thu, 16 Sep 2021 00:14:00 +0000</pubDate>
      <link>https://dev.to/odoenet/intro-to-vitejs-54cp</link>
      <guid>https://dev.to/odoenet/intro-to-vitejs-54cp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#rambling"&gt;
  &lt;/a&gt;
  Rambling
&lt;/h2&gt;

&lt;p&gt;There used to be a time when I would write JavaScript in multiple files. They might look something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// start.js&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="c1"&gt;// multiple js files of code&lt;/span&gt;

&lt;span class="c1"&gt;// end.js&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;

&lt;span class="c1"&gt;// use a makefile to join them together&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then I would use a &lt;code&gt;make&lt;/code&gt; file to run a script that just concatenated all those files together. I didn't care much about minification or optimization. I don't think I was alone here, I'm pretty sure I got this idea from an article way back when. I do remember writing Ant scripts when the project was a mix of JavaScript and Flash, &lt;em&gt;that was fun&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If the project was big enough, there were tools like &lt;a href="https://www.crockford.com/jsmin.html"&gt;jsmin&lt;/a&gt;. If the project warranted it, I would use &lt;a href="https://dojotoolkit.org/"&gt;Dojo Toolkit&lt;/a&gt;, which could probably make me a sandwich if I wanted it to.&lt;/p&gt;

&lt;p&gt;As a developer, no matter the language, build tools &lt;em&gt;just come with the territory&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ok-no-more-rambling"&gt;
  &lt;/a&gt;
  Ok, no more rambling
&lt;/h2&gt;

&lt;p&gt;My point in all this is that if you're not careful, build tools can get unweildy. This is where a tool like &lt;a href="https://vitejs.dev/"&gt;ViteJS&lt;/a&gt; comes in.&lt;/p&gt;

&lt;p&gt;Vite is like a breath of fresh air. It handles ES modules natively, meaning that builds are super fast, because it just builds ESM, especially dev builds! Out of the box, you don't even need a config file, &lt;em&gt;it just works&lt;/em&gt;.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pnv6p9eZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E9FWP3uVIAMgv7x.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--RzqNKZyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/848265616645537792/LR5p0Mj0_normal.jpg" alt="Rene (Hecho En East Los) Rubalcava profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Rene (Hecho En East Los) Rubalcava
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/odoenet"&gt;@odoenet&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      my vitejs config 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:34 PM - 18 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1428017428441681926" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1428017428441681926" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1428017428441681926" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Under the hood, Vite uses &lt;a href="http://esbuild.github.io/"&gt;esbuild&lt;/a&gt;. For CSS, it can handle &lt;a href="https://postcss.org/"&gt;PostCSS&lt;/a&gt; if you add a config for it, or &lt;a href="https://github.com/css-modules/css-modules"&gt;css-modules&lt;/a&gt; if you add &lt;code&gt;.module.css&lt;/code&gt; files, or &lt;a href="https://sass-lang.com/"&gt;sass&lt;/a&gt;. It will also make liberal use of the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import.meta"&gt;&lt;code&gt;import.meta&lt;/code&gt;&lt;/a&gt; to add some sugar methods like &lt;a href="https://vitejs.dev/guide/features.html#glob-import"&gt;glob imports&lt;/a&gt; or adding environment variables. You can switch the build to use &lt;a href="https://terser.org/"&gt;terser&lt;/a&gt; and get a slightly smaller build, but it is a little slower. In my regular usage, I don't notice a huge difference, so I leave esbuild as default.&lt;/p&gt;

&lt;p&gt;It handles &lt;code&gt;JSON&lt;/code&gt; and &lt;code&gt;wasm&lt;/code&gt; imports for you. Even &lt;a href="https://vitejs.dev/guide/features.html#web-workers"&gt;workers&lt;/a&gt; can be loaded via &lt;code&gt;import WorkIt from './workit?worker'&lt;/code&gt;. Just when you thought you could escape loader plugins, &lt;em&gt;they drag you back in!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But I have some complex workflows, I use &lt;code&gt;ejs&lt;/code&gt; templates, I need sprite sheet generation&lt;/em&gt;... I hear you. The great thing about Vite is that it uses &lt;a href="https://www.rollupjs.org/"&gt;rollup&lt;/a&gt;, so you can use rollup plugins if you want. It also has a suite of &lt;a href="https://github.com/vitejs/awesome-vite#plugins"&gt;vite plugins&lt;/a&gt; available. Just add them to your &lt;a href="https://vitejs.dev/config/"&gt;&lt;code&gt;vite.config.js&lt;/code&gt;&lt;/a&gt; and you're good to go.&lt;/p&gt;

&lt;p&gt;Most projects I don't even need a config. It's insane.&lt;/p&gt;

&lt;p&gt;How to use it?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init vite@latest my-vite-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you run that command, you'll be asked if you want a vanilla project or if you want react/preact/vue and even TypeScript. It's really that simple and makes me smile.&lt;/p&gt;

&lt;p&gt;Geez, I feel like this should be a longer blog post. But it really is that simple. Now, I wouldn't try converting your large webpack application to Vite. Don't get me wrong, webpack has a ton of plugins, loaders, community, and history.&lt;/p&gt;

&lt;p&gt;I should note, I have had some issues in building third-party css where I need to modify the url imports, like I can with the resolve-url-loader for webpack, but that has been the only very specific issue I've run into.&lt;/p&gt;

&lt;p&gt;Vite is another option, and one I think is great for new projects! In testing, I can get a smaller build with webpack, not much smaller, but smaller. So if squeezing every last kb out of your build is your goal, maybe webpack is your thing. You do you, and build awesome apps!&lt;/p&gt;

&lt;p&gt;You can check out more info in this video below!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/sV1Tcie2SR8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>vitejs</category>
    </item>
  </channel>
</rss>
