<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Good Bye Web APIs</title>
      <author>Manuel Vila</author>
      <pubDate>Mon, 23 Nov 2020 20:26:17 +0000</pubDate>
      <link>https://dev.to/mvila/good-bye-web-apis-2bel</link>
      <guid>https://dev.to/mvila/good-bye-web-apis-2bel</guid>
      <description>&lt;p&gt;When building a &lt;a href="https://en.wikipedia.org/wiki/Single-page_application"&gt;single-page application&lt;/a&gt; or a mobile application, we usually need to implement a web API (REST or GraphQL) to connect the frontend and the backend. Technically, it's not very difficult, but it has some unfortunate consequences.&lt;/p&gt;

&lt;p&gt;Imagine two planets. The planet "frontend" speaks JavaScript and the planet "backend" also speaks JavaScript or any other advanced language.&lt;/p&gt;

&lt;p&gt;Now let's say that these planets need to collaborate extensively to form a whole called "application".&lt;/p&gt;

&lt;p&gt;Unfortunately, the planets are unable to communicate with each other directly using their native language and they have to rely on a third party called "web API" which speaks a much less sophisticated language.&lt;/p&gt;

&lt;p&gt;Indeed, the language of most web APIs is limited to a combination of URLs, a few HTTP verbs (GET, POST, DELETE, etc.), and some JSON.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dLrOKXvE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4jf4ioy2841npvbihshz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dLrOKXvE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4jf4ioy2841npvbihshz.png" alt="Frontend + Web API + Backend"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The web APIs that speak GraphQL are more advanced but they remain far behind the possibilities of a programming language such as JavaScript:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The programming paradigm is procedural or functional (no object-oriented programming).&lt;/li&gt;
&lt;li&gt;Only the most basic types are supported (forget about Date, Map, Set, etc.).&lt;/li&gt;
&lt;li&gt;The concept of reference is missing (you can only pass objects by value).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Placing a rudimentary language between the frontend and the backend adds a lot of boilerplate and ruins the development experience.&lt;/p&gt;

&lt;p&gt;Another problem is that a web API is an extra layer to worry about. It must be designed, implemented, tested, documented, etc. And all this is frankly a pain in the ass.&lt;/p&gt;

&lt;p&gt;But the worst thing is that the API layer generally forces you to degrade the quality of your codebase. Indeed, it's quite challenging to keep your code DRY and cohesive when your frontend and your backend are separated by a web API.&lt;/p&gt;

&lt;p&gt;Now imagine that we could get rid of the web API. Imagine that the frontend could communicate directly with the backend using its native language. Wouldn't it be great?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5wCtDsQ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ggelge7utvo2cbpgte2l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5wCtDsQ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ggelge7utvo2cbpgte2l.png" alt="Frontend + Backend"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The good news is that it's possible today thanks to a set of libraries called &lt;a href="https://github.com/layrjs/layr"&gt;Layr&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hello-layr" class="anchor"&gt;
  &lt;/a&gt;
  Hello, Layr!
&lt;/h2&gt;

&lt;p&gt;With &lt;a href="https://github.com/layrjs/layr"&gt;Layr&lt;/a&gt;, the frontend and the backend are &lt;em&gt;physically&lt;/em&gt; separated (they run in different environments) but &lt;em&gt;logically&lt;/em&gt; reunited (it's as if they were in the same environment).&lt;/p&gt;

&lt;p&gt;How does it work?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The backend is composed of one or more classes whose some of their attributes and methods are explicitly exposed to the frontend.&lt;/li&gt;
&lt;li&gt;The frontend generates some proxies to the backend classes and can use these proxies as if they were regular JavaScript classes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Under the hood, Layr relies on an &lt;a href="https://en.wikipedia.org/wiki/Remote_procedure_call"&gt;RPC&lt;/a&gt; mechanism. So, superficially, it can be seen as something like &lt;a href="https://en.wikipedia.org/wiki/Common_Object_Request_Broker_Architecture"&gt;CORBA&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Java_remote_method_invocation"&gt;Java RMI&lt;/a&gt;, or &lt;a href="https://en.wikipedia.org/wiki/Windows_Communication_Foundation"&gt;.NET CWF&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But Layr is radically different:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's not a &lt;a href="https://en.wikipedia.org/wiki/Distributed_object"&gt;distributed object system&lt;/a&gt;. A Layr backend is stateless, so there are no shared objects across the stack.&lt;/li&gt;
&lt;li&gt;It doesn't involve any boilerplate code, generated code, configuration files, or artifacts.&lt;/li&gt;
&lt;li&gt;It uses a simple but powerful serialization protocol (&lt;a href="https://deepr.io"&gt;Deepr&lt;/a&gt;) that enables unique features such as chained invocation, automatic batching, or partial execution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Layr starts its journey in JavaScript/TypeScript, but the problem it tackles is universal, and it could be ported to any object-oriented language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;Let's implement the classic "Counter" example to see what it looks like to build a full-stack application with Layer.&lt;/p&gt;

&lt;p&gt;First, we implement the "data model" and the "business logic" in the backend:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// backend.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;primaryIdentifier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;expose&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@layr/component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ComponentHTTPServer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@layr/component-http-server&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// We need a primary identifier so a Counter instance&lt;/span&gt;
  &lt;span class="c1"&gt;// can be transported between the frontend and the backend&lt;/span&gt;
  &lt;span class="c1"&gt;// while keeping it's identity&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;expose&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;primaryIdentifier&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// The counter value is exposed to the frontend&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;expose&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// And the "business logic" is exposed as well&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;expose&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;call&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;method&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Lastly, we serve the Counter class through an HTTP server&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ComponentHTTPServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3210&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Oh my! All that code just for a simple "Counter" example? Sure, it seems overkill, but we've actually implemented a full-grade backend with a data model, some business logic, and an HTTP server exposing the whole thing.&lt;/p&gt;

&lt;p&gt;Now that we have a backend, we can consume it from a frontend:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// frontend.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ComponentHTTPClient&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@layr/component-http-client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// We create a client to connect to the backend server&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ComponentHTTPClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3210&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// We get a proxy to the Counter backend class&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getComponent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// Lastly, we consume the Counter&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 0&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 1&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 2&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What's going on here? By invoking the &lt;code&gt;counter.increment()&lt;/code&gt; method the counter value is incremented. Note that this method does not exist in the frontend. It is implemented in the backend and is therefore executed in this environment. But from the perspective of the frontend, the actual execution environment doesn't matter. The fact that the method is executed remotely can be seen as an implementation detail.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Counter&lt;/code&gt; class in the frontend can be extended to implement features that are specific to the frontend. Here's an example of how to override the &lt;code&gt;increment()&lt;/code&gt; method to display a message when the counter reaches a certain value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ExtendedCounter&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// We call the `increment()` method in the backend&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// We execute some additional code in the frontend&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The counter value is 3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is what it looks like when the frontend and the backend are reunited. Pretty cool isn't it?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-the-catch" class="anchor"&gt;
  &lt;/a&gt;
  What's the Catch?
&lt;/h2&gt;

&lt;p&gt;Why does everyone build web APIs when we could do without them?&lt;/p&gt;

&lt;p&gt;There is a good reason to implement a web API, it's when you want to expose your backend to a third-party developer. But let's be honest, the vast majority of applications don't have this requirement. And if it turns out that you need a web API, it is possible to add it afterward while continuing to use the "API-less" approach for all your internal needs.&lt;/p&gt;

&lt;p&gt;So there is no catch. Really.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Removing the web API allows you to build a full-stack application much faster while increasing the quality of your codebase.&lt;/p&gt;

&lt;p&gt;By using &lt;a href="https://github.com/layrjs/layr"&gt;Layr&lt;/a&gt; on several projects, including some production projects, I was able to reduce the amount of code by &lt;a href="https://github.com/layrjs/react-layr-realworld-example-app/blob/master/docs/comparison.md"&gt;50% on average&lt;/a&gt; and greatly increase my productivity.&lt;/p&gt;

&lt;p&gt;Another important aspect is the development experience. Since the frontend and the backend are no longer separated by a web API, you get a feeling similar to developing a standalone application, and it's a lot more fun.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>api</category>
    </item>
    <item>
      <title>My thoughts after using React for the past 3 months: Tips for new developers! 👨‍💻</title>
      <author>Fahad Imran 👨‍💻</author>
      <pubDate>Mon, 23 Nov 2020 20:15:22 +0000</pubDate>
      <link>https://dev.to/fahadimran/my-thoughts-after-using-react-for-the-past-3-months-tips-for-new-developers-567g</link>
      <guid>https://dev.to/fahadimran/my-thoughts-after-using-react-for-the-past-3-months-tips-for-new-developers-567g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hang-on-whats-react" class="anchor"&gt;
  &lt;/a&gt;
  🤷‍♂️ Hang on... What's React?
&lt;/h2&gt;

&lt;p&gt;React is one of the most popular Front-End JavaScript frameworks. Developed by &lt;strong&gt;Facebook&lt;/strong&gt; in &lt;strong&gt;2013&lt;/strong&gt;, it is actively maintained as an &lt;strong&gt;open-source project&lt;/strong&gt; and has made building complex user interfaces easier. That's why it is one of the &lt;strong&gt;most loved frameworks&lt;/strong&gt; even in 2020.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-i-started-learning-react" class="anchor"&gt;
  &lt;/a&gt;
  🌳 Why I started learning React?
&lt;/h2&gt;

&lt;p&gt;I, like many front-end developers, started learning React after I had become comfortable writing HTML, CSS, and JavaScript. Because of their extensive usage in the market, I knew I had to learn a &lt;strong&gt;JavaScript framework&lt;/strong&gt; as well. I thought long and hard before making my decision between React, Vue, and Angular. I finally settled on React because I liked the flexibility it provided and I knew that, because of its popularity, I would have no trouble finding help online in case I got stuck.&lt;/p&gt;

&lt;p&gt;Thus, I have been using React for the past &lt;strong&gt;3 months&lt;/strong&gt;, in various projects, to learn what's it all about. Naturally, as a new developer starting out with React, I gained much-needed insights into the state of the React ecosystem. I am sharing some of my thoughts for new developers who are learning React or are considering switching to it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OK, enough blabbering. Let's jump into the fun stuff!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flexibility" class="anchor"&gt;
  &lt;/a&gt;
  🔧 Flexibility
&lt;/h2&gt;

&lt;p&gt;The first thing I noticed when I started working with React is, how &lt;strong&gt;flexible&lt;/strong&gt; it was, and how much &lt;strong&gt;freedom&lt;/strong&gt; it provided to the developers. At the core, React is just a basic library, but the functionality can be easily added on top of it by different libraries and packages.&lt;/p&gt;

&lt;p&gt;The best thing about React is that there are &lt;strong&gt;no restrictions or strict guidelines&lt;/strong&gt; in terms of &lt;strong&gt;coding style&lt;/strong&gt; that you have to follow. You can choose to create your components however you want, whether it be a class or functional components, you can adopt styled-components or choose to split your application into dumb and smart components to ensure separation of concerns. Everything is up to the developer. Sure, there are some recommended best practices that you can follow, but no one is going to shove a certain application structure, down your throat if you don't like it.&lt;/p&gt;

&lt;p&gt;While this flexibility is definitely &lt;strong&gt;welcome&lt;/strong&gt; to some developers, others might argue that it makes it &lt;strong&gt;difficult for newbies&lt;/strong&gt; to get started. I, also somewhat agree with this point of view. As a new React developer myself, I was initially quite confused at what the correct way was to create Apps with React. Since &lt;strong&gt;every&lt;/strong&gt; tutorial and article I looked at was telling me a different way of doing things. It was only later that I realized that there is no best way to write React. As long as you become comfortable with the core concepts like Components, State, props, JSX, etc. you can pretty much &lt;strong&gt;adopt the style that works best for you&lt;/strong&gt;. So, that's what I have been doing for some time now, and it is working fine so far.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-in-html-say-hello-to-jsx" class="anchor"&gt;
  &lt;/a&gt;
  😮 JavaScript in HTML? Say Hello to JSX!
&lt;/h2&gt;

&lt;p&gt;React uses what we call &lt;strong&gt;JSX&lt;/strong&gt;, which is a mixture of JavaScript and HTML. Though, at first I despised the idea of JSX, since, we have been taught from the beginning that it's a &lt;strong&gt;bad practice&lt;/strong&gt; to mix in JavaScript with your markup. Here's what it looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;
  &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;editInput&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;getTodoText&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getEdittedText&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mt-4"&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"input-group"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
      &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Add a todo item..."&lt;/span&gt;
      &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt;
      &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;editInput&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;getInputValue&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;changeEditValue&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;editInput&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;editInput&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"input-group-append"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;
        &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getClassName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;editInput&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getButtonName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But after some practice, I realized the &lt;strong&gt;power&lt;/strong&gt; it brings to the table. By having your markup and JavaScript together, you can effectively control the entire functioning of the App from a single source. Here's the reasoning that React provides:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Instead of artificially separating technologies by putting markup and logic in separate files, React separates concerns with loosely coupled units called “components” that contain both."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In simpler terms, instead of separating the entire app logic from markup, React separates out the app into &lt;strong&gt;different components&lt;/strong&gt; which contain both their &lt;strong&gt;respective logic and markup.&lt;/strong&gt; This ensures that even though individual components contain both HTML and JavaScript, yet the entire App is well separated into different components that handle &lt;strong&gt;separate functionalities&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;👉 While writing JSX might seem daunting at first, trust me, you'll get used to it in no time and will enjoy it too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-javascript-before-react-please" class="anchor"&gt;
  &lt;/a&gt;
  🙏 Learn JavaScript before React Please!
&lt;/h2&gt;

&lt;p&gt;When you start learning React, one thing you will quickly understand is the importance of having &lt;strong&gt;strong grasp over JavaScript Fundamentals.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While React might use JSX, but at its core, it's just a mash-up of HTML and Vanilla JavaScript. Without a sound knowledge of JavaScript, you'll have a hard time understanding and using React. Because you will be learning both React and JavaScript at the same time and you won't be able to master either of them.&lt;/p&gt;

&lt;p&gt;In order to excel at React, a good understanding of JavaScript is &lt;strong&gt;must.&lt;/strong&gt; Especially the new &lt;strong&gt;ES6 syntax.&lt;/strong&gt; It is essential that you understand concepts like arrow functions, object destructing, higher-order array methods, JavaScript objects, arrays, etc. As more often than not you will have to use them in your React Apps.&lt;/p&gt;

&lt;p&gt;I cannot tell how many times I had to use higher-order array methods like &lt;code&gt;map()&lt;/code&gt; and &lt;code&gt;filter()&lt;/code&gt; or how many times I created functions using the arrow function syntax.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#map-higher-order-method" class="anchor"&gt;
  &lt;/a&gt;
  map() higher order method
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"list-group mt-4"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;itemList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Item&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#arrow-function" class="anchor"&gt;
  &lt;/a&gt;
  Arrow function
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;history&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"m-3"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;You are on the About Page 😎&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
        &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-dark mx-3 my-2"&lt;/span&gt;
        &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Back To Home
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Thus, my advice to new devs, starting out with React is, to first &lt;strong&gt;master the basics of JavaScript&lt;/strong&gt; before moving on to React. It will not only make your life easier, but you will also understand the core concepts of React better, instead of fiddling around with JavaScript concepts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#class-vs-functional-components" class="anchor"&gt;
  &lt;/a&gt;
  🛠️ Class Vs Functional Components
&lt;/h2&gt;

&lt;p&gt;When I was starting out with React, I got confused between choosing &lt;strong&gt;Class components and Functional Components&lt;/strong&gt; for my projects. The major difference between them apart from their &lt;strong&gt;syntax&lt;/strong&gt;, was that if you were using class components, then you could use &lt;strong&gt;State&lt;/strong&gt; in your component, something which was not possible in functional components at that time. Furthermore, with class components, you had access to life cycle methods like &lt;code&gt;componentDidMount()&lt;/code&gt;, &lt;code&gt;componentDidUpdate()&lt;/code&gt; etc.&lt;/p&gt;

&lt;p&gt;Here's a quick comparison between a very simple class and functional component:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#a-typical-class-component" class="anchor"&gt;
  &lt;/a&gt;
  A typical Class Component
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;YourComponentName&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hi, I am a class component.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#a-typical-functional-component" class="anchor"&gt;
  &lt;/a&gt;
  A typical Functional Component
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;YourComponentName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hi, I am a functional component.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, the easy recommendation was that, if you wanted to make your component stateful, you would use class components, if not then you would use functional components. Easy, right? &lt;strong&gt;Well... not necessarily.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Just as this concept was about to make sense, I discovered &lt;strong&gt;React Hooks&lt;/strong&gt;. I will go more into detail about what Hooks are, and why they are awesome in a later section, but the long and short is that, React Hooks allow us to add state and life cycle methods to functional components.&lt;/p&gt;

&lt;p&gt;So, your functional components now look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;YourComponentName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hi, I am a stateful functional component.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;At first, I was quite bummed, to say the least, as I had become accustomed to using class components. But, after using functional components with hooks for some time, I was &lt;strong&gt;hooked&lt;/strong&gt; 😉. Now, I have switched to &lt;strong&gt;exclusively using functional components&lt;/strong&gt; in all my applications as they are &lt;strong&gt;short and concise&lt;/strong&gt; and anytime I need state in my components, I can easily add it through hooks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-power-of-react-hooks" class="anchor"&gt;
  &lt;/a&gt;
  ⚡ The Power of React Hooks!
&lt;/h2&gt;

&lt;p&gt;Now let's talk about &lt;strong&gt;React Hooks&lt;/strong&gt;. Hooks were introduced in &lt;strong&gt;React 16.8&lt;/strong&gt;. Hooks allow you to &lt;strong&gt;use state and life cycle methods in functional components&lt;/strong&gt;. Thus, they allow you to write functional components that are essentially the same as class components since they can include state and other React features.&lt;/p&gt;

&lt;p&gt;According to the official documentation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are &lt;strong&gt;different types of hooks&lt;/strong&gt; and each is as useful as the next. I won't go into details about each and every hook but will show a brief example of how I have used them. If you want more information about Hooks consider looking up the official documentation.&lt;/p&gt;

&lt;p&gt;The most common hook is the &lt;code&gt;useState&lt;/code&gt; hook which allows you to &lt;strong&gt;add state to any functional component&lt;/strong&gt;. It is extremely easy to use and comes in handy more often than not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setMsg&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;The message is &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Another hook which I have used in my projects is the &lt;code&gt;useEffect&lt;/code&gt; hook which is similar to the &lt;strong&gt;life cycle methods&lt;/strong&gt; &lt;code&gt;componentDidMount&lt;/code&gt; and &lt;code&gt;componentDidUpdate&lt;/code&gt;. So, if you want to make &lt;strong&gt;API calls&lt;/strong&gt; or use any other &lt;strong&gt;side effects&lt;/strong&gt;, useEffect is the hook to use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/stationeryItems&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, if you want to add Redux like functionality in your application, there are &lt;strong&gt;2&lt;/strong&gt; hooks which mimic the core state management features. These are &lt;code&gt;useContext&lt;/code&gt; and &lt;code&gt;useReducer&lt;/code&gt; hooks. These along with the &lt;strong&gt;new Context API&lt;/strong&gt; allow for complete state management without using Redux.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#usereducer-hook" class="anchor"&gt;
  &lt;/a&gt;
  useReducer hook
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// useReducer() hook&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LibraryReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#usecontext-hook" class="anchor"&gt;
  &lt;/a&gt;
  useContext hook
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// useContext() hook&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LibraryContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;I am inside the Book Component 🥳&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Book Information */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Book Name: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Quantity: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quantity&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Book Shelf: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shelf&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;incrementQuantity&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increment Quantity&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I will talk more about state management in the next section but suffice it to say that hooks have really &lt;strong&gt;changed&lt;/strong&gt; the way I write React code. They have allowed me to add any functionality, I think of in my functional components. React Hooks have drastically &lt;strong&gt;reduced the amount of code&lt;/strong&gt; I write, while &lt;strong&gt;increasing my productivity&lt;/strong&gt; along the way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-talk-state-management" class="anchor"&gt;
  &lt;/a&gt;
  🔖 Let's talk State Management
&lt;/h2&gt;

&lt;p&gt;Naturally, as with any JavaScript Framework, whether it be Angular, React or Vue, &lt;strong&gt;state management&lt;/strong&gt; is an important concern. In Single Page Applications, it is essential to keep the state &lt;strong&gt;consistent&lt;/strong&gt; between different components and ensure that it gets updated correctly. React is no different.&lt;/p&gt;

&lt;p&gt;Therefore, an important concept all React devs should understand is how to &lt;strong&gt;effectively manage state in their applications&lt;/strong&gt;. When I was starting out with React, I was stressed about state management since I knew that React did not include a built-in state management solution at that time. Therefore, most of the online articles and tutorials recommended using &lt;strong&gt;Redux&lt;/strong&gt;. And I had heard that Redux was difficult to learn, it required a lot of boilerplate code and made your application size larger, and so on... So state management was one of my biggest concerns as a new React developer.&lt;/p&gt;

&lt;p&gt;But now, after working with React for some time, I realized that state management is not actually as difficult as it seems. From what I have gathered there are essentially &lt;strong&gt;3 ways&lt;/strong&gt; to manage state in your React apps. I will not go into details here, but will briefly touch on the different methods you can use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lifting-the-state" class="anchor"&gt;
  &lt;/a&gt;
  👉 Lifting the state
&lt;/h3&gt;

&lt;p&gt;The first method is to &lt;strong&gt;lift the state to the parent component&lt;/strong&gt; and &lt;strong&gt;pass it to child components through props&lt;/strong&gt;. This is by far the easiest method to implement but it is only suitable for small applications and does not scale well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#state-management-libraries-like-redux" class="anchor"&gt;
  &lt;/a&gt;
  👉 State management libraries like Redux
&lt;/h3&gt;

&lt;p&gt;The second and most common method is to &lt;strong&gt;use a third-party library for state management&lt;/strong&gt;. The most common library used with React is &lt;strong&gt;Redux&lt;/strong&gt;. It is one of the most popular state management solutions and has become an industry standard. Though it scales well to larger applications it involves a lot of boilerplate code and adds to the package size.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#context-api" class="anchor"&gt;
  &lt;/a&gt;
  👉 Context API
&lt;/h3&gt;

&lt;p&gt;The third and newest method of State Management in React is using the &lt;strong&gt;Context API&lt;/strong&gt;. This is by far my favorite method of state management, as it is built in to React and therefore, it does not require any third-party library to be installed.&lt;/p&gt;

&lt;p&gt;Here's what the official documentation says about Context API:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Context provides a way to pass data through the component tree without having to pass props down manually at every level."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thus, Context allows you to keep the &lt;strong&gt;state separate from the Components&lt;/strong&gt; and access it in whichever component you want without having to pass it as props.&lt;/p&gt;

&lt;p&gt;Context API by itself is a &lt;strong&gt;pretty powerful tool&lt;/strong&gt;. But Hooks like &lt;code&gt;useReducer&lt;/code&gt; and &lt;code&gt;useContext&lt;/code&gt; take it to a whole new level and make it a &lt;strong&gt;viable alternative to even Redux&lt;/strong&gt;. Combining Context API with Hooks provides you an effective and elegant solution to state management which is built directly into React.&lt;/p&gt;

&lt;p&gt;Thus, I have been playing around with Context API for some time now, and in my opinion, it is a worthwhile state management solution for small react apps. For more complex applications, redux remains a good option. But new react devs should at least give context API a shot before jumping into Redux.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  💭 Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;In the end, I would say that using React has been a great experience for me. I am still a beginner and I am learning a lot of new things every day. But I wanted to share some of the &lt;strong&gt;important points and tips&lt;/strong&gt; that I have discovered since I started using React. Some of these things drove me absolutely crazy, while I was starting out since I found very conflicting advice on the internet. Therefore, my goal was to share a &lt;strong&gt;one-stop guide for programmers&lt;/strong&gt; who are starting to learn React, like I was, enlisting what I believe, are the most important things to keep in mind as you progress 😊.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#helpful-resources-to-learn-react" class="anchor"&gt;
  &lt;/a&gt;
  ✨ Helpful Resources to learn React!
&lt;/h2&gt;

&lt;p&gt;Here are some resources that can help you learn React.js and level up as a developer:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#youtube-videos" class="anchor"&gt;
  &lt;/a&gt;
  YouTube Videos:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=sBws8MSXN7A"&gt;React Crash Course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XuFDcZABiDQ&amp;amp;list=PLillGF-RfqbY3c2r0htQyVbDJJoBFE6Rb"&gt;React Projects Playlist by Traversy Media&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=dGcsHMXbSOA&amp;amp;list=PLDyQo7g0_nsVHmyZZpVJyFn5ojlboVEhE"&gt;React Tutorials Playlist by Dev Ed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=p6c7QA9ofvI&amp;amp;list=PLN3n1USn4xlntqksY83W3997mmQPrUmqM"&gt;Practical React Playlist by Ben Awad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Ke90Tje7VS0"&gt;React tutorial for Beginners by Programming with Mosh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#udemy-courses" class="anchor"&gt;
  &lt;/a&gt;
  Udemy Courses:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/modern-react-front-to-back/"&gt;Brad Traversy's React Front to Back Course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developedbyed.com/p/the-creative-react-and-redux-course"&gt;DevelopedByEd The Creative React and Redux Course&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#articles" class="anchor"&gt;
  &lt;/a&gt;
  Articles:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/aspittel/a-complete-beginners-guide-to-react-2cl6"&gt;A Complete Beginner's Guide to React by Ali Spittel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How To Balance Your Job With Your Side Projects As A Developer</title>
      <author>Catalin Pit</author>
      <pubDate>Mon, 23 Nov 2020 19:55:45 +0000</pubDate>
      <link>https://dev.to/dailydotdev/how-to-balance-your-job-with-your-side-projects-as-a-developer-23l6</link>
      <guid>https://dev.to/dailydotdev/how-to-balance-your-job-with-your-side-projects-as-a-developer-23l6</guid>
      <description>&lt;p&gt;Working 8 hours a day and having side projects can be very difficult. I know that from experience. In the beginning, I also struggled to find a balance between my work and my side projects. &lt;/p&gt;

&lt;p&gt;However, I have found a way to organise my work and my time. I would like to think that I have found the perfect balance. As a result, I would like to share what I do with the hope that it can help you as well.&lt;/p&gt;

&lt;p&gt;By the way, when I talk about projects, I do not mean programming projects exclusively. I refer to being present on social media, creating applications, creating content, and anything related to software development.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#create-a-schedule" class="anchor"&gt;
  &lt;/a&gt;
  Create a schedule
&lt;/h1&gt;

&lt;p&gt;Create a schedule that works for you. If you work better in the morning, try to find some extra time in the morning. If you work better at night, do it the night time. The main point is to find the time that works for you.&lt;/p&gt;

&lt;p&gt;Besides being at your best, find the time when you can do uninterrupted work. If you get interrupted frequently, you will not be able to do a lot of work.&lt;/p&gt;

&lt;p&gt;Thus, try to balance both. For instance, I work around 6:30 am because I can do uninterrupted work for 1 or 2 hours. Also, I can work without being interrupted because everyone is asleep. However, it differs from person to person.&lt;/p&gt;

&lt;p&gt;Finally, you have to experiment and see what works for you. There is no universal path that works for all of us. &lt;strong&gt;The main point is that by establishing a schedule, you can spend time working on your side project before or after your job&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;To recap:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Find a time when you work at your best.&lt;/li&gt;
&lt;li&gt;Try to do uninterrupted work.&lt;/li&gt;
&lt;li&gt;Having a schedule allows you to spend time on side projects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#create-a-list-of-tasks" class="anchor"&gt;
  &lt;/a&gt;
  Create a list of tasks
&lt;/h1&gt;

&lt;p&gt;Unloading your brain is one of the best things that you can do for yourself. Trying to keep everything in your head can make you stressed. Besides that, you are more likely to forget information.&lt;/p&gt;

&lt;p&gt;Trello and Notion are two applications that I recommend for note-taking. In my case, I use Notion because it has more features and is therefore more useful. With Notion, you can use templates to create logs, task lists, and more.&lt;/p&gt;

&lt;p&gt;With that being said, I always note everything in my journals and task lists. That means when it's time to work on my side projects, I do not have to waste time thinking about what I did, what I am doing, and what should I do.&lt;/p&gt;

&lt;p&gt;Therefore, I recommend you to keep a journal or/and a task list. Note everything there to empty your brain. As a result, when it's time to work, you can focus only on your task at hand.&lt;/p&gt;

&lt;p&gt;To recap:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create an account on Notion or Trello.&lt;/li&gt;
&lt;li&gt;Note down your ideas, thoughts, and tasks.&lt;/li&gt;
&lt;li&gt;By doing so, you can actually focus on your tasks and not other things.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#schedule-your-content" class="anchor"&gt;
  &lt;/a&gt;
  Schedule your content
&lt;/h1&gt;

&lt;p&gt;If you are present on social media or have a blog/video-blog, you know how difficult it is. When you are at your job, you cannot spend time on social media or on creating content.&lt;/p&gt;

&lt;p&gt;Thus, the solution is to create the content ahead of time and then schedule it. For your social media accounts, you can use tools such as HypeFury, Buffer or Tweetastic. You can schedule your content ahead for the next day or actually any time in the future.&lt;/p&gt;

&lt;p&gt;When it comes to platforms such as YouTube or blogging platforms, you can schedule the content straight from them.&lt;/p&gt;

&lt;p&gt;In conclusion, prepare and schedule your work/content ahead. Planning your stuff takes a burden off you.&lt;/p&gt;

&lt;p&gt;To recap:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create your content ahead.&lt;/li&gt;
&lt;li&gt;Schedule your social media content with tools such as HypeFury, Buffer or Tweetastic.&lt;/li&gt;
&lt;li&gt;Schedule your blog/video blog content from the respective platforms.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#delegate-some-of-your-work" class="anchor"&gt;
  &lt;/a&gt;
  Delegate some of your work
&lt;/h1&gt;

&lt;p&gt;You do not have to do everything by yourself. Detect the tasks which you can delegate, and find someone to do them.&lt;/p&gt;

&lt;p&gt;An example would be finding someone to edit your YouTube videos. Editing your videos is a tedious process which can be delegated to another person. You could save a lot of time by delegating tasks.&lt;/p&gt;

&lt;p&gt;To recap:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Find tasks you can delegate.&lt;/li&gt;
&lt;li&gt;Delegate them to other people.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;That's it, folks! Balancing your job with your side stuff does not have to be difficult. With a little bit of organisation and tools, you can do both successfully.&lt;/p&gt;

&lt;p&gt;However, keep in mind that it can take a toll on you, even with all this help. Whenever you feel exhausted, take the time to recharge. &lt;/p&gt;

&lt;p&gt;To recap:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a schedule. Find the time that works for you, and when you can do uninterrupted work.&lt;/li&gt;
&lt;li&gt;Keep a journal and/or task lists. Unload your mind.&lt;/li&gt;
&lt;li&gt;Schedule your work/content ahead.&lt;/li&gt;
&lt;li&gt;Find work you can delegate to other people.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;&lt;a href="https://api.daily.dev/get?r=devto"&gt;daily.dev&lt;/a&gt; delivers the best programming news every new tab. We will rank hundreds of qualified sources for you so that you can hack the future.&lt;/em&gt;&lt;br&gt;
&lt;a href="https://api.daily.dev/get?r=devto"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GnRWXIbg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b996k4sm4efhietrzups.png" alt="Daily Poster"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>career</category>
    </item>
    <item>
      <title>How do you keep track of notes in code?</title>
      <author>Madza</author>
      <pubDate>Mon, 23 Nov 2020 19:24:22 +0000</pubDate>
      <link>https://dev.to/madza/how-do-you-keep-track-of-notes-in-code-hb5</link>
      <guid>https://dev.to/madza/how-do-you-keep-track-of-notes-in-code-hb5</guid>
      <description>&lt;p&gt;Keeping track of notes while coding is essential, so you have all the ideas for development once you re-visit. Thanks to code commenting and various extensions, you don't need to leave your code editor / IDE for that.&lt;/p&gt;

&lt;p&gt;Some of the methods I am aware of include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Making comments on top of the file, adding them in the list once an idea strikes. (Ctrl + /) is a useful shortcut for that in VS Code.&lt;/li&gt;
&lt;li&gt;Using extensions like &lt;a href="https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments"&gt;Better Comments&lt;/a&gt; and &lt;a href="https://dev.toTODO%20Highlight"&gt;TODO Highlight&lt;/a&gt; to make comments in different colors, so it's easy to distinguish between to-dos, warnings, highlights, questions, etc.&lt;/li&gt;
&lt;li&gt;Using &lt;a href="https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree"&gt;Todo Tree&lt;/a&gt; to create a tree of todos across multiple files, displaying them in the side panel for a great overview and easy management. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How do you normally approach this?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>productivity</category>
      <category>coding</category>
    </item>
    <item>
      <title>Babel: Plugins, Presets and Parsers</title>
      <author>Laurie</author>
      <pubDate>Mon, 23 Nov 2020 18:43:31 +0000</pubDate>
      <link>https://dev.to/laurieontech/babel-plugins-presets-and-parsers-3amh</link>
      <guid>https://dev.to/laurieontech/babel-plugins-presets-and-parsers-3amh</guid>
      <description>&lt;p&gt;Before you read this post I recommend checking out my &lt;a href="https://dev.to/laurieontech/the-ecmascript-ecosystem-2e13"&gt;post on the ECMAScript ecosystem&lt;/a&gt;. It will help you understand Babel and what it's used for.&lt;/p&gt;

&lt;p&gt;So assuming you have a reasonable understanding of what Babel does, let's dive right in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plugins" class="anchor"&gt;
  &lt;/a&gt;
  Plugins
&lt;/h2&gt;

&lt;p&gt;Babel has base functionality but it doesn't support every type of syntax out of the box. This is especially true for very new or experimental syntax. To do that, you need to configure Babel yourself.&lt;/p&gt;

&lt;p&gt;Often you'll do this with a &lt;code&gt;.babelrc&lt;/code&gt; file. In this example, we're adding a fake plugin to the config that will provide additional syntax support.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`some-plugin-here`&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;However, plugins themselves are configurable. Instead of passing the name of the plugin, you can pass an array that includes the name as well as an options object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;`some-plugin-here`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;option&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}]]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And you can do both at the same time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`other-plugin`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`some-plugin-here`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;option&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}]]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It's worth noting that order matters. The first plugin in the array will run first.&lt;/p&gt;

&lt;p&gt;This gets us up to speed on how to use plugins, but it doesn't really explain what they are. As it turns out there are different types of plugins.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax-plugins" class="anchor"&gt;
  &lt;/a&gt;
  Syntax plugins
&lt;/h3&gt;

&lt;p&gt;The first type of plugin is a syntax plugin. Out of the box, Babel is unable to work with code written using JSX syntax. If you want Babel to be able to understand JSX code you need to include &lt;code&gt;@babel/plugin-syntax-jsx&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tranform-plugins" class="anchor"&gt;
  &lt;/a&gt;
  Tranform plugins
&lt;/h3&gt;

&lt;p&gt;Alternatively, you may want to transform JSX into regular old JavaScript code. For that, you can use a transform plugin &lt;code&gt;@babel/plugin-transform-jsx&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are two different JSX transform plugins. One uses the open standard, and one is specific to React, &lt;code&gt;@babel/plugin-transform-react-jsx&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Understanding transform plugins makes it clearer why order matters in our plugins array. If the plugins change the structure of our code, it's important to make sure we're doing that in the right order.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#presets" class="anchor"&gt;
  &lt;/a&gt;
  Presets
&lt;/h2&gt;

&lt;p&gt;As it turns out there are often a number of plugins that need to be included to handle certain types of code. Think of a framework like React and the various "special" types of syntax it supports that deviate from the ECMAScript base spec.&lt;/p&gt;

&lt;p&gt;That's where presets come in, presets are a collection of plugins. You can configure presets the same way you can configure plugins.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;presets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`some-preset-here`&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;However, if you have multiple presets, the order of execution is the reverse of the plugins array! The last preset goes first.&lt;/p&gt;

&lt;p&gt;Let's look at &lt;code&gt;@babel/preset-react&lt;/code&gt; which includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@babel/plugin-syntax-jsx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@babel/plugin-transform-react-jsx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@babel/plugin-transform-react-display-name&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice that it includes both a syntax plugin and a transform plugin for JSX, why?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that this is a good example for explaining parsers, but in most cases, both types of plugins are not necessary. Transform plugins automatically enable their corresponding syntax plugins.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#parsers" class="anchor"&gt;
  &lt;/a&gt;
  Parsers
&lt;/h2&gt;

&lt;p&gt;This is where things get interesting. Babel can do a lot of things, but most of the time it's abstracted away from the developer. You set up a &lt;code&gt;.babelrc&lt;/code&gt; file and watch it work.&lt;/p&gt;

&lt;p&gt;If you dig under the covers of &lt;code&gt;@babel/core&lt;/code&gt; you'll notice that there are different types of functions it exposes. Most importantly, &lt;code&gt;parse&lt;/code&gt; and &lt;code&gt;transform&lt;/code&gt;, both of which come in async and sync versions.&lt;/p&gt;

&lt;p&gt;When Babel runs its parser step it is looking at code and breaking it into pieces, specifically an AST (Abstract Syntax Tree). It needs the appropriate syntax plugins to make sure it can understand the code it's reading. &lt;/p&gt;

&lt;p&gt;When it's running through the parser, it needs &lt;code&gt;@babel/plugin-syntax-jsx&lt;/code&gt; to give it a manual for reading through JSX code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#transforms" class="anchor"&gt;
  &lt;/a&gt;
  Transforms
&lt;/h2&gt;

&lt;p&gt;Once the code is parsed into an AST, it can be transformed. There are many reasons for doing this, but the most common one is to translate the code into a more universally understood syntax. For example, using &lt;code&gt;@babel/plugin-transform-react-jsx&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Becomes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cm"&gt;/*#__PURE__*/&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="cm"&gt;/*#__PURE__*/&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is great! But remember that Babel can't transform code it hasn't already parsed into an AST. Meaning it needs the syntax plugin to be able to read and parse the original JSX.&lt;/p&gt;

&lt;p&gt;The wonder of presets is that these things are bundled up for common use cases so you don't have to think much of it. But it's useful to understand the differences.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overrides" class="anchor"&gt;
  &lt;/a&gt;
  Overrides
&lt;/h2&gt;

&lt;p&gt;One more thing I want to mention is overrides. The parser won't work if it sees unfamiliar syntax, so what if your project has different types of files?&lt;/p&gt;

&lt;p&gt;A common example of this is a repo with both TypeScript and JavaScript files. Babel can handle this with some changes to the configuration file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`@babel/plugin-syntax-jsx`&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nx"&gt;overrides&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`**/*.ts`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`**/*.tsx`&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;`@babel/plugin-syntax-typescript`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;isTSX&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}]],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Using the passed in filename, Babel uses the &lt;code&gt;test&lt;/code&gt; array to look for RegEx matches. When it finds one, it uses the TypeScript plugin we've provided in the plugins array to parse the code. It's worth noting that the plugins array provided in overrides gets merged with the top-level plugins array. That means our JSX syntax plugin is still in use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-you-really-need-to-know-this" class="anchor"&gt;
  &lt;/a&gt;
  Do you really need to know this?
&lt;/h2&gt;

&lt;p&gt;There is no reason to abandon your &lt;code&gt;.babelrc&lt;/code&gt; file or move away from using tried and true presets. For many of us, that's all we'll ever need.&lt;/p&gt;

&lt;p&gt;But sometimes you want to be the one operating on your code while it's an AST. Sometimes you want to write your own Babel plugin. And understanding how to get in and out of that state is useful!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>A closer look at CSS functions</title>
      <author>Habdul Hazeez</author>
      <pubDate>Mon, 23 Nov 2020 17:06:07 +0000</pubDate>
      <link>https://dev.to/ziizium/a-closer-look-at-css-functions-5bbn</link>
      <guid>https://dev.to/ziizium/a-closer-look-at-css-functions-5bbn</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Introduction&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;CSS functions are used as properties for various CSS properties. In this article you'll learn about these functions, how they are used, when to use them,  if necessary, their "backup" approach (if the specific function is not supported by the browser). You'll also get links to other writings from around the web for further study. In the end, you'll have added to your CSS skills.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-function-definition" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;CSS function definition&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In most modern programming languages, a function is defined by writing the &lt;code&gt;function&lt;/code&gt; keyword and specifying the name of the function followed by a pair of brackets (which can contain the function parameters), and curly that will contain the function definition.&lt;/p&gt;

&lt;p&gt;An example of a function in JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;helloWorld&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world, I am a function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Call the function&lt;/span&gt;
&lt;span class="nx"&gt;helloWorld&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Hello world, I am a function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Unlike JavaScript (or other languages) where you can define &lt;em&gt;some&lt;/em&gt; function(s) (as shown above) before you can call them, CSS functions definition are written by browser vendors, you just need to call the function with the appropriate property and then pass the necessary arguments.&lt;/p&gt;

&lt;p&gt;The syntax is given below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;property-name: &amp;lt;function name&amp;gt;(arguments)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, let's go into proper details and explanation. We will start by listing the functions followed by detailed explanation and code examples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-functions" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;CSS functions&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The functions are listed below, they are arranged based on the likelihood of their usage in your projects. Click on the function name to jump to its explanation and browser support:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#url"&gt;&lt;code&gt;url()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rgb"&gt;&lt;code&gt;rgb()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rgba"&gt;&lt;code&gt;rgba()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hsl"&gt;&lt;code&gt;hsl()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hsla"&gt;&lt;code&gt;hsla()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#attr"&gt;&lt;code&gt;attr()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#linear-gradient"&gt;&lt;code&gt;linear-gradient()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#repeating-linear-gradient"&gt;&lt;code&gt;repeating-linear-gradient()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#radial-gradient"&gt;&lt;code&gt;radial-gradient()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#repeating-radial-gradient"&gt;&lt;code&gt;repeating-radial-gradient()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#calc"&gt;&lt;code&gt;calc()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cubic-bezier"&gt;&lt;code&gt;cubic-bezier()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#var"&gt;&lt;code&gt;var()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#min"&gt;&lt;code&gt;min()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#max"&gt;&lt;code&gt;max()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#clamp"&gt;&lt;code&gt;clamp()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You'll also find &lt;a href="#rgbhsl-backup"&gt;backup approach for RGB and HSL color functions&lt;/a&gt; and &lt;a href="#gradients-backup"&gt;backup approach for CSS gradients&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In addition, &lt;strong&gt;the browser version under each browser support table is the first version of that browser to support that said property&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-url-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;url()&lt;/code&gt;&lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;url()&lt;/code&gt; function name is short for Uniform Resource Locator. It is used with CSS properties that loads an external resource (like an image or font file) that is used on the web page. Examples of such properties are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;src&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;background-image&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The location of the file(s) is either on your local machine, another server on the same network, or the internet. Then you will have to specify the URL in any of the following format:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Relative URL&lt;/li&gt;
&lt;li&gt;Absolute URL&lt;/li&gt;
&lt;li&gt;data-URI&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#relative-url" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Relative URL&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;A relative URL is used to reference file(s) that are in the same directory as the current working directory or in another directory on the same server. It is specified &lt;strong&gt;without&lt;/strong&gt; the server address.&lt;/p&gt;

&lt;p&gt;When the Relative URL is used with the &lt;code&gt;url()&lt;/code&gt; function, it takes the following form if the file is in the same directory as the CSS file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;url('file-location');
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the example below, CSS &lt;code&gt;background-image&lt;/code&gt; property as indicated by the property name, is used to add a background image to a page. Here, the &lt;code&gt;url()&lt;/code&gt; is using a Relative URL:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.hero-section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url('image.jpg')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When the file is in a higher directory than the CSS file, you use &lt;code&gt;..&lt;/code&gt;, which means &lt;em&gt;go up one directory&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;url('../file-location');
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the example below, &lt;code&gt;@font-face&lt;/code&gt; has a &lt;code&gt;url()&lt;/code&gt; using a Relative URL that goes up one level to get the font file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@font-face&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Catamaran-Bold"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c"&gt;/**
     * Go up one level to the fonts folder and find the Catamaran
     * font inside the Catamaran folder.
     */&lt;/span&gt;
    &lt;span class="nl"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url('../fonts/Catamaran/Catamaran-Bold.ttf')&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;'truetype'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/**
 * Now, the font can be used with the font-family property
 */&lt;/span&gt;
&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Catamaran-Bold"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Verdana&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If it's two directory up, you'll write &lt;code&gt;..&lt;/code&gt;  twice separated by &lt;code&gt;/&lt;/code&gt;, which means &lt;em&gt;go up one directory&lt;/em&gt;, &lt;em&gt;and then another directory&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;url('../../file-location');
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;CSS code example for this format is given below, this time the URL goes up twice to fetch the image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.hero-image&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(../../image.jpg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You should know that the double &lt;code&gt;..&lt;/code&gt;  can be folder names&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;url('../my-assets/images/file-location')
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Therefore, you can have a code example like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.hero-image&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(../my-assets/images/image.jpg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#absolute-url" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Absolute URL&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;An absolute URL is &lt;em&gt;mostly&lt;/em&gt; used when referencing files on another server, but you can use it to reference files on your server. It takes the following form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;url('protocol://domain/path')
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The protocol can be any of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http://&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ftp://&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file://&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When used with the &lt;code&gt;url()&lt;/code&gt; function, it takes the following form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;url('https://server-address/path-to-file');
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the following example, &lt;code&gt;url()&lt;/code&gt; is using an Absolute URL to load the required resource for the &lt;code&gt;.hero-section&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.hero-section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url('https://server-address/images/image.jpg')&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#datauri" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;data-URI&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;A data-URI is used to specify a resource in &lt;code&gt;base-64&lt;/code&gt; format or Scalable Vector Graphics.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;url('data:resource-format');
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The following example taken from MDN, is using a data-URI to fetch an SVG:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.background&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='90' height='45'%3E%3Cpath d='M10 10h60' stroke='%2300F' stroke-width='5'/%3E%3Cpath d='M10 20h60' stroke='%230F0' stroke-width='5'/%3E%3Cpath d='M10 30h60' stroke='red' stroke-width='5'/%3E%3C/svg%3E")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#browser-support" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Browser Support&lt;/strong&gt;
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Chrome&lt;/th&gt;
&lt;th&gt;Firefox&lt;/th&gt;
&lt;th&gt;Edge&lt;/th&gt;
&lt;th&gt;Opera&lt;/th&gt;
&lt;th&gt;Safari&lt;/th&gt;
&lt;th&gt;Internet Explorer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;3.5&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#-raw-rgb-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;rgb()&lt;/code&gt;&lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This function name is taken from RGB which stands for Red, Green, and Blue. Therefore, this function defines a color using the RGB model.&lt;/p&gt;

&lt;p&gt;It accepts three comma-separated values either as &lt;em&gt;integer&lt;/em&gt; values between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;255&lt;/code&gt; or percentage values between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt;. These values specify the intensity of the color.&lt;/p&gt;

&lt;p&gt;With the previous information, it's evident that &lt;code&gt;rgb()&lt;/code&gt; only works with CSS properties that is used to apply color to a web page element. Examples of such properties are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;background-color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;box-shadow&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Its syntax is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rgb(&amp;lt;red value&amp;gt;, &amp;lt;green value&amp;gt;, &amp;lt;blue value&amp;gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The color of &lt;code&gt;box-shadow&lt;/code&gt; is specified using  &lt;code&gt;rgb()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.media-card&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* Black */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can rewrite the previous examples to use percentage values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/**
 * Note the percentage values.
 */&lt;/span&gt;
&lt;span class="nc"&gt;.media-card&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* Black */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#browser-support" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Browser Support&lt;/strong&gt;
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Chrome&lt;/th&gt;
&lt;th&gt;Firefox&lt;/th&gt;
&lt;th&gt;Edge&lt;/th&gt;
&lt;th&gt;Opera&lt;/th&gt;
&lt;th&gt;Safari&lt;/th&gt;
&lt;th&gt;Internet Explorer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;3.5&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;11.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#-raw-rgba-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;rgba()&lt;/code&gt;&lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;On a normal day, the background color of the next selector should be Black, but due to the alpha transparency value of &lt;code&gt;0&lt;/code&gt;, it turns out White.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/**
 * Note the alpha transparency value
 */&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Similar to &lt;code&gt;rgb()&lt;/code&gt;, it works with CSS properties that applies colors to a web page element. An example is the &lt;code&gt;background-color&lt;/code&gt; demonstrated above.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#browser-support" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Browser Support&lt;/strong&gt;
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Chrome&lt;/th&gt;
&lt;th&gt;Firefox&lt;/th&gt;
&lt;th&gt;Edge&lt;/th&gt;
&lt;th&gt;Opera&lt;/th&gt;
&lt;th&gt;Safari&lt;/th&gt;
&lt;th&gt;Internet Explorer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#-raw-hsl-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;hsl()&lt;/code&gt;&lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;HSL stands for &lt;em&gt;Hue Saturation Lightness&lt;/em&gt; which is another model for defining a color. The function &lt;code&gt;hsl()&lt;/code&gt; defines colors using this model.&lt;/p&gt;

&lt;p&gt;Its syntax is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hsl(hue, saturation, lightness);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;hue&lt;/code&gt; — The degree of the color on a color wheel. The color wheel is a circle measured in &lt;code&gt;360deg&lt;/code&gt;. On the circle &lt;code&gt;0&lt;/code&gt; (or &lt;code&gt;360&lt;/code&gt;) is Red, &lt;code&gt;120&lt;/code&gt; is Green, &lt;code&gt;240&lt;/code&gt; is Blue.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;saturation&lt;/code&gt; — The intensity of the color where &lt;code&gt;0%&lt;/code&gt; represents shade of gray and &lt;code&gt;100%&lt;/code&gt; is the full color.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;lightness&lt;/code&gt; — The value or tone of the color. &lt;code&gt;0%&lt;/code&gt; represents Black, &lt;code&gt;50%&lt;/code&gt; is normal, and &lt;code&gt;100%&lt;/code&gt; is White.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's create a variant of green color with a bit of lightness:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;120&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I'll advise that you should experiment with other values for better understanding and fun.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#browser-support" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Browser Support&lt;/strong&gt;
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Chrome&lt;/th&gt;
&lt;th&gt;Firefox&lt;/th&gt;
&lt;th&gt;Edge&lt;/th&gt;
&lt;th&gt;Opera&lt;/th&gt;
&lt;th&gt;Safari&lt;/th&gt;
&lt;th&gt;Internet Explorer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;9.5&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#-raw-hsla-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;hsla()&lt;/code&gt;&lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Same as &lt;code&gt;hsl()&lt;/code&gt; with the addition of the &lt;em&gt;alpha transparency&lt;/em&gt;. As a reminder, the &lt;em&gt;alpha transparency&lt;/em&gt; specifies the opacity of the color.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;120&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* Super light green */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#backup-approach-for-rgb-and-hsl-color-functions" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Backup approach for RGB and HSL color  functions &lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;For browsers that do not support the RGB and HSL color functions, you can use &lt;em&gt;hexadecimal&lt;/em&gt; notation or the &lt;em&gt;direct&lt;/em&gt; color name in-place of these functions for properties that use them as part of the values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.media-card&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Black */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But if you use any of the function to specify a color as such:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;120%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;79%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;21%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You should provide the same color (or another) in a &lt;em&gt;hexadecimal&lt;/em&gt; notation or its &lt;em&gt;direct&lt;/em&gt; name as a value (or part of the value) of the property, afterwards, you declare the same property again using the RGB or HSL color functions, therefore, for browsers that do not support the RGB or HSL color functions, the &lt;em&gt;cascade&lt;/em&gt; will kick in and the browser will use the latter declaration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffc936&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;120%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;79%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;21%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-attr-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;attr()&lt;/code&gt;&lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The HTML attribute of an element are returned by the &lt;code&gt;attr()&lt;/code&gt; function. Furthermore, you can attach or place this attribute on a selected element.&lt;/p&gt;

&lt;p&gt;This function is mostly used with CSS &lt;code&gt;content&lt;/code&gt; property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/**
 * Insert the Image alt attribute after the
 * image itself.
 */&lt;/span&gt;
&lt;span class="nc"&gt;.media-card__image&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The following example taken from W3Schools will insert the value of the &lt;code&gt;href&lt;/code&gt; attribute after each link:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;" ("&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s1"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#browser-support" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Browser Support&lt;/strong&gt;
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Chrome&lt;/th&gt;
&lt;th&gt;Firefox&lt;/th&gt;
&lt;th&gt;Edge&lt;/th&gt;
&lt;th&gt;Opera&lt;/th&gt;
&lt;th&gt;Safari&lt;/th&gt;
&lt;th&gt;Internet Explorer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#-raw-lineargradient-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;linear-gradient()&lt;/code&gt;&lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Gradients in CSS gives you the opportunity to display smooth transitions between two or more specified colors. There are two types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Linear Gradients — Goes down/up/left/right/diagonally and represented by the &lt;code&gt;linear-gradient()&lt;/code&gt; function (discussed next).&lt;/li&gt;
&lt;li&gt;Radial Gradients — They are defined by their center and represented by &lt;code&gt;radial-gradient()&lt;/code&gt; function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This &lt;code&gt;linear-gradient()&lt;/code&gt; function sets a linear gradient as the background image of the selected element. Its syntax is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;background-image: linear-gradient(direction, color-stop1, color-stop2, ...);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;direction&lt;/code&gt; value can be any of the following:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#top-to-bottom-default" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Top to bottom (default) &lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;The following example starts at the top and ends at the bottom. It starts Black, transitioning to White:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#left-to-right" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Left to right &lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;As the name indicates, the gradient starts goes from left to right using the following keywords:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;to&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;right&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following gradient starts Blue, transitioning to Red.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#diagonal" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Diagonal &lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;You can create a gradient by stating the horizontal and vertical starting positions. In pseudo-code,  some examples are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;to bottom right&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;to bottom left&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following gradients start at top left and ends at the bottom right.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;bottom&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can also use &lt;em&gt;angles&lt;/em&gt; to specify the direction of the gradient, this gives you more control over the direction of the gradient:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;0deg&lt;/code&gt; is equivalent to &lt;code&gt;to top&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;90deg&lt;/code&gt; is equivalent to &lt;code&gt;to right&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;180deg&lt;/code&gt; is equivalent to &lt;code&gt;to bottom&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Code examples on how to do this is left as an exercise to the reader&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Note that you are &lt;strong&gt;not limited to just two colors&lt;/strong&gt;, you can use multiple color stops as shown in the example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;bottom&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;aqua&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In addition, you can also specify the color using the &lt;code&gt;rgba()&lt;/code&gt; function, then you can use the &lt;em&gt;alpha transparency&lt;/em&gt; to create a fading effect. As stated earlier:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;em&gt;transparency value&lt;/em&gt; is a number between &lt;code&gt;0.0&lt;/code&gt; (fully transparent) and &lt;code&gt;1.0&lt;/code&gt; (fully opaque).&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;bottom&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;124&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;89&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;#1560bd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;#1560bd&lt;/code&gt; above is a hexadecimal color notation which is another way to specify the color. How will it look like in a browser? Well, if the webpage is blank (why would you have a blank page?), it might not look good:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--inCEVvD4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e1n4qohb9at42v4v9isp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--inCEVvD4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e1n4qohb9at42v4v9isp.png" alt="A web page with linear gradient"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the web page contains enough content the effect might look compelling:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OjivIJlF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/o1gk8k2qmt5egj5r0y6b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OjivIJlF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/o1gk8k2qmt5egj5r0y6b.png" alt="A data table with linear gradients"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#browser-support" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Browser Support&lt;/strong&gt;
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Chrome&lt;/th&gt;
&lt;th&gt;Firefox&lt;/th&gt;
&lt;th&gt;Edge&lt;/th&gt;
&lt;th&gt;Opera&lt;/th&gt;
&lt;th&gt;Safari&lt;/th&gt;
&lt;th&gt;Internet Explorer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;26.0, 10.0 -webkit-&lt;/td&gt;
&lt;td&gt;16.0, 3.6 -moz-&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;12.1, 11.1 -o-&lt;/td&gt;
&lt;td&gt;6.1, 5.1 -webkit-&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#-raw-repeatinglineargradient-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;repeating-linear-gradient()&lt;/code&gt;&lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;As the name implies, this function is used to repeat linear gradients.&lt;/p&gt;

&lt;p&gt;Its syntax is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; background-image: repeating-linear-gradient(angle | to side-or-corner, color-stop1, color-stop2, ...);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;angle&lt;/code&gt; — Direction of the gradient from &lt;code&gt;0deg&lt;/code&gt; to &lt;code&gt;360deg&lt;/code&gt;, default is &lt;code&gt;180deg&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;side-or-corner&lt;/code&gt; — Two keywords (both optional) that defines the starting-point of the gradient line. The first indicates the horizontal side (left or right) and the second indicates the vertical side (top or bottom).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;color-stop1&lt;/code&gt;, &lt;code&gt;color-stop2&lt;/code&gt;, &lt;code&gt;...&lt;/code&gt; — The colors you want to render smooth transitions among followed by an optional stop position which is a percentage value between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt; or a length along the gradient axis.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example is given below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/**
 * The gradient starts at 75deg and uses 3 color stops.
 * The second color covers just 7% along the gradient.
*/&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;repeating-linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;75deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;124&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;89&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;#1560bd&lt;/span&gt; &lt;span class="m"&gt;7%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;10%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#browser-support" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Browser Support&lt;/strong&gt;
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Chrome&lt;/th&gt;
&lt;th&gt;Firefox&lt;/th&gt;
&lt;th&gt;Edge&lt;/th&gt;
&lt;th&gt;Opera&lt;/th&gt;
&lt;th&gt;Safari&lt;/th&gt;
&lt;th&gt;Internet Explorer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;26.0, 10.0 -webkit-&lt;/td&gt;
&lt;td&gt;16.0, 3.6 -moz-&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;12.1, 11.1 -o-&lt;/td&gt;
&lt;td&gt;6.1, 5.1 -webkit&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#-raw-radialgradient-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;radial-gradient()&lt;/code&gt;&lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This function sets a radial gradient as the background image of a web page element. A radial gradient starts at the center of the selected element and you &lt;strong&gt;must&lt;/strong&gt; define at least two color stops.&lt;/p&gt;

&lt;p&gt;The syntax is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; background-image: radial-gradient(shape size at position, start-color, ..., last-color);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;shape&lt;/code&gt; — The shape of the gradient. &lt;em&gt;ellipse&lt;/em&gt; is the default, the other being a &lt;em&gt;circle.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;size&lt;/code&gt; — Size of the gradient with &lt;em&gt;farthest-corner&lt;/em&gt;, &lt;em&gt;closest-side&lt;/em&gt;, &lt;em&gt;closest-corner&lt;/em&gt;, and &lt;em&gt;farthest-side&lt;/em&gt; as possible values.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;position&lt;/code&gt; — Position of the gradient. Default is &lt;code&gt;center&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;start-color&lt;/code&gt;, &lt;code&gt;...&lt;/code&gt;, &lt;code&gt;last-color&lt;/code&gt; — The colors that you want to render smooth transitions along which is a color value followed by an optional stop position (a percentage value between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt; or a length along the gradient axis).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A basic example of a radial gradient with three color stops is given below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;#1560bd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#cccccc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#1a1a1a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the code snippet above, the gradient starts with &lt;code&gt;#1560bd&lt;/code&gt; (blue) at the center, followed by &lt;code&gt;#cccccc&lt;/code&gt; (gray) around it, then &lt;code&gt;#1a1a1a&lt;/code&gt;  (black) completes the gradient. The result is an &lt;em&gt;ellipse&lt;/em&gt; (which is the default) with three &lt;em&gt;rings&lt;/em&gt; of colors as defined by the color stops.&lt;/p&gt;

&lt;p&gt;You can change the &lt;em&gt;ellipse&lt;/em&gt; if you want to. The code snippet below will result in a &lt;em&gt;circle&lt;/em&gt; because we changed the shape of the gradient before defining the color stops:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#1560bd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#cccccc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#1a1a1a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Furthermore, you can also define the size of the gradient. The size determines how &lt;em&gt;big&lt;/em&gt; or &lt;em&gt;small&lt;/em&gt; the gradient will be from its center. When you use the value &lt;code&gt;closest-side&lt;/code&gt; the gradient appear small at the center of the selected element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;circle&lt;/span&gt; &lt;span class="n"&gt;closest-side&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#1560bd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#cccccc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#1a1a1a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You should experiment with other values&lt;/strong&gt;, i.e. &lt;em&gt;farthest-side&lt;/em&gt;, &lt;em&gt;closest-corner&lt;/em&gt; e.t.c.&lt;/p&gt;

&lt;p&gt;Currently, the gradient is at the center, you can move it to the left or right if you wish. If you'd like to move it to the left, you'll have to ensure the &lt;code&gt;position&lt;/code&gt; value is &lt;strong&gt;less than&lt;/strong&gt; &lt;code&gt;50%&lt;/code&gt;. In the snippet below, the gradient will appear to the left of the selected element because &lt;code&gt;position&lt;/code&gt; is reduced to &lt;code&gt;26%&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;circle&lt;/span&gt; &lt;span class="n"&gt;closest-side&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="m"&gt;26%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#1560bd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#cccccc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#1a1a1a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you'd like to move the gradient further to the right, increase the &lt;code&gt;position&lt;/code&gt; value above &lt;code&gt;50%&lt;/code&gt;. Try &lt;code&gt;86%&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Mind you, the &lt;code&gt;position&lt;/code&gt; value can be specified as two values, the first value represents the &lt;em&gt;x-axis&lt;/em&gt; (horizontal) and the second value is the &lt;code&gt;y-axis&lt;/code&gt; (vertical). &lt;/p&gt;

&lt;p&gt;In the code snippet below, the gradient is moved &lt;code&gt;40%&lt;/code&gt; from the left of the selected element and &lt;code&gt;30%&lt;/code&gt; from the top:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;circle&lt;/span&gt; &lt;span class="n"&gt;closest-side&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="m"&gt;40%&lt;/span&gt; &lt;span class="m"&gt;30%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#1560bd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#cccccc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#1a1a1a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#browser-support" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Browser Support&lt;/strong&gt;
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Chrome&lt;/th&gt;
&lt;th&gt;Firefox&lt;/th&gt;
&lt;th&gt;Edge&lt;/th&gt;
&lt;th&gt;Opera&lt;/th&gt;
&lt;th&gt;Safari&lt;/th&gt;
&lt;th&gt;Internet Explorer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;26.0, 10.0 -webkit-&lt;/td&gt;
&lt;td&gt;16.0, 3.6 -moz-&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;12.1, 11.6 -o-&lt;/td&gt;
&lt;td&gt;6.1, 5.1 -webkit-&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#-raw-repeatingradialgradient-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;repeating-radial-gradient()&lt;/code&gt;&lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This function behaves similarly to &lt;code&gt;radial-gradient()&lt;/code&gt;repeats the radial gradient with one exception — it repeats the radial gradient.&lt;/p&gt;

&lt;p&gt;You can convert the last code example to use a &lt;code&gt;repeating-radial-gradient()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;repeating-radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;circle&lt;/span&gt; &lt;span class="n"&gt;closest-side&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="m"&gt;40%&lt;/span&gt; &lt;span class="m"&gt;30%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#1560bd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#cccccc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#1a1a1a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The gradient is now repeated until it fills the entire area of the selected element.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#browser-support" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Browser Support&lt;/strong&gt;
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Chrome&lt;/th&gt;
&lt;th&gt;Firefox&lt;/th&gt;
&lt;th&gt;Edge&lt;/th&gt;
&lt;th&gt;Opera&lt;/th&gt;
&lt;th&gt;Safari&lt;/th&gt;
&lt;th&gt;Internet Explorer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;26.0, 10.0 -webkit-&lt;/td&gt;
&lt;td&gt;16.0, 3.6 -moz-&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;12.1, 11.1 -o-&lt;/td&gt;
&lt;td&gt;6.1, 5.1 -webkit&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#backup-approach-for-css-gradients" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Backup approach for CSS Gradients &lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Use &lt;code&gt;background-color&lt;/code&gt; has a backup for browsers that might not support CSS gradients.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c"&gt;/* Specify CSS gradients here */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-cubicbezier-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;cubic-bezier()&lt;/code&gt;&lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;As the name implies, this function defines a Cubic Bézier curve. Wikipedia defines a Bézier curve as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a parametric curve used in computer graphics and related fields.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A Bézier curve is defined by four points &lt;code&gt;P0&lt;/code&gt;, &lt;code&gt;P1&lt;/code&gt;, &lt;code&gt;P2&lt;/code&gt;, &lt;code&gt;P3&lt;/code&gt; where &lt;code&gt;P0&lt;/code&gt; and &lt;code&gt;P3&lt;/code&gt; are the start and end points.&lt;/p&gt;

&lt;p&gt;In CSS, these points are fixed coordinates where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;P0&lt;/code&gt; is &lt;code&gt;(0, 0)&lt;/code&gt; — initial time and initial state&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;P3&lt;/code&gt; is &lt;code&gt;(1, 1)&lt;/code&gt; — final time and final state&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;cubic-bezier()&lt;/code&gt; function is used with animation related properties in CSS for defining the speed of the animation. Some of these properties are &lt;code&gt;animation-timing-function&lt;/code&gt; and &lt;code&gt;transition-timing-function&lt;/code&gt;. Its syntax is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cubic-bezier(x1,y1,x2,y2);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;x1, y1, x2, y2&lt;/code&gt; are required numerical values. &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt; must be a number from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The example below is a modified version of an example on W3schools, the animation will start slow and will speed up towards the end.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition-timing-function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cubic-bezier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;.32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;.9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;.21&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here is the HTML (without the metadata):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hover over the div element below, to see the transition effect.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There is an online tool by Lea Verou used for creating the Bézier curve values. Visit it at &lt;a href="https://cubic-bezier.com/"&gt;cubic-bezier.com&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#browser-support" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Browser Support&lt;/strong&gt;
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Chrome&lt;/th&gt;
&lt;th&gt;Firefox&lt;/th&gt;
&lt;th&gt;Edge&lt;/th&gt;
&lt;th&gt;Opera&lt;/th&gt;
&lt;th&gt;Safari&lt;/th&gt;
&lt;th&gt;Internet Explorer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;10.5&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#-raw-calc-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;calc()&lt;/code&gt;&lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;calc()&lt;/code&gt; function performs mathematical calculation using the expression it receives as an argument. This expression can be simple or complex if need be, as long as it's a valid expression, the function will compute it and the result will be used as the property value.&lt;/p&gt;

&lt;p&gt;The syntax is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;calc(expression)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the example below, the font size is calculated using &lt;code&gt;calc()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/**
 * 1rem is 16px,
 * 0.2em is (16px * 2) which is 3.2px
 * Finally, 16px + 3.2px gives 19.2px
 */&lt;/span&gt;
&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;0.2em&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The calculation in the code snippet above assumes the browser default font size is &lt;code&gt;16px&lt;/code&gt; (this is easily changeable by the user).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#browser-support" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Browser Support&lt;/strong&gt;
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Chrome&lt;/th&gt;
&lt;th&gt;Firefox&lt;/th&gt;
&lt;th&gt;Edge&lt;/th&gt;
&lt;th&gt;Opera&lt;/th&gt;
&lt;th&gt;Safari&lt;/th&gt;
&lt;th&gt;Internet Explorer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;26.0, 19.0 -webkit-&lt;/td&gt;
&lt;td&gt;16.0, 4.0 -moz-&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;7.0, 6.0 -webkit&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#-raw-var-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;var()&lt;/code&gt;&lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;When you declare a CSS variable in your stylesheet, the &lt;code&gt;var()&lt;/code&gt; function is used to insert the value of the variable later in the stylesheet.&lt;/p&gt;

&lt;p&gt;Its syntax is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var(name, value)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;name&lt;/code&gt;  — Required.  The name of the variable that must start with two dashes &lt;code&gt;--&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;value&lt;/code&gt; — Optional fallback value that is used when the variable is not found.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First declare the variable as &lt;em&gt;global&lt;/em&gt; variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#1560bd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#cccccc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then you can use the variable value via the &lt;code&gt;var()&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--border-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--background-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can provide fallback values if the variable is not found:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--border-color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#1560bd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--background-color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#cccccc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To make things easy, the fallback values are the variable values declared in the &lt;code&gt;:root&lt;/code&gt; element. You can use other values depending on the theme of your website.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#browser-support" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Browser Support&lt;/strong&gt;
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Chrome&lt;/th&gt;
&lt;th&gt;Firefox&lt;/th&gt;
&lt;th&gt;Edge&lt;/th&gt;
&lt;th&gt;Opera&lt;/th&gt;
&lt;th&gt;Safari&lt;/th&gt;
&lt;th&gt;Internet Explorer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;49&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;15.0&lt;/td&gt;
&lt;td&gt;36.0&lt;/td&gt;
&lt;td&gt;9.1&lt;/td&gt;
&lt;td&gt;No Support&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#-raw-min-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;min()&lt;/code&gt;&lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;min()&lt;/code&gt; function is part of CSS logical operators (others being &lt;a href="#max"&gt;&lt;code&gt;max()&lt;/code&gt;&lt;/a&gt; and &lt;a href="#clamp"&gt;&lt;code&gt;clamp()&lt;/code&gt;&lt;/a&gt;) that allows you to provide a list of values as arguments and the browser will determine which one is the smallest and it will use this as the actual value at any given time.&lt;/p&gt;

&lt;p&gt;It allows you to specify multiple values as arguments but two values is easiest to understand. Take a look at the following code snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1000px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, we have &lt;code&gt;main&lt;/code&gt; width set to &lt;code&gt;min(1000px, 500px)&lt;/code&gt;, at any given time the browser will set the width of &lt;code&gt;main&lt;/code&gt;  as &lt;code&gt;500px&lt;/code&gt; because it's always smaller than &lt;code&gt;1000px&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, let's tweak the values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1000px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, at a larger viewport that is more than &lt;code&gt;1000px&lt;/code&gt;, the browser will set the width of &lt;code&gt;main&lt;/code&gt; as &lt;code&gt;1000px&lt;/code&gt; because at that point the width has exceeded what the browser will compute as &lt;code&gt;70%&lt;/code&gt; of the viewport and automatically &lt;code&gt;1000px&lt;/code&gt; becomes the minimum value and the browser will use it as the actual width of &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Have a look at the following GIF and take note of the computed width:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L9Q8Hosr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5vtkfapwsd6mjypm3ahk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L9Q8Hosr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5vtkfapwsd6mjypm3ahk.gif" alt="Browser developer tools opened"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I had to increase and decrease the zoom level so that you can notice when the browser sets the &lt;code&gt;main&lt;/code&gt; width to &lt;code&gt;1000px&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At a smaller viewport, where &lt;code&gt;1000px&lt;/code&gt; is more than &lt;code&gt;70%&lt;/code&gt;, the browser will set the width as &lt;code&gt;70%&lt;/code&gt; because at that point &lt;code&gt;70%&lt;/code&gt; is the minimum value compared to &lt;code&gt;1000px&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With that out of the way, you should know that you can write &lt;code&gt;min(1000px, 70%)&lt;/code&gt; as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1000px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Effectively this means &lt;code&gt;max-width&lt;/code&gt; use &lt;code&gt;min()&lt;/code&gt; behind the scenes. But which one should you go for? 2 lines of code with &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;max-width&lt;/code&gt; or 1 line of code with &lt;code&gt;min()&lt;/code&gt;? I'll leave that you.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#browser-support" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Browser Support&lt;/strong&gt;
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Chrome&lt;/th&gt;
&lt;th&gt;Firefox&lt;/th&gt;
&lt;th&gt;Edge&lt;/th&gt;
&lt;th&gt;Opera&lt;/th&gt;
&lt;th&gt;Safari&lt;/th&gt;
&lt;th&gt;Internet Explorer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;79&lt;/td&gt;
&lt;td&gt;75&lt;/td&gt;
&lt;td&gt;79&lt;/td&gt;
&lt;td&gt;66&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;No Support&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#-raw-max-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;max()&lt;/code&gt;&lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is the opposite of &lt;code&gt;min()&lt;/code&gt;. As it selects the maximum value from the list of supplied arguments which the browser will use as the actual value.&lt;/p&gt;

&lt;p&gt;Using our previous example, let's switch the function name to &lt;code&gt;max()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1000px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, the width of &lt;code&gt;main&lt;/code&gt; will be a minimum of &lt;code&gt;1000px&lt;/code&gt;, but as the computed value of &lt;code&gt;70%&lt;/code&gt; increases beyond &lt;code&gt;1000px&lt;/code&gt; the browser will always use that computed value as the actual width of &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the GIF below, &lt;code&gt;1000px&lt;/code&gt; is the minimum value therefore, the browser will use it at that viewport size, but when the zoom level is increased (thus imitating an increase in viewport size) the actual width of &lt;code&gt;main&lt;/code&gt; starts to grow:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i3c_fSK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eigcgjy9aqmy9xrbz9i0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3c_fSK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eigcgjy9aqmy9xrbz9i0.gif" alt="Browser developer tools opened"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should note that &lt;code&gt;max(1000px, 70%)&lt;/code&gt; is almost the same as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1000px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This also means that &lt;code&gt;min-width&lt;/code&gt; use &lt;code&gt;max()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Please, note the following for &lt;code&gt;min()&lt;/code&gt; and &lt;code&gt;max()&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The order in which you write the arguments does not matter, the functions will select either the smallest or largest value as the actual value of the property.&lt;/li&gt;
&lt;li&gt;You can supply more than 2 values as the arguments for both functions.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;min()&lt;/code&gt; allows you to impose a maximum value since it selects the smallest of values and the browser won't allow the value to exceed this value hence that is the &lt;em&gt;maximum&lt;/em&gt; it will go.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;max()&lt;/code&gt; allows you to impose a minimum value since it selects the biggest of values and the browser will use the smallest value first and if condition permits it will keep growing more than this &lt;em&gt;minimum&lt;/em&gt; value.&lt;/li&gt;
&lt;li&gt;You can perform mathematical calculation inside &lt;code&gt;min()&lt;/code&gt; and &lt;code&gt;max()&lt;/code&gt; without using &lt;code&gt;calc()&lt;/code&gt;. e.g. &lt;code&gt;min(1000px + 10px, 70%)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, the question is: What if you want a value in-between a maximum and minimum value? You'll have to resolve to &lt;code&gt;clamp()&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#browser-support" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Browser Support&lt;/strong&gt;
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Chrome&lt;/th&gt;
&lt;th&gt;Firefox&lt;/th&gt;
&lt;th&gt;Edge&lt;/th&gt;
&lt;th&gt;Opera&lt;/th&gt;
&lt;th&gt;Safari&lt;/th&gt;
&lt;th&gt;Internet Explorer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;79&lt;/td&gt;
&lt;td&gt;75&lt;/td&gt;
&lt;td&gt;79&lt;/td&gt;
&lt;td&gt;66&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;No Support&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#-raw-clamp-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;clamp()&lt;/code&gt;&lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;With the &lt;code&gt;clamp&lt;/code&gt; function, you can set a minimum and maximum values and in-between those values, an &lt;em&gt;ideal&lt;/em&gt; value. The browser will use the computed ideal value when it's larger than the minimum value but smaller than the maximum value.&lt;/p&gt;

&lt;p&gt;This is effectively setting a &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;min-width&lt;/code&gt;, and &lt;code&gt;max-width&lt;/code&gt; property on an element all at once.&lt;/p&gt;

&lt;p&gt;In the code example below, the browser will use &lt;code&gt;500px&lt;/code&gt; because its computed value is larger than &lt;code&gt;5em&lt;/code&gt; which is the minimum value but smaller than the maximum value of &lt;code&gt;50em&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5em&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50em&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When you tweak the values as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50em&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;600px&lt;/code&gt;  is larger than the ideal value of &lt;code&gt;500px&lt;/code&gt; therefore, the browser will use it as the actual value of the &lt;code&gt;width&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;You can write the previous code is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Kindly note that the &lt;code&gt;clamp()&lt;/code&gt; function accepts 3 values, anything less or more is &lt;strong&gt;invalid&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#browser-support" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Browser Support&lt;/strong&gt;
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Chrome&lt;/th&gt;
&lt;th&gt;Firefox&lt;/th&gt;
&lt;th&gt;Edge&lt;/th&gt;
&lt;th&gt;Opera&lt;/th&gt;
&lt;th&gt;Safari&lt;/th&gt;
&lt;th&gt;Internet Explorer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;79&lt;/td&gt;
&lt;td&gt;75&lt;/td&gt;
&lt;td&gt;79&lt;/td&gt;
&lt;td&gt;66&lt;/td&gt;
&lt;td&gt;13.1&lt;/td&gt;
&lt;td&gt;No Support&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In this article you've learned about CSS functions in great detail. I'll encourage you to experiment further to deepen your CSS skills. In a future article we'll look at some practical applications of some of these functions. Thanks for reading.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;References&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;📚 &lt;a href="https://hacks.mozilla.org/2020/04/firefox-75-ambitions-for-april/"&gt;Firefox 75: Ambitions for April&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📹 &lt;a href="https://www.youtube.com/watch?v=U9VF-4euyRo"&gt;min(), max(), and clamp() are CSS magic!&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📚 &lt;a href="https://drafts.csswg.org/css-values-4/#comp-func"&gt;CSS values and Units Module Level 4: Comparison Functions: min(), max(), and clamp()&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📚 &lt;a href="https://kb.iu.edu/d/abwp"&gt;What is the difference between an absolute and relative URL&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#further-reading" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Further reading&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;📚 &lt;a href="https://web.dev/min-max-clamp/"&gt;min(), max(), and clamp(): three logical CSS functions to use today&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📚 &lt;a href="https://ishadeed.com/article/css-min-max-clamp/"&gt;Everything I Learned About min(), max(), clamp() In CSS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📚 &lt;a href="https://blog.logrocket.com/min-max-clamp-css-functions/"&gt;A guide to the &lt;code&gt;min()&lt;/code&gt;, &lt;code&gt;max()&lt;/code&gt;, and &lt;code&gt;clamp()&lt;/code&gt; CSS functions&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#credits" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Credits&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;All browser support table is courtesy of &lt;a href="https://w3schools.com"&gt;W3Schools&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web"&gt;MDN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cover photo is by &lt;a href="https://unsplash.com/@der_maik_"&gt;Maik Jonietz&lt;/a&gt; on &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>HarperDB vs. MongoDB vs. PostgreSQL</title>
      <author>Margo McCabe</author>
      <pubDate>Mon, 23 Nov 2020 16:44:37 +0000</pubDate>
      <link>https://dev.to/margo_hdb/harperdb-vs-mongodb-vs-postgresql-49en</link>
      <guid>https://dev.to/margo_hdb/harperdb-vs-mongodb-vs-postgresql-49en</guid>
      <description>&lt;p&gt;Many people learn or understand new things relative to things they already know. This makes sense, it’s probably a natural instinct. When it comes to products and technology, a lot of people ask “how are you different,” but different from what? You need some sort of baseline to start from, so you can say, “Similar to X, but different because of Y.” Because of this, comparisons, competitive analysis, and feature matrices are a great way to understand which technology solutions are right for you. So today let’s do a comparison of three different database systems. &lt;/p&gt;

&lt;p&gt;As stated in my &lt;a href="https://dev.to/harperdb/database-architectures-use-cases-explained-5711"&gt;Database Architectures &amp;amp; Use Cases&lt;/a&gt; article: &lt;strong&gt;In most cases, it’s not that one database is &lt;em&gt;better&lt;/em&gt; than the other, it’s that one is a &lt;em&gt;better fit&lt;/em&gt; for a specific use case due to numerous factors.&lt;/strong&gt; The point of this article is not to determine which database is the best, but to help uncover the factors to consider when selecting a database for your specific project. With MongoDB and PostgreSQL being two of the most popular tools out there, you may already know that there are tons of resources comparing the two. However, with HarperDB being a net new database, I thought it might be helpful to throw it in the mix to provide further clarity.&lt;/p&gt;

&lt;p&gt;Referring to my &lt;a href="https://dev.to/harperdb/database-architectures-use-cases-explained-5711"&gt;database architecture&lt;/a&gt; overview post again: It’s important to understand things such as data type / structure, data volume, consistency, write &amp;amp; read frequency, hosting, cost, security, and integration constraints. That article provides a great high level explanation across all different types of databases, but today we’ll get a but more specific. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#similarities" class="anchor"&gt;
  &lt;/a&gt;
  Similarities
&lt;/h3&gt;

&lt;p&gt;These technologies are all similar in that they are used to store data, but that simple concept is where the similarities end. However, while MongoDB and PostgreSQL are actually quite different from one another, HarperDB lies somewhere in the middle. &lt;/p&gt;

&lt;p&gt;As mentioned, there are numerous resources out there comparing MongoDB and PostgreSQL, which are both awesome databases. &lt;a href="https://www.educative.io/blog/mongodb-versus-postgresql-databases"&gt;This article&lt;/a&gt; from Educative is one great place to start for understanding differences between them. Therefore, to avoid redundancy, in this post I will focus a bit more on HarperDB compared to the two.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#definitions" class="anchor"&gt;
  &lt;/a&gt;
  Definitions
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;MongoDB&lt;/strong&gt; is classified as a NoSQL database. It is document-oriented, and uses JSON-like documents with optional schemas. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt; is a traditional RDBMS (relational database management system). Mainly used for relational data, it is object-oriented in nature.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HarperDB&lt;/strong&gt; is a distributed database with a REST API and dynamic schema, that supports NoSQL and SQL including joins. (For example, you can ingest data via NoSQL JSON then immediately query it via SQL) &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#differences-overview" class="anchor"&gt;
  &lt;/a&gt;
  Differences Overview
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;MongoDB vs. PostgreSQL&lt;/strong&gt;: PostgreSQL is a relational database handling more complex procedures, designs, and integrations. MongoDB is a NoSQL database often used for simpler, more unstructured data, great for app development. Ultimately PostgreSQL enforces schema validations whereas Mongo does not.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HarperDB vs. MongoDB&lt;/strong&gt;: MongoDB is a document store which is great for unstructured data, whereas HarperDB offers full document store capability plus enterprise grade ACID SQL. Benchmark tests found that HarperDB is 37 times faster than Mongo at less than half the price. HarperDB also has a native REST API, supports SQL on JSON, and can be easier to use and manage. See the &lt;a href="https://harperdb.io/harperdb-vs-mongodb/?utm_source=devtomargo&amp;amp;utm_medium=content&amp;amp;utm_campaign=codingschools"&gt;full benchmark here&lt;/a&gt;.&lt;br&gt;
&lt;em&gt;(Mongo is optimized for high scale writes, but not for reads. HarperDB's data storage algorithm written on top of LMDB enables both high scale reads and writes, resulting in high performance overall.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HarperDB v. PostgreSQL&lt;/strong&gt;: HarperDB is more flexible than PostgreSQL, which is a great technology for complicated data or strict consistency, but HarperDB has simplified much of the work on installation, configuration, and administration. HarperDB is allowing developers from relational backgrounds to use their existing knowledge with SQL with a database that also allows their team to use NoSQL from the same data model.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accessibility" class="anchor"&gt;
  &lt;/a&gt;
  Accessibility
&lt;/h3&gt;

&lt;p&gt;MongoDB, PostgreSQL and HarperDB can each run anywhere; in the cloud, locally, data center, etc. (There is not a PostgreSQL Cloud like there is with HarperDB Cloud and MongoDB Atlas, but cloud providers offer PostgreSQL-as-a-service.) &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#under-the-hood" class="anchor"&gt;
  &lt;/a&gt;
  Under the hood
&lt;/h3&gt;

&lt;p&gt;MongoDB is mainly programmed in C, C++, and JavaScript language. PostgreSQL is mainly programmed in C. HarperDB is &lt;a href="https://dev.to/harperdb/building-a-database-written-in-node-js-from-the-ground-up-2hgm"&gt;written in Node.js&lt;/a&gt; (LMDB is written in C, and Python is used in the install process).&lt;/p&gt;

&lt;p&gt;MongoDB uses BSON (binary JavaScript Object Notation) under the hood to make querying fast. This is then translated to JSON to be read when you open your collection.&lt;/p&gt;

&lt;p&gt;PostgreSQL ultimately employs SQL, a structured query language, to define, access and manipulate the database. PostgreSQL also has a JSON datatype.&lt;/p&gt;

&lt;p&gt;HarperDB does not enforce data types, it currently stores all data attributes as strings and data can be queried via SQL and/or NoSQL. (HarperDB is also working on enabling the ability for administrators to explicitly set attribute types (as numbers or strings) for performance tuning.)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-storage-amp-architecture" class="anchor"&gt;
  &lt;/a&gt;
  Data Storage &amp;amp; Architecture
&lt;/h3&gt;

&lt;p&gt;MongoDB stores data as individual documents without regard to attributes, PostgreSQL stores data in traditional tables and rows, and HarperDB stores data in tables and rows/objects with all top level attributes indexed by default.&lt;/p&gt;

&lt;p&gt;HarperDB has a unique data storage algorithm running on top of LMDB, this enables HarperDB to ingest JSON documents and relational data in a single product. As data comes in, HarperDB maps it to the data model; it's not a SQL engine or NoSQL engine. (Regardless of how data is ingested, data is stored according to the HarperDB data model and can be queried via SQL or NoSQL.)&lt;/p&gt;

&lt;p&gt;MongoDB and HarperDB are more distributed architectures, whereas PostgreSQL might be considered a monolithic architecture. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#acid-properties-atomic-consistent-isolated-amp-durable" class="anchor"&gt;
  &lt;/a&gt;
  ACID Properties (atomic, consistent, isolated, &amp;amp; durable)
&lt;/h3&gt;

&lt;p&gt;HarperDB and PostgreSQL both have enterprise grade ACID SQL transactions, meaning the validity of data is quite reliable.&lt;/p&gt;

&lt;p&gt;NoSQL databases like MongoDB usually adopt eventual consistency instead of ACID properties. &lt;em&gt;(A &lt;a href="http://jepsen.io/analyses/mongodb-4.2.6"&gt;study from May 2020&lt;/a&gt; identified a bug that disputes claims that Mongo is ACID compliant, as MongoDB’s transactions are not fully isolated.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;HarperDB and PostgreSQL both follow the ANSI SQL standard. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#schema-amp-tables" class="anchor"&gt;
  &lt;/a&gt;
  Schema &amp;amp; Tables
&lt;/h3&gt;

&lt;p&gt;With both MongoDB and HarperDB, using JSON allows you to change your schema flexibly without consequence. Documents can vary in terms of key/value pairs.&lt;/p&gt;

&lt;p&gt;Both MongoDB and HarperDB scale horizontally, which allows for speed. HarperDB has bidirectional table-level data replication. HarperDB uses a simple pub-sub model; data is replicated by publishing data to different “chat rooms” which different nodes subscribe to and are able to be distributed horizontally. &lt;/p&gt;

&lt;p&gt;PostgreSQL scales vertically (as it gets bigger, more space or more memory is needed), therefore it requires downtime to upgrade.&lt;/p&gt;

&lt;p&gt;With relational databases like PostgreSQL, altering your table is necessary to make any changes. The whole schema needs to be designed and configured at creation. You might be able to alter a table later on, but this may lead to database downtime and bugs in your application. PostgreSQL databases can use foreign keys which explicitly link data between tables and are used to keep the data normalized. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-cases-amp-summary" class="anchor"&gt;
  &lt;/a&gt;
  Use Cases &amp;amp; Summary
&lt;/h2&gt;

&lt;p&gt;As stated in &lt;a href="https://www.educative.io/blog/mongodb-versus-postgresql-databases"&gt;this article&lt;/a&gt;, because transactions in PostgreSQL follow ACID properties, it’s a good choice for industries such as fintech. When you absolutely need to control the state of your data, use a relational database like Postgres. Alternatively, if you only have unstructured data, or are working with big data, it might be a good idea to use the horizontal scaling approach with a tool like MongoDB.&lt;/p&gt;

&lt;p&gt;Use cases where HarperDB might be a better fit than existing systems include projects where you need SQL and NoSQL, rapid application development, integration, edge computing, distributed computing, real-time analytics, and high transactions. Our team will also be the first to tell you when HarperDB is not a good fit for your specific project. HarperDB is not recommended when you need full-text indexing, highly structured relational data, strict consistency across systems, or for projects where developers are not trusted to constrain and maintain data. &lt;/p&gt;

&lt;p&gt;Both MongoDB and PostgreSQL are really great tools for certain use cases. They are loved by many and the team at HarperDB is thankful that they have paved the way for technologies like ours to exist. HarperDB was created to expand and blend the capabilities of awesome SQL, NoSQL, and &lt;a href="https://dev.to/harperdb/deep-dive-newsql-databases-255l"&gt;NewSQL&lt;/a&gt; products on the market to fill in the gaps and ensure that developers are continuously empowered to use the right tool for the job. &lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;em&gt;Sources&lt;br&gt;
&lt;a href="https://www.educative.io/blog/mongodb-versus-postgresql-databases"&gt;https://www.educative.io/blog/mongodb-versus-postgresql-databases&lt;/a&gt;&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/MongoDB"&gt;https://en.wikipedia.org/wiki/MongoDB&lt;/a&gt;&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/PostgreSQL"&gt;https://en.wikipedia.org/wiki/PostgreSQL&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.techshout.com/software/2020/19/mongodb-vs-postgresql-what-are-the-similarities-and-differences/"&gt;https://www.techshout.com/software/2020/19/mongodb-vs-postgresql-what-are-the-similarities-and-differences/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>database</category>
      <category>sql</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Learnings from Accessibility Workshop from Enterprise NG 2020</title>
      <author>Alfredo Perez</author>
      <pubDate>Mon, 23 Nov 2020 15:57:15 +0000</pubDate>
      <link>https://dev.to/alfredoperez/learnings-from-accessibility-workshop-from-enterprise-ng-2020-2k57</link>
      <guid>https://dev.to/alfredoperez/learnings-from-accessibility-workshop-from-enterprise-ng-2020-2k57</guid>
      <description>&lt;p&gt;Here are some of the interesting points from the &lt;a href="https://www.ng-conf.org/2020/sessions/build-for-accessibility-with-angular/"&gt;Build for Accessibility with Angular&lt;/a&gt;  workshop by &lt;a href="https://twitter.com/Martine_Dowden"&gt;Martine Dowden&lt;/a&gt; and &lt;a href="https://twitter.com/mrdowden"&gt;Michael Dowden&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Labels are only for form fields. Do not use labels anywhere else&lt;/li&gt;
&lt;li&gt;Wave can be used to see the page structure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Vx8LStV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/be6dm8wuaj2qkozid1ot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Vx8LStV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/be6dm8wuaj2qkozid1ot.png" alt="2020-11-23_9-17-59"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AXE provides detailed information and links about the problem and possible resolutions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4MMQrHCy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9eoel9z7rrufem0o175r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4MMQrHCy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9eoel9z7rrufem0o175r.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use unit tests that test for accessibility-related attributes like roles and aria labels
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;icon butttons should have aria labels&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;iconButtons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debugElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAlK&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button[mat-icon-button]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;missingLabels&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;iconButtons&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;¡&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aria-label&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
 &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;missingLabels&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeFalsy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mat list should have a role of list&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debugElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mat-list&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
 &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;role*)).toEqual(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;);
});
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Prefer the use of the attribute &lt;code&gt;type="submit"&lt;/code&gt; for the buttons in the form instead of calling the method to submit from the &lt;code&gt;click&lt;/code&gt; handler&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KPMiCt_W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sliw8ffvvqrgchn01xhf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KPMiCt_W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sliw8ffvvqrgchn01xhf.png" alt="image (1)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Prefer to enable/disable instead of showing/hiding when it is needed to show data depending on a condition. This helps to avoid confusing the user and having UI jumping around.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Links are links. Buttons are buttons. Div and spans are not buttons nor links.  Divs and spans miss some accessibility features for example they are not focusable and cannot be disabled.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When having a link that is only an icon, use the &lt;code&gt;aria-hidden="true"&lt;/code&gt; and add a label&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"profile"&lt;/span&gt; 
   &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Profile"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;aria-hidden=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
    &lt;span class="na"&gt;classss=&lt;/span&gt;&lt;span class="s"&gt;"material-icons"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   Face
 &lt;span class="nt"&gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You should always have the &lt;code&gt;alt&lt;/code&gt; attribute on images, however, it can be blank. The &lt;code&gt;alt&lt;/code&gt; should describe what the image is trying to convey. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Decorative images can have an empty &lt;code&gt;alt&lt;/code&gt; attribute or have a &lt;code&gt;role="presentation"&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In alerts or notifications use &lt;code&gt;role="alert"&lt;/code&gt;, also use  &lt;code&gt;aria-live="polite"&lt;/code&gt; for status notifcaions and &lt;code&gt;aria-live="assertive"&lt;/code&gt; for something that requires attention &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#chrome-developer-tools" class="anchor"&gt;
  &lt;/a&gt;
  Chrome Developer Tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;There is an option for accessibility in the "&lt;a href="https://developers.google.com/web/tools/chrome-devtools/accessibility/reference#audits"&gt;Audits&lt;/a&gt;" tab&lt;/li&gt;
&lt;li&gt;There is an accessibility tab in Chrome that contains the &lt;a href="https://developers.google.com/web/tools/chrome-devtools/accessibility/reference"&gt;accessibility tree&lt;/a&gt;, the &lt;a href="https://developers.google.com/web/tools/chrome-devtools/accessibility/reference#aria"&gt;ARIA attributes&lt;/a&gt;, and the accessibility-related computed attributes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#angular-material" class="anchor"&gt;
  &lt;/a&gt;
  Angular Material
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Make sure that the custom color pass the contrast&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OH1-RP_Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k1np8ptdz564kvnxib4x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OH1-RP_Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k1np8ptdz564kvnxib4x.png" alt="2020-11-23_9-17-23"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#links" class="anchor"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.deque.com/axe/"&gt;AXE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wave.webaim.org/"&gt;WAVE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://accessibilityinsights.io/en/"&gt;Accessibility Insight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://material.angular.io/guide/theming"&gt;Angular theming guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://material.angular.io/guide/typography"&gt;Angular typography guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/"&gt;Google Fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://webaim.org/resources/contrastchecker/"&gt;Webaim contrast checker&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="http://mcg.mbitson.com"&gt;Color palette builder&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://materialtheme.arcsine.dev/"&gt;Theme builder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
      <category>a11y</category>
    </item>
    <item>
      <title>What I look for while play-testing</title>
      <author>edA‑qa mort‑ora‑y</author>
      <pubDate>Mon, 23 Nov 2020 15:15:48 +0000</pubDate>
      <link>https://dev.to/mortoray/what-i-look-for-while-play-testing-1h89</link>
      <guid>https://dev.to/mortoray/what-i-look-for-while-play-testing-1h89</guid>
      <description>&lt;p&gt;I’ve completed a lot of play-testing lately for my game &lt;a href="https://edaqa.link/CarnivalDev"&gt;Carnival&lt;/a&gt;. It’s a fascinating experience to watch people work through the puzzles. And it’s a humbling experience as people stumble and flounder on failings in my designs. Without a doubt, focused user testing has made my game significantly. Here I’d like to write about the principal things I’m watching for.&lt;/p&gt;

&lt;p&gt;A friend of mine spurred this article, as she discovered I keep extensive notes during the play-test. She also tested the game and was curious to know if I wrote anything bad about her. I assured her it was all good stuff, while silently discarding the evidence behind my back.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#playtesting-process" class="anchor"&gt;
  &lt;/a&gt;
  Play-testing Process
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://edaqa.link/CarnivalDev"&gt;Carnival&lt;/a&gt; is played online in the browser with teams that meet in an audio/video chat. While the faces can be helpful for testing, it’s mainly the audio I’m listening to. For the video, I have one participant share their screen. It’d be great if I could have all participants share their screens, but I’d probably need more monitors to make sense of it.&lt;/p&gt;

&lt;p&gt;Hearing the people play is super useful, in addition to watching what they do on screen. Where they move their mouse can be telling, but hearing their “hmms” and “huhs”, exasperated laments, and cries of fowl, tell even more. All of this helps me understand their thought process in solving puzzles and easing the play for future players.&lt;/p&gt;

&lt;p&gt;In the early rounds of play-testing, I instruct people about what to expect and how the game works. This allows me to test prior to the game being finished, avoiding some redundant work. I try to reduce the verbal preamble quickly as possible for subsequent teams, replacing it with the in-games systems. By the late stages of testing, I start with only a few hellos, then send the teams off on their own.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I don’t record these sessions. First off, I don’t care to deal with the privacy aspect of archiving such data. But second, I’d never watch them again. It’s almost always better to test with a new group of people than labour endlessly on a single session. More people equals better testing, especially with a puzzle oriented game.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#cryptic-notes" class="anchor"&gt;
  &lt;/a&gt;
  Cryptic Notes
&lt;/h1&gt;

&lt;p&gt;As mentioned, I take a lot of notes for these sessions, where lots means 2-3 pages of cryptic scrawling for the roughly 90 minute test sessions. A symbol showing the type of comment prefixes each line . At least in theory, in practice, I have some lines that have nothing before them. If something occurs to me during the test, I note it down, even if I’m unsure it’ll be helpful.&lt;/p&gt;

&lt;p&gt;For clarity here, I’ll replace my symbols with emojis. That way we can debate their semantic importance, rather than dissect my post-modern scribbling approach to art.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#red-herring" class="anchor"&gt;
  &lt;/a&gt;
  🐟 Red Herring
&lt;/h2&gt;

&lt;p&gt;This became the most important symbol in testing. Red herring’s a problem in puzzle games. These are things, an item, a graphic, some dialog, a pattern, virtually anything that misdirects the player. The player already has to resolve many important pieces of information in their head.&lt;/p&gt;

&lt;p&gt;I’m talking about unintentional red herrings. These are colour patterns, or objects, that reasonable look like clues to a puzzle. They arise naturally out of the graphic design by accident. I have nothing but ire for designers who intentionally add red herrings in their game. It’s an undebatable poor design that frustrates players. There are enough unintended red herrings to deal with already.&lt;/p&gt;

&lt;p&gt;For example, I have a puzzle in &lt;a href="https://edaqa.link/CarnivalDev"&gt;Carnival&lt;/a&gt; where you need to set a row of lights to the correct colours. I intend them to match another pattern on the screen, as hinted in some dialog. Lo-and-behold, some testers found another sequence of colours, in some flags, that seemed to match the lights as well. They then proceeded to match that pattern, which of course failed. This gets a big “🐟” mark in the notes.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🐟 sequence of flags matches light pattern&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#%E2%AD%98-obvious-thing-to-change" class="anchor"&gt;
  &lt;/a&gt;
  ⭘ Obvious thing to change
&lt;/h2&gt;

&lt;p&gt;Many small, sometimes large, obvious ideas crop up during the tests. These may be ways to improve the puzzles, graphics improvements, overall UX ideas, or basically anything. The ⭘ means I had a concrete thought and I should go back and improve it later — at which point I add a ✔ to it.&lt;/p&gt;

&lt;p&gt;Each circle is a clear opportunity to improve the game. Rather than theorizing about things to improve, these all come from actual players. Fixing them would have a direct impact on some future player.  This doesn’t mean they all get resolved, as priorities still play a role, and some of them are hard to fix.&lt;/p&gt;

&lt;p&gt;One example I have is with a ticket in the game. The player acquires the ticket and must present it to get into the carnival. I thought it’d be obvious that you show the ticket to the man in the booth, but one player tried to use the ticket on the entry sign. It’s not ridiculous, since the sign, with a “No Entry” label hanging on top, is where you enter the park. What happens then is frustration. In their head the player has resolved the situation: they found a ticket and are using it to get inside. It not working is like throwing a wrench into their thought process.&lt;/p&gt;

&lt;p&gt;The obvious resolution was to make the sign accept the ticket, and that’s the note I made:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;⭘ tried show ticket to sign, accept ticket&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Though, I ended up using a more humourous fix. The booth agent cracks a joke about an inanimate sign. This has the effect of affirming the player’s action made sense, but was slightly off. Additionally, it made it clear where the ticket should be used instead. Oh, I could talk at length about this leading…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#puzzle-solved" class="anchor"&gt;
  &lt;/a&gt;
  🏁 Puzzle Solved
&lt;/h2&gt;

&lt;p&gt;Whenever a player solves a puzzle, I note it with a little flag, and the time.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🏁 rabbit hand puppet, 23:03&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is the wall time, since it’s what I have most available. I record the start of the session as well, letting me calculate later the time offsets between puzzles.&lt;/p&gt;

&lt;p&gt;My goal here is to establish a good pacing for the game. Droughts, long periods between solutions, demotivates the player, and increases the likelihood they dislike the game.  Given my experience with the previous game, and numerous escape rooms I’ve played, the pacing mostly worked as is.&lt;/p&gt;

&lt;p&gt;However, there were some clear problems on some puzzles — they took too long. In most cases, I didn’t need to know the time to see that people were frustrated. But sometimes the time helped decide the frustration was okay. Perhaps the player was being impatient, rather than having an actual problem.&lt;/p&gt;

&lt;p&gt;Timing can also deceive. In one game the players took nearly 15 minutes for one puzzle, well beyond the typical 5 I consider a maximum — these aren’t like fundamentally fixed numbers, so don’t quote me on them.  But after the puzzle they both said “wow, that was great” — or something to that effect, I can’t always read my writing.  This makes evaluation tricky, but at least the timed notes give some help.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hint-requested" class="anchor"&gt;
  &lt;/a&gt;
  ❓ Hint requested
&lt;/h2&gt;

&lt;p&gt;Everybody gets stuck, but an experienced team should not need hints. It’s why I treat hint requests during play-testing seriously.  The game has a built-in progressive hint system, so all I do is note where they requested the hint, and how many they needed.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;❓❓❓ dart game&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You might think requesting a lot of hints is bad, but for experienced teams, if they need one, they typically need many. This results from the hints being progressive; the players often already know the information in the first couple of hints, and only the later one reveals something new.  Short of deciphering the players thoughts with electrodes plugged into their brain, there’s no real way to avoid this.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Well, there is a way to avoid some hints, and I do that. Some hints can be tied to game actions, in particular with the inventory. But the general purpose hints can’t be tied to in-game events. I can never really be certain the player already knows the hint.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Requesting hints is part of puzzle games. It’s totally fine if players ask for them, but it shouldn’t be the standard approach to solving a puzzle. And since people who play-test are mainly interested in this genre of game, it biases the results — I assume the average player will require more. It’s a good sign when some play tests have no ❓'s on them. Past that point, I can consider each tension point more carefully.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-what-they-said-or-did" class="anchor"&gt;
  &lt;/a&gt;
  ‟ What they said or did
&lt;/h2&gt;

&lt;p&gt;To give context to my notes, and the players thought process, I take several notes about what they say, or what they do. The latter also uses quotes, because I couldn’t think quickly what other symbol made sense, and in practice the notes are mixed.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‟Is this random? click on light&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These notes primarily serve as anchors to the other ones&lt;/p&gt;

&lt;p&gt;I’ll also make notes of solutions they’ve tried that have failed. These can often give ideas of how they are thinking, or, sometimes, I end up accepting alternate solutions if they seem equally valid. For some of these I’ll end up using a CIRCLE-‟ combination in the notes.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;⭘ ‟12345, hmm, doesn’t work&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#something-is-broken" class="anchor"&gt;
  &lt;/a&gt;
  ❗ Something is broken
&lt;/h2&gt;

&lt;p&gt;I put this last since it’s not the point of this level of play-testing. I have already resolved most of the functional defects, and the game is fully playable before I begin play-testing. Several minor defects still appear, and if I’ve recently changed something, engine defects are possible (the frightening and thankfully rare ❗❗).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;❗ B-girl font not converted path&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The ❗ is for things that are 100% definitely technical defects. This could be a graphic that is missing, the wrong font used somewhere, or a typo in the text.  I suppose I could use them for defects in the puzzles, though oddly, I’ve not have that situation come up yet. As this is a multiplayer game played over flaky networks, I’ve tried hard, from the start, to make the logical game state consistent. That appears to work. While defects are possible in the puzzles still, I’ve likely worked them out prior to starting play-testing.&lt;/p&gt;

&lt;p&gt;I think that’s an important point: I’ve played the game entirely many times before I do any play-testing. I want play-testing to focus on the things I can’t find myself. Even the initial play-testers get a game that is working, albeit potentially without the hint system, and not all graphics in their final form, but functionally playable from beginning to end.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#scribbles" class="anchor"&gt;
  &lt;/a&gt;
  Scribbles
&lt;/h1&gt;

&lt;p&gt;These symbols are a general guide to the notes I take.  I still have other things written, sometimes in combination, or sometimes with no markings.&lt;/p&gt;

&lt;p&gt;I have found though that trying to itemize my thoughts produces firm notes. Rather than write everything, and anything, I focus on specific action items:&lt;/p&gt;

&lt;p&gt;-🐟 Something is misleading&lt;br&gt;
-❗ something is broken&lt;br&gt;
-⭘ Point for improvement&lt;br&gt;
-❓ a puzzle may have a problem&lt;/p&gt;

&lt;p&gt;Where 🏁 and ‟ are then used to anchor those points, giving context when I go back later.&lt;/p&gt;




&lt;p&gt;While not a perfectly defined process, that’s about how I did play-testing of &lt;a href="https://edaqa.link/CarnivalDev"&gt;Carnival&lt;/a&gt;. Watching people play, think, and laugh is fascinating. I also love watching the streams of people playing my game, as it gives another insight. I take notes from those as well.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>programming</category>
      <category>playtest</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>What's your favorite dev.to merchandise? 👚☕️🎽</title>
      <author>Sarthak Sharma</author>
      <pubDate>Mon, 23 Nov 2020 14:53:12 +0000</pubDate>
      <link>https://dev.to/sarthology/what-s-your-fav-dev-to-merchandise-2n0m</link>
      <guid>https://dev.to/sarthology/what-s-your-fav-dev-to-merchandise-2n0m</guid>
      <description>&lt;p&gt;I was lucky enough to receive a lot of gift cards from Dev.to and Bought a lot of stuff from Dev Shop. But by far this Cup is my personal favorite of all.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aaZaXoRx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/Eipi6jPWsAAeqMN.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i2bXUdvG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1016509086572187649/ixWyIwJV_normal.jpg" alt="sarthakSharma profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        sarthakSharma
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/sarthology"&gt;@sarthology&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      My Cup is back🤩, I broke my last one. 😅&lt;br&gt;Thanks &lt;a href="https://twitter.com/ThePracticalDev"&gt;@ThePracticalDev&lt;/a&gt; for the ❤️ 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      03:12 AM - 24 Sep 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1308967410125492225" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-reply-action.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1308967410125492225" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-retweet-action.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      0
      &lt;a href="https://twitter.com/intent/like?tweet_id=1308967410125492225" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-like-action.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
      7
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;What's your favorite Dev.to merchandise? Send a picture 😊&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Recreating Breakout for the Web</title>
      <author>Bijan Boustani</author>
      <pubDate>Mon, 23 Nov 2020 14:46:23 +0000</pubDate>
      <link>https://dev.to/bijanbwb/recreating-breakout-for-the-web-4c7f</link>
      <guid>https://dev.to/bijanbwb/recreating-breakout-for-the-web-4c7f</guid>
      <description>&lt;p&gt;Last time, we took a look at &lt;a href="https://dev.to/bijanbwb/recreating-pong-for-the-web-with-elm-2bi8"&gt;creating a web version of &lt;em&gt;Pong&lt;/em&gt;&lt;/a&gt;, the classic Atari game. Here is an animation of what we ended up with:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S2rYOepw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mkl885jk6nq7w04qcw4g.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S2rYOepw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mkl885jk6nq7w04qcw4g.gif" alt="Pong Implementation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pretty cool! It's a fun game to play, even after all these years. And it was even more fun &lt;strong&gt;figuring out all the little things that made &lt;em&gt;Pong&lt;/em&gt; so compelling&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this post, I'll share some of the steps I took to adapt the &lt;em&gt;Pong&lt;/em&gt; implementation into &lt;em&gt;Breakout&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sbKdgy6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ilz66klx0y73h2ajc447.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sbKdgy6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ilz66klx0y73h2ajc447.gif" alt="Breakout Implementation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The original goal for these blog posts was to share step-by-step tutorials of how to recreate classic games. But &lt;strong&gt;the intent has evolved into sharing some interesting notes, ideas, and takeaways about the process of building these games&lt;/strong&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr" class="anchor"&gt;
  &lt;/a&gt;
  ⏳ tl;dr
&lt;/h2&gt;

&lt;p&gt;In the last blog post, I buried the links to the playable demo and the source code all the way at the bottom of the post. It was my devious intention to force everyone to take hours of their precious time to scroll through my &lt;del&gt;shoddy&lt;/del&gt; writing. This time, I'll link to them here in case you want to try the game out before reading on.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🕹 &lt;a href="https://create-with-games.herokuapp.com/breakout"&gt;&lt;strong&gt;Playable Demo&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;💻 &lt;a href="https://github.com/create-with/games/blob/master/assets/elm/src/Breakout.elm"&gt;&lt;strong&gt;Source Code on GitHub&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-breakout" class="anchor"&gt;
  &lt;/a&gt;
  🛸 Why Breakout?
&lt;/h2&gt;

&lt;p&gt;After working on &lt;em&gt;Pong&lt;/em&gt; for a while, I was dying to move on to a different game genre. I've always wanted to learn how to create platform games like &lt;em&gt;Super Mario Bros.&lt;/em&gt; and adventure games like &lt;em&gt;The Legend of Zelda&lt;/em&gt;. But I decided to try &lt;em&gt;Breakout&lt;/em&gt; for a couple reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Breakout&lt;/em&gt; was my favorite Atari game. I grew up during the &lt;a href="https://en.wikipedia.org/wiki/History_of_video_games"&gt;Nintendo era of video game history&lt;/a&gt;, so the Atari 2600 console was a little before my time. &lt;strong&gt;But games like &lt;em&gt;Breakout&lt;/em&gt; felt timeless in their appeal&lt;/strong&gt;. I also remember being blown away by some sort of "fancy" &lt;em&gt;Breakout&lt;/em&gt; version in the arcade. I only recently found out that was a game called &lt;a href="https://en.wikipedia.org/wiki/Arkanoid"&gt;&lt;em&gt;Arkanoid&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I already had most of the core components of the game figured out like the ball, paddle, and game window. &lt;strong&gt;With the basic mechanics in place, I'd be able to focus on other fun features like particle effects, pixel art, animation, music, etc.)&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#whats-interesting-about-breakout" class="anchor"&gt;
  &lt;/a&gt;
  🤔 What's Interesting About Breakout?
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Breakout&lt;/em&gt; consists of similar elements we saw last time like a game window, a paddle, and a ball. While &lt;em&gt;Pong&lt;/em&gt; was meant as a two-player game, &lt;em&gt;Breakout&lt;/em&gt; could be played solo since the objective was to break through the rows of stationary bricks at the top of the screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tr8bMP-s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5vuowpu46lnzzz7plmag.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tr8bMP-s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5vuowpu46lnzzz7plmag.jpg" alt="Breakout Sketch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Beyond the gameplay itself, &lt;em&gt;Breakout&lt;/em&gt; has an interesting history. &lt;strong&gt;Before &lt;a href="https://en.wikipedia.org/wiki/Steve_Jobs"&gt;Steve Jobs&lt;/a&gt; went on to found some company called Apple, he worked on &lt;em&gt;Breakout&lt;/em&gt; at Atari&lt;/strong&gt;. The story goes that he would invite his friend Steve Wozniak, who worked at Hewlett-Packard, to help him design and build the game. I find it fascinating to think that &lt;em&gt;Breakout&lt;/em&gt; had some influence on the design of the &lt;a href="https://en.wikipedia.org/wiki/Apple_II"&gt;Apple II&lt;/a&gt; computer, given its place in the history of computing.&lt;/p&gt;

&lt;p&gt;If you're interested in reading more about this, the &lt;a href="https://en.wikipedia.org/wiki/Breakout_(video_game)"&gt;Breakout Wikipedia entry&lt;/a&gt; is a great place to start. And there are some fun videos on YouTube like &lt;a href="https://www.youtube.com/watch?v=p5IaCTJdVuM&amp;amp;t"&gt;&lt;em&gt;Before Apple: Steve Jobs at Atari&lt;/em&gt;&lt;/a&gt; from Gaming Historian.&lt;/p&gt;

&lt;p&gt;But what's most interesting to me about Breakout is how &lt;strong&gt;we can layer features and "game feel" elements on top of the simple core mechanics&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#game-feel-and-juice" class="anchor"&gt;
  &lt;/a&gt;
  🤯 Game Feel and "Juice"
&lt;/h2&gt;

&lt;p&gt;When I started working on a &lt;em&gt;Breakout&lt;/em&gt; implementation, I knew I already had most of the features I needed for the game window and the paddle and the ball. You can see &lt;a href="https://dev.to/bijanbwb/recreating-pong-for-the-web-with-elm-2bi8"&gt;my previous blog post&lt;/a&gt; for an overview of how I implemented those features.&lt;/p&gt;

&lt;p&gt;I knew I'd have to figure out how to implement the rows of breakable bricks at the top of the screen, but &lt;strong&gt;one of the first things I wanted to do was add a "screen shake" feature&lt;/strong&gt;. When the ball hit one of the bricks, I wanted the window to shake to give the &lt;em&gt;feeling&lt;/em&gt; that it was an impactful collision.&lt;/p&gt;

&lt;p&gt;A screen shake is &lt;strong&gt;one of those features where you kind of don't notice it's there, but you can "feel" it when you play&lt;/strong&gt;. It's used commonly in games, but proved surprisingly hard to find for browser games.&lt;/p&gt;

&lt;p&gt;While looking for resources about how to accomplish this, I stumbled on this talk called &lt;a href="https://www.youtube.com/watch?v=AJdEqssNZ-U"&gt;&lt;em&gt;The Art of Screenshake&lt;/em&gt;&lt;/a&gt;, and I became fascinated by this idea of adding seemingly small details to a game that add up to a lot in terms of game feel.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lvLWdydZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ut0h7y7cs62bzwyl7q0t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lvLWdydZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ut0h7y7cs62bzwyl7q0t.png" alt="The Art of Screenshake"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Just fill your game with love and tiny details."&lt;br&gt;
Jan Willem Nijman&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This guided a lot of the work I ended up putting into building &lt;em&gt;Breakout&lt;/em&gt;. In addition to the core game mechanics and a screen shake, I added things particle effects, pixel art, and music to make the game more fun and appealing.&lt;/p&gt;

&lt;p&gt;For more on the topic of Game Feel, there's also a great video from Game Maker's Toolkit called &lt;a href="https://www.youtube.com/watch?v=216_5nu4aVQ"&gt;&lt;em&gt;Secrets of Game Feel and Juice&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementing-a-screenshake" class="anchor"&gt;
  &lt;/a&gt;
  🔄 Implementing a Screenshake
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;So how does a screenshake work?&lt;/strong&gt; Thankfully we're working with a simple 2D game (as opposed to 3D or VR), so we only need to worry about moving the game window and then putting it back to restore its original position.&lt;/p&gt;

&lt;p&gt;We start with our rectangular game window that's rendered with SVG. I've been working with the Elm programming language for these games, so I started with a type and set some initial values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elm"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="k"&gt;alias&lt;/span&gt; &lt;span class="kt"&gt;Window&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;backgroundColor&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;initialWindow&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Window&lt;/span&gt;
&lt;span class="n"&gt;initialWindow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black"&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;800.0&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;600.0&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; represent the top left position of the game window. What we need to do is shift the &lt;code&gt;x&lt;/code&gt; value to move the window left and right, and shift the &lt;code&gt;y&lt;/code&gt; value to move the window up and down.&lt;/p&gt;

&lt;p&gt;Then, after we shift the game window out of place, we restore its position back to the original position at &lt;code&gt;(0, 0)&lt;/code&gt;. Its kind of subtle if you don't know to look for it, but obvious once you see it. Here's what it looks like with the game elements in place so the window shake is visible:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hVdZZS6c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rb8xlpldetyw1oyael12.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hVdZZS6c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rb8xlpldetyw1oyael12.gif" alt="Screen Shake"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you go &lt;a href="https://create-with-games.herokuapp.com/breakout"&gt;play the game in the production environment&lt;/a&gt;, you can actually click anywhere in the game window to simulate the screen shake feature.&lt;/p&gt;

&lt;p&gt;I used a random number generator (which can be surprisingly hard to work with in Elm) so the screen shake didn't seem so predictable or jarring. And it does add a lot when the ball collides with a brick to trigger a screen shake.&lt;/p&gt;

&lt;p&gt;If you're interested in learning more about screen shakes and more involved implementations, there's an amazing series of talks from the Game Developer's Conference called &lt;em&gt;Math for Game Programmers&lt;/em&gt;. One of the talks is called &lt;a href="https://www.youtube.com/watch?v=tu-Qe66AvtY"&gt;&lt;em&gt;Juicing Your Cameras With Math&lt;/em&gt;&lt;/a&gt; and it's really fun to see the code you can use to implement your own amazing screen shake features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#particle-effects" class="anchor"&gt;
  &lt;/a&gt;
  🎉 Particle Effects
&lt;/h2&gt;

&lt;p&gt;Next, I wanted to add some particle effects to the game. Particles are usually things like fireworks, explosions, smoke, etc. I already had the screen shake working, but &lt;strong&gt;I thought it would be cool to create an explosion of particles when the ball collided with a brick&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I can't take credit for how awesome this feature looks, because I used an existing Elm package that makes these kinds of particles easy to work with. &lt;a href="https://package.elm-lang.org/packages/BrianHicks/elm-particle/latest/"&gt;&lt;code&gt;elm-particle&lt;/code&gt;&lt;/a&gt; is a package from &lt;a href="https://github.com/BrianHicks"&gt;Brian Hicks&lt;/a&gt;, who not only organizes the yearly Elm conference called &lt;a href="https://elm-conf.com/"&gt;elm-conf&lt;/a&gt;, but is also the nicest person you'll ever meet.&lt;/p&gt;

&lt;p&gt;Here's an animation that shows what the particles look like during gameplay:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sbKdgy6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ilz66klx0y73h2ajc447.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sbKdgy6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ilz66klx0y73h2ajc447.gif" alt="Particles"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can tinker with all sorts of settings for the particles. I ended up spawning ten small particles from the top left of the ball whenever it collides with a brick. In addition to the position, you can also tinker with things like how gravity affects the particles, how quickly they move and rotate, and how long they last before going away.&lt;/p&gt;

&lt;p&gt;If you're interested in seeing more of the specifics of how the particle effects are implemented, check out the &lt;a href="https://github.com/create-with/games/blob/master/assets/elm/src/Breakout.elm"&gt;&lt;code&gt;Breakout.elm&lt;/code&gt; file&lt;/a&gt; in the source code. The &lt;code&gt;elm-particle&lt;/code&gt; package documentation also has some fun examples of how to use it for fun things like water and fireworks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#assets-and-pixel-art" class="anchor"&gt;
  &lt;/a&gt;
  🎨 Assets and Pixel Art
&lt;/h2&gt;

&lt;p&gt;For the &lt;em&gt;Pong&lt;/em&gt; game I worked on, all the elements of the game were just based on simple shapes. So SVG rectangles were sufficient to represent things like the game window and the paddles and the ball.&lt;/p&gt;

&lt;p&gt;But for &lt;em&gt;Breakout&lt;/em&gt;, &lt;strong&gt;I wanted to incorporate some pixel art assets into the game to make it look a little nicer&lt;/strong&gt;. I ended up using an iPad App called &lt;a href="https://apps.apple.com/gb/app/pixel-studio-for-pixel-art/id1404203859#?platform=ipad"&gt;Pixel Studio&lt;/a&gt; to create the assets, but you might also want to check out &lt;a href="https://www.aseprite.org/"&gt;Aseprite&lt;/a&gt; if you're interested in creating pixel art.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DLL4X3im--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/t8cg3n6afn7ykr15vvvi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DLL4X3im--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/t8cg3n6afn7ykr15vvvi.png" alt="Pixel Art Paddle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So instead of using &lt;code&gt;Svg.rect&lt;/code&gt; to create a rectangle, I used &lt;code&gt;Svg.image&lt;/code&gt; and linked to &lt;a href="https://github.com/create-with/games/tree/master/assets/static/images"&gt;the static assets in the repository&lt;/a&gt;. The &lt;code&gt;viewBall&lt;/code&gt; and &lt;code&gt;viewPaddle&lt;/code&gt; functions use familiar attributes for the size and position, and also use the &lt;code&gt;xlinkHref&lt;/code&gt; attribute to pull in the pixel art images.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elm"&gt;&lt;code&gt;&lt;span class="n"&gt;viewBall&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Ball&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Svg&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;
&lt;span class="n"&gt;viewBall&lt;/span&gt; &lt;span class="n"&gt;ball&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="kt"&gt;Svg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;Svg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xlinkHref&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/images/pixel-ball.png"&lt;/span&gt;
        &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Svg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromFloat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="kt"&gt;Util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Vector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getX&lt;/span&gt; &lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;
        &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Svg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromFloat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="kt"&gt;Util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Vector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getY&lt;/span&gt; &lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;
        &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Svg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromFloat&lt;/span&gt; &lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;
        &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Svg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromFloat&lt;/span&gt; &lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elm"&gt;&lt;code&gt;&lt;span class="n"&gt;viewPaddle&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Paddle&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Svg&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;
&lt;span class="n"&gt;viewPaddle&lt;/span&gt; &lt;span class="n"&gt;paddle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="kt"&gt;Svg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;Svg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xlinkHref&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/images/pixel-paddle.png"&lt;/span&gt;
        &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Svg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromFloat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="kt"&gt;Util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Vector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getX&lt;/span&gt; &lt;span class="n"&gt;paddle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;
        &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Svg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromFloat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="kt"&gt;Util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Vector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getY&lt;/span&gt; &lt;span class="n"&gt;paddle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;
        &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Svg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromFloat&lt;/span&gt; &lt;span class="n"&gt;paddle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;
        &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Svg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromFloat&lt;/span&gt; &lt;span class="n"&gt;paddle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Mozilla's Developer Network (MDN) is great for looking up how to work with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG"&gt;SVG elements and attributes&lt;/a&gt;. And then it's just a matter of translating it into Elm using the &lt;a href="https://package.elm-lang.org/packages/elm/svg/latest"&gt;&lt;code&gt;elm/svg&lt;/code&gt; package&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#updating-the-game-platform" class="anchor"&gt;
  &lt;/a&gt;
  🎮 Updating the Game Platform
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;I ended up spending some time creating a new back-end for this project as well&lt;/strong&gt;. I had originally built &lt;em&gt;Pong&lt;/em&gt; and used a tool called &lt;a href="https://parceljs.org/"&gt;Parcel&lt;/a&gt; to bundle the project. But I ended up running into trouble as soon as I started working with static assets, so I replaced it with the &lt;a href="https://www.phoenixframework.org/"&gt;Phoenix Framework&lt;/a&gt;, which is way more familiar to me.&lt;/p&gt;

&lt;p&gt;It may be overkill to use Phoenix to serve a couple of small image files, but it also gives me some freedom to add back-end features like tracking scores as I build more games. I've also been playing with Phoenix's LiveView capability and love working with it:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BXSpLwQm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1296919463670013952/pu/img/GToElPEbVzbE9pUU.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZLdXkL5Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/800460740670980096/GcWs_chH_normal.jpg" alt="Bijan Boustani profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Bijan Boustani
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/bijanbwb"&gt;@bijanbwb&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🤯 I've been having so much fun learning &lt;a href="https://twitter.com/elixirlang"&gt;@elixirlang&lt;/a&gt; and OTP and LiveView while building this little terminal code runner demo. Still lots of rough edges, but it's cool to see it actually working! &lt;a href="https://twitter.com/hashtag/myelixirstatus"&gt;#myelixirstatus&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      21:18 PM - 21 Aug 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1296919592237969409" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-reply-action.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1296919592237969409" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-retweet-action.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      15
      &lt;a href="https://twitter.com/intent/like?tweet_id=1296919592237969409" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-like-action.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
      73
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Given that I was going from one game to multiple games, I wanted to add an index page to serve as a game selection screen. I also added some simple routing features to navigate between the different games. And I imported the &lt;a href="https://tailwindcss.com/"&gt;Tailwind CSS&lt;/a&gt; framework to start with a simple design and add a footer area with some helpful links.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BJebv_Vr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gabatg0ilu9ilz31tvmx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BJebv_Vr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gabatg0ilu9ilz31tvmx.png" alt="Game Platform"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#music" class="anchor"&gt;
  &lt;/a&gt;
  🎼 Music
&lt;/h2&gt;

&lt;p&gt;For &lt;em&gt;Pong&lt;/em&gt;, I had a couple of files called &lt;code&gt;beep.wav&lt;/code&gt; and &lt;code&gt;boop.wav&lt;/code&gt; that I was using for simple sound effects. I left those out of &lt;em&gt;Breakout&lt;/em&gt;, but I wanted to add some background music.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2GsZ0GVE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1131530155787264001/pu/img/VNlyeR2EIWGRCoS_.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZLdXkL5Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/800460740670980096/GcWs_chH_normal.jpg" alt="Bijan Boustani profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Bijan Boustani
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/bijanbwb"&gt;@bijanbwb&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🎶 I had fun writing some custom "chiptune" style music with Bosca Ceoil and importing it into the &lt;a href="https://twitter.com/elmlang"&gt;@elmlang&lt;/a&gt; minigame I've been working on using ports and howler.js. I also added a little text overlay for interacting with containers. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      12:01 PM - 23 May 2019
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1131530464727064577" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-reply-action.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1131530464727064577" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-retweet-action.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      0
      &lt;a href="https://twitter.com/intent/like?tweet_id=1131530464727064577" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-like-action.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
      10
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;In the past, I had tinkered with creating some custom "chiptune" style music using programs like &lt;a href="https://www.lexaloffle.com/pico-8.php"&gt;PICO-8&lt;/a&gt; and &lt;a href="https://boscaceoil.net"&gt;Bosca Ceoil&lt;/a&gt;. They can be fun to play with, but my &lt;em&gt;Breakout&lt;/em&gt; implementation was already getting complicated enough, so I tried finding existing music online.&lt;/p&gt;

&lt;p&gt;After Googling a bit, I came across &lt;a href="https://playonloop.com"&gt;PlayOnLoop.com&lt;/a&gt; and found a royalty-free, upbeat song I liked and created a new &lt;a href="https://github.com/create-with/games/blob/master/CREDITS.md"&gt;&lt;code&gt;CREDITS.md&lt;/code&gt; file&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To play the music, I use the &lt;a href="https://howlerjs.com/"&gt;howler.js&lt;/a&gt; JavaScript library. It required using &lt;a href="https://guide.elm-lang.org/interop/ports.html"&gt;Elm ports&lt;/a&gt; to sync up the JavaScript and Elm code, but howler.js has some great features that I'll likely continue to use as I create more games. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementing-the-bricks-finally" class="anchor"&gt;
  &lt;/a&gt;
  🧱 Implementing the Bricks (Finally)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bp3XUEka--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cpq9242dl4zmjy9btuua.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bp3XUEka--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cpq9242dl4zmjy9btuua.png" alt="Bricks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The rows of breakable bricks at the top of the screen were the most important feature&lt;/strong&gt;, so naturally I procrastinated on implementing them.&lt;/p&gt;

&lt;p&gt;Somewhere in the commit history on GitHub, there was a range of commits where I used various combinations of several data structures (&lt;code&gt;List&lt;/code&gt;, &lt;code&gt;Dict&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;) in hopes of finding something that felt right to work with. I won't bore you with the details, but I can at least share how some of the fun parts work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%F0%9F%8F%97-individual-bricks" class="anchor"&gt;
  &lt;/a&gt;
  🏗 Individual Bricks
&lt;/h3&gt;

&lt;p&gt;This is what the fields look like for the &lt;code&gt;Brick&lt;/code&gt; type along with the data for a default brick:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elm"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="k"&gt;alias&lt;/span&gt; &lt;span class="kt"&gt;Brick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hitCount&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hitThreshold&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Vector&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strokeColor&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elm"&gt;&lt;code&gt;&lt;span class="n"&gt;defaultBrick&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Brick&lt;/span&gt;
&lt;span class="n"&gt;defaultBrick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;white"&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hitCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hitThreshold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strokeColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black"&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;One of the first things that might stand out is the &lt;code&gt;position&lt;/code&gt;. For &lt;em&gt;Pong&lt;/em&gt;, I was using separate &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; fields to store &lt;code&gt;Float&lt;/code&gt; values. But I've been working towards learning Linear Algebra a little better for the next games that I plan to work on.&lt;/p&gt;

&lt;p&gt;For &lt;em&gt;Breakout&lt;/em&gt;, I used a custom &lt;code&gt;Vector&lt;/code&gt; type, but for the next games I work with I'll likely use the &lt;a href="https://package.elm-lang.org/packages/elm-explorations/linear-algebra/latest/Math-Vector2"&gt;&lt;code&gt;elm-explorations/linear-algebra&lt;/code&gt;&lt;/a&gt; package. Khan Academy also has great lessons on &lt;a href="https://www.khanacademy.org/math/linear-algebra"&gt;Linear Algebra&lt;/a&gt; if you're looking to learn more.&lt;/p&gt;

&lt;p&gt;The other thing you might have noticed is that I added &lt;code&gt;hitCount&lt;/code&gt; and &lt;code&gt;hitThreshold&lt;/code&gt; fields. This allows for setting some breaks as "hard" bricks that take multiple hits to break.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-structures" class="anchor"&gt;
  &lt;/a&gt;
  🤔 Data Structures
&lt;/h3&gt;

&lt;p&gt;After some initial thrashing about which data structure to use, I settled on using a Dictionary because it would allow for identifying bricks by their row and column. In this type alias, we create a &lt;code&gt;Dict&lt;/code&gt; of bricks where the two &lt;code&gt;Int&lt;/code&gt; types represent the row number and column number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elm"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="k"&gt;alias&lt;/span&gt; &lt;span class="kt"&gt;Bricks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="kt"&gt;Dict&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;Brick&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The implementation for the bricks may have ended up somewhat complicated, and it's possible a normal &lt;code&gt;List&lt;/code&gt; would have sufficed. But I knew I wanted to adjust things like the &lt;code&gt;hitCount&lt;/code&gt; and &lt;code&gt;color&lt;/code&gt; for specific rows or bricks, and using a &lt;code&gt;Dict&lt;/code&gt; made that a little easier.&lt;/p&gt;

&lt;p&gt;Here are some of the important functions I used for constructing the rows of bricks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elm"&gt;&lt;code&gt;&lt;span class="n"&gt;buildRow&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bricks&lt;/span&gt;
&lt;span class="n"&gt;buildRow&lt;/span&gt; &lt;span class="n"&gt;rowNumber&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="n"&gt;strokeColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;range&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
        &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foldr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;insertBrick&lt;/span&gt; &lt;span class="n"&gt;rowNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;Dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;
        &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;setRowColors&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="n"&gt;strokeColor&lt;/span&gt;
        &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;setRowPosition&lt;/span&gt;


&lt;span class="n"&gt;insertBrick&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Bricks&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bricks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;insertBrick&lt;/span&gt; &lt;span class="n"&gt;rowNumber&lt;/span&gt; &lt;span class="n"&gt;columnNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="kt"&gt;Dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;rowNumber&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;columnNumber&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;defaultBrick&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I'm glossing over the details, but definitely check out the &lt;a href="https://github.com/create-with/games/blob/master/assets/elm/src/Breakout/Brick.elm"&gt;&lt;code&gt;Breakout.Brick&lt;/code&gt; module&lt;/a&gt; if you want to see how it all comes together.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#styles-and-animation" class="anchor"&gt;
  &lt;/a&gt;
  🎨 Styles and Animation
&lt;/h3&gt;

&lt;p&gt;For the brick colors, I used the &lt;a href="https://tailwindcss.com/docs/background-color"&gt;color palette from Tailwind CSS&lt;/a&gt; and looked up the corresponding hex values to create a &lt;a href="https://en.wikipedia.org/wiki/ROYGBIV"&gt;"ROYGBIV"&lt;/a&gt; rainbow for the rows.&lt;/p&gt;

&lt;p&gt;The "hard" row of bricks at the top takes multiple hits to break. So it has a different stroke color as a visual indicator that there's something different about those bricks, even if it's not obvious until the ball hits them.&lt;/p&gt;

&lt;p&gt;Another cool feature that isn't obvious is that the opacity of each brick is calculated as the percentage of hits remaining to break the brick. In other words, if we made a brick that took ten hits to break, the brick would start out opaque and subtract 10% of its opacity after each hit. If we were to create new levels, this would be a great feature to consider.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gsOHahnC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pfgb1h8vrw57h1uymbem.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gsOHahnC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pfgb1h8vrw57h1uymbem.gif" alt="Brick Animation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;One of the most fun features to add was the drop-in animation for the bricks&lt;/strong&gt; when the game first loads. The &lt;a href="https://animate.style"&gt;Animate.css&lt;/a&gt; library has tons of amazing examples for this kind of thing.&lt;/p&gt;

&lt;p&gt;I used those examples to create a "bounceInDown" animation that you can find in the &lt;a href="https://github.com/create-with/games/blob/master/assets/css/animations.scss"&gt;&lt;code&gt;assets/css/animations.scss&lt;/code&gt; file&lt;/a&gt;. Then, in the Elm code, I added that &lt;code&gt;bounce-in-down&lt;/code&gt; class to the bricks to get the animation working.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wishlist" class="anchor"&gt;
  &lt;/a&gt;
  ✨ Wishlist
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;It's amazing how many cool features you can add to a small game like &lt;em&gt;Breakout&lt;/em&gt;&lt;/strong&gt;. But I wanted to find a good stopping point and move on to a new game. One of the big takeaways from this project was how distracted I can get while trying to finish something. I actually finished writing the code for the game months before I was able to publish this blog post.&lt;/p&gt;

&lt;p&gt;But there are some known bugs and wishlist items that would be great to add to the game:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create Multiple Levels&lt;/li&gt;
&lt;li&gt;Improve Collisions&lt;/li&gt;
&lt;li&gt;Add Sound Effects&lt;/li&gt;
&lt;li&gt;Incorporate Randomness&lt;/li&gt;
&lt;li&gt;Save High Scores&lt;/li&gt;
&lt;li&gt;Expand Particle Effects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're looking for inspiration and more features to think about, here are some other great places to look:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Arkanoid"&gt;Arkanoid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLea8cjCua_P0qjjiG8G5FBgqwpqMU7rBk"&gt;LazyDevs PICO-8 Breakout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#whats-next" class="anchor"&gt;
  &lt;/a&gt;
  📈 What's Next?
&lt;/h2&gt;

&lt;p&gt;I've been having fun building a little arcade cabinet lately. At some point, I'd love to see one of the games I build running on it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EbGpqASr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lxmnrrczipihu1ewpt5p.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EbGpqASr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lxmnrrczipihu1ewpt5p.jpg" alt="Arcade Cabinet Front"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yZrybcN6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5gwobppi020e1rl4xq5s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yZrybcN6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5gwobppi020e1rl4xq5s.jpg" alt="Arcade Cabinet Rear"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've also loved getting to explore things like WebGL and Unity recently. But the next game I'm going to focus on building is the classic game &lt;a href="https://en.wikipedia.org/wiki/Adventure_(1980_video_game)"&gt;&lt;em&gt;Adventure&lt;/em&gt;&lt;/a&gt;. And my plan is to &lt;em&gt;hopefully&lt;/em&gt; incorporate both 2D &lt;em&gt;and&lt;/em&gt; 3D features if I can get it all figured out.&lt;/p&gt;

&lt;p&gt;If you're learning functional programming and game development, feel free to &lt;a href="https://bijanbwb.github.io"&gt;get in touch with me&lt;/a&gt; and I'd be happy to hear from you. You can also &lt;a href="https://twitter.com/bijanbwb"&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And here are links to the game and the source code!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🕹 &lt;a href="https://create-with-games.herokuapp.com/breakout"&gt;&lt;strong&gt;Play the Game!&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;💻 &lt;a href="https://github.com/create-with/games"&gt;&lt;strong&gt;View the Source Code on GitHub&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>elm</category>
      <category>functional</category>
      <category>elixir</category>
    </item>
    <item>
      <title>How to find an impostor binary search implementation in Python! :-)</title>
      <author>Anurag Pandey</author>
      <pubDate>Mon, 23 Nov 2020 14:38:57 +0000</pubDate>
      <link>https://dev.to/geekypandey/how-to-find-an-impostor-binary-search-implementation-in-python-56d0</link>
      <guid>https://dev.to/geekypandey/how-to-find-an-impostor-binary-search-implementation-in-python-56d0</guid>
      <description>&lt;p&gt;Recently I have been working on writing STL algorithms of C++ in Python (&lt;a href="https://github.com/geekypandey/PythonAlogrithmsTemplate"&gt;here&lt;/a&gt;). I came across a typical problem, which was how to test the implementation of binary search algorithm? Let us write some tests first.&lt;br&gt;
You can write tests using any Python testing framework like &lt;code&gt;pytest&lt;/code&gt; , &lt;code&gt;unittest&lt;/code&gt; etc, here I am using &lt;code&gt;unittest&lt;/code&gt; which is part of Python Standard Library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;binary_search&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;binary_search&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BinarySearchTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_true&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_false&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_on_random_list_false&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;999&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The testcases are divided as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Searching for any element in an empty list should result &lt;em&gt;False&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Searching for an element present in the list should result &lt;em&gt;True&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Searching for an element not present in the list should result &lt;em&gt;False&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above testcases seem reasonable. To be more robust about writing the testcases we should use &lt;a href="https://hypothesis.readthedocs.io/en/latest/"&gt;&lt;em&gt;hypothesis&lt;/em&gt;&lt;/a&gt; library which is the Python port of &lt;a href="https://hackage.haskell.org/package/QuickCheck"&gt;&lt;em&gt;QuickCheck&lt;/em&gt;&lt;/a&gt; library in Haskell. You can simply install it using &lt;code&gt;pip install hypothesis&lt;/code&gt;.&lt;br&gt;
The tests using hypothesis are as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;hypothesis&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hypothesis.strategies&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;binary_search&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;binary_search&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BinarySearchTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;min_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_binary_search_true&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;min_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_binary_search_false&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 test.py 





&lt;p&gt;Hypothesis automatically generates different testcases given the specification, which in this case is a list of integers.&lt;/p&gt;

&lt;p&gt;Now the fun part is the binary search code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
binary_search.py





&lt;p&gt;Let us run the test now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python test.py
...
----------------------------------------------------------------------
Ran 3 tests in 0.380s

OK
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The above code is no where near the binary search implementation, but passes all the tests! The linear search algorithm passes the binary search testcases! What?? Now how can we rule out this impostor code?&lt;/p&gt;

&lt;p&gt;The problem with these tests are that it doesn't use any of the &lt;em&gt;property of binary search algorithm&lt;/em&gt;, it just checks the property of a searching algorithm.&lt;/p&gt;

&lt;p&gt;We know one property of binary search that at maximum &lt;strong&gt;log2(n) + 1&lt;/strong&gt; items will be seen, as it discards half the search space at every iteration.&lt;br&gt;
Here &lt;code&gt;n&lt;/code&gt; is the total number of elements in the array.&lt;/p&gt;

&lt;p&gt;So we write a class which behaves like a list, by implementing &lt;code&gt;__iter__&lt;/code&gt; and &lt;code&gt;__getitem__&lt;/code&gt; special methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__getitem__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__len__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We now have a &lt;code&gt;Node&lt;/code&gt; class which is similar to &lt;code&gt;list&lt;/code&gt; class but additionally has a count variable, which increments every time an element is accessed. This will help to keep track of how many elements the binary search code checks.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In Python, there is a saying, if something walks like a duck, quacks like a duck, it is a duck.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We add this extra testcase using the above &lt;code&gt;Node&lt;/code&gt; class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;min_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_binary_search_with_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;max_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; 
    &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;max_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let us run the tests again now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python test.py
..Falsifying example: test_binary_search_with_node(
    self=&amp;lt;__main__.BinarySearchTestCase testMethod=test_binary_search_with_node&amp;gt;,
    arr=[0, 0, 1],
)
F.
======================================================================
FAIL: test_binary_search_with_node (__main__.BinarySearchTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "code.py", line 48, in test_binary_search_with_node
    def test_binary_search_with_node(self, arr):
  File "/home/tmp/venv/lib/python3.6/site-packages/hypothesis/core.py", line 1162, in wrapped_test
    raise the_error_hypothesis_found
  File "code.py", line 54, in test_binary_search_with_node
    self.assertTrue(arr.count &amp;lt;= math.log2(len(arr)) + 1)
AssertionError: False is not true

----------------------------------------------------------------------
Ran 4 tests in 0.435s

FAILED (failures=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This code fails because each and every element will be checked once, which is not true for binary search. It discards half the search space at every iteration. &lt;em&gt;Hypothesis&lt;/em&gt; also provides the minimum testcase which failed the test, which in this case is an array of size 3.&lt;br&gt;
&lt;strong&gt;Impostor code found!&lt;/strong&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#complete-test-code" class="anchor"&gt;
  &lt;/a&gt;
  Complete test code
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;hypothesis&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hypothesis.strategies&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;binary_search&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;binary_search&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__getitem__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__len__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BinarySearchTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;min_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_binary_search_true&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;min_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_binary_search_false&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;min_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_binary_search_with_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;max_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;max_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt; test.py &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-to-go-from-here" class="anchor"&gt;
  &lt;/a&gt;
  Where to go from here?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Check out this awesome &lt;a href="https://www.youtube.com/watch?v=zi0rHwfiX1Q"&gt;talk&lt;/a&gt; by John Huges on &lt;em&gt;Testing the hard stuff and staying sane&lt;/em&gt;, where he talks about how he used &lt;code&gt;QuickCheck&lt;/code&gt; for finding and fixing bugs for different companies.&lt;/li&gt;
&lt;li&gt;Check out this &lt;a href="https://www.youtube.com/watch?v=KcyGUVzL7HA"&gt;talk&lt;/a&gt; on &lt;code&gt;hypothesis&lt;/code&gt;, the port of &lt;code&gt;QuickCheck&lt;/code&gt; in Python by ZacHatfield-Dodds.&lt;/li&gt;
&lt;li&gt;Read more on &lt;code&gt;unittest&lt;/code&gt; framework &lt;a href="https://docs.python.org/3/library/unittest.html"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy learning!&lt;/p&gt;

</description>
      <category>python</category>
      <category>testing</category>
      <category>fun</category>
      <category>python3</category>
    </item>
  </channel>
</rss>
