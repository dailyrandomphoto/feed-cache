<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>JavaScript Demystified: The execution context and the call stack</title>
      <author>Saran Chakravarthi</author>
      <pubDate>Fri, 16 Jul 2021 21:02:01 +0000</pubDate>
      <link>https://dev.to/saran_chakravarthi/javascript-demystified-the-execution-context-and-the-call-stack-2gka</link>
      <guid>https://dev.to/saran_chakravarthi/javascript-demystified-the-execution-context-and-the-call-stack-2gka</guid>
      <description>&lt;p&gt;Hello Devs, "JavaScript demystified" is going to be a series of blogs. And this is the first one. I will try to cover the important yet not well-known javascript concepts in this blog series. I would like to start off the series by explaining the execution context and the call stack.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#execution-context"&gt;
  &lt;/a&gt;
  Execution context:
&lt;/h1&gt;

&lt;p&gt;Execution context may be defined as the environment in which the code gets executed. Everything in JavaScript happens inside the execution context&lt;/p&gt;

&lt;p&gt;It is composed of two components, the memory component and the code component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-memory-component"&gt;
  &lt;/a&gt;
  The memory component:
&lt;/h2&gt;

&lt;p&gt;The memory component, also known as the variable environment, stores the variable, functions and their values as key-value pairs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code-component"&gt;
  &lt;/a&gt;
  The code component:
&lt;/h2&gt;

&lt;p&gt;It is also known as the thread of execution. Inside the code component, the code is executed one line at a time.&lt;/p&gt;

&lt;p&gt;Execution context is created in two phases. The first one is memory creation phase, in this phase the interpreter skims through the whole program and allocates memory to the variables and functions. The second phase is called the code execution phase, the code gets executed in this phase.&lt;/p&gt;

&lt;p&gt;Let's visualize this with an example. Consider the following program:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var n = 10;

function double(num){
    return num*2;
}

a = double(n);
b = double(7);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the program starts to execute, a new execution context will be created, since we are dealing with global level, it is called the global execution context.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#memory-allocation-phase"&gt;
  &lt;/a&gt;
  Memory allocation phase:
&lt;/h2&gt;

&lt;p&gt;On line number one, memory is allocated for the variable n, and it is assigned with the value "undefined". You can think of "undefined" as a special placeholder keyword (we will learn more about it in the upcoming blogs).&lt;/p&gt;

&lt;p&gt;Then memory is allocated for double function, the whole function is assigned to it as its value.&lt;/p&gt;

&lt;p&gt;Similar to variable n, memory is allocated for variables a and b, and they are assigned with the value "undefined"&lt;/p&gt;

&lt;p&gt;This how the execution context will look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VlT1368u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvmsxu55hhbhyys1484o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VlT1368u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvmsxu55hhbhyys1484o.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-execution-phase"&gt;
  &lt;/a&gt;
  Code execution phase:
&lt;/h2&gt;

&lt;p&gt;Code is executed line by line, firstly the value of n will be replaced with 10. The function definition of double will be skipped, as it is just a definition, there is nothing to be executed. Then we reach the function invocation where double function is called. Now something interesting happens, a new execution context will be created inside the global execution context's thread of execution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AJIp3rRv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pm6hq99nrdjam6ecel0o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AJIp3rRv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pm6hq99nrdjam6ecel0o.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The same process will happen to this new execution context as well.&lt;/p&gt;

&lt;p&gt;During the memory creation phase, memory will be allocated for num and will be assigned with undefined.&lt;/p&gt;

&lt;p&gt;During the code execution phase the value of num will be replaced by 10. &lt;/p&gt;

&lt;p&gt;When the program reaches "return" keyword, the control is returned to the function caller, along with value specified after the return keyword.  Then that particular execution context is deleted. In our case, execution context of &lt;code&gt;double(n)&lt;/code&gt; will be deleted.&lt;/p&gt;

&lt;p&gt;similarly &lt;code&gt;double(7)&lt;/code&gt; will also be executed.&lt;/p&gt;

&lt;p&gt;Once the program reaches the end of the file, the global execution context will also be deleted.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-call-stack"&gt;
  &lt;/a&gt;
  The call stack:
&lt;/h1&gt;

&lt;p&gt;The example we saw was pretty simple. But what if we have multiple function invocations inside a function, how will JavaScript handle it? The answer is call stack.&lt;/p&gt;

&lt;p&gt;It is similar to the stack data structure. It follows the LIFO(Last In First Out) principal.&lt;/p&gt;

&lt;p&gt;Whenever we start a program, the global execution context is pushed into to the stack. After that if we call a function it is pushed into the stack. Once the code reaches the return statement, the function gets popped off the stack. The global execution context will be popped off when we reach the end of the file.&lt;/p&gt;

&lt;p&gt;As we saw, JavaScript has only one call stack, hence it is &lt;strong&gt;single threaded&lt;/strong&gt;. And it executes the code line by line, so it is &lt;strong&gt;synchronous&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But you might say, "I have used AJAX, JavaScript is asynchronous". No, JavaScript is not asynchronous. We will see how javascript handles asynchronous code in the upcoming blogs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next:
&lt;/h3&gt;

&lt;p&gt;I hope you liked this blog, In the next blog, I will cover the concept of hoisting. Follow me to receive the notification.&lt;/p&gt;

&lt;p&gt;Want to connect with me? You can DM on Dev.to and &lt;a href="https://twitter.com/SaranChakravar3"&gt;twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>CSS Structure</title>
      <author>Alex Salgado</author>
      <pubDate>Fri, 16 Jul 2021 20:06:09 +0000</pubDate>
      <link>https://dev.to/alextsalg/css-structure-160e</link>
      <guid>https://dev.to/alextsalg/css-structure-160e</guid>
      <description>&lt;h1&gt;
  &lt;a href="#write-css-that-is-easy-to-read-and-everyone-can-understand"&gt;
  &lt;/a&gt;
  Write CSS that is easy to read and everyone can understand
&lt;/h1&gt;

&lt;p&gt;One of the struggles developers encounters while writing CSS is the fact that the property you are looking for can be in any line inside a class selector. To help to solve that problem I thought about a structure to organize the styles so you can know where to write and search the properties you need.&lt;/p&gt;

&lt;p&gt;I have a way of writing my CSS codes that makes people think I have some kind of OCD, but the truth is I have dyslexia so reviewing code or hunting down some CSS property in a class selector is a big challenge so right at the beginning of my career I “created” an organized structure to write CSS that changed the whole experience.&lt;/p&gt;

&lt;p&gt;This structure consists of splitting properties of a class selector into blocks so you know where to look for properties by going straight to their corresponding block.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-structure"&gt;
  &lt;/a&gt;
  The Structure
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Positioning Block&lt;/li&gt;
&lt;li&gt;Structure Block&lt;/li&gt;
&lt;li&gt;Typography Block&lt;/li&gt;
&lt;li&gt;Modifier Block&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vQmlm-vk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6ta8facji6vzsx8m8h7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vQmlm-vk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6ta8facji6vzsx8m8h7.png" alt="css-structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#positioning-block"&gt;
  &lt;/a&gt;
  Positioning Block
&lt;/h3&gt;

&lt;p&gt;Properties that change the absolute positioning of the element on the page like &lt;em&gt;position&lt;/em&gt;, &lt;em&gt;top&lt;/em&gt;, &lt;em&gt;right&lt;/em&gt;, &lt;em&gt;bottom&lt;/em&gt;, &lt;em&gt;left&lt;/em&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ozPgu67e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tch4xm72tg3eyuuqf17h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ozPgu67e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tch4xm72tg3eyuuqf17h.png" alt="position-block"&gt;&lt;/a&gt;&lt;br&gt;
\&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#structure-block"&gt;
  &lt;/a&gt;
  Structure Block
&lt;/h3&gt;

&lt;p&gt;Properties that modifies the structure, shape, size and details of the element like &lt;em&gt;display&lt;/em&gt;, &lt;em&gt;flex and grid properties&lt;/em&gt;, &lt;em&gt;margin&lt;/em&gt;, &lt;em&gt;padding&lt;/em&gt;, &lt;em&gt;background&lt;/em&gt;, &lt;em&gt;border&lt;/em&gt;...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TAFS_xoZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/12wrl36jyim66fw9z2vb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TAFS_xoZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/12wrl36jyim66fw9z2vb.png" alt="structure-block"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typography-block"&gt;
  &lt;/a&gt;
  Typography Block
&lt;/h3&gt;

&lt;p&gt;Everything relate to the lettering in general, text and font properties like &lt;em&gt;font&lt;/em&gt;, &lt;em&gt;text-align&lt;/em&gt;, &lt;em&gt;color&lt;/em&gt;, &lt;em&gt;text-decoration&lt;/em&gt;, &lt;em&gt;text-transform&lt;/em&gt;...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IYhOmgIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzl2821qs7dmpozz3mj8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IYhOmgIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzl2821qs7dmpozz3mj8.png" alt="typography-block"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#modifier-block"&gt;
  &lt;/a&gt;
  Modifier Block
&lt;/h3&gt;

&lt;p&gt;CSS Properties that change the element in any way or add some detail to it and you can't fit in the other blocks. In my case, I put usually properties like &lt;em&gt;transition&lt;/em&gt;, &lt;em&gt;transform&lt;/em&gt;, &lt;em&gt;box-shadow&lt;/em&gt;, &lt;em&gt;cursor&lt;/em&gt;, &lt;em&gt;animation&lt;/em&gt;...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hjhHOTMg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dprpkfy1wrj8omzso6qt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hjhHOTMg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dprpkfy1wrj8omzso6qt.png" alt="modifier-block"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>productivity</category>
      <category>sass</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Tips for creating a good post</title>
      <author>Walter Nascimento</author>
      <pubDate>Fri, 16 Jul 2021 19:25:44 +0000</pubDate>
      <link>https://dev.to/walternascimentobarroso/tips-for-creating-a-good-post-2bd6</link>
      <guid>https://dev.to/walternascimentobarroso/tips-for-creating-a-good-post-2bd6</guid>
      <description>&lt;p&gt;&lt;a href="https://medium.com/walternascimentobarroso-pt/dicas-para-criar-um-bom-post-a5c69143f3d"&gt;[Clique aqui para ler em português]&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#title"&gt;
  &lt;/a&gt;
  TITLE
&lt;/h2&gt;

&lt;p&gt;Write an attention-grabbing headline that will draw an audience to your text.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#images"&gt;
  &lt;/a&gt;
  IMAGES
&lt;/h2&gt;

&lt;p&gt;Use an image to reflect what your post means.&lt;br&gt;
some sites with free images:&lt;br&gt;
&lt;a href="https://stocksnap.io/"&gt;https://stocksnap.io/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.pexels.com/"&gt;https://www.pexels.com/&lt;/a&gt;&lt;br&gt;
Website that searches for free images on other websites &lt;a href="https://farejadordeimagens.com.br/"&gt;https://farejadordeimagens.com.br/&lt;/a&gt;&lt;br&gt;
Site to change image dimension&lt;br&gt;
&lt;a href="https://www.easy-resize.com/"&gt;https://www.easy-resize.com/&lt;/a&gt;&lt;br&gt;
Website to reduce image weight&lt;br&gt;
&lt;a href="https://compressor.io/"&gt;https://compressor.io/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tables"&gt;
  &lt;/a&gt;
  TABLES
&lt;/h2&gt;

&lt;p&gt;Whenever possible, adjust your content in tables, so the information is more organized, by comparison tables.&lt;/p&gt;

&lt;p&gt;To help assemble the tables, use the website&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ozh.github.io/ascii-tables/"&gt;https://ozh.github.io/ascii-tables/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#codes"&gt;
  &lt;/a&gt;
  CODES
&lt;/h2&gt;

&lt;p&gt;Whenever you need to put in some code that is too extensive, use some of the tools below:&lt;br&gt;
&lt;a href="https://carbon.now.sh/"&gt;https://carbon.now.sh/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codepen.io/"&gt;https://codepen.io/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://gist.github.com/"&gt;https://gist.github.com/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tags"&gt;
  &lt;/a&gt;
  TAGS
&lt;/h2&gt;

&lt;p&gt;Always add tags to your post, so it’s easier to find&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#emojis"&gt;
  &lt;/a&gt;
  EMOJIS
&lt;/h2&gt;

&lt;p&gt;To convey more feelings and expressions in your posts, use &lt;br&gt;
emojis&lt;br&gt;
&lt;a href="http://emojipedia.org/"&gt;http://emojipedia.org/&lt;/a&gt;&lt;br&gt;
&lt;a href="http://www.iemoji.com/"&gt;http://www.iemoji.com/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h2&gt;

&lt;p&gt;If you have any questions, complaints or tips, you can leave them here in the comments. I will be happy to answer!&lt;/p&gt;

&lt;p&gt;😊😊See you! 😊😊&lt;/p&gt;

</description>
      <category>post</category>
      <category>content</category>
      <category>tips</category>
      <category>article</category>
    </item>
    <item>
      <title>¿Qué necesito saber antes de iniciar con Redux ?</title>
      <author>Billi Ramirez</author>
      <pubDate>Fri, 16 Jul 2021 19:24:05 +0000</pubDate>
      <link>https://dev.to/billiramirez/que-necesito-saber-antes-de-iniciar-con-redux-31n1</link>
      <guid>https://dev.to/billiramirez/que-necesito-saber-antes-de-iniciar-con-redux-31n1</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eF6qVjfx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wnqxxcr143jjn6rojvjn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eF6qVjfx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wnqxxcr143jjn6rojvjn.png" alt="Redux Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;al construir aplicaciones web con React, te encontrarás con la necesidad de manejar el estado de tu aplicación, ya sea de forma local (componentes) o global (única fuente de la verdad). Si bien podrías administrarlo con las distintas formas que React te ofrece (useState, setState, ContextAPI, etc) con el tiempo se volvería un poco tedioso tener que recordar las decisiones arquitectónicas que tomaste en cada componente para manejar el estado de tu app.&lt;/p&gt;

&lt;p&gt;Redux ya te ofrece una arquitectura para manejar el estado de tu app, basada en Flux, sin embargo entrar a esto sin tomar el tiempo para comprender como funciona realmente, es decir, los fundamentos, será sumamente dolorosa la curva de aprendizaje para incorporar Redux en tus proyectos.&lt;/p&gt;

&lt;p&gt;En este post, trataré de trasmitirte de la mejor manera algunos de esos conceptos para que sean fáciles de comprender para ti. Algunos términos los dejaré en ingles porque es mejor quedarse en una misma nomenclatura y evitar confundirnos en sus traducciones.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#state-management-manejo-del-estado"&gt;
  &lt;/a&gt;
  State Management — Manejo del Estado
&lt;/h2&gt;

&lt;p&gt;Podríamos decir que el manejo del estado de un aplicación común está conformado por:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;State (estado) :&lt;/strong&gt; Unica fuente de verdad&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;View (vista):&lt;/strong&gt; Una declarativa (como deseo que se vea) descripción de la UI, basada en tu state actual.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Actions:&lt;/strong&gt; Son los distintos eventos que suceden cuando el usuario realiza una acción en nuestra aplicación, por ende actualiza nuestro estado y nuestras vistas se actualizan también.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CpEgpir5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dl92skorgyisgon7ba6t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CpEgpir5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dl92skorgyisgon7ba6t.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Localmente esta solución pareciera funcionar, pero ¿Qué sucede cuando necesitamos propagar esos cambios del estado a distintas parte de nuestra aplicación? Pasando props de componentes padres a componentes hijos, pudiera ser una solución, la cual no la veo muy eficiente, más cuando son componentes sumamente anidados. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6t1zBubT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pocwcm1tkbkcscogsjz6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6t1zBubT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pocwcm1tkbkcscogsjz6.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¿Qué pasa con componentes que están en distintas partes de nuestra aplicación? Ya nuestra solución local no podría solventarla.&lt;/p&gt;

&lt;p&gt;Una manera de solucionar esto es centralizando nuestro estado y permitiendo que los componentes tomen las piezas que necesitan para mostrar en la UI, o actualizar el estado. Esto nos permite tener un código más estructurado y mantenible, independencia entre &lt;strong&gt;views&lt;/strong&gt; y &lt;strong&gt;states&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--daCYtfOo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qde8ce5itmuvcm265p6m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--daCYtfOo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qde8ce5itmuvcm265p6m.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Esto vendría siendo lo básico detrás Redux, tener un punto centralizado de nuestro estado, un patrón definido para actualizar nuestro estado, haciendo nuestro código más predecible, de manera que cualquier desarrollador que entre al proyecto pueda entender de que se trata y poder integrarse fácilmente. &lt;/p&gt;

</description>
      <category>redux</category>
      <category>react</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Top 6 cryptocurrency exchange development company in turkey</title>
      <author>Radin Dev</author>
      <pubDate>Fri, 16 Jul 2021 19:00:06 +0000</pubDate>
      <link>https://dev.to/radindev/top-6-cryptocurrency-exchange-development-company-in-turkey-2dkd</link>
      <guid>https://dev.to/radindev/top-6-cryptocurrency-exchange-development-company-in-turkey-2dkd</guid>
      <description>&lt;p&gt;With the ever-expanding realm of digital or cryptocurrencies globally, especially in Turkey, and its considerable impact on other financial markets, many individuals and legal entities are considering developing a crypto exchange platform to make good profits from this young and vast market.&lt;br&gt;
To ease your mind about developing this advanced software, you need to hire a super capable team or sign a contract with a &lt;a href="https://radindev.com/cryptocurrency-exchange-development-in-turkey/"&gt;cryptocurrency exchange development company in Turkey&lt;/a&gt;. In the following, we will review the list of the top 6 companies developing cryptocurrency exchange sites in Turkey and compare their strengths and weaknesses.&lt;br&gt;
Factors that you should know before choosing a crypto exchange development company are:&lt;br&gt;
• Number of Employees&lt;br&gt;
• Contact details of the company&lt;br&gt;
• Successful portfolio&lt;br&gt;
• Customer Satisfaction&lt;br&gt;
• Experience in this field&lt;/p&gt;

&lt;p&gt;Now let's compare the top companies:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-radindev"&gt;
  &lt;/a&gt;
  1. Radindev
&lt;/h2&gt;

&lt;p&gt;Radindev Web Development Company is one of the best and most dedicated companies in blockchain development.&lt;br&gt;
The main goal of radindev software development company is to reduce the risks in crypto transactions like bitcoin and to encourage new cryptocurrency exchange start-ups by providing a bitcoin or other crypto exchange script. radindev is a provider of crypto-exchange software that covers more than 60 countries.&lt;br&gt;
According to their assertion, they offer a more secure crypto exchange platform than others. Even their platform panel admin is fully customizable, and in the best possible way, is user-friendly.&lt;br&gt;
During their five years of activity, they have served more than 500 happy customers from all over the world.&lt;br&gt;
Radindev also has more than 100 loyal and committed employees, which is unique.&lt;br&gt;
Their services include &lt;a href="https://radindev.com/white-label-crypto-exchange-software/"&gt;developing white label crypto exchange software&lt;/a&gt;, p2p crypto exchange platform development, cryptocurrency MLM software development, and much more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0FrtJIbK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bygal1ea2acfmbc1jj40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0FrtJIbK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bygal1ea2acfmbc1jj40.png" alt="p2p crypto exchange platform development in turkey"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-bitdeal"&gt;
  &lt;/a&gt;
  2. Bitdeal
&lt;/h2&gt;

&lt;p&gt;One of the best companies in this field is bitdeal company which is headquartered in India. With several years of experience in web development, bitdeal has become a giant in the development of cryptocurrency trading platforms, which has completed many projects so far.&lt;br&gt;
While they offer high quality, reliability, and capability, their dedication, patience, and honesty with their customers are exemplary.&lt;br&gt;
Bitdeal is also known for providing complete blockchain solutions that include smart contract development, private blockchain technology integration, Ethereum token creation, digital tokens creation, ICOs, and bitcoin mining solutions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-blockchainappsdeveloper"&gt;
  &lt;/a&gt;
  3. Blockchainappsdeveloper
&lt;/h2&gt;

&lt;p&gt;Blockchain apps developer is another leading active and influential company in this field that operates in India and offers its services to various countries, including Turkey, Germany, the USA, and Canada. They provide several blockchain technologies called white labels to start-ups active in this field. They have a dedicated team of developers with extensive knowledge of blockchain technology and offer the best solutions.&lt;br&gt;
You can hire a full-time blockchain developer with Blockchain apps developer company.&lt;br&gt;
They offer various services that can be mention as follows:&lt;br&gt;
• Blockchain development services&lt;br&gt;
• Cryptocurrency exchange script&lt;br&gt;
• Decentralized exchange script&lt;br&gt;
• Crypto exchange clone development&lt;br&gt;
• Crypto wallet development services&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-nadcab"&gt;
  &lt;/a&gt;
  4. Nadcab
&lt;/h2&gt;

&lt;p&gt;When you need to develop blockchain and currency codes, Nadcab technology is one of the best choices you can make. They started their business in 2015 and founded this company. Over time, they also specialized in developing software solutions.&lt;br&gt;
Now they have more than 30 committed, dedicated, and patient employees. Using the latest technologies they have experienced has enabled them to utilize their innovative information in different areas and convey a lot of added value to their customers. They claim that they can combine their creative concepts to make their services more advanced and accessible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-zabtechnologis"&gt;
  &lt;/a&gt;
  5. Zabtechnologis
&lt;/h2&gt;

&lt;p&gt;Today, blockchain and cryptocurrencies are considered a revolution in security for storage and trading. As one of the leading cryptocurrency software companies, Zab technologies make great efforts to provide blockchain development services.&lt;br&gt;
They have a rich and expert team that is still adapting their knowledge to the latest technologies. Their end-to-end services have so far helped many new customers and start-ups to make huge profits. The reliable and cost-effective results of Zab are pretty obvious and based on team initiative and customer needs.&lt;br&gt;
Enthusiasts in this field are constantly understanding new market technologies and implementing them in their potential products. With their exceptionally high success rate, they offer first-class Blockchain by-products and ultimately go with lots of benefits.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-osiztechnologiescom"&gt;
  &lt;/a&gt;
  6. osiztechnologies.com
&lt;/h2&gt;

&lt;p&gt;Osiz Software Company is a provider and developer of various web, mobile, and blockchain applications and is one of the leaders in this field. This large company is determined to provide utterly innovative software solutions for companies and start-ups, and entrepreneurs. Osiz company is constantly researching and reviewing the latest technologies to keep itself and its technologies updated every day. These technologies include artificial intelligence, blockchain, cryptocurrency, IoT, and many more.&lt;br&gt;
They are a team of +100 experts fluent in several programming languages, which paves the way for this innovative path.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>The Organization Behind Chaos Engineering w/ Matt Fornaciari of Gremlin</title>
      <author>Conor Bronsdon</author>
      <pubDate>Fri, 16 Jul 2021 18:57:17 +0000</pubDate>
      <link>https://dev.to/linearb/the-organization-behind-chaos-engineering-w-matt-fornaciari-of-gremlin-3cp5</link>
      <guid>https://dev.to/linearb/the-organization-behind-chaos-engineering-w-matt-fornaciari-of-gremlin-3cp5</guid>
      <description>&lt;p&gt;Is Chaos Engineering really chaos? Or is there a method to the madness?&lt;/p&gt;

&lt;p&gt;On this week's episode of &lt;a href="https://devinterrupted.com/podcast/chaos-engineering/"&gt;Dev Interrupted&lt;/a&gt;, Matthew Fornaciari, CTO at Gremlin, talks about Chaos Engineering. Matthew details the history of Chaos Engineering, why its name may be a misnomer, and why continuous chaos is a good thing.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/2xwZ0IxHB5fvljUEf9EpNi"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Episode Highlights include:&lt;/strong&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;What is Chaos Engineering?&lt;/li&gt;
&lt;li&gt;The benefits of Chaos Engineering&lt;/li&gt;
&lt;li&gt;Where Chaos engineering can be implemented within an organization&lt;/li&gt;
&lt;li&gt;Should your organization consider using Chaos Engineering?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-O0vjlejc6U"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#join-the-dev-interrupted-discord-server"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Join the Dev Interrupted Discord Server&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;With over 1200 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.gg/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" alt="Join the Dev Interrupted Discord Community!"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>chaosengineering</category>
      <category>engineering</category>
      <category>organization</category>
      <category>implementation</category>
    </item>
    <item>
      <title>JavaScript : Variables &amp; Scope</title>
      <author>Vivek Alhat</author>
      <pubDate>Fri, 16 Jul 2021 18:51:59 +0000</pubDate>
      <link>https://dev.to/vivekalhat/javascript-variables-scope-3jhg</link>
      <guid>https://dev.to/vivekalhat/javascript-variables-scope-3jhg</guid>
      <description>&lt;p&gt;Variable is a fundamental concept of programming. A variable is a container that stores a value or data. It is a named unit of data that is assigned a value.&lt;/p&gt;

&lt;p&gt;Variables in JavaScript are different compared to other programming languages such as C and C++.&lt;/p&gt;

&lt;p&gt;JavaScript is a &lt;strong&gt;&lt;em&gt;weakly typed language&lt;/em&gt;&lt;/strong&gt;. It means that you do not have to specify the type for a variable declaration.&lt;/p&gt;

&lt;p&gt;The scope is a policy that manages the availability of variables throughout the program.&lt;/p&gt;

&lt;p&gt;In JavaScript, variables can be created in three ways, these are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;var&lt;/li&gt;
&lt;li&gt;let&lt;/li&gt;
&lt;li&gt;const&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#var"&gt;
  &lt;/a&gt;
  var
&lt;/h2&gt;

&lt;p&gt;Before let and const were introduced there was only one method for variable declarations i.e var. Var is a keyword that is used to declare or &lt;em&gt;optionally&lt;/em&gt; initialize a variable.&lt;/p&gt;

&lt;p&gt;e.g: &lt;code&gt;var name;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When a variable is &lt;strong&gt;declared&lt;/strong&gt; using var then by default &lt;em&gt;undefined&lt;/em&gt; is assigned to that variable. In this case, the name contains a value undefined. If you initialize a variable then it will contain the assigned value.&lt;/p&gt;

&lt;p&gt;e.g: &lt;code&gt;var character = "Joseph Joestar"&lt;/code&gt;&lt;br&gt;
In the above example, the variable character contains a string value i.e &lt;em&gt;"Joseph Joestar"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Var statement declares a &lt;strong&gt;globally scoped variable&lt;/strong&gt;. This means that a variable declared using var is available in the global context i.e throughout the program.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9DzX2lQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6qa9ch2kmz6yclybpn5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9DzX2lQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6qa9ch2kmz6yclybpn5.png" alt="var"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above example, we initialized the var variable with value as &lt;em&gt;Joseph Joestar&lt;/em&gt;. This variable is now available in the global context of the program. We have also created a function &lt;em&gt;changeCharacter&lt;/em&gt; that reassigns the value to the variable and then outputs it to the console. After executing the function, the value that will be printed to the console is &lt;em&gt;Dio Brando&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now, if we print the variable outside the function, it will still print &lt;em&gt;Dio Brando&lt;/em&gt; instead of &lt;em&gt;Joseph Joestar&lt;/em&gt;. Even though we have changed the value &lt;strong&gt;only inside the function&lt;/strong&gt; still is printing the same value &lt;strong&gt;outside the function scope&lt;/strong&gt;. This happens because &lt;strong&gt;var creates a globally scoped variable&lt;/strong&gt;. The change is reflected globally thus we get this output.&lt;/p&gt;

&lt;p&gt;This type of situation may create confusion while writing large components so you should avoid using var as much as possible. So what should we use instead of var?&lt;br&gt;
ES6 introduced two new ways to create variables i.e using let and const.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#let-amp-const"&gt;
  &lt;/a&gt;
  let &amp;amp; const
&lt;/h2&gt;

&lt;p&gt;As we saw earlier that var declares globally scoped variables which may lead to issues if not used properly. This problem can be solved using &lt;em&gt;let&lt;/em&gt; &amp;amp; &lt;em&gt;const&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The variables created using let and const are &lt;strong&gt;block-scoped&lt;/strong&gt;. A block is everything inside two curly braces i.e {}.&lt;/p&gt;

&lt;p&gt;e.g: &lt;code&gt;let name&lt;/code&gt; or &lt;code&gt;let name = "JOJO"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--70-cPu5_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kv438byprxkwhzegukeh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--70-cPu5_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kv438byprxkwhzegukeh.png" alt="let"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above example, we have created a new variable inside a function using the let keyword. This &lt;strong&gt;name&lt;/strong&gt; variable is now block-scoped hence exists only inside that function. If we print it outside the function it will output &lt;strong&gt;Reference Error: name not defined&lt;/strong&gt; to the console because name variable is not present in the global scope.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;const&lt;/strong&gt; is similar to let. It creates a block-scoped variable. The only difference is that you cannot reassign a new value to the const variable. The variable declared using const has a constant value. You cannot re-assign or re-declare value to the const variable, otherwise, it will throw &lt;strong&gt;Type Error: assignment to constant variable&lt;/strong&gt; error.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sYX-o7od--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j309yiyiwz29bl87ys19.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sYX-o7od--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j309yiyiwz29bl87ys19.png" alt="const"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;var is always hoisted in JavaScript. You can use the variable declared using var before its actual declaration.&lt;/p&gt;

&lt;p&gt;let and const are also hoisted but they are not initialized.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Create (passwordless) Login Links for users in Laravel</title>
      <author>koost89</author>
      <pubDate>Fri, 16 Jul 2021 18:29:45 +0000</pubDate>
      <link>https://dev.to/koost89/login-links-for-laravel-580e</link>
      <guid>https://dev.to/koost89/login-links-for-laravel-580e</guid>
      <description>&lt;p&gt;As I was looking for a functionality that lets authenticatables log in in my Laravel applications with a simple click of a link, I came across a few packages already developed for Laravel, these packages did not what I specifically needed (namely give me full control over the expiration time and at the same time the amount of requests the URL would accept, a command as well as a way to generate them in my application’s codebase and have tested support for all current PHP and Laravel versions). Therefore I set out to create my own package, named Login Links for Laravel. In this post I will show you step by step how to use this in your own Laravel 6, 7 or 8 application.&lt;/p&gt;

&lt;p&gt;Lets go!&lt;/p&gt;

&lt;p&gt;Now I am not going to show you how to create a new Laravel application as there are tons of resources for that online.&lt;/p&gt;

&lt;p&gt;We start by requiring this package in our existing application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;composer require koost89/laravel-login-links
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once composer is happy with our decision to install the package, we can go ahead and publish the vendor files that come with Login Links for Laravel.&lt;br&gt;
First off: the migration, this is publishable by running the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan vendor:publish --provider="Koost89\LoginLinks\LoginLinkServiceProvider" --tag="login-links-migrations"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will publish the migrations needed for the package to operate. To give a bit of information as to why we need a table for the login links, its fairly simple. We need a way to store the URL, so we can monitor the amount of visits the URL has gotten (and dispose of it once it reaches it’s maximum amount of allowed clicks).&lt;/p&gt;

&lt;p&gt;Next up we need to actually execute the migration, this is done by running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create the &lt;code&gt;login_link_tokens&lt;/code&gt; table which we use to store the URL’s.&lt;/p&gt;

&lt;p&gt;After this we can (and you probably would want to) publish the config file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan vendor:publish --provider="Koost89\LoginLinks\LoginLinkServiceProvider" --tag="login-links-config"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The config file that was published in config/login-links.php contains a few niceties for you to configure, I’d suggest you take a look at them and edit them however you seem fit, but the default config should work just fine with one more step.&lt;/p&gt;

&lt;p&gt;In your &lt;code&gt;App\Models\User&lt;/code&gt; class or any other class that extends the Authenticatable contract you can add the trait: &lt;code&gt;Koost89\LoginLinks\Traits\CanLoginWithLink;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Your user (or other authenticatable) should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use Koost89\LoginLinks\Traits\CanLoginWithLink;
use Illuminate\Foundation\Auth\User as Authenticatable;

class User extends Authenticatable
{
    use CanLoginWithLink;    // the rest of your class
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this, you should be all set to start generating login links! Easy right?&lt;/p&gt;

&lt;p&gt;So lets start creating some links!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$user = User::first();
$url = $user-&amp;gt;generateLoginLink(); 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which should output the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://yourdomain.tld/uli?auth_id=1&amp;amp;auth_type=QXBwX01vZGVsc19Vc2Vy&amp;amp;expires=1626433419&amp;amp;signature=ce35c6244683813273382c151cb83fa1937b2c2be4e2e5cef3af486889ba5b16
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The URL contains a couple of key parts we need to identify the user type and identifier.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;auth_id&lt;/code&gt; is ofcourse our autenticatables identifier. This is what we use to fetch the instance of our authenticatable.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;auth_type&lt;/code&gt; is a base64-encoded string of our autenticatable classname. As in the example above the auth_type would decode to App_Models_User. By adding this to our URL we can get the correct guard from the given model, giving us great flexibility to create multiple authenticatable models with each having their own guard, while still being able to login with those guards.&lt;/p&gt;

&lt;p&gt;The expires and signature are generated by the temporarySignedUrl method provided by Laravel. To read more about SignedURL’s and how they protect against manipulation, please make sure to check out &lt;a href="https://laravel.com/docs/8.x/urls#signed-urls"&gt;Laravel’s documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ok back to the main course.&lt;/p&gt;

&lt;p&gt;There are alternative ways to generate a login URL, for example you can use the provided facade:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use Koost89\LoginLinks\Facades\LoginLink;

$user = User::first();
$link = LoginLink::generate($user);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or even with a console command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan login-links:generate 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the console command you can specify the identifier of your App\Models\User class or when you need a different authenticatable, you can specify that with the &lt;code&gt;--class=&lt;/code&gt; option&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan login-links:generate 1 --class=App\Models\Team
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you have visited the URL, you should log in as the specified user. If you haven’t changed any configuration, the URL is removed after the first login with that link. By default the URL expires after 120 seconds (2 minutes), but you can simply edit that in the config.&lt;/p&gt;

&lt;p&gt;When a URL is not clicked and expires, it isn’t automatically deleted from the database. To make sure your database stays nice and clean Laravel Login Links comes with a command you can run in your scheduler.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan login-links:cleanup
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command deletes all the existing and expired URL’s from your database and if you combine this with Laravel’s scheduler, it helps keeping things clean!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;protected function schedule(Schedule $schedule)
{
    $schedule-&amp;gt;command('login-links:cleanup')-&amp;gt;hourly();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now an additional wish for me was events, I’d like to know when links were being generated but also when they were used. To facilitate this I added both those events in this package.&lt;/p&gt;

&lt;p&gt;When you generate a URL, we fire the &lt;code&gt;LoginLinkGenerated&lt;/code&gt; event for you to listen to. This event receives the id and the class data for the user it was generated for.&lt;/p&gt;

&lt;p&gt;When you click the generated URL, the &lt;code&gt;LoginLinkUsed&lt;/code&gt; event is fired which contains the same id and class data. This way we can easily log the flows of our generated URL’s.&lt;/p&gt;

&lt;p&gt;While there are great alternatives to this package, I created this because I had very specific wishes for it and creating my own package worked out wonderfully. If you’d wish to read more about it, check it out on github: &lt;a href="https://github.com/koost89/laravel-login-links"&gt;Login Links for Laravel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for taking your time to read this post!&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>tutorial</category>
      <category>login</category>
    </item>
    <item>
      <title>What was your win this week?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 16 Jul 2021 18:27:19 +0000</pubDate>
      <link>https://dev.to/devteam/what-was-your-win-this-week-4ojf</link>
      <guid>https://dev.to/devteam/what-was-your-win-this-week-4ojf</guid>
      <description>&lt;p&gt;Hey there!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Looking back on your week, what was something you're proud of?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All wins count — big or small 🎉&lt;/p&gt;

&lt;p&gt;Examples of 'wins' include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a new project&lt;/li&gt;
&lt;li&gt;Fixing a tricky bug&lt;/li&gt;
&lt;li&gt;Getting a vaccine... or whatever else might spark joy ❤️ &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Congrats on your wins this week!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/26ybw7DGEFk8WhTPO/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/26ybw7DGEFk8WhTPO/giphy.gif" alt="Heart-shaped balloon"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>7 Awesome CSS Cards: 🎰 Cuphead Style ☕️ + (animation, pure CSS, tutorual)</title>
      <author>Roden</author>
      <pubDate>Fri, 16 Jul 2021 18:11:04 +0000</pubDate>
      <link>https://dev.to/kerthin/7-awesome-css-cards-cuphead-style-animation-pure-css-tutorual-44n0</link>
      <guid>https://dev.to/kerthin/7-awesome-css-cards-cuphead-style-animation-pure-css-tutorual-44n0</guid>
      <description>&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;A couple of years ago, I happened to play a game called &lt;strong&gt;Cuphead&lt;/strong&gt;. When I finished it, I thought that I would soon forget about it and switch to something else. But everything turned out to be wrong. I liked the style of this game so much that I didn't want to just forget about it. And so I decided to find a couple of &lt;code&gt;GIF&lt;/code&gt; images on the internet and create different kinds of &lt;code&gt;CSS Cards&lt;/code&gt; for them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Well, let's get down to the show.&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CCbwd2Zn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vg2mfhn9jn0e4tn5j5q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CCbwd2Zn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vg2mfhn9jn0e4tn5j5q.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;DEMO&lt;/h1&gt;

&lt;p&gt;For those who do not want to read the entire post, I can suggest taking a look at the finished project right away.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Astap/embed/OJmpxGp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;You can also download the project from my &lt;code&gt;GitHub repository&lt;/code&gt;. (There is also a demo on &lt;code&gt;GitHub Pages&lt;/code&gt;).&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Kerthin"&gt;
        Kerthin
      &lt;/a&gt; / &lt;a href="https://github.com/Kerthin/cuphead-templateSait"&gt;
        cuphead-templateSait
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Graphic cards in the style of the Cuphead video game.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/#"&gt;&lt;img width="100" src="https://res.cloudinary.com/practicaldev/image/fetch/s--2yOQigTO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/READMEimage/squirrelAppIcon.png" alt="Kerthin logo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/3aaee52aea7e26ea020e0c2bac3ea70c011c1cc0507999c2c8b91c121b7fe9ba/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6275696c642d70617373696e672d627269676874677265656e2e737667" alt="Build Status"&gt;&lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/9131d6ef04409049c328ce7a6f6a175e64f1374adac1f18ffaf89a8f2889e366/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f6d706c6574696f6e2d32302532352d6f72616e67652e737667" alt="completion Status"&gt;&lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/ace92ef25e6952f0f77c73e5169314c5c556ef62b59ca99b05d1b6a6fa9c08b9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76362e342e302d626c75652e737667" alt="Version"&gt;&lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/3cefcfb7445315bec657e476d97e481c4454c212aeba9b4750dedfb4210a1f1b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e6f64652d76392e342e302d626c75652e737667" alt="Version"&gt;&lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/b9df44101935d7d9d1a7473476819810c8e2aff9ccc0a172f9ebe3d01e94ea6f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f626f7765722d76312e382e342d626c75652e737667" alt="Version"&gt;&lt;/a&gt; &lt;br&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/8057bef1e1a6a5aa5bc62b252a0eaf471d3f8b5516da3db38c5c79daa8f83c01/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7265706f25323073697a652d3434302e382532304d422d677265656e2e737667" alt="Size"&gt;&lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/51a0fe3eb761a361596ff48ff1099dfd1088addcb441363fbe2dfff24bec2cd4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d696e69666965642532307265706f2d32302532304d422d677265656e2e737667" alt="Size"&gt;&lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/685b6b61f9e20199132631db1c422c1b44109707d8fdac9b87b74174e3b83cc1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70726f6a65637425323076657273696f6e2d76302e322d626c75652e737667" alt="Version"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;
Description&lt;/h2&gt;
&lt;p&gt;This site is an example of work created specifically for the portfolio. If you want to take a look at it, then you can follow the link given below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kerthin.github.io/cuphead-templateSait/" rel="nofollow"&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
Use technology.&lt;/h4&gt;
&lt;p&gt;The following technologies were used to create this project:&lt;/p&gt;
&lt;h3&gt;
Task-Manager&lt;/h3&gt;
&lt;p&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/#"&gt;
    &lt;img width="160px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--_P5-dr4u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/READMEimage/gulp.svg"&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;h3&gt;
Software platform&lt;/h3&gt;
&lt;p&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/#"&gt;
    &lt;img width="260px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--xNVlXWBH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/READMEimage/nodejs-1.svg"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;
Preprocessors&lt;/h3&gt;

&lt;p&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/#"&gt;
    &lt;img width="144px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tXfRh6mh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/READMEimage/pug.svg"&gt;
  &lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/#"&gt;
    &lt;img width="144px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zt6gfEqW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/READMEimage/sass-1.svg"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;
Libraries&lt;/h3&gt;
&lt;h3&gt;
Package manager&lt;/h3&gt;

&lt;p&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/#"&gt;
    &lt;img width="144px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tPHhnmso--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/cuphead-templateSait/master/READMEimage/npm.svg"&gt;
  &lt;/a&gt;
&lt;/p&gt;


&lt;h2&gt;
Plugins&lt;/h2&gt;
&lt;p&gt;To develop the project through gulp, I used the following types of NPM plugins:&lt;/p&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Plugin&lt;/th&gt;
&lt;th&gt;Status&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-sourcemaps" rel="nofollow"&gt;gulp-sourcemaps&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-sourcemaps" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/528a1ebd364b693bb3d0101b0673c41e655019ffd2f9bdc0d1d6ee92e2641899/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76322e362e342d626c75652e737667" alt="gulp-sourcemaps-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Intended for generation of &lt;code&gt;css source maps&lt;/code&gt; which will be necessary at debugging of a code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-imagemin" rel="nofollow"&gt;gulp-imagemin&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-imagemin" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/711705519071329822e444430727735680a0559653d21c428730d5f74dacef31/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76342e312e302d626c75652e737667" alt="gulp-imagemin-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Minify &lt;code&gt;PNG&lt;/code&gt;, &lt;code&gt;JPEG&lt;/code&gt;, &lt;code&gt;GIF&lt;/code&gt; and &lt;code&gt;SVG&lt;/code&gt; images with &lt;code&gt;imagemin&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-autoprefixer" rel="nofollow"&gt;gulp-autoprefixer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-autoprefixer" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/98049dfc0610712ebdfca9ffac989e2d2b0693eec4fd386e15242b7eeec66552/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76362e302e302d626c75652e737667" alt="gulp-autoprefixer-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Prefix &lt;code&gt;CSS&lt;/code&gt; with &lt;code&gt;Autoprefixer&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/imagemin-pngquant" rel="nofollow"&gt;imagemin-pngquant&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/imagemin-pngquant" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/98049dfc0610712ebdfca9ffac989e2d2b0693eec4fd386e15242b7eeec66552/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76362e302e302d626c75652e737667" alt="imagemin-pngquant-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;Pngquant imagemin&lt;/code&gt; plugin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-uglify" rel="nofollow"&gt;gulp-uglify&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-uglify" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b2b4a07c63198d7e5f42f3b13e24079c5ffbc9c3527a41f9179a171d7f0e4f0f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76332e302e312d626c75652e737667" alt="gulp-uglify-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Minify &lt;code&gt;JavaScript&lt;/code&gt; with &lt;code&gt;UglifyJS3&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-rigger" rel="nofollow"&gt;gulp-rigger&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-rigger" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/503c5942f276fc051f3b969da0dbaaf76a0aa9bb080825ceafda298f5fb986fa/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76302e352e382d626c75652e737667" alt="gulp-rigger-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;Rigger&lt;/code&gt; is a build time include engine for &lt;code&gt;Javascript&lt;/code&gt;, &lt;code&gt;CSS&lt;/code&gt;, &lt;code&gt;CoffeeScript&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-clean-css" rel="nofollow"&gt;gulp-minify-css&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-clean-css" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b4d51093e94d643642cc5875f38df3914480590a4cc9720463e6c100ad1a203d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76332e31302e302d626c75652e737667" alt="gulp-minify-css-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;Gulp&lt;/code&gt; plugin to minify &lt;code&gt;CSS&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/rimraf" rel="nofollow"&gt;rimraf&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/rimraf" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/cfbb87eb7037ab4f0aa7470555d074f84bb49b210d547a680b7b75d9608432bb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76322e362e322d626c75652e737667" alt="rimraf-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;UNIX&lt;/code&gt; command &lt;code&gt;rm&lt;/code&gt; &lt;code&gt;-rf&lt;/code&gt; for node.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-watch" rel="nofollow"&gt;gulp-watch&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-watch" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ac8499db04cba84bee8f0e495626d8be65ee98015cda17685ecd617944488313/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76352e302e312d626c75652e737667" alt="gulp-watch-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;File watcher that uses super-fast chokidar and emits vinyl&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;…&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Kerthin/cuphead-templateSait"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;a href="https://kerthin.github.io/cuphead-templateSait/"&gt;&lt;h1&gt;Full Page Demo (GitHub Pages)&lt;/h1&gt;&lt;/a&gt;
&lt;/blockquote&gt;

&lt;h1&gt;01. Ribby 🥊&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/Jn8pTpBM5Iz2M9Mond/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Jn8pTpBM5Iz2M9Mond/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
The first card is dedicated to one of the first bosses in the game, a combat toad named &lt;strong&gt;Ribby&lt;/strong&gt;. This card is made in the video of a boxing ring (you can see the tight ropes in the background).&lt;/p&gt;

&lt;p&gt;When creating this card, simple geometric shapes such as triangles and cubes were used. You can edit each element on the card as you like (&lt;code&gt;color&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;font&lt;/code&gt;, &lt;code&gt;etc.&lt;/code&gt;).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;This also applies to other cards.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/cwhflD8kopt80HH9td/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/cwhflD8kopt80HH9td/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;02. Croaks 🥊&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/NAFFX3Pbfprnlz0xKI/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/NAFFX3Pbfprnlz0xKI/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Croaks&lt;/code&gt; is another of the bosses in the game, who is the brother of Ribby. During the battle, they are together and you need to resist their joint blows.&lt;/p&gt;

&lt;p&gt;The card consists of simple elements. There is also a gradient in the background, which forms a &lt;code&gt;brick wall&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/B3ur4Kf89L2a2YHWEE/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/B3ur4Kf89L2a2YHWEE/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;03. Chauncey Chantenay 🥕&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/luPz5LZM5cgKpbQS7q/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/luPz5LZM5cgKpbQS7q/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Chauncey Chantenay&lt;/code&gt; is a large, anthropomorphic orange carrot with lanky arms and yellow and white eyes.&lt;/p&gt;

&lt;p&gt;The design of this card is completely formed by fonts.&lt;/p&gt;

&lt;p&gt;There are also cubes that you could see in the &lt;code&gt;first card&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/Fh8es18SqnyUMV0kK7/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Fh8es18SqnyUMV0kK7/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;04. Cuphead ☕️&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/ghn1lsad75dPWb9tA0/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ghn1lsad75dPWb9tA0/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A simple, but at the same time very good card, which depicts the main character of the game Cuphead.&lt;/p&gt;

&lt;h1&gt;05. Cagney Carnation 🌸&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/62sCc3Yy10j2mFc6D1/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/62sCc3Yy10j2mFc6D1/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Cagney&lt;/code&gt; is sneaky. He seems to delight in catching his enemies off guard with his appearance, posing as a harmless and adorable flower before roaring loudly and showing his true colors.&lt;/p&gt;

&lt;p&gt;This card uses several triangles, inside of which animated linear gradients are placed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/f4d9WaUnsk3U3fysxd/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/f4d9WaUnsk3U3fysxd/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;06. King Dice 🎰&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/GLu13AMcNLQ7reC31k/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/GLu13AMcNLQ7reC31k/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;King Dice&lt;/code&gt; is the right-hand man of the &lt;code&gt;Devil&lt;/code&gt; and the secondary antagonist of Cuphead.&lt;/p&gt;

&lt;p&gt;The card consists of the simplest elements with images of the character.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/2kLFo7APHKBU7W4ZVy/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/2kLFo7APHKBU7W4ZVy/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;07. King Dice: Casino 🎰&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/gHCoFYjLazcl7vB3NA/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/gHCoFYjLazcl7vB3NA/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The most difficult card in its implementation. The card is an implementation of one of the &lt;code&gt;last levels&lt;/code&gt; of the game, which is made in the form of a &lt;code&gt;roulette table&lt;/code&gt; on which you can place your bets.&lt;/p&gt;

&lt;p&gt;The most difficult thing in this card was to &lt;code&gt;create a table&lt;/code&gt; on which the &lt;code&gt;King Dice&lt;/code&gt; character relies.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To create it, I used a &lt;code&gt;gradient&lt;/code&gt; that forms the illusion of soft upholstery for the table surface. There is also a chain of &lt;code&gt;lots&lt;/code&gt;, each of which you can edit separately as you like.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/hsAUE7XOIjUFz3MgvR/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/hsAUE7XOIjUFz3MgvR/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It was also necessary to make a playing table surface on which the main character would run. After creating it, it was necessary to create a perspective for the surface, which affected the depth of the image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/itnoKSUBQ31B9PerIV/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/itnoKSUBQ31B9PerIV/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;For me, this was a purely creative project, I did not try to create something insanely complex in order to impress someone. Just being impressed by the style of the &lt;code&gt;Cuphead&lt;/code&gt; game, I decided to create these cards.&lt;/p&gt;

&lt;h1&gt;The End&lt;/h1&gt;

&lt;p&gt;Thank you for paying attention to my post. You can also follow me on &lt;a href="https://twitter.com/BelichenkoRoden"&gt;&lt;strong&gt;Twitter&lt;/strong&gt;&lt;/a&gt;, where I also publish many of my works.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Goodbye&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/QC1pIBes52h663IwTN/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/QC1pIBes52h663IwTN/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>Developer Interview Tips: what clients look for</title>
      <author>Taylor Veino</author>
      <pubDate>Fri, 16 Jul 2021 18:02:32 +0000</pubDate>
      <link>https://dev.to/gunio/developer-interview-tips-what-clients-look-for-2b6d</link>
      <guid>https://dev.to/gunio/developer-interview-tips-what-clients-look-for-2b6d</guid>
      <description>&lt;p&gt;We’ve hosted 283 virtual interviews with freelance developers and prospective clients just within the last 7 months. So, we’ve had a front-row seat to the good, the bad, and the ugly when it comes to interviewing. We’ve taken notes along the way on the most common things clients look for in candidates, and we’ve distilled these into proven interview tips that helped freelance developers &lt;a href="https://bit.ly/3rdxnSh"&gt;get hired&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#presentation"&gt;
  &lt;/a&gt;
  Presentation
&lt;/h2&gt;

&lt;p&gt;How you visually present yourself is the first thing clients notice in an interview. It’s a key indicator for how you’ll represent their company and it sets the tone for the rest of the interview. In our experience, we know the minute we see a freelancer’s video how the interview is going to go. &lt;/p&gt;

&lt;p&gt;In most cases, If a candidate’s video looks like a cutscene from Dungeons &amp;amp; Dragons with low lighting and a cluttered frame, their interview doesn’t end in a hire.&lt;/p&gt;

&lt;p&gt;The most successful interviews we’ve seen are with candidates who:&lt;/p&gt;

&lt;p&gt;Position their camera near an adequate light source or window&lt;/p&gt;

&lt;p&gt;Already have their audio and video turned on before the client joins&lt;/p&gt;

&lt;p&gt;Wear a business casual top (the bottoms are fair game).&lt;/p&gt;

&lt;p&gt;Choose a blank wall, clean room, or a professional Zoom background as their backdrop. &lt;/p&gt;

&lt;p&gt;The better clients can see the way you present yourself and your workspace without distractions, the easier it is for them to visualize how you’ll fit into their team. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alignment"&gt;
  &lt;/a&gt;
  Alignment
&lt;/h2&gt;

&lt;p&gt;Every interview usually starts with some variation of this prompt: Tell me about yourself. It’s common for candidates to respond with a reiterated version of their resume, but it’s a missed opportunity to win over a client by articulating real-world examples of how you can provide value.&lt;/p&gt;

&lt;p&gt;When clients propose that prompt in an interview, they’re looking for answers to a layered inquiry about current experience, interests, and examples of work that they can use to see where you align with their project goals.&lt;/p&gt;

&lt;p&gt;The best responses we’ve heard from freelance developers simply use that prompt as a cue to talk about: &lt;/p&gt;

&lt;p&gt;The latest project they worked on, and what aspects of their involvement made it a success.&lt;/p&gt;

&lt;p&gt;The type of projects they’re most passionate about because of a particular social impact.&lt;/p&gt;

&lt;p&gt;The technology they’re currently interested in and how they have implemented it into their workflow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interest"&gt;
  &lt;/a&gt;
  Interest
&lt;/h2&gt;

&lt;p&gt;When a client views your resume and extends an invitation for an interview, they’re expressing interest in you as a potential candidate, and they’ll be looking for ways to gauge your interest during the interview. As a freelance developer, the best way you can express your interest to a potential client is in the questions you ask them. &lt;/p&gt;

&lt;p&gt;In our experience, the most successful freelance developers make a point to ask clients questions about the role, their team, and the company during the initial interview. Leave out questions about pay, billing, or budget for the last interview if you’re working solo, or if you’re &lt;a href="https://bit.ly/3xKOltv"&gt;freelancing on the Gun.io platform&lt;/a&gt;, chat directly with your Gun.io rep about it.&lt;/p&gt;

&lt;p&gt;Here are some A+ examples to express interest in:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The role:&lt;/strong&gt; &lt;br&gt;
Ask: What will onboarding look like?&lt;/p&gt;

&lt;p&gt;What the client hears: This role sounds like something I’d be a good fit for! Where can I provide value first?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The team:&lt;/strong&gt;&lt;br&gt;
Ask: Who will I be working with on the team?&lt;/p&gt;

&lt;p&gt;What the client hears: I’m excited to work with existing team members on this project, what will that collaboration look like?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The company:&lt;/strong&gt;&lt;br&gt;
Ask: What are your company goals this year?&lt;/p&gt;

&lt;p&gt;What the client hears: This project sounds really interesting, how will my work directly impact the overall company goals?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#transparency"&gt;
  &lt;/a&gt;
  Transparency
&lt;/h2&gt;

&lt;p&gt;No one wants their time wasted, so being transparent about your availability and the time you’re willing to put into a client’s project is crucial to establishing trust and marketing yourself as a dependable team member.&lt;/p&gt;

&lt;p&gt;We’ve seen freelancers try to overextend their availability to make a client’s full-time project work, while they’re already billing 40 hours per week on another engagement. Ultimately, you’re spreading yourself too thin, and the client you’re interviewing with will be apprehensive to hire you if they know their project won’t be prioritized.&lt;/p&gt;

&lt;p&gt;Ready to put these developer interview tips to work? We have tons of clients looking to hire freelance software developers now, and we’ll be there to help you along the way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://bit.ly/3xKOltv"&gt;Join Gun.io&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>devrel</category>
      <category>freelancing</category>
      <category>careertips</category>
    </item>
    <item>
      <title>Reminder — All CodeLand Talk Proposals Due by Tuesday, July 20th @ 11:59 PM UTC </title>
      <author>Ben Halpern</author>
      <pubDate>Fri, 16 Jul 2021 17:52:52 +0000</pubDate>
      <link>https://dev.to/devteam/reminder-all-codeland-talk-proposals-due-by-tuesday-july-20th-11-59-pm-utc-1jmp</link>
      <guid>https://dev.to/devteam/reminder-all-codeland-talk-proposals-due-by-tuesday-july-20th-11-59-pm-utc-1jmp</guid>
      <description>&lt;h3&gt;
  &lt;a href="#ill-keep-this-reminder-short-and-sweet-the-codeland-2021-callforproposals-cfp-closes-in-just-a-few-days"&gt;
  &lt;/a&gt;
  I’ll keep this reminder short and sweet: the CodeLand 2021 Call-For-Proposals (CFP) closes in just a few days!

&lt;/h3&gt;

&lt;p&gt;Hosted by DEV and &lt;a href="https://community.codenewbie.org"&gt;CodeNewbie&lt;/a&gt;, &lt;a href="https://codelandconf.com"&gt;CodeLand&lt;/a&gt; is the most welcoming conference for early-career developers and their champions. &lt;/p&gt;

&lt;p&gt;This year, CodeLand will be taking place &lt;em&gt;virtually&lt;/em&gt; from September 23-24, 2021 – we’re excited to welcome speakers and attendees from all over the globe. &lt;/p&gt;

&lt;p&gt;If you’ve been considering submitting a talk, now is your chance ⏰&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#read-more-details-on-the-codeland-cfp-here-by-this-tuesday-1159-pm-utc"&gt;
  &lt;/a&gt;
  Read more details on the CodeLand CFP &lt;a href="https://community.codenewbie.org/codenewbie/reminder-submit-your-codeland-talk-proposals-by-tuesday-july-20th-163l"&gt;here&lt;/a&gt; by this Tuesday @ 11:59 PM UTC.
&lt;/h2&gt;




&lt;h2&gt;
  &lt;a href="#submit-your-talk-here"&gt;
  &lt;/a&gt;
  Submit your talk &lt;a href="https://cfp.codelandconf.com/events/codeland-2021"&gt;here&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We hope to see a CodeLand 2021 talk proposal from you 🌈 &lt;/p&gt;

</description>
      <category>codeland</category>
      <category>codenewbie</category>
      <category>meta</category>
    </item>
  </channel>
</rss>
