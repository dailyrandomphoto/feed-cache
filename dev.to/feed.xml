<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Pandas Concepts: Introduction</title>
      <author>Kathan Vakharia</author>
      <pubDate>Thu, 17 Jun 2021 23:56:39 +0000</pubDate>
      <link>https://dev.to/kathanvakharia/pandas-concepts-introduction-4n64</link>
      <guid>https://dev.to/kathanvakharia/pandas-concepts-introduction-4n64</guid>
      <description>&lt;h2&gt;
  &lt;a href="#my-assumptions-before-you-continue"&gt;
  &lt;/a&gt;
  My Assumptions before you continue...
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You know basic data structures(&lt;code&gt;list&lt;/code&gt;, &lt;code&gt;dict&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt;) in python.&lt;/li&gt;
&lt;li&gt;You are familiar with NumPy Basics. If not, check out my &lt;a href="https://colab.research.google.com/drive/1LfnZfuwNhFqiNBNDhUdAtVjAc44eyduG?usp=sharing"&gt;colab&lt;/a&gt; notebook where I have explained it from the ground up :)&lt;/li&gt;
&lt;li&gt;You have already setup your Data Science environment.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-pandas-if-we-already-have-numpy"&gt;
  &lt;/a&gt;
  Why Pandas if we already have NumPy?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Numpy has the following limitations:

&lt;ul&gt;
&lt;li&gt;No support for column names.&lt;/li&gt;
&lt;li&gt;datatype of all elements must be the same.&lt;/li&gt;
&lt;li&gt;No pre-built methods for common analysis tasks.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Pandas can handle a large amount of data at ease!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pandas&lt;/strong&gt; library overcomes the limitations of &lt;strong&gt;NumPy&lt;/strong&gt;, and sometimes it is also referred to as a &lt;strong&gt;swis army knife&lt;/strong&gt; of Data Analysis!&lt;/p&gt;

&lt;p&gt;And don't you worry about losing the &lt;strong&gt;vectorization&lt;/strong&gt; power, &lt;strong&gt;Pandas&lt;/strong&gt; is built upon &lt;strong&gt;NumPy&lt;/strong&gt; so internally, it makes use of &lt;strong&gt;NumPy&lt;/strong&gt; code extensively!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wuX8_G-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/as7q7yglo9df9lty0a9a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wuX8_G-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/as7q7yglo9df9lty0a9a.png" alt="image"&gt;&lt;/a&gt;By the way, the above image is &lt;strong&gt;not&lt;/strong&gt; an over-exaggeration of pandas' capabilities!&lt;/p&gt;

&lt;p&gt;Enough of the theory, let me show you some code otherwise you might leave this blog üòõ So fire up your Jupyter notebook/lab or whatever IDE you use for Data Science and let's start!&lt;/p&gt;

&lt;p&gt;Lastly, we are going to use a dataset on &lt;em&gt;pokemon&lt;/em&gt; to keep things fun and interesting üê¨ You can find it on &lt;a href="https://www.kaggle.com/mariotormo/complete-pokemon-dataset-updated-090420"&gt;kaggle&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#introducing-the-pandas-dataframe"&gt;
  &lt;/a&gt;
  Introducing the Pandas Dataframe
&lt;/h2&gt;

&lt;p&gt;It is the primary data structure provided by &lt;code&gt;pandas&lt;/code&gt;. Formally, a &lt;code&gt;Dataframe&lt;/code&gt; is a 2-Dimensional labeled tabular data structure. It is a &lt;strong&gt;2D&lt;/strong&gt; NumPy array on steroids üí™üèª in a way. &lt;/p&gt;

&lt;p&gt;Here's how you read a CSV file as a pandas &lt;code&gt;Dataframe&lt;/code&gt; by passing the file path to the &lt;code&gt;read_csv()&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#it's a convention to import pandas as 'pd'
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;

&lt;span class="c1"&gt;#read a dataset on pokemon stats
&lt;/span&gt;&lt;span class="n"&gt;pokemon_stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"pokemon_stats.csv"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pokemon_stats&lt;/span&gt; &lt;span class="c1"&gt;#since it's jupyternotebook, no need of print
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zZC1RQk8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/isknhe6cvirdnvhf6tla.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zZC1RQk8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/isknhe6cvirdnvhf6tla.png" alt="image"&gt;&lt;/a&gt;üí° The file path can be &lt;strong&gt;relative&lt;/strong&gt; or &lt;strong&gt;absolute&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You will see a table of this sort in your jupyter notebook. (Not all the rows(1028) and columns(51) so that your entire screen is not occupied!)&lt;/p&gt;

&lt;p&gt;There's also a &lt;code&gt;read_excel()&lt;/code&gt; function if your dataset is in excel spreadsheet form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#read excel file as a dataframe
&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_excel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"path/to/my_dataset.xlsx"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üóíÔ∏è whenever I say &lt;code&gt;df&lt;/code&gt;, I am referring to &lt;code&gt;Dataframe&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#displaying-first-and-last-few-rows"&gt;
  &lt;/a&gt;
  Displaying first and last few rows
&lt;/h2&gt;

&lt;p&gt;It is a common practice to have a quick glance at some rows from beginning or end. &lt;br&gt;
For this, we have &lt;code&gt;df.head(n=5)&lt;/code&gt; and &lt;code&gt;df.tail(n=5)&lt;/code&gt; methods where &lt;code&gt;n&lt;/code&gt; is &lt;em&gt;number of rows&lt;/em&gt; to display and its default value is 5.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#display first four rows
&lt;/span&gt;&lt;span class="n"&gt;pokemon_stats&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bx5BJLcd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/naigxvvolmoml5cr7hf9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bx5BJLcd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/naigxvvolmoml5cr7hf9.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#display last four rows
&lt;/span&gt;&lt;span class="n"&gt;pokemon_stats&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iX50dXdv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jw3zyx37mga0515v2ejb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iX50dXdv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jw3zyx37mga0515v2ejb.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll go into the anatomy of &lt;code&gt;Dataframe&lt;/code&gt; in the next post. You will get to know that it's more than just a table. Until then, enjoy data science!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus-where-pandas-shine"&gt;
  &lt;/a&gt;
  Bonus: Where Pandas shine üåü
&lt;/h3&gt;

&lt;p&gt;It is useful whenever the data is &lt;strong&gt;structured&lt;/strong&gt; - data stored in CSV files, excel files, database tables, or simply whenever there is a notion of &lt;em&gt;rows&lt;/em&gt; and &lt;em&gt;columns&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;‚ö†Ô∏è There was a bit of jargon involved in the explanations but don't worry we are going to visit these concepts again and again in forthcoming posts :)&lt;/p&gt;

</description>
      <category>python</category>
      <category>datascience</category>
      <category>codenewbie</category>
      <category>pandas</category>
    </item>
    <item>
      <title>How does Virtual DOM work? (Build your own)</title>
      <author>Aiden Bai</author>
      <pubDate>Thu, 17 Jun 2021 23:09:44 +0000</pubDate>
      <link>https://dev.to/aidenybai/how-does-virtual-dom-work-b74</link>
      <guid>https://dev.to/aidenybai/how-does-virtual-dom-work-b74</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Plug: I help develop &lt;a href="https://github.com/millionjs/million"&gt;&lt;code&gt;million&lt;/code&gt;&lt;/a&gt;: &amp;lt;1kb virtual DOM - it's fast!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;The virtual DOM is a tree of virtual nodes that represents what the DOM looks like. virtual nodes are light, stateless, and are JavaScript objects that only contain necessary fields. virtual nodes can be assembled into trees, and "diffed" to make pinpoint changes to the DOM.&lt;/p&gt;

&lt;p&gt;The reasoning behind this is because modification and access of DOM nodes is computationally expensive. A diff between virtual nodes, accessing the DOM only for modification, is the premise of virtual DOM. It avoids the DOM as much as possible, favoring plain JavaScript objects instead, making reading and writing much cheaper.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;p&gt;The Million virtual DOM contains three main functions: &lt;code&gt;m&lt;/code&gt;, &lt;code&gt;createElement&lt;/code&gt;, &lt;code&gt;patch&lt;/code&gt;. To completely understand how virtual DOM works, let's try and create our own rudimentary virtual DOM based off of these functions (&lt;strong&gt;~7 minutes read time&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Before we start, we need to define what a virtual node is. A virtual node can either be a JavaScript object (virtual element) or a string (text).&lt;/p&gt;




&lt;p&gt;The &lt;code&gt;m&lt;/code&gt; function is a helper function that creates virtual elements. A virtual element contains three properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;tag&lt;/code&gt;: which stores the tag name of the element as a string.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;props&lt;/code&gt;: which stores the properties/attributes of the element as an object.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;children&lt;/code&gt;: which stores virtual node children of the element as an array.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example implementation of the &lt;code&gt;m&lt;/code&gt; helper function is below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way, we can construct virtual nodes easily:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="c1"&gt;// Is the same as:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;The &lt;code&gt;createElement&lt;/code&gt; function turns a virtual node into a real DOM element. This is important because we'll be using this in our &lt;code&gt;patch&lt;/code&gt; function and the user may also use it to initialize their application.&lt;/p&gt;

&lt;p&gt;We'll need to programmatically create a new detached DOM element, then iterate over the virtual element props while adding them to the DOM element, and finally iterating over the children, initialling them as well. An example implementation of the &lt;code&gt;createElement&lt;/code&gt; helper function is below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;vnode&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;vnode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Catch if vnode is just text&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way, we can convert virtual nodes to DOM elements easily:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
&lt;span class="c1"&gt;// Is the same as: &amp;lt;div id="app"&amp;gt;Hello World&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;The &lt;code&gt;patch&lt;/code&gt; function takes an existing DOM element, old virtual node, and new virtual node. This won't necessarily be the most performant implementation, but this is just for demonstration purposes.&lt;/p&gt;

&lt;p&gt;We'll need to diff the two virtual nodes, then replace out the element when needed. We do this by first determining whether one of the virtual nodes is a text, or a string, and replacing it if the old and new virtual nodes do not equate each other. Otherwise, we can safely assume both are virtual elements. After that, we diff the tag and props, and replace the element if the tag has changed. We then iterate over the children and recursively patch if a child is a virtual element. An example implementation of the &lt;code&gt;patch&lt;/code&gt; helper function is below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;patch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oldVNode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newVNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;replace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replaceWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newVNode&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;newVNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;oldVNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newVNode&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="c1"&gt;// Handle text case&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;oldVNode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;newVNode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oldVNode&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;newVNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Diff tag&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oldVNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;newVNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// Diff props&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;oldVNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;oldVNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;?[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;newVNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;?[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// Diff children&lt;/span&gt;
    &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oldVNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;?[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;newVNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;?[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way, we can patch DOM elements based on virtual nodes easily:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oldVNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newVNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Goodbye World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oldVNode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oldVNode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newVNode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// el will become: &amp;lt;div id="app"&amp;gt;Goodbye World&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The old virtual node must always model the DOM element until after it is patched.&lt;/li&gt;
&lt;li&gt;Generally speaking, applications aren't directly written with these methods, rather they should be abstracted out into components and JSX for simplicity.&lt;/li&gt;
&lt;li&gt;This is not the same as Million's implementation, rather it is a demonstration to better allow you to understand how the virtual DOM works.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#so-whats-unique-about-million-then"&gt;
  &lt;/a&gt;
  So... What's unique about Million then?
&lt;/h2&gt;

&lt;p&gt;Million provides five major improvements: granular patching, fewer iterative passes, fast text interpolation, keyed virtual nodes, compiler flags.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Granular patching:&lt;/strong&gt; Instead of just replacing the entire element when there is a difference in props or children, only the necessary props are changed.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fewer iterative passes:&lt;/strong&gt; Million attempts to reduce the amount of passes during diffing, allowing for better time and space complexity.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fast text interpolation:&lt;/strong&gt; Instead of replacing text nodes with DOM methods, Million uses compiler flags to set the &lt;code&gt;textContent&lt;/code&gt; of elements to boost performance.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Keyed virtual elements:&lt;/strong&gt; This allows for the patching algorithm to skip nodes if the new virtual element key is the same as the old one, minimizing the amount of unnecessary work.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Compiler Flags:&lt;/strong&gt; This allows for the patching algorithm to skip condition branches, meaning less work is done.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>typescript</category>
      <category>react</category>
    </item>
    <item>
      <title>Data Structures in Typescript - Stack</title>
      <author>Ricardo Borges</author>
      <pubDate>Thu, 17 Jun 2021 22:58:26 +0000</pubDate>
      <link>https://dev.to/ricardo93borges/data-structures-in-typescript-stack-1h35</link>
      <guid>https://dev.to/ricardo93borges/data-structures-in-typescript-stack-1h35</guid>
      <description>&lt;p&gt;A stack uses LIFO (last-in-first-out) ordering, the most recent item added is the first item to be removed, just like a real stack.&lt;br&gt;
Some uses of this data structure are expressions evaluations and conversion (prefix, postfix, and infix), backtracking, and memory management.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BKCHctW---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1622906576/data%2520structures/stack_rccvuz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BKCHctW---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1622906576/data%2520structures/stack_rccvuz.png" alt="stack"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#representation"&gt;
  &lt;/a&gt;
  Representation
&lt;/h3&gt;

&lt;p&gt;A stack can be implemented using an array or a linked list, can be either fixed or dynamic size.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#basic-operations"&gt;
  &lt;/a&gt;
  Basic operations
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Push&lt;/strong&gt; - Add an item to the top of the stack&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Pop&lt;/strong&gt; - Remove the top item from the stack&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Peek&lt;/strong&gt; - Return the top of the stack, without removing it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;isEmpty&lt;/strong&gt; - Return true if the stack is empty.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;isFull&lt;/strong&gt; - Return true if the stack is full, used when the stack is fixed size.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's an implementation of a stack using an array, in Typescript an array doesn't have a fixed length, so the operation &lt;strong&gt;isFull&lt;/strong&gt; is not required, however you can implement a stack with a fixed length and use that operation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="na"&gt;array&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EmptyStackException&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;peek&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EmptyStackException&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>datastructures</category>
      <category>typescript</category>
      <category>stack</category>
    </item>
    <item>
      <title>How a Single Mathematical question lead to the Invention of Modern Computers? </title>
      <author>Danyson</author>
      <pubDate>Thu, 17 Jun 2021 22:38:49 +0000</pubDate>
      <link>https://dev.to/danyson/how-a-single-mathematical-question-lead-to-the-invention-of-modern-computers-2087</link>
      <guid>https://dev.to/danyson/how-a-single-mathematical-question-lead-to-the-invention-of-modern-computers-2087</guid>
      <description>&lt;p&gt;In early 1900s German Mathematician David Hilbert put forward a question : &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-mathematics-decidable"&gt;
  &lt;/a&gt;
  is Mathematics "Decidable"?
&lt;/h3&gt;

&lt;p&gt;Which means "is there an Algorithm that can always determine whether a statement follows the axioms?"&lt;/p&gt;

&lt;p&gt;In 1936 Alan Turing answered this question by inventing the Modern Computer, the Turing Machine. &lt;/p&gt;

&lt;p&gt;He ran his famous "Halting problem" on his Turing Machine to check whether a program will halt or not on a particular input. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#turing-found-out-his-halting-problem-and-hilberts-decidablity-problem-are-similar"&gt;
  &lt;/a&gt;
  Turing found out his Halting Problem and Hilbert's Decidablity Problem are similar.
&lt;/h3&gt;

&lt;p&gt;But results came to Turing such that there is no way to tell in general, if a Turing machine will halt or not on a given input. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#this-experiment-by-turing-answered-that-mathematics-is-undecidable"&gt;
  &lt;/a&gt;
  This experiment by Turing answered that "Mathematics is Undecidable".
&lt;/h3&gt;

&lt;p&gt;The beauty here is that a visionary question from a Mathematician gave an idea to Turing to Invent the Modern Computer that we use today. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#because-you-know-all-the-computers-are-turing-machines-and-all-the-programming-languages-are-in-fact-turing-complete"&gt;
  &lt;/a&gt;
  Because you know all the computers are Turing Machines and all the  programming languages are in fact Turing complete.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#before-the-invention-of-modern-computers-computers-were-actually-humans"&gt;
  &lt;/a&gt;
  Before the invention of Modern Computers, Computers were actually Humans.
&lt;/h3&gt;

&lt;p&gt;What? Humans? Yes. To say precisely, they are Women. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yes-women-mathematical-geniuses-tend-to-do-all-the-computation-works-and-calculations-manually"&gt;
  &lt;/a&gt;
  Yes, Women Mathematical geniuses tend to do all the computation works and calculations manually.
&lt;/h3&gt;

&lt;p&gt;And it was Turing who replaced them with Machines.&lt;/p&gt;

&lt;p&gt;Personal blog @ &lt;a href="https://danyson.github.io"&gt;danyson.github.io&lt;/a&gt; &lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>programming</category>
    </item>
    <item>
      <title>5 things to do when NOT writing code...</title>
      <author>Carl Wills</author>
      <pubDate>Thu, 17 Jun 2021 21:38:24 +0000</pubDate>
      <link>https://dev.to/carlmobiledev/5-things-to-do-when-not-writing-code-5fmp</link>
      <guid>https://dev.to/carlmobiledev/5-things-to-do-when-not-writing-code-5fmp</guid>
      <description>&lt;p&gt;As programmers, we love to code! That's what we do, and it's a big part of our lives. But it's not all that we do, and it's not all that we &lt;em&gt;should&lt;/em&gt; do as coders. Here are five things that I think everybody that writes code should do when they are not coding to keep themselves sharp and to continue learning.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-talk-about-code"&gt;
  &lt;/a&gt;
  1. Talk about code
&lt;/h3&gt;

&lt;p&gt;Yes! Talk about code, frameworks, libraries, algorithms, anything that helps you learn more about what you are working on. I think as programmers we often get caught up in the typing of code and lose our skills in other ways to communicate about it. One of the most important skills in our toolset is being able to communicate and explain technology, code, or high level strategy that we are using when solving complex problems. Talking about code helps enforce these skills and even helps us figure out which topics we need to brush up on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-look-at-code-other-people-wrote"&gt;
  &lt;/a&gt;
  2. Look at code other people wrote
&lt;/h3&gt;

&lt;p&gt;There's soooo many benefits to reading other people's code. Everybody has small little intricate differences when they write code that can be fun to explore and enhance your understanding of how the language works. You might notice some cool new functions you've never noticed before. You may stumble on a pattern that they use that you could easily implement into your project to make it cleaner or more simple. You may even find some mistakes! Reading code other people wrote is a great exercise in checking your level of understanding. It's not easy to jump into a new repository and start understanding what's going on, but by taking some time to explore unknown territory, you'll pick up on a lot!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-read"&gt;
  &lt;/a&gt;
  3. Read
&lt;/h3&gt;

&lt;p&gt;Read a book, I dare you! You might even enjoy it! Many programmers enjoy doing what they do because it is a very focused, heavy brain-power job. If that's you, &lt;em&gt;or if you simply like a good story&lt;/em&gt; pick up a book and give it a read. You'll find that doing a quiet solitary task can be really refreshing, especially with all the video calls we are all on &lt;strong&gt;constantly&lt;/strong&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-pick-up-a-hobby"&gt;
  &lt;/a&gt;
  4. Pick up a hobby
&lt;/h3&gt;

&lt;p&gt;Programmers are, in general, great problem solvers. That means that they are naturally clever, creative people. Pick up a hobby that helps get that creativity out! This can be anything from learning a musical instrument, to going out and geocaching. Finding a hobby that you love can be a great way to redirect your focus away from your code and simply let your brain rest. I've met a number of people that then take those hobbies and combine them. Some examples could be writing an app that records music, making a website for your biking club, or even creating a database to keep track of your board game win/loss record with your friends!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-take-a-break"&gt;
  &lt;/a&gt;
  5. Take a break
&lt;/h3&gt;

&lt;p&gt;Simply taking a break can often be the best thing you can do to keep your energy levels up, stay focused and avoid short term burnout. Personally for me, I love going on walks throughout the day. It get's my body moving and physically away from my desk creating some separation from my work. Maybe for you, reading a chapter in a book might be the best way to relax. Other's might even rather sit back and watch an episode of their favorite show. Breaks are great for hitting the "Brain Reset" button and often times when you get back to coding you can approach it from a different prospective, which can be especially useful when tracking down pesky bugs!&lt;/p&gt;

&lt;p&gt;What do you do to stay sharp and focused when you aren't coding? Let me know in the comments!&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br&gt;
Carl&lt;/p&gt;

</description>
      <category>healthydebate</category>
      <category>career</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>Top 5 DEV Comments from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Thu, 17 Jun 2021 21:36:00 +0000</pubDate>
      <link>https://dev.to/devteam/top-5-dev-comments-from-the-past-week-2cle</link>
      <guid>https://dev.to/devteam/top-5-dev-comments-from-the-past-week-2cle</guid>
      <description>&lt;p&gt;This is a weekly roundup of awesome DEV comments that you may have missed.  You are welcome and encouraged to boost posts and comments yourself using the &lt;strong&gt;&lt;a href="https://dev.to/t/bestofdev"&gt;#bestofdev&lt;/a&gt;&lt;/strong&gt; tag.&lt;/p&gt;

&lt;p&gt;This comment on "&lt;a href="https://dev.to/wadecodez/16-eternal-hells-of-programming-5h5g"&gt;The Hells Every Developer Experiences&lt;/a&gt;" should resonate with all you "computer people". Hilarious addition, &lt;a class="mentioned-user" href="https://dev.to/faranaiki"&gt;@faranaiki&lt;/a&gt;
 !&lt;br&gt;
&lt;/p&gt;
&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/faranaiki"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uy_Hdv10--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5XG2LeBV--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/648230/725405e9-79ac-4d2a-9ff4-272d1e977e50.jpg" alt="faranaiki profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/faranaiki"&gt;
        &lt;span class="comment-username"&gt;Muhammad Faran Aiki&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;‚Ä¢&lt;/span&gt;

&lt;a href="https://dev.to/faranaiki/comment/1fb50" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Jun 12
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;"Please, can you fix my printer?"&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;If you check out "&lt;a href="https://dev.to/siddharthshyniben/i-m-switching-to-vim-867"&gt;Switching to vim&lt;/a&gt;", you'll see some great dialogue from VSCode user &lt;a class="mentioned-user" href="https://dev.to/turutupa"&gt;@turutupa&lt;/a&gt;
 who has questions for the author about vim. Thanks for continuing the convo!&lt;br&gt;
&lt;/p&gt;
&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/turutupa"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQkNvFSY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ObOPnnwS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449682/2f9535db-988b-4f57-8d14-ec6fedac79f5.jpeg" alt="turutupa profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/turutupa"&gt;
        &lt;span class="comment-username"&gt;Turutupa&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;‚Ä¢&lt;/span&gt;

&lt;a href="https://dev.to/turutupa/comment/1fcoi" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Jun 15
  &lt;/time&gt;

    ‚Ä¢ Edited
    &lt;span class="hidden m:inline-block"&gt;
      on &lt;time&gt;
      Jun 15&lt;/time&gt;
    &lt;/span&gt;
&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;It's great that you changed to vim, seems very exciting! It would be cool if you could explain the process on how you changed to vim. Personally I use VSCode with vim extension for keyboard shortcuts. And I think it would be really cool to move fully to vim, but it's hard... first problem is file navigation. VSCode makes it so easy to open up files using ctrl/command + p. There might be some other stuff that I'd miss from VSCode when moving to vim but file navigation is my road blocker I guess. &lt;/p&gt;

&lt;p&gt;How did you overcome that?&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Some of you may have stumbled across "&lt;a href="https://dev.to/valeriavg/master-binary-in-five-minutes-2lj5"&gt;Master Binary in Five Minutes&lt;/a&gt;", where &lt;a class="mentioned-user" href="https://dev.to/eljayadobe"&gt;@eljayadobe&lt;/a&gt;
 aptly dropped this clever response to the title üòÉ&lt;br&gt;
&lt;/p&gt;
&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/eljayadobe"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dyh0m08q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--J6Pjmr4x--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/16481/7c9b8fa1-9004-4b63-94e9-c282f821bf24.png" alt="eljayadobe profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/eljayadobe"&gt;
        &lt;span class="comment-username"&gt;Eljay-Adobe&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;‚Ä¢&lt;/span&gt;

&lt;a href="https://dev.to/eljayadobe/comment/1fcf8" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Jun 14
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;Master Binary in 101 Minutes.&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;We must point out this comment by &lt;a class="mentioned-user" href="https://dev.to/valeriavg"&gt;@valeriavg&lt;/a&gt;
 taken from this post on some "&lt;a href="https://dev.to/johnbwoodruff/my-completely-biased-reasons-for-choosing-angular-1hbg"&gt;Biased Reasons for Angular&lt;/a&gt;". Always nice to see open, respectful discussion. &lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/valeriavg"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--z3PT5xl1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--2fSvzvbJ--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/473770/aad0a38a-ce60-457f-942d-1699421a16ef.jpeg" alt="valeriavg profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/valeriavg"&gt;
        &lt;span class="comment-username"&gt;Valeria&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;‚Ä¢&lt;/span&gt;

&lt;a href="https://dev.to/valeriavg/comment/1fapb" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Jun 12
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;I respect opinions that are diametrically opposed to mine. In fact I believe that diversity is a very good thing and not only in tech. With that said, it hurts me to see how the option to not use any framework at all simply became not an option. A framework, architecture or any sort of abstraction layer can and should be chosen or (blasphemy!) created for a particular project. After all, every programming language has it's own ways of doing things, limiting opinions and providing easy solutions for common problems. &lt;br&gt;
But the higher the level of abstraction the less understanding you have of what actually is going on. This makes things harder to debug, fix and optimise.&lt;br&gt;
Having said that, I agree that choosing a framework based on what you know best is wise. But by &lt;em&gt;knowing&lt;/em&gt; I mean a deep understanding of how it works, what it can and cannot do and why. Which is always easier with your own code or a third-party code with the smallest possible scope.&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Non dev-related, but this &lt;a href="https://dev.to/devteam/what-was-your-win-this-week-4oa2"&gt;Weekly Win&lt;/a&gt; is definitely note-worthy. Glad to hear you're doing well &lt;a class="mentioned-user" href="https://dev.to/ibrahimcesar"&gt;@ibrahimcesar&lt;/a&gt;
 !&lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/ibrahimcesar"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8S7NI2h---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--1q2JtRUH--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/189167/695f3dd9-b865-4c57-a097-5cfe07cca488.jpg" alt="ibrahimcesar profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/ibrahimcesar"&gt;
        &lt;span class="comment-username"&gt;Ibrahim Cesar&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;‚Ä¢&lt;/span&gt;

&lt;a href="https://dev.to/ibrahimcesar/comment/1faib" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Jun 11
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;Tested negative to COVID-19 ‚Äì I live in Brazil and was sick all week. Never felt my life in so much danger.&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;See you next week for more great comments ‚úå&lt;/p&gt;

</description>
      <category>bestofdev</category>
    </item>
    <item>
      <title>Tinker with your local/remote PHP (Laravel, Magento) Code</title>
      <author>Raj KB</author>
      <pubDate>Thu, 17 Jun 2021 21:08:46 +0000</pubDate>
      <link>https://dev.to/magepsycho/tinker-with-your-local-remote-php-laravel-magento-code-3g2j</link>
      <guid>https://dev.to/magepsycho/tinker-with-your-local-remote-php-laravel-magento-code-3g2j</guid>
      <description>&lt;p&gt;I was always looking for a &lt;a href="https://blog.magepsycho.com/sandbox-script-quick-testing-magento2/"&gt;quick playground for testing/debugging&lt;/a&gt; any PHP application esp. for Magento 2.&lt;/p&gt;

&lt;p&gt;Luckily, I got to know about Tinkerwell App in some twitter feed and thought of giving a try.&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cvJ4HM4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/ESHFe04W4AE6UDA.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--9JcreN2W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1143596522417922048/N9RDUIty_normal.png" alt="Michiel Gerritsen profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Michiel Gerritsen
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/mbdgerritsen"&gt;@mbdgerritsen&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      .@tinkerwellapp + Magento 2 is a great combo. It allows me to SSH into the server and execute code on the real order object for example. In this case, i was debugging why a credit memo couldn't get created for this order. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:28 PM - 02 Mar 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1234485852463603712" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1234485852463603712" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1234485852463603712" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;If you don‚Äôt know about Tinerwell app&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tinkerwell is the magical code editor that runs your code within local and remote PHP applications. In other words, it‚Äôs a RELP(read-eval-print loop) for PHP.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Though there are some tools like:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PHP‚Äôs interactive mode in CLI (&lt;code&gt;php -a&lt;/code&gt;),&lt;/li&gt;
&lt;li&gt;&lt;a href="https://psysh.org/"&gt;psysh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;n98-magerun‚Äôs &lt;a href="https://n98-magerun.readthedocs.io/en/latest/commands/dev.html#dev-console"&gt;dev:console&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But the main advantage of the Tinkerwell app over others is that it can tinker locally and also remotely(via SSH). &lt;br&gt;
Also, it has official IDE plugins so that you can run code directly from your favorite code editor(VSCode, Sublime Text 3 and PhpStorm).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;Tinkerwell is a commercial app that only costs around 15 USD and really worth it.&lt;/p&gt;

&lt;p&gt;After purchasing, you will get an email with a link to download the app along with the license key.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WMJJnEE1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sd7fpx0ued40npsrbh6t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WMJJnEE1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sd7fpx0ued40npsrbh6t.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After downloading you can simply install the installer file and configure the License Key, so nothing fancy about it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#configuring-for-magento-2"&gt;
  &lt;/a&gt;
  Configuring for Magento 2
&lt;/h2&gt;

&lt;p&gt;Currently(as the time of writing), the major PHP applications supported by Tinkerwell app are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Magento 2&lt;/li&gt;
&lt;li&gt;Laravel&lt;/li&gt;
&lt;li&gt;Symfony&lt;/li&gt;
&lt;li&gt;WordPress&lt;/li&gt;
&lt;li&gt;Drupal&lt;/li&gt;
&lt;li&gt;Typo3&lt;/li&gt;
&lt;li&gt;Prestashop&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The full list can be found at ‚Äì &lt;a href="https://github.com/tinkerwellapp/drivers"&gt;https://github.com/tinkerwellapp/drivers&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tinkerwell ‚Äúdrivers‚Äù determine how the application should be bootstrapped ‚Äì and can even provide variables that should be available automatically.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Since Magento 2 is supported by default, you just need to set the working directory in local or remote.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#tinkering-with-magento-2-locally"&gt;
  &lt;/a&gt;
  Tinkering with Magento 2 Locally
&lt;/h3&gt;

&lt;p&gt;Open the app and click on the folder icon (1) and set your local Magento 2 working directory(2). That‚Äôs it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nokam_Mc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z2ml930vv6s2mu1qq6oh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nokam_Mc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z2ml930vv6s2mu1qq6oh.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, you can run/debug any Magento 2 code (core &amp;amp; custom) with the realtime preview on the right pane. For example, it may look like&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IU9WunMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8vsfpf1rzq2axmhat41s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IU9WunMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8vsfpf1rzq2axmhat41s.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
Running code with Tinkerwell

  

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2o2MR4sw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mtjw3bb1x9z02755so6z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2o2MR4sw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mtjw3bb1x9z02755so6z.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
Running selected code in PHPStorm with Tinkerwell



&lt;p&gt;&lt;em&gt;&lt;code&gt;$objectManager&lt;/code&gt; variable is available by default (via Magento 2 driver)&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#troubleshooting"&gt;
  &lt;/a&gt;
  Troubleshooting
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt; If you are getting an error&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Zend_Db_Adapter_Exception with message ‚ÄòSQLSTATE[HY000] [2002] No such file or directory‚Äô&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt; Just replace ‚Äòlocalhost‚Äô by the IP address(127.0.0.1) for DB host in the file &lt;code&gt;app/etc/env.php&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#tinkering-with-magento-2-remotely-via-ssh"&gt;
  &lt;/a&gt;
  Tinkering with Magento 2 Remotely (via SSH)
&lt;/h3&gt;

&lt;p&gt;For remote interactive debugging, you can connect via Action (1) &amp;gt; Connect Via SSH. You will see a similar popup as below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BJIVu_mS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jglei5iuak5txscz1z2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BJIVu_mS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jglei5iuak5txscz1z2.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Just fill-up the SSH login details and connect(2). Now you are able to able to run the code in remote. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Though there are some alternatives, Tinkerwell works quite well locally and remotely for testing out any PHP code (not only limited to Laravel, Magento 2 or other PHP frameworks).&lt;br&gt;
It‚Äôs really quite helpful in quick testing/debugging any PHP code and saves a lot of time.&lt;/p&gt;

&lt;p&gt;You might be interested in following Twitter discussion:&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--SHR5eLc4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1225749538960531457/CRecYzGx_normal.jpg" alt="üõí Magento 2 Extensions üöÄ profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        üõí Magento 2 Extensions üöÄ
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/magepsycho"&gt;@magepsycho&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Question: How do you debug smartly in M2 production server?&lt;br&gt;&lt;br&gt;Please share your views!&lt;br&gt;&lt;br&gt;@magento &lt;a href="https://twitter.com/MageOverflow"&gt;@MageOverflow&lt;/a&gt; &lt;a href="https://twitter.com/Magento"&gt;@Magento&lt;/a&gt;MP &lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/max_pronko"&gt;@max_pronko&lt;/a&gt; &lt;a class="mentioned-user" href="https://dev.to/markshust"&gt;@markshust&lt;/a&gt;
 &lt;a href="https://twitter.com/mrloo"&gt;@mrloo&lt;/a&gt; &lt;a href="https://twitter.com/VinaiKopp"&gt;@VinaiKopp&lt;/a&gt; &lt;a href="https://twitter.com/LBajsarowicz"&gt;@LBajsarowicz&lt;/a&gt; &lt;a href="https://twitter.com/PeterJaap"&gt;@PeterJaap&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      04:42 AM - 14 Apr 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1249921026063872001" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1249921026063872001" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1249921026063872001" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


</description>
      <category>php</category>
      <category>magento</category>
      <category>laravel</category>
      <category>tinkerwell</category>
    </item>
    <item>
      <title>Linear Search Algorithm</title>
      <author>Aya Bouchiha</author>
      <pubDate>Thu, 17 Jun 2021 21:05:59 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/linear-search-algorithm-31dn</link>
      <guid>https://dev.to/ayabouchiha/linear-search-algorithm-31dn</guid>
      <description>&lt;h1&gt;
  &lt;a href="#linear-search-definition"&gt;
  &lt;/a&gt;
  Linear Search Definition
&lt;/h1&gt;

&lt;p&gt;Linear search also called &lt;strong&gt;&lt;em&gt;sequential search&lt;/em&gt;&lt;/strong&gt; is a type of search algorithms, that traverse an array and compare each item with the wanted item, if the item is found the algorithm returns his index otherwise, It returns a false value (false, null, None,0...)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#space-and-time-complexity-of-linear-search"&gt;
  &lt;/a&gt;
  Space and Time complexity of linear search
&lt;/h1&gt;

&lt;p&gt;The &lt;strong&gt;time complexity&lt;/strong&gt; of &lt;strong&gt;linear search&lt;/strong&gt; is &lt;strong&gt;O(n)&lt;/strong&gt; and his &lt;strong&gt;Space complexity&lt;/strong&gt; is &lt;strong&gt;O(1)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ubl8U54i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1b07zcs5rofsa4jbtrq8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ubl8U54i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1b07zcs5rofsa4jbtrq8.png" alt="line-graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#implementaion-of-linear-search-in-python"&gt;
  &lt;/a&gt;
  Implementaion of linear search in python
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;LinearSearchAlgorithm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wantedItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
        Linear seach algorithm
        input: 
            [wantedItem]
            [items] {list}
        output:
            =&amp;gt; returns index if the item is found
            =&amp;gt; returns False if the item is not found
    """&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;wantedItem&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#implementaion-of-linear-search-in-javascript"&gt;
  &lt;/a&gt;
  Implementaion of linear search in javascript
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Linear Search ALgoritm
 * @param  wantedItem 
 * @param {Array} items 
 * @returns {(Number|Boolean)} returns index if the item is found else returns false.
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LinearSearchAlgorithm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wantedItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wantedItem&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#exercise"&gt;
  &lt;/a&gt;
  Exercise
&lt;/h2&gt;

&lt;p&gt;Write a program that returns True if user's child can enter primary school if not returns False&lt;br&gt;
Permited Ages to enter primary school: 5,6,7,8 (Array | list).&lt;br&gt;
input : child's age (integer).&lt;br&gt;
&lt;strong&gt;example 1&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;input&lt;/em&gt; : 7&lt;br&gt;
&lt;em&gt;output&lt;/em&gt; =&amp;gt; True&lt;br&gt;
&lt;strong&gt;example 2&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;input&lt;/em&gt; : 3&lt;br&gt;
&lt;em&gt;output&lt;/em&gt; =&amp;gt; False&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references-and-useful-resources"&gt;
  &lt;/a&gt;
  References and useful Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bbc.co.uk/bitesize/guides/z7kkw6f/revision/7#:~:text=A%20linear%20search%20is%20the,algorithm%20must%20deal%20with%20this."&gt;https://www.bbc.co.uk/bitesize/guides/z7kkw6f/revision/7#:~:text=A%20linear%20search%20is%20the,algorithm%20must%20deal%20with%20this.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/linear-search/"&gt;https://www.geeksforgeeks.org/linear-search/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Linear_search"&gt;https://en.wikipedia.org/wiki/Linear_search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tutorialspoint.com/data_structures_algorithms/linear_search_algorithm.htm"&gt;https://www.tutorialspoint.com/data_structures_algorithms/linear_search_algorithm.htm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/linear-search/"&gt;https://www.geeksforgeeks.org/linear-search/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tutorialspoint.com/linear-search-in-python-program"&gt;https://www.tutorialspoint.com/linear-search-in-python-program&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=iwo5WAldDks"&gt;https://www.youtube.com/watch?v=iwo5WAldDks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=4GPdGsB3OSc"&gt;https://www.youtube.com/watch?v=4GPdGsB3OSc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;#day_5&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>python</category>
    </item>
    <item>
      <title>Reasons to Write as a Developer</title>
      <author>Krowser Web Services </author>
      <pubDate>Thu, 17 Jun 2021 21:01:12 +0000</pubDate>
      <link>https://dev.to/krowser/reasons-to-write-as-a-developer-5f5m</link>
      <guid>https://dev.to/krowser/reasons-to-write-as-a-developer-5f5m</guid>
      <description>&lt;p&gt;I get asked frequently by fellow programmers why I started writing online and if they should do the same. Let me tell you one thing right from the start: Yes, you should!&lt;/p&gt;

&lt;p&gt;Writing as a programmer has a lot of benefits like additional income, personal development, increased reputation, and more. You don‚Äôt need to write 10,000 words every month. You don‚Äôt even have to write every day. And you definitely don‚Äôt need a background in writing or some hidden talent! You just need a reason for writing, and that‚Äôs what this article is about.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Reputation&lt;/strong&gt;&lt;br&gt;
A good reason for a lot of programmers to start writing is to build up some kind of reputation. Let‚Äôs say you are a programmer who is able to write JavaScript code and turn it into functioning applications, but nobody else knows you can do that.&lt;br&gt;
By starting to write online about what you do, you give other people the chance to get to know you and what skills you possess. It‚Äôs an excellent way of self-marketing and constantly leads to new opportunities ‚Äî especially job-wise.&lt;br&gt;
You don‚Äôt even need your own blog for this. You can use social media like Twitter or LinkedIn or one of the awesome platforms like Dev.to to share your work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Education&lt;/strong&gt;&lt;br&gt;
Another great reason to start writing as a programmer is with the intention of helping others. The demand for skilled developers is still high around the world, but access to learning material and money to buy it are definitely not.&lt;br&gt;
By creating content in the form of blog posts, tutorials, or ebooks, you can help other people discover and learn new things and improve their skills.&lt;br&gt;
It is totally up to you whether you want to charge for it or not, but especially in the beginning, I would recommend creating something for free. Not only is it going to help you become a better writer, but it‚Äôs a good way to build up a reputation, it‚Äôs fun, and helping others is always a great form of motivation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Yourself&lt;/strong&gt;&lt;br&gt;
This is actually the reason why I started writing online. I wanted to do it for myself ‚Äî to share my thoughts and get feedback on them. But oftentimes, writing has some sort of therapeutic effect on me. My mind is always full of ideas and thoughts, and writing them down really helps me in many situations.&lt;br&gt;
Don‚Äôt be afraid to share failure and things you regret but learned from. Life is not always sunny and there will always be people trying to drag others down. Even more so online, but don‚Äôt let them discourage you because when you write, you write for yourself!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Publicity&lt;/strong&gt;&lt;br&gt;
Another valid reason for writing online is to gain public attention ‚Äî whether for yourself, your product, or your company. A lot of people certainly write in the hope of becoming famous. And platforms like Twitter, Instagram, etc. support this with their clap and like systems. These small rewards can really be addictive and also dangerous.&lt;br&gt;
I think it‚Äôs OK to write for the rush, but there are definitely better reasons for writing. I believe that if you start writing without looking at those likes too much, it will not only be less stressful to write, but it will pay off in the long term even more.&lt;br&gt;
You also shouldn‚Äôt try to copy others too much. It‚Äôs fine to get inspiration, but in the end, you should find your own way of writing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Money&lt;/strong&gt;&lt;br&gt;
Your writing can generate a substantial amount of (side) income. I‚Äôve managed to generate several thousand dollars each month writing on Medium about programming and tech:&lt;br&gt;
But writing for money is an art in itself, in my opinion. It needs a special focus. The focus on making money. If you want to maximize your ROI, you need to align everything you write towards that goal. Things like reputation or education are just side effects ‚Äî not the main purpose.&lt;br&gt;
When writing for money, you need to make sure that your articles are constantly read by a lot of people. And I mean lots and lots of them. At least on Medium, you need high exposure of your articles but also interesting content because the time each person spends reading your articles is an important factor for the algorithm that determines your payouts. Medium publications are a great way to increase the reach of your articles, so you should try to get accepted as an author for at least one major publication!&lt;br&gt;
Another option to get paid as a writer is applying for paid writer programs offered by internet businesses. Those are going to pay you a fixed amount, often between $100-$500 for one article. &lt;br&gt;
Focusing on money and ROI is not so important if you choose a paid writer program. Your focus should rather be on meeting the criteria of the program in question.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Final Thoughts&lt;/strong&gt;&lt;br&gt;
There are many good reasons to start writing online. Some require a special focus for you to be successful and almost all of them benefit from each other.&lt;/p&gt;

&lt;p&gt;But the best advice I can give you is to just start writing. Just do it, for whatever reason. Not tomorrow but today!&lt;/p&gt;

</description>
      <category>career</category>
      <category>writing</category>
      <category>productivity</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Create a Popout Shadow Effect with the New Tailwind CSS v2.2 Update</title>
      <author>Mark</author>
      <pubDate>Thu, 17 Jun 2021 20:44:22 +0000</pubDate>
      <link>https://dev.to/markmead/create-a-popout-shadow-effect-with-the-new-tailwind-css-v2-2-update-3d8j</link>
      <guid>https://dev.to/markmead/create-a-popout-shadow-effect-with-the-new-tailwind-css-v2-2-update-3d8j</guid>
      <description>&lt;p&gt;&lt;a href="https://www.markmead.dev/blog/popout-shadow-effect-with-tailwind-2-2/"&gt;&lt;strong&gt;Originally posted on my website&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The popout shadow effect for buttons, inputs, links etc is a popular style.&lt;/p&gt;

&lt;p&gt;So popular, I even use it as the featured button component on &lt;a href="https://www.hyperui.dev/components/buttons"&gt;HyperUI: Components for Tailwind CSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But to create this in Tailwind CSS required additional HTML elements inside which made your HTML cluttered.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is fixed in Tailwind v2.2.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here's an example of the old way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative inline-block group"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute inset-0 transform translate-x-1 translate-y-1 bg-black group-hover:translate-y-0 group-hover:translate-x-0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative inline-block px-8 py-3 bg-white border-2 border-black"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; Hello there! üëã &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://play.tailwindcss.com/HnPMePFeCK"&gt;Tailwind Play Example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There's 2 additional &lt;code&gt;span&lt;/code&gt; tags here and this way makes the shadow effect slightly offset, an example will follow of this will be linked at the bottom!&lt;/p&gt;

&lt;p&gt;The new and improve way using the new &lt;strong&gt;&lt;code&gt;before&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;after&lt;/code&gt;&lt;/strong&gt; psuedo variants:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"px-8 py-3 bg-white relative border-2 border-black inline-block after:absolute after:inset-0 after:translate-x-1 after:translate-y-1 after:bg-black after:-z-1 hover:after:translate-x-0 hover:after:translate-y-0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Hello there! üëã
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Better, right? The only issue is how long the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag becomes, but that can be fixed with some HTML attribute stacking.&lt;/p&gt;

&lt;p&gt;Another thing to mention was the use of &lt;code&gt;-z-1&lt;/code&gt; which I had to add to the Tailwind config with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;zIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A small addition for much, much cleaner code!&lt;/p&gt;

&lt;p&gt;As for the slight offset... Here's a replica of the example but in CodePen written with SCSS:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/markmead/pen/gOmErLy"&gt;CodePen Example with SCSS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you compare the old Tailwind way, the new Tailwind v2.2 way and the CodePen SCSS example, you will see the new Tailwind v2.2 way and the CodePen SCSS example match. Whereas the old Tailwind way is slightly offset... Odd.&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>css</category>
    </item>
    <item>
      <title>Understanding the use of useEffect hook &amp; forwardRef in React</title>
      <author>Sajith Pradeep</author>
      <pubDate>Thu, 17 Jun 2021 20:43:45 +0000</pubDate>
      <link>https://dev.to/sajithpradeep/understanding-the-use-of-useeffect-hook-forwardref-in-react-57jf</link>
      <guid>https://dev.to/sajithpradeep/understanding-the-use-of-useeffect-hook-forwardref-in-react-57jf</guid>
      <description>&lt;p&gt;The &lt;em&gt;useRef&lt;/em&gt; hook in react is used to create a reference to an HTML element. Most widely used scenario is when we have form elements and we need to reference these form elements to either print their value or focus these elements etc. &lt;/p&gt;

&lt;p&gt;So the &lt;em&gt;{useRef}&lt;/em&gt; hook is imported from &lt;em&gt;"react"&lt;/em&gt; like other react hooks and we use them inside functional components to create references and this can be assigned to an html element in the &lt;em&gt;jsx&lt;/em&gt; by using the &lt;em&gt;"ref"&lt;/em&gt; attribute. &lt;/p&gt;

&lt;p&gt;An example for using the useRef hook is shown below-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UseRefHookExplained&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Creating refs for username and password&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userNameRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;passwordRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// We are also creating a reference to the Login button&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;submitBtnRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// useEffect to set the initial focus to the user name input&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;userNameRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="c1"&gt;// This function is used to handle the key press.&lt;/span&gt;
  &lt;span class="c1"&gt;// Whenever user hits enter it moves to the next element&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleKeyPress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;inputType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Checks if Enter pressed from the username field?&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="c1"&gt;// Moves the focus to the password input field&lt;/span&gt;
          &lt;span class="nx"&gt;passwordRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// Checks if Enter pressed from the password field?&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="c1"&gt;// Moves the focus to the submit button&lt;/span&gt;
          &lt;span class="nx"&gt;submitBtnRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// Function to handle the submit click from the button&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submitted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// getting the style as prop from the parent.&lt;/span&gt;
  &lt;span class="c1"&gt;// Basic style to center the element and apply a bg color&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="nx"&gt;Hook&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;userNameRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handleKeyPress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;passwordRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handleKeyPress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;submitBtnRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Login&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;UseRefHookExplained&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So the concept of &lt;em&gt;useRef&lt;/em&gt; hook is straight forward as you can see in the above code. Follow the following steps - &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We import useRef hook from react&lt;/li&gt;
&lt;li&gt;We initialize this hook (eg: &lt;em&gt;const inputRef = useRef(null)&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;The reference created is attached to an html element using the "ref" attribute. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we will have a reference to this element readily available to be used to make changes like getting the value, focusing etc&lt;/p&gt;

&lt;p&gt;Output &lt;br&gt;
Initial state when the page loads - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tr5I0GVd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623960661832/7V6eFeBz-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tr5I0GVd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623960661832/7V6eFeBz-.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Focus State after entering user name and pressing enter - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S-FKJ5SG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623960744446/BTq9MKrMv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S-FKJ5SG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623960744446/BTq9MKrMv.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Focus state moving to the button after entering the password and clicking on Enter&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9rWre5Ng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623960800169/ZlXeAQsNY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9rWre5Ng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623960800169/ZlXeAQsNY.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, this much should be pretty clear by now. Now let us look at a scenario when we will be using another React component for input. &lt;/p&gt;

&lt;p&gt;In this case it becomes a little difficult to pass on the reference that we have defined in the parent component as a property to the child (Input component). &lt;/p&gt;

&lt;p&gt;React provides us a way to handle this scenario and forward the refs to the child component using &lt;strong&gt;React.forwardRef&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let us check the example code to see the changes - &lt;br&gt;
( I have added a comment &lt;strong&gt;"//new"&lt;/strong&gt;  to identify the newly added lines)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// new&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UseRefHookExplained&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Creating refs for username and password&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userNameRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;passwordRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// We are also creating a reference to the Login button&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;submitBtnRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// useEffect to set the initial focus to the user name input&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;userNameRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="c1"&gt;// This function is used to handle the key press.&lt;/span&gt;
  &lt;span class="c1"&gt;// Whenever user hits enter it moves to the next element&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleKeyPress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;inputType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Checks if Enter pressed from the username field?&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="c1"&gt;// Moves the focus to the password input field&lt;/span&gt;
          &lt;span class="nx"&gt;passwordRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// Checks if Enter pressed from the password field?&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="c1"&gt;// Moves the focus to the submit button&lt;/span&gt;
          &lt;span class="nx"&gt;submitBtnRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// Function to handle the submit click from the button&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submitted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// getting the style as prop from the parent.&lt;/span&gt;
  &lt;span class="c1"&gt;// Basic style to center the element and apply a bg color&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="nx"&gt;Hook&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* New. Using the Component instead of input element */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Input&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;userNameRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handleKeyPress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* New. Using the Component instead of input element */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Input&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;passwordRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handleKeyPress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;submitBtnRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Login&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;UseRefHookExplained&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let us look at the Input.js component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* In the functional component, a second argument 
is passed called ref, which will have access to 
the refs being forwarded from the parent */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* assigning the ref attribute in input and spreading 
the other props which will contain type, name, onkeydown etc */&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// wrapping the Input component with forwardRef&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;forwardedRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forwardRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Exporting the wrapped component&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;forwardedRef&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, React.forwardRed provides us a way with which we can still pass on or forward the refs defined in the parent component to the child component. &lt;/p&gt;

&lt;p&gt;Hope you learned something new today!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Use MySQL Window Functions to Get More out of Your Data</title>
      <author>Arctype Team</author>
      <pubDate>Thu, 17 Jun 2021 20:30:55 +0000</pubDate>
      <link>https://dev.to/arctype/use-mysql-window-functions-to-get-more-out-of-your-data-53p3</link>
      <guid>https://dev.to/arctype/use-mysql-window-functions-to-get-more-out-of-your-data-53p3</guid>
      <description>&lt;p&gt;MySQL introduced Window functions in their release of MySQL version 8.0. to target groups of rows without collapsing them. In this article, we will explore example implementations of the most versatile window functions MySQL has to offer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--39zbibYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4oxn4u5ovj8dufekcoje.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--39zbibYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4oxn4u5ovj8dufekcoje.png" alt="Window Functions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#window-functions-in-mysql"&gt;
  &lt;/a&gt;
  Window Functions in MySQL
&lt;/h2&gt;

&lt;p&gt;Window functions are an advanced feature offered by MySQL to improve the execution performance of queries. These functions act on a group of rows related to the targeted row called window frame. Unlike a GROUP BY clause, Window functions do not collapse the rows to a single row‚Äîpreserving the details of each row instead. This new approach to querying data is invaluable in data analytics and business intelligence.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#window-functions-vs-aggregate-functions"&gt;
  &lt;/a&gt;
  Window Functions vs. Aggregate Functions
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.google.com/url?q=https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html&amp;amp;sa=D&amp;amp;source=editors&amp;amp;ust=1623869458162000&amp;amp;usg=AOvVaw3cHLTrgN1uakADEA4Yq_5U"&gt;Aggregate functions&lt;/a&gt; are used to return a single scalar value from a set of rows. Some prominent aggregate functions available in MySQL are SUM, MIN, MAX, AVG, and COUNT. We can use these functions combined with the GROUP BY clause to get an aggregated value.&lt;/p&gt;

&lt;p&gt;In contrast, &lt;a href="https://www.google.com/url?q=https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html&amp;amp;sa=D&amp;amp;source=editors&amp;amp;ust=1623869458163000&amp;amp;usg=AOvVaw0C0BeSMOFscGODl42LAljl"&gt;window functions&lt;/a&gt; return a corresponding value for each of the targeted rows. These targeted rows, or the set of rows on which the window function operates, is called a window frame. Window functions use the OVER clause to define the window frame. A window function can include an aggregate function as a part of its SQL statement by using the OVER clause instead of GROUP BY.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;AGGREGATE FUNCTIONS&lt;/th&gt;
&lt;th&gt;WINDOW FUNCTIONS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Uses GROUP BY to define rows&lt;/td&gt;
&lt;td&gt;Uses OVER to define rows (Window Frame)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Grouping based on the column values&lt;/td&gt;
&lt;td&gt;Multiple grouping methods (row rank, percentile, column value)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Aggregates rows based on GROUP BY target&lt;/td&gt;
&lt;td&gt;Returns a result for each row without collapsing rows&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Calculate Aggregate amounts (Can only use aggregate functions)&lt;/td&gt;
&lt;td&gt;Both aggregate functions and specialized window functions like LAG(), RANK(), etc. can be used&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Uses a fixed group of values&lt;/td&gt;
&lt;td&gt;Can be either a fixed or a sliding window frame&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#what-are-the-most-popular-mysql-window-functions"&gt;
  &lt;/a&gt;
  What Are The Most Popular MySQL Window Functions?
&lt;/h3&gt;

&lt;p&gt;The following are the specialized window functions MySQL offers:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;WINDOW FUNCTION&lt;/th&gt;
&lt;th&gt;DESCRIPTION&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CUME_DIST&lt;/td&gt;
&lt;td&gt;Cumulative distribution of a value from a group of values&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DENSE_RANK&lt;/td&gt;
&lt;td&gt;The rank of the current row within the corresponding partition, without any gaps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RANK&lt;/td&gt;
&lt;td&gt;The rank of the current row within the corresponding partition, with gaps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FIRST_VALUE&lt;/td&gt;
&lt;td&gt;The corresponding value of the argument from the first row of the window frame&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LAST_VALUE&lt;/td&gt;
&lt;td&gt;The corresponding value of the argument from the last row of the window frame&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LAG&lt;/td&gt;
&lt;td&gt;Returns the value from the preceding (lagging) row for a given expression (argument)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LEAD&lt;/td&gt;
&lt;td&gt;Returns the value from the following (leading) row for a given expression (argument)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NTH_VALUE&lt;/td&gt;
&lt;td&gt;Returns the value of the expression (argument) from the N-th row of the window frame&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NTILE&lt;/td&gt;
&lt;td&gt;Divides a partition into groups (buckets) and returns the bucket number of the current row in the partition&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ROW_NUMBER&lt;/td&gt;
&lt;td&gt;The number of the current row within a partition.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Please refer to the official MySQL &lt;a href="https://www.google.com/url?q=https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html%23function_ntile&amp;amp;sa=D&amp;amp;source=editors&amp;amp;ust=1623869458180000&amp;amp;usg=AOvVaw0gABErYYi-TYJXmbYkpMrX"&gt;documentation&lt;/a&gt; for in-depth information regarding each of the above functions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-window-function-use-cases-in-mysql"&gt;
  &lt;/a&gt;
  Example Window Function Use Cases in MySQL
&lt;/h2&gt;

&lt;p&gt;Now let‚Äôs see exactly how to utilize some of the Window functions mentioned above. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-sample-mysql-database-tables"&gt;
  &lt;/a&gt;
  Creating Sample MySQL Database Tables
&lt;/h3&gt;

&lt;p&gt;I will be using the latest MySQL server instance with &lt;a href="https://www.google.com/url?q=https://arctype.com/&amp;amp;sa=D&amp;amp;source=editors&amp;amp;ust=1623869458181000&amp;amp;usg=AOvVaw1_N8oKr4AWWIiltfmjUWAH"&gt;Arctype&lt;/a&gt; as the SQL client. Following is the structure of our sample database:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ndoA85bf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/06/Component-1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ndoA85bf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/06/Component-1.jpg" alt="window function mysql er diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can use the following SQL script to create the table structure with Arctype client:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    CREATE TABLE departments (
        dep_id INT (10) AUTO_INCREMENT PRIMARY KEY,
        dep_name VARCHAR (30) NOT NULL,
        dep_desc VARCHAR (150) NULL
    );

    CREATE TABLE employees (
        emp_id INT (10) AUTO_INCREMENT PRIMARY KEY,
        first_name VARCHAR (20) NOT NULL,
        last_name VARCHAR (25) NOT NULL,
        email VARCHAR (100) NOT NULL,
        phone VARCHAR (20) DEFAULT NULL,
        salary DECIMAL (8, 2) NOT NULL,
        dep_id INT (10) NOT NULL,
        FOREIGN KEY (dep_id) REFERENCES 
            departments (dep_id) 
                ON DELETE CASCADE
                ON UPDATE CASCADE
    );

    CREATE TABLE evaluations (
        eval_id INT (10) AUTO_INCREMENT PRIMARY KEY,
        emp_id INT (10) NOT NULL,
        eval_date DATETIME NOT NULL,
        eval_name VARCHAR (30) NOT NULL,
        notes TEXT DEFAULT NULL,
        marks DECIMAL (4,2) NOT NULL,
        FOREIGN KEY (emp_id) REFERENCES employees (emp_id)
    );

    CREATE TABLE overtime (
        otime_id INT (10) AUTO_INCREMENT PRIMARY KEY,
        emp_id INT (10) NOT NULL,
        otime_date DATETIME NOT NULL,
        no_of_hours DECIMAL (4,2) NOT NULL,
        FOREIGN KEY (emp_id) REFERENCES employees (emp_id)
    );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After creating the tables, we can insert some sample data into each table using proper relationships. Now, let‚Äôs get back into Window functions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sort-and-paginate-results-with-rownumber"&gt;
  &lt;/a&gt;
  Sort and Paginate Results with ROW_NUMBER()
&lt;/h3&gt;

&lt;p&gt;In our sample database, the employee table is arranged according to the emp_id. However, if we need to get a separate sequential number assigned to each row, then we can use the ROW_NUMBER() window function.&lt;/p&gt;

&lt;p&gt;In the following example, we are using the ROW_NUMBER() function while ordering each row by salary amount.&lt;/p&gt;

&lt;p&gt;We will get the following result if we query just using the GROUP BY clause.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    SELECT * FROM employees ORDER BY salary DESC;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nBa70yYA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/YAAJe4mIlwCFpv4IyjQaHg84ulroPZbUEQ1lv0zEc4b9OXdwIbJg1Rx9o5L-jtE6RQTUYu-4YRT2xnOP3xhS_pYi99FND2OXRzd0pX2QRvcAFnDq8Owx78yE1znqGoJQC1ipO1y1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nBa70yYA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/YAAJe4mIlwCFpv4IyjQaHg84ulroPZbUEQ1lv0zEc4b9OXdwIbJg1Rx9o5L-jtE6RQTUYu-4YRT2xnOP3xhS_pYi99FND2OXRzd0pX2QRvcAFnDq8Owx78yE1znqGoJQC1ipO1y1" alt="regular query result view in Arctype"&gt;&lt;/a&gt;&lt;br&gt;
We can see that a sequential number has been assigned to each row after associating an individual row number using the ROW_NUMBER() function:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT 
  ROW_NUMBER() OVER( ORDER BY salary DESC) `row_num`,
  first_name,
  last_name,
  salary
FROM
  employees;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;RESULT:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4W0kOzf2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/SDAKnH4kjlgS6znLZAPtMyQgDg8lF30OE-xd_7zRXE7opQ4wURWcjYJCjT185RC4iIkeMOUS6ZHt6XcvzIcqjSLilSd9BP6ritQiz_TltFLU-4n0AAq-YQZBNp4wakZHzX8G-p2G" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4W0kOzf2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/SDAKnH4kjlgS6znLZAPtMyQgDg8lF30OE-xd_7zRXE7opQ4wURWcjYJCjT185RC4iIkeMOUS6ZHt6XcvzIcqjSLilSd9BP6ritQiz_TltFLU-4n0AAq-YQZBNp4wakZHzX8G-p2G" alt="row_number query result view in Arctype"&gt;&lt;/a&gt;&lt;br&gt;
Another usage of the ROW_NUMBER function is for pagination. For example, suppose we need to display the employee details in a paginated format, with each page consisting of just five records. This can be achieved through the ROW_NUMBER function and WHERE clause to point to the desired recordset:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WITH page_result AS (
    SELECT
        ROW_NUMBER() OVER( 
            ORDER BY salary DESC
        ) `row_num`,
        first_name,
        last_name,
        salary
    FROM
        employees
)
SELECT * FROM page_result WHERE `row_num` BETWEEN 6 AND 10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;RESULT:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H5sadY5x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/dfQxQTVS0_vSOM4EgiBJSynFSuF-XpIjeKnKpYS1csD49tyHwXjnqohZF2_nOkZ2zV53hMIk4kgqAtd2kIthwEG7ihA5K1-nprG05dutSBtLqz4UWY3jlA9473433twAq0Emth_A" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H5sadY5x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/dfQxQTVS0_vSOM4EgiBJSynFSuF-XpIjeKnKpYS1csD49tyHwXjnqohZF2_nOkZ2zV53hMIk4kgqAtd2kIthwEG7ihA5K1-nprG05dutSBtLqz4UWY3jlA9473433twAq0Emth_A" alt="row_number query with BETWEEN result view in Arctype"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-partition-by-in-a-mysql-window-function"&gt;
  &lt;/a&gt;
  Using PARTITION BY in a MySQL Window Function
&lt;/h3&gt;

&lt;p&gt;Using the PARTITION BY clause enables us to partition employees based on the department. The following query can be used to get the salary scale of employees partitioned by each department.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
    dep_name,
    ROW_NUMBER() OVER (
        PARTITION BY dep_name 
        ORDER BY salary DESC
    ) `row_num`,
    first_name,
    last_name,
    salary,
    email
FROM 
    employees AS emp
    INNER JOIN departments AS dep
        ON dep.dep_id = emp.dep_id
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;RESULT:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QUCrRzia--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-51G5x6iTTdTf9ov-azCoumsb_zCyhUeWwzmi1ymbqOpVOETsuJn5-jnA3ixEH7mCevek0PgUNBoI9hFfwDPp5i4HuQrgOQswIOZwpurgWsSmyeDfQq23mycPhxqOjpf9MtijrGq" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QUCrRzia--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-51G5x6iTTdTf9ov-azCoumsb_zCyhUeWwzmi1ymbqOpVOETsuJn5-jnA3ixEH7mCevek0PgUNBoI9hFfwDPp5i4HuQrgOQswIOZwpurgWsSmyeDfQq23mycPhxqOjpf9MtijrGq" alt="row_number query with partition by result view in Arctype"&gt;&lt;/a&gt;&lt;br&gt;
We can further extend this query to get the highest-paid employee of each department by extracting the row where row_num is equal to one. (As we have partitioned employees by each department, the ROW_NUMBER starts a new sequence for each partition)&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
    ROW_NUMBER() OVER (
        ORDER BY dep_name DESC
    ) `row_num`, 
    dep_name, 
    first_name,
    last_name,
    salary,
    email
FROM
(
    SELECT
    dep_name,
    ROW_NUMBER() OVER (
        PARTITION BY dep_name 
        ORDER BY salary DESC
    ) `row_num`,
    first_name,
    last_name,
    salary,
    email
    FROM 
        employees AS emp
        INNER JOIN departments AS dep
            ON dep.dep_id = emp.dep_id
) AS highest_paid
WHERE
    `row_num` = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;RESULT:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qkBor_7a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/3M21zmDk5oqgJc_SfUkt8nmCsDwgN4IlM_JPoaza3myo0He9RW1DaUANmZ2s-51b9PORmeHMfWtBrj_oNtuUh2y1QJLDbl16Qii1Ss0iRZ9uJtUC83A-9iRZFpUtzrT4E7sT2vWv" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qkBor_7a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/3M21zmDk5oqgJc_SfUkt8nmCsDwgN4IlM_JPoaza3myo0He9RW1DaUANmZ2s-51b9PORmeHMfWtBrj_oNtuUh2y1QJLDbl16Qii1Ss0iRZ9uJtUC83A-9iRZFpUtzrT4E7sT2vWv" alt="row_number query with partition by and one result view in Arctype"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comparing-row-values-using-lag"&gt;
  &lt;/a&gt;
  Comparing Row Values Using LAG()
&lt;/h3&gt;

&lt;p&gt;The LAG function enables users to access preceding rows using a specified offset. This kind of function is useful when we need to compare the values of the preceding rows with the current row. In our data set, we have a table named evaluations which include yearly employee evaluations. Using LAG, we can identify the performance of each employee and determine if they have improved or not.&lt;/p&gt;

&lt;p&gt;First, let us write a query against the ‚Äúevaluations‚Äù table to identify the basic output of the LAG function. In that query, we will partition employees by emp_id (employee id) and order that partition by the eval_date (evaluation date).&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT 
    emp_id,
    DATE(eval_date) AS `date`,
    eval_name,
    marks,
    LAG(marks) OVER (
        PARTITION BY emp_id ORDER BY eval_date
    ) AS previous
FROM
    evaluations;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;RESULT:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fH8k7SbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/ujnqSYIjtlrXf_IXMvphJq_NYblMs2XNYekxS3-nvzi4Rn_foTxjfyOJY4h7QJpI4LB6hebhhLvzVLTcJ6DmIfNNa-4mVfqQz30U6jasLtIHEndy75qzuUIF3h0v38R28SdYKlY_" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fH8k7SbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/ujnqSYIjtlrXf_IXMvphJq_NYblMs2XNYekxS3-nvzi4Rn_foTxjfyOJY4h7QJpI4LB6hebhhLvzVLTcJ6DmIfNNa-4mVfqQz30U6jasLtIHEndy75qzuUIF3h0v38R28SdYKlY_" alt="lag query result view in Arctype"&gt;&lt;/a&gt;&lt;br&gt;
From the above result set, we can see that the LAG function returns the corresponding previous value for the ‚Äúmarks‚Äù column. Then we need to further refine this data set to get a numerical percentage to identify the year-over-year employee performance.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WITH emp_evaluations AS (
    SELECT 
        emp_id,
        YEAR(eval_date) AS `year`,
        eval_name,
        marks,
        LAG(marks,1,0) OVER (
            PARTITION BY emp_id 
            ORDER BY eval_date
        ) AS previous
    FROM
        evaluations
)
SELECT
    emp_id,
    `year`,
    eval_name,
    marks,
    previous,
    IF (previous = 0, '0%',
        CONCAT(ROUND((marks - previous)*100/previous, 2), '%')
    ) AS difference
FROM
    emp_evaluations;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In the above query, we have defined a common table expression (CTE) to obtain the results of the initial LAG query called emp_evaluations. There are a couple of differences from the original query. &lt;/p&gt;

&lt;p&gt;One is that here, we are extracting only the year value from the eval_date DATETIME field, and the other is that we have defined an offset and a default value (1 as the offset and 0 as the default value) in the LAG function. This default value will be populated when there are no previous rows, such as the beginning of each partition.&lt;/p&gt;

&lt;p&gt;Then we query the emp_evaluations result set to calculate the difference between the ‚Äúmarks‚Äù and the ‚Äúprevious‚Äù column for each row. &lt;/p&gt;

&lt;p&gt;Here we have defined an IF condition to identify empty previous values (previous = 0) and show them as no difference (0%) or otherwise calculate the difference. Without this IF condition, the first row of each partition will be shown as a null value. This query will provide the following formatted output as a result.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nrgzfaUx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/qBXZDQKIsbmb8GWPSvSqCSnRKKQcNY518cRS5eEsUz7Nbfqb3tuVWviIOYB30uvxa5SzfM_NldyKLZwKRe-Flgi5AAc_9U83UR_G8jo7IiWnzETJ2d4AyDTAMLaDSd-jpznZCd3n" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nrgzfaUx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/qBXZDQKIsbmb8GWPSvSqCSnRKKQcNY518cRS5eEsUz7Nbfqb3tuVWviIOYB30uvxa5SzfM_NldyKLZwKRe-Flgi5AAc_9U83UR_G8jo7IiWnzETJ2d4AyDTAMLaDSd-jpznZCd3n" alt="lag query with difference column result view in Arctype"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#assigning-ranks-to-rows-with-denserank"&gt;
  &lt;/a&gt;
  Assigning Ranks to Rows with DENSE_RANK()
&lt;/h3&gt;

&lt;p&gt;The DENSE_RANK function can be used to assign ranks to rows in partitions without any gaps. If the targeted column has the same value in multiple rows, DENSE_RANK will assign the same rank for each of those rows.&lt;/p&gt;

&lt;p&gt;In the previous section, we identified the year-over-year performance of employees. Now let‚Äôs assume that we are offering a bonus to the most improved employee in each department. In that case, we can use DENSE_RANK to assign a rank to the performance difference of employees.&lt;/p&gt;

&lt;p&gt;First, let us modify the query in the LAG function section to create a view from the resulting data set. As we simply need to query (SELECT) the data here, a MySQL view would be an ideal solution. We have modified the SELECT statement in emp_evaluations to include the relevant department, first and last names by joining the evaluations, employees, and departments tables.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE VIEW emp_eval_view AS
    WITH emp_evaluations AS (
        SELECT 
            eval.emp_id AS `empid`,
            YEAR(eval.eval_date) AS `eval_year`,
            eval.eval_name AS `evaluation`,
            eval.marks AS `mark`,
            LAG(eval.marks,1,0) OVER (
                PARTITION BY eval.emp_id 
                ORDER BY eval.eval_date
            ) AS `previous`,
            dep.dep_name AS `department`,
            emp.first_name AS `first_name`,
            emp.last_name AS `last_name`
        FROM
            evaluations AS eval
            INNER JOIN employees AS emp ON emp.emp_id = eval.emp_id
            INNER JOIN departments AS dep ON dep.dep_id = emp.dep_id
    )
    SELECT
        empid,
        first_name,
        last_name,
        department,
        `eval_year`,
        evaluation,
        mark,
        previous,
        IF (previous = 0, '0%',
            CONCAT(ROUND((mark - previous)*100/previous, 2), '%')
        ) AS difference
    FROM
        emp_evaluations;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;RESULT:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cvsl1Epb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/6jB4HenXA3uyRsOJ56ksRu6jEiCaDGi6qz64mpmAA42u3myFWBdAZbh-bFDR5o1A2Vl9K454H1guAEIDFc_uDSMyKY77pV1Tudnkc9efKbSPj0mnf1qEN8zaYc7isGQk5c-VEHfc" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cvsl1Epb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/6jB4HenXA3uyRsOJ56ksRu6jEiCaDGi6qz64mpmAA42u3myFWBdAZbh-bFDR5o1A2Vl9K454H1guAEIDFc_uDSMyKY77pV1Tudnkc9efKbSPj0mnf1qEN8zaYc7isGQk5c-VEHfc" alt="dense_rank query result view in Arctype"&gt;&lt;/a&gt;&lt;br&gt;
Then using this view (emp_eval_view) we use the DENSE_RANK function to assign a rank to each row partitioned by the department and ordered by the difference in a descending manner. Additionally, we only select records related to the specified year (&lt;code&gt;eval_year&lt;/code&gt; = 2020).&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
    empid,
    first_name,
    last_name,
    department,
    `eval_year`,
    evaluation,
    difference AS 'improvement',
    DENSE_RANK() OVER (
        PARTITION BY Department
        ORDER BY Difference DESC
    ) AS performance_rank
FROM 
    emp_eval_view 
WHERE 
    `eval_year` = 2020
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;RESULT:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9xhguafL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/lZxIFesy2qQYRRdE0wQElkk4LjknzI6PhEZlWUPLWNd47uVnLRq01U-WkQZpCX-ofe7fHd3huZQOPoxrwjRJZfzzA9Wvh1-h4n032TCgKkYPK3CWk35L--gjOSuGmaMWizna4SyC" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9xhguafL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/lZxIFesy2qQYRRdE0wQElkk4LjknzI6PhEZlWUPLWNd47uVnLRq01U-WkQZpCX-ofe7fHd3huZQOPoxrwjRJZfzzA9Wvh1-h4n032TCgKkYPK3CWk35L--gjOSuGmaMWizna4SyC" alt="dense_rank query using emp_eval_view result view in Arctype"&gt;&lt;/a&gt;&lt;br&gt;
Finally, we can filter the above result set to identify the highest performing individual in each department by using the WHERE clause to get the first ranking record (performance_rank = 1), as shown below.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT *
FROM (
    SELECT
        empid,
        first_name,
        last_name,
        department,
        `eval_year`,
        evaluation,
        difference AS 'improvement',
        DENSE_RANK() OVER (
            PARTITION BY Department
            ORDER BY Difference DESC
        ) AS performance_rank
    FROM 
        emp_eval_view 
    WHERE 
        `eval_year` = 2020
) AS yearly_performance_data
WHERE 
    performance_rank = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;RESULT:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G3zBorni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/Rga65iKVg9804zkrwEENX5coDkwQYNASXvPbENO6iUi3x0FuuuI_YDMjxQlhds9wL__qCheW8BHesgUMRbABK3m5P8t0a5-P5kk67x7e0Lv3ep3-GuDswXSlG5dH2SYlBhHG8B3f" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G3zBorni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/Rga65iKVg9804zkrwEENX5coDkwQYNASXvPbENO6iUi3x0FuuuI_YDMjxQlhds9wL__qCheW8BHesgUMRbABK3m5P8t0a5-P5kk67x7e0Lv3ep3-GuDswXSlG5dH2SYlBhHG8B3f" alt="another dense_rank query result view in Arctype"&gt;&lt;/a&gt;&lt;br&gt;
As we can see from the above result set, a business can use this DENSE_RANK function to identify top-performing or underperforming employees and departments. These kinds of metrics are crucial for business intelligence processes, and all the credit goes to MySQL Windows functions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-firstvalue-and-lastvalue-to-get-first-and-last-values-from-a-partition"&gt;
  &lt;/a&gt;
  Use FIRST_VALUE and LAST_VALUE() to Get First and Last Values from a Partition
&lt;/h3&gt;

&lt;p&gt;The FIRST_VALUE function enables users to get the first value from an ordered partition while LAST_VALUE gets the opposite, the last value of a result set. These functions can be used for our data set to identify the employees who did the least and most overtime in each department.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FIRST_VALUE()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can use the FIRST_VALUE function to get the employees who did the least overtime in each respective department.&lt;/p&gt;

&lt;p&gt;In the following SQL statement, we have defined a common table expression to calculate overtime done by each employee for each month using the SUM aggregate function. Then using the FIRST_VALUE window function, we are getting the concatenated details (first and last names with the overtime value) of the employee who did the least overtime in a specific department. This partitioning is done via the PARTITION BY statement.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WITH overtime_details AS (
    SELECT
        MONTHNAME(otime.otime_date) AS `month`,
        dep.dep_name AS `dep_name`,
        emp.emp_id AS `emp_id`,
        emp.first_name AS `first_name`,
        emp.last_name AS `last_name`,
        SUM(otime.no_of_hours) AS `overtime`
    FROM
        overtime AS otime
        INNER JOIN employees AS emp ON emp.emp_id = otime.emp_id
        INNER JOIN departments AS dep ON dep.dep_id = emp.dep_id
    GROUP BY `month`, emp.emp_id
    ORDER BY `month`, emp.emp_id ASC
)
SELECT
    dep_name,
    emp_id,
    first_name,
    last_name,
    `month`,
    overtime,
    FIRST_VALUE (CONCAT(first_name,' ',last_name,' - ',overtime)) OVER (
            PARTITION BY dep_name
            ORDER BY overtime
        ) least_overtime
FROM 
    overtime_details;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This will provide a result set similar to the following, indicating the employee who did the least over time.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0v38Rzx5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/C09shUmIxswK5Tj7m4xZkhf1H2Kvdt6yOubD7W5W4hhVCqnmPqCawwV9WrzvCF89XtIavLBdeUUmO2qa_RWjmZX6FLrUofKLG0r-AiHcGW8aqf4138w6CB4T2IcLnGiHI9j-MrDM" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0v38Rzx5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/C09shUmIxswK5Tj7m4xZkhf1H2Kvdt6yOubD7W5W4hhVCqnmPqCawwV9WrzvCF89XtIavLBdeUUmO2qa_RWjmZX6FLrUofKLG0r-AiHcGW8aqf4138w6CB4T2IcLnGiHI9j-MrDM" alt="first_value query result view in Arctype"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LAST_VALUE()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can use the LAST_VALUE window function to get the employee who did the most amount of overtime in each department. The syntax and the logic are identical to the FIRST_VALUE SQL statement yet with the addition of a ‚Äúframe clause‚Äù to define a subset of the current partition where the LAST_VALUE function needs to be applied.&lt;/p&gt;

&lt;p&gt;We are using the:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;RANGE BETWEEN 
    UNBOUNDED PRECEDING AND 
    UNBOUNDED FOLLOWING
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;as the frame clause. This essentially informs the database engine that the frame starts at the first row and ends at the last row of the result set. (In our query, this applies to each partition)&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WITH overtime_details AS (
    SELECT
        MONTHNAME(otime.otime_date) AS `month`,
        dep.dep_name AS `dep_name`,
        emp.emp_id AS `emp_id`,
        emp.first_name AS `first_name`,
        emp.last_name AS `last_name`,
        SUM(otime.no_of_hours) AS `overtime`
    FROM
        overtime AS otime
        INNER JOIN employees AS emp ON emp.emp_id = otime.emp_id
        INNER JOIN departments AS dep ON dep.dep_id = emp.dep_id
    GROUP BY `month`, emp.emp_id
    ORDER BY `month`, emp.emp_id ASC
)
SELECT
    dep_name,
    emp_id,
    first_name,
    last_name,
    `month`,
    overtime,
    LAST_VALUE (CONCAT(first_name,' ',last_name,' - ',overtime)) OVER (
            PARTITION BY dep_name
            ORDER BY overtime
            RANGE BETWEEN
                UNBOUNDED PRECEDING AND
                UNBOUNDED FOLLOWING
        ) most_overtime
FROM 
    overtime_details;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This would provide us with the details of the employees who did the most overtime in each department.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0h92QLw---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/XiuyvCTGjLD7tlfanp6t4q5umO15WR9R_gu8UhjJ6XchrOIVH2EnMwXdCYEoPv7PopcwjpsGBQhCv4SUWv_pZvTs5ZB7AKikmhG0Z2-TdEicAqTmdNaHR1SzI4hHRZcW17zgkOHc" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0h92QLw---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/XiuyvCTGjLD7tlfanp6t4q5umO15WR9R_gu8UhjJ6XchrOIVH2EnMwXdCYEoPv7PopcwjpsGBQhCv4SUWv_pZvTs5ZB7AKikmhG0Z2-TdEicAqTmdNaHR1SzI4hHRZcW17zgkOHc" alt="last_value query result view in Arctype"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Window functions in MySQL are a welcome addition to an already excellent database. In this article, we mainly covered how to use window functions with some practical examples. The next step is to dig even further into MySQL window functions and mix them with all the other available MySQL functionality to meet any business requirement.&lt;/p&gt;

</description>
      <category>guide</category>
      <category>mysql</category>
      <category>dataanalysis</category>
    </item>
  </channel>
</rss>
