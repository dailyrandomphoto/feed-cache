<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Getting Started With Angular Material</title>
      <author>Dev By RayRay</author>
      <pubDate>Fri, 10 Sep 2021 19:23:36 +0000</pubDate>
      <link>https://dev.to/devbyrayray/getting-started-with-angular-material-20a7</link>
      <guid>https://dev.to/devbyrayray/getting-started-with-angular-material-20a7</guid>
      <description>&lt;p&gt;A lot of developers are using Angular Material in their Angular applications. But what is the best way to add the library, and why do you want to use &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="#what-is-angular-material"&gt;What Is Angular Material?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="#why-use-angular-material"&gt;Why Use Angular Material?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="#how-to-add-angular-material"&gt;How To Add Angular Material?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="#how-to-use-angular-material"&gt;How To Use Angular Material?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="#how-to-load-all-angular-material-components-at-once"&gt;How To Load All Angular Material Components At Once&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-angular-material"&gt;
  &lt;/a&gt;
  What Is Angular Material?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zaaEwZkS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631300625484/dmyoLS4_h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zaaEwZkS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631300625484/dmyoLS4_h.png" alt="Screenshot_2021-09-02_at_15.59.01.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Angular Material is an Angular Component library build and maintained by Google.&lt;/p&gt;

&lt;p&gt;It's a component library filled with a ton of easy to use Angular components. The library includes components like a &lt;a href="https://material.angular.io/components/datepicker/overview"&gt;datepicker&lt;/a&gt;, &lt;a href="https://material.angular.io/components/input/overview"&gt;input elements&lt;/a&gt;, &lt;a href="https://material.angular.io/components/slide-toggle/overview"&gt;toggle switches&lt;/a&gt;, &lt;a href="https://material.angular.io/components/table/overview"&gt;tables&lt;/a&gt; and, &lt;a href="https://material.angular.io/components/categories"&gt;a lot more&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Components support customization in various ways. You can use their pre-built themes or build your own with the custom color scheme.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-angular-material"&gt;
  &lt;/a&gt;
  Why Use Angular Material?
&lt;/h2&gt;

&lt;p&gt;Angular Material is updated simultaneously with Angular, which is one of the best advantages of using Angular Material and not other component libraries. Every time Google brings a new update for Angular, it will update Angular Material simultaneously.&lt;/p&gt;

&lt;p&gt;When you update your Angular application with &lt;code&gt;ng update&lt;/code&gt;, it will also update Angular Material simultaneously, which is pretty handy.&lt;/p&gt;

&lt;p&gt;With Angular Material, you know for sure, as long as Google keeps developing Angular, it will stay Angular Material up-to-date. &lt;/p&gt;

&lt;p&gt;All the components have been tested for a long time. I've been an Angular Material user for a long time, but I've never had an actual error in an Angular Material component.&lt;/p&gt;

&lt;p&gt;But if you don't like the style of Angular Material, you can also change their styling. Picking another Angular component library is an excellent alternative if you want something different.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-add-angular-material"&gt;
  &lt;/a&gt;
  How To Add Angular Material?
&lt;/h2&gt;

&lt;p&gt;Before installing Angular Material in an existing project, we have to make sure you installed the Angular CLI. If you haven't, run this command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; @angular/cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's start with installing Angular Material in an existing project.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ng add @angular/material
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;When you perform the command above, you will get a few configuration options to choose from. Make the choice you want.&lt;/p&gt;

&lt;p&gt;After this process, you can use Angular Material in your Angular project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-use-angular-material"&gt;
  &lt;/a&gt;
  How To Use Angular Material?
&lt;/h2&gt;

&lt;p&gt;Angular Material components can be used by importing the module.&lt;/p&gt;

&lt;p&gt;For example, if you want to use the &lt;a href="https://material.angular.io/components/checkbox/overview"&gt;checkbox component&lt;/a&gt;, you have to import the following module in the &lt;code&gt;app.module.ts&lt;/code&gt; if you're going to use it in all the components across the entire application.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;MatCheckboxModule&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/material/checkbox&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This code can be found on every component page in the API tab.&lt;/p&gt;

&lt;p&gt;Now you can go to a component where you want to use your imported component. Check the examples tab for an example of the components and code sample's on how to use the component.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;mat-checkbox&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"example-margin"&lt;/span&gt; &lt;span class="na"&gt;[(ngModel)]=&lt;/span&gt;&lt;span class="s"&gt;"checked"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Checked&lt;span class="nt"&gt;&amp;lt;/mat-checkbox&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-load-all-angular-material-components-at-once"&gt;
  &lt;/a&gt;
  How To Load All Angular Material Components At Once
&lt;/h2&gt;

&lt;p&gt;There is no default way to load all Angular Material component modules at once. I think there is a good reason for that.&lt;/p&gt;

&lt;p&gt;You can create an Angular Module to import all the Angular Material modules and import that module in your &lt;code&gt;app.module.ts&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The question is, are you going to use all the Angular Material components in your application? I don't think so because you're going to waste a whole lot of data that the user needs to download.&lt;/p&gt;

&lt;p&gt;I think it's wiser to load the module of the Angular Material component in the Angular Module where you need it. And not load them all at once.&lt;/p&gt;

&lt;p&gt;But if you want to do it, check out this &lt;a href="https://gist.github.com/pimatco/d5b1891feb90b60ca4681011b6513873"&gt;Gist on Github&lt;/a&gt; which has all the available Angular Material modules for you.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Angular Material offers a great set of well-tested and configurable Angular components. The most significant benefit is, it's developed simultaneously by the Angular team.&lt;/p&gt;

&lt;p&gt;I'm looking forwards to see all the projects you build with Angular Material!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks"&gt;
  &lt;/a&gt;
  Thanks!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DymzaNFk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629789655319/nBF6anHH4w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DymzaNFk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629789655319/nBF6anHH4w.png" alt="hashnode-footer.png"&gt;&lt;/a&gt;&lt;br&gt;
*I hope you learned something new or are inspired to create something new after reading this story! 🤗 If so, consider subscribing via email (scroll to the top of this page) or follow me here on Hashnode.&lt;br&gt;
*&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Did you know that you can create a &lt;a href="https://hashnode.com/@devbyrayray/joinme"&gt;Developer blog like this one, yourself&lt;/a&gt;? It's entirely for free. 👍💰🎉🥳🔥&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;If I left you with questions or something to say as a response, scroll down and type me a message. Please send me a &lt;a href="https://twitter.com/@devbyrayray"&gt;DM on Twitter @DevByRayRay&lt;/a&gt; when you want to keep it private. My DM's are always open 😁&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Deep Dive and Deploy onto IBM Cloud Kubernetes Service</title>
      <author>Mrinalini Sugosh (Mrina)</author>
      <pubDate>Fri, 10 Sep 2021 18:51:53 +0000</pubDate>
      <link>https://dev.to/ibmdeveloper/deep-dive-and-deploy-onto-ibm-cloud-kubernetes-service-3j51</link>
      <guid>https://dev.to/ibmdeveloper/deep-dive-and-deploy-onto-ibm-cloud-kubernetes-service-3j51</guid>
      <description>&lt;p&gt;Welcome to THINK Days!&lt;/p&gt;

&lt;p&gt;A weekly blog series where I discuss and share my journey with IBM Cloud Services. At some point most of us have come across containers and images that we have managed on our own DockerHub. And running a few containers on your own is fine, but what do you do when you're running hundreds or thousands? That's where you need a container orchestration and that's precisely where Kubernetes comes in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-kubernetes"&gt;
  &lt;/a&gt;
  What is Kubernetes?
&lt;/h2&gt;

&lt;p&gt;Kubernetes is an open source project under the Cloud Native Computing Foundation(CNCF). It's around seven years young, has thousands of commits, and is a vibrant, well-supported&lt;br&gt;
open source ecosystem with many vendors contributing to the project from IBM to Google to Microsoft to Amazon (you get this gist). In fact, there are over 150 certified Kubernetes providers on the market today!&lt;/p&gt;

&lt;p&gt;The goal of Kubernetes is to make everything associated with deploying and managing your containers easier. This means it has automated rollouts and rollbacks which will scale your services up or down based on utilization. This ensures that you're only running what you need when you need it. It will monitor the health of your services to prevent bad roll outs. They will also continuously run health checks against your services and thereby restart containers that fail.&lt;/p&gt;

&lt;p&gt;Most importantly, Kubernetes is built to be used anywhere, allowing you to orchestrate deployments to public clouds, private clouds, on premise, or even hybrid cloud deployments.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#kubernetes-high-level-overview"&gt;
  &lt;/a&gt;
  Kubernetes High Level Overview
&lt;/h2&gt;

&lt;p&gt;The most common way that a System Administrator would interact with Kubernetes is through the &lt;code&gt;kubectl&lt;/code&gt; CLI. This acts as the communication between System Admin and a specific Kubernetes Cluster.&lt;br&gt;
The natural question is what is a cluster and how does that relate to my containerized images? Well, each cluster will have a master node and at least one worker node. Each worker node can support running multiple pods. Each pod is intern running an image of a containerized application.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#ibm-cloud-kubernetes-service"&gt;
  &lt;/a&gt;
  IBM Cloud Kubernetes Service
&lt;/h2&gt;

&lt;p&gt;IBM Cloud offers a fully managed Kubernetes service in a matter of minutes called IBM Cloud Kubernetes Service or IKS. You can spin up your own Kubernetes cluster, have access to worker nodes, and start deploying applications. IBM Cloud's Kubernetes service has many benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fully managed&lt;/li&gt;
&lt;li&gt;provides automatic upgrades&lt;/li&gt;
&lt;li&gt;Security Compliance (PCI ,HIPAA, SOC1, and more)&lt;/li&gt;
&lt;li&gt;configure as a single or multi zone cluster
IKS also has several supported add-on benefits:&lt;/li&gt;
&lt;li&gt;a service mesh or serverless onto your cluster.&lt;/li&gt;
&lt;li&gt;logging and monitoring.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's dive a little deeper...&lt;/p&gt;

&lt;p&gt;IKS can be deployed to any of the six regions on IBM Cloud. This includes North America, East, West, South, the APAC Region, Europe and South America.&lt;br&gt;
There are different ways to deploy IBM Cloud Kubernetes service. The first is on a virtual shared instance. This will provision IKS on virtual machines.&lt;br&gt;
Next is a virtual dedicated instance which is going to provision your cluster on a dedicated server. Note, that this is a single tenant instance. &lt;br&gt;
Lastly, you can provision your Kubernetes cluster on a bare metal server.&lt;br&gt;
Each type of deployment has multiple profiles ranging from 2vCPU to 512 gigabytes of RAM. The billing for IKS is hourly, monthly or even has a LITE option which is free for one cluster upto a certain limit.&lt;br&gt;
There are two other services worth highlighting when discussing IKS:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#ibm-cloud-container-registry"&gt;
  &lt;/a&gt;
  IBM Cloud Container Registry
&lt;/h3&gt;

&lt;p&gt;The first is the IBM Cloud Container Registry which is used to store container images in a fully managed multi-tenant registry. It's highly available as the service is hosted and managed by IBM Cloud. You can configure your images to be privately accessed by other users in your IBM Cloud&lt;br&gt;
account shareable with API keys or even make them publicly available. Images in the container registry will also be scanned by the vulnerability advisor tool which makes it secure. If you would like a tutorial on this service, be sure to checkout my blog to &lt;a href="https://dev.to/ibmdeveloper/deploy-a-nodejs-app-to-ibm-cloud-container-registry-46m2"&gt;Deploy a NodeJS app to IBM Cloud Container Registry&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#helm-catalog"&gt;
  &lt;/a&gt;
  Helm Catalog
&lt;/h3&gt;

&lt;p&gt;The other service is the Helm Catalog which is unique to IBM Cloud. It allows users to use helm to install and upgrade complex Kubernetes applications in a cluster. The helm catalog in IBM Cloud has access to IBM products, popular open source products, like Jenkins and Tecton, and supports multiple architectures like X86 power NZ.&lt;/p&gt;

&lt;p&gt;Now that we have dived into the features and availabilities on IBM Cloud Kubernetes service let's take a look at how to deploy an app onto this.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#tutorial"&gt;
  &lt;/a&gt;
  Tutorial
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#create-a-free-kubernetes-cluster"&gt;
  &lt;/a&gt;
  Create a free Kubernetes cluster
&lt;/h3&gt;

&lt;p&gt;Navigate to &lt;a href="https://cloud.ibm.com"&gt;https://cloud.ibm.com&lt;/a&gt; to log into IBM Cloud. You'll be presented with an empty console. Click on the Catalog button on the top-right.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DQnTXgpb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9boltuxpzobfy141kq6k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DQnTXgpb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9boltuxpzobfy141kq6k.png" alt="Screen Shot 2021-09-10 at 2.01.19 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From the catalog, choose the Kubernetes option.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PR2TfzEy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ubdr7tcywpkkujgpn8x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PR2TfzEy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ubdr7tcywpkkujgpn8x.png" alt="Screen Shot 2021-09-10 at 2.02.59 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose the Free tier option, give your cluster a unique name and click Create.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DvLGk5LY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gictbbb27cysq23joyoj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DvLGk5LY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gictbbb27cysq23joyoj.png" alt="Screen Shot 2021-09-10 at 2.04.03 PM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#launch-the-ibm-cloud-shell"&gt;
  &lt;/a&gt;
  Launch the IBM Cloud Shell
&lt;/h3&gt;

&lt;p&gt;Once your cluster is created click on the &lt;code&gt;Actions&lt;/code&gt; menu on the top right, and choose the &lt;code&gt;Connect via CLI&lt;/code&gt; option.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eteCIbr3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89mar7jof58ho9jaweyl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eteCIbr3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89mar7jof58ho9jaweyl.png" alt="Screen Shot 2021-09-10 at 2.05.50 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the clipboard to copy the command, the one using the ibmcloud ks cluster config command. This will set any kubectl commands to use your newly created cluster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jcWGhip4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hl00y7oobmwsyt1zka4m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jcWGhip4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hl00y7oobmwsyt1zka4m.png" alt="Screen Shot 2021-09-10 at 2.29.38 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we'll be using the IBM Cloud Shell, which is available by clicking on the terminal icon on the top right.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B8lH8Ig0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d8u3i7idhfqc9i9oytm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B8lH8Ig0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d8u3i7idhfqc9i9oytm.png" alt="Screen Shot 2021-09-10 at 2.38.13 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once loaded, you'll be presented with an embedded web terminal that has the &lt;code&gt;ibmcloud&lt;/code&gt; and &lt;code&gt;kubectl&lt;/code&gt; CLIs available.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BCUGv6A6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oncxrg18cpjol7rgwaxj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BCUGv6A6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oncxrg18cpjol7rgwaxj.png" alt="Screen Shot 2021-09-10 at 2.39.52 PM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#connect-to-your-cluster"&gt;
  &lt;/a&gt;
  Connect to your cluster
&lt;/h3&gt;

&lt;p&gt;From the IBM Cloud Shell, run the following command, replacing your cluster ID in the command below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ibmcloud ks cluster config --cluster &amp;lt;CLUSTER_ID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output should look something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rkv7-euV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vn5bci86wy4hnh7rkuxg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rkv7-euV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vn5bci86wy4hnh7rkuxg.png" alt="Screen Shot 2021-09-10 at 2.41.25 PM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#deploy-the-application"&gt;
  &lt;/a&gt;
  Deploy the application
&lt;/h3&gt;

&lt;p&gt;For this tutorial, we'll run a sample IBM Sample App that detects objects in a picture. Deploy the application by running the command below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl apply -f https://raw.githubusercontent.com/IBM/MAX-Object-Detector/master/max-object-detector.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XASpV1_y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ldb0wrjj6wvdc804vjmk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XASpV1_y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ldb0wrjj6wvdc804vjmk.png" alt="Screen Shot 2021-09-10 at 2.43.03 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#access-the-app-via-public-ip-and-port"&gt;
  &lt;/a&gt;
  Access the App via Public IP and Port
&lt;/h3&gt;

&lt;p&gt;After a few minutes, the application should be available. To access it we need to find the public IP address of the cluster, and the port the application is running on.&lt;/p&gt;

&lt;p&gt;To find the public IP address of the cluster run the command below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ibmcloud cs workers --cluster &amp;lt;CLUSTER_ID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And to find the port the application is running on, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl describe service max-object-detector | grep NodePort
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's finally put it all together and access the app. From your browser navigate to the URL with the information above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://&amp;lt;public-ip-address:&amp;lt;port&amp;gt;/app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--htLPxfd7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ijnj8kxfmtwvurlpw7v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--htLPxfd7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ijnj8kxfmtwvurlpw7v.png" alt="Screen Shot 2021-09-10 at 2.50.55 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oila! You have successfully deployed an app onto a cluster in IBM Cloud Kubernetes Service.&lt;/p&gt;

&lt;p&gt;Thank you for following along this THINK Day's Tutorial and be sure to look out for my next post, where I will continue sharing my Journey with IBM Cloud Services!!!&lt;/p&gt;

&lt;p&gt;==== Follow me on Social Media(&lt;code&gt;@mrinasugosh&lt;/code&gt;) ====&lt;br&gt;
Dev.to: &lt;a class="mentioned-user" href="https://dev.to/mrinasugosh"&gt;@mrinasugosh&lt;/a&gt;
 &lt;br&gt;
Github: &lt;a href="https://github.com/mrinasugosh"&gt;@mrinasugosh&lt;/a&gt;&lt;br&gt;
Twitter: &lt;a href="https://twitter.com/mrinasugosh"&gt;@mrinasugosh&lt;/a&gt;&lt;br&gt;
LinkedIn: &lt;a href="https://www.linkedin.com/in/mrinasugosh/"&gt;@mrinasugosh&lt;/a&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>docker</category>
      <category>cloud</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Developer Diaries: Week 4 - The exploding brain</title>
      <author>Brittany Joiner</author>
      <pubDate>Fri, 10 Sep 2021 18:34:27 +0000</pubDate>
      <link>https://dev.to/brittany_join/developer-diaries-week-4-the-exploding-brain-23ph</link>
      <guid>https://dev.to/brittany_join/developer-diaries-week-4-the-exploding-brain-23ph</guid>
      <description>&lt;p&gt;What a week! Let's dive right in. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#imposter-syndrome"&gt;
  &lt;/a&gt;
  Imposter Syndrome
&lt;/h1&gt;

&lt;p&gt;Let's start off with the &lt;em&gt;worst&lt;/em&gt; part of this week. I was getting a little discouraged because I had a PR that it just seemed no matter what I did on it, it wasn't good enough. And I 💯% know it's because I have a team that wants to push me and help me be the best version I can be, but man sometimes it's just a little deflating when you can't get something quite right. &lt;/p&gt;

&lt;p&gt;It had &lt;strong&gt;over 74 comments on it and 9 commits&lt;/strong&gt; before it was finally ready to go. And with each commit, I'd be like, okay this is perfect now, right? And it wasn't. 😭 I was like &lt;em&gt;"Do I even know what I'm doing? Should I be here if I can't write code well yet?"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But honestly, when I look at where it started vs where it ended, I could tell it was totally worth it, and I learned a lot along the way. Everyone was very patient with me and there was zero shaming for my lack of knowledge or anything like that - it was definitely a "let's do this better together" type of thing, and I was extremely grateful for it in the end, but in the process, I felt a little deflated at having to keep on trying and not getting it quite perfect.&lt;/p&gt;

&lt;p&gt;I actually found Reddit to be a nice space to vent for a bit and got a ton of encouragement on this post. So if you're having down days, that's totally normal. There's no such thing as perfect code, and more feedback is totally normal and helps you grow. Reach out to your folks and #TrustTheProcess.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#learning-how-to-test-with-jest"&gt;
  &lt;/a&gt;
  Learning How To Test with Jest
&lt;/h1&gt;

&lt;p&gt;Part of my Really Long PR (as it will henceforth be named) involved a request for setting up test. This is great, but I had never set up a test before, and it proved to be a little challenging - not just for me, but also another senior dev who was helping me! I was honestly a little encouraged that it wasn't a cut and dry, super simple thing for him either, but together we were able to figure it out, and I actually started added tests to my other PR that I had out, as well!&lt;/p&gt;

&lt;p&gt;So I'm going to try to start incorporating more of that to practice. I found Google a little frustrating here, because I'd be like "how do i x with Jest and Enzyme" and i saw all sorts of answers, and honestly, a lot of them didn't work at all. It was super strange. But with some patience and tweaking I was able to get it. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#standup-improvements"&gt;
  &lt;/a&gt;
  Standup Improvements
&lt;/h1&gt;

&lt;p&gt;We currently do standups on M/W/F, but we're contemplating moving those 15 minute meetings to T/TR, and on the other days do an "asynchronous" standup. To do that, we are evaluating if we want to just create a Slackbot reminder message in our channel, or if we want to involve a more formal Standup Bot tool, like &lt;a href="https://geekbot.com/"&gt;Geekbot&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I got to check into the standup bot tools, and I think Geekbot is actually pretty cool. Sends users a DM with questions, and then compiles those answers in a standup report in the channel. I had some fun while I was testing it out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P6jQz0ji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627656787232/KYOBPxkTX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P6jQz0ji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627656787232/KYOBPxkTX.png" alt="image (15).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all for this week! 👋&lt;/p&gt;

</description>
      <category>testing</category>
      <category>devjournal</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>The Top-10 reasons you should attend CascadiaJS 2021</title>
      <author>CascadiaJS Staff</author>
      <pubDate>Fri, 10 Sep 2021 18:29:49 +0000</pubDate>
      <link>https://dev.to/cascadiajs_staff/the-top-10-reasons-you-should-attend-cascadiajs-2021-3nlc</link>
      <guid>https://dev.to/cascadiajs_staff/the-top-10-reasons-you-should-attend-cascadiajs-2021-3nlc</guid>
      <description>&lt;p&gt;This year's CascadiaJS is going to be so big and so awesome, it's hard to fit everything that we're putting together for you into a single tweet.&lt;/p&gt;

&lt;p&gt;So here's a quick Top-10 list of why this year's event is going to be our best one yet. Don't miss out!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-the-speakers"&gt;
  &lt;/a&gt;
  1. The speakers
&lt;/h2&gt;

&lt;p&gt;This year's &lt;a href="https://2021.cascadiajs.com/speakers"&gt;speaker lineup&lt;/a&gt; is just out of this world Ringed planet&lt;/p&gt;

&lt;p&gt;From #web3 to #ML to #OpenSource to #a11y, there are talks for every kind of web developer and every stage in their career. And all in a single track, so you won't miss anything!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-an-awesome-virtual-experience"&gt;
  &lt;/a&gt;
  2. An awesome virtual experience
&lt;/h2&gt;

&lt;p&gt;For folks who don't live in Cascadia or prefer to stay at home, we are shipping the same, &lt;a href="https://2021.cascadiajs.com/conf"&gt;amazing virtual experience&lt;/a&gt; that we shipped last year!&lt;/p&gt;

&lt;p&gt;📺 Live streamed talks&lt;br&gt;
🤝 Networking activities&lt;br&gt;
🎉 Virtual parties &amp;amp; trivia &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-inperson-options"&gt;
  &lt;/a&gt;
  3. In-person options
&lt;/h2&gt;

&lt;p&gt;This year's conference is the 1st to feature &lt;a href="https://2021.cascadiajs.com/conf/hybrid"&gt;3 simultaneous in-person events&lt;/a&gt; in the major cities of Cascadia: Seattle, Portland and Vancouver BC Flag of United StatesFlag of Canada&lt;/p&gt;

&lt;p&gt;You can attend CascadiaJS from the comfort of your own city (and your own bed)!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-an-epic-goodie-box-shipped-to-you"&gt;
  &lt;/a&gt;
  4. An epic Goodie Box shipped to you!
&lt;/h2&gt;

&lt;p&gt;For every attendee who registers before &lt;code&gt;Sept 17&lt;/code&gt;, we are shipping them their own Goodie Box that will include a conference hoodie plus a bunch of other awesome goodies.&lt;/p&gt;

&lt;p&gt;We built a &lt;a href="https://2021.cascadiajs.com/hoodie-fit-guide"&gt;fit guide&lt;/a&gt; this year because people come in all shapes and sizes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-scholarships"&gt;
  &lt;/a&gt;
  5. Scholarships
&lt;/h2&gt;

&lt;p&gt;We have an &lt;a href="https://2021.cascadiajs.com/scholarships"&gt;Opportunity Scholarship program&lt;/a&gt; for folks who belong to under-represented groups or have issues purchasing tickets at full price.&lt;/p&gt;

&lt;p&gt;And, so far, it's been funded by &lt;em&gt;our community&lt;/em&gt; to the tune of $1360.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-a-hack-day"&gt;
  &lt;/a&gt;
  6. A Hack Day
&lt;/h2&gt;

&lt;p&gt;We are hosting our first ever &lt;a href="https://2021.cascadiajs.com/hackday"&gt;Hack Day&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;The folks from &lt;a href="http://battlesnake.com"&gt;Battlesnake&lt;/a&gt; are going to help us run the CascadiaJS Cup where developers code their very own BattleSnake and pit them against each other in 2 dimensional combat.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-central-venues-for-the-inperson-daytime-events"&gt;
  &lt;/a&gt;
  7. Central venues for the in-person daytime events
&lt;/h2&gt;

&lt;p&gt;The venues in Seattle, Portland and Vancouver BC for the daytime events are going to be EPIC.&lt;/p&gt;

&lt;p&gt;We've announced UBC Robson Square in Vancouver, and are on the cusp of making big announcements for SEA and PDX.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-epic-nighttime-after-parties"&gt;
  &lt;/a&gt;
  8. Epic night-time after parties
&lt;/h2&gt;

&lt;p&gt;The night-time Opening and Closing in-person after parties are going to be 🔥&lt;/p&gt;

&lt;p&gt;Like the daytime events, these events will be 100% private and will require everyone to be vaccinated.&lt;/p&gt;

&lt;p&gt;We're still working on the details, but the probability of karaoke 🎤 is &lt;em&gt;very&lt;/em&gt; high.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-postconference-workshops"&gt;
  &lt;/a&gt;
  9. Post-conference workshops
&lt;/h2&gt;

&lt;p&gt;Following the conference is an ENTIRE WEEK of &lt;a href="https://2021.cascadiajs.com/workshops"&gt;world-class programming workshops&lt;/a&gt; being hosted by &lt;a class="mentioned-user" href="https://dev.to/eveporcello"&gt;@eveporcello&lt;/a&gt;
 &lt;a class="mentioned-user" href="https://dev.to/blove"&gt;@blove&lt;/a&gt;
 &lt;a class="mentioned-user" href="https://dev.to/marcysutton"&gt;@marcysutton&lt;/a&gt;
 and Ben Ilegbodu 👀&lt;/p&gt;

&lt;p&gt;They are covering everything from #javascript to #a11y to #performance to #graphql and more!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-the-community"&gt;
  &lt;/a&gt;
  10. The community
&lt;/h2&gt;

&lt;p&gt;Finally, the last reason to attend CascadiaJS is because you'll be joining a kind of inclusive community of web developers.&lt;/p&gt;

&lt;p&gt;You may find a new job, you'll probably learn some new skills, but we KNOW you'll make some great friends Growing heart&lt;/p&gt;

&lt;p&gt;&lt;a href="http://2021.cascadiajs.com"&gt;http://2021.cascadiajs.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>How to create Pure CSS Glitch Animation 🤖 for Images and SVG</title>
      <author>Roden</author>
      <pubDate>Fri, 10 Sep 2021 18:08:31 +0000</pubDate>
      <link>https://dev.to/kerthin/how-to-create-pure-css-glitch-animation-for-images-and-svg-ojl</link>
      <guid>https://dev.to/kerthin/how-to-create-pure-css-glitch-animation-for-images-and-svg-ojl</guid>
      <description>&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;A few weeks ago, I made a post about how to make a Glitch Effect on pure CSS. But in that post I told you how to make a similar effect only for text. Today I want to tell you about how to implement such animation for images and SVG.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kerthin" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MEDW7r1U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--N_Cn4rKT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/634154/b6864fc7-4410-46ca-a11d-bc605dc6d2b1.jpeg" alt="kerthin"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kerthin/how-create-pure-css-glitch-effect-530p" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to create Glitch Effect 🤖 Pure CSS&lt;/h2&gt;
      &lt;h3&gt;Roden ・ Aug 20 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;Demo&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/RodenKerthin/embed/GYvKOg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;Images&lt;/h1&gt;

&lt;p&gt;Here, in fact, everything is very simple. Almost the same technology as with text animation.&lt;/p&gt;

&lt;h2&gt;HTML&lt;/h2&gt;

&lt;p&gt;Creating our block with a picture:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;CSS (SCSS)&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1)&lt;/strong&gt; We set styles for it (size and picture)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//rawcdn.githack.com/Kerthin/links/247cc9065bac7d5c23b45ff677bf1d2bceeb4324/img/glitch/imgTV/vanille.png);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Vanilla Image&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o8CwRoOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44wtq7djnm5bicitik53.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o8CwRoOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44wtq7djnm5bicitik53.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2)&lt;/strong&gt; We create 2 copies of ours in the form of pseudo-elements using &lt;code&gt;:before&lt;/code&gt; and &lt;code&gt;:after&lt;/code&gt; with &lt;code&gt;absolute positioning&lt;/code&gt; so that they are placed one after the other.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;before&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3)&lt;/strong&gt; After that, for each pseudo-element, we create our own &lt;code&gt;horizontal margins&lt;/code&gt; from the original coordinates.&lt;/p&gt;

&lt;p&gt;We also need to specify our own image for each pseudo-element, which is a modified original image using allow filters.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;:before&lt;/code&gt; bg-image&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UPwsJial--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/309l3gw0jdp38xt2dwcm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UPwsJial--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/309l3gw0jdp38xt2dwcm.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;:after&lt;/code&gt; bg-image&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3axVrjtn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nh935yk3uvxwmesvbdml.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3axVrjtn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nh935yk3uvxwmesvbdml.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And we also need to add the name of our &lt;code&gt;@keyframes&lt;/code&gt; animation to each pseudo-element that we will animate using the &lt;code&gt;clip&lt;/code&gt; property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;glitch&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;effect&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;infinite&lt;/span&gt; &lt;span class="nx"&gt;linear&lt;/span&gt; &lt;span class="nx"&gt;alternate&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//rawcdn.githack.com/Kerthin/links/247cc9065bac7d5c23b45ff677bf1d2bceeb4324/img/glitch/imgTV/red.jpg);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;glitch&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;effect&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;infinite&lt;/span&gt; &lt;span class="nx"&gt;linear&lt;/span&gt; &lt;span class="nx"&gt;alternate&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//rawcdn.githack.com/Kerthin/links/247cc9065bac7d5c23b45ff677bf1d2bceeb4324/img/glitch/imgTV/blue.jpg);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4)&lt;/strong&gt; And now we can just use our &lt;code&gt;clip&lt;/code&gt; animation, which we used in the &lt;code&gt;previous post&lt;/code&gt; about Glitch Animation for text. But only in the value of the &lt;code&gt;clip&lt;/code&gt; property, we must specify the size of our &lt;code&gt;.img&lt;/code&gt; element in &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; (see item &lt;code&gt;№1&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;keyframes&lt;/span&gt; &lt;span class="nx"&gt;glitch&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;effect&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;$i&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nx"&gt;through&lt;/span&gt; &lt;span class="nx"&gt;$steps&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;$steps&lt;/span&gt;&lt;span class="p"&gt;))}{&lt;/span&gt;
            &lt;span class="na"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0WtIXy3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/qrHcza2uMPzk78geJm/giphy.gif%3Fcid%3D790b761182595601f16b39d23a7016efaa64ec2f0741c534%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0WtIXy3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/qrHcza2uMPzk78geJm/giphy.gif%3Fcid%3D790b761182595601f16b39d23a7016efaa64ec2f0741c534%26rid%3Dgiphy.gif%26ct%3Dg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;SVG&lt;/h1&gt;

&lt;p&gt;Here the idea is approximately exactly the same, only here it will be more convenient for us not to work with pseudo-elements, but simply to create 3 identical svg elements.&lt;/p&gt;

&lt;h2&gt;HTML&lt;/h2&gt;

&lt;p&gt;We create a common container and put 3 copies of our SVG in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svgWrap&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svgWrap__text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;xlink&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#svgGlitch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/use&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/svg&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svgWrap__text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;xlink&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#svgGlitch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/use&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/svg&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svgWrap__text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;xlink&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#svgGlitch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/use&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/svg&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the &lt;code&gt;ID&lt;/code&gt; &lt;code&gt;#svgGlitch&lt;/code&gt;, we refer to our prepared &lt;code&gt;SVG template&lt;/code&gt;, so as not to copy the entire SVG code 3 times in a row.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SVG Template&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svgGlitch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;270&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;76&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;viewBox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 0 270 76&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;xmlns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://www.w3.org/2000/svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M0.84 38.288C0.84 49.488 4.376 58.48 11.448 65.264C18.52 72.048 27.64 75.44 38.808 75.44C45.048 75.44 50.536 74.224 55.272 71.792C60.04 69.328 63.64 66.56 66.072 63.488L61.176 59.552C58.936 62.624 55.944 65.04 52.2 66.8C48.488 68.56 44.28 69.44 39.576 69.44C30.392 69.44 23.176 66.4 17.928 60.32C12.712 54.24 10.072 46.512 10.008 37.136C9.944 27.888 12.408 20.656 17.4 15.44C22.392 10.192 29.256 7.568 37.992 7.568C41.288 7.568 44.584 8.032 47.88 8.96C51.208 9.888 53.976 11.232 56.184 12.992L61.032 7.376C58.088 5.328 54.584 3.76 50.52 2.672C46.456 1.584 42.248 1.04 37.896 1.04C27.112 1.04 18.232 4.656 11.256 11.888C4.312 19.12 0.84 27.92 0.84 38.288ZM48.312 47.216L57.864 48.896V65.648L66.072 63.488V48.896L72.36 47.216V42.416H48.312V47.216ZM53.016 10.4L55.896 24.032H61.368V2.62399H56.376L53.016 10.4ZM76.5855 74H100.106V70.16L92.5215 68.48L92.4255 48.704L92.5215 1.952L91.4175 0.463997L89.6415 0.367998L75.4335 1.99999V6.512L84.3615 7.952L84.4575 48.704L84.3615 68.48L76.5855 70.16V74ZM107.009 74H130.817V70.16L123.233 68.48L123.137 48.704L123.473 27.872L122.369 26H120.113L106.769 27.632V32.144L114.833 33.584L115.169 48.704L115.073 68.48L107.009 70.16V74ZM112.865 9.824C112.865 11.584 113.409 13.008 114.497 14.096C115.617 15.184 117.089 15.728 118.913 15.728C120.865 15.728 122.353 15.216 123.377 14.192C124.433 13.168 124.961 11.712 124.961 9.824C124.961 8.064 124.401 6.64 123.281 5.55199C122.193 4.464 120.737 3.92 118.913 3.92C116.961 3.92 115.457 4.432 114.401 5.456C113.377 6.48 112.865 7.936 112.865 9.824ZM134.737 32.144L142.561 32.72V48.704L142.225 66.176C142.225 69.056 142.737 71.152 143.761 72.464C144.817 73.744 146.577 74.384 149.041 74.384L160.225 72.608V68.768H153.409L151.057 66.032L150.625 48.704L151.441 19.28L149.857 17.36H147.601C146.545 19.344 145.073 21.488 143.185 23.792C141.329 26.096 138.513 27.696 134.737 28.592V32.144ZM148.801 32.144H161.329V27.248H148.993L148.801 32.144ZM166.385 51.2C166.385 58.304 168.577 64.064 172.961 68.48C177.377 72.864 182.913 75.056 189.569 75.056C195.265 75.056 199.665 74.048 202.769 72.032C205.873 69.984 208.177 67.952 209.681 65.936L207.233 63.056C205.473 64.688 203.457 66.064 201.185 67.184C198.913 68.272 196.113 68.816 192.785 68.816C187.793 68.816 183.585 67.136 180.161 63.776C176.769 60.384 175.057 55.872 175.025 50.24C174.993 43.68 176.385 38.72 179.201 35.36C182.017 31.968 185.377 30.272 189.281 30.272C192.193 30.272 194.657 30.944 196.673 32.288C198.689 33.6 199.841 35.2 200.129 37.088L205.937 31.184C204.177 29.168 201.921 27.632 199.169 26.576C196.417 25.488 193.121 24.944 189.281 24.944C183.137 24.944 177.777 27.472 173.201 32.528C168.657 37.584 166.385 43.808 166.385 51.2ZM199.313 33.2L201.377 42.944H206.129V25.904H201.761L199.313 33.2ZM215.617 74H237.217V70.16L230.593 68.48L230.497 48.704L230.593 1.904L229.249 0.367998H227.713L214.465 1.99999V6.512L222.433 7.952L222.529 48.704L222.433 68.48L215.617 70.16V74ZM230.353 39.44C231.985 36.912 234.113 35.024 236.737 33.776C239.393 32.496 242.001 31.856 244.561 31.856C247.601 31.856 249.937 32.736 251.569 34.496C253.201 36.224 254.017 38.144 254.017 40.256V48.704L253.921 68.48L246.337 70.16V74H269.185V70.16L262.081 68.48L261.841 48.704C261.841 48.704 261.873 47.568 261.937 45.296C262.033 43.024 262.081 40.704 262.081 38.336C262.081 34.176 260.833 30.912 258.337 28.544C255.873 26.144 252.177 24.944 247.249 24.944C243.345 24.944 239.633 26 236.113 28.112C232.625 30.224 230.161 32.864 228.721 36.032L230.353 39.44Z&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/svg&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;CSS (SCSS)&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1)&lt;/strong&gt; First, we need to specify the dimensions of our container and each SVG block separately. It is better to put the original sizes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;svgWrap&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;270&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;76&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;svgWrap__text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;270&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;76&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2)&lt;/strong&gt; Further, by analogy with the pictures, we set separate styles for each element. But this time instead of pseudo elements :before and :after, we will use :nth-child to access each child element separately.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;nth&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;nth&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;nth&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;fffafa&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;glitch&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;effect&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;infinite&lt;/span&gt; &lt;span class="nx"&gt;linear&lt;/span&gt; &lt;span class="nx"&gt;alternate&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;nth&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;f5f5f5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;glitch&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;effect&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;infinite&lt;/span&gt; &lt;span class="nx"&gt;linear&lt;/span&gt; &lt;span class="nx"&gt;alternate&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the case of SVG, we do not specify different images, but different colors using the &lt;code&gt;fill&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3)&lt;/strong&gt; We animate according to the same principle: as with images. We specify the desired &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; of the elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;keyframes&lt;/span&gt; &lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;glitch&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;effect&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;$i&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nx"&gt;through&lt;/span&gt; &lt;span class="nx"&gt;$steps&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;$steps&lt;/span&gt;&lt;span class="p"&gt;))}{&lt;/span&gt;
            &lt;span class="na"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;270&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wORAr92u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/b062ikuXuxO4niAZ87/giphy.gif%3Fcid%3D790b76112a9736b5904de5d2a5bb874348bbb28d18fb914e%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wORAr92u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/b062ikuXuxO4niAZ87/giphy.gif%3Fcid%3D790b76112a9736b5904de5d2a5bb874348bbb28d18fb914e%26rid%3Dgiphy.gif%26ct%3Dg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;The End&lt;/h1&gt;

&lt;p&gt;Well, that's it. Some of you may have a question, why not just specify all these possibilities for creating Glitch animations in the previous post, if all these soposoby differ little from each other? Or why not just supplement the previous post with this information? I will answer honestly, I was too lazy.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7_AgrGkG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/PPi5c8l8WDY7if1L8z/giphy-downsized-large.gif%3Fcid%3Decf05e47txrxtvkhyjvnkbwevfw7k8qrnuw9w237sgvrvq14%26rid%3Dgiphy-downsized-large.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7_AgrGkG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/PPi5c8l8WDY7if1L8z/giphy-downsized-large.gif%3Fcid%3Decf05e47txrxtvkhyjvnkbwevfw7k8qrnuw9w237sgvrvq14%26rid%3Dgiphy-downsized-large.gif%26ct%3Dg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I can advise you to subscribe to my &lt;a href="https://twitter.com/BelichenkoRoden"&gt;&lt;strong&gt;Twitter&lt;/strong&gt;&lt;/a&gt;, I also post my works there.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>css</category>
    </item>
    <item>
      <title>Hello World :O</title>
      <author>EyLoKy</author>
      <pubDate>Fri, 10 Sep 2021 17:48:21 +0000</pubDate>
      <link>https://dev.to/eyloky/hello-world-o-4bl3</link>
      <guid>https://dev.to/eyloky/hello-world-o-4bl3</guid>
      <description>&lt;h1&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello World
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#how-to-say-hello-world"&gt;
  &lt;/a&gt;
  How to say Hello World?
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Idk&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I guess like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log('Hello, World!');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#bye-world"&gt;
  &lt;/a&gt;
  Bye World
&lt;/h3&gt;

&lt;p&gt;Or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.write('BYE WORLD');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
    </item>
    <item>
      <title>The JavaScript Call Stack</title>
      <author>Dani Schuhman</author>
      <pubDate>Fri, 10 Sep 2021 16:52:52 +0000</pubDate>
      <link>https://dev.to/dani8439/the-javascript-call-stack-4ec8</link>
      <guid>https://dev.to/dani8439/the-javascript-call-stack-4ec8</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@anniespratt?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Annie Spratt&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/stack-of-books?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-javascript-call-stack"&gt;
  &lt;/a&gt;
  What is the JavaScript Call Stack?
&lt;/h2&gt;

&lt;p&gt;According to &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Call_stack"&gt;MDN&lt;/a&gt;: A call stack is a mechanism for an interpreter (like the JavaScript interpreter in a web browser) to keep track of its place in a script that calls multiple functions — what function is currently being run and what functions are called from within that function, etc.&lt;/p&gt;

&lt;p&gt;At its most basic level, the call stack is where our code is executed, using execution context. &lt;/p&gt;

&lt;p&gt;The JavaScript engine, a program that runs JavaScript code, contains both a call stack and a heap. For now, just know that the heap is a large, unstructured memory pool. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8F2z-tzw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.stack.imgur.com/xAQPR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8F2z-tzw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.stack.imgur.com/xAQPR.png" alt="Visual Representation of the Call Stack Imgur"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-the-call-stack-important"&gt;
  &lt;/a&gt;
  Why is the Call Stack Important?
&lt;/h2&gt;

&lt;p&gt;JavaScript is single threaded, or synchronous. It can only do one thing at a time. We can give it 100 tasks to perform, but it can't perform all 100 tasks simultaneously. It has to go through the process of completing one task before moving onto the next. It's incredibly orderly. &lt;/p&gt;

&lt;p&gt;Within the call stack, say for example, these 100 tasks are all functions. The call stack will stack each function's execution context on top of each other, in the order that they were called, like a pile of books, or boxes, or lego pieces, etc. At the top of the pile, is the current execution context we are within. Once that execution context is finished running, it'll be removed from the top of the pile. The book will be popped off, and it can move down the one directly below. And this will continue happening until the entire stack has been emptied, and the call stack returns to the global execution context, until something new is called. &lt;/p&gt;

&lt;p&gt;But what happens when there is a task within a task, or a second function within another function when in that call stack? In that case, if a second function has been called within a function, a new execution context is created, and pushed onto the top of the stack. The execution of that first function is paused, the second function is run through, and once that is completed, it is popped off the the call stack, and we return to the execution context of the first function, which then continues until it's finished, and we return to the Global Execution Context. &lt;/p&gt;

&lt;p&gt;While it might seem a little silly, here is an example of how switching execution contexts, and moving through the call stack works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function first(){
    console.log("Inside First.")
    function second(){
        console.log("First execution context paused, now inside Second.")
        function third(){
            console.log("Second execution context paused, now inside Third.")
        }
      third();
      console.log("Return to second's execution context."); 
    } 
  second();
  console.log("Return to first's execution context.");
}

first()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When first is called, it will print out to the console:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Inside First.
First execution context paused, now inside Second.
Second execution context paused, now inside Third.
Return into second's execution context.
Return to first's execution context.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every time a new function was called, the call stack worked its way through the execution context until completed, before moving back to the previous function, until eventually, all execution contexts were finished, and we returned to the Global Execution Context. &lt;/p&gt;

&lt;p&gt;The Global execution context will only pop off of the call stack when our program finishes, either by closing a browser window, or closing the terminal. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://eloquentjavascript.net/2nd_edition/03_functions.html"&gt;Eloquent JavaScript&lt;/a&gt;&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop"&gt;MDN Concurrency Model and the Event Loop&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Hello World received Serverless Microsoft team</title>
      <author>Frank Boucher ☁</author>
      <pubDate>Fri, 10 Sep 2021 16:26:07 +0000</pubDate>
      <link>https://dev.to/azure/hello-world-received-serverless-microsoft-team-47f9</link>
      <guid>https://dev.to/azure/hello-world-received-serverless-microsoft-team-47f9</guid>
      <description>&lt;p&gt;In this first episode of season 2, Anthony Chu ( &lt;a href="https://twitter.com/nthonyChu"&gt;@nthonyChu&lt;/a&gt; ) his bringing many different product manager of Azure Logic Apps, Azure Functions, and Azure Static Web Apps to share the best practices and help us to get started with Serverless&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/DrU0P1CWwRQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#welcome-amp-news"&gt;
  &lt;/a&gt;
  Welcome &amp;amp; News
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blogs.windows.com/windowsexperience/2021/08/31/windows-11-available-on-october-5"&gt;Windows 11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blogs.windows.com/windowsexperience/2021/09/07/the-content-you-care-about-simplified-and-reinvented-introducing-microsoft-start/"&gt;Microsoft Start&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#intro-to-serverless-azure-functions"&gt;
  &lt;/a&gt;
  Intro to Serverless / Azure Functions
&lt;/h2&gt;

&lt;p&gt;[&lt;a href="https://channel9.msdn.com/Shows/Hello-World/Hello-World-Serverless#time=05m09s"&gt;🎬 5:09&lt;/a&gt;]&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D6y5ciVi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/teg7r9zlmy7haih4gn7y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D6y5ciVi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/teg7r9zlmy7haih4gn7y.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-overview"&gt;Get started with your function today! &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#azure-functions-best-practices"&gt;
  &lt;/a&gt;
  Azure Functions Best Practices
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JwneacwN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yet4sg5501u71e3xez1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JwneacwN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yet4sg5501u71e3xez1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
[&lt;a href="https://channel9.msdn.com/Shows/Hello-World/Hello-World-Serverless#time=15m40s"&gt;🎬 15:40&lt;/a&gt;]&lt;br&gt;
In this segment we discuss different types of plans - Premium vs Consumption and when to choose one over the other (networking, always ready instances, etc). We'll also chat about general best practices such as organizing functions, sharing connections, avoid long running functions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-scale/?WT.mc_id=helloworld-17228-cxa"&gt;Learn more about Azure Functions hosting plan options&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-best-practices/?WT.mc_id=helloworld-17228-cxa"&gt;For the latest thinking on Azure Functions best practices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reach out to Cary Chai: &lt;a href="https://www.linkedin.com/in/caryzchai/"&gt;https://www.linkedin.com/in/caryzchai/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serverless-conf"&gt;
  &lt;/a&gt;
  Serverless Conf
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V5bbdSEB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rqw2ks9tb4j1k0918p8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V5bbdSEB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rqw2ks9tb4j1k0918p8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
[&lt;a href="https://channel9.msdn.com/Shows/Hello-World/Hello-World-Serverless#time=26m00s"&gt;🎬 26:00&lt;/a&gt;]&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Register today and learn more about this upcoming event: &lt;a href="https://aka.ms/azureserverlessconf"&gt;https://aka.ms/azureserverlessconf&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#intro-to-azure-logic-apps"&gt;
  &lt;/a&gt;
  Intro to Azure Logic Apps
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--COnWOh2z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c69jp7i8d4azuqpwgmyw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--COnWOh2z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c69jp7i8d4azuqpwgmyw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
[&lt;a href="https://channel9.msdn.com/Shows/Hello-World/Hello-World-Serverless#time=29m42s"&gt;🎬 29:42&lt;/a&gt;]&lt;br&gt;
In this segment we'll go over an introduction to Logic Apps and their key components.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To get started building your first workflow with Azure Logic Apps locally, check out &lt;a href="https://docs.microsoft.com/en-us/azure/logic-apps/create-single-tenant-workflows-visual-studio-code/?WT.mc_id=helloworld-17228-cxa"&gt;https://docs.microsoft.com/en-us/azure/logic-apps/create-single-tenant-workflows-visual-studio-code/?WT.mc_id=helloworld-17228-cxa&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Also, check out the difference between our single tenant and multi-tenant offerings: &lt;a href="https://docs.microsoft.com/en-us/azure/logic-apps/single-tenant-overview-compare/?WT.mc_id=helloworld-17228-cxa"&gt;https://docs.microsoft.com/en-us/azure/logic-apps/single-tenant-overview-compare/?WT.mc_id=helloworld-17228-cxa&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Last, take a closer look at understanding connectors in Azure: &lt;a href="https://docs.microsoft.com/en-us/azure/connectors/apis-list/?WT.mc_id=helloworld-17228-cxa"&gt;https://docs.microsoft.com/en-us/azure/connectors/apis-list/?WT.mc_id=helloworld-17228-cxa&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reach out to Parth: &lt;a href="https://www.linkedin.com/in/parth-shah-276a04171/"&gt;https://www.linkedin.com/in/parth-shah-276a04171/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#azure-fun-bytes"&gt;
  &lt;/a&gt;
  Azure Fun Bytes
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZCUikcr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r93gj9orficn4htqcc2g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZCUikcr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r93gj9orficn4htqcc2g.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
[&lt;a href="https://channel9.msdn.com/Shows/Hello-World/Hello-World-Serverless#time=39m47s"&gt;🎬 39:47&lt;/a&gt;]&lt;br&gt;
Jason Hand chats with Jay Gordon about this week's Azure Fun Bytes episode on LearnTV.&lt;br&gt;
Jay's guest, Christos Matskas talks about Secretless Azure Functions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check out &lt;a href="https://devblogs.microsoft.com/azure-sdk/secretless-azure-functions-dev-with-the-new-azure-identity-libraries/?WT.mc_id=helloworld-17228-cxa"&gt;Christos' blog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;See previous recordings of Azure Fun Bytes and more on the &lt;a href="https://devblogs.microsoft.com/devops/?WT.mc_id=helloworld-17228-cxa"&gt;Azure Devops Blog&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-azure-static-web-apps"&gt;
  &lt;/a&gt;
  Introduction to Azure Static Web Apps
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---elg_JdC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4t6qwxhqm9kyhmb019v7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---elg_JdC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4t6qwxhqm9kyhmb019v7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
[&lt;a href="https://channel9.msdn.com/Shows/Hello-World/Hello-World-Serverless#time=45m18s"&gt;🎬 46:18&lt;/a&gt;]&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/learn/paths/azure-static-web-apps/?WT.mc_id=helloworld-17228-cxa"&gt;Build Azure Static Web Apps with Microsoft Learn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reach out to Simona Cotin: &lt;a class="mentioned-user" href="https://dev.to/simona_cotin"&gt;@simona_cotin&lt;/a&gt;
 on Twitter&lt;br&gt;
Reach out to Anthony Chu: @nthonyChu on Twitter&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-can-also"&gt;
  &lt;/a&gt;
  You can also...
&lt;/h3&gt;

&lt;p&gt;‎Hello World on Spotify: &lt;a href="https://aka.ms/helloworld/podcast-spotify"&gt;https://aka.ms/helloworld/podcast-spotify&lt;/a&gt;&lt;br&gt;
‎Hello World on Google Podcasts: &lt;a href="https://aka.ms/helloworld/podcast-google"&gt;https://aka.ms/helloworld/podcast-google&lt;/a&gt;&lt;br&gt;
‎Hello World on Apple Podcasts: &lt;a href="https://aka.ms/helloworld/podcast-apple"&gt;https://aka.ms/helloworld/podcast-apple&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are live Wednesday and Thursday at 10am PST: &lt;a href="https://aka.ms/HelloWorld"&gt;https://aka.ms/HelloWorld&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;☁️&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>azure</category>
      <category>jamstack</category>
      <category>video</category>
    </item>
    <item>
      <title>What was your win this week?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 10 Sep 2021 16:21:51 +0000</pubDate>
      <link>https://dev.to/devteam/what-was-your-win-this-week-1mc2</link>
      <guid>https://dev.to/devteam/what-was-your-win-this-week-1mc2</guid>
      <description>&lt;p&gt;Hey there! &lt;/p&gt;

&lt;p&gt;Looking back on this past week, what was something you were proud of accomplishing?&lt;/p&gt;

&lt;p&gt;All wins count — big or small 🎉&lt;/p&gt;

&lt;p&gt;Examples of 'wins' include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a new project&lt;/li&gt;
&lt;li&gt;Fixing a tricky bug&lt;/li&gt;
&lt;li&gt;Trying out a new recipe... or whatever else might spark joy ❤️ &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Happy Friday — and congrats on your wins! 🎊 &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F7_pv13A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/26gsfdArwyEnXnDGw/giphy.gif%3Fcid%3Decf05e47zz9elnkhpte2wqd62rl31a0lq872lz43ghrku3od%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F7_pv13A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/26gsfdArwyEnXnDGw/giphy.gif%3Fcid%3Decf05e47zz9elnkhpte2wqd62rl31a0lq872lz43ghrku3od%26rid%3Dgiphy.gif%26ct%3Dg" alt="Hip hip hooray"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>How to configure the Ceph Grafana dashboards manually</title>
      <author>Daniel Persson</author>
      <pubDate>Fri, 10 Sep 2021 16:16:26 +0000</pubDate>
      <link>https://dev.to/kalaspuffar/how-to-configure-the-ceph-grafana-dashboards-manually-264l</link>
      <guid>https://dev.to/kalaspuffar/how-to-configure-the-ceph-grafana-dashboards-manually-264l</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/c8R64LF3JjU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I did not have Grafana dashboards that worked in my Ceph installation. Hence, I had to install Prometheus and Grafana manually and then configure the dashboards to show up in my Ceph cluster dashboard screens.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Vocabulary Building day14</title>
      <author>vindhya Hegde </author>
      <pubDate>Fri, 10 Sep 2021 16:14:58 +0000</pubDate>
      <link>https://dev.to/vindhyasadanand/vocabulary-building-day14-2e49</link>
      <guid>https://dev.to/vindhyasadanand/vocabulary-building-day14-2e49</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;concede&lt;/strong&gt;(verb): admit or agree that something is true after first denying or resisting it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GTAfm5Vn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.pilotonline.com/resizer/a36DVQdDTw3c99rhsOujFkxMKZw%3D/1200x0/top/cloudfront-us-east-1.images.arcpublishing.com/tronc/3M4FXMUL75BO7ETXIVOWR23U2M.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GTAfm5Vn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.pilotonline.com/resizer/a36DVQdDTw3c99rhsOujFkxMKZw%3D/1200x0/top/cloudfront-us-east-1.images.arcpublishing.com/tronc/3M4FXMUL75BO7ETXIVOWR23U2M.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=concede&amp;amp;oq=concede&amp;amp;aqs=chrome..69i57j0i433i512j0i20i263i512j0i512l5j0i20i263i512j0i512.3633j1j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;gainsay&lt;/strong&gt;(verb): deny or contradict, speak against or oppose&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n11hPWkc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-c9l7CXVUEw8/WrmRYNiSriI/AAAAAAAAA2s/BgTvgIzk8Q82N9p5DaQ2CV1FMc1wCRvTACHMYCw/s640/Untitled51.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n11hPWkc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-c9l7CXVUEw8/WrmRYNiSriI/AAAAAAAAA2s/BgTvgIzk8Q82N9p5DaQ2CV1FMc1wCRvTACHMYCw/s640/Untitled51.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=gainsay&amp;amp;oq=ga&amp;amp;aqs=chrome.0.69i59j69i57j69i59j0i131i433i512j0i131i433j69i60l3.2974j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;engender&lt;/strong&gt;(adjective): cause or give rise to (a feeling, situation, or condition).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u1w8iTk6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.squarespace-cdn.com/content/v1/5563c849e4b09841c644c3bc/1433558448712-1ARIE1J0KQO3CCHD90VO/image-asset.jpeg%3Fformat%3D2500w" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u1w8iTk6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.squarespace-cdn.com/content/v1/5563c849e4b09841c644c3bc/1433558448712-1ARIE1J0KQO3CCHD90VO/image-asset.jpeg%3Fformat%3D2500w" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=dictatorial&amp;amp;oq=dictatorial&amp;amp;aqs=chrome.0.69i59j0i20i263i433i512j0i20i263i512j0i512l7.5343j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;conspicuous&lt;/strong&gt;(adjective): clearly visible,attracting notice or attention.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6oVwRdj2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.wordinfo.info/words/images/conspicuous-1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6oVwRdj2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.wordinfo.info/words/images/conspicuous-1.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=conspicuous&amp;amp;oq=conspicuous&amp;amp;aqs=chrome..69i57j35i39j0i20i263i512j0i512j0i433i512l2j0i512l4.1851j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;gall&lt;/strong&gt;(noun): the trait of being rude and impertinent.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZUnB_ICI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.tfd.com/wn/32/66911-gall.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZUnB_ICI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.tfd.com/wn/32/66911-gall.png" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=gall+meaning&amp;amp;oq=gall&amp;amp;aqs=chrome.1.69i59l2j0i433i512l2j0i20i263i433i512j46i175i199i512j69i65j69i60.3669j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;br&gt;
I hope this helps you if you are preparing for GRE exams.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>gre</category>
      <category>day14</category>
    </item>
    <item>
      <title>Scripting support added to the Structurizr DSL</title>
      <author>Simon Brown</author>
      <pubDate>Fri, 10 Sep 2021 16:10:41 +0000</pubDate>
      <link>https://dev.to/simonbrown/scripting-support-added-to-the-structurizr-dsl-2ehm</link>
      <guid>https://dev.to/simonbrown/scripting-support-added-to-the-structurizr-dsl-2ehm</guid>
      <description>&lt;p&gt;The &lt;a href="https://github.com/structurizr/dsl"&gt;Structurizr DSL&lt;/a&gt; now provides a way to run scripts written in Groovy, Kotlin, Ruby, and JavaScript, via the new &lt;code&gt;!script&lt;/code&gt; keyword. This gives you access to the underlying &lt;a href="https://github.com/structurizr/java"&gt;Structurizr for Java&lt;/a&gt; workspace, for when you need to do something not supported by the DSL.&lt;/p&gt;

&lt;p&gt;For example, you could use a script to create the default set of views, without automatic layout enabled:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;workspace {

    model {
        user = person "User"
        softwareSystem = softwareSystem "Software System"

        user -&amp;gt; softwareSystem "Uses"
    }

    !script groovy {
        workspace.views.createDefaultViews()
        workspace.views.views.each { it.disableAutomaticLayout() }
    }   

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could also use a script to programmatically add elements to a view, using more complicated logic than is possible via the DSL alone.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;workspace {

    model {
        group "Group 1" {
            a = softwareSystem "A" {
                tags "Tag 1"
            }
            b = softwareSystem "B" {
                tags "Tag 2"
            }
        }
        group "Group 2" {
            c = softwareSystem "C" {
                tags "Tag 1"
            }
            d = softwareSystem "D" {
                tags "Tag 2"
            }
        }
    }

    views {
        systemLandscape "key" {
            !script groovy {
                view = workspace.views.getViewWithKey("key");
                workspace.model.softwareSystems.findAll { it.group == "Group 1" &amp;amp;&amp;amp; it.hasTag("Tag 1") }.each{ view.add(it); };
            }

            autolayout
        }
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Scripting support is available now, via the open source &lt;a href="https://github.com/structurizr/cli"&gt;Structurizr CLI&lt;/a&gt; and the free &lt;a href="https://structurizr.com/help/lite"&gt;Structurizr Lite&lt;/a&gt;. See the &lt;a href="https://github.com/structurizr/dsl/blob/master/docs/language-reference.md#scripts"&gt;Structurizr DSL language reference - Scripts&lt;/a&gt; and the &lt;a href="https://github.com/structurizr/dsl/tree/master/docs/cookbook/scripts"&gt;Structurizr DSL cookbook - Scripts&lt;/a&gt; for more details.&lt;/p&gt;

</description>
      <category>architecture</category>
    </item>
  </channel>
</rss>
