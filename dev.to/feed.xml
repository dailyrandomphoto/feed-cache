<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>14 CSS Topics You Must Know</title>
      <author>üÖ∞Ô∏è GEEK</author>
      <pubDate>Mon, 19 Apr 2021 04:29:58 +0000</pubDate>
      <link>https://dev.to/ageekdev/14-css-topics-you-must-know-2e0g</link>
      <guid>https://dev.to/ageekdev/14-css-topics-you-must-know-2e0g</guid>
      <description>&lt;p&gt;It has been more than 2 decades and we‚Äôre still using CSS for styling. It is simple to learn and here to stay for many years to come. As frontend developer, you are expected to be solid at CSS styling no matter what technologies you‚Äôre using.&lt;/p&gt;

&lt;p&gt;The way we write CSS has changed a little bit in recent years following the rise of JavaScript frameworks. CSS architecture has been moving to direction of local separate styled components than global shared style sheet.&lt;/p&gt;

&lt;p&gt;This post covers 14 essential CSS topics, originally published at &lt;a href="https://ageek.dev/css"&gt;ageek.dev&lt;/a&gt;, which you think you already know but might not be deep enough to be extremely productive on modern web development.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://ageek.dev/css-history"&gt;A bit about CSS history&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ageek.dev/problems-of-css"&gt;On problems of CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ageek.dev/current-state-of-css"&gt;Current state of CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ageek.dev/how-css-works"&gt;How CSS works under the hood&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ageek.dev/css-specificity"&gt;How to calculate CSS specificity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ageek.dev/css-cascading"&gt;A closer look at CSS cascading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ageek.dev/css-inheritance"&gt;Writing less CSS code with inheritance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ageek.dev/css-layouts"&gt;Different CSS layouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ageek.dev/css-frameworks"&gt;Beloved CSS frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ageek.dev/css-in-js"&gt;CSS-in-JS styling technique&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ageek.dev/css-methodologies"&gt;Long-standing CSS methodologies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ageek.dev/css-preprocessors"&gt;Extending standard CSS by preprocessors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ageek.dev/css-resets"&gt;The opinionated decision on CSS resets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ageek.dev/css-style-guides"&gt;The need of CSS style guides&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to send data (state and props) between unrelated components in react</title>
      <author>kimbi619</author>
      <pubDate>Mon, 19 Apr 2021 04:12:49 +0000</pubDate>
      <link>https://dev.to/kimbi619/how-to-send-data-state-and-props-between-unrelated-components-in-react-51a1</link>
      <guid>https://dev.to/kimbi619/how-to-send-data-state-and-props-between-unrelated-components-in-react-51a1</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zYlxNzmj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5c9ufxued13c6z2lbr3h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zYlxNzmj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5c9ufxued13c6z2lbr3h.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
If you are new to react, you may have heard that data only flows in one direction as illustrated by the image above. To pass data from a lower level component to its parent or one of it's ancestors, you use something called &lt;a href="https://reactjs.org/docs/lifting-state-up.html"&gt;lifting up state&lt;/a&gt;, where data is being moved up to higher components having same parents and passing it down as props.&lt;br&gt;
In React, a state is always owned by one component. Any changes made by this state can only affect the components below it, i.e. its children. Changing state on a component will never affect its parent or its siblings, only the children will be affected. This is the main reason that the state is often moved up in the component tree so that it can be shared between the components that need to access it. However, to have a state affect directly an unrelated component was hard until the &lt;a href="https://reactjs.org/docs/context.html"&gt;useContext Hook&lt;/a&gt; was added to react.&lt;/p&gt;

&lt;p&gt;Suppose from the image you have an event listener on the component &lt;strong&gt;C&lt;/strong&gt; and you want it to cause a action on &lt;strong&gt;A&lt;/strong&gt; as illustrated above without having to send data to the database and getting that data from there. The answer to your problem is the use context hook in React. I will use the example on a book app I was creating for a library to explain this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, {createContext, useState} from 'react'

export const BookHoldContext = createContext();

export const BookHoldProvider = (props)=&amp;gt;{
    const [clickedBook, setClickedBook] = useState(null);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Declaring using the useState method in react, you can create the data that you want to pass to the different components after importing the createContext method in react as in the first line. I have initially set it to &lt;code&gt;null&lt;/code&gt;, so that every time an event happens on it you get to set the data to what you currently want to get. Now to return this context, you use the context.Provider as below and pass the state as props in the value, except they are not especially props but return values.&lt;br&gt;
This is still within the provider function declared above&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return(
        &amp;lt;BookHoldContext.Provider value={[clickedBook, setClickedBook]}&amp;gt;
            {props.children}
        &amp;lt;/BookHoldContext.Provider&amp;gt;
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now to actually consume this context, you need to go to their common parent component and wrap the component  you need to provide access to with the Provider tag, after importing it of course &lt;code&gt;import { BookHoldProvider } from './BookHoldContext'&lt;/code&gt;&lt;br&gt;
in my case I need to share it between the book item and the book detail&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return(
        &amp;lt;div id="book"&amp;gt;
            &amp;lt;BookHoldProvider&amp;gt;
            &amp;lt;div className="container"&amp;gt;
                &amp;lt;ul className="bookItem"&amp;gt;
                    {
                    AllBooks.map((book)=&amp;gt;(
                        &amp;lt;li key={book.isbn} &amp;gt;&amp;lt;Book book={book} 
                         showDetail={showDetail} /&amp;gt;&amp;lt;/li&amp;gt;
                    ))}
                &amp;lt;/ul&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;BookDetail showDetail = {showDetail}/&amp;gt;
            &amp;lt;/BookHoldProvider&amp;gt;
        &amp;lt;/div&amp;gt;
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, on the function you where actually suppose to put that state on, you can import the created context and the useContext method inbuild in React&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {useContext} from 'react';
import {BookHoldContext} from './BookHoldContext';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function BookDetail(){

    const [clickedBook, setClickedBook] = 
    useContext(BookHoldContext);
    return (
        &amp;lt;div className='bookToLoan' &amp;gt;
         {console.log(clickedBook)}
        &amp;lt;/div&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside your component, you can call those values (useState hook) you passed in the context Provider and the data can be used. ü§ó&lt;/p&gt;

&lt;p&gt;This is actually my first post here guys, I hope it helps someone&lt;/p&gt;

</description>
      <category>react</category>
      <category>usecontext</category>
      <category>hooks</category>
      <category>states</category>
    </item>
    <item>
      <title>Who is Emmet?! (Your New Best Friend!)</title>
      <author>Max Zander</author>
      <pubDate>Mon, 19 Apr 2021 03:30:50 +0000</pubDate>
      <link>https://dev.to/maxjacobzander/who-is-emmet-your-new-best-friend-57dc</link>
      <guid>https://dev.to/maxjacobzander/who-is-emmet-your-new-best-friend-57dc</guid>
      <description>&lt;p&gt;The first time I heard about Emmet abbreviations, my mind was blown completely wide open. I was amazed by the sheer power and ease of this tool and wondered how I had never heard about it. If you still don't know about Emmet, allow me to introduce you to your new best friend!&lt;/p&gt;




&lt;p&gt;So who is Emmet? Well, the real question is not "&lt;em&gt;who&lt;/em&gt; is Emmet?" but "&lt;em&gt;what&lt;/em&gt; is Emmet?" Emmet is a plugin for text editors that is meant to do a lot of heavy lifting for you. If you're like me and your text editor of choice is &lt;a href="https://code.visualstudio.com/"&gt;VSCode&lt;/a&gt;, support for Emmet is already built in and you don't have to do a thing to start taking advantage of it. Otherwise, all you have to is install the plugin and you're ready to go.&lt;/p&gt;

&lt;p&gt;At its core, Emmet is really just a series of keyboard shortcuts. When I was first introduced to Emmet, I certainly did not realize how much it could do. In fact, I initially thought that the first Emmet abbreviation that I learned was a standalone shortcut. Now, Emmet can be used for a &lt;strong&gt;lot&lt;/strong&gt; including CSS, XML, and more, but if you're just getting started and/or have not dealt with Emmet before, allow me to show you some of the abbreviations that I have come to use for HTML on a daily basis.&lt;/p&gt;

&lt;p&gt;If you're starting up an HTML project and you need some template code, you can Google it, or you can just type &lt;code&gt;!&lt;/code&gt; and hit &lt;code&gt;enter&lt;/code&gt;/&lt;code&gt;return&lt;/code&gt; , and Emmet will then expand it to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Perhaps my most commonly-used Emmet abbreviations are the ones for classes and ids. By default, if you use Emmet abbreviation for a class and/or id with no other information, Emmet will assume that you're trying to create a &lt;code&gt;div&lt;/code&gt;. To create a &lt;code&gt;div&lt;/code&gt; with a class of "paragraph", you can just type &lt;code&gt;.paragraph&lt;/code&gt; and, when you hit &lt;code&gt;enter&lt;/code&gt;/&lt;code&gt;return&lt;/code&gt;, it will be expanded to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="paragraph"&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you wanted to just give that &lt;code&gt;div&lt;/code&gt; an id of "paragraph", you could type &lt;code&gt;#paragraph&lt;/code&gt;, and that will expand to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div id="paragraph"&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But where Emmet gets &lt;em&gt;really&lt;/em&gt; magical, is in its ability to chain abbreviations! So, let's say you wanted that &lt;code&gt;div&lt;/code&gt; to have both a class of "paragraph" and an id of "first-paragraph". All you'd have to do is type &lt;code&gt;.paragraph#first-paragraph&lt;/code&gt; and Emmet would expand that to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="paragraph" id="first-paragraph"&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And if you wanted that &lt;code&gt;div&lt;/code&gt; to be a &lt;code&gt;p&lt;/code&gt; tag, you'd just have to pop a "p" on to the beginning of your abbreviation like so: &lt;code&gt;p.paragraph#first-paragraph&lt;/code&gt; to get&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p class="paragraph" id="first-paragraph"&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;&lt;center&gt;Pretty awesome, right?!&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;And it's not just &lt;code&gt;p&lt;/code&gt; tags! If you wanted it to be an &lt;code&gt;h1&lt;/code&gt; or wanted to create a form, you could say &lt;code&gt;h1.header#heading&lt;/code&gt;, which would give you&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h1 class="header" id="heading"&amp;gt;&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or &lt;code&gt;form#my-awesome-form&lt;/code&gt;, which would give you&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form action="" id="my-awesome-form"&amp;gt;&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can even create &lt;code&gt;li&lt;/code&gt;s within &lt;code&gt;ul&lt;/code&gt;s! To create a &lt;code&gt;ul&lt;/code&gt; with four &lt;code&gt;li&lt;/code&gt;s with a class of "thing", you can say &lt;code&gt;ul&amp;gt;li.thing*4&lt;/code&gt; and Emmet magic will return&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
    &amp;lt;li class="thing"&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class="thing"&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class="thing"&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class="thing"&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And if you wanted to number the "things" (or maybe just felt particularly inspired by Dr. Seuss), you could say &lt;code&gt;ul&amp;gt;li.thing$*4&lt;/code&gt; to add numerical values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
    &amp;lt;li class="thing1"&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class="thing2"&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class="thing3"&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class="thing4"&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;All of this to say, Emmet is absolutely spectacular and, quite frankly, fun to use! I &lt;strong&gt;highly&lt;/strong&gt; recommend that you install the plugin (if necessary), learn these shortcuts, and take a look at the documentation to find out else Emmet can help you save time and be the most efficient developer you can be!&lt;/p&gt;

</description>
      <category>emmet</category>
      <category>shortcuts</category>
      <category>beginners</category>
      <category>plugins</category>
    </item>
    <item>
      <title>R pie</title>
      <author>maxwizard01</author>
      <pubDate>Mon, 19 Apr 2021 01:41:58 +0000</pubDate>
      <link>https://dev.to/maxwizard01/r-pie-ikh</link>
      <guid>https://dev.to/maxwizard01/r-pie-ikh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#how-to-construct-pie-charts-in-r-programming"&gt;
  &lt;/a&gt;
  How to construct Pie Charts in R programming
&lt;/h2&gt;

&lt;p&gt;Creating a basic pie chart in R is as easy as pie. If list or vector is a list of positive numbers, then simply use the pie() function to draw the pie. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example1"&gt;
  &lt;/a&gt;
  Example1
&lt;/h3&gt;

&lt;p&gt;let's try to use the following data to construct pie chart.&lt;br&gt;
30,40,60,50,30.&lt;br&gt;
To represent the five data listed above in pie chart we type the following codes:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ltlt-codesgtgt"&gt;
  &lt;/a&gt;
  &amp;lt;&amp;lt; Codes&amp;gt;&amp;gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight r"&gt;&lt;code&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;pie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#ltlt-resultgtgt"&gt;
  &lt;/a&gt;
  &amp;lt;&amp;lt; Result&amp;gt;&amp;gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VEYt7XRE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptn5vcprwcxnwhjrht7p.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VEYt7XRE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptn5vcprwcxnwhjrht7p.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
looking at the graph it is exactly the chart of the 5 data but it doesn't make sense enough as sometime it might not be just number we might need to label. so let's take a look at a beautiful example.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example2"&gt;
  &lt;/a&gt;
  Example2
&lt;/h3&gt;

&lt;p&gt;Represent the following table in form of pie chart.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Students&lt;/th&gt;
&lt;th&gt;Scores&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Maxwizard&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Precious&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Abass&lt;/td&gt;
&lt;td&gt;70&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;John&lt;/td&gt;
&lt;td&gt;65&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Victoria&lt;/td&gt;
&lt;td&gt;55&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Solutions&lt;br&gt;
to draw the pie we need to list all the score and the students name accordingly inside two different vector then put inside the pie function.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ltlt-codesgtgt"&gt;
  &lt;/a&gt;
  &amp;lt;&amp;lt; Codes&amp;gt;&amp;gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight r"&gt;&lt;code&gt;&lt;span class="n"&gt;Students&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Maxwizard"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"Precious"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"Abass"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"John"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"Victoria"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;Scores&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;55&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;pie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Scores&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Students&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#ltlt-resultgtgt"&gt;
  &lt;/a&gt;
  &amp;lt;&amp;lt; Result&amp;gt;&amp;gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WJ4gacKP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqg1f2tzmhkcwoasjtx0.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WJ4gacKP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqg1f2tzmhkcwoasjtx0.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
study the codes and the result it is not different from example1 except that we make use of label parameter. You should be careful when you need to label, notice that it is the score that we need to draw the graph. so all the students name should be assigned to the label parameter.&lt;/p&gt;

&lt;p&gt;However, while dealing with chart we might need to write the headings for our chart. Also we might prefer some colours to others. Therefore there are some other parameters which you can use to perform these actions, they are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;col&lt;/code&gt;&lt;/strong&gt;  : this is use to change the color of the part of the chart.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;main&lt;/code&gt;&lt;/strong&gt; : this is used to write the heading of your chart.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#example3"&gt;
  &lt;/a&gt;
  Example3
&lt;/h3&gt;

&lt;p&gt;the following table show the number of students in each class in Government secondary school. draw a pie chart for the table.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Class&lt;/th&gt;
&lt;th&gt;Number of Student&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;JSS1&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JSS2&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JSS3&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSS1&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSS2&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSS3&lt;/td&gt;
&lt;td&gt;65&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#ltlt-codesgtgt"&gt;
  &lt;/a&gt;
  &amp;lt;&amp;lt; Codes&amp;gt;&amp;gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight r"&gt;&lt;code&gt;&lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"JSS1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"JSS2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"JSS3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"SSS1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"SSS2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"SSS3"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;65&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'red'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'green'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'orange'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'yellow'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'violet'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;pie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Government Secondary School"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ltlt-resultgtgt"&gt;
  &lt;/a&gt;
  &amp;lt;&amp;lt; Result&amp;gt;&amp;gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XRKpEvls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yuz2l1h8kgy1vhyd3slz.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XRKpEvls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yuz2l1h8kgy1vhyd3slz.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
wooow! we just get a beautiful result! that is cool! but sometimes you might be working with so many data and you might not want to label that way. I mean you may like to represent it in form of key therefore you use something called legend label.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example4"&gt;
  &lt;/a&gt;
  Example4
&lt;/h3&gt;

&lt;p&gt;use the data in Example3 to plot a pie chart.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ltlt-codesgtgt"&gt;
  &lt;/a&gt;
  &amp;lt;&amp;lt; Codes&amp;gt;&amp;gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight r"&gt;&lt;code&gt;&lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"JSS1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"JSS2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"JSS3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"SSS1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"SSS2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"SSS3"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;65&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'red'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'green'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'orange'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'yellow'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'violet'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;pie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Government Secondary School"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;legendLabel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"bottomleft"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;legendLabel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#ltlt-resultgtgt"&gt;
  &lt;/a&gt;
  &amp;lt;&amp;lt; Result&amp;gt;&amp;gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E5lM7NWv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xuhkxq7nnacksobyw0s.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E5lM7NWv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xuhkxq7nnacksobyw0s.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Study the codes and the result, we make use of a function called &lt;code&gt;legend()&lt;/code&gt; to construct the legend label, the funtion takes four parameters.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;the position of the legend box&lt;/strong&gt;: this is parameter used to specify where the legend box should be place. it can be bottomleft,bottomright,topleft or topright. you can change the value written in your code to any of the other three to see how it works.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;legendLabel&lt;/strong&gt;: the is the key of the legend it usually contain the list of data(label) in the chart.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;fill&lt;/strong&gt;: this is the color, it should be the same color use to construct the chart.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;cex&lt;/strong&gt;: this is use to specify how big the legend box should be you can change the value to 1 then 2 to see the effect.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now I beleve you can now construct beautiful pie chart using R. coding is easy and fun just keep struggling and do not stop. like and comment below. you can also chat me up on whats-app &lt;code&gt;(07045225718)&lt;/code&gt; have a nice day!.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>tutorial</category>
      <category>datascience</category>
      <category>r</category>
    </item>
    <item>
      <title>I built tints &amp; shades generator tool</title>
      <author>Mahmoud Ibrahiam</author>
      <pubDate>Mon, 19 Apr 2021 01:33:24 +0000</pubDate>
      <link>https://dev.to/_zoka/i-built-tints-shades-generator-tool-379l</link>
      <guid>https://dev.to/_zoka/i-built-tints-shades-generator-tool-379l</guid>
      <description>&lt;p&gt;It is an easy, simple, and useful tool for those looking for quick and serious solutions.&lt;/p&gt;

&lt;p&gt;I added the ability to export colors as &lt;strong&gt;CSS&lt;/strong&gt; and &lt;strong&gt;Sass&lt;/strong&gt; variables to it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qVtLZWpL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y95t9vp2ubftkpb1y1b2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qVtLZWpL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y95t9vp2ubftkpb1y1b2.png" alt="tints &amp;amp; shades generator tool"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can try this tool and rate it, it is free and it will be free forever.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://darker.vercel.app/"&gt;Tints And Shades Generator Tool&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Game Baking: A One-Game-A-Month Extravaganza!</title>
      <author>Andrew-David J.</author>
      <pubDate>Mon, 19 Apr 2021 01:15:32 +0000</pubDate>
      <link>https://dev.to/andrewdavid/game-baking-a-one-game-a-month-extravaganza-2pno</link>
      <guid>https://dev.to/andrewdavid/game-baking-a-one-game-a-month-extravaganza-2pno</guid>
      <description>&lt;p&gt;Hey all!&lt;/p&gt;

&lt;p&gt;For 2021, I've decided to take on the one-game-a-month challenge.&lt;/p&gt;

&lt;p&gt;"1GAM" is a self-imposed challenge where I have to develop a brand new game every month. And in order to help me achieve that goal each month, I've decided to use random game jams as catalysts. These game jams offer different themes, restrictions, and timelines each month, which motivate me and help me come up with creative new ideas.&lt;/p&gt;

&lt;p&gt;And, in order to keep myself accountable, I've decided to also document each month's game in the form of a video devlog on &lt;a href="https://youtube.com/andrewdavidj"&gt;my YouTube channel&lt;/a&gt;. I've branded the devlog series "&lt;strong&gt;Game Baking with Andrew-David&lt;/strong&gt;"!&lt;/p&gt;

&lt;p&gt;I've produced three videos so far. The first is an introductory episode:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/KkmlUwPAww4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And the other two are the first two months' episodes:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aOxiuZ5ea6k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xe4mCrZ8wbo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The three games I've created so far are available to play for free on itch.io and consist of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://andrewdavidj.itch.io/calamixty"&gt;Calamixty&lt;/a&gt;: A chaotic potion-mixing puzzle game!&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://andrewdavidj.itch.io/scourge"&gt;An ExSCOURGEon Through Space &amp;amp; Time&lt;/a&gt;: A puzzle adventure game where you control rats by playing tunes on your flute.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://andrewdavidj.itch.io/cans"&gt;You CANS Do It&lt;/a&gt;: A turn-based, tile-based CCG where cans and bottle must do battle!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you would like to participate in the 1GAM challenge as well, you're welcome to do so alongside me &lt;a href="https://andrewdavid.club"&gt;on Discord&lt;/a&gt;! The next game jam I'm participating in is &lt;a href="https://ldjam.com/events/ludum-dare/48"&gt;Ludum Dare 48&lt;/a&gt; on April 23rd, 2021. &lt;/p&gt;

&lt;p&gt;And finally, if you like the series and would like to follow along, subscribe to the channel and feel free to support me &lt;a href="https://patreon.com/andrewdavidj"&gt;on Patreon!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Stay tuned for more!&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>unity3d</category>
      <category>challenge</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Unboxing the Qualcomm RB5 Robotics Kit</title>
      <author>Jameson</author>
      <pubDate>Mon, 19 Apr 2021 00:49:49 +0000</pubDate>
      <link>https://dev.to/jameson/unboxing-the-qualcomm-rb5-robotics-kit-4a0l</link>
      <guid>https://dev.to/jameson/unboxing-the-qualcomm-rb5-robotics-kit-4a0l</guid>
      <description>&lt;p&gt;Today I'll be showing some of my very first interactions with a &lt;a href="https://developer.qualcomm.com/qualcomm-robotics-rb5-kit"&gt;Qualcomm RB5 Robotics Kit&lt;/a&gt;. In their words:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Qualcomm Robotics RB5 development kit combines the promise of 5G with the computing power for AI, deep learning, computer vision, 7-camera concurrency, rich multimedia and security&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Inside the box, we get three parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The board itself,&lt;/li&gt;
&lt;li&gt;A USB-C cable,&lt;/li&gt;
&lt;li&gt;A power brick.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fVY3dNs0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/380130wyh4vl598jy2xw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fVY3dNs0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/380130wyh4vl598jy2xw.jpeg" alt="Inside the box, there's the RB5 main board, a USB-C cable, and a power brick"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sBxcoUDc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1dpr0bhrt6qb9ru2ae4.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sBxcoUDc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1dpr0bhrt6qb9ru2ae4.jpeg" alt="RB5 main board, USB-C cable, and a power brick"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://developer.qualcomm.com/qualcomm-robotics-rb5-kit/quick-start-guide/qualcomm_robotics_rb5_development_kit_bring_up"&gt;bringup guide&lt;/a&gt; tells us we'll need a Linux workstation, and a few utilities from the &lt;em&gt;Android&lt;/em&gt; SDK: &lt;code&gt;adb&lt;/code&gt; &amp;amp; &lt;code&gt;fastboot&lt;/code&gt;. In short, it looks like a familiar programming model:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Build device images on your local machine;&lt;/li&gt;
&lt;li&gt;Deploy and run those images on the device.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I'm on a Mac right now, so I won't have access to the full toolset needed to prepare the images. However, I've got a working &lt;code&gt;adb&lt;/code&gt; and &lt;code&gt;fastboot&lt;/code&gt;, so can easily interact with the device. This will likely &lt;em&gt;continue&lt;/em&gt; to be my workflow, even after I get a Linux build host going in EC2.&lt;/p&gt;

&lt;p&gt;Let's get the kit running. I connect the power brick, and then I connect the USB-C cable into my MacBook. After a bit, a green LED indicator lights up on the device:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3X43uOI0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gfzdq9nqtaah2jzapc6y.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3X43uOI0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gfzdq9nqtaah2jzapc6y.jpeg" alt="RB5 kit plugged in and powered up"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point, I'm able to see the device via &lt;code&gt;adb&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;adb devices
&lt;span class="go"&gt;List of devices attached
ZTR10S1600CS    device
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I can even login and probe for some details:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;adb shell
&lt;span class="gp"&gt;sh-4.4#&lt;/span&gt;&lt;span class="w"&gt; 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The device is running Ubuntu 18.04.05:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;sh-4.4#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;lsb_release &lt;span class="nt"&gt;-a&lt;/span&gt; 
&lt;span class="go"&gt;No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 18.04.5 LTS
Release:    18.04
Codename:   bionic
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The processor has 8 cores:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;sh-4.4#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;nproc&lt;/span&gt; 
&lt;span class="go"&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's an &lt;a href="https://en.wikipedia.org/wiki/AArch64"&gt;&lt;code&gt;AArch64&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;sh-4.4#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /proc/cpuinfo | &lt;span class="nb"&gt;grep&lt;/span&gt; ^Processor 
&lt;span class="go"&gt;Processor   : AArch64 Processor rev 14 (aarch64)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;sh-4.4#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;uname&lt;/span&gt; &lt;span class="nt"&gt;-a&lt;/span&gt; 
&lt;span class="gp"&gt;Linux qrb5165-rb5 4.19.125 #&lt;/span&gt;1 SMP PREEMPT Sat Mar 20 11:48:10 CST 2021 aarch64 aarch64 aarch64 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The board has 7650MB of memory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;sh-4.4#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;free &lt;span class="nt"&gt;-m&lt;/span&gt;
&lt;span class="go"&gt;              total        used        free      shared  buff/cache   available
Mem:           7650        1112        6058          12         478        6848
Swap:          3825           0        3825
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are a few USB devices on the board, an &lt;a href="https://www.digchip.com/datasheets/3291810-ax88179-usb-3-0-to-10-100-1000m.html"&gt;AX88179&lt;/a&gt; ethernet controller, and a couple of USB hubs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;sh-4.4#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;lsusb 
&lt;span class="go"&gt;Bus 002 Device 003: ID 0b95:1790 ASIX Electronics Corp. AX88179 Gigabit Ethernet
Bus 002 Device 002: ID 05e3:0625 Genesys Logic, Inc. 
Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
Bus 001 Device 002: ID 05e3:0610 Genesys Logic, Inc. 4-port hub
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not much on the PCI bus:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;sh-4.4#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;lspci 
&lt;span class="go"&gt;00:00.0 PCI bridge: Qualcomm Device 010b (rev ff)
01:00.0 Unassigned class [ff00]: Qualcomm Device 1101 (rev ff)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lots and lots of partitions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;sh-4.4#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mount 
&lt;span class="go"&gt;/dev/sda7 on / type ext4 (rw,relatime)
devtmpfs on /dev type devtmpfs (rw,relatime,size=2671320k,nr_inodes=667830,mode=755)
sysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)
proc on /proc type proc (rw,nosuid,nodev,noexec,relatime)
securityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)
tmpfs on /dev/shm type tmpfs (rw,nosuid,nodev)
devpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)
tmpfs on /run type tmpfs (rw,nosuid,nodev,mode=755)
tmpfs on /run/lock type tmpfs (rw,nosuid,nodev,noexec,relatime,size=5120k)
tmpfs on /sys/fs/cgroup type tmpfs (ro,nosuid,nodev,noexec,mode=755)
cgroup on /sys/fs/cgroup/unified type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate)
cgroup on /sys/fs/cgroup/systemd type cgroup (rw,nosuid,nodev,noexec,relatime,xattr,name=systemd)
cgroup on /sys/fs/cgroup/memory type cgroup (rw,nosuid,nodev,noexec,relatime,memory)
cgroup on /sys/fs/cgroup/pids type cgroup (rw,nosuid,nodev,noexec,relatime,pids)
cgroup on /sys/fs/cgroup/net_cls,net_prio type cgroup (rw,nosuid,nodev,noexec,relatime,net_cls,net_prio)
cgroup on /sys/fs/cgroup/freezer type cgroup (rw,nosuid,nodev,noexec,relatime,freezer)
cgroup on /sys/fs/cgroup/cpu,cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,cpu,cpuacct)
cgroup on /sys/fs/cgroup/devices type cgroup (rw,nosuid,nodev,noexec,relatime,devices)
cgroup on /sys/fs/cgroup/perf_event type cgroup (rw,nosuid,nodev,noexec,relatime,perf_event)
cgroup on /sys/fs/cgroup/schedtune type cgroup (rw,nosuid,nodev,noexec,relatime,schedtune)
cgroup on /sys/fs/cgroup/blkio type cgroup (rw,nosuid,nodev,noexec,relatime,blkio)
cgroup on /sys/fs/cgroup/cpuset type cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)
cgroup on /sys/fs/cgroup/debug type cgroup (rw,nosuid,nodev,noexec,relatime,debug)
mqueue on /dev/mqueue type mqueue (rw,relatime)
debugfs on /sys/kernel/debug type debugfs (rw,relatime)
tmpfs on /var/volatile type tmpfs (rw,relatime)
configfs on /sys/kernel/config type configfs (rw,relatime)
fusectl on /sys/fs/fuse/connections type fusectl (rw,relatime)
/dev/sde9 on /dsp type ext4 (ro,nosuid,nodev,noexec,noatime,discard,noauto_da_alloc,data=ordered)
/dev/sde4 on /firmware type vfat (ro,nodev,noexec,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=iso8859-1,shortname=mixed,errors=remount-ro)
/dev/sde5 on /bt_firmware type vfat (ro,nodev,noexec,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=iso8859-1,shortname=mixed,errors=remount-ro)
adb on /dev/usb-ffs/adb type functionfs (rw,relatime)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looks like a 128GB storage chip, split apart into different partitions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;sh-4.4#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;df&lt;/span&gt; &lt;span class="nt"&gt;-h&lt;/span&gt;
&lt;span class="go"&gt;Filesystem      Size  Used Avail Use% Mounted on
/dev/root        99G  6.0G   93G   7% /
devtmpfs        2.6G     0  2.6G   0% /dev
tmpfs           3.8G     0  3.8G   0% /dev/shm
tmpfs           3.8G   12M  3.8G   1% /run
tmpfs           5.0M  4.0K  5.0M   1% /run/lock
tmpfs           3.8G     0  3.8G   0% /sys/fs/cgroup
tmpfs           3.8G     0  3.8G   0% /var/volatile
/dev/sde9        59M   24M   34M  42% /dsp
/dev/sde4       395M   61M  335M  16% /firmware
/dev/sde5        64M  368K   64M   1% /bt_firmware
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've found &lt;em&gt;some&lt;/em&gt; of the components in the &lt;a href="https://developer.qualcomm.com/qualcomm-robotics-rb5-kit/hardware-reference-guide"&gt;hardware spec sheet&lt;/a&gt; so far, but just a few. Of particular interest, I'd like to locate some of the coprocessors (the "heterogeneous computing" bit):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Qualcomm Adreno 650 GPU&lt;/li&gt;
&lt;li&gt;Qualcomm Hexagon DSP&lt;/li&gt;
&lt;li&gt;Qualcomm Spectra 480 image processing&lt;/li&gt;
&lt;li&gt;Adreno 665 VPU video encode/decode&lt;/li&gt;
&lt;li&gt;Qualcomm Secure Processing Unit SPU240&lt;/li&gt;
&lt;li&gt;Qualcomm Neural Processing unit NPU230&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In an upcoming article, we'll start trying to exercise some of these components!&lt;/p&gt;

</description>
      <category>qualcomm</category>
      <category>robotics</category>
      <category>hardware</category>
    </item>
    <item>
      <title>Why you should learn Custom CSS?</title>
      <author>Coder Champ</author>
      <pubDate>Mon, 19 Apr 2021 00:29:36 +0000</pubDate>
      <link>https://dev.to/coderchamp/why-you-should-learn-custom-css-3mcb</link>
      <guid>https://dev.to/coderchamp/why-you-should-learn-custom-css-3mcb</guid>
      <description>&lt;p&gt;&lt;strong&gt;Custom CSS&lt;/strong&gt; is not new at all, thousands of web developers are using CSS to style their websites, and when you do not have a designer to create a custom design for your site, you will have to roll up your sleeves and take over the whole design process including writing custom CSS.  &lt;/p&gt;

&lt;p&gt;Some &lt;strong&gt;developers feel writing CSS is a challenging task&lt;/strong&gt;, but they are wrong, with a little practice you can handle CSS with perfection, and when you do it more than once, you will feel comfortable with CSS.&lt;/p&gt;

&lt;p&gt;There are numerous benefits of using custom CSS in blogs or for websites, but many people are not aware of them. This post will help you understand the benefits of custom CSS and how they can help you. &lt;/p&gt;

&lt;p&gt;Custom CSS helps you make improvements to the look and feel of your site without having to rely on third party plugins. It also allows you to make changes to the look and feel of your site quickly, without having to wait for anyone else to make the change for you.&lt;/p&gt;

&lt;p&gt;Before moving forward:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#we-just-launched-a-brand-new-course-at-udemy-limited-promo-codes"&gt;
  &lt;/a&gt;
  We just launched a brand new course at Udemy (Limited Promo Codes):
&lt;/h2&gt;

&lt;p&gt;It's a practical course. Below are the concepts which you will find in this course:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Structure and Project Organizing &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Responsive Website with Media Queries&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Better approach to make your CSS flexbox grid&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Flexibility, reusability and components &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Utilization of CSS utility classes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Color Management with CSS Variables&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;5 Golden tips to master CSS&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CSS Flexbox button over form technique&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#css-cardio-by-building-a-complete-responsive-website"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.udemy.com/course/css-cardio-by-building-a-responsive-website-css-flexbox/?couponCode=38E053BFE615CBDE0792"&gt;CSS Cardio by Building a Complete Responsive Website&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Lets continue:&lt;/p&gt;

&lt;p&gt;Frameworks have their own place (They help you to quickly prototype any project) but Custom CSS makes difference.&lt;/p&gt;

&lt;p&gt;Without depending on any framework/library you will be able to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Minimize code files and better speed&lt;/li&gt;
&lt;li&gt;Build your own website with your desired layout&lt;/li&gt;
&lt;li&gt;Create beautiful layouts using CSS&lt;/li&gt;
&lt;li&gt;Create animations by defining your desired values on the fly&lt;/li&gt;
&lt;li&gt;Create responsive layouts with flexbox or grids&lt;/li&gt;
&lt;li&gt;Create powerful navigation menus (Get inspirations from other websites and start implementing)&lt;/li&gt;
&lt;li&gt;Create a custom blog layout (Think out of the box)&lt;/li&gt;
&lt;li&gt;Create a portfolio layout (Will make you shine)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Yes, you can learn Web Development From basic to advance level from our brand new YouTube Channel: &lt;a href="https://www.youtube.com/c/CoderChamp/"&gt;Coder Champ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure to subscribe channel, Like and share this post.&lt;/p&gt;

&lt;p&gt;Don't forget to follow us back. So, you will never miss any update.&lt;/p&gt;

&lt;p&gt;Good Luck &lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to Bake A Python Package Cakeüêç+üì¶=üéÇ</title>
      <author>sirfuzzalot</author>
      <pubDate>Mon, 19 Apr 2021 00:12:34 +0000</pubDate>
      <link>https://dev.to/sirfuzzalot/how-to-bake-a-python-package-cake-46l5</link>
      <guid>https://dev.to/sirfuzzalot/how-to-bake-a-python-package-cake-46l5</guid>
      <description>&lt;p&gt;Let's bake a package cake üéÇ! You will need...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ingredients"&gt;
  &lt;/a&gt;
  Ingredients
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Item&lt;/th&gt;
&lt;th&gt;Location&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;library or application&lt;/td&gt;
&lt;td&gt;&lt;code&gt;./src/[name of library or application]/[your code]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Your code that does something useful or fun&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pyproject.toml&lt;/td&gt;
&lt;td&gt;&lt;code&gt;./pyproject.toml&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Build configuration information&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setup.cfg&lt;/td&gt;
&lt;td&gt;&lt;code&gt;./setup.cfg&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Package metadata for PyPI (name of your project, etc.)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;README.md or README.rst&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;./README.md&lt;/code&gt; or &lt;code&gt;./README.rst&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Brief docs for your package to display on PyPI&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.gitignore&lt;/td&gt;
&lt;td&gt;&lt;code&gt;./.gitignore&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Things you don't want in Git, including some build artifacts.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LICENSE or LICENSE.txt&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;./LICENSE&lt;/code&gt; or &lt;code&gt;./LICENSE.txt&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Project's license telling others how they can use your work&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setup.py&lt;/td&gt;
&lt;td&gt;&lt;code&gt;./setup.py&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Technically optional, you'll want this so you can better develop locally&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#package-cake-recipe"&gt;
  &lt;/a&gt;
  Package Cake Recipe üìã
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Add one &lt;code&gt;LICENSE&lt;/code&gt; or &lt;code&gt;LICENSE.txt&lt;/code&gt; file. Picking a license can be tough, but there are tools to help like &lt;a href="https://choosealicense.com/"&gt;Choose A License&lt;/a&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MIT License

Copyright (c) 2021 Cake Packaging Foundation.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Add one &lt;code&gt;pyproject.toml&lt;/code&gt; file. Unless you're building native code or using an alternative build system (i.e. poetry), you can copy and paste this.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[build-system]&lt;/span&gt;
&lt;span class="py"&gt;requires&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;"setuptools&amp;gt;=42"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"wheel"&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="py"&gt;build-backend&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"setuptools.build_meta"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Add one &lt;code&gt;setup.cfg&lt;/code&gt;. This is where you will specify the information that appears on PyPI and what is essential for your package to work.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="c"&gt;# This is essentially a static version of setuptools.setup() and is the
# preferred method of indicating package metadata.
# https://packaging.python.org/guides/distributing-packages-using-setuptools/#setup-args
&lt;/span&gt;
&lt;span class="nn"&gt;[metadata]&lt;/span&gt;
&lt;span class="c"&gt;# A unique name for your package. Search through PyPI for duplicates.
&lt;/span&gt;&lt;span class="py"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;packagecake&lt;/span&gt;

&lt;span class="c"&gt;# Here you use SemVer for versioning - https://semver.org/
# You can also get fancy and pull this value from a file
# like so attr: packagecake.__version__
&lt;/span&gt;&lt;span class="py"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1.0.0&lt;/span&gt;

&lt;span class="c"&gt;# Your name or the organization's name. You can actually leave out the
# email and PyPI will still accept your package.
&lt;/span&gt;&lt;span class="py"&gt;author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;Example Author&lt;/span&gt;
&lt;span class="py"&gt;author_email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;author@example.com&lt;/span&gt;

&lt;span class="c"&gt;# This is your sales pitch, your one-liner, your logline. Make it count
&lt;/span&gt;&lt;span class="py"&gt;description&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;Turn your package into a delicious cake in less than 100ms&lt;/span&gt;

&lt;span class="c"&gt;# Set this to the file you want displayed on PyPI.
# content-type can also be text/x-rst, or text/plain
&lt;/span&gt;&lt;span class="py"&gt;long_description&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;file: README.md&lt;/span&gt;
&lt;span class="py"&gt;long_description_content_type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;text/markdown&lt;/span&gt;

&lt;span class="c"&gt;# This will show in PyPI as your package's Homepage link
&lt;/span&gt;&lt;span class="py"&gt;url&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;https://github.com/pypa/sampleproject&lt;/span&gt;

&lt;span class="c"&gt;# These links will show up in PyPI under the Homepage link.
# Include at least Tracker.
&lt;/span&gt;&lt;span class="py"&gt;project_urls&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="py"&gt;Tracker&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;https://github.com/pypa/sampleproject/issues&lt;/span&gt;
    &lt;span class="py"&gt;Documentation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;https://example.com/docs&lt;/span&gt;
    &lt;span class="py"&gt;Source&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;https://github.com/pypa/sampleproject/&lt;/span&gt;
    &lt;span class="py"&gt;Funding&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;https://example.com/funding&lt;/span&gt;
    &lt;span class="err"&gt;Custom&lt;/span&gt; &lt;span class="py"&gt;URL&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;https://example.com/&lt;/span&gt;

&lt;span class="c"&gt;# Classifiers - https://pypi.org/classifiers/
# Make sure to include your license
&lt;/span&gt;&lt;span class="py"&gt;classifiers&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="err"&gt;Development&lt;/span&gt; &lt;span class="err"&gt;Status&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;3&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt; &lt;span class="err"&gt;Alpha&lt;/span&gt;
    &lt;span class="err"&gt;Intended&lt;/span&gt; &lt;span class="err"&gt;Audience&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;Developers&lt;/span&gt;
    &lt;span class="err"&gt;License&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;OSI&lt;/span&gt; &lt;span class="err"&gt;Approved&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;GNU&lt;/span&gt; &lt;span class="err"&gt;General&lt;/span&gt; &lt;span class="err"&gt;Public&lt;/span&gt; &lt;span class="err"&gt;License&lt;/span&gt; &lt;span class="err"&gt;v3&lt;/span&gt; &lt;span class="err"&gt;(GPLv3)&lt;/span&gt;
    &lt;span class="err"&gt;Programming&lt;/span&gt; &lt;span class="err"&gt;Language&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;Python&lt;/span&gt;
    &lt;span class="err"&gt;Programming&lt;/span&gt; &lt;span class="err"&gt;Language&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;Python&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;3&lt;/span&gt;
    &lt;span class="err"&gt;Programming&lt;/span&gt; &lt;span class="err"&gt;Language&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;Python&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;3&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;Only&lt;/span&gt;
    &lt;span class="err"&gt;Programming&lt;/span&gt; &lt;span class="err"&gt;Language&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;Python&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;3.8&lt;/span&gt;
    &lt;span class="err"&gt;Programming&lt;/span&gt; &lt;span class="err"&gt;Language&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;Python&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;3.9&lt;/span&gt;
    &lt;span class="err"&gt;Operating&lt;/span&gt; &lt;span class="err"&gt;System&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;OS&lt;/span&gt; &lt;span class="err"&gt;Independent&lt;/span&gt;
    &lt;span class="err"&gt;Topic&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;Utilities&lt;/span&gt;

&lt;span class="nn"&gt;[options]&lt;/span&gt;
&lt;span class="c"&gt;# Path to our libary/application
&lt;/span&gt;&lt;span class="py"&gt;package_dir&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;src&lt;/span&gt;
&lt;span class="py"&gt;packages&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;find:&lt;/span&gt;

&lt;span class="c"&gt;# Version of Python needed to use the package
&lt;/span&gt;&lt;span class="py"&gt;python_requires&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;gt;=3.8&lt;/span&gt;

&lt;span class="c"&gt;# Our package depends on these other external packages
&lt;/span&gt;&lt;span class="py"&gt;install_requires&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="py"&gt;requests&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;= 2.25.1&lt;/span&gt;

&lt;span class="nn"&gt;[options.packages.find]&lt;/span&gt;
&lt;span class="py"&gt;where&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;src&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Add one &lt;code&gt;README.md&lt;/code&gt; or &lt;code&gt;README.rst&lt;/code&gt;. Briefly document your tool, giving users a taste of what they can do with it. Then point to your full length docs with a link. You'll want to save full length docs for another site as PyPI does have some limitations particularly with links to section headers. Alternatively, you can make a file just for PyPI and leave your README nice and detailed for your GitHub repo.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gh"&gt;# Package Cake üéÇ&lt;/span&gt;

&lt;span class="gs"&gt;**Package Cake**&lt;/span&gt; is a simple utility that takes your package and turns it
into a cake üç∞.

Checkout the &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;documentation&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://example.com/docs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;.

-&amp;gt; Add installation example here &amp;lt;-

-&amp;gt; Usage example here &amp;lt;-
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Add one &lt;code&gt;.gitignore&lt;/code&gt;. You'll want to update your &lt;code&gt;.gitignore&lt;/code&gt; file to exclude some of the build artifacts.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Packaging
dist
build
*.egg-info/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Add one &lt;code&gt;setup.py&lt;/code&gt;. While &lt;code&gt;setup.cfg&lt;/code&gt; handles static values, &lt;code&gt;setup.py&lt;/code&gt; is for dynamic metadata. Favor &lt;code&gt;setup.cfg&lt;/code&gt; whenever possible. You will however, want to use &lt;code&gt;setup.py&lt;/code&gt; to help you
test your package locally. Read on to see how you can test.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version_info&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Python 3.8.0+ Required"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Add one library or application. This is why you're publishing and you'll want to put this in a specific spot.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./src/[python package name]
    /__init__.py &amp;lt;- control your package's namespace
    /__main__.py &amp;lt;- optionally allow your package to be invoked from the command line
    /[your modules]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#bake-until-built"&gt;
  &lt;/a&gt;
  Bake Until Built üî•
&lt;/h2&gt;

&lt;p&gt;Next you're going to build the package into a &lt;strong&gt;wheel&lt;/strong&gt; and a &lt;strong&gt;source archive&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;wheel&lt;/strong&gt; is a built distribution. If you have any binaries there will be pre-compiled copies in the wheel. This makes it a much faster process for users to get up and running with your package.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;source archive&lt;/strong&gt; contains the raw source code of the package and let's pip or the user do any compilation locally instead. Wheels are generally preferred in most use cases.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a virtual environment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unix/MacOS&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;your project]
python3 &lt;span class="nt"&gt;-m&lt;/span&gt; venv venv
&lt;span class="nb"&gt;source &lt;/span&gt;venv/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Windows&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;venv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;venv&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;\venv\Scripts\activate&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Install and run &lt;strong&gt;build&lt;/strong&gt;. This will generate a &lt;code&gt;./build&lt;/code&gt; and &lt;code&gt;./dist&lt;/code&gt; directory in your project's root, along with creating a &lt;code&gt;.whl&lt;/code&gt; and &lt;code&gt;.tar.gz&lt;/code&gt; distribution package. Finally, you will also see a &lt;code&gt;.egg-info&lt;/code&gt; directory in your &lt;code&gt;./src/[my project]&lt;/code&gt; directory.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;build
python &lt;span class="nt"&gt;-m&lt;/span&gt; build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./build
./dist
    /packagecake-1.0.0-py3-none-any.whl
    /packagecake-1.0.0.tar.gz
./src/[python package name]
    /packagecake.egg-info
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#publish-your-package-cake"&gt;
  &lt;/a&gt;
  Publish Your Package Cake üåê
&lt;/h2&gt;

&lt;p&gt;Now that our package cake is built you'll want to upload it to PyPI. I highly recommend testing your package configuration by first publishing to &lt;a href="https://packaging.python.org/tutorials/packaging-projects/#uploading-the-distribution-archives"&gt;Test PyPI&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In your virtual environment install &lt;strong&gt;twine&lt;/strong&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;twine
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Ensure the version number is properly incremented. You might keep the version number in &lt;code&gt;setup.cfg&lt;/code&gt;, &lt;code&gt;setup.py&lt;/code&gt;, or as &lt;code&gt;__version__&lt;/code&gt; in one of your other files. Make sure they all get updated.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;   &lt;span class="c"&gt;# setup.cfg
&lt;/span&gt;   &lt;span class="nn"&gt;[metadata]&lt;/span&gt;
   &lt;span class="py"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;packagecake&lt;/span&gt;
   &lt;span class="py"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1.0.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create a &lt;a href="https://pypi.org/account/register/"&gt;PyPI account&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create an API token from PyPI. Optionally setup a credentials file to store your API token.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="c"&gt;# [user home directory]/.pypirc
&lt;/span&gt;&lt;span class="nn"&gt;[testpypi]&lt;/span&gt;
&lt;span class="py"&gt;username&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;__token__&lt;/span&gt;
&lt;span class="py"&gt;password&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;my API token&amp;gt;&lt;/span&gt;

&lt;span class="nn"&gt;[pypi]&lt;/span&gt;
&lt;span class="py"&gt;username&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;__token__&lt;/span&gt;
&lt;span class="py"&gt;password&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;my API token&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Publish the package
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;twine upload dist/&lt;span class="k"&gt;*&lt;/span&gt;

&lt;span class="c"&gt;# For Test PyPI&lt;/span&gt;
twine upload &lt;span class="nt"&gt;--repository&lt;/span&gt; testpypi dist/&lt;span class="k"&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#taste-the-package-cake"&gt;
  &lt;/a&gt;
  Taste the Package Cake üçΩÔ∏è
&lt;/h2&gt;

&lt;p&gt;You'll want to download and test the package now. Let's also look at how you can test before publishing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download and Verify the publish.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;packagecake

&lt;span class="c"&gt;# For Test PyPI. No deps is safer, though you can only verify package contents&lt;/span&gt;
pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--index-url&lt;/span&gt; https://test.pypi.org/simple/ &lt;span class="nt"&gt;--no-deps&lt;/span&gt; packagecake
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; import packagecake
ü•Æ

&lt;span class="c"&gt;# or if running from command-line&lt;/span&gt;

python &lt;span class="nt"&gt;-m&lt;/span&gt; packagecake
üç∞
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And now what you can do before you publish. This let's you import and run your package as though it was downloaded with &lt;strong&gt;pip&lt;/strong&gt;. It's called an &lt;strong&gt;editable&lt;/strong&gt; package. You can then perform the steps you did above to verify the package.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python &lt;span class="nt"&gt;-m&lt;/span&gt; pip &lt;span class="nb"&gt;install &lt;/span&gt;packagecake &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#my-first-python-package"&gt;
  &lt;/a&gt;
  My First Python Package üê£
&lt;/h2&gt;

&lt;p&gt;I hope this helps you publish your package. A few quick resources I want to point out that helped me and of course a link to a package I built/baked üòä.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://packaging.python.org/guides/distributing-packages-using-setuptools/"&gt;Python Packaging Authority (PyPA) Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://packaging.python.org/tutorials/packaging-projects/"&gt;PyPA Packaging Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/classifiers/"&gt;PyPI Classifiers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://packaging.python.org/glossary/"&gt;PyPA Glossary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/"&gt;PyPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://test.pypi.org/"&gt;Test PyPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pywhoami/"&gt;pywhoami on PyPI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/sirfuzzalot"&gt;
        sirfuzzalot
      &lt;/a&gt; / &lt;a href="https://github.com/sirfuzzalot/pywhoami"&gt;
        pywhoami
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A Simple HTTP Request Analysis Server
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/sirfuzzalot/pywhoami/main/./images/pywhoami-logo.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VqglHWnw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/sirfuzzalot/pywhoami/main/./images/pywhoami-logo.jpg" width="60%" alt="pywhoami logo"&gt;&lt;/a&gt;
&lt;h1&gt;
A Simple HTTP Request Analysis Server&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://pypi.python.org/pypi/pywhoami" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3fa8c7b4c09e2f6893e0a85585916eb2d9a1b56b05a3f93099b5a48231641d5a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f707977686f616d692e737667" alt="PyPI Version"&gt;&lt;/a&gt;
&lt;a href="https://github.com/sirfuzzalot/pywhoami"&gt;&lt;img src="https://camo.githubusercontent.com/ea3560b3aab8ce3e58ca883daacb713d3d137aa81a1f16d223938e5136ede5ce/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d70617373696e672d627269676874677265656e2e737667" alt="Docs"&gt;&lt;/a&gt;
&lt;a href="https://www.gnu.org/licenses/gpl-3.0" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0b6758422f85bc2599288b346c7de30c6b7b217112c0a877ae4b25a7009722e4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d47504c76332d626c75652e737667" alt="License: GPL v3"&gt;&lt;/a&gt;
&lt;a href="https://www.python.org/downloads/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/264d515bbffe159b122b3c2dd7ce8ad177a21bc600e0a75dd985aec309e4865d/68747470733a2f2f736869656c64732e696f2f707970692f707976657273696f6e732f707977686f616d69" alt="Python Versions"&gt;&lt;/a&gt;
&lt;a href="https://github.com/psf/black"&gt;&lt;img src="https://camo.githubusercontent.com/d91ed7ac7abbd5a6102cbe988dd8e9ac21bde0a73d97be7603b891ad08ce3479/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667" alt="Code style: black"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Pywhoami is inspired by the &lt;a href="https://github.com/containous/whoami"&gt;whoami&lt;/a&gt;
Go server by &lt;a href="https://traefik.io/" rel="nofollow"&gt;Traefik Labs&lt;/a&gt;. Send a request to one
of the endpoints to get back details from your HTTP request. With
&lt;strong&gt;pywhoami&lt;/strong&gt; you can help answer questions like, what headers were added
to my original request by a proxy server.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/sirfuzzalot/pywhoami/main/#using-the-pypi-package"&gt;Using the PyPI Package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/sirfuzzalot/pywhoami/main/#using-the-docker-image"&gt;Using the Docker Image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/sirfuzzalot/pywhoami/main/#http-api-reference"&gt;HTTP API Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/sirfuzzalot/pywhoami/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
Using the PyPI Package&lt;/h2&gt;
&lt;h3&gt;
Installation&lt;/h3&gt;
&lt;p&gt;bash&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;python3 -m pip install pywhoami&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;powershell&lt;/p&gt;
&lt;div class="highlight highlight-source-powershell js-code-highlight"&gt;
&lt;pre&gt;py &lt;span class="pl-k"&gt;-&lt;/span&gt;m pip install pywhoami&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Running the Server&lt;/h3&gt;
&lt;p&gt;bash&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; python3 -m pywhoami
[2021-04-17 15:00:25 -0700] [4400] [INFO] Running on http://127.0.0.1:8080 (CTRL + C to quit)&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;powershell&lt;/p&gt;
&lt;div class="highlight highlight-source-powershell js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; py &lt;span class="pl-k"&gt;-&lt;/span&gt;m pywhoami
[&lt;span class="pl-c1"&gt;2021&lt;/span&gt;&lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;04&lt;/span&gt;&lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;17&lt;/span&gt; &lt;span class="pl-c1"&gt;15&lt;/span&gt;:&lt;span class="pl-c1"&gt;00&lt;/span&gt;:&lt;span class="pl-c1"&gt;25&lt;/span&gt; &lt;span class="pl-c1"&gt;-0700&lt;/span&gt;] [&lt;span class="pl-c1"&gt;4400&lt;/span&gt;] [&lt;span class="pl-k"&gt;INFO&lt;/span&gt;] Running on http:&lt;span class="pl-k"&gt;//&lt;/span&gt;&lt;span class="pl-c1"&gt;127.0&lt;/span&gt;.&lt;span class="pl-c1"&gt;0.1&lt;/span&gt;:&lt;span class="pl-c1"&gt;8080&lt;/span&gt; (CTRL &lt;span class="pl-k"&gt;+&lt;/span&gt; C to quit)&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Send it a test HTTP request.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;‚Ä¶
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/sirfuzzalot/pywhoami"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Cover Photo Credit: &lt;a href="https://unsplash.com/@domonique94"&gt;Domonique Davenport&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>todayilearned</category>
      <category>devops</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>PatchNote du 19/04/2021</title>
      <author>Zeldown</author>
      <pubDate>Sun, 18 Apr 2021 22:05:03 +0000</pubDate>
      <link>https://dev.to/paladium-pvp/patchnote-du-19-04-2021-4ddj</link>
      <guid>https://dev.to/paladium-pvp/patchnote-du-19-04-2021-4ddj</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--btm85JLG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4a8a47tabegxejc9zx8z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--btm85JLG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4a8a47tabegxejc9zx8z.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Bienvenue sur le PatchNote du &lt;strong&gt;lundi 19 avril 2021&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ce lundi 19 avril, Paladium a effectu√© une mise √† jour ax√©e sur la correction des bugs survenus durant la derni√®re maintenance :&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--29DIgRTd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghndh9i7fa3f9s0d70on.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--29DIgRTd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghndh9i7fa3f9s0d70on.png" alt="Bugs_Banner_IMG"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#mini-golem-cooldown"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Mini Golem Cooldown&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Durant la pr√©c√©dente maintenance, nous avons ajout√© un cooldown de 30 secondes sur les Mini Golems une fois pos√©s. Cependant, apr√®s le d√©ploiement de la mise √† jour, nous nous sommes rendus compte que les Mini Golems craft√©s √† l'aide d'une Guardian Stone datant d'avant la maintenance n'avaient pas ce temps d'attente. &lt;/p&gt;

&lt;p&gt;En effet, celles-ci ayant un NBT (&lt;em&gt;Named Binary Tag&lt;/em&gt;) plus ancien, elles n'avaient donc pas en m√©moire ce temps de chargement et ne l'appliquaient pas une fois le golem apparu. Ceci est d√©sormais corrig√©.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Plus d'infos sur les NBT&lt;/em&gt; &lt;a href="https://minecraft.fandom.com/fr/wiki/Format_NBT#:~:text=Le%20format%20Named%20Binary%20Tag,arbre%22%20form%C3%A9%20de%20diff%C3%A9rent%20tags."&gt;ici&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#crash-avec-les-coordinates-jammer"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Crash avec les Coordinates Jammer&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Depuis leur arriv√©e sur le serveur, les Coordinates Jammers pouvaient faire crash tous les joueurs dans un rayon de 100 blocs s‚Äôils √©taient pos√©s sur des Solid Airs ou d'autres blocs ayant un rendu particulier.&lt;/p&gt;

&lt;p&gt;Ceci √©tait d√ª √† la tentative de ceux-ci d‚Äôadapter leur luminosit√© aux blocs voisins. Dor√©navant, une s√©rie de conditions a √©t√© ajout√©e afin que le jeu ne se ferme plus dans de telles circonstances.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#gain-dexp-avec-les-cobble-breakers"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Gain d'exp avec les Cobble Breakers&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Durant la derni√®re mise √† jour de Paladium, nous vous avons apport√© la possibilit√© de r√©cup√©rer les particules des Cobble Breakers √† l'aide d'un Shift Click. &lt;br&gt;
Cependant, nous avons oubli√© le fait de gagner de l'exp dans le m√©tier de Mineur lors du Shift Click, ceci est d√©sormais chose faite.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#alchimiste-table-denchantement-gui"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Alchimiste Table d'enchantement GUI&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Durant la derni√®re mise √† jour, nous avons apport√© des modifications sur l'interface de la Table d'enchantement modd√©e.&lt;/p&gt;

&lt;p&gt;Cependant, il persistait des soucis de &lt;em&gt;z-index&lt;/em&gt;, c'est √† dire, des √©l√©ments qui passaient les uns au-dessus des autres.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2UdAqFnn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m1y87yp3xm40ilejjgoz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2UdAqFnn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m1y87yp3xm40ilejjgoz.png" alt="Old_Enchant_IMG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ce probl√®me est r√©solu.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#trade-shift-click"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Trade Shift Click&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Depuis le 15 avril, nous avons donn√© acc√®s au /trade aux personnes disposant d'un grade sur le serveur. Nous avons alors pris connaissance d'un souci lors de l'utilisation du Shift Click dans le trade.&lt;/p&gt;

&lt;p&gt;En effet, si le joueur de droite durant l'√©change utilisait la combinaison shift + click pour mettre un item dans le trade alors l'item essayait d'aller dans l'interface de gauche et disparaissait.&lt;/p&gt;

&lt;p&gt;Ce probl√®me est donc r√©solu temporairement en ayant d√©sactiv√© l'action du Shift Click (d√©sol√© √† tous ceux ayant perdu des items √† cause de cela).&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#trade-force-accept"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Trade Force Accept&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Il √©tait possible de forcer l'√©change d'un trade en faisant &lt;code&gt;/trade accept&lt;/code&gt; apr√®s avoir fait la demande d'√©change √† un joueur : cela acceptait automatiquement l'√©change.&lt;/p&gt;

&lt;p&gt;D√©sormais, seule la personne recevant la demande d'√©change pourra &lt;code&gt;/trade accept&lt;/code&gt;.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#superman-sous-la-bedrock"&gt;
  &lt;/a&gt;
  &lt;strong&gt;SuperMan sous la bedrock&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Il √©tait possible d'utiliser l'effet Superman sous la bedrock et ainsi sethome √† travers la bedrock dans une base. Cela est dor√©navant corrig√©.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#jetpack-sous-la-bedrock"&gt;
  &lt;/a&gt;
  &lt;strong&gt;JetPack sous la bedrock&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Il √©tait possible d'utiliser le JetPack sous la bedrock et ainsi sethome √† travers la bedrock dans une base. Cela est dor√©navant corrig√©.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#trade-xp"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Trade XP&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Lors d'un √©change d'experience durant un Trade, le nombre de niveaux n'√©tait pas √©quivalent au nombre d'exp.&lt;/p&gt;

&lt;p&gt;Si un joueur niveau 30 mettait "1 niveau", alors un joueur niveau 1 de l'autre c√¥t√© du trade ne recevait qu‚Äô1 niveau, or cela correspond √† bien plus d'exp√©rience puisque les niveaux sont exponentiels.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#guardian-golem-health-bar"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Guardian Golem Health Bar&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Lors de la mort d'un Guardian Golem, la barre de vie √©tait toujours affich√©e. Cela √©tait d√ª √† un oubli de v√©rification dans le code de l'affichage de la barre de vie.&lt;/p&gt;

&lt;p&gt;Cela est d√©sormais ajout√©.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;BossStatusGuardian&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;guardian&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isEntityAlive&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{...}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yXK8skjW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shu42fl8kaot32bup4yu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yXK8skjW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shu42fl8kaot32bup4yu.png" alt="Features_Banner_IMG"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ajout-de-chisel"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Ajout de chisel&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Nous avions omis de vous l'annoncer durant la derni√®re maintenance mais le Chisel est de retour avec ses &lt;strong&gt;35 familles&lt;/strong&gt; !&lt;/p&gt;

&lt;p&gt;Voici donc la liste des blocs vous permettant de crafter leurs nombreuses d√©clinaisons, nous vous laissons la surprise de leurs rendus üòú&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gu78H9yi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4cju6kvsnirmfwht9o1k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gu78H9yi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4cju6kvsnirmfwht9o1k.png" alt="Chisel_IMG"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Nous avons constat√© que le dernier PatchNote vous a plu et nous esp√©rons que vous appr√©cierez celui-ci tout autant.&lt;/p&gt;

&lt;p&gt;N'h√©sitez pas √† laisser un commentaire ci-dessous, nous vous r√©pondrons avec le plus grand plaisir. &lt;/p&gt;

</description>
      <category>paladium</category>
      <category>news</category>
      <category>minecraft</category>
      <category>french</category>
    </item>
    <item>
      <title>I learned the foundations of UX design from Google and would recommend it to every designer!</title>
      <author>kiro mo</author>
      <pubDate>Sun, 18 Apr 2021 21:36:08 +0000</pubDate>
      <link>https://dev.to/kiromo/i-learned-the-foundations-of-ux-design-from-google-and-would-recommend-it-to-every-designer-5hmd</link>
      <guid>https://dev.to/kiromo/i-learned-the-foundations-of-ux-design-from-google-and-would-recommend-it-to-every-designer-5hmd</guid>
      <description>&lt;p&gt;Two weeks ago I finished my B. A degree at the University of Arts in Berlin as an interface designer and one week ago I decided to learn the Google UX Design Professional Certificate. &lt;a href="https://100daysofux.medium.com/i-started-learning-ux-design-from-google-and-here-are-my-impressions-of-day1-daac886ea74"&gt;This&lt;/a&gt; was my first blog about my first day in the training and my impressions.&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RRyMB5B---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://100daysofuxblog.files.wordpress.com/2021/04/2.png%3Fw%3D1024" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RRyMB5B---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://100daysofuxblog.files.wordpress.com/2021/04/2.png%3Fw%3D1024" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I want to share with you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what I liked the most&lt;/li&gt;
&lt;li&gt;What I learned&lt;/li&gt;
&lt;li&gt;why I recommend it to others&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What I liked most:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The best part of the course for me where it was about accessibility! That's one thing that so many designers and so many developers don't pay attention to. And I think it's somehow part of the design ethic. You don't design for one group because they are the majority and not pay attention to the others because they are not!&lt;/p&gt;

&lt;p&gt;Designer should do like the bus driver in Berlin. If the driver sees that there is someone who is on chair then he opens the door for him first and then for others! that's how it should be. Let's include everyone and not design things that only affect the majority!&lt;/p&gt;

&lt;p&gt;Elise Roy Accessibility &amp;amp; Inclusive Design Lead at Google said about this, "It should be a normal part of your development process. It shouldn't be an add-on. It should be considered from the beginning."&lt;/p&gt;

&lt;p&gt;What I also really liked in the course, the part where it talks about difference between equity and equality and also the part by Catherine Courage, Vice President of User Experience at Google where it talks about overcoming impostor syndrome.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;what did I learn:&lt;br&gt;&lt;/strong&gt;Here is the content, for the course, which is divided into 4 weeks. (I did it all in one week)&lt;/p&gt;

&lt;p&gt;Week 1:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Identify and compare the disciplines within UX.&lt;/li&gt;
&lt;li&gt;Identify the factors that contribute to a good user experience design&lt;/li&gt;
&lt;li&gt;Review the common tasks of entry-level UX designers&lt;/li&gt;
&lt;li&gt;Review teams that UX designers frequently work with&lt;/li&gt;
&lt;li&gt;Explain how UX design jobs are impacted by company size and industry&lt;/li&gt;
&lt;li&gt;Explore job opportunities after completing the program&lt;/li&gt;
&lt;li&gt;Define the field of UX and explain its importance to consumers and businesses&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Week 2:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Define common terms used in UX design&lt;/li&gt;
&lt;li&gt;Describe user-centered design&lt;/li&gt;
&lt;li&gt;Explain common design frameworks&lt;/li&gt;
&lt;li&gt;Understand equity-focused design&lt;/li&gt;
&lt;li&gt;Describe the importance of accessibility in the design process&lt;/li&gt;
&lt;li&gt;Describe the importance of the Next Billion Users in UX design&lt;/li&gt;
&lt;li&gt;Explain the benefits of using design tools&lt;/li&gt;
&lt;li&gt;Identify common UX design tools&lt;/li&gt;
&lt;li&gt;Explain how UX designers think across platforms&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;WEEK 3:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Describe the phases of a design sprint&lt;/li&gt;
&lt;li&gt;Explain the importance of design sprints&lt;/li&gt;
&lt;li&gt;Plan a design sprint&lt;/li&gt;
&lt;li&gt;Explain the role of an entry-level UX designer during a design sprint&lt;/li&gt;
&lt;li&gt;Describe the importance of retrospectives after design sprints&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Week 4:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Describe a UX design portfolio&lt;/li&gt;
&lt;li&gt;Create an online portfolio to showcase UX design work&lt;/li&gt;
&lt;li&gt;Recognize the fundamentals of a good portfolio&lt;/li&gt;
&lt;li&gt;Apply storytelling and branding elements to a UX design portfolio&lt;/li&gt;
&lt;li&gt;Apply proven writing methods to a UX design portfolio&lt;/li&gt;
&lt;li&gt;Explain how to build a professional design presence online&lt;/li&gt;
&lt;li&gt;Create or update professional profiles on social media&lt;/li&gt;
&lt;li&gt;Join and participate in online UX communities&lt;/li&gt;
&lt;li&gt;Explain impostor syndrome and how to overcome it&lt;/li&gt;
&lt;li&gt;Explore strategies for reaching out to potential mentors&lt;/li&gt;
&lt;li&gt;Discuss best practices for building a professional network&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Why I recommend it to others:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I find the course very easy to understand, and you can always expand your knowledge by reading from other resources. I'm very satisfied so far, and I'm very excited about the rest.&lt;/p&gt;

&lt;p&gt;I have always read a lot aside the course. Here are articles that I would recommend to others:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://careerfoundry.com/en/blog/ux-design/ux-portfolio-examples-inspiration/"&gt;9 Of The Best UX Design Portfolio Examples From Around The Web&lt;/a&gt;&lt;br&gt;&lt;a href="https://uxplanet.org/what-type-of-designer-are-you-ef5052b67634"&gt;Three ways to know what kind of UX designer you are&lt;/a&gt;&lt;br&gt;&lt;a href="http://How%20to%20Overcome%20Imposter%20Syndrome%20as%20a%20New%20UX%20Designer"&gt;How to Overcome Imposter Syndrome as a New UX Designer&lt;/a&gt;&lt;br&gt;&lt;a href="https://uxplanet.org/my-senior-ux-designer-explains-the-user-centered-desing-process-with-examples-471f55e2658c"&gt;My Senior UX Designer explains the User-Centered Desing Process with examples&lt;/a&gt;&lt;br&gt;&lt;a href="https://www.interaction-design.org/literature/article/8-talks-by-women-to-inspire-ux-designers"&gt;8 Talks by Women to Inspire UX Designers&lt;/a&gt;&lt;br&gt;&lt;br&gt;Here is my certificate that I got today! There are 6 more parts in the training until I finish it, and I keep trying to get it all done in 100 days!&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AU4CgVmf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://100daysofuxblog.files.wordpress.com/2021/04/3.png%3Fw%3D1024" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AU4CgVmf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://100daysofuxblog.files.wordpress.com/2021/04/3.png%3Fw%3D1024" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>design</category>
      <category>google</category>
    </item>
    <item>
      <title>Creating a Sleek Masonry Gallery with React and WebAssembly</title>
      <author>Remi van der Laan</author>
      <pubDate>Sun, 18 Apr 2021 21:25:35 +0000</pubDate>
      <link>https://dev.to/rvanderlaan/creating-a-sleek-masonry-gallery-with-react-and-webassembly-17p2</link>
      <guid>https://dev.to/rvanderlaan/creating-a-sleek-masonry-gallery-with-react-and-webassembly-17p2</guid>
      <description>&lt;p&gt;Myself and three others have been working on a tool called &lt;a href="https://allusion-app.github.io/"&gt;Allusion&lt;/a&gt; in our spare time: A free image organization application built for artists. It runs in Electron as a ReactJS application.&lt;br&gt;
One of its key components is the image gallery. Since users may import thousands of images, we can't just render them all using pure HTML and CSS. Over the course of the development, we tried out several out-of-the-box ReactJS packages (mainly &lt;a href="https://github.com/bvaughn/react-window"&gt;react-window&lt;/a&gt; and &lt;a href="https://bvaughn.github.io/react-virtualized/#/components/Masonry"&gt;react-virtualized&lt;/a&gt;) but none really suited our needs - be it their design or performance.&lt;br&gt;
In the end, we wrote our own super slick image gallery from scratch. It turned out quite nice, so I wanted to share our findings.&lt;/p&gt;

&lt;p&gt;The requirements we set for ourselves:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keep as much as possible off the main UI thread to keep everything snappy&lt;/li&gt;
&lt;li&gt;Keep computation time within a few milliseconds for up to ~10.000 images&lt;/li&gt;
&lt;li&gt;Configurable thumbnail sizes&lt;/li&gt;
&lt;li&gt;Three layout modes: A simple grid, vertical (column) masonry, horizontal (row) masonry&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main caveat of our method is that it needs to know image resolutions beforehand, though it could probably be adapted to measure them on the fly too. This is what made the alternatives we tried feel clunky, so we have avoided doing that. Since we store the image dimensions in a database anyways, it's no problem for for our use-case. &lt;/p&gt;

&lt;p&gt;Our gallery is built-up out of three main sections:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The masonry layout algorithm itself, written in Rust&lt;/li&gt;
&lt;li&gt;The webworker and shared memory between the main thread and WASM&lt;/li&gt;
&lt;li&gt;The virtualized image renderer as a ReactJS component&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#masonry-algorithm-in-webassembly"&gt;
  &lt;/a&gt;
  Masonry algorithm in WebAssembly
&lt;/h1&gt;

&lt;p&gt;Rust was was something I wanted to get into for a while already, and it's a natural fit for WASM modules.&lt;br&gt;
The module is set-up with &lt;a href="https://github.com/rustwasm/wasm-pack"&gt;wasm-pack&lt;/a&gt; which outputs your WASM file along with TypeScript definitions as an easily importable ES6 module.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#transferring-data"&gt;
  &lt;/a&gt;
  Transferring data
&lt;/h2&gt;

&lt;p&gt;To provide the WASM package with the image dimensions it uses as input, we define a vector of &lt;code&gt;Transform&lt;/code&gt; structs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Transform&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;src_width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;src_height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We chose to read the output of the layout computation from the same entry, for which we'll need some extra fields:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Transform&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;src_width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// input dimensions (pixels)&lt;/span&gt;
    &lt;span class="n"&gt;src_height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     &lt;span class="c"&gt;// output dimensions (pixels)&lt;/span&gt;
    &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="c"&gt;// output offset in the layout (pixels)&lt;/span&gt;
    &lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then define a &lt;code&gt;Layout&lt;/code&gt; as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Layout&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;num_items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Transform&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;thumbnail_size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// the desired output size&lt;/span&gt;
    &lt;span class="n"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="c"&gt;// the amount of pixels in between two images&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Back in JavaScript land, we ask for a pointer to that &lt;code&gt;items&lt;/code&gt; vector in WASM memory, and put our image dimensions in there one by one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Layout&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Transform&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.items&lt;/span&gt;&lt;span class="nf"&gt;.as_ptr&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;InitOutput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;masonry/pkg/masonry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;WASM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;masonry/pkg/masonry_bg.wasm&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numItems&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items_ptr&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Uint16Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WASM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;itemsPtr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MAX_ITEMS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;computeLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;imgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Every item consists of 6 uint16s&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;imgs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;imgs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// I'll cover this method next!&lt;/span&gt;
  &lt;span class="c1"&gt;// And now we can do something with the layout!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getItemTransform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="c1"&gt;// same order as in Rust&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At first, we allocated memory for the transforms anytime the layout is computed, but in practice, the layout is re-computed many times over. To eliminate some overhead, we just reserve a chunk of memory which we use for the lifetime of the module. With just a few megabytes we can support hundreds of thousands of images.&lt;br&gt;
One extra change was necessary: The top offset easily can grow beyond the &lt;code&gt;uint16&lt;/code&gt; of 65,536 pixels. For rows of 4 square images of 200px each, we reach that limit after only 81 rows. That's no good. Therefore, we moved the top offsets to a separate vector of unsigned &lt;code&gt;uint32&lt;/code&gt; values, which will last us over 5 million of such rows.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#layout-algorithms"&gt;
  &lt;/a&gt;
  Layout algorithms
&lt;/h2&gt;

&lt;p&gt;The vertical masonry layout is my personal favourite, so that's the one I'll be covering here. It's quite simple really: We determine the amount of columns that fit within the container width given the desired column width, and then iteratively place the images in the shortest column up to that point.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xTEp1psO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9po0njun3bhrq0mvfsqj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xTEp1psO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9po0njun3bhrq0mvfsqj.gif" alt="Animation of the vertical masonry layout algorithm"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Layout&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;compute_vertical&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;container_width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;u32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// First: Determine width of each column and initialize each column height at 0 pixels&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col_width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;col_heights&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;container_width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;f32&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container_width&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;n_columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container_width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nn"&gt;f32&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.thumbnail_size&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="nf"&gt;.round&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n_columns&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;col_width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container_width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;n_columns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.round&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;col_heights&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;u32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;vec!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;n_columns&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col_width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col_heights&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;item_width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;col_width&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.padding&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c"&gt;// Then loop over all images and place them in the shortest column&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.items&lt;/span&gt;&lt;span class="nf"&gt;.split_at_mut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.num_items&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;top_offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;current_items&lt;/span&gt;&lt;span class="nf"&gt;.iter_mut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.top_offsets&lt;/span&gt;&lt;span class="nf"&gt;.iter_mut&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// take into account aspect ratio for the height&lt;/span&gt;
            &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="py"&gt;.height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nn"&gt;f32&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="py"&gt;.width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nn"&gt;f32&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="py"&gt;.src_width&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.round&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="py"&gt;.width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item_width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;shortest_col_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;col_heights&lt;/span&gt;
                &lt;span class="nf"&gt;.iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="nf"&gt;.enumerate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="nf"&gt;.min_by_key&lt;/span&gt;&lt;span class="p"&gt;(|(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)|&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nf"&gt;.map_or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;|(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)|&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="py"&gt;.left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shortest_col_index&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;col_width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;top_offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;col_heights&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;shortest_col_index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

            &lt;span class="n"&gt;col_heights&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;shortest_col_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nn"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="py"&gt;.height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nn"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.padding&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c"&gt;// Return height of longest column&lt;/span&gt;
        &lt;span class="n"&gt;col_heights&lt;/span&gt;&lt;span class="nf"&gt;.iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.max&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.map_or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h2&gt;

&lt;p&gt;Now, is this any good in practice? Well, I implemented the same layout computation function in TypeScript (transpiled down to JavaScript), and measured the performance of both for a gallery of 5000 images in release mode:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M4200hRT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e7qb6ifq6vyojdfwgqd0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M4200hRT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e7qb6ifq6vyojdfwgqd0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's a solid 0.2ms faster! Yeah... WebAssembly might have been a little overkill for a simple O(1) calculation like this. It might be even worse than the TS equivalent, since we need to put all of the image dimensions in a buffer first. Though, it does pave the way for a more complex layout computation (I'll link to some resources at the end) for which I'm sure it would pay off.&lt;br&gt;
As for the high peaks in the WASM measurements, I'm not completely sure what causes those. I would have expected those to happen for the TS version instead, since Rust doesn't do garbage collection. I couldn't find any weird things happening in the glue code generated by &lt;code&gt;wasm-pack&lt;/code&gt; so I suspect it must be something from the WebAssembly runtime itself.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#webworker-with-shared-memory"&gt;
  &lt;/a&gt;
  WebWorker with shared memory
&lt;/h1&gt;

&lt;p&gt;Even though the computation only takes less than a millisecond on my machine, it might not on low-end devices or under heavy load.&lt;br&gt;
By computing the layout in a WebWorker, it won't interrupt the main UI thread, meaning that the application will stay responsive. &lt;br&gt;
We opted for setting up a WebWorker using &lt;a href="https://github.com/GoogleChromeLabs/comlink"&gt;com-link&lt;/a&gt;, mainly for its ease of use.&lt;br&gt;
We don't want to copy the memory buffer every time a message is sent from the worker. Figuring out how to set up shared memory between the WASM memory in the worker and the main thread was the biggest time sink of this adventure. &lt;br&gt;
At first we sent the buffer as a &lt;a href="https://github.com/GoogleChromeLabs/comlink#comlinktransfervalue-transferables-and-comlinkproxyvalue"&gt;Transferrable&lt;/a&gt; but this stopped working in a recent release of Chrome. Instead, we configure the WASM memory to become a SharedArrayBuffer, which has the same capability. This is not supported out of the box: follow &lt;a href="https://rustwasm.github.io/wasm-bindgen/examples/raytrace.html"&gt;this guide&lt;/a&gt; to learn more.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// masonry.worker.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;InitOutput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;masonry/pkg/masonry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;expose&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;comlink&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MasonryWorker&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;WASM&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;InitOutput&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;items&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nb"&gt;Uint16Array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;initializeLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Uint16Array&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WASM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./wasm/masonry/pkg/masonry_bg.wasm&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numItems&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;itemsPtr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sharedArrayBuffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WASM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__wbindgen_export_0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Uint16Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sharedArrayBuffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;itemsPtr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MAX_ITEMS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;expose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MasonryWorker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// MasonryWorkerAdapter.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Remote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;wrap&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;comlink&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MasonryWorkerClass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MasonryWorker&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./masonry.worker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MasonryWorkerAdapter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;Remote&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MasonryWorker&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;WorkerFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;wrap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;MasonryWorker&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MasonryWorkerClass&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;WorkerFactory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initializeLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numItems&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// And now here in the main thread we can access WASM memory that was initialized in the worker!&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#virtualized-gallery-renderer"&gt;
  &lt;/a&gt;
  Virtualized gallery renderer
&lt;/h1&gt;

&lt;p&gt;The last step is to actually render the images in the layout that is computed. Since this is intended for a ReactJS application, the images are rendered as DOM nodes, but the same layout could also be used to render images in a canvas. &lt;br&gt;
We could just put all images in the DOM since the browser is very good at rendering only whatever visible is in the viewport. We can make it lots faster though, by only putting images that are visible in the viewport in the DOM tree. This is called "virtualized rendering". &lt;br&gt;
Any time the viewport dimensions change, or the user scrolls, or for any similar events, we have to re-evaluate which images to render.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;VirtualizedRenderer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;containerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;images&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;VirtualizedRendererProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;...,&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;viewportRef&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLDivElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;containerHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;recompute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;containerWidth&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;containerWidth&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="c1"&gt;// Find the top and bottom edge of the viewport in the layout (omitted for brevity: we do a binary search)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;startRenderIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;endRenderIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;determineViewportRegion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;viewportRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;viewportRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// One div as the scrollable viewport&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onScroll&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleScroll&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;viewportRef&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* One div for the content */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;containerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;containerHeight&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;startRenderIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;endRenderIndex&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;im&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fileListIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;startRenderIndex&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItemLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileListIndex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt;
              &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;im&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;im&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Putting it all together, this is what we ended up with (links to a video on Imgur):&lt;br&gt;
&lt;a href="https://i.imgur.com/CALjWCT.mp4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ZchRECG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bg2kho6fsodndyl9s9tv.png" alt="Demo video"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Computing the masonry layout runs great performance-wise. It's also much smoother while scrolling and more flexible compared to popular packages available on NPM we tried out.&lt;br&gt;
Making use of WebAssembly was not really worth the hassle in the end, since the computation is fairly simple. Though, it was a good scope for a problem to learn some Rust for. Running the computation in a WebWorker makes all the difference though. Use workers, people!&lt;/p&gt;

&lt;p&gt;There are certainly improvements to be made. You could for instance only compute the layout for the relevant section of the viewport you are in. &lt;br&gt;
There are much bigger bottle necks in the code surrounding the layout computation through: It may take dozens of milliseconds to fetch thousands of images from the database and to insert their image resolutions into WASM memory. This could be solved by streaming in data as it is being fetched. For both of these it would add some unnecessary complexity for our current use case, so we're calling it a day at this point!&lt;/p&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://allusion-app.github.io/"&gt;The Allusion homepage&lt;/a&gt; - download it for free!&lt;/li&gt;
&lt;li&gt;The final implementation: &lt;a href="https://github.com/allusion-app/Allusion/blob/master/wasm/masonry/src/lib.rs"&gt;Masonry algorithm in Rust&lt;/a&gt;, &lt;a href="https://github.com/allusion-app/Allusion/blob/master/src/frontend/containers/ContentView/Masonry/masonry.worker.ts"&gt;Webworker&lt;/a&gt;, &lt;a href="https://github.com/allusion-app/Allusion/blob/master/src/frontend/containers/ContentView/Masonry/MasonryRenderer.tsx"&gt;Masonry renderer&lt;/a&gt; which makes use of the &lt;a href="https://github.com/allusion-app/Allusion/blob/master/src/frontend/containers/ContentView/Masonry/VirtualizedRenderer.tsx"&gt;Virtualized renderer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Similar blogpost: &lt;a href="https://medium.com/@danrschlosser/building-the-image-grid-from-google-photos-6a09e193c74a"&gt;Building the Google Photos image grid&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>webassembly</category>
      <category>webdev</category>
      <category>rust</category>
    </item>
  </channel>
</rss>
