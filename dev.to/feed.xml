<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>JavaScript - Make API calls asynchronously in a loop - (Promises, Async/Await)</title>
      <author>Srivastava Bodakunti</author>
      <pubDate>Mon, 16 Aug 2021 15:48:01 +0000</pubDate>
      <link>https://dev.to/srivastava295/javascript-make-api-calls-asynchronously-in-a-loop-promises-async-await-1e00</link>
      <guid>https://dev.to/srivastava295/javascript-make-api-calls-asynchronously-in-a-loop-promises-async-await-1e00</guid>
      <description>&lt;p&gt;I have written the blog post at &lt;a href="https://velocitybytes.com/javascript-make-api-calls-asynchronously-in-a-loop-asyncawait"&gt;https://velocitybytes.com/javascript-make-api-calls-asynchronously-in-a-loop-asyncawait&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>I quit my dream job to learn to code</title>
      <author>rotimidokun</author>
      <pubDate>Mon, 16 Aug 2021 15:43:38 +0000</pubDate>
      <link>https://dev.to/rotimidokun/i-quit-my-dream-job-to-learn-to-code-1hpm</link>
      <guid>https://dev.to/rotimidokun/i-quit-my-dream-job-to-learn-to-code-1hpm</guid>
      <description>&lt;p&gt;It’s my first blog since I decided to switch careers and become a Software Engineer. &lt;/p&gt;

&lt;p&gt;By way of introduction, I am &lt;a href="https://rotimidokun.netlify.app/"&gt;Tosin Rotimidokun&lt;/a&gt;. I am interested in many things and you can tell from my journey in career so far. &lt;/p&gt;

&lt;p&gt;As an undergraduate, I worked as a creative designer in a management consulting firm. After a year, I decided to become a management consultant at &lt;a href="https://cchubnigeria.com/"&gt;Co-Creation Hub&lt;/a&gt;, Africa's largest technology innovation centre where I had the opportunity to manage several Startup Accelerator programs. I liken the experience to throwing me into a deep pool of resources, brilliant minds, strong networks and stakeholders, and I am forever grateful for the experience. &lt;/p&gt;

&lt;p&gt;I interacted with many technical and non-technical founders, and together we redefined products, Business Value, Teams, Corporate governance structures, Partnerships and raised Investments. This helped me build other skills in project, program and product management.&lt;/p&gt;

&lt;p&gt;My time as a Management consultant in the technology space helped me realise how valuable the skill of coding is today. This was when I made the decision to transition again. This felt like I was "crazy", terrible and inconsistent, because I was giving up a good career to try something new and perceived as difficult. I started my learning journey in February 2021 and can now confidently call myself a software engineer. Hurray!! &lt;/p&gt;

&lt;p&gt;I decided to apply for the &lt;a href="https://internship.zuri.team"&gt;HNG internship 8 by Zuri&lt;/a&gt;, because I came across a lot of great software engineers today who also went through this program. I applied to the frontend track and in the 8 weeks of this internship, I hope to;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Be able to complete full scale frontend applications using the React framework and Redux for state management. &lt;/li&gt;
&lt;li&gt;Build a network of great software engineers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are at the point of starting out like I was in February 2021, finding resources that help you understand basic concepts and also solve specific challenges at a point are important. Here are some resources that could help you get started;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Figma: &lt;a href="https://youtube.com/playlist?list=PLXDU_eVOJTx7QHLShNqIXL1Cgbxj7HlN4"&gt;Getting started with Figma&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Git: &lt;a href="https://www.youtube.com/watch?v=8JJ101D3knE"&gt;Learn Git in 1 Hour&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HTML: &lt;a href="https://www.youtube.com/watch?v=qz0aGYrrlhU"&gt;HTML Tutorial for Beginners&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript: &lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=730s"&gt;Learn JavaScript - Full Course for Beginners&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Are you interested in fast tracking your development journey as a beginner, join the &lt;a href="https://training.zuri.team"&gt;Zuri training program&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have some development knowledge and want to gain hands-on experience building projects quickly, join the &lt;a href="https://internship.zuri.team"&gt;HNG Internship 8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading my story. Follow me. Till I come your way again..&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>dream</category>
      <category>programming</category>
      <category>courage</category>
    </item>
    <item>
      <title>The dilemma of the business front-end</title>
      <author>JerroldLee</author>
      <pubDate>Mon, 16 Aug 2021 15:40:31 +0000</pubDate>
      <link>https://dev.to/jerroldlee/the-dilemma-of-the-business-front-end-ja3</link>
      <guid>https://dev.to/jerroldlee/the-dilemma-of-the-business-front-end-ja3</guid>
      <description>&lt;p&gt;Preface&lt;br&gt;
As a business front-end, while fulfilling business requirements, it also has to deal with various online problems. After working hard and busy for a year, the boss said that "thinking is not enough" and "there is no business sence". I went out for an interview and was asked. The project, I can’t say anything that has highlights or challenges. I want to do something awesome, but I haven’t found any valuable directions. I finally find some directions. I have to be questioned by the boss about the business value. ? What about ROI? In the end, it may just be a little performance optimization work, and some reusable components have been removed...I can't help but sigh, the business is difficult, the front-end is difficult, and the front-end of the business is even more difficult!&lt;/p&gt;

&lt;p&gt;If you have such feelings and dilemmas, I want to tell you that this is really normal. There are many thoughts on this issue in Ali’s internal technical forums. Based on my own understanding and research, I have also referenced many The summary of experts in different front-end fields is compiled into this article, I hope it can be helpful to everyone.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The dilemma of the business front-end
1.1 Business front-end is "busy"
The front end of the business, as the name implies, is the front end of the business, directly in contact with the PD and operations of the business, and is directly responsible for the users of the product. In actual work, the front-end business is often busy with various meetings, projects, and Q&amp;amp;A. Even if there are multiple front-end classmates on a business line, they may still feel strenuous in the face of Chengshan's needs. The reasons may include:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;User-side products often need to go online quickly, most of the needs require inverted schedules, and development time is particularly tight&lt;br&gt;
I’m not familiar with the business. I only go to the visual review when the project requirements have been determined. There is no way to judge whether the business logic behind the requirements matches the business rhythm, whether the requirements themselves can achieve the business goals, and whether there is a better way to achieve them. Able to accept the demand, and then schedule&lt;br&gt;
Maintenance costs are high, and I have to be busy solving various online problems every day. For example, there is a problem with the style here, why is there no display... Various trivial problems make your life very "fulfilling"&lt;br&gt;
Demand response speed is slow. For example, the business technology stack is old, or there are too many custom logics. You have to check the documentation while writing the code. If you can't find it, you may need to check the source code, which greatly reduces the efficiency. Or it may be different from other business technology systems, which are difficult to reuse and accumulate. If you want to use it, you may have to rewrite it again...&lt;br&gt;
1.2 Is the business front-end a "resource"?&lt;br&gt;
The feature of front-end positions is that they can complete the work with visual drafts, and do not need to understand the full picture of the business. Therefore, it is easy for the front-end to ignore business thinking during the busy period. In addition to the various reasons described above, the front-end business is often reduced to "resources". When you are reduced to a "resource", you have actually lost the qualification to talk to the business on an equal footing. They will only treat you as a development machine of undeserved feelings, input requirements with you, and let you spit out the page, and you are in this way. In the relationship, there was originally written neat code. In order to quickly realize the business requirements, you also started to write messy code. You have no say in the products you create, and you lose your passion and patience over time.&lt;/p&gt;

&lt;p&gt;If you lose your passion, you don’t want to write, because you haven’t made anything special, and your boss won’t recognize your hard work. You will also feel that you don’t think enough, don’t have business sence, don’t help the business, and don’t let the business. It's different because of your existence...&lt;/p&gt;

&lt;p&gt;1.3 Business front end wants to break through&lt;br&gt;
Okay, then I decided to make some changes, so I put forward a series of ideas with the boss:&lt;/p&gt;

&lt;p&gt;The technical system here is too old, in order to further improve the development efficiency, we want to carry out technical reconstruction&lt;br&gt;
The front-end and back-end joint debugging is a bit laborious. We want to build a joint data center to improve the efficiency of joint debugging.&lt;br&gt;
The display speed there is too slow, we need to optimize the performance&lt;br&gt;
...&lt;br&gt;
The boss often asks a series of soul questions:&lt;/p&gt;

&lt;p&gt;Why do it? (What is the business value? What is the technical value?)&lt;br&gt;
Why do it now?&lt;br&gt;
Why did you do it?&lt;br&gt;
What about ROI (input-output ratio)?&lt;br&gt;
Before it started, the restless heart was poured cold water by a series of "questions" from the boss.&lt;/p&gt;

&lt;p&gt;If you don’t answer these questions well and convince the boss, you won’t be able to get any resources. You can only do it by one person. Often the quality is not good and there is no one to use. In demand.&lt;/p&gt;

&lt;p&gt;I was not happy and did not grow up. In the end, I could only leave the job dimly, but would it be okay if I changed a company? It is likely to be a similar process...&lt;/p&gt;

&lt;p&gt;This is really the "dilemma" of the front-end business, so how to break through this dilemma? First of all, we must set our mindset and start with understanding the business.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Understand the business
2.1 Business and needs
Before understanding the business, we must first know that business and demand are not the same. Understanding the requirements does not mean understanding the business. The requirements are the products of the business after product digestion, which may have been deduced or disassembled. Therefore, the requirements are not the business itself. Of course, the more you understand the needs, the better you will understand the overall picture of the business.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So what is business? The industry has many definitions of "business", but the main idea remains basically unchanged. Business is a process in which a series of people complete a certain task through a series of activities. Therefore, the business can be large or small, and can be split infinitely.&lt;/p&gt;

&lt;p&gt;The business involved in this article generally refers to commercial business, which is the business or its component parts directly related to the business model of the BU or company.&lt;/p&gt;

&lt;p&gt;2.2 Why should the front-end learn business&lt;br&gt;
Even if the front-end does not learn the business, it does not affect the demand. After all, you only need to tell me what the interaction is like, and the front-end can help you achieve it, and there is already a product manager role. Why does a technologist ask the dog to take the mouse, or do it on his behalf? This is to say:&lt;/p&gt;

&lt;p&gt;Only by understanding the business can you think of things that the business side has never thought of from a technical point of view; if you don’t understand the business, you may not understand what the business side wants, and you can’t even figure out the business logic of the requirements. In this case, there is only one cooperation model. Seed, the demand comes down, you catch it, and then schedule it. Perhaps, the design of this requirement is unreasonable, and you don’t know; there is a better implementation plan for this requirement, but you don’t know; this requirement can be solved through off-the-shelf related product solutions, which saves time and manpower, and you don’t know.&lt;br&gt;
Only by understanding the reasons behind the business can we plan the future of technology from a global perspective. If you don’t understand the business, you will be far from the real needs of the users. The harder it is for you to find some of the pain points and challenges, and you can’t really put forward your thoughts and solutions to solve the users’ problems.&lt;br&gt;
As a product research and development engineer, I naturally hope to personally polish a product that solves user problems and is experience-friendly. If the product can be recognized by users, it will have an impact and will naturally have a special sense of accomplishment.&lt;br&gt;
As a commercial technology company, Alibaba's requirement for technical people is to combine technology and business. On the basis of meeting business needs, it becomes a bridge between technology and business, actively enters the business, and thinks about how to help the business win and satisfy through technical means. Market and user needs, advance technical planning, talent reserve, technical architecture and technical pre-research.&lt;br&gt;
2.3 Do you understand the business?&lt;br&gt;
So do you currently understand the business you are dealing with? Try to answer the following questions:&lt;/p&gt;

&lt;p&gt;What does the business do? Is there a big picture of the product?&lt;br&gt;
What are the core indicators of the business? What are the KPI goals and what is the meaning behind these numbers? To achieve these goals, what is the business strategy?&lt;br&gt;
Who are the users of the business? How is traffic stratified? What's the proportion? What is their positioning in the business?&lt;br&gt;
The business model of the business? How to attract traffic and what is the profit model?&lt;br&gt;
What are the pages we make? What value does it bring to the business? What can we do to create more value?&lt;br&gt;
2.4 How to learn business?&lt;br&gt;
2.4.1 Reading of business domain knowledge&lt;br&gt;
Find books with good scores related to the field to concentrate on reading, and quickly form a knowledge framework.&lt;/p&gt;

&lt;p&gt;2.4.2 Understanding the business background and planning&lt;br&gt;
If you have just taken over a new business, you can invite the business owner or senior operation/product classmates to tell you about the past, present, future, vision, fiscal year planning, and expectations of technical classmates of this business;&lt;br&gt;
Take time to read the weekly reports of the partners (operations, products, R&amp;amp;D) to understand what is happening now and whether it is getting closer to the goal;&lt;br&gt;
Understand the business goals, landing strategies, and the data caliber for measuring the goals, pay attention to the data, and pay attention to whether the current project is fighting to achieve the goal, if not, put forward your ideas and suggestions;&lt;br&gt;
Participate more and establish a product sense. The best way to collect information is to participate in the KO meeting of the boss of the business. Various KOs will disassemble the strategy and the thinking behind the overall arrangement and then communicate to the BU or classmates in the department.&lt;br&gt;
2.4.3 More exchanges&lt;br&gt;
Chat with server-side classmates, chat with PM, chat with users, and look at the business from multiple angles, but it should be noted that for more professional businesses, you need to do your homework first. At least some English abbreviations must be clear and understandable.&lt;/p&gt;

&lt;p&gt;2.4.4 Remember the numbers&lt;br&gt;
If it takes a long time before, then this one can be done now, that is, the more detailed the business-related figures can be remembered, the more specific the better, and the more comprehensive the better. This has two advantages:&lt;/p&gt;

&lt;p&gt;The recorded digital indicators themselves have already covered this business value direction to a large extent, and you will know which dimension the business focuses on.&lt;br&gt;
These numbers can be used as the source of "equal dialogue" with business parties and products, otherwise there is no basis for even the most basic dialogue&lt;br&gt;
2.4.5 Start with daily needs&lt;br&gt;
For the needs of the project, we must try to analyze the purpose and value behind it, what expected benefits will be obtained after doing it, why this benefit can be achieved by doing so, and whether it is in line with the overall goal, and we must also judge the points mentioned by the business side. If it is not an effective plan or a plan that is too costly, see if an alternative plan can be given to satisfy the business side with the existing plan or a low-cost method.&lt;/p&gt;

&lt;p&gt;After the project is tested and launched, it is necessary to carefully analyze and pay more attention to the business data and effects after the launch, which will have the following benefits:&lt;/p&gt;

&lt;p&gt;Improve your understanding of the business. When you pay attention to business data, you will also see from a business perspective whether the value brought by this function meets expectations. When it does not meet expectations, you can The business side will analyze the data funnel together to find the problem and prevent our labor results from becoming a one-time job.&lt;br&gt;
At the same time, the summary can help you sort out the deficiencies in this project, or what problems exist in the related promotion, and how to improve later, so as to improve the iterative efficiency and quality of the next project. For example, whether there are problems such as poor understanding of requirements and rework in this project, or low efficiency of communication &amp;amp; joint adjustment, unstable environment, and whether the plan designed by yourself is reasonable, and how to solve it in the future.&lt;br&gt;
It can also be judged from the data and summary what kind of demand is reliable &amp;amp; what kind of business side is reliable, the business side who frequently strives for resources to go online but does not have a good effect, and the next time there is a demand, it needs to be increased. A process of mind and thinking.&lt;br&gt;
2.4.6 Persist&lt;br&gt;
Business thinking ability, no one will not be effective for at least half a year&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Boost business
3.1 Thinking
Although the business is usually very busy, no matter how busy you are, you have to take time to think . So what should you think about? Here are some examples:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Develop the habit of memorizing work content every day, and analyze where your time is spent&lt;br&gt;
In business development, are there any points that make you particularly want to complain? Think about the reason behind the problem. Is there any way to avoid not committing it next time? Can it be refined into a more general solution? How can other students solve it? How can I solve it?&lt;br&gt;
Constantly input and observe, what are the real needs of the business? Thinking from the perspective of the business side, where are the pain points and challenges encountered by the business?&lt;br&gt;
3.2 Communication&lt;br&gt;
Focus on the boss, teammates, and business side to confirm whether "what I want to do" is "what everyone wants"?&lt;/p&gt;

&lt;p&gt;You may put forward a lot of opinions, but generally you will be ruthlessly rejected by your boss or business side, and you will be confused when asked, such as:&lt;/p&gt;

&lt;p&gt;In the current business context, why do we do it? (What is the business value? What is the technical value?)&lt;br&gt;
Must it be done now?&lt;br&gt;
Why did you do it?&lt;br&gt;
How to do it? (Systematic, full-link, single-point technical challenge)&lt;br&gt;
What are the business and technical results? Can it be reused?&lt;br&gt;
Future planning (can it be linked and co-constructed with BU or group plans)&lt;br&gt;
And this is often because the things you propose to do are valuable but not necessary, and do not integrate what the current business needs. In other words, the technology you want to do is considered from a personal and purely technical perspective. There is no technical plan based on the current situation and pain points of the business. It is not grounded and the input-output ratio is not high.&lt;/p&gt;

&lt;p&gt;Therefore, first find a good business position for technical output, see if there is any place to borrow, and don't repeat the wheel. After quickly verifying the correctness of this direction, gradually increase investment and full technical design. Don't do it by yourself and silently. The things that come out of this way are not paid for by the business scenario.&lt;/p&gt;

&lt;p&gt;3.3 Technical planning&lt;br&gt;
Business empowerment actually requires us to closely follow our business plans and formulate technical plans and plans. After understanding the key points of the business side’s KPIs this year, the expected dismantling and implementation paths, and combining your own and team situation, think about what you can do to help the business achieve its KPIs. There are two points to note here. Down:&lt;/p&gt;

&lt;p&gt;Grasping the essence from the point and aspect, consider the overall situation : In many cases, the pain points and business needs we receive are single points. At this time, we cannot focus on the single point problem at hand, but need to consider the overall situation, such as the SEO page Very sensitive to performance, and often may receive feedback from some business parties, saying that our SEO has this place and that place needs to be optimized, and single-point solution to these problems may not bring much benefit to the business, and it is not for yourself. There is no growth in his skills. At this time, if you consider this proposition comprehensively, you will actually find that the optimization of SEO pages is actually to improve the inclusion and ranking of SEO pages. In fact, to improve the inclusion and ranking of SEO pages is not only the path of front-end performance optimization, but also some other paths: such as optimizing keywords &amp;amp; long tail words, using Google's AMP technology to transform SEO pages, and optimizing crawlers to crawl pages. Time-consuming to improve the crawl rate and so on. In this way, we can transform the problems of the right points into the problems of the face, and then we can formulate more effective and comprehensive hands to empower the business.&lt;/p&gt;

&lt;p&gt;We must not only solve the immediate pain points, but also have long-term plans : In many cases, we can't just be satisfied with the KPIs in front of us, but also need to understand the business side's long-term ideas and foreseeable plans. For example, in the pilot new business, the first level of planning is to ensure that the business projects are launched on time. Considering the future, the other level of planning may be how to achieve the reproducibility of technical solutions.&lt;/p&gt;

&lt;p&gt;3.4 Standing on the shoulders of giants&lt;br&gt;
When you need to develop a productized plan or tool and framework, it is best to look at the group and the industry to conduct a survey to see how the industry and other colleagues solve this problem. Try to stand on the shoulders of others to innovate or participate in co-construction to avoid repetitive and low-quality wheels in small teams&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Technical Depth
4.1 Technical knowledge and technical ability
"Technology" cannot be a general term. I think it can be divided into at least two parts, "technical knowledge" and "technical ability".&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What is "technical knowledge"? Knowledge is I KNOW&lt;/p&gt;

&lt;p&gt;"TypeScript from entry to abandonment"&lt;br&gt;
"React from getting started to giving up"&lt;br&gt;
"Webpack From Entry to Abandonment"&lt;br&gt;
......&lt;br&gt;
What is "technical capability"? Ability is I CAN&lt;/p&gt;

&lt;p&gt;I used TypeScript to refactor a large-scale system, and the code robustness and R&amp;amp;D efficiency have been greatly improved.&lt;br&gt;
I used React Hooks to conduct front-end training for the full stack of students, and the training effect was greatly improved.&lt;br&gt;
I studied Webpack in depth and optimized the configuration, which greatly improved the system construction speed.&lt;br&gt;
.....&lt;br&gt;
4.2 Cultivate technical vision&lt;br&gt;
Pay attention to new technologies in the daily industry. It is not necessary to understand in depth, but be curious about the new technology, and probably understand what it does. If you encounter a matching landing environment at work, you can consider writing a demo to see if it is valuable&lt;br&gt;
Pay attention to the solutions of the group and the industry. When we discover problems in the business and make solutions, we can easily fall into our own design, and we want to make everything ourselves, but the input will be very large, and the value of the output will be the same? have no idea. In most cases, what you want to do, you can find in ATA, the pits stepped on by the predecessors, or the existing mature solutions, as long as you communicate and get in touch, you can easily get in. Why do you spend a lot of money? Time to make wheels? Where you can borrow, let’s borrow it, and spare the time to do the more core and valuable things in your solution.&lt;br&gt;
4.3 Technical Depth&lt;br&gt;
When you talk about "technical depth", you may naturally think that you have dig deep in a certain technology or solved a technical problem that is recognized by the industry as difficult, but this is only part of the "technical depth":&lt;/p&gt;

&lt;p&gt;Systematization / Systematization Systematization&lt;br&gt;
thinking is a way to understand things. When facing a problem, it can list the key elements and solutions for complex problems, and make the chaotic and disordered problems logically clear. There are rules to follow.&lt;br&gt;
In the embodiment of the positioning and solution of the problem, from the appearance to the essence, the reasons behind the problem are disassembled, and the essential reasons are solved in a targeted manner, instead of treating the symptoms and not the root cause, there are solutions to solve them in a rhythmic manner.&lt;/p&gt;

&lt;p&gt;In addition to the front-end part of the full link , the forward and backward technology stack can be digged deep.&lt;br&gt;
Single-point technical challenge&lt;br&gt;
On a certain technical challenge, what are your thinking and solutions?&lt;br&gt;
4.4 Win-win technology and business&lt;br&gt;
Really breakthrough business results that bring significant value will inevitably be accompanied by technical in-depth and even innovation. Therefore, when doing business results, there must be scenarios that allow us to increase the depth of technology.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Give you more sense of body
Cultivating a sense of business is indeed a very difficult thing. He requires you to take business rather than technology as the first perspective. This may violate the inner "technical persistence" of many people, but if you keep working on technology, it is actually very difficult. It is a very big breakthrough. In your work, if you can achieve a win-win situation between technology and business, it will help you reach a higher height.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Change is indeed difficult, but the result is worth the risk.&lt;/p&gt;

&lt;p&gt;Recommend&lt;br&gt;
&lt;a href="https://www.walkthrough007.com/"&gt;https://www.walkthrough007.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>html</category>
      <category>node</category>
    </item>
    <item>
      <title>Convert Blob Data to Base64 in JavaScript</title>
      <author>Srivastava Bodakunti</author>
      <pubDate>Mon, 16 Aug 2021 15:35:54 +0000</pubDate>
      <link>https://dev.to/srivastava295/convert-blob-data-to-base64-3a8h</link>
      <guid>https://dev.to/srivastava295/convert-blob-data-to-base64-3a8h</guid>
      <description>&lt;p&gt;You can find my blog post at here (&lt;a href="https://velocitybytes.com/convert-blob-data-to-base64-in-javascript"&gt;https://velocitybytes.com/convert-blob-data-to-base64-in-javascript&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This is my first post, I thought to write the content here, but it's somewhat difficult for writing markdown.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The safest url shortener for the WEB</title>
      <author>NarayaN Yaduvanshi</author>
      <pubDate>Mon, 16 Aug 2021 15:27:23 +0000</pubDate>
      <link>https://dev.to/yadu/the-safest-url-shortener-for-the-web-4788</link>
      <guid>https://dev.to/yadu/the-safest-url-shortener-for-the-web-4788</guid>
      <description>&lt;p&gt;Almost all url shortener that I see today on world wide web comes in 2 simple part.&lt;br&gt;
&lt;code&gt;https://bit.ly/3jR0OWU&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Domain name&lt;/li&gt;
&lt;li&gt;combination of 6 alpha numerics.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you click on it, it takes you to a long url.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h2&gt;

&lt;p&gt;I as a user have no idea where these 6 alpha-numeric phrase mystery will take me.&lt;br&gt;
&lt;strong&gt;Let me take another eg:&lt;/strong&gt;&lt;br&gt;
Below I have 2 short URLs. One of them will take me to youtube website and other to a NSFW website. Can you tell me which one does what?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://bit.ly/2Uf76Xz"&gt;https://bit.ly/2Uf76Xz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bit.ly/3jR0OWU"&gt;https://bit.ly/3jR0OWU&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;(Don't be idiot like me and click these URLs without headphones on)&lt;/p&gt;

&lt;p&gt;To me, this is a problem, links are meant to inform you where they are taking you by their domains names. I like to not have surprises.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;Below are 2 short URLs, Can you again take a look at them and tell me if you can figure out which short URL takes you to youtube and not the NSFW website.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://allurl.one/7bj0_p6idG/redtube.com"&gt;https://allurl.one/7bj0_p6idG/redtube.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://allurl.one/y-uSm2dP_8/youtube.com"&gt;https://allurl.one/y-uSm2dP_8/youtube.com&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I have added target domain as the third part of the url, so that web users can take an informed decision whether to click it or not.&lt;/p&gt;

&lt;p&gt;There it is, I believe this will make the web a little secure and links trustworthy. I means back to old times. Cheers&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#also"&gt;
  &lt;/a&gt;
  Also,
&lt;/h2&gt;

&lt;p&gt;If we go ahead with just the domain name and short code, we should give a choice to users whether they want to redirect to that site or not.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://allurl.one/y-uSm2dP_8"&gt;https://allurl.one/y-uSm2dP_8&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Clicking the above URL will take you to redirection page where it will inform you about the destination and give you a choice to abort or proceed. Just like this picture.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U0PXlfd_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/re2bl09fnvqxyc58dfh5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U0PXlfd_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/re2bl09fnvqxyc58dfh5.png" alt="choice to redirect"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>url</category>
      <category>safeweb</category>
      <category>links</category>
    </item>
    <item>
      <title>📖 Go Fiber by Examples: How can the Fiber Web Framework be useful?</title>
      <author>Vic Shóstak</author>
      <pubDate>Mon, 16 Aug 2021 15:22:03 +0000</pubDate>
      <link>https://dev.to/koddr/go-fiber-by-examples-how-can-the-fiber-web-framework-be-useful-487a</link>
      <guid>https://dev.to/koddr/go-fiber-by-examples-how-can-the-fiber-web-framework-be-useful-487a</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hello and welcome, DEV friends! 👋 &lt;/p&gt;

&lt;p&gt;As you probably know, the printed book that we planned to release with &lt;strong&gt;Packt&lt;/strong&gt; publisher called &lt;strong&gt;Easy Development with GoFiber&lt;/strong&gt; is now canceled. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🤯 There are many reasons for this, both from my side and from the side of this respected publisher, I will not focus on this. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Therefore, I decided to release all of my written material in &lt;strong&gt;free access&lt;/strong&gt; as a series of articles in my blog on &lt;a href="https://dev.to/koddr/"&gt;Dev.to&lt;/a&gt; for everyone! 😉&lt;/p&gt;

&lt;p&gt;Today, I start a new series of articles called &lt;strong&gt;Go Fiber by Examples&lt;/strong&gt;, which will be a handbook for those who want to learn the &lt;strong&gt;Fiber&lt;/strong&gt; web framework quickly and efficiently while developing a real web application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plan-for-the-chapter-1"&gt;
  &lt;/a&gt;
  Plan for the Chapter 1
&lt;/h2&gt;

&lt;p&gt;In this first article (or chapter), we will take a look at the history of the &lt;strong&gt;Fiber&lt;/strong&gt; web framework, find out which groups of programmers are best suited to it, and see how similar it is to &lt;strong&gt;Node.js&lt;/strong&gt; framework &lt;strong&gt;Express&lt;/strong&gt;, using real-world examples.&lt;/p&gt;

&lt;p&gt;We are going to cover the following main topics 👇&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  📝 Table of contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#coming-from-another-programming-language-or-golang-web-framework"&gt;Coming from another programming language or Golang web framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#looking-to-swap-nodejs-for-go"&gt;Looking to swap NodeJS for Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-philosophy-behind-using-fiber-web-framework"&gt;The philosophy behind using Fiber web framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#a-brief-comparison-with-express"&gt;A brief comparison with Express&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#hello-world"&gt;Hello World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#basic-routing-and-endpoints"&gt;Basic routing and endpoints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-middleware"&gt;Using middleware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#serving-static-files"&gt;Serving static files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#working-with-templates"&gt;Working with templates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#coming-from-another-programming-language-or-golang-web-framework"&gt;
  &lt;/a&gt;
  Coming from another programming language or Golang web framework
&lt;/h2&gt;

&lt;p&gt;If you come from another language (such as &lt;strong&gt;Python&lt;/strong&gt;, &lt;strong&gt;Ruby&lt;/strong&gt;, or &lt;strong&gt;JavaScript&lt;/strong&gt;), the &lt;strong&gt;Fiber&lt;/strong&gt; web framework will help you to smoothly enter into the &lt;strong&gt;Go&lt;/strong&gt; programming language. &lt;/p&gt;

&lt;p&gt;It has very familiar elements and is designed to make the product development process as easy as possible for developers of different skill levels from other programming languages. &lt;/p&gt;

&lt;p&gt;For developers who are already working with other &lt;strong&gt;Go&lt;/strong&gt; web frameworks or API tools, &lt;strong&gt;Fiber&lt;/strong&gt; can offer the following benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Extreme performance and low memory footprint&lt;/li&gt;
&lt;li&gt;Rapid server-side programming&lt;/li&gt;
&lt;li&gt;Built-in middleware for most tasks&lt;/li&gt;
&lt;li&gt;Rich and robust routing&lt;/li&gt;
&lt;li&gt;Easy serve static files and work with databases&lt;/li&gt;
&lt;li&gt;Support of all popular template engines&lt;/li&gt;
&lt;li&gt;...and much, much more to talk about in this series!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A friendly and supportive &lt;strong&gt;Fiber&lt;/strong&gt; community around the World has already translated basic documentation into &lt;strong&gt;15&lt;/strong&gt; different languages and is ready to support you in &lt;a href="https://github.com/gofiber/fiber/issues"&gt;issues&lt;/a&gt; of the project repository on &lt;strong&gt;GitHub&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#looking-to-swap-nodejs-for-go"&gt;
  &lt;/a&gt;
  Looking to swap NodeJS for Go
&lt;/h2&gt;

&lt;p&gt;New gophers that make the switch from &lt;a href="https://nodejs.org/"&gt;Node.js&lt;/a&gt; to &lt;strong&gt;Golang&lt;/strong&gt; are dealing with a learning curve before they can start building their web applications, APIs, or microservices. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fiber&lt;/strong&gt; is inspired by &lt;a href="https://expressjs.com/"&gt;Express&lt;/a&gt;, the most popular web framework on the Internet. Its authors combined the ease of &lt;strong&gt;Express&lt;/strong&gt; and the raw performance of &lt;strong&gt;Go&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;And we will be surprised at how easy it is to make the transition from one language to a completely different one, thanks to learning just the &lt;strong&gt;Fiber&lt;/strong&gt; Web Framework!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🌐 &lt;strong&gt;Note&lt;/strong&gt;: Also, I recommend visiting the &lt;strong&gt;GitHub&lt;/strong&gt; repository by Miguel Mota called &lt;a href="https://github.com/miguelmota/golang-for-nodejs-developers"&gt;Golang for Node.js Developers&lt;/a&gt;. It describes the basic principles for a smoother transition of your backend from &lt;strong&gt;JavaScript&lt;/strong&gt; to &lt;strong&gt;Go&lt;/strong&gt; in a fairly straightforward way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Therefore, if you have ever implemented a web application in &lt;strong&gt;Node.js&lt;/strong&gt; (using &lt;strong&gt;Express&lt;/strong&gt; or similar), then many methods and principles will seem very common to you.&lt;/p&gt;

&lt;p&gt;We will discuss this in more detail near the end of this article.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-philosophy-behind-using-fiber-web-framework"&gt;
  &lt;/a&gt;
  The philosophy behind using Fiber web framework
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Fiber&lt;/strong&gt;, as a web framework, was created with the idea of minimalism and follows the &lt;a href="https://en.wikipedia.org/wiki/Unix_philosophy"&gt;UNIX way&lt;/a&gt;, so that new gophers can quickly enter the world of Go with a warm and trusted welcome. That’s why &lt;strong&gt;Fiber&lt;/strong&gt; is a very versatile &lt;strong&gt;Go&lt;/strong&gt; framework.&lt;/p&gt;

&lt;p&gt;But the main focus of its application is to create complete all-in-one web applications, like &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; in &lt;strong&gt;Python&lt;/strong&gt; or &lt;a href="https://rubyonrails.org/"&gt;Ruby on Rails&lt;/a&gt; in &lt;strong&gt;Ruby&lt;/strong&gt;, and efficient high-performance REST APIs, like &lt;a href="https://fastapi.tiangolo.com/"&gt;FastAPI&lt;/a&gt; for &lt;strong&gt;Python&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;This does not mean that you cannot create microservices or adapters for your infrastructure or even desktop network apps or else on &lt;strong&gt;Fiber&lt;/strong&gt;. Absolutely no! Such areas are simply not a priority for the authors of this framework. But they always listen to its users in issues on &lt;strong&gt;GitHub&lt;/strong&gt; repository, &lt;a href="https://gofiber.io/discord"&gt;Discord channel&lt;/a&gt;, and all over the Internet.&lt;/p&gt;

&lt;p&gt;The authors want to create a fast, flexible, and friendly &lt;strong&gt;Golang&lt;/strong&gt; web framework for any task, deadline, and developer skill. Just like &lt;strong&gt;Express&lt;/strong&gt; framework does in the &lt;strong&gt;JavaScript&lt;/strong&gt; world.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-brief-comparison-with-express"&gt;
  &lt;/a&gt;
  A brief comparison with Express
&lt;/h2&gt;

&lt;p&gt;Being inspired by &lt;strong&gt;Express&lt;/strong&gt;, the &lt;strong&gt;Fiber&lt;/strong&gt; web framework may seem very familiar to you. We will break down the most basic things in the next sections, where you can see them for yourself. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;👌 &lt;strong&gt;Note&lt;/strong&gt;: Don't worry if you have never worked with &lt;strong&gt;Go&lt;/strong&gt; or &lt;strong&gt;JavaScript&lt;/strong&gt;, we have left comprehensive comments in the code examples below to help you get oriented.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello World
&lt;/h3&gt;

&lt;p&gt;A classic example for every programming language or web framework is the minimally working &lt;strong&gt;Hello World&lt;/strong&gt; program. Well, let's not deny ourselves that!&lt;/p&gt;

&lt;p&gt;First, let's take a look at &lt;strong&gt;Express&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ./js/hello_world.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// add Express library&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// create a new Express instance&lt;/span&gt;

&lt;span class="c1"&gt;// Create a new endpoint&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// send text&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Start server on port 3000&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Very easy, isn't it? Just a couple of lines of code and a full-fledged web server is ready to receive users on the specified endpoint on port &lt;code&gt;3000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And here's how exactly the same functionality can be implemented with &lt;strong&gt;Fiber&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./go/hello_world.go&lt;/span&gt;

&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"github.com/gofiber/fiber/v2"&lt;/span&gt; &lt;span class="c"&gt;// add Fiber package&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;// create a new Fiber instance&lt;/span&gt;

  &lt;span class="c"&gt;// Create a new endpoint&lt;/span&gt;
  &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SendString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// send text&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="c"&gt;// Start server on port 3000&lt;/span&gt;
  &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":3000"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Except for some &lt;strong&gt;JavaScript&lt;/strong&gt; or &lt;strong&gt;Go&lt;/strong&gt;-specific blocks at the beginning of the program, the code reads, feels, and works exactly the same under the hood. And this state will follow us in almost all of the code examples in this series.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basic-routing-and-endpoints"&gt;
  &lt;/a&gt;
  Basic routing and endpoints
&lt;/h3&gt;

&lt;p&gt;As you know, any web application, microservice, or API includes a routing system based on endpoints describing an &lt;a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods"&gt;HTTP method&lt;/a&gt; and a handler function, which will be executed only after this endpoint receives a request from the client-side.&lt;/p&gt;

&lt;p&gt;In the preceding &lt;strong&gt;Hello World&lt;/strong&gt; program, we already touched the &lt;code&gt;app.get(path, () =&amp;gt; {})&lt;/code&gt; (in case of &lt;strong&gt;Express&lt;/strong&gt;) and &lt;code&gt;app.Get(path, func() error {})&lt;/code&gt; (in case of &lt;strong&gt;Fiber&lt;/strong&gt;) endpoints, which serve the HTTP GET method and return a plain string when requested. &lt;/p&gt;

&lt;p&gt;Let’s take a look at the other HTTP methods which we can use to describe the endpoint in our web application. Let's start, per tradition, with the &lt;strong&gt;Express&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ./js/routing.js&lt;/span&gt;

&lt;span class="c1"&gt;// Endpoint for POST method&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// function that stores a new data&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Endpoint for PUT method&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// function that replaces the existing data&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Endpoint for PATCH method&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// function that replaces part of the existing data&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Endpoint for DELETE method&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// function that deletes the data&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It might seem that these HTTP methods are not enough to describe the endpoints of your web application, but in fact, &lt;strong&gt;Express&lt;/strong&gt; and &lt;strong&gt;Fiber&lt;/strong&gt; support many more request HTTP methods.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;☝️ &lt;strong&gt;Note&lt;/strong&gt;: We have only described the most basic ones!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now let's take a look at how the same basic HTTP methods look in &lt;strong&gt;Fiber&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./go/routing.go&lt;/span&gt;

&lt;span class="c"&gt;// Endpoint for Post method&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;// function that stores a new data&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c"&gt;// Endpoint for PUT method&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;// function that replaces the existing data&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c"&gt;// Endpoint for PATH method&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;// function that replaces part of the existing data&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c"&gt;// Endpoint for DELETE method&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;// function that deletes the data&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, except for some blocks specific to each programming language, the code reads and works exactly the same.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-middleware"&gt;
  &lt;/a&gt;
  Using middleware
&lt;/h3&gt;

&lt;p&gt;The middleware functions have access to the HTTP request and response objects and the next middleware function. They can perform the following tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Execute any code we need&lt;/li&gt;
&lt;li&gt;Make any changes and modifications to the request and response objects&lt;/li&gt;
&lt;li&gt;Complete the request-response loop&lt;/li&gt;
&lt;li&gt;Call the next middleware function that is in the stack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are not going to delve into middleware now. Our goal is only to compare the technical design of these web frameworks. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;👌 &lt;strong&gt;Note:&lt;/strong&gt; We will return to middleware in later articles of this series.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, here is an example of a middleware function for the &lt;strong&gt;Express&lt;/strong&gt; framework that outputs the current date and time to the browser console and simply passes the request to the next endpoint:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ./js/middleware.js&lt;/span&gt;

&lt;span class="c1"&gt;// Middleware function&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// print current date and time to console&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Date:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

  &lt;span class="c1"&gt;// passing the request to the next endpoint&lt;/span&gt;
  &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is how the same middleware will work with &lt;strong&gt;Fiber&lt;/strong&gt;, but the date and time will be output to the normal terminal instead of the browser console:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./go/middleware.go&lt;/span&gt;

&lt;span class="c"&gt;// Middleware function&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;// print current date and time to console&lt;/span&gt;
  &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Date:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

  &lt;span class="c"&gt;// passing the request to the next endpoint&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once again, we saw similarities between these web frameworks.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#serving-static-files"&gt;
  &lt;/a&gt;
  Serving static files
&lt;/h3&gt;

&lt;p&gt;If we want to create a &lt;a href="https://en.wikipedia.org/wiki/Single-page_application"&gt;Single-Page Application&lt;/a&gt; rather than an ordinary web application, we will need to be able to request a directory with static files. &lt;/p&gt;

&lt;p&gt;These files are usually:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Images&lt;/li&gt;
&lt;li&gt;CSS files&lt;/li&gt;
&lt;li&gt;JavaScript files&lt;/li&gt;
&lt;li&gt;HTML files&lt;/li&gt;
&lt;li&gt;Template and other downloadable files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The process of working with them is based on this scheme:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Define a folder to store static files.&lt;/li&gt;
&lt;li&gt;Specify it as a mount point in the web application.&lt;/li&gt;
&lt;li&gt;In the HTML file (or template) we make references to this mount point.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's look at a small example to get an understanding.&lt;/p&gt;

&lt;p&gt;If we store statics in the &lt;code&gt;./public&lt;/code&gt; folder at the root of our directory, then using the Express built-in &lt;code&gt;express.static()&lt;/code&gt; function, we can mount it at &lt;code&gt;/static&lt;/code&gt; address as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ./js/static.js&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/static&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// mount address&lt;/span&gt;
  &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;public&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// path to the file folder&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here's a sample code for &lt;strong&gt;Fiber&lt;/strong&gt; that will do exactly the same thing for us:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./go/static.go&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;"/static"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c"&gt;// mount address&lt;/span&gt;
  &lt;span class="s"&gt;"./public"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// path to the file folder&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a result, all static files for both &lt;strong&gt;Express&lt;/strong&gt; and &lt;strong&gt;Fiber&lt;/strong&gt; will be available at the following address:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://localhost:3000/static/images/background.jpg 
http://localhost:3000/static/css/style.css 
http://localhost:3000/static/js/app.js 
http://localhost:3000/static/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this approach, we can easily set up a proxy server, such as &lt;a href="https://nginx.org"&gt;NGINX&lt;/a&gt;, to send static files more efficiently.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#working-with-templates"&gt;
  &lt;/a&gt;
  Working with templates
&lt;/h3&gt;

&lt;p&gt;When we build a web application that not only has to return content in JSON format but also has to be able to render templates with that content, template engines come to the rescue. &lt;/p&gt;

&lt;p&gt;Both web frameworks support a huge number of template engines right out of the box: &lt;a href="https://pugjs.org/"&gt;Pug&lt;/a&gt;, &lt;a href="https://jade-lang.com/"&gt;Jade&lt;/a&gt;, &lt;a href="https://mustache.github.io/"&gt;Mustache&lt;/a&gt;, &lt;a href="https://handlebarsjs.com/"&gt;Handlebars&lt;/a&gt;, and many others. Let's take a look at the &lt;strong&gt;Pug&lt;/strong&gt; engine to see how a template renders in &lt;strong&gt;Express&lt;/strong&gt; works:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ./js/templates.js&lt;/span&gt;

&lt;span class="c1"&gt;// Initialize Pug template engine for rendering&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;view engine&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pug&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Initialize templates folder&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;views&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./views&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Create a new endpoint&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// rendering the "index" template with content passing&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hey!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This is the index template.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For &lt;strong&gt;Fiber&lt;/strong&gt;, the same example will be a little more complicated but will remain just as familiar. The reason for this is that the configuration of the application cannot be changed after the &lt;strong&gt;Fiber&lt;/strong&gt; instance has been created. It is a read-only.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./go/templates.go&lt;/span&gt;

&lt;span class="c"&gt;// Initialize Pug template engine in ./views folder&lt;/span&gt;
&lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;pug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"./views"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;".pug"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;// Create a new Fiber instance&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Views&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// set template engine for rendering&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c"&gt;// Create a new endpoint&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;// rendering the "index" template with content passing&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"index"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"Title"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="s"&gt;"Hey!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Message"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"This is the index template."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;⚙️ &lt;strong&gt;Note&lt;/strong&gt;: Both frameworks will only look for templates with &lt;code&gt;*.pug&lt;/code&gt; extension in the &lt;code&gt;./views&lt;/code&gt; folder of the current directory. If this folder does not exist or does not contain a file named &lt;code&gt;index.pug&lt;/code&gt;, an error will happen.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Even though Express and &lt;strong&gt;Fiber&lt;/strong&gt; are written in different programming languages and by different development teams, they have a very similar technical design of built-in functions and working principles. This is what makes &lt;strong&gt;Fiber&lt;/strong&gt; so special among many &lt;strong&gt;Go&lt;/strong&gt;-based web frameworks. &lt;/p&gt;

&lt;p&gt;We will explain this in more detail later in the future articles.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;We hope this article of the series has shown you a whole different side of the &lt;strong&gt;Go&lt;/strong&gt; language, if you've only ever written code for your web applications in &lt;strong&gt;JavaScript&lt;/strong&gt; before. &lt;/p&gt;

&lt;p&gt;Also, we do a lot of new things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We learned what &lt;strong&gt;Fiber&lt;/strong&gt; is good for and where it can be used effectively.&lt;/li&gt;
&lt;li&gt;We compared the basic functions of the Express and &lt;strong&gt;Fiber&lt;/strong&gt; web frameworks. &lt;/li&gt;
&lt;li&gt;Dismantled the routing system of web frameworks using simple examples.&lt;/li&gt;
&lt;li&gt;Understood what middleware is and how to work with it in Fiber. &lt;/li&gt;
&lt;li&gt;We looked at an example of how &lt;strong&gt;Fiber&lt;/strong&gt; works with static files. &lt;/li&gt;
&lt;li&gt;We found out what popular template engines &lt;strong&gt;Fiber&lt;/strong&gt; supports out of the box and how to work with them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the next articles, we will get even closer to the inner workings of the &lt;strong&gt;Fiber&lt;/strong&gt; web framework, its built-in components and methods.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#photos-and-videos-by"&gt;
  &lt;/a&gt;
  Photos and videos by
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Janko Ferlič feat. Vic Shóstak &lt;a href="https://unsplash.com/photos/sfL_QOnmy00"&gt;https://unsplash.com/photos/sfL_QOnmy00&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ps"&gt;
  &lt;/a&gt;
  P.S.
&lt;/h2&gt;

&lt;p&gt;If you want more articles like this on this blog, then post a comment below and subscribe to me. Thanks! 😘&lt;/p&gt;

</description>
      <category>go</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>showdev</category>
    </item>
    <item>
      <title>TLDR: Database Naming</title>
      <author>An Pham</author>
      <pubDate>Mon, 16 Aug 2021 15:16:27 +0000</pubDate>
      <link>https://dev.to/ancs21/tldr-database-naming-36fa</link>
      <guid>https://dev.to/ancs21/tldr-database-naming-36fa</guid>
      <description>&lt;p&gt;&lt;em&gt;Credit: Photo by Tobias Fischer on Unsplash&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Table names should be plural (ex: &lt;code&gt;users&lt;/code&gt;, &lt;code&gt;customers&lt;/code&gt;,...)&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;underscore_names&lt;/code&gt; (ex: &lt;code&gt;user_id&lt;/code&gt;, &lt;code&gt;user_role&lt;/code&gt;,...)&lt;/li&gt;
&lt;li&gt;Don't name primary key column &lt;code&gt;id&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Don't make column names unclear (ex: &lt;code&gt;u_role&lt;/code&gt;,...)&lt;/li&gt;
&lt;li&gt;Name foreign key columns the same as the columns they refer to&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>database</category>
      <category>naming</category>
    </item>
    <item>
      <title>All You Need To Know About Context Managers In Python</title>
      <author>Jerry Ng</author>
      <pubDate>Mon, 16 Aug 2021 15:13:50 +0000</pubDate>
      <link>https://dev.to/jerrynsh/all-you-need-to-know-about-context-managers-in-python-i03</link>
      <guid>https://dev.to/jerrynsh/all-you-need-to-know-about-context-managers-in-python-i03</guid>
      <description>&lt;p&gt;Regarded as an obscure feature by some, the &lt;code&gt;with&lt;/code&gt; statement in Python is often only used when dealing with file operations. Below is an example to read and write a file with Python's built-in open function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'hello.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Hello Python!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the most part, all people knew was that using the with statement is the preferred way to manage files rather than using the close method.&lt;/p&gt;

&lt;p&gt;The fact is, most people couldn't be bothered enough to peek behind the scene of what is happening behind the scenes. Here's a tip, the underlying protocol is known as a &lt;a href="https://docs.python.org/3/reference/datamodel.html#context-managers"&gt;context manager&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To me, it was all &lt;em&gt;magic&lt;/em&gt;. Honestly, who would without answering why should we ever use it?&lt;/p&gt;

&lt;p&gt;In this article, I am going to share with you why we should use context manager along with some practical use cases involving database connections. You could probably refactor some part of your codebase to use context manager with the with statement as well.&lt;/p&gt;

&lt;p&gt;Let's dive into it!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#whys"&gt;
  &lt;/a&gt;
  Whys
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#resource-management"&gt;
  &lt;/a&gt;
  Resource management
&lt;/h3&gt;

&lt;p&gt;If I were to summarize it, it would be just two words: resource management.&lt;/p&gt;

&lt;p&gt;When building any applications, it's common for us to use resources like file operations and database connections. Here's a key takeaway, these resources are limited.&lt;/p&gt;

&lt;p&gt;Oftentimes, we would need to "release" these resources after using them. As an example, whenever we open a file from our filesystem, we need to explicitly close the file when we are done using it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-leave-of-leaving-files-or-resources-open"&gt;
  &lt;/a&gt;
  Don't leave of leaving files or resources open
&lt;/h3&gt;

&lt;p&gt;Why is that bad? Leaving files or stateful resources open unnecessarily is bad for the following reasons (&lt;a href="https://google.github.io/styleguide/pyguide.html#311-files-sockets-and-similar-stateful-resources"&gt;source&lt;/a&gt;):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  They may consume limited system resources, such as &lt;a href="https://stackoverflow.com/questions/5256599/what-are-file-descriptors-explained-in-simple-terms/5256705#5256705"&gt;file descriptors&lt;/a&gt;. Code that deals with many such objects may exhaust those resources unnecessarily if they’re not returned to the system promptly after use.&lt;/li&gt;
&lt;li&gt;  Holding files open may prevent other actions such as moving or deleting them, or unmounting a filesystem.&lt;/li&gt;
&lt;li&gt;  Files and sockets that are shared throughout a program may inadvertently be read from or written to after logically being closed. If they are actually closed, attempts to read or write from them will raise exceptions, making the problem known sooner.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-with-statement"&gt;
  &lt;/a&gt;
  The "with" statement
&lt;/h3&gt;

&lt;p&gt;So, what is the &lt;code&gt;with&lt;/code&gt; statement or context manager good for you ask?&lt;/p&gt;

&lt;p&gt;Sure, there is nothing wrong with calling &lt;code&gt;session.close()&lt;/code&gt; every time we are done with our database transaction in &lt;code&gt;sqlalchemy&lt;/code&gt;. Nor is there anything wrong with having to call the built-in close method every single time we are done reading and writing a file. For that matter, here’s an example of one of these methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Poor Example
# ------------
&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'hello.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Hello Python!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can already tell, the example given above is quite verbose. Now, imagine doing it in every single part of your codebase (gross, I know).&lt;/p&gt;

&lt;p&gt;Besides, there’s a good chance that a poor, tired developer might just forget to close the file (or a database connection) after using it.&lt;/p&gt;

&lt;p&gt;Hence, opening a file using the &lt;code&gt;with&lt;/code&gt; statement is generally recommended. Using &lt;code&gt;with&lt;/code&gt; statements help you to write more expressive code while avoiding resource leaks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Good Example
# ------------
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'hello.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Hello Python!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#enter-context-managers"&gt;
  &lt;/a&gt;
  Enter Context Managers
&lt;/h2&gt;

&lt;p&gt;Resource management can be achieved by using context managers in Python. In essence, context managers help to facilitate proper handling of resources, providing users mechanism for setup and teardown of resources easily.&lt;/p&gt;

&lt;p&gt;To reiterate in layman terms, context managers allow you to control what to do when objects are created or destroyed.&lt;/p&gt;

&lt;p&gt;There are several ways to create a reusable context manager in Python. In the next section, I am going to run through several examples of how you can create context managers in Python.&lt;/p&gt;

&lt;p&gt;For the first two examples, let's create a simple custom context manager to replace the built-in open function in Python.&lt;/p&gt;

&lt;p&gt;Do note that In practice, we should always use any built-in methods or context manager that is provided by Python.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-class-based"&gt;
  &lt;/a&gt;
  1. Class based
&lt;/h3&gt;

&lt;p&gt;The classic example would be creating a Python class for your own context manager. By default, every context manager class must contain these three &lt;a href="https://www.geeksforgeeks.org/dunder-magic-methods-python/"&gt;Dunder methods&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;__init__&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;__enter__&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;__exit__&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These methods will be executed sequentially as shown above. Please refer to the comments in the code example below for a more detailed explanation.&lt;/p&gt;

&lt;p&gt;Note that the code below can only serve as an example and should NOT be used to replace the use of the built-in &lt;code&gt;open&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomFileHandlerContextManager&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
    A custom context manager used for handling file operations
    """&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'__init__ method is called.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__enter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'__enter__ method is called.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__exit__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_traceback&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'__exit__ method is called.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# NOTE: So that we can use `CustomFileHandlerContextManager('hello.txt', 'w') as f`
&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;CustomFileHandlerContextManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'hello.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# __init__ and __enter__ is called
&lt;/span&gt;        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Hello! I am not Tom!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Do something else in the statement body.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# __exit__ is called upon exception or end of the `with` statement
&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;closed&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;  &lt;span class="c1"&gt;# Proof that the file is closed :)
&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Output:
&lt;/span&gt;
&lt;span class="c1"&gt;# __init__ method is called.
# __enter__ method is called.
# Do something else in the statement body.
# __exit__ method is called.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-generator-based"&gt;
  &lt;/a&gt;
  2. Generator based
&lt;/h3&gt;

&lt;p&gt;Another popular alternative to writing a context manager is to use the built-in &lt;a href="https://docs.python.org/3/library/contextlib.html"&gt;contextlib&lt;/a&gt; library in Python. It is my personal preferred way of creating a custom context manager.&lt;/p&gt;

&lt;p&gt;As an overview, &lt;code&gt;contextlib&lt;/code&gt; provides us a set of utilities for common operations involving the &lt;code&gt;with&lt;/code&gt; statements.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;contextlib&lt;/code&gt;, we can omit writing a Python class along with the required Dunder methods for our custom context managers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;contextlib&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;contextlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contextmanager&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;custom_file_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file_mode&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file_mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="c1"&gt;# NOTE: So that we can use `custom_file_handler('hello.txt', 'w') as f`
&lt;/span&gt;
    &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Anything after yield will act is if it's in the __exit__
&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;custom_file_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'test.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Hello, I am Jerry! This is a generator example.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Do something else in the statement body.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;closed&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="c1"&gt;# Proof that the file is closed :)
&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-use-builtin-context-managers"&gt;
  &lt;/a&gt;
  3. Use built-in context managers
&lt;/h3&gt;

&lt;p&gt;Generally speaking, we should avoid re-inventing the wheel. We should always opt for using any available built-in context managers if there were made available.&lt;br&gt;
For instance, if you're working with &lt;a href="https://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt;, the library already provides a good way to manage &lt;a href="https://docs.sqlalchemy.org/en/14/orm/session_basics.html#basics-of-using-a-session"&gt;sessions&lt;/a&gt;. When working with SQLAlchemy ORM, it's a common pattern for us to do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.exc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ProgrammingError&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.orm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sessionmaker&lt;/span&gt;


&lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'postgresql://jerry:nsh@localhost/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sessionmaker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;some_object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;some_other_object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ProgrammingError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rollback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt;

&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of having to call &lt;code&gt;session.rollback()&lt;/code&gt; and &lt;code&gt;session.commit()&lt;/code&gt; every single time across numerous functions, we can instead use the built-in session as a context manager.&lt;br&gt;
Here’s a better example where we can use context manager with &lt;code&gt;sessionmaker&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.exc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ProgrammingError&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.orm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sessionmaker&lt;/span&gt;


&lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'postgresql://jerry:nsh@localhost/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;db_session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sessionmaker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# We can now construct a session which includes begin(), commit(), rollback() all at once
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;db_session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;some_object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;some_other_object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Commits the transaction, closes the session auto-magically! Cool!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the &lt;code&gt;with&lt;/code&gt; statement here makes our code look much, much cleaner.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;If you have made it this far, awesome! In summary, here's what we've learned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  We should not leave any stateful resources (files, database connections, sockets) open unnecessarily as they are limited.&lt;/li&gt;
&lt;li&gt;  Python's context manager allows us to better manage these resources by telling an object what to do when created or destroyed.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;with&lt;/code&gt; statement helps to encapsulate the standard use of &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;finally&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt; when it comes to exception handling.&lt;/li&gt;
&lt;li&gt;  The use of a context manager allows us to reduce code duplication.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using Python's context manager with the with statement is a great choice if your code has to deal with the opening and closing of a file or database connection.&lt;/p&gt;

&lt;p&gt;Personally, my favorite part of using context managers is that it allows us to simplify some common resource management patterns. Context managers abstract their own functionality, thus allowing them to be refactored out and reused repeatedly.&lt;/p&gt;

&lt;p&gt;That is all! Thank you for reading!&lt;/p&gt;

</description>
      <category>codequality</category>
      <category>python</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Stacksjar Merchandise</title>
      <author>Stacksjar</author>
      <pubDate>Mon, 16 Aug 2021 15:09:11 +0000</pubDate>
      <link>https://dev.to/stacksjar/stacksjar-merchandise-2f7e</link>
      <guid>https://dev.to/stacksjar/stacksjar-merchandise-2f7e</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Akdl0Phg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vr0kpr80stv8dnals747.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Akdl0Phg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vr0kpr80stv8dnals747.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NCxXBI3H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8x54vdy14tu9xr8laa55.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NCxXBI3H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8x54vdy14tu9xr8laa55.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Checkout/Buy these cool Goodies:- &lt;a href="https://store.stacksjar.com/"&gt;Stacksjar Store&lt;/a&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#stacksjar-store-merchandise"&gt;
  &lt;/a&gt;
  stacksjar #store #merchandise
&lt;/h1&gt;

</description>
    </item>
    <item>
      <title>How to fetch data from an API in React Project</title>
      <author>Pratham</author>
      <pubDate>Mon, 16 Aug 2021 14:33:24 +0000</pubDate>
      <link>https://dev.to/pratham10/how-to-fetch-data-from-an-api-in-react-project-4d96</link>
      <guid>https://dev.to/pratham10/how-to-fetch-data-from-an-api-in-react-project-4d96</guid>
      <description>&lt;p&gt;In this blog, I will show you how you can get data of 50 users from an &lt;a href="https://randomuser.me/"&gt;Random user API&lt;/a&gt; in your React project.&lt;br&gt;
Let's get started!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Basic understanding of React and React Hooks ( Optional )&lt;/li&gt;
&lt;li&gt;Node Js Installed in your system&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#create-your-react-app"&gt;
  &lt;/a&gt;
  Create your React app.
&lt;/h2&gt;

&lt;p&gt;Open your terminal and type...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app fetch-data-react 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a basic React app in your system with the folder name &lt;br&gt;
"fetch-data-react"&lt;/p&gt;

&lt;p&gt;Now go into your project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd fetch-data-react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see this in your browser&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F4yCRdiC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u10bwc0pl04kacbhac86.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F4yCRdiC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u10bwc0pl04kacbhac86.png" alt="Home Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fetching-data-using-axios"&gt;
  &lt;/a&gt;
  Fetching data using Axios
&lt;/h2&gt;

&lt;p&gt;Open a terminal and install Axios&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://axios-http.com/docs/intro"&gt;Axios&lt;/a&gt; is a simple promise-based HTTP client for the browser and node.js. Axios provides a simple to use the library in a small package with a very extensible interface.&lt;br&gt;
By using Axios it’s easy to send asynchronous HTTP requests to REST endpoints and perform CRUD operations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now open App.js from src folder&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Edit App.js as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useEffect } from "react";
import axios from "axios"; 

export default function App() {
  const fetchUsers = () =&amp;gt; {
    return axios
      .get("https://randomuser.me/api/?results=50")
      .then((res) =&amp;gt; console.log(res.data));
  };

  useEffect(() =&amp;gt; {
    fetchUsers();
  }, []);

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me explain the code,&lt;/p&gt;

&lt;p&gt;-On line 2 you can see we imported axios.&lt;/p&gt;

&lt;p&gt;-The following function &lt;strong&gt;fetchUsers&lt;/strong&gt; fetches the data of 50 random users from an API by sending a GET request.&lt;/p&gt;

&lt;p&gt;-useEffect() starts a fetch request by calling fetchUsers() async function after the initial mounting.&lt;/p&gt;

&lt;p&gt;Now open your browser and check your console&lt;/p&gt;

&lt;p&gt;You can see data of 50 users&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AXynq86u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvs1un0dvfcubad7j6b0.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AXynq86u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvs1un0dvfcubad7j6b0.PNG" alt="Users"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can now use this data in your React project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps?
&lt;/h2&gt;

&lt;p&gt;Now you know how to fetch data from an API using Axios.&lt;/p&gt;

&lt;p&gt;What if I tell you you can get data of every user on GitHub using this GitHub API &lt;a href="https://api.github.com/users"&gt;https://api.github.com/users&lt;/a&gt;. Amazing, right?&lt;/p&gt;

&lt;p&gt;Your task if you want to practice what you learned &lt;br&gt;
try creating this project (GitHub profile Card)[&lt;a href="https://codepen.io/warmsprings27/pen/PGkJAW"&gt;https://codepen.io/warmsprings27/pen/PGkJAW&lt;/a&gt;] using React and Axios.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you for reading&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IF YOU LIKED THE POST, THEN YOU CAN BUY ME MY FIRST COFFEE EVER, THANK YOU&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/pratham10"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQj764Ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-orange.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can dm me on Twitter if you need help related to web development &lt;br&gt;
&lt;a href="https://twitter.com/pratham__10"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cMkfg_Vv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/gmrz82bjwhej1f1iqb1e.png" alt="Twitter"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>✨HackGT 8: Discover Your Craft ✨</title>
      <author>Vineeth Voruganti</author>
      <pubDate>Mon, 16 Aug 2021 14:18:03 +0000</pubDate>
      <link>https://dev.to/vvoruganti/hackgt-8-discover-your-craft-ga1</link>
      <guid>https://dev.to/vvoruganti/hackgt-8-discover-your-craft-ga1</guid>
      <description>&lt;p&gt;HexLabs is back and better than ever with ✨ HackGT 8: Discover Your Craft ✨! This hybrid, 36-hour hackathon will be taking place from October 22nd - 24th ⏳. Come collaborate with hundreds of talented hackers from across the world 🗺, explore new avenues 🚘, and strengthen your hacking skills 💪🛠!&lt;/p&gt;

&lt;p&gt;HackGT 8 will be a hybrid hackathon this year! We will be welcoming Georgia Tech students to the Klaus Advanced Computing Building on Georgia Tech's campus. 🐝 All other students can attend virtually! 👨‍💻 HexLabs' first-ever hybrid event will redefine the hacker experience by bringing you the best of both worlds. 🌎 Not only will they be supplying engaging workshops, insightful mentors, and captivating tech talks, but they will also have built-in, cross-platform interactions to bridge 🌉 the virtual and in-person experiences.&lt;/p&gt;

&lt;p&gt;HackGT 8 will have two tracks 🛠: General and Emerging — we'd love for you to join them regardless of whether it's your first hackathon or your tenth! They will also have an open-source prize 🏅 this year!&lt;/p&gt;

&lt;p&gt;Register at &lt;a href="http://registration.2021.hack.gt"&gt;&lt;strong&gt;registration.2021.hack.gt&lt;/strong&gt;&lt;/a&gt; by September 3rd. Check out &lt;a href="http://2021.hack.gt/"&gt;&lt;strong&gt;2021.hack.gt&lt;/strong&gt;&lt;/a&gt; for more information on teams, tracks, swag, prizes, projects, puzzles 👀, and FAQs. If you have any questions, please email them at &lt;a href="//mailto:hello@hexlabs.org"&gt;&lt;strong&gt;hello@hexlabs.org&lt;/strong&gt;&lt;/a&gt; 📧.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://registration.2021.hack.gt"&gt;&lt;strong&gt;registration.2021.hack.gt&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>hackathon</category>
      <category>eventsinyourcity</category>
      <category>opensource</category>
    </item>
    <item>
      <title>DynamoDB in 15 minutes</title>
      <author>Maurice</author>
      <pubDate>Mon, 16 Aug 2021 14:17:38 +0000</pubDate>
      <link>https://dev.to/aws-builders/dynamodb-in-15-minutes-4oh</link>
      <guid>https://dev.to/aws-builders/dynamodb-in-15-minutes-4oh</guid>
      <description>&lt;p&gt;DynamoDB is a fully managed NoSQL database offering by AWS. It seems simple on the surface, but is also easy to misunderstand. In this post I introduce some of the basics that are required to understand DynamoDB and how it's intended to be used. We'll first take a look at the data structures inside DynamoDB, then talk about reading and writing to the database and also cover different kinds of indexes and access patterns before we move on to talking about performance and cost. We'll end with a mention of some additional features and then come to a conclusion.&lt;/p&gt;

&lt;p&gt;Since I intend to keep the scope of this manageable, I won't go into too much detail on all of the features. That's what the documentation and the other references I'll mention in the end are for.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-structures"&gt;
  &lt;/a&gt;
  Data structures
&lt;/h2&gt;

&lt;p&gt;Data in DynamoDB is organized in tables, which sounds just like tables in relational databases, but they're different. Tables contain items that may have completely different attributes from one another. There is an exception though and that relates to how data is accessed. In DynamoDB you primarily access data on the basis of its primary key attributes and as a result of that, the attributes that make up the primary key are required for all items.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9JMUnOPh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xih4i8vb13uu96uopk0j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9JMUnOPh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xih4i8vb13uu96uopk0j.png" alt="Multiple entities in a single DynamoDB table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The primary key is what &lt;strong&gt;uniquely identifies an item in the table&lt;/strong&gt; and it's either a single attribute on an item (the partition key) or a composite primary key, which means that there is a combination of two attributes (partition key and sort key) that identify an item uniquely. Let's look at some examples.&lt;/p&gt;

&lt;p&gt;This example shows a table that has only a partition key as its primary key. That means whenever we want to efficiently get an item from the table, we have to know its partition key. Here you can also see that a single table can contain items with different structures.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FT07E7p3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwf9vszdt9ye9hxegrnl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FT07E7p3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwf9vszdt9ye9hxegrnl.png" alt="Partition Key only table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's more common to have a composite primary key on a table, which you can see below. This allows for different and more flexible query patterns. Items that share the same partition key value are called an &lt;strong&gt;item collection&lt;/strong&gt;. The items in a collection can still be different entities.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BCiynfaP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/80d0o75aaabpej48pxao.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BCiynfaP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/80d0o75aaabpej48pxao.png" alt="Composite Primary Key and item collection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point I'd like to point out a few things about the table above. You can see that it uses generic names for the partition and sort key attribute (PK and SK) and this is done on purpose. When modelling data in DynamoDB we often try to put as many different entities into a single table as possible. Since these entities are identified by different underlying attributes, it's less confusing to have generic attribute names. You can also see, that the values in the Key-Attributes are duplicated. The number behind the &lt;code&gt;ISBN#&lt;/code&gt; sort key is also a separate attribute, same with the author's name. This makes serialization and deserialization easier.&lt;/p&gt;

&lt;p&gt;Putting all (or at least most) entities in a single table is the aptly named &lt;em&gt;Single-Table-Design&lt;/em&gt; pattern. To enable working with such a table, each item has a &lt;code&gt;type&lt;/code&gt; attribute that we use to distinguish the different entities. This makes deserialization more convenient. Another effect of the single table design can be observed in the key attributes. The actual values like "J. R. R. Tolkien" or "Stephen King" have a prefix. This prefix acts as a namespace - it allows us to separate entities with the same key value but different type and helps to avoid key collisions inside of our table.&lt;/p&gt;

&lt;p&gt;Let's now talk about the different ways we can get data into and out of DynamoDB.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reading-and-writing-data"&gt;
  &lt;/a&gt;
  Reading and Writing data
&lt;/h2&gt;

&lt;p&gt;The options to write to DynamoDB are essentially limited to four API-calls:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;PutItem&lt;/code&gt; - Create or replace an item in a table&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;BatchPutItem&lt;/code&gt; - Same as &lt;code&gt;PutItem&lt;/code&gt; but allows you to batch operations together to reduce the number of network requests&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;UpdateItem&lt;/code&gt; - Create a new item or update attributes on an existing item&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DeleteItem&lt;/code&gt; - Delete a single item based on its primary key attributes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The details of these calls aren't very interesting right now, let's focus on reading data. For this we have a selection of another four API-Calls:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;GetItem&lt;/code&gt; - retrieve a single item based on the values of its &lt;strong&gt;primary key attributes&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;BatchGetItem&lt;/code&gt; - group multiple &lt;code&gt;GetItem&lt;/code&gt; calls in a batch to reduce the amount of network requests&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Query&lt;/code&gt; - get an &lt;strong&gt;item collection&lt;/strong&gt; (all items with the same partition key) or filter in an item collections based on the sort key&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Scan&lt;/code&gt; - the equivalent of a table scan: access &lt;strong&gt;every item&lt;/strong&gt; in a table and filter based on arbitrary attributes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;Scan&lt;/code&gt; operation is by far the slowest and most expensive, since it scans the whole table, so we try to avoid it at all cost.&lt;br&gt;
We want to rely only on &lt;code&gt;GetItem&lt;/code&gt; (and potentially &lt;code&gt;BatchGetItem&lt;/code&gt;) and &lt;code&gt;Query&lt;/code&gt; to fetch our data, because they are very fast operations. Let's visualize how these operations work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mEQsyg8K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gcchjsp3g8bu49itkd4g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mEQsyg8K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gcchjsp3g8bu49itkd4g.png" alt="GetItem vs Query"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When we call &lt;code&gt;GetItem&lt;/code&gt; we need to specify &lt;strong&gt;all&lt;/strong&gt; primary key attributes to fetch exactly one item. That means we need to know the partition and sort key in advance. Getting the green item in Python can be achieved like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;boto3&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_author_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"dynamodb"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"LibraryV2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"PK"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"AUTHOR#&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;author_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"SK"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"METADATA"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Item"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_author_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Stephen King"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, I've specified both the partition and the sort key to uniquely identify an item. This API call is very efficient and will result in single-digit millisecond response times no matter how much data is in our table. Let's take a look at a query example - in this case one that gets all author information:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;boto3&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;boto3.dynamodb.conditions&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;conditions&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_all_author_information&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;typing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;

    &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"dynamodb"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"LibraryV2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;KeyConditionExpression&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;conditions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"PK"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"AUTHOR#&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;author_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Items"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_all_author_information&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"J. R. R. Tolkien"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function essentially returns the whole item collection of the author. It's equivalent to the violet query in the picture.&lt;br&gt;
We can also add conditions on the sort key, which makes the &lt;code&gt;Query&lt;/code&gt; operation quite powerful. Here's an example to fetch all books that an author wrote:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;boto3&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;boto3.dynamodb.conditions&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;conditions&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_books_by_author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;typing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;

    &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"dynamodb"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"LibraryV2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;KeyConditionExpression&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;conditions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"PK"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"AUTHOR#&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;author_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; \
            &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;conditions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"SK"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;begins_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ISBN"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Items"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_books_by_author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"J. R. R. Tolkien"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm using the ampersand &lt;code&gt;&amp;amp;&lt;/code&gt; to chain the conditions. The &lt;code&gt;begins_with&lt;/code&gt; is one of the conditions supported to filter on the sort key - others are listed in the &lt;a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GettingStarted.Python.04.html"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#indexes"&gt;
  &lt;/a&gt;
  Indexes
&lt;/h2&gt;

&lt;p&gt;So far you've seen me use different ways to fetch data from our table. All of these have been using attributes from the primary key. What if we want to select data based on an attribute that's not part of the primary key? This is where things get interesting. In a traditional relational database you'd just add a different &lt;code&gt;WHERE&lt;/code&gt; condition to your query in order to fetch the data. In DynamoDB there is the &lt;code&gt;Scan&lt;/code&gt; operation you can use to select data based on arbitrary attributes, but it shares a similar problem as a where condition on unoptimized table in a relational database: &lt;strong&gt;it's slow and expensive&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To make things faster in a relational database we add an index to a column and in DynamoDB we can do something similar. Indexes are very common in computer science. They're secondary data structures that let you quickly locate data in a &lt;a href="https://en.wikipedia.org/wiki/B-tree"&gt;b-tree&lt;/a&gt;. We've already been using an index in the background - the primary index, which is made up of the primary key attributes. Fortunately that's not the only index DynamoDB supports - we can add secondary indexes to our table which come in two varieties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;local secondary index&lt;/strong&gt; (LSI) allows us to specify a different sort key on a table. In this case the partition key stays identical, but the sort key can change. LSIs have to be specified when we create a table and share the underlying performance characteristics of the table. When we create a local secondary index we also limit the size of each individual item collection to 10GB.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;global secondary index&lt;/strong&gt; (GSI) is more flexible, it allows us to create a different partition and sort key on a table whenever we want. It doesn't share the read/write throughput of the underlying table and doesn't limit our collection size. This will create a copy of our table with the different key schema in the background and replicate changes in the primary table asynchronously to this one.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Secondary indexes in DynamoDB are &lt;strong&gt;read only&lt;/strong&gt; and only allow for eventually consistent reads. The only API calls they support are &lt;code&gt;Query&lt;/code&gt; and &lt;code&gt;Scan&lt;/code&gt; - all other rely on the primary index. In practice you'll see a lot more GSIs than LSIs, because they're more flexible.&lt;/p&gt;

&lt;p&gt;How can these help us? Suppose we want to be able to select a book by it's ISBN. If we take a look at our table so far, we notice that the ISBN is listed as a key attribute, which seems good at first glance. Unfortunately it's the sort key. This means in order to &lt;strong&gt;quickly&lt;/strong&gt; retrieve a book, we'd need to know it's author as well as the ISBN for it (&lt;code&gt;Scan&lt;/code&gt; isn't practical with larger tables).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aRWbtkrT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ticn1uq1lna2hwodly6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aRWbtkrT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ticn1uq1lna2hwodly6.png" alt="Composite Primary Key and item collection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The way our table is layed out at the moment doesn't really work well for us, let's add a secondary index to help us answer the query. The modified table is displayed below and has additional attributes that make up the global secondary index. I've added the attributes &lt;code&gt;GSI1PK&lt;/code&gt; as the partition key for the global secondary index and &lt;code&gt;GSI1SK&lt;/code&gt; as the sort key. The index itself is just named &lt;code&gt;GSI1&lt;/code&gt;. The attribute names that make up the index are very generic again, this allows us to use the GSI for multiple query patterns. You can also see, that the GSI attributes are only filled for the book entities so far. Only items that have the relevant attributes set are projected into the index, that means I couldn't use the index to query for the author entities at the moment. This is what's called a &lt;strong&gt;sparse index&lt;/strong&gt;. Sparse indexes have benefits from a financial perspective, because the costs associated with them are lower.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s9m7tlVN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ne9718ej2yxz6n8hxu5q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s9m7tlVN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ne9718ej2yxz6n8hxu5q.png" alt="DynamoDB Global Secondary Index"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Back to our original question - &lt;em&gt;how can we use this to fetch a book by its ISBN?&lt;/em&gt; That's now very easy, we can just use the &lt;code&gt;Query&lt;/code&gt; API to do that, as the next code sample shows. It's very similar to a regular query, we just use different key attributes and specify the &lt;code&gt;IndexName&lt;/code&gt; attribute to define which index to use (there can be multiple indexes on a table).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;boto3&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;boto3.dynamodb.conditions&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;conditions&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_book_by_isbn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isbn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"dynamodb"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"LibraryV2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;KeyConditionExpression&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;conditions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GSI1PK"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"ISBN#&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;isbn&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; \
            &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;conditions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GSI1SK"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"METADATA"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;IndexName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"GSI1"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Items"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_book_by_isbn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"978-0544003415"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might wonder why &lt;code&gt;GSI1&lt;/code&gt; has a sort key that seems to be set to the static value &lt;code&gt;METADATA&lt;/code&gt; for all items. To implement this specific query pattern "Get a book by its ISBN", a global secondary index with only a primary key would have been sufficient. I still went with a partition and sort key, because it's common to overload a secondary index. This means you create a secondary index that not only fulfills one, but more than one query patterns. In these cases it's very useful to have a partition and sort key available. By setting the sort key to a static value, we basically tell the system that there's only going to be one of these items.&lt;/p&gt;

&lt;p&gt;This has been an example on how you can use a global secondary index to enable different query patterns on our dataset. There are many more access patterns that can be modeled this way, but those will have to wait for future posts.&lt;/p&gt;

&lt;p&gt;Let's now talk about something different: performance and cost.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#performance-amp-cost"&gt;
  &lt;/a&gt;
  Performance &amp;amp; Cost
&lt;/h2&gt;

&lt;p&gt;So far I've shown you some things about DynamoDBs data model and APIs but we haven't talked about what makes it perform so well and how that relates to cost. DynamoDB has a few factors that influence performance and cost, which you can control:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data model&lt;/li&gt;
&lt;li&gt;Amount of data&lt;/li&gt;
&lt;li&gt;Read throughput&lt;/li&gt;
&lt;li&gt;Write throughput&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The data model you implement has a major impact on performance.&lt;/strong&gt; If you set it up in a way that it relies on scan operations, it won't hurt you too much with tiny databases, but it will be terrible at scale. Aside from &lt;code&gt;Scan&lt;/code&gt; all DynamoDB operations are designed to be quick at essentially any scale. That however requires you to design your data model in a way that let's you take advantage of that.&lt;/p&gt;

&lt;p&gt;The amount of data has a limited influence on performance, which may even be negligible if you design your data model well. In combination with read and write throughput it may have an influence under certain conditions, but that would be a symptom of a poorly designed data model. The amount of data is a cost component - data in DynamoDB is billed per GB per month (around $0.25 - $0.37 depending on your region). Keep in mind that global secondary indexes are a separate table under the hood, that come with their own storage costs. This should be a motivation to use sparse indexes.&lt;/p&gt;

&lt;p&gt;Whenever your read from or write to your table you consume what's called read and write capacity units (RCU/WCU). These RCUs or WCUs are how you configure the throughput your table is able to handle and there are two options you can do this with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Provisioned Capacity:&lt;/strong&gt; You specify the amount of RCUs/WCUs for your table and that's all there is. If you use more throughput than you have provisioned, you'll get a &lt;code&gt;ProvisionedThroughputExceeded&lt;/code&gt; exception. This can be integrated with AutoScaling to respond to changes in demand. This billing model is fairly well predictable.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;On-Demand Capacity:&lt;/strong&gt; DynamoDB will automatically scale the RCUs and WCUs for you, but individual RCUs and WCUs are a little bit more expensive. You're billed for the amount of RCUs/WCUs you use. This mode is really nice when you get started and don't know your load patterns yet or you have very spiky access patterns.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A general recommendation is to start with on-demand capacity mode, observe the amount of consumed capacity and once the app is fairly stable switch to provisioned capacity with Auto Scaling. You should be aware that secondary indexes differ in the way they use the capacity. Local secondary indexes share the capacity with the underlying base table whereas global secondary indexes have their own capacity settings.&lt;/p&gt;

&lt;p&gt;Since this is supposed to be a short introduction to DynamoDB we don't have time to go over all the details, but there are nevertheless some features I'd like to briefly mention.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#additional-features"&gt;
  &lt;/a&gt;
  Additional features
&lt;/h2&gt;

&lt;p&gt;DynamoDB offers many other useful features. Here are a few I'd like to mention:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;DynamoDB Streams&lt;/strong&gt; allow you perform change-data-capture (CDC) on your DynamoDB table and respond to updates in your table using Lambda functions. You can also pipe these changes into a Kinesis data stream.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Transactions&lt;/strong&gt; allow you to do all-or-nothing operations across different items.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;DynamoDB Global Tables&lt;/strong&gt; is a feature that allows you to create Multi-Region Multi-Master setups across the globe with minimal latency.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;PartiQL&lt;/strong&gt; is a query language designed by AWS that's similar to SQL and can be used across different NoSQL offerings.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;DAX&lt;/strong&gt; or the DynamoDB Accelerator is an in-memory write-through cache in front of DynamoDB if you need microsecond response times.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We have looked at a few key aspects of DynamoDB that should give you a good basic understanding of the service and will help you with further research. First we discussed tables, items, keys and item collections, which are the basic building blocks of DynamoDB. Then we moved on to the API calls you use to fetch and manipulate data in the tables before moving on to the two types of secondary indexes. Performance and cost were also aspects we've discussed and in the end I mentioned a few other key features.&lt;/p&gt;

&lt;p&gt;If you want to play around with the tables I've mentioned in this post, you can find the code for that on &lt;a href="https://github.com/MauriceBrg/aws-blog.de-projects/blob/master/dynamodb-intro/library_example.py"&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you for your time, I hope you gained something from this article. If you have questions, feedback or want to get in touch to discuss projects, feel free to reach out to me over the social media I've listed in my bio below.&lt;/p&gt;

&lt;p&gt;— Maurice&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#additional-ressources"&gt;
  &lt;/a&gt;
  Additional Ressources
&lt;/h2&gt;

&lt;p&gt;Here is a list of additional resources you might want to check out. I can highly recommend anything done by Rick Houlihan.&lt;br&gt;
The DynamoDB book is also very well written and a great resource if you want to do a deep dive. If you're curious about the techniques that make DynamoDB work, the talk by Jaso Sorensen is a good resource.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.dynamodbbook.com/"&gt;dynamodbbook.com&lt;/a&gt; - &lt;em&gt;The&lt;/em&gt; book about DynamoDB by Alex DeBrie&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dynamodbguide.com/"&gt;dynamodbguide.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=yvBR71D0nAQ"&gt;AWS re:Invent 2018: Amazon DynamoDB Under the Hood: How We Built a Hyper-Scale Database (DAT321)&lt;/a&gt; - by Jaso Sorensen&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=HaEPXoXVf2k"&gt;AWS re:Invent 2018: Amazon DynamoDB Deep Dive: Advanced Design Patterns for DynamoDB (DAT401)&lt;/a&gt; - by Rick Houlihan&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=DIQVJqiSUkE"&gt;AWS re:Invent 2019: Data modeling with Amazon DynamoDB (CMY304)&lt;/a&gt; - by Alex DeBrie&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=6yqfmXiZTlM"&gt;AWS re:Invent 2019: [REPEAT 1] Amazon DynamoDB deep dive: Advanced design patterns (DAT403-R1)&lt;/a&gt; - by Rick Houlihan&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;I first published this post on &lt;a href="https://aws-blog.de/2021/03/dynamodb-in-15-minutes.html"&gt;our company blog&lt;/a&gt; in march.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>dynamodb</category>
      <category>database</category>
    </item>
  </channel>
</rss>
