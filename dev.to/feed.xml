<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Level up with The Relicans at FutureStack</title>
      <author>Mia Moore</author>
      <pubDate>Tue, 04 May 2021 21:18:28 +0000</pubDate>
      <link>https://dev.to/newrelic/level-up-with-the-relicans-at-futurestack-139i</link>
      <guid>https://dev.to/newrelic/level-up-with-the-relicans-at-futurestack-139i</guid>
      <description>&lt;p&gt;I am excited to personally invite you to &lt;a href="https://bit.ly/futurestack-dev"&gt;FutureStack 2021&lt;/a&gt;! This will be our first year at the conference as &lt;a href="https://developer.newrelic.com/relicans"&gt;The Relicans&lt;/a&gt;, and we can’t wait to see you there.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/uSZwI9VKBms"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-keynotes-12-handson-workshops-50-sessions"&gt;
  &lt;/a&gt;
  3 keynotes, 12 hands-on workshops, 50 sessions
&lt;/h2&gt;

&lt;p&gt;FutureStack 2021 is a free, online conference where New Relic is bringing together Data Nerds to learn, share, and get inspired about observability — while we have fun!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here's what to expect:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3 Keynotes and on-demand recordings to watch anytime.&lt;/li&gt;
&lt;li&gt;12 Workshops with hands-on demos.&lt;/li&gt;
&lt;li&gt;50 Sessions led by Data Nerds like you and me.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also choose from four different learning tracks, whether you have a particular focus or want to start with the basics, we’ve got you covered with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Extending New Relic One&lt;/strong&gt; to connect technology to business performance&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Getting Data In&lt;/strong&gt; to instrument everything and send data to the Telemetry Data Platform&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;AI/ML-Powered Observability&lt;/strong&gt; to wrangle complexity with AIOps&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Modern Architectures&lt;/strong&gt; from containers to serverless apps&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-relicans-welcome-you-to-nerd-island"&gt;
  &lt;/a&gt;
  The Relicans welcome you to Nerd Island
&lt;/h2&gt;

&lt;p&gt;In addition to the tracks mentioned above, there will be several side tracks, including Networking, FutureHack, Relax and Mingle Active, Swag Stack and — our personal favorite — the &lt;strong&gt;Nerd Island&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The Nerd Island is where you can come to hang out with us from &lt;a href="https://developers.newrelic.com/relicans"&gt;The Relicans&lt;/a&gt;. We will play Minecraft, live stream, write code together, and share talks from our team. We're especially excited to welcome special guests &lt;a href="https://twitter.com/kelseyhightower"&gt;Kelsey Hightower&lt;/a&gt;, &lt;a href="https://twitter.com/waxpancake"&gt;Andy Baio&lt;/a&gt;, and &lt;a href="https://twitter.com/samaaron"&gt;Sam Aaron&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is a spoiler, just for you:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On the Nerd Island and &lt;em&gt;on the Nerd Island ONLY&lt;/em&gt;, you can be one of the first users of &lt;a href="https://skittish.com/"&gt;Skittish&lt;/a&gt;, an interactive, playful virtual event space! Inside Skittish, you can be a cute animal, explore Nerd Island, connect with friends (that also happen to be cute animals) via voice chat, and watch some great talks.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/N5ZPQ_Sfmhs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sign-up-and-join-us"&gt;
  &lt;/a&gt;
  Sign up and join us!
&lt;/h2&gt;

&lt;p&gt;FutureStack is May 25-27, 2021, and you can save your spot now. &lt;a href="https://bit.ly/futurestack-dev"&gt;Just click here to sign up&lt;/a&gt;, and you will be all set! Until then, keep an eye out as we share more about upcoming sessions and surprises we have planned for FutureStack.&lt;/p&gt;

&lt;p&gt;We can't wait to see you at FutureStack! &lt;/p&gt;

</description>
      <category>monitoring</category>
      <category>observability</category>
      <category>microservices</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Ditch For... Loops - How to Use ES6 Array Methods to Loop Over An Array</title>
      <author>Kingsley Ubah</author>
      <pubDate>Tue, 04 May 2021 21:06:21 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/ditch-for-loops-how-to-use-es6-array-methods-to-loop-over-an-array-1jnh</link>
      <guid>https://dev.to/ubahthebuilder/ditch-for-loops-how-to-use-es6-array-methods-to-loop-over-an-array-1jnh</guid>
      <description>&lt;p&gt;Do you remember something like this?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The number is &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For those of you completely new to using JavaScript, let’s break down that code spippet fellas.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All that statement is saying is that – “i is initially equals to zero. For as long as i is less than five, run the code inside the code block (i.e update the ‘text’ variable) and increment i by one (signified with the ++).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This used to be the standard way of looping through an array of items. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Used to.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EmcaScript 2016 (ES6)&lt;/strong&gt; came with a set of utility methods for looping through an array. For those of you wondering, EmcaScript is a general-purpose programming language, standardised by Ecma International according to the document ECMA-262.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I like to think of EmcaScript as a new, modern and improved way of writing JavaScript.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;N/B: If you’re looking for a more in-depth guide on ES6 syntax, I’ll recommend  &lt;a href="https://gumroad.com/a/834147443"&gt;HTML To React By Sleepless Yogi&lt;/a&gt; . It’s really good!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These array iterators includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Array.map()&lt;/li&gt;
&lt;li&gt;Array.find()&lt;/li&gt;
&lt;li&gt;Array.filter()&lt;/li&gt;
&lt;li&gt;Array.forEach()&lt;/li&gt;
&lt;li&gt;Array.every()&lt;/li&gt;
&lt;li&gt;Array.some()&lt;/li&gt;
&lt;li&gt;Array.sort()&lt;/li&gt;
&lt;li&gt;Array.reduce()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To properly understand how these methods work, we have to first understand two concepts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The size of an array&lt;/li&gt;
&lt;li&gt;The shape of an array&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;backend engineer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lara&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ux designer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;kingsley&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;developer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;manager&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chris&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;developer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
javascript&lt;/p&gt;

&lt;p&gt;There are two thing to note about this array:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It has a size of five items (objects),&lt;/li&gt;
&lt;li&gt;Each item has a shape: a name and position.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these in mind, all of the array iterator methods has it’s own behaviour:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#map"&gt;
  &lt;/a&gt;
  map()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Behaviour: Changes the shape, but not the size,&lt;/li&gt;
&lt;li&gt;Example: Get just the name of everyone on the team.
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;//Result: ['jack', 'lara', 'kingsley', 'mark', 'chris']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#sort"&gt;
  &lt;/a&gt;
  sort()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Behaviour: Changes neither the size nor the shape, but changes the order.&lt;/li&gt;
&lt;li&gt;Example: Get the team members in alphabetical order.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;//Result: [{name: 'chris', position: 'developer'}, {name: 'jack' ...}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#filter"&gt;
  &lt;/a&gt;
  filter()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Behaviour: Changes the size, but not the shape.&lt;/li&gt;
&lt;li&gt;Example: Get only the developers.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;developer&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Result: [{name: 'kingsley', position: 'developer'}, {name: 'chris', position:'developer'}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#find"&gt;
  &lt;/a&gt;
  find()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Behavior: Changes the size to exactly one, but not the shape. It Does not return an array. &lt;/li&gt;
&lt;li&gt;Example: Get the manager.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Result: {name: 'justin', position: 'manager'}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;N/B: If there were two managers present, find() will only return the first&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#foreach"&gt;
  &lt;/a&gt;
  forEach()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Behaviour: Uses the shape, but returns nothing.&lt;/li&gt;
&lt;li&gt;Example: Give all members a bonus!
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Function&lt;/span&gt; &lt;span class="nx"&gt;sendBonus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//code for bonus goes here\&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;sendBonus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;//Result: Jack gets a bonus! Lara get a bonus!… (but no return value).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#reduce"&gt;
  &lt;/a&gt;
  reduce()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Action: Changes the size and the shape to pretty much anything
you want.&lt;/li&gt;
&lt;li&gt;Example: Get the unique team positions.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uniquePos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;uniquePos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uniquePos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;uniquePos&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;uniquePos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
 &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="c1"&gt;// Result: [‘backend engineer’, ‘ux designer’, ‘developer’, ‘manager’]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A bit confused, let’s break down this code guys.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The essence of this all is to get every unique postion of each member. Duplicate positions (developer) will be picked once.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The first parameter taken by the reduce method is the ‘collectedValue’from the last iteration. When the iteration is just starting, then the reduce() second argument ([] in our case) will be used. For every iteration, the collected or total value is added the current item.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In our case, when iteration just starts, the initial value [] wraps the current item in the array. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The conditional checks to see if the total value (the array at this point in the loop) includes the position of the current member. If it does, the position is ignored and the CollectedValue is returned as it was. If not, the position of the current member is added to the array (with the spread operator).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#every"&gt;
  &lt;/a&gt;
  every()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Behavior: Changes neither the size nor the shape. Returns a Boolean: true if all items meet a condition, false if any doesn’t.&lt;/li&gt;
&lt;li&gt;Example: Check if all items are objects.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;member&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Results: True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#some"&gt;
  &lt;/a&gt;
  some()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Behavior: Changes neither the size nor the shape. Returns a Boolean: true if any of the items meet a condition, false if all doesn’t.&lt;/li&gt;
&lt;li&gt;Example: Check if any of the items is number.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;member&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Result: False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s it. I hope you learnt something from these brothers and sisters. If you did, consider buying me my favourite fruit:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/ubahthebuilder"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc5Aqnyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520pineapple%26emoji%3D%25F0%259F%258D%258D%26slug%3Dubahthebuilder%26button_colour%3De0b51a%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I will really appreciate it.&lt;/p&gt;

&lt;p&gt;Thank you and see you soon.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Awesome Illustrations Resources</title>
      <author>rafaelvieirab</author>
      <pubDate>Tue, 04 May 2021 20:59:43 +0000</pubDate>
      <link>https://dev.to/rafaelvieirab/awesome-illustrations-resources-5346</link>
      <guid>https://dev.to/rafaelvieirab/awesome-illustrations-resources-5346</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://undraw.co/illustrations"&gt;Undraw&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.drawkit.io/"&gt;Draw Kit&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://iconscout.com/illustration-pack/indian-doodle"&gt;Indian Doodle&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.karthiksrinivas.in/poke"&gt;Poke&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.opendoodles.com/"&gt;open Doodles&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://lukaszadam.com/illustrations"&gt;Lukaszadam&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://iradesign.io/"&gt;IRA Design&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://mixkit.co/free-stock-art/"&gt;Mixkit&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://2.flexiple.com/scale/all-illustrations"&gt;Scale&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://sleekbundle.com/product/pulse-illustration-kit/"&gt;Pulse&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://geeme.vercel.app/"&gt;Gee Me&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://absurd.design/#slide-6"&gt;Absurd&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://thenounproject.com/"&gt;The Noun project&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://fresh-folk.com/"&gt;Fresh-folk&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.rawpixel.com/search/illustration?sort=curated&amp;amp;page=1"&gt;Rawpixel&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://webpixels.io/illustrations"&gt;Webpixels : Eye Pop&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://delesign.com/free-designs/graphics/"&gt;Delesign&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.manypixels.co/gallery?ref=lapaninja"&gt;Manypixels&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://icons8.com/illustrations"&gt;Icon8&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://humaaans.com/"&gt;Humaans&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://lab.streamlinehq.com/"&gt;Streamline&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://lucid.pixsellz.io/"&gt;Lucid&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://ui8.net/"&gt;Ui8&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://control.rocks/"&gt;Control.Rocks&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://niceillustrations.com/free-illustrations/"&gt;Niceillustrations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.pixeltrue.com/packs"&gt;Pixel True&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://isometric.online/"&gt;Isometric&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://storyset.com/"&gt;Story Set&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.openpeeps.com/"&gt;Open Peeps&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.blackillustrations.com/"&gt;Black illustrations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://freeillustrations.xyz/"&gt;Free Illustrations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://illlustrations.co/"&gt;Illlustrations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.getillustrations.com/illustration-packs"&gt;Getillustrations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.freepik.com/"&gt;FreePik&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.vecteezy.com/"&gt;Vecteezy&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.freevector.com/"&gt;FreeVector&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://all-free-download.com/"&gt;All Free Download&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.vectorstock.com/"&gt;VectorSock&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://stubborn.fun/"&gt;Stubborn&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://blush.design/"&gt;Blush&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://usesmash.com/"&gt;UseMash&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.glazestock.com/"&gt;Glazestock&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.vectorportal.com/"&gt;VectorPortal&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>What Does It Mean To Deliver Software At The #SpeedOfLife?</title>
      <author>Nikema</author>
      <pubDate>Tue, 04 May 2021 20:21:02 +0000</pubDate>
      <link>https://dev.to/armory/what-does-it-mean-to-deliver-software-at-the-speedoflife-j6n</link>
      <guid>https://dev.to/armory/what-does-it-mean-to-deliver-software-at-the-speedoflife-j6n</guid>
      <description>&lt;p&gt;In this blog post, I’m excited to announce the #SpeedOfLife campaign that I will be leading for the month of May. I’m looking forward to getting to know more of the awesome people who make up our DevOps community.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-speedoflife"&gt;
  &lt;/a&gt;
  What is #SpeedOfLife?
&lt;/h2&gt;

&lt;p&gt;"#SpeedOfLife" is a social campaign meant to highlight users and experts in the field of software development and delivery. More specifically, I will be posting snippets of my conversations with the community in the form of weekly blog posts, social media messages, and a video live stream every Friday this month.&lt;/p&gt;

&lt;p&gt;It is now more than ever essential for enterprise-scale companies to deliver software products and services with safety, resiliency, and velocity. At Armory we are proud to enable developers to work and ship at the speed of life. What are you proudest of in your line of work? What does work at the speed of life mean to you? I want to know! I’m listening and my goal this month is to amplify community voices.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-can-i-get-involved"&gt;
  &lt;/a&gt;
  How Can I Get Involved?
&lt;/h3&gt;

&lt;p&gt;I’m so glad you asked.&lt;/p&gt;

&lt;p&gt;Starting today, I’ll be sending out messages asking for participation. If you are eager to contribute now without a personal invitation I have a handy link that you can follow where you can &lt;a href="https://airtable.com/shr8yp4bwHeGz9dkX"&gt;submit your contribution&lt;/a&gt; on your own time. Alternatively, if you want to reach out to me (Nikema) directly, I will be thrilled to hear your story. Hit me up at [nikema.prophet at armory.io]!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#join-me-tell-me-your-stories"&gt;
  &lt;/a&gt;
  Join Me, Tell Me Your Stories
&lt;/h3&gt;

&lt;p&gt;I’ve already spoken with our CEO, DROdio and he shared some customer stories that truly exemplify #SpeedOfLife. I can’t wait to share that with you, and it’s coming soon. More importantly, I can’t wait to hear your stories and get them out there.&lt;/p&gt;

&lt;p&gt;Join me, it’s easy I promise 😀. You don’t have to use your voice or get on camera to participate. See the &lt;a href="https://airtable.com/shr8yp4bwHeGz9dkX"&gt;contribution form&lt;/a&gt; for a text-based response option.&lt;/p&gt;

</description>
      <category>speedoflife</category>
      <category>devops</category>
      <category>community</category>
      <category>stories</category>
    </item>
    <item>
      <title>When to use aria-labels in your HTML</title>
      <author>Salma Alam-Naylor</author>
      <pubDate>Tue, 04 May 2021 20:05:51 +0000</pubDate>
      <link>https://dev.to/whitep4nth3r/when-to-use-aria-labels-in-your-html-18ph</link>
      <guid>https://dev.to/whitep4nth3r/when-to-use-aria-labels-in-your-html-18ph</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;It's common to display multiple links with the same text on a web page — such as 'read more' in a list of blog posts. To improve the web page experience for people who use screen readers and accessibility tools, add an aria-label to the anchor element with text that differentiates the content of the onward links.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Check the results in Chromium Dev Tools &amp;gt; Accessibility. Voila!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p_y30bl---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ry3wiavgxu3bekj9o8sd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p_y30bl---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ry3wiavgxu3bekj9o8sd.png" alt="A screenshot of my website, showing how aria labels enrich the context of the HTML in the accessibility tree in Chromium dev tools."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#checking-for-accessibility"&gt;
  &lt;/a&gt;
  Checking for accessibility
&lt;/h2&gt;

&lt;p&gt;In a previous post, &lt;a href="https://whitep4nth3r.com/blog/how-to-make-your-code-blocks-accessible-on-your-website"&gt;How to make your code blocks accessible on your website&lt;/a&gt;, I listed many of the tools I use to check accessibility on my websites as part of my workflow, including &lt;a href="https://chrome.google.com/webstore/detail/axe-web-accessibility-tes/lhdoppojpmngadmnindnejefpokejbdd"&gt;axe Dev Tools&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here's a section of my website home page that displays a list of recent blog posts. Observe six links with the text 'read more', below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cgrkFVRH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05ozem4yywbbj4ffcyaz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cgrkFVRH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05ozem4yywbbj4ffcyaz.png" alt="A screenshot of my website showing my recent post list, with six links using the text 'read more'."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code for each 'read more' link (without an aria-label) might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://whitep4nth3r.com/blog/how-to-make-your-code-blocks-accessible-on-your-website"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Read more&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we scan the code above with &lt;strong&gt;axe&lt;/strong&gt;, we receive the following warning:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ensure that links with the same accessible name serve a similar purpose&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_QxL8HzC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsxz8b5vquc5oabhr5sf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_QxL8HzC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsxz8b5vquc5oabhr5sf.png" alt="alt=&amp;quot;A screenshot of my website and Axe Dev Tools console, showing the issue description 'Ensure that links with the same accessible name serve a similar purpose', as all of the links have the text 'Read more'.&amp;quot;"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use the accessibility tree in Chromium Dev Tools to check how screen readers and assistive technologies understand your web page. Find the accessibility tab far to the right of the styles tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lQYJBrFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijnfa6pxwmt41c6v78d0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lQYJBrFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijnfa6pxwmt41c6v78d0.png" alt="A screenshot of my website showing the accessibility tree in Chromium dev tools, where a link is described with the text 'Read more'. This is the same for all links in that section."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you were using a screen reader to select the link to a specific blog post, and all the information you had was the text 'read more' — six times over — you'd be pretty frustrated! So how do we fix it?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-arialabels-to-provide-descriptive-information"&gt;
  &lt;/a&gt;
  Add aria-labels to provide descriptive information
&lt;/h2&gt;

&lt;p&gt;I always recommend to use a variety of tools to check accessibility on your website, and also to use your judgement. Here's what Axe suggests to check in the above example:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Check that links have the same purpose, or are intentionally ambiguous&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I checked, and I confirmed. These links do &lt;strong&gt;not&lt;/strong&gt; have the same purpose — they link to different blog posts or onward journeys. Here's where the power of aria-labels comes into play.&lt;/p&gt;

&lt;p&gt;Here's the same anchor link with an aria-label attribute added:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://whitep4nth3r.com/blog/how-to-make-your-code-blocks-accessible-on-your-website"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Read How to make your code blocks accessible on your website"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Read more&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we re-scan the page with &lt;strong&gt;axe&lt;/strong&gt; with the aria-labels in place, everything looks good! We also see that the links have distinct titles in the accessibility tree, allowing screen readers and assistive technologies to read out a more descriptive link when the element is in focus.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IiN7kXA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ic9ktk9av79yi7wm7t93.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IiN7kXA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ic9ktk9av79yi7wm7t93.png" alt="A screenshot of my website, showing that when adding aria-labels to the links, the accessibility tree has better context of the onward journey."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-web-dev-accessibility-tools-to-help-you-build-better-websites"&gt;
  &lt;/a&gt;
  7 web dev accessibility tools to help you build better websites
&lt;/h2&gt;

&lt;p&gt;To learn more about the different accessibility tools I use on a daily basis, check out my very first YouTube video — 7 web dev accessibility tools to help you build better websites.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/VjbYTdR-NYE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Make accessibility part of your web dev workflow from the moment you write that first line of code, and you'll automatically create better and more inclusive experiences for everyone as you build stuff, learn things, and love what you do.&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Developer Guide: How To Integrate Push Notifications in Angular</title>
      <author>onesignaldevs</author>
      <pubDate>Tue, 04 May 2021 20:02:52 +0000</pubDate>
      <link>https://dev.to/onesignal/developer-guide-how-to-integrate-push-notifications-in-angular-3cmh</link>
      <guid>https://dev.to/onesignal/developer-guide-how-to-integrate-push-notifications-in-angular-3cmh</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Z4_Q05v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/integrating-push-notifications-in-angular--3-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Z4_Q05v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/integrating-push-notifications-in-angular--3-.png" alt="Developer Guide: How To Integrate Push Notifications in Angular"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s no secret that push notifications can help you engage and retain app users. In this tutorial, we'll show you how to integrate with OneSignal in order to leverage push notifications in your Angular app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#onesignal-amp-your-browsers-push-api"&gt;
  &lt;/a&gt;
  OneSignal &amp;amp; Your Browser's Push API
&lt;/h2&gt;

&lt;p&gt;The browser's push API gives web applications the ability to receive messages from a server whether or not the web app is in the foreground or currently loaded on a user agent. This lets you deliver asynchronous notifications and updates to users who opt-in, resulting in better engagement with timely new content.&lt;/p&gt;

&lt;p&gt;This tutorial will cover how to integrate OneSignal Push Notifications into your app using our typical setup process. Part one of this guide covers the OneSignal setup process. Part two of this guide covers how to integrate with Angular using a basic setup method. Part three covers  an advanced setup method you can implement after completing the basic setup. The advanced setup will unlock even more message customization and automation opportunities for your website or app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#guide-overview"&gt;
  &lt;/a&gt;
  Guide Overview
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#part-1-set-up-your-onesignal-account"&gt;Part 1: Set Up Your OneSignal Account&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#web-configuration"&gt;Web Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#part-2-quick-push-notification-setup-in-angular"&gt;Part 2: Quick Push Notification Setup In Angular&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#allow-web-push-notifications"&gt;Allow Web Push Notifications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#send-web-push-notifications"&gt;Send Web Push Notifications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#part-3-advanced-push-notification-setup-in-angular"&gt;Part 3: Advanced Push Notification Setup In Angular&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This tutorial requires some basic knowledge of Angular. I'm using &lt;strong&gt;Angular 11.2&lt;/strong&gt; and &lt;strong&gt;NodeJS version 14.0&lt;/strong&gt;. If you don't have Angular, create a new Angular project using the Angular CLI.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Additional Angular Setup Resources:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/OneSignal/OneSignal-Angular-Sample"&gt;Quick Angular Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OneSignal/OneSignal-Angular-Sample/tree/FINAL-CODE"&gt;Advanced Angular Setup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#part-1-set-up-your-onesignal-account"&gt;
  &lt;/a&gt;
  Part 1: Set Up Your OneSignal Account
&lt;/h2&gt;

&lt;p&gt;To begin, &lt;a href="https://app.onesignal.com/login"&gt;login&lt;/a&gt; to your OneSignal account or &lt;a href="https://app.onesignal.com/signup"&gt;create a free account&lt;/a&gt;. Then, click on the blue button entitled &lt;strong&gt;&lt;em&gt;New App/Website&lt;/em&gt;&lt;/strong&gt; to configure your OneSignal account to fit your app or website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z5HYVXWC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/set-up-onesignal-account-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z5HYVXWC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/set-up-onesignal-account-1.png" alt="Developer Guide: How To Integrate Push Notifications in Angular"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Insert the name of your app or website. Select &lt;strong&gt;&lt;em&gt;Web Push&lt;/em&gt;&lt;/strong&gt; as your platform.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w5zSe_wb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/set-up-onesignal-account-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w5zSe_wb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/set-up-onesignal-account-2.png" alt="Developer Guide: How To Integrate Push Notifications in Angular"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the blue button entitled, &lt;strong&gt;&lt;em&gt;Next: Configure Your Platform&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-configuration"&gt;
  &lt;/a&gt;
  Web Configuration
&lt;/h3&gt;

&lt;p&gt;Under &lt;strong&gt;&lt;em&gt;Choose Integration&lt;/em&gt;&lt;/strong&gt; , select the &lt;strong&gt;&lt;em&gt;Typical Site&lt;/em&gt;&lt;/strong&gt; option.&lt;/p&gt;

&lt;p&gt;In the _ &lt;strong&gt;Site Setup&lt;/strong&gt; _ section, enter your chosen web configuration. In my case, the configuration looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wlcfcFgN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/web-configuration.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wlcfcFgN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/web-configuration.png" alt="Developer Guide: How To Integrate Push Notifications in Angular"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice for testing purposes I’m entering my localhost URL (&lt;a href="http://localhost:4401"&gt;http://localhost:4401&lt;/a&gt;). If you are doing the same, make sure you click on the &lt;strong&gt;&lt;em&gt;LOCAL TESTING&lt;/em&gt;&lt;/strong&gt; option. This will ensure to treat HTTP localhost as HTTPS for testing.&lt;/p&gt;

&lt;p&gt;Under _ &lt;strong&gt;Permission Prompt Setup&lt;/strong&gt; &lt;em&gt;, you will see three vertical blue dots under the _ &lt;strong&gt;Actions&lt;/strong&gt; _ header on the far right side of the screen. Click on the blue dots and select **_Edit&lt;/em&gt;** from the drop-down menu.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B4yWp407--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/push-slide-prompt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B4yWp407--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/push-slide-prompt.png" alt="Developer Guide: How To Integrate Push Notifications in Angular"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A window will open with the configuration of our &lt;a href="https://documentation.onesignal.com/docs/slide-prompt"&gt;push notification Slide Prompt&lt;/a&gt;. Confirm that &lt;strong&gt;&lt;em&gt;Auto-prompt&lt;/em&gt;&lt;/strong&gt; is enabled (toggled to the right).&lt;/p&gt;

&lt;p&gt;Under _ &lt;strong&gt;Show When&lt;/strong&gt; &lt;em&gt;, you can change the second increment to alter how long your slide prompt will delay after a user visits your page. You can leave it as it is, or you can reduce the seconds so that your prompt appears sooner. Once you've input your chosen delay increment, click the grey **_Done&lt;/em&gt;** button located at the bottom right corner of the window.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GG0yBEYL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/permission-prompt-editor.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GG0yBEYL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/permission-prompt-editor.png" alt="Developer Guide: How To Integrate Push Notifications in Angular"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After clicking _ &lt;strong&gt;Done&lt;/strong&gt; _, scroll down to the bottom of the page and click _ &lt;strong&gt;Save&lt;/strong&gt; _ to save your auto-prompt selections.&lt;/p&gt;

&lt;p&gt;You will be redirected to a different page with an important step: Downloading the SDK files. Click &lt;strong&gt;&lt;em&gt;DOWNLOAD ONESIGNAL SDK FILES&lt;/em&gt;&lt;/strong&gt; and save them on your computer to retrieve later.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jteQv92E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/camBSeQ9tHXO4YNeskPnOwxqhOf4Al3R9ZeHqnR-ryefOMVtuHwBlpMD-YwW87HrUPqqQK1xOYcGra_DAIm_66LDwweVTzCLPPXKSzKTYbMjCWz2bo6Vo6jpIRXjlOvsQOPBYi59" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jteQv92E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/camBSeQ9tHXO4YNeskPnOwxqhOf4Al3R9ZeHqnR-ryefOMVtuHwBlpMD-YwW87HrUPqqQK1xOYcGra_DAIm_66LDwweVTzCLPPXKSzKTYbMjCWz2bo6Vo6jpIRXjlOvsQOPBYi59" alt="Developer Guide: How To Integrate Push Notifications in Angular"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Under the section entitled &lt;strong&gt;&lt;em&gt;Add Code to Site&lt;/em&gt;&lt;/strong&gt; , you will see a grey button that allows you to copy the code snippet. Click the grey _ &lt;strong&gt;COPY CODE&lt;/strong&gt; _ button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P24OognR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/wfoLe_2cwZy3VvZqDa-c6p4zodUslzT_wcqtLoopYLkEb2oX_EMMG7ryEmhFdPvogOcPE8iviYIAn8OZY7V_Q7cdYjQzl8hXki-jKzPc4LBlXIOdRQgw-s_WGanprjOr9Slngyq4" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P24OognR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/wfoLe_2cwZy3VvZqDa-c6p4zodUslzT_wcqtLoopYLkEb2oX_EMMG7ryEmhFdPvogOcPE8iviYIAn8OZY7V_Q7cdYjQzl8hXki-jKzPc4LBlXIOdRQgw-s_WGanprjOr9Slngyq4" alt="Developer Guide: How To Integrate Push Notifications in Angular"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-2-quick-push-notification-setup-in-angular"&gt;
  &lt;/a&gt;
  Part 2: Quick Push Notification Setup In Angular
&lt;/h2&gt;

&lt;p&gt;In your Angular project folder, navigate to the &lt;strong&gt;index.html&lt;/strong&gt; file. Inside of the &lt;code&gt;head&lt;/code&gt; HTML tag, paste the code you previously copied from the OneSignal page.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="https://cdn.onesignal.com/sdks/OneSignalSDK.js" async=""&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
window.OneSignal = window.OneSignal || [];
    OneSignal.push(function() {
        OneSignal.init({
            appId: "YOUR-APP-ID",
        });
    });
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, locate the SDK files you downloaded on your computer and insert them inside of the &lt;strong&gt;&lt;em&gt;src&lt;/em&gt;&lt;/strong&gt; folder of your Angular app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H7yufA2p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/EO6rXfmDwh5ijF5FF-MrOLF2Moz6Q7d7d1TyGvMyEavXrQ2cueDzxHhosN-XkVZo1DUYjc7Mz3AY8dtFhY7Qq6x0goNHOJKsnqGOTz2WBClktHYSuI2B05NORRvn3XsPL98JavFv" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H7yufA2p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/EO6rXfmDwh5ijF5FF-MrOLF2Moz6Q7d7d1TyGvMyEavXrQ2cueDzxHhosN-XkVZo1DUYjc7Mz3AY8dtFhY7Qq6x0goNHOJKsnqGOTz2WBClktHYSuI2B05NORRvn3XsPL98JavFv" alt="Developer Guide: How To Integrate Push Notifications in Angular"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After you have inserted the SDK files into your Angular project, you'll need to make Angular aware of those SDK files. To do so, open the &lt;strong&gt;&lt;em&gt;angular.json&lt;/em&gt;&lt;/strong&gt; file and locate the &lt;strong&gt;architecture property&lt;/strong&gt;. Inside of that property, you will see another property called assets, at the bottom of this property, add the location of the OneSignal SDKs.&lt;/p&gt;

&lt;p&gt;Your &lt;strong&gt;&lt;em&gt;angular.json&lt;/em&gt;&lt;/strong&gt; should look like this:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"assets": [
              "src/favicon.ico",
              "src/assets",
              "src/OneSignalSDKUpdaterWorker.js",
              "src/OneSignalSDKWorker.js",
            ],
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#allow-web-push-notifications"&gt;
  &lt;/a&gt;
  Allow Web Push Notifications
&lt;/h3&gt;

&lt;p&gt;Run the Angular app and visit your website. You should see the following prompt appear after your chosen time delay interval:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sJhl_0zB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/TXNNxMqU5B8lYe9XA4cdyfBmcYrCCCXazha8u94T4acvHiWc_xL6TtCEEPxLuFHH2dBSKbcj2kSiAOugtp5hyzOHWSlB-vw8Ijp8zkiRnZSreBz6O2a9UcWL7AcsnxR6m9pVNfFw" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sJhl_0zB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/TXNNxMqU5B8lYe9XA4cdyfBmcYrCCCXazha8u94T4acvHiWc_xL6TtCEEPxLuFHH2dBSKbcj2kSiAOugtp5hyzOHWSlB-vw8Ijp8zkiRnZSreBz6O2a9UcWL7AcsnxR6m9pVNfFw" alt="Developer Guide: How To Integrate Push Notifications in Angular"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the blue &lt;strong&gt;&lt;em&gt;Allow&lt;/em&gt;&lt;/strong&gt; button to enable push notifications on your browser.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#send-web-push-notifications"&gt;
  &lt;/a&gt;
  Send Web Push Notifications
&lt;/h3&gt;

&lt;p&gt;It’s time to send your first web push notification! To do so, login to your OneSignal account and navigate to the &lt;strong&gt;&lt;em&gt;Dashboard&lt;/em&gt;&lt;/strong&gt; tab. On the dashboard page, click on the blue button that says &lt;strong&gt;&lt;em&gt;New Push&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---4Q6dMxv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/global-outcomes.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---4Q6dMxv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/global-outcomes.png" alt="Developer Guide: How To Integrate Push Notifications in Angular"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will be redirected to a new window that will allow you to customize your push notification. Under &lt;strong&gt;&lt;em&gt;Audience&lt;/em&gt;&lt;/strong&gt; , make sure that _ &lt;strong&gt;Send to Subscribed Users&lt;/strong&gt; _ is selected. Then, create your message by adding your message title, content, and an image. Because this is the first notification your subscribers will receive, you may choose to craft a simple welcome message to confirm that they've been subscribed and reinforce the value that notifications will provide.&lt;/p&gt;

&lt;p&gt;Under the &lt;strong&gt;&lt;em&gt;Delivery Schedule&lt;/em&gt;&lt;/strong&gt; section, select _ &lt;strong&gt;Immediately&lt;/strong&gt; _ and &lt;strong&gt;&lt;em&gt;Send to everyone at the same time&lt;/em&gt;&lt;/strong&gt; to send to all your current web push subscribers. If you have just finished setting up your OneSignal account, chances are you're the first and only subscriber. If your app or website is heavily trafficked and other users have already opted in to receive push notifications, you may want to select &lt;strong&gt;&lt;em&gt;Send to particular segment(s)&lt;/em&gt;&lt;/strong&gt; to test your message out on a specific audience. When you're ready to send your message, click on the blue _ &lt;strong&gt;Review and Send&lt;/strong&gt; _ button at the bottom of the screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y1i1D86P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/new-push.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y1i1D86P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/new-push.png" alt="Developer Guide: How To Integrate Push Notifications in Angular"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A small popup will appear for you to review your message. Once you are satisfied, click on the blue _ &lt;strong&gt;Send Message&lt;/strong&gt; _ button. You should receive a web push notification on your device! 🚀&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-3-advanced-push-notification-setup-in-angular"&gt;
  &lt;/a&gt;
  Part 3: Advanced Push Notification Setup In Angular
&lt;/h2&gt;

&lt;p&gt;If you want the ability to use OneSignal across your entire Angular app, complete these advanced push notification setup steps after completing the quick push notification setup.&lt;/p&gt;

&lt;p&gt;Inside of your &lt;strong&gt;&lt;em&gt;index.html&lt;/em&gt;&lt;/strong&gt; file, remove the following code:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
window.OneSignal = window.OneSignal || [];
    OneSignal.push(function() {
        OneSignal.init({
            appId: "YOUR-APP-ID",
        });
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In your root folder, create a new file called &lt;strong&gt;&lt;em&gt;globals.ts&lt;/em&gt;&lt;/strong&gt;. In this file, you will insert the following code:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export{}
declare global {
    interface Window {
        OneSignal: any;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above will allow you to make use of the &lt;code&gt;window.OneSignal&lt;/code&gt; object without triggering any TS and compiler errors. Now that you have the &lt;strong&gt;&lt;em&gt;globals.ts&lt;/em&gt;&lt;/strong&gt; file created, import it into your &lt;strong&gt;&lt;em&gt;polyfills.ts&lt;/em&gt;&lt;/strong&gt; file.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import 'globals';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it's time to create your OneSignal service inside of your Angular app. I have created one using the Angular CLI. The name of my service file is &lt;strong&gt;&lt;em&gt;one-signal.service.ts&lt;/em&gt;&lt;/strong&gt;. After creating the service, you will create an &lt;code&gt;onLoad()&lt;/code&gt; method that will ensure that the SDK script we added inside of the &lt;strong&gt;&lt;em&gt;index.html&lt;/em&gt;&lt;/strong&gt; has been loaded since it's an async operation.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;async onLoad(): Promise&amp;lt;any&amp;gt; {
    window.OneSignal = window.OneSignal || [];
    return new Promise((resolve) =&amp;gt; {
        window.OneSignal.push(function() {
            resolve(window.OneSignal);
        });
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the OneSignal service, create a new method called &lt;code&gt;onInit()&lt;/code&gt;. Inside of the method you will call the &lt;code&gt;onLoad()&lt;/code&gt; and you will &lt;a href="https://documentation.onesignal.com/docs/web-push-sdk#initialization"&gt;initialize OneSignal&lt;/a&gt;.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;onInit():void {
    this.onLoad().then((OneSignal)=&amp;gt;{
        OneSignal.init({
            appId: "YOUR-APP-ID",
        });
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, open your &lt;strong&gt;&lt;em&gt;app.component.ts&lt;/em&gt;&lt;/strong&gt; file and inject the OneSignal services you just created. Inside of the &lt;code&gt;gOnInit()&lt;/code&gt;, call the &lt;code&gt;onInit()&lt;/code&gt; method from your OneSignal service. Your file will look like this:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Component, OnInit } from '@angular/core';
import { OneSignalService } from './one-signal.service';

@Component({
selector: 'app-root',
templateUrl: './app.component.html',
styleUrls: ['./app.component.scss']
})

export class AppComponent implements OnInit {
    title = 'OneSignal-Angular';

    constructor(private os: OneSignalService){}

    ngOnInit() {
        this.os.onInit();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, you can keep expanding your code to make use of different features of the OneSignal SDK across your Angular app. To learn more about the Web Push SDK visit our web push &lt;a href="https://documentation.onesignal.com/docs/web-push-sdk"&gt;SDK documentation&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>angular</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Associations</title>
      <author>lycho33</author>
      <pubDate>Tue, 04 May 2021 19:58:31 +0000</pubDate>
      <link>https://dev.to/lycho33/associations-26m2</link>
      <guid>https://dev.to/lycho33/associations-26m2</guid>
      <description>&lt;p&gt;After learning Ruby on Rails, I learnt that associations was the most crucial aspect, without it...nothing works.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#original-project"&gt;
  &lt;/a&gt;
  Original Project
&lt;/h3&gt;

&lt;p&gt;The first project I created was supposed to be website where the user could be a student or mentor. If the user was a mentor, the mentor could create lessons but if the user was as student, the student would complete lessons. Simple? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EbozOeht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3mzud6cy2hn552fxaa8.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EbozOeht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3mzud6cy2hn552fxaa8.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For an idea I thought was so simple, turned out to be far too complicated for me to handle. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#problem-1"&gt;
  &lt;/a&gt;
  Problem 1
&lt;/h4&gt;

&lt;p&gt;It was unnecessary to have 2 separate models for Students and Mentors. &lt;/p&gt;

&lt;p&gt;So I decided to combine them into Users. But this did not work because I was bypassing Separation of Concerns. A User model was supposed to only deal with login/signout/logout. Instead I created a separated model called Role so the User could choose it's role as either a mentor or student&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#next-problem"&gt;
  &lt;/a&gt;
  Next Problem
&lt;/h4&gt;

&lt;p&gt;I wanted to create a many-to-many association but I had to combine my Student/Mentor model. By doing so I would have to create custom associations so that the Roles model could have a has_many association for Mentor and Student. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0eWRBb0---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/isl7qgpjctr39lktqrh0.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0eWRBb0---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/isl7qgpjctr39lktqrh0.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This would not have been a problem but this would have taken a lot longer to understand and figure out. The project had to be completed in a week. What's worse was that I did not know how to use these custom associations in my controllers. Additionally, my primary/foreign keys were not working (due to my lack of understanding) which made my nested resources break and my routes not be designed correctly. &lt;/p&gt;

&lt;p&gt;So... I decided to SCRAP this project&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-new-project"&gt;
  &lt;/a&gt;
  THE NEW PROJECT
&lt;/h3&gt;

&lt;p&gt;The new project ended up being a website about an international violin competition called the Menuhin Competition 2021. This website would allow users to upload ongoing performances and blog about it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lkpKDAqw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8olz1xpuhkrpwn22hlp.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lkpKDAqw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8olz1xpuhkrpwn22hlp.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The benefit of these associations is that I can have a many-to-many association. &lt;/p&gt;

&lt;p&gt;For example: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Users has many performances they can upload but each uploaded performance belongs to a user&lt;/li&gt;
&lt;li&gt;A user can comment on any uploaded performance. Because comments is the joins table, user has many performances through comments. 
-A user can post a blog. So each blog belongs to a user but a user can post many blogs. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For me, this new project ended up have far simpler associations that I could comprehend. But I still hope as I continue to try deepen my understanding on associations that I can come back to the original project and try complete it. For now, I learnt the hard way how important associations are. &lt;/p&gt;

</description>
      <category>rails</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Programming at my day job</title>
      <author>Lucas Kelly</author>
      <pubDate>Tue, 04 May 2021 19:49:03 +0000</pubDate>
      <link>https://dev.to/lucaskelly113/programming-at-my-day-job-1nie</link>
      <guid>https://dev.to/lucaskelly113/programming-at-my-day-job-1nie</guid>
      <description>&lt;p&gt;When you read the title of this post, you may think “what’s your day job? Isn’t that what you are supposed to do?”&lt;/p&gt;

&lt;p&gt;The answer is I’m a trading assistant for a financial planning and investment office. And no, my job is not programming related at all. At least it wasn’t meant to be...&lt;/p&gt;

&lt;p&gt;I’ve been at my job for almost 4 years now and have done much more than what I was originally hired to do. But since I began to learn how to program about 6 months ago, I have been able to save my employer probably a few hundred dollars at least by editing code on our server based Client Relationship Manager (CRM) myself. I literally just worked on the program today and saved probably at least $90 in fees that it would have cost to contact the company we usually work with to make changes. &lt;/p&gt;

&lt;p&gt;I’m posting about this because it gives me hope that although I am not in a tech related job at the moment, it definitely is where I see myself in a couple years. &lt;/p&gt;

&lt;p&gt;Talk to you all soon!&lt;/p&gt;

</description>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Secret input in python, Get input secretly and in a personalized way!</title>
      <author>Matin Najafi</author>
      <pubDate>Tue, 04 May 2021 19:12:07 +0000</pubDate>
      <link>https://dev.to/matin/secret-input-in-python-get-input-secretly-and-in-a-personalized-way-30ab</link>
      <guid>https://dev.to/matin/secret-input-in-python-get-input-secretly-and-in-a-personalized-way-30ab</guid>
      <description>&lt;p&gt;In the Python programming language, we use the input () command to get input from the user, which we all know. But sometimes we want to get the input so that the user actually enters it, but it can not be displayed in command prompt! In these cases, we use the local ‘’getpass‘’ library.&lt;br&gt;
Now we want to write a secret input function together that performs the getpass operation, but makes the appearance of the program more beautiful and hides the entries with a star or the custom display. (Like a password entry in html)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7yztu8PD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rk0q25hmtd5bnpt4q34c.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7yztu8PD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rk0q25hmtd5bnpt4q34c.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we are not allowed to perform an operation when receiving a simple input in Python, let’s use pynput and get the input of the user keyboard&lt;br&gt;
In this short article, I want to make the code of this class available to you, but before that, I will give you a brief description.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works?
&lt;/h2&gt;

&lt;p&gt;This class receives your input with pynput and performs the simulation completely with a few simple terms and prints.&lt;br&gt;
The function of this function is such that the user input is received using pynput, but because pynput receives the user input in any place and we only want to receive the input that the user enters in the console, a function to receive the active window in the form of cross We write -platform and using this function, we put the condition in on_press that the inputs are received only in the console.&lt;br&gt;
To display the stars and any other costume characters as input, we must print it with a blank end. But it is not possible to print them using print ()! So we do this using the sys module and the sys.stdout command and print the expressions. Click to read a little about sys.stdout printing.&lt;br&gt;
Until now, inputs are received and a star or any other character is printed while typing! Now we want to make sure that if the character was wrong and we hit backspace, that character will be deleted from the console.&lt;br&gt;
If we pay attention, the inputs that are sent in on_press have a value called char that we can receive the value. But for keys such as Inter, backspace, arrow keys, etc., it is not like this and it is raised. So we bet that if the key entered is equal to pynput.keyboard.Key.backspace, the backup operation will be performed and a return will be made so that the continuation of the function code does not work. Now how to clear the input from the console? Just print the phrase ‘\b \b’ using sys.stdout. To be precise, each \b reverses the input once, but the character is not deleted after that. So we put a space after that to replace the input with a space after that and the character is removed from the user’s view and we go back again with \b once as if there was a backspace in the input once.&lt;br&gt;
Note that if you want to get the show to the user as desired, the user may give a multi-digit show. So multiply the phrase ‘\b \b’ by the number of show characters so that there is no problem.&lt;br&gt;
Done! So far we can type and delete the typed phrase. Be a little careful. If we hit too much backspace, the custom printed prompt will also be deleted. To prevent this, we create a numeric variable called on_char and set its value to 0. For each on_press we add a number to this variable. But we bet on backspace that if this variable is less than or equal to 0, it will retry and the function will not run. This way we can prevent this problem.&lt;br&gt;
So far we have made a show entry! Now we want to receive the user inputs and save them in a variable so that when the user enters the enter key, those saved inputs will be returned. Simply create a self.value in our &lt;strong&gt;init&lt;/strong&gt; class and put the key.char in each on_press, which is equivalent to the user input string character, and in the case of backspace, by converting the self.value to a list, and popping the last character And convert self.value to string again using join, delete the last letters.&lt;br&gt;
Note that for this section, put a try and except because it is possible to enter separation keys that do not have a value of char, so if except, do a simple return.&lt;br&gt;
For when the user enters the enter key, because we turned on the listener by join method and we can not simply stop the listener, so we start the listener in a fan and on_press in the same function. We put that function privately in &lt;strong&gt;init&lt;/strong&gt; so that the user can not use it.&lt;br&gt;
The problem with pynput is that when we press the Enter key, once the phrases we have typed so far are pasted and entered! To prevent this, if the user enters enter, we put an empty getpass.getpass to take this input imperceptibly!&lt;br&gt;
Almost done! Now call the function exactly below &lt;strong&gt;init&lt;/strong&gt; and then return the self.value value in &lt;strong&gt;str&lt;/strong&gt;. For added security, you can delete variables other than self.value with del. The codes of this useful class are available here:&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h1&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


</description>
      <category>python</category>
      <category>input</category>
      <category>secret</category>
      <category>trick</category>
    </item>
    <item>
      <title>19 Simple Hover Animation Using CSS</title>
      <author>Kiran Raj R</author>
      <pubDate>Tue, 04 May 2021 19:08:53 +0000</pubDate>
      <link>https://dev.to/kiranrajvjd/19-simple-hover-animation-using-css-1l36</link>
      <guid>https://dev.to/kiranrajvjd/19-simple-hover-animation-using-css-1l36</guid>
      <description>&lt;p&gt;Here is the 19 simple, beginner level hover animation using CSS. The logic behind the examples are briefly explained as comments in the CSS code section. The before and after pseudo elements are used with simple CSS transform property, JavaScript is not used in these examples. Hope you will like it, happy coding.&lt;/p&gt;

&lt;p&gt;Codepen &lt;a href="https://codepen.io/kiran-r-raj/pen/ZEezrJy"&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/ZEezrJy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>A Hitchhiker's Guide to SQLite with Python</title>
      <author>Arctype Team</author>
      <pubDate>Tue, 04 May 2021 19:08:26 +0000</pubDate>
      <link>https://dev.to/arctype/a-hitchhiker-s-guide-to-sqlite-with-python-3c9j</link>
      <guid>https://dev.to/arctype/a-hitchhiker-s-guide-to-sqlite-with-python-3c9j</guid>
      <description>&lt;p&gt;To explore SQLite along with Python, which is a user-friendly and no-nonsense language, we are going to &lt;strong&gt;build a simple tic-tac-toe game.&lt;/strong&gt; So buckle up and get your machines ready!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-sqlite-and-embedded-databases"&gt;
  &lt;/a&gt;
  Introduction to SQLite and Embedded Databases
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.sqlite.org/index.html"&gt;SQLite&lt;/a&gt; is a small, self-contained, client/embedded database written in the &lt;a href="https://en.wikipedia.org/wiki/C_programming_language"&gt;C Programming language&lt;/a&gt; and can be summarized using the following points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application library.&lt;/li&gt;
&lt;li&gt;Directly writes to disk.&lt;/li&gt;
&lt;li&gt;Cross-platform, stable, and the most &lt;a href="https://www.sqlite.org/mostdeployed.html"&gt;widely deployed and used database engine.&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Zero configuration.&lt;/li&gt;
&lt;li&gt;Automatic recovery.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sqlite.org/copyright.html"&gt;Public domain license.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article, we are going to see many of these features in action. Features such as data replication, network access, etc., are intentionally absent from SQLite since it was built for a much more lightweight use case. SQLite databases are very useful in constrained environments such as mobile devices, lightweight desktop apps, IoT devices, and games.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-sqlite-with-python"&gt;
  &lt;/a&gt;
  Setting Up SQLite with Python
&lt;/h2&gt;

&lt;p&gt;Let's get our learning environment up and running by installing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python 3;&lt;/li&gt;
&lt;li&gt;any IDE for Python coding—I recommend PyCharm;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://arctype.com/"&gt;Arctype SQL Client&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;and SQLite tools installed on your OS for CLI (Mac OS comes with it by default).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#library-setup-and-database-creation"&gt;
  &lt;/a&gt;
  Library Setup and Database Creation
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Sqlite3&lt;/code&gt; comes packaged with Python by default and there is no need to install any additional libraries. Let's go ahead and import &lt;code&gt;Sqlite3&lt;/code&gt; and then create our database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import sqlite3

conn = sqlite3.connect('sqlite.db')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it. The database is now created and we can create tables and insert data now. Isn't this a breeze when compared to setting up a full-blown RDBMS?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-are-sqlite-databases-stored"&gt;
  &lt;/a&gt;
  Where Are SQLite Databases Stored?
&lt;/h2&gt;

&lt;p&gt;Once you run the above application, a &lt;code&gt;sqlite.db&lt;/code&gt; file is automatically created at the project root level. As we will see later, this file will be re-used whenever the application is started. We can customize the location of this file by just connecting to the database with its path.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;conn = sqlite3.connect('data/sqlite.db')&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;This will create the &lt;code&gt;sqlite.db&lt;/code&gt; file inside the &lt;code&gt;data&lt;/code&gt; folder. Keep in mind that the directory &lt;code&gt;data&lt;/code&gt; needs to be created beforehand. The file extension &lt;code&gt;.db&lt;/code&gt; is also optional—SQLite will just create a binary file with the name we provide it with.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-and-managing-an-sqlite-database"&gt;
  &lt;/a&gt;
  Configuring and Managing an SQLite Database
&lt;/h2&gt;

&lt;p&gt;As we just saw, there is no configuration required to get our database set up. Since it is an application library, there is no server and the database comes up and goes down with the connection initiated by the application running behind it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connecting-to-an-sqlite-database-from-the-command-line"&gt;
  &lt;/a&gt;
  Connecting to an SQLite Database from the Command Line
&lt;/h2&gt;

&lt;p&gt;SQLite (version 3) comes pre-installed on Mac OS operating systems. For other platforms, we can download the CLI and other tools from the &lt;a href="https://sqlite.org/download.html"&gt;SQLite website itself&lt;/a&gt;. The command line can be invoked by typing the command &lt;code&gt;sqlite3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rWC_r-19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/04/Arctype_Sqlite_2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rWC_r-19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/04/Arctype_Sqlite_2.png" alt="SQLite Command Line"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice that I have connected directly to the database that I used from the Python script. We can do so by using &lt;code&gt;sqlite3 /path/to/file&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-sample-tables-and-running-basic-queries"&gt;
  &lt;/a&gt;
  Creating Sample Tables and Running Basic Queries
&lt;/h2&gt;

&lt;p&gt;Let's create a table for testing purposes.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;create table testing(id int, name text);&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;And then insert some rows into the table.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;insert into testing values(100, 'Name1');
insert into testing values(101, 'Name2');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see the records by doing a simple &lt;code&gt;select *&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lq3W-wxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/04/Arctype_Sqlite_3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lq3W-wxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/04/Arctype_Sqlite_3.png" alt="SQLite command line select statement"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are a ton of helper functions that SQLite provides to learn more about tables and the schema. Below are some of the functions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5viedyM7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/04/Arctype_Sqlite_4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5viedyM7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/04/Arctype_Sqlite_4.png" alt="SQLite command line helper functions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.tables&lt;/code&gt; gives me information about all of the tables. &lt;code&gt;.schema&lt;/code&gt; gives the information about a specific table. &lt;a href="https://www.sqlite.org/pragma.html#pragma_table_info"&gt;pragma table_info&lt;/a&gt; is a function that gives more information about the table (i.e. the data type and column name).&lt;/p&gt;

&lt;p&gt;Now, let's connect to this database using our Python script and try to read these tables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import sqlite3

conn = sqlite3.connect('data/sqlite.db')

cursor = conn.cursor()

cursor.execute('SELECT * FROM testing')

rows = cursor.fetchall()

for row in rows:
    print(row)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above code will print.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(100, 'Name1')&lt;br&gt;
(101, 'Name2')&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-example-tictactoe-game-using-python-and-sqlite"&gt;
  &lt;/a&gt;
  An Example Tic-Tac-Toe Game Using Python and SQLite
&lt;/h2&gt;

&lt;p&gt;Let's consider a real-world use case—games. Games in mobile applications make heavy use of SQLite for storing their game status and then sync to a backend server periodically/based on a user trigger. In this example, we will see a Tic-Tac-Toe game developed in Python that uses SQLite to store game data and player information. We can then query this database offline to retrieve game-related information.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#database-table-design-for-tictactoe"&gt;
  &lt;/a&gt;
  Database Table Design for Tic-Tac-Toe
&lt;/h2&gt;

&lt;p&gt;Before we attempt to write the game, let's create our database ER diagram that is going to represent our tables.&lt;/p&gt;

&lt;p&gt;First, we are going to create our &lt;code&gt;Player&lt;/code&gt; table which has the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, and &lt;code&gt;created_date&lt;/code&gt; which is going to be used to store the player data. Next, we are going to create our &lt;code&gt;Game&lt;/code&gt; table which will have the player details, game status, and winner details. The Entity-Relationship diagram for these tables is given below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Z0dvE2a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/size/w1000/2021/05/Group-21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Z0dvE2a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/size/w1000/2021/05/Group-21.png" alt="tic tac toe game database relationship diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We could further normalize this by introducing a game status entity, but we are looking for a simple model to understand SQLite rather than a perfect design. Based on this spec, tables can be created accordingly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE player(
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT,
  created DATETIME DEFAULT CURRENT_TIMESTAMP
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE game(
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  first_player_id INTEGER,
  second_player_id INTEGER,
  created DATETIME DEFAULT CURRENT_TIMESTAMP,
  game_status TEXT,
  winner_id INTEGER,
  FOREIGN KEY (first_player_id) REFERENCES player (id),
  FOREIGN KEY (second_player_id) REFERENCES player (id),
  FOREIGN KEY (winner_id) REFERENCES player (id)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The database is now set up, so let's code our game!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#coding-the-tictactoe-game-in-python"&gt;
  &lt;/a&gt;
  Coding the Tic-Tac-Toe Game in Python
&lt;/h2&gt;

&lt;p&gt;Before starting to write everything out in Python, let's first determine our game's logic.  For this simple example, I would recommend something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Initialize game board   
  Initialize users 
    Game logic (While loop based on exit conditions) 
      Begin game logic 
  End
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are going to a simple two-dimensional array to hold the game board. Instead of walking through every element of the code, I am going to paste the whole code below and give a high-level walkthrough since the code is pretty self-explanatory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"""
The Game board is a two D array emulating the X*Y Tic Tac Toe Game
"""
global game_board
# Constants
place_already_filled = "Given place is already filled. Provide an empty place from the board"
invalid_move = "Invalid move. Enter a value within the board dimension."
invalid_value = "Invalid value. Enter an integer value within the board dimension."
game_over_tie = "Game Over. It is a tie."


def initialise_gameboard(dimensions):
    global game_board
    dimensions = int(dimensions)
    # Fill with empty strings
    game_board = [[' ' for _ in range(dimensions)] for _ in range(dimensions)]


def print_board():
    print("**************************")
    for item in game_board:
        print(item)
    print("**************************")


def check_game_status(x_pos, y_pos, player):
    row_match = True
    column_match = True
    left_diagonal_match = True
    right_diagonal_match = True

    for i in range(0, len(game_board)):
        if game_board[x_pos][i] != game_board[x_pos][y_pos]:
            row_match = False

    for i in range(0, len(game_board)):
        if game_board[i][y_pos] != game_board[x_pos][y_pos]:
            column_match = False

    for i in range(0, len(game_board)):
        if game_board[i][i] != game_board[x_pos][y_pos]:
            left_diagonal_match = False
        if game_board[i][len(game_board) - i - 1] != game_board[x_pos][y_pos]:
            right_diagonal_match = False

    print_board()

    if row_match or column_match or left_diagonal_match or right_diagonal_match:
        return f"Player {player} has won"
    else:
        return "Playing"


def game():
    dimensions = input("Enter board dimensions (3 for a 3x3 board): ")
    first_user = input("Enter first user name : ")
    second_user = input("Enter second user name: ")
    initialise_gameboard(dimensions)
    player = first_user
    count = 1

    while True:
        print(f"It's user : {player}'s turn")
        positions = input("Enter move position (x,y) : ").split(",")

        try:
            x_pos = int(positions[0]) - 1
            y_pos = int(positions[1]) - 1
        except ValueError:
            print(invalid_value)
            continue

        if x_pos &amp;lt; 0 or x_pos &amp;gt;= len(game_board) or y_pos &amp;lt; 0 or y_pos &amp;gt;= len(game_board):
            print(invalid_move)
            continue

        if game_board[x_pos][y_pos] != ' ':
            print(place_already_filled)
            continue

        if player is first_user:
            game_board[x_pos][y_pos] = 'X'
        else:
            game_board[x_pos][y_pos] = 'O'

        count = count + 1

        game_status = check_game_status(x_pos, y_pos, player)

        if game_status != "Playing":
            print(game_status)
            break

        if count == len(game_board) * len(game_board) + 1:
            print_board()
            print(game_over_tie)
            break

        # Switch players after
        if player is first_user:
            player = second_user
        else:
            player = first_user

    another_game = input("Do you want to play another game (Y/N) : ")

    if another_game.lower() == 'y' or another_game == 'Y':
        game()


game()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The game is nothing fancy. As you can see, the &lt;code&gt;game&lt;/code&gt; method is where the core logic begins.&lt;/p&gt;

&lt;p&gt;Go ahead and try it out. Below is a sample game output on the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Enter board dimensions (3 for a 3x3 board): 3
Enter first user name : p1
Enter second user name: p2
It's user : p1's turn
Enter move position (x,y) : 1,1
**************************
['X', ' ', ' ']
[' ', ' ', ' ']
[' ', ' ', ' ']
**************************
It's user : p2's turn
Enter move position (x,y) : 2,2
**************************
['X', ' ', ' ']
[' ', 'O', ' ']
[' ', ' ', ' ']
**************************
It's user : p1's turn
Enter move position (x,y) : 1,3
**************************
['X', ' ', 'X']
[' ', 'O', ' ']
[' ', ' ', ' ']
**************************
It's user : p2's turn
Enter move position (x,y) : 2,3
**************************
['X', ' ', 'X']
[' ', 'O', 'O']
[' ', ' ', ' ']
**************************
It's user : p1's turn
Enter move position (x,y) : 1,2
**************************
['X', 'X', 'X']
[' ', 'O', 'O']
[' ', ' ', ' ']
**************************
Player p1 has won
Do you want to play another game (Y/N) : n

Process finished with exit code 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can put the above code in a separate &lt;code&gt;game.py&lt;/code&gt; file for clarity. Now to the next part, integrating this game with our database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sqlite-integration"&gt;
  &lt;/a&gt;
  SQLite Integration
&lt;/h2&gt;

&lt;p&gt;Now, we have to make the user entries whenever the users have been created and make game entries when the game is won or a draw. Before we create our queries, let's make the actual Data Access layer methods (i.e. creating a player entry and a game entry).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import sqlite3

conn = sqlite3.connect('data/sqlite.db')


def create_player(name):
    query = f"INSERT INTO player(name) VALUES ('{name}')"
    cursor = conn.cursor()
    cursor.execute(query)
    conn.commit()
    user_id = cursor.lastrowid
    cursor.close()
    return user_id


def create_game(first_player_id, second_player_id, game_status, winner_id):
    query = f"INSERT INTO game(first_player_id, second_player_id, game_status, winner_id) " \
            f"VALUES ({first_player_id}, {second_player_id}, '{game_status}', {winner_id})"

    cursor = conn.cursor()
    cursor.execute(query)
    conn.commit()
    cursor.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can use these simple methods from our game:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Paste below code anywhere after getting the user details
first_user_id = dao.create_player(first_user)
second_user_id = dao.create_player(second_user)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Paste below code when checking for game status i.e 
# game_status != "Playing"
winner_id = second_user_id

if player == first_user:
   winner_id = first_user_id

dao.create_game(first_user_id, second_user_id, game_status, winner_id)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can do a similar code for storing game status during draw as well. Now we can play the game and the data should be recorded in our tables.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importing-and-exporting-data-from-sqlite"&gt;
  &lt;/a&gt;
  Importing and Exporting Data from SQLite
&lt;/h2&gt;

&lt;p&gt;Having now played a few test games, it's now time to examine the data. As everyone knows, Arctype makes querying, analyzing, and visualizing data better than ever, so before we continue, we need to learn about importing and exporting data from SQLite.  Data can be exported/imported either at the table or database level. The table level is typically used to export to other databases/applications and the database level is typically used for backup.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importing-and-exporting-sqlite-tables"&gt;
  &lt;/a&gt;
  Importing and Exporting SQLite Tables
&lt;/h2&gt;

&lt;p&gt;Apart from programmatic integration, once can easily export data from an SQLite database using data export facility. The most commonly used db agnostic standard is a &lt;code&gt;CSV&lt;/code&gt; format. Let's export our game table.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sqlite3 -header -csv /path/to/sqlite.db/ 'select * from game;' &amp;gt; game.csv&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;game.csv&lt;/code&gt; would contain the below content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;id,first_player_id,second_player_id,created,game_status,winner_id
1,1,2,"2021-04-25 18:19:07","Player p1 has won",1
2,3,4,"2021-04-25 18:23:23","Player p2 has won",4
3,7,8,"2021-04-26 05:20:04","Player p1 has won",7
4,9,10,"2021-04-26 05:25:44",Draw
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is very similar to other database systems.&lt;/p&gt;

&lt;p&gt;Import is quite easy, first we need to create a &lt;code&gt;.sql&lt;/code&gt; file with the below content.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.import /path/to/csv game&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;And then from the command line,&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sqlite3 /path/to/database &amp;lt; /path/to/sql/&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importing-and-exporting-databases"&gt;
  &lt;/a&gt;
  Importing and Exporting Databases
&lt;/h2&gt;

&lt;p&gt;Database backup is actually pretty easy, just copy the SQLite file to back up system. But this method is usually difficult since users/application might be running simultaneously and the data is stored in a binary format. To do a point-in-time snapshot/human readable snapshot when the database is running/being used then we can dump the database content to a file format of our choice.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sqlite3 /path/to/db .dump &amp;gt; dump.sql&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;dump.sql&lt;/code&gt; content will look like below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE player(
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT,
  created DATETIME DEFAULT CURRENT_TIMESTAMP
);
INSERT INTO player VALUES(1,'p1','2021-04-25 18:18:55');
INSERT INTO player VALUES(2,'p2','2021-04-25 18:18:55');
INSERT INTO player VALUES(3,'p1','2021-04-25 18:23:05');
INSERT INTO player VALUES(4,'p2','2021-04-25 18:23:05');
INSERT INTO player VALUES(5,'p1','2021-04-26 05:16:56');
INSERT INTO player VALUES(6,'p2','2021-04-26 05:16:56');
INSERT INTO player VALUES(7,'p1','2021-04-26 05:19:04');
INSERT INTO player VALUES(8,'p2','2021-04-26 05:19:04');
INSERT INTO player VALUES(9,'p1','2021-04-26 05:24:44');
INSERT INTO player VALUES(10,'p2','2021-04-26 05:24:44');
CREATE TABLE game(
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  first_player_id INTEGER,
  second_player_id INTEGER,
  created DATETIME DEFAULT CURRENT_TIMESTAMP,
  game_status TEXT,
  winner_id INTEGER,
  FOREIGN KEY (first_player_id) REFERENCES player (id),
  FOREIGN KEY (second_player_id) REFERENCES player (id),
  FOREIGN KEY (winner_id) REFERENCES player (id)
);
INSERT INTO game VALUES(1,1,2,'2021-04-25 18:19:07','Player p1 has won',1);
INSERT INTO game VALUES(2,3,4,'2021-04-25 18:23:23','Player p2 has won',4);
INSERT INTO game VALUES(3,7,8,'2021-04-26 05:20:04','Player p1 has won',7);
INSERT INTO game VALUES(4,9,10,'2021-04-26 05:25:44','Draw',NULL);
DELETE FROM sqlite_sequence;
INSERT INTO sqlite_sequence VALUES('player',10);
INSERT INTO sqlite_sequence VALUES('game',4);
COMMIT;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Depending on what data is there, the above SQL file content might change but the backup/format is just plain SQL.&lt;/p&gt;

&lt;p&gt;If we are not bothered about human readability then we can just dump it in a native format like below.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sqlite3 /path/to/db ".backup db_backup.db"&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Import for binary files are quite similar -&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sqlite3 /path/to/db ".restore db_backup.db"&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Import for SQL file -&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sqlite3 /path/to/db &amp;lt; dump.sql&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#querying-our-sqlite-game-data-in-arctype"&gt;
  &lt;/a&gt;
  Querying Our SQLite Game Data in Arctype
&lt;/h2&gt;

&lt;p&gt;Our SQLite data is now ready to be loaded into Arctype.  This can be achieved in one of two ways—by creating and populating new tables using the SQLite-generated database file or by importing CSV data into existing tables.  First, let's create a new SQLite database by adding a new connection:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7aR2jqZK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/size/w1000/2021/05/Screen-Shot-2021-05-04-at-10.26.37-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7aR2jqZK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/size/w1000/2021/05/Screen-Shot-2021-05-04-at-10.26.37-AM.png" alt="arctype new connection page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, you can choose a name for your new database.  For this example, &lt;code&gt;tictactoe&lt;/code&gt; seems fitting enough:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d6bUMCTQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-10.27.24-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d6bUMCTQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-10.27.24-AM.png" alt="arctype name new SQLite connection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, it's time to import our data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importing-sqlite-tables-into-arctype"&gt;
  &lt;/a&gt;
  Importing SQLite Tables into Arctype
&lt;/h2&gt;

&lt;p&gt;We can create and populate tables in our new SQLite database using the SQL table dump from above. Simply copy and paste the contents of the &lt;code&gt;dump.sql&lt;/code&gt; file into a query, remove the manual &lt;code&gt;BEGIN TRANSACTION;&lt;/code&gt; and &lt;code&gt;COMMIT;&lt;/code&gt; lines (Arctype automatically wraps all of your statements in transactions) and click 'Run':&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nXCPMqLJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/size/w1000/2021/05/Screen-Shot-2021-05-04-at-10.28.03-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nXCPMqLJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/size/w1000/2021/05/Screen-Shot-2021-05-04-at-10.28.03-AM.png" alt="arctype query window create tables and insert data"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it!  Your tables should be successfully created and filled with data. This method is fairly simple, but is only recommended for your initial data import—deleting and re-creating tables with increasingly large datasets is unsustainable, so ultimately, you'll want to simply import new data into your existing tables.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importing-csv-data-into-existing-arctype-sqlite-tables"&gt;
  &lt;/a&gt;
  Importing .CSV Data into Existing Arctype SQLite Tables
&lt;/h2&gt;

&lt;p&gt;Let's say we have already created our &lt;code&gt;game&lt;/code&gt; and &lt;code&gt;player&lt;/code&gt; tables, rather than dropping them and creating new tables using the SQL from our &lt;code&gt;dump.sql&lt;/code&gt; file, we can instead simply import the table data from our CSV files.  As you remember from above, we exported our tables into &lt;code&gt;game.csv&lt;/code&gt; and &lt;code&gt;player.csv&lt;/code&gt; respectively.  First, select the table into which you want to import CSV data, and then click the "Import CSV" button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--694mVzak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-11.03.32-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--694mVzak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-11.03.32-AM.png" alt="arctype import CSV window"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, simply review the data preview and click 'Accept' if everything looks correct:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b9P-MY_1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-11.03.53-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b9P-MY_1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-11.03.53-AM.png" alt="arctype accept CSV import window"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#viewing-and-querying-game-data-in-arctype"&gt;
  &lt;/a&gt;
  Viewing and Querying Game Data in Arctype
&lt;/h2&gt;

&lt;p&gt;Now that all of our data has been imported into Arctype, you can view it by simply selecting the table of your choosing.  Here is our &lt;code&gt;game&lt;/code&gt; table:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L7MSnuVs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-10.28.36-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L7MSnuVs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-10.28.36-AM.png" alt="arctype table view of game data"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quite similarly, this is what our &lt;code&gt;player&lt;/code&gt; table looks like:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--THTdt9lz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-10.28.50-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--THTdt9lz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-10.28.50-AM.png" alt="Player Table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now for the fun part, let's select players who have won the most games.  Simply open a new tab and select "query":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9jeRcYME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-11.11.52-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9jeRcYME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-11.11.52-AM.png" alt="arctype create a new query window"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's run this query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
  player.name,
  count(*) AS count
FROM
  player
  JOIN game ON player.id = game.winner_id
GROUP BY
  player.name
ORDER BY
  COUNT DESC;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your results should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z1S26Ev4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-11.14.14-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z1S26Ev4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-11.14.14-AM.png" alt="Results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, in terms of its querying capabilities, SQLite is as powerful as any SQL database. We can run more queries like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Which players were involved in most games that ended up in a draw?&lt;/li&gt;
&lt;li&gt;Which players lost the most?&lt;/li&gt;
&lt;li&gt;Which player got scores more than the average wins?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-tradeoffs-of-using-sqlite"&gt;
  &lt;/a&gt;
  What Are The Trade-Offs of Using SQLite?
&lt;/h2&gt;

&lt;p&gt;SQLite is often misunderstood and not properly utilized. Yes, it comes under the category of client/embedded database but is essentially trying to solve a very different problem. So, comparing SQLite with MySQL/PostgreSQL/Other RDBMS is definitely not the right way. In most environments, SQLite actually works in tandem with such client-server databases as we just saw in the examples above.&lt;/p&gt;

&lt;p&gt;In some situations, SQLite can be used without any second thoughts, while in others, a more careful analysis of the project requirements may be necessary. The SQLite webpage on &lt;a href="https://www.sqlite.org/whentouse.html"&gt;when to use SQLite&lt;/a&gt; is pretty comprehensive. Below are some of the key highlights from that page:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;SQLite only supports one writer at a time per database file&lt;/strong&gt;. So it is not suited for heavy concurrent writes. Readers can be N where N is decided by various factors such as OS, hardware, and other apps running on the system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You will first run into hardware issues before running into database size issues with SQLite as it supports &lt;strong&gt;281TB&lt;/strong&gt; of data storage.  Good luck hitting that limit!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SQLite can handle traffic very well—in fact, the website &lt;a href="https://www.sqlite.org/index.html"&gt;https://www.sqlite.org/&lt;/a&gt; itself is hosted on SQLite and it handles close to 400K to 500K hits per day. &lt;strong&gt;So unless you are on a fairly high traffic website (queries per second/qps measure), then SQLite should serve you very well.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The key thing with any software is to use the right tool for the right use case. At the end of the day, that's what Software craftsmanship/Software Engineering is all about.&lt;/p&gt;

&lt;p&gt;Closing Thoughts&lt;br&gt;
Let's pause and observe how widely SQLite is used.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mac OSX comes with SQLite by default.&lt;/li&gt;
&lt;li&gt;Python 3 comes with SQLite by default.&lt;/li&gt;
&lt;li&gt;Windows 10 uses SQLite internally—it cannot operate without it.&lt;/li&gt;
&lt;li&gt;Built into PHP and Ruby as well.&lt;/li&gt;
&lt;li&gt;There are tons of others places where it is used. The &lt;a href="https://www.sqlite.org/famous.html"&gt;well-known users page&lt;/a&gt; gives a good list.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SQLite is literally everywhere. It is very widely used and extremely well tested and almost a drop-in replacement for &lt;code&gt;fopen&lt;/code&gt; in Linux. Learning it and befriending SQLite has a lot of advantages and it is a must-have tool for every programmer. Hopefully, this article along with its examples gave a good introduction to SQLite. So go ahead and play with it and before jumping to the conclusion of using a client-server RDBMS, give SQLite a try and you will be surprised at how it simplifies the tech stack and operations around it.&lt;/p&gt;

</description>
      <category>sqlite</category>
      <category>guide</category>
      <category>coding</category>
      <category>programming</category>
    </item>
    <item>
      <title>What I learned defining the Selection Process for a Software Engineer in the startup where I work</title>
      <author>charly3pins</author>
      <pubDate>Tue, 04 May 2021 18:37:50 +0000</pubDate>
      <link>https://dev.to/charly3pins/what-i-learned-defining-the-selection-process-for-a-software-engineer-in-the-startup-where-i-work-5fl3</link>
      <guid>https://dev.to/charly3pins/what-i-learned-defining-the-selection-process-for-a-software-engineer-in-the-startup-where-i-work-5fl3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;I have been working at &lt;a href="https://arex.io"&gt;AREX Markets&lt;/a&gt; since November 2018 and since then, the company has changed a lot. When I joined it we were a team of aprox 10 people (~5 techs) and now we are close to 50. I have always liked the startup environment more than a big enterprise because of all the challenges that this entails. You have to do a lot of things and be involved in a lot of issues, as your job position or other unrelated ones, and I like that a lot. During the last weeks, or rather months, we have been interviewing a lot of people as we are growing in terms of business and we need to scale the technical team, so we started with the hiring of more software engineers.&lt;/p&gt;

&lt;p&gt;The first step was defining what kind of &lt;strong&gt;Selection Process&lt;/strong&gt; we wanted to follow. We did it all the team together and that was the first valuable thing we can extract. If you pretend to define a selection process in your company without the input from the team that will participate in it, that's bad. Everybody needs to give their input and be involved on that part as later on they will be part of it and if all goes successfully the new member will join the team, so they need to be comfortable with the decision.&lt;/p&gt;

&lt;p&gt;Having said that, you could be asking what's that process? Let me summarize it in the following lines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selection-process"&gt;
  &lt;/a&gt;
  Selection Process
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;-&lt;/em&gt; First of all the hiring manager has a &lt;strong&gt;call&lt;/strong&gt; with the candidate to explain the details of the team, tech stack, the role duties and basically knowing him/her and clarify the possible doubts he/she could have.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-&lt;/em&gt; If the call is okay, the next step is to do the &lt;strong&gt;Technical challenge&lt;/strong&gt;. For that we offer 3 options.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Technical challenge&lt;/strong&gt;. Classic challenge that you send to the candidate an exercise to solve in X days.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Technical portfolio&lt;/strong&gt;. If the candidate has a project(s) that cover the minimum requirements expected in the Tech Challenge can share them with the team instead of doing a Tech challenge. (Ex: sharing the repo in GitHub).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Live coding session&lt;/strong&gt;. Invitation to the candidate to do a coding session together in our office. (For obvious reasons during this year this option wasn't possible to do).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;-&lt;/em&gt; &lt;strong&gt;Technical review&lt;/strong&gt;. The team reviews the code from the candidate and has a call with him/her where they give the feedback from the code reviewed and ask questions and clarify doubts to the candidate more focused in the team and tech stack.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-&lt;/em&gt; &lt;strong&gt;Product interview&lt;/strong&gt;. If the Technical review is okay, the last step is to have a call with the Product team to see if the candidate apart of having the tech skills needed (validated on the previous phase), it has the mentality and attitude that the team needs.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-&lt;/em&gt; &lt;strong&gt;Final feedback&lt;/strong&gt;. After the last call the candidate receives feedback being hired or not. Depending on the case it is a call or an email. &lt;/p&gt;

&lt;p&gt;As you can see the process is not super innovative or disruptive but it is the one we all agreed and were comfortable working with. One thing that I want to highlight is regarding the Technical part. We all has been in interviews before and we wanted to do the process that we would have liked to find if we had been the interviewees. For that reason we offered the option of showing code already done instead of yes-or-yes asking for a technical challenge per se. That was a must because we all have spent a lot of hours in a tech challenge and then we end up with no feedback at all, just an email saying thanks for participating but sorry you're not the chosen one. That's the first point and the second is related to the last sentence; we agreed to do a phone call to every candidate that presented the technical part, even if we don't like it or we have doubts, the call was a must. We failed on that part because at the end with a lot of candidates on the pipeline we had to cancel I believe 2-3 calls, but for the remaining 90% we did. That was really helpful for us in order to clarify the doubts in the code review and to ask more questions and going deep in some topics with the candidates. Also to see how they react against positive/negative feedback and the kind of answers or arguments they tried to use to justify the wrong things. That was really productive in my opinion and the part that I enjoyed most in the whole process. Also, the final feedback was another mandatory thing for us so we elaborate a list with the comments although it was a declined candidate, but in order to give him/her the most valuable information possible to know why we didn't choose him/her.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-review"&gt;
  &lt;/a&gt;
  Code Review
&lt;/h2&gt;

&lt;p&gt;Focusing with the code reviews, I elaborated a list with the more common things that we found during that phase and I think it's important to share with you in order to check it if you're interviewer but also if you're gonna be interviewed and you're in the technical challenge part, check these points before you submit it:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-&lt;/em&gt; &lt;strong&gt;Poor README&lt;/strong&gt;. This was the biggest issue we've found in all across the candidates. Except a few ones, the majority provided a very short README with no indicatoins in how to run the project, or not detailed enough. Not indicate the dependencies needed (if you need to download or install something in order to run it). No explanation of the commands (if Makefile provided). No explanation regarding what's the project about (specially important with the ones that weren't solving our Tech Challenge). Lack of TODO with the pending features that weren't possible to cover but added there as an invitation to be discussed in the technical revision call.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-&lt;/em&gt; &lt;strong&gt;Failing tests&lt;/strong&gt;. Some of the challenges, luckily a few, weren't passing their own tests. Basically that means the candidate didn't execute the tests before submitting the challenge and that's a red flag for that part.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-&lt;/em&gt; &lt;strong&gt;Very few comments across the code&lt;/strong&gt;. I will be honest with you, I don't like comments in the code. For me a code that needs comments, is a code that is complex. So the code should be simple enough that is understandable without comments, otherwise you're over complicating it. Having said that, in Go the documentation is autogenerated for the exported types, functions, methods, etc... from the comments. So these comments are the ones that I accept and I personally think are necessary for understanding the context, but not the comments like "getting user" a line above the "repo.getuser()".&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-&lt;/em&gt; &lt;strong&gt;Code commented&lt;/strong&gt;. Some challenges arrived with a lot of commented code. Not the comments I was saying before for document the code. I mean code commented with &lt;code&gt;//&lt;/code&gt;  or entire blocks &lt;code&gt;/**/&lt;/code&gt;. We all know that for Technical challenges specifically, usually the time you have is reduced as you're working in a site and you wanna change, so you apply to different places. Then if you pass the initial phase you're asked to show your code. So you can end up with N tests to deliver for the same week, apart from your daily job and your "real life". But if you quickly check your code you will find it easily if you commented some code just for testing or for an initial approach and then don't need it anymore, and clean it before submitting it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-&lt;/em&gt; &lt;strong&gt;Hardcoded values&lt;/strong&gt;. Related to the previous point there were a lot of challenges with hardcoded values that caused the reviewing team to manipulate the code in order to make it run or make the tests pass. As much as possible try to use environment variables or provide a config file. And if none of that is possible at least add a section in the README with those.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h2&gt;

&lt;p&gt;Having applied all this and having iterated during these months the numbers I think are pretty good. We have all made a very big effort devoting a lot of time to the selection process either looking for candidates, being on phone calls, reviewing code or giving feedback on candidates. We have managed to grow the team by approximately 12 people in 3 months! In the future I plan to publish a new post on how we have organized the teams and how the integration of all the new teammates who have joined the team has gone.&lt;/p&gt;

&lt;p&gt;Comment your learnings and tips during your Selection processes or interviews here or contact me on my social networks for any comments, questions or suggestions so that we can all learn from each other and improve the selection processes of our sector.&lt;/p&gt;

</description>
      <category>life</category>
      <category>startup</category>
      <category>softwareengineer</category>
    </item>
  </channel>
</rss>
