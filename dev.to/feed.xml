<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Merging a pdf using Javascript</title>
      <author>Kumaran KM</author>
      <pubDate>Tue, 27 Jul 2021 10:43:40 +0000</pubDate>
      <link>https://dev.to/kumarankm4/merging-a-pdf-using-javascript-48c9</link>
      <guid>https://dev.to/kumarankm4/merging-a-pdf-using-javascript-48c9</guid>
      <description>&lt;p&gt;Have you heard about pdflib library, you didn't so here is the documentation page for you.&lt;/p&gt;

&lt;h3&gt;Pdflib package&lt;/h3&gt;

&lt;p&gt;Pdflib Package&lt;/p&gt;

&lt;p&gt;So here what I have done, First I have installed the package and Add this package to json file as usual. Then I have imported that package on code, Then I have used catch syntax to check for errors.&lt;/p&gt;

&lt;p&gt;Then we need to load the pdf that we need to merge with the help of the load method inside the asynchronous function. If you want to get pdf as a user input then you can try multer package, but for now, I don't need it. I will provide a documentation link for multer package below.&lt;/p&gt;

&lt;p&gt;Multer package&lt;/p&gt;

&lt;p&gt;Then, then with create() method, I have created a new empty document. And then I have added the first pdf file into that document with the help of copyPages() method. Once I have copied the first pdf, then I will concatenate the second pdf with the same copypage method. Then the pdf will get merged into that new document, and now it's time for naming a file. With the help of writeFileSync() I have synced the file and named it with .pdf extension. So here what the output looks like.&lt;/p&gt;

&lt;p&gt;After merging&lt;br&gt;
Alt Text&lt;/p&gt;

&lt;p&gt;Thanks for taking the time to read my blog.&lt;br&gt;
Happy coding :)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>npm</category>
    </item>
    <item>
      <title>IT platform dedicated for Hospital and Clinics management</title>
      <author>Giản Hải Nam</author>
      <pubDate>Tue, 27 Jul 2021 10:30:35 +0000</pubDate>
      <link>https://dev.to/megafoxz/it-platform-dedicated-for-hospital-and-clinics-management-2bi7</link>
      <guid>https://dev.to/megafoxz/it-platform-dedicated-for-hospital-and-clinics-management-2bi7</guid>
      <description>&lt;p&gt;✔️ Patient Admission System (PAS)&lt;br&gt;
✔️ Eletronic Medical Record (EMR)&lt;br&gt;
✔️ Human Resource Management (Admin)&lt;br&gt;
⚡ AI Analysis for Fundus and Dry Eye (Beta)&lt;br&gt;
Detail : &lt;a href="https://github.com/nichealpham/his-composer"&gt;https://github.com/nichealpham/his-composer&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>vue</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>Add Messaging, File sharing, Activity Feeds in your website easily</title>
      <author>Ayush Jain</author>
      <pubDate>Tue, 27 Jul 2021 10:29:10 +0000</pubDate>
      <link>https://dev.to/aj54/add-messaging-file-sharing-activity-feeds-in-your-website-easily-2jlf</link>
      <guid>https://dev.to/aj54/add-messaging-file-sharing-activity-feeds-in-your-website-easily-2jlf</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-weavy"&gt;
  &lt;/a&gt;
  What is Weavy?
&lt;/h1&gt;

&lt;p&gt;Weavy is an in-app collaboration API and SDK, meaning that it provides you easy way to add features like in-app messaging, in-app activity feeds, in-app file sharing and in-app tasks management. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5K2CkYAh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yuauk7p3tuvek65ikcr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5K2CkYAh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yuauk7p3tuvek65ikcr.jpg" alt="Weavy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-inapp-mean"&gt;
  &lt;/a&gt;
  What does in-app mean?
&lt;/h2&gt;

&lt;p&gt;In-app means that users will remain on your website/application and thus, you can add these features WITHOUT losing your user. Weavy has been designed with simplicity, easy usability, quick integration and complete feature set in mind. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#can-i-try-it-without-doing-anything"&gt;
  &lt;/a&gt;
  Can I try it without doing anything?
&lt;/h2&gt;

&lt;p&gt;Sure, you can play around with all the features by going to &lt;a href="https://www.weavy.com/try/app"&gt;https://www.weavy.com/try/app&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-is-my-data-secured"&gt;
  &lt;/a&gt;
  How is my data secured?
&lt;/h2&gt;

&lt;p&gt;Your data is stored inside your cloud. Weavy provides you complete SDK (Client, Server, Tenant and Mobile) and you will be hosting everything on your cloud. Thus, your data never leaves your system. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-started"&gt;
  &lt;/a&gt;
  How to get started?
&lt;/h2&gt;

&lt;p&gt;You can get started on your local machine by following &lt;a href="https://www.weavy.com/developer/getting-started/introduction-to-weavy"&gt;this&lt;/a&gt; article. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-it-free"&gt;
  &lt;/a&gt;
  Is it Free?
&lt;/h2&gt;

&lt;p&gt;Weavy provide 30 days of FREE trial to all features (no questions asked, no limits placed). After that, the sales team will help you to get onboard or provide more extension. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#need-help"&gt;
  &lt;/a&gt;
  Need Help?
&lt;/h2&gt;

&lt;p&gt;You can use &lt;a href="https://www.weavy.com/developer/contact"&gt;Get Help&lt;/a&gt; form to reach out and get assistance immediately.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>sdk</category>
      <category>collaboration</category>
    </item>
    <item>
      <title>The Next Fantastic Software Project Code Name</title>
      <author>Doug Arcuri</author>
      <pubDate>Tue, 27 Jul 2021 10:27:22 +0000</pubDate>
      <link>https://dev.to/solidi/the-next-fantastic-software-project-code-name-bbd</link>
      <guid>https://dev.to/solidi/the-next-fantastic-software-project-code-name-bbd</guid>
      <description>&lt;p&gt;Boring software and hardware are named for what they are.&lt;/p&gt;

&lt;p&gt;Buttoned up and formalized, application and library names like &lt;code&gt;The-App-Brand-Name,&lt;/code&gt; &lt;code&gt;What-I-Do-Library,&lt;/code&gt; and  &lt;code&gt;Named-Service&lt;/code&gt; are ordinary. Projects like &lt;code&gt;Go-to-Market,&lt;/code&gt; &lt;code&gt;This-Product-Release,&lt;/code&gt; &lt;code&gt;Sprint-Number,&lt;/code&gt; or &lt;code&gt;Minimum-Viable-Product&lt;/code&gt; are manufactured in an assembly line. And the hardware of &lt;code&gt;Domain-N-Series-Y,&lt;/code&gt; &lt;code&gt;Give-Me-The-Last-Digits-On-That-VM&lt;/code&gt; fades from memory faster than a trending &lt;a href="https://news.ycombinator.com/"&gt;Hacker News&lt;/a&gt; post.&lt;/p&gt;

&lt;p&gt;I first experienced naming things &lt;em&gt;differently&lt;/em&gt; while developing software in a team. The websites and apps we built did not have adored handles. But the blades on a server rack &lt;em&gt;did&lt;/em&gt; have names. They were the &lt;em&gt;pets&lt;/em&gt; hosting these projects. &lt;/p&gt;

&lt;p&gt;Each server had a name from one of the Greek/Roman gods. &lt;code&gt;Pollux,&lt;/code&gt; &lt;code&gt;Apollo,&lt;/code&gt; &lt;code&gt;Castor,&lt;/code&gt; all had a memorable name and function. &lt;code&gt;Castor&lt;/code&gt; was the webserver, &lt;code&gt;Pollux&lt;/code&gt; was the file server. The list went on down each metallic bay. And when we added a server, &lt;a href="https://datatracker.ietf.org/doc/html/rfc1178"&gt;we plotted how&lt;/a&gt; to name it well. &lt;code&gt;Hermes,&lt;/code&gt; one of our later additions, was where we dropped questionable payloads; it was a mess of libations.&lt;/p&gt;

&lt;p&gt;These names and their power are &lt;em&gt;pervasive&lt;/em&gt;, sticky in my mind forever. But naming servers this way is archaic today and challenges the typically discussed &lt;a href="http://cloudscaling.com/blog/cloud-computing/the-history-of-pets-vs-cattle/"&gt;pets/cattle metaphor&lt;/a&gt;. If I squint hard enough, the names could be construed as fungible parts.&lt;/p&gt;

&lt;p&gt;I still remember those machines, the projects they hosted, and the people that showed me how. I cannot remember any of the server clusters I managed since. And I haven't seen enough of this clever thinking. We need more of that geek passion while we horizontally scale to infinity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-examples-ive-experienced"&gt;
  &lt;/a&gt;
  Some Examples I've Experienced
&lt;/h2&gt;

&lt;p&gt;Every label that I've encountered is a function of its culture and the people around it. It's a mix of generation, nationality, motivation, shared experiences, and values. When mixing these attributes and a giddy sense of a clever play on the words, a project handle explodes to a &lt;em&gt;code name&lt;/em&gt; many can get behind.&lt;/p&gt;

&lt;p&gt;The result is a memory hook. And those who participate are now part of the &lt;em&gt;in-group&lt;/em&gt;. Calling something by a code name makes the experience inclusive and gives the group control and ownership. The name is a badge of complete honor, commitment, and &lt;em&gt;undying passion&lt;/em&gt; of it, this love, for this thing to succeed.&lt;/p&gt;

&lt;p&gt;In my experience, code names rise from various contexts. And in each context, there are an infinite number of ways to arrange, enumerate, and organize in an endearing, proud, or unbelievable way. They are named after science, animals, products, history, mythology, toys, animation/anime, famous adored leaders, music, and many others. The possibilities go on and on.&lt;/p&gt;

&lt;p&gt;Let me share some examples I've experienced, which will be very different from your experience.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nostalgia"&gt;
  &lt;/a&gt;
  Nostalgia
&lt;/h3&gt;

&lt;p&gt;When I was involved in kid media-focused software development, handles were based on cartoon nostalgia. App names were concentrated in supporting &lt;a href="https://www.imdb.com/title/tt6611256/"&gt;NickToon&lt;/a&gt; characters &lt;code&gt;Tommy,&lt;/code&gt; &lt;code&gt;Blue,&lt;/code&gt; &lt;code&gt;Otto,&lt;/code&gt; and others associated with their app function.&lt;/p&gt;

&lt;p&gt;In that project, we created a mono repo where the streaming apps and supporting libraries were located. We called it the &lt;code&gt;Aggrocrag.&lt;/code&gt; Named after the Kids show, &lt;a href="https://en.wikipedia.org/wiki/Nickelodeon_Guts"&gt;Nickelodeon Guts&lt;/a&gt;, the final challenge was contestants completed, racing up a polystyrene mountain. We got a few chuckles out of it. And then there was the common shared library that was way too all-knowing. We called it &lt;code&gt;Olmec,&lt;/code&gt; named after a &lt;a href="https://nickelodeon.fandom.com/wiki/Olmec"&gt;game co-host&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I once developed a private suite of tools individually labeled as &lt;a href="https://en.wikipedia.org/wiki/M.A.S.K._(TV_series)"&gt;M.A.S.K.&lt;/a&gt; characters. Examples included &lt;code&gt;Trekker&lt;/code&gt; and &lt;code&gt;T-Bob.&lt;/code&gt; This was essentially a self-help developer experience toolchain, no feeling more incredible than having the complete collection of those toys and at the same time having insight into developing better.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#relevant-releases"&gt;
  &lt;/a&gt;
  Relevant Releases
&lt;/h3&gt;

&lt;p&gt;Some software projects had passion names. With the projects focused on Android app development, we went through a list of Asimov and sidekick robots. &lt;code&gt;Daleks,&lt;/code&gt; &lt;code&gt;Atlas,&lt;/code&gt; &lt;code&gt;Yaris,&lt;/code&gt; and others all had a special meaning and contained changes related to the robot and its characteristics. Obviously, &lt;code&gt;Daleks&lt;/code&gt; was crafted to &lt;a href="https://youtu.be/RhEUBgu9j5Y"&gt;&lt;em&gt;exterminate&lt;/em&gt; things&lt;/a&gt;, removing unused features unabated. The developers would label each in turn on release, and it was shared ownership that blossomed.&lt;/p&gt;

&lt;p&gt;More recently, the team I managed named releases after Pokemon characters. I remember the end of years releases of &lt;code&gt;Haunter&lt;/code&gt; and &lt;code&gt;Pidgeot,&lt;/code&gt; aptly named after the American holidays. The name concept was new to these engineers. Perhaps the experience will be the motivation to name their next project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#organization-and-platforms"&gt;
  &lt;/a&gt;
  Organization and Platforms
&lt;/h3&gt;

&lt;p&gt;In one shop, two major engineering teams came together. We called the shared developing platform the &lt;code&gt;Hadron Collider.&lt;/code&gt; An amalgam of different technologies in JavaScript, from render engine to UI, attempting to stream a video experience on as many devices as possible.&lt;/p&gt;

&lt;p&gt;While the engineering organization was serious about its outcome, our team named existing &lt;em&gt;native&lt;/em&gt; apps after non-scientific instruments. Apps were named after amusement park rides, like the &lt;code&gt;Gravitron,&lt;/code&gt; each app's fate mixed into the organizational fun over time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#timeline-and-phases"&gt;
  &lt;/a&gt;
  Timeline and Phases
&lt;/h3&gt;

&lt;p&gt;At some part of my career, I joined a startup. We named our WebRTC communication app deliveries after satellites launched up to space like &lt;code&gt;Telstar,&lt;/code&gt; &lt;code&gt;Voyager,&lt;/code&gt; and &lt;code&gt;Hubble.&lt;/code&gt; Their supporting SDKs were named after &lt;a href="https://www.imdb.com/title/tt0088763/"&gt;Back to the Future&lt;/a&gt; paraphernalia. &lt;code&gt;Hoverboard,&lt;/code&gt; &lt;code&gt;Delorean,&lt;/code&gt; these abstractions powered these satellites.&lt;/p&gt;

&lt;p&gt;Even the build server code releases were named in a co-tenant fashion after famous astronauts and cosmonauts like &lt;code&gt;Tereshkova&lt;/code&gt; and &lt;code&gt;Armstrong.&lt;/code&gt; These pipelines supported our continuous releases.&lt;/p&gt;

&lt;p&gt;The MVP (a second iteration of the failed &lt;code&gt;Voyager&lt;/code&gt;) called &lt;code&gt;Voyager 2&lt;/code&gt; was released. It did okay, but somewhat its cruises in the ether, semi-distant, never quite achieving its mission.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tools-and-utilities"&gt;
  &lt;/a&gt;
  Tools and Utilities
&lt;/h3&gt;

&lt;p&gt;Tools and utilities typically have brutally crafty names. Since most of the software is focused on outcomes, the clever succinctness can be off the charts.&lt;/p&gt;

&lt;p&gt;I've built small tools that have been discarded — naming them out of love and utility. There was &lt;code&gt;Scrapi,&lt;/code&gt; a small, scrappy API scraper, &lt;code&gt;Amazement,&lt;/code&gt; an iOS game where you trace out of a maze, and &lt;code&gt;Bif-Tannen,&lt;/code&gt; a &lt;a href="https://developer.roku.com/docs/developer-program/media-playback/trick-mode/bif-file-creation.md"&gt;base index file&lt;/a&gt; QA and extractor tool for movie thumbnails.&lt;/p&gt;

&lt;p&gt;And for those that authored their libraries creatively. &lt;code&gt;Importanize,&lt;/code&gt; an &lt;a href="https://github.com/miki725/importanize"&gt;import and organize tool for Python&lt;/a&gt; was more recently memorable and helpful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#naming-things-make-memorable-story-telling"&gt;
  &lt;/a&gt;
  Naming Things Make Memorable Story Telling
&lt;/h2&gt;

&lt;p&gt;I've seen many series, magnitudes, and creative labels over the years. I've only shared where I actively contributed.&lt;/p&gt;

&lt;p&gt;Code names have a rich history. The practice came from ages ago in government and the military. And further in the dawn when inventions were developed and labeled in Edison times at Menlo Park. Engineers are creative. They are inventive, &lt;a href="https://artsy.github.io/blog/2019/05/10/why-projects-need-codenames/"&gt;even with project names&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I find code names are &lt;em&gt;sentimental&lt;/em&gt; hooks in the playful nature of the software craft. It's about the culture of the engineers, something that we enjoy doing.&lt;/p&gt;

&lt;p&gt;These aliases are a remedied prescription to the unambiguous. Engineers long for a territory to raise their flock of beautiful software and hardware. Damned the boredom of names like &lt;code&gt;This-is-an-App,&lt;/code&gt; or &lt;code&gt;Some-Service.&lt;/code&gt; Instead, let's have the &lt;code&gt;Anti-Gravity-Device&lt;/code&gt; and &lt;code&gt;Newtons-Gravitational-Laws.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The power of these labels is about telling stories, &lt;em&gt;galvanizing people&lt;/em&gt; where the hook is the code name we all discuss in the digital hallways. &lt;a href="https://iism.org/article/you-need-software-developers-to-believe-in-your-project-45"&gt;Software engineers need to believe in their projects&lt;/a&gt;. But without the naming practice, there isn't much infatuation or fun. It's not memorable. There isn't much play. &lt;em&gt;Another sprint ends in the bin, semantically tagged.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's create the next fantastic code name. I plan to.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;My mobile devices are named after moons in the Solar System. My favorite memorable phone was &lt;code&gt;Phobos,&lt;/code&gt; my Samsung Note 7. Some weeks after I bought the device, it was banned from airplane flights due to the explosive nature of the internal battery. I picked up its replacement and called it &lt;code&gt;Demios,&lt;/code&gt; a smaller version of its bigger cousin, the LG V20. Because of these names, I remembered them long after they were gone.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I write this post on my machines — &lt;code&gt;Tabulator&lt;/code&gt; and &lt;code&gt;Hippocamp.&lt;/code&gt; Thanks to the podcast Reconcilable Differences for the inspiration to get this concept across the finish line. Their episode, &lt;a href="https://www.relay.fm/rd/159"&gt;#159: The Narrow Priesthood&lt;/a&gt;, inspired me. And the book &lt;a href="https://www.andyweirauthor.com/books/project-hail-mary"&gt;Project Hail Mary&lt;/a&gt; by Andy Weir reminded me that references to project names are culturally crucial in all endeavors.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>career</category>
      <category>beginners</category>
      <category>motivation</category>
    </item>
    <item>
      <title>createState("Introducing AgileTs. A flexible State-Manager");</title>
      <author>BennoDev</author>
      <pubDate>Tue, 27 Jul 2021 09:51:29 +0000</pubDate>
      <link>https://dev.to/bennodev19/createstate-introducing-agilets-a-flexible-state-manager-91f</link>
      <guid>https://dev.to/bennodev19/createstate-introducing-agilets-a-flexible-state-manager-91f</guid>
      <description>&lt;p&gt;One of the most challenging problems to solve, especially in large frontend applications, is managing global States. While there are already several excellent approaches to solving global state management problems, most are tied to a specific workflow. You are often forced to define everything in a single source-of-truth store object, which takes away a lot of flexibility and simplicity. However, have you ever thought about managing your States as global individuals (&lt;code&gt;atoms&lt;/code&gt;) that can be structured as preferred and dynamically bound to any UI-Component for reactivity?&lt;/p&gt;

&lt;p&gt;I'm very excited to introduce you to &lt;a href="https://agile-ts.org/"&gt;AgileTs&lt;/a&gt;. &lt;strong&gt;A straightforward, flexible, well-tested State Management Library for Javascript/Typescript applications.&lt;/strong&gt; AgileTs enables the straightforward creation of individual and independent States (&lt;code&gt;createState('Hello World');&lt;/code&gt;) while providing a powerful toolset focused on developer experience around those States.&lt;/p&gt;

&lt;p&gt;The flexibility provided by managing global States as individuals makes AgileTs suitable for both, developers building smaller applications (&lt;a href="https://agile-ts.org/docs/style-guide#-inspiration-1"&gt;Style Guide&lt;/a&gt;) worrying about writing too much boilerplate code. And for teams creating large applications (&lt;a href="https://agile-ts.org/docs/style-guide#-inspiration-2"&gt;Style Guide&lt;/a&gt;) trying to create readable, maintainable, and testable code.  &lt;/p&gt;

&lt;p&gt;Before we dive into a small example, it should be noted that there is no 'perfect' way of managing global States. Each State Management approach has &lt;strong&gt;benefits&lt;/strong&gt; and &lt;strong&gt;drawbacks&lt;/strong&gt;. Depending on the kind of application you are building and your preferred code style, you should weigh which State-Management-Library is best suited for your needs. &lt;strong&gt;More on the benefits and drawbacks of AgileTs later.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;‎ &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-started-with-react-and-agilets"&gt;
  &lt;/a&gt;
  👨‍💻 Get started with React and AgileTs
&lt;/h2&gt;

&lt;p&gt;Let's see how AgileTs works with React. To demonstrate its basic capabilities, I will show you how to build a simple application using AgileTs and React. The sample project we'll look at is a small counter that lets us increase a number as we click the 'Update State' button. It may not be fascinating, but it shows all the essential pieces of a React + AgileTs application in action.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/agilets-first-state-f12cz"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  1️⃣ Installation
&lt;/h3&gt;

&lt;p&gt;Installing AgileTs is as straightforward as installing any other npm packages. First, let’s install it using either &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt;. To properly work with AgileTs in a React environment, we need to add &lt;strong&gt;two different packages&lt;/strong&gt; to our existing React application.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;😎  If you want to set up a project from scratch, you can also use the official &lt;code&gt;create-react-app&lt;/code&gt; template for AgileTs.&lt;/p&gt;


&lt;pre class="highlight typescript"&gt;&lt;code&gt;
   &lt;span class="c1"&gt;// Javascript&lt;/span&gt;
   &lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="nx"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="nx"&gt;agile&lt;/span&gt;

   &lt;span class="c1"&gt;// Typescript&lt;/span&gt;
   &lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="nx"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="nx"&gt;agile&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;typescript&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#-raw-agiletscore-endraw-"&gt;
  &lt;/a&gt;
  📁 &lt;code&gt;@agile-ts/core&lt;/code&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @agile-ts/core 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://agile-ts.org/docs/core"&gt;&lt;code&gt;core&lt;/code&gt;&lt;/a&gt; package contains the state management logic of AgileTs and therefore offers powerful classes such as the &lt;a href="https://agile-ts.org/docs/core/state"&gt;&lt;code&gt;State Class&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-agiletsreact-endraw-"&gt;
  &lt;/a&gt;
  📂 &lt;code&gt;@agile-ts/react&lt;/code&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @agile-ts/react 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://agile-ts.org/docs/react"&gt;React Integration&lt;/a&gt;, on the other hand, is an interface to React and provides useful functions like the &lt;a href="https://agile-ts.org/docs/react/hooks#useagile"&gt;&lt;code&gt;useAgile()&lt;/code&gt;&lt;/a&gt; Hook to easily bind States to React Components for reactivity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-state"&gt;
  &lt;/a&gt;
  2️⃣ Create State
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MY_FIRST_STATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After we have successfully installed AgileTs, we can start creating our first independent AgileTs State. All you need to instantiate a State is to call &lt;code&gt;createState()&lt;/code&gt; and specify an initial value.&lt;br&gt;
In our example, we have assigned the initial value 'Hello World' to the State. If you are wondering why we write AgileTs States uppercase. Well, it has a simple advantage. We can easily differentiate between global and local States in our UI-Components (See Step 3️⃣).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#bind-initialized-state-to-a-reactcomponent"&gt;
  &lt;/a&gt;
  3️⃣ Bind initialized State to a React-Component
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;RandomComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myFirstState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAgile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MY_FIRST_STATE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;myFirstState&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here (&lt;code&gt;// &amp;lt;-&lt;/code&gt;) we bind our just created State to the React Component ('RandomComponent') using the &lt;a href="https://agile-ts.org/docs/react/hooks#useagile"&gt;&lt;code&gt;useAgile()&lt;/code&gt;&lt;/a&gt; Hook. This binding ensures that the Component re-renders whenever the State &lt;code&gt;value&lt;/code&gt; mutates. The &lt;code&gt;useAgile()&lt;/code&gt; Hook returns the current &lt;code&gt;value&lt;/code&gt; of the State. So in our case, something like 'Hello World'.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#update-state-value"&gt;
  &lt;/a&gt;
  4️⃣ Update State value
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt; &lt;span class="nx"&gt;MY_FIRST_STATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello World &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;helloWorldCount&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To bring some life into our small application, we update the State &lt;code&gt;value&lt;/code&gt; with the help of the State's &lt;code&gt;.set()&lt;/code&gt; function on each 'Update State' button press. Thereby we increase the external set  &lt;code&gt;helloWorldCount&lt;/code&gt; in ascending order.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#everything-put-together"&gt;
  &lt;/a&gt;
  😎 Everything put together
&lt;/h2&gt;

&lt;p&gt;Here we see the whole counter-example in one piece.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 2️⃣ Create State with the initial value "Hello World"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MY_FIRST_STATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;helloWorldCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;RandomComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 3️⃣ Bind initialized State to the 'RandomComponent' for reactivity&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myFirstState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAgile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MY_FIRST_STATE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;myFirstState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
                &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// 4️⃣ Update State value on Button press&lt;/span&gt;
                    &lt;span class="nx"&gt;MY_FIRST_STATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello World &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;helloWorldCount&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nx"&gt;Update&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are eager to learn more about AgileTs, take a look at our &lt;a href="https://agile-ts.org/docs/quick-start/react"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;‎ &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-started-with-x-and-agilets"&gt;
  &lt;/a&gt;
  👨‍💻 Get started with [x] and AgileTs
&lt;/h2&gt;

&lt;p&gt;Unfortunately, this blog post can't cover how to use AgileTs in other frontend frameworks than React, as that would be beyond the scope. However, the core principle of AgileTs is in each UI-Framework the same. The only part that might differ is how to bind States to UI-Components for reactivity (Step 3️⃣). &lt;/p&gt;

&lt;p&gt;Here are code sandboxes for each already supported UI-Framework with the same &lt;code&gt;counter-example&lt;/code&gt; as in the React example section above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codesandbox.io/s/agilets-first-state-f12cz"&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://snack.expo.io/@bennodev/agilets-first-state"&gt;React-Native&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://codesandbox.io/s/agilets-first-state-i5xxs"&gt;Vue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;‎ &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-agilets-an-raw-atomic-endraw-state-manager"&gt;
  &lt;/a&gt;
  ⚛️ Is AgileTs an &lt;code&gt;atomic&lt;/code&gt; State Manager?
&lt;/h2&gt;

&lt;p&gt;Yes, AgileTs follows the same pattern as &lt;code&gt;atomic&lt;/code&gt; State Management Libraries like &lt;a href="https://recoiljs.org/"&gt;Recoil&lt;/a&gt;. States in AgileTs are created individually and lay above the UI-Layer, while they can be dynamically bound to any UI-Component (for example via Hooks).&lt;br&gt;
In AgileTs, States are not called atoms, but rather individual or perhaps singleton States. However, the main difference to Recoil is that AgileTs doesn't depend on React, is more feature-rich and beginner-friendly.&lt;/p&gt;

&lt;p&gt;‎ &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-makes-agilets-so-special"&gt;
  &lt;/a&gt;
  👍 What makes AgileTs so special?
&lt;/h2&gt;

&lt;p&gt;After our little excursion on how AgileTs works in React, we already understand its basic API and functionality. So let's talk about what exactly makes AgileTs so special and some benefits of using it.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#straightforward"&gt;
  &lt;/a&gt;
  🚅 Straightforward
&lt;/h3&gt;

&lt;p&gt;As you may have noticed in the React example above,&lt;br&gt;
the API of AgileTs is fairly easy to understand and self-explaining. This is no coincidence; AgileTs is designed to write minimalistic, boilerplate-free code that captures your intent.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Update State value to 'hi'&lt;/span&gt;
&lt;span class="nx"&gt;MY_STATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

&lt;span class="c1"&gt;// Undo latest State value change&lt;/span&gt;
&lt;span class="nx"&gt;MY_STATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;undo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Check if the State value is equal to '{hello: "jeff"}'&lt;/span&gt;
&lt;span class="nx"&gt;MY_STATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jeff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt; 

&lt;span class="c1"&gt;// Reset State to its intial value&lt;/span&gt;
&lt;span class="nx"&gt;MY_STATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 

&lt;span class="c1"&gt;// Preserves the State `value`  in the corresponding external Storage&lt;/span&gt;
&lt;span class="nx"&gt;MY_STATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;persist&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 

&lt;span class="c1"&gt;// Update State value in 200ms intervals&lt;/span&gt;
&lt;span class="nx"&gt;MY_STATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#%E2%80%8D-flexible"&gt;
  &lt;/a&gt;
  🤸‍ Flexible
&lt;/h3&gt;

&lt;p&gt;In AgileTs, States are created detached from each other and have an independent existence. Think of AgileTs States as global variables that can be structured as preferred and dynamically bound to any UI-Component. AgileTs States are partly like UI-Components since UI-Components are also just global variables embedded in other UI-Components.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DgaLPnOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jszrz2lsl12l3zd6dybq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DgaLPnOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jszrz2lsl12l3zd6dybq.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The given flexibility has a lot of advantages. However, the capability to initialize States everywhere might lead to an unstructured and not transparent application, which quickly ends in a mess. To help you not to end up there, we have created some &lt;a href="https://agile-ts.org/docs/style-guide"&gt;Style Guides&lt;/a&gt; to give you some inspiration on how to structure a frontend application using AgileTs.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#powerful-state-extensions"&gt;
  &lt;/a&gt;
  🐻 Powerful State extensions
&lt;/h3&gt;

&lt;p&gt;Based on the functionality of the basic AgileTs State, we have created further helpful classes, such as:&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#computed-state"&gt;
  &lt;/a&gt;
  👨‍🏫 &lt;a href="https://agile-ts.org/docs/core/computed"&gt;Computed State&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Computed States are a powerful concept that lets us build dynamic data depending on other data. To avoid unnecessary recomputations, the Computed Class caches the computed value and recomputes it only when an actual dependency has changed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;INTRODUCTION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createComputed&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello I am '&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;MY_NAME&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vale&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;'.`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A Computed magically tracks used dependencies (such as States) and automatically recomputes when one of its dependencies updates. In the above code snippet, it would, for example, recompute when the current value of &lt;code&gt;MY_NAME&lt;/code&gt; changes from 'jeff' to 'hans'.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;INTRODUCTION&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Returns "Hello I am 'jeff'."&lt;/span&gt;
&lt;span class="nx"&gt;MY_NAME&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hans&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;INTRODUCTION&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Returns "Hello I am 'hans'."&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/agilets-first-computed-kisgr"&gt;Sandbox&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#collection-state"&gt;
  &lt;/a&gt;
  👨‍👩‍👧 &lt;a href="https://agile-ts.org/docs/core/collection/"&gt;Collection State&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Collection States come in handy when managing a set of information, such as a list of todos or users. A Collection is specially designed for arrays of &lt;code&gt;data objects&lt;/code&gt; following the same pattern. Each of these data objects requires a unique &lt;code&gt;item key&lt;/code&gt; to be correctly identified later. Think of a Collection like a database table that stores a data object once keyed by an id (&lt;code&gt;item key&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;JOKES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createCollection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we've created a Collection that stores a list of Jokes. However, a joke list without jokes isn't funny.&lt;br&gt;
So let's add a funny joke to our newly created Joke Collection.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;JOKES&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="na"&gt;joke&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Why do Java programmers have to wear glasses?&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt; 
         Because they don't C#&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;programming&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The joke we've just added belongs to the category 'Programming'. Therefore we categorize it to the &lt;code&gt;programming&lt;/code&gt; Group. Groups allow us to easily cluster together data from a Collection as an array of item keys.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;JOKES&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getGroup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chucknorris&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Returns Chuck Norris Jokes&lt;/span&gt;
&lt;span class="nx"&gt;JOKES&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getGroup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;programming&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Returns Programming Jokes&lt;/span&gt;
&lt;span class="nx"&gt;JOKES&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDefaultGroup&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Returns All Jokes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/agilets-first-collection-uyi9g"&gt;Sandbox&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enhance-performance"&gt;
  &lt;/a&gt;
  🚀 Enhance Performance
&lt;/h3&gt;

&lt;p&gt;AgileTs assures performance optimization by batching re-render jobs and only re-rendering the UI-Components when an actual bound State mutates. You can go even further by only binding particular properties of a State value to the UI-Component or using the inbuilt &lt;a href="https://agile-ts.org/docs/react/hooks#useproxy"&gt;proxy functionality&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Component re-renders only when 'user.name' mutates&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MY_USER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Returns 'jeff'&lt;/span&gt;

&lt;span class="c1"&gt;// Component re-renders only when 'user.age' mutates&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useProxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MY_USER&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Returns '8'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#easy-debugging"&gt;
  &lt;/a&gt;
  🐞 Easy debugging
&lt;/h3&gt;

&lt;p&gt;AgileTs has no advanced &lt;code&gt;dev tools&lt;/code&gt; yet.&lt;br&gt;
However, you can bind your States to the &lt;code&gt;globalThis&lt;/code&gt;&lt;br&gt;
and easily access them in the browser console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MY_STATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jeff&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MY_COLLECTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createCollection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;globalBind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;__core__&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;MY_STATE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;MY_COLLECTION&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This allows you to preview and edit your global bound States at runtime. For example, the &lt;code&gt;core&lt;/code&gt; of the &lt;a href="https://agile-ts.org/"&gt;AgileTs documentation&lt;/a&gt; is globally bound for better debugging. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9z6A0YL_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j71x7d38045ap6qsdznf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9z6A0YL_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j71x7d38045ap6qsdznf.png" alt="image"&gt;&lt;/a&gt; Note that you should avoid attaching your application States to the &lt;code&gt;globalThis&lt;/code&gt; in &lt;strong&gt;production&lt;/strong&gt; because then third parties can easily interfere in your internal application logic. Since the AgileTs documentation has no vulnerable logic under the hood, the &lt;code&gt;core&lt;/code&gt; is also accessible in production. Thus you can play around with the AgileTs documentation &lt;code&gt;core&lt;/code&gt; and, for example, update the &lt;code&gt;NPM_DOWNLOADS&lt;/code&gt; State or update the astronaut color.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;__core__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NPM_DOWNLOADS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;999999&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‎ &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages-of-using-agilets"&gt;
  &lt;/a&gt;
  👎 Disadvantages of using AgileTs?
&lt;/h2&gt;

&lt;p&gt;Like any other great global State Manager, also AgileTs comes with some drawbacks that we should talk about. We are working hard to reduce and get rid of these. If you have any further concerns about using AgileTs, let me know in the comments. Then I can list them here and maybe even counteract them 😁. Thanks for your support.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ffXNM3fY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cil44rnwm8g1pnkew2ma.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ffXNM3fY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cil44rnwm8g1pnkew2ma.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#big-bundle-size"&gt;
  &lt;/a&gt;
  🐘 Big bundle size
&lt;/h3&gt;

&lt;p&gt;Most State-Manager are pretty lightweight, but not this one. AgileTs has a minified size of &lt;a href="https://bundlephobia.com/result?p=@agile-ts/core"&gt;58.3kB&lt;/a&gt; and is pretty heavy compared to its fellows. However, it offers a 100% type safety, a predictable runtime, an API focusing on developer experience, and much more in return. The large bundle size doesn't mean that AgileTs slows down your application noticeable. Convince yourself with the below listed AgileTs stress tests:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://codesandbox.io/s/agilets-large-state-pyo63"&gt;Large State (React)&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://codesandbox.io/s/agilets-frequent-updates-5tprm"&gt;Frequent Updates (React)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have also created some &lt;a href="https://github.com/agile-ts/agile/tree/master/benchmark"&gt;benchmarks&lt;/a&gt; that compare different State Management approaches in terms of performance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-large-community"&gt;
  &lt;/a&gt;
  🌍 No large community
&lt;/h3&gt;

&lt;p&gt;AgileTs hasn't been official released until now (July 2021)&lt;br&gt;
and I've not managed to build a community around the library yet. This was mainly because I thought AgileTs was not yet good enough to be shown to anyone. But well, among many other things I've learned while developing AgileTs, I've also learned that it's never too early to ask for feedback. 😅&lt;/p&gt;

&lt;p&gt;If you want to become a part of the AgileTs community, don't hesitate to join our &lt;a href="https://discord.gg/T9GzreAwPH"&gt;Community Discord&lt;/a&gt;. There you can ask anything related to AgileTs or programming in general and tell us what you think about AgileTs or what we can do better.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#only-one-contributormaintainer"&gt;
  &lt;/a&gt;
  🌲 Only one contributor/maintainer
&lt;/h3&gt;

&lt;p&gt;It may be strange, but if I (the only contributor) get hit by a tree or something and die, AgileTs will no longer have a maintainer. I've tried to create a as contributor-friendly codebase as possible. But still, it doesn't matter how many people are able to understand the code and fix the issues that might occur if no one can merge/release those changes.&lt;/p&gt;

&lt;p&gt;‎ &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  ❓ Conclusion
&lt;/h2&gt;

&lt;p&gt;In conclusion, AgileTs provides a simple yet powerful API that focuses on developer experience and meets the need for small and large applications by being scalable without writing any boilerplate code. Therefore, AgileTs looks to be an excellent candidate to consider for State Management. Although it is not lightweight, it tries to optimize the performance of our applications wherever it can by batching re-renders and offering proxy-based functionalities like the &lt;a href="https://agile-ts.org/docs/react/hooks#useproxy"&gt;useProxy()&lt;/a&gt; hook.&lt;/p&gt;

&lt;p&gt;At last, thanks for taking the time to read this article. I would appreciate hearing what you think about AgileTs in the comments.  In case you have any further questions, don't hesitate to join our &lt;a href="https://discord.gg/T9GzreAwPH"&gt;Community Discord&lt;/a&gt; or ask on our &lt;a href="https://www.reddit.com/r/AgileTs/"&gt;subreddit&lt;/a&gt;. We are eager to help. And if you like the concept of AgileTs or/and want to support us, give us a ⭐️ (star) on &lt;a href="https://github.com/agile-ts/agile"&gt;Github&lt;/a&gt; and share it with your friends. Thanks for your support 😊&lt;/p&gt;

&lt;p&gt;Cheers 🎉&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;Github: &lt;a href="https://github.com/agile-ts/agile"&gt;https://github.com/agile-ts/agile&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Website: &lt;a href="https://agile-ts.org/"&gt;https://agile-ts.org/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Discord: &lt;a href="https://discord.gg/T9GzreAwPH"&gt;https://discord.gg/T9GzreAwPH&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Twitter: &lt;a href="https://twitter.com/AgileTypescript"&gt;https://twitter.com/AgileTypescript&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Reddit: &lt;a href="https://www.reddit.com/r/AgileTs/"&gt;https://www.reddit.com/r/AgileTs/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Positioning elements with Grid</title>
      <author>Alba Silvente 💃🏼</author>
      <pubDate>Tue, 27 Jul 2021 09:37:25 +0000</pubDate>
      <link>https://dev.to/dawntraoz/positioning-elements-with-grid-588f</link>
      <guid>https://dev.to/dawntraoz/positioning-elements-with-grid-588f</guid>
      <description>&lt;p&gt;In this post, I will show you the Grid basics and how I use it to place the content in common situations.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--nFJfSxs2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1350915878527889408/601cRU5J_normal.jpg" alt="Alba Silvente 🟣 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Alba Silvente 🟣
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/dawntraoz"&gt;@dawntraoz&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Yesterday I finally finished the grid article for which I was creating the artworks.&lt;br&gt;&lt;br&gt;I try to list the properties I use the most, some resources that were useful to me, and some use cases of the websites I've been working on.&lt;br&gt;&lt;br&gt;I hope you find it useful 💜&lt;br&gt;&lt;a href="https://t.co/zSP9E0USah"&gt;dawntraoz.com/blog/positioni…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      09:34 AM - 27 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1419954287355043842" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1419954287355043842" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1419954287355043842" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#what-is-grid"&gt;
  &lt;/a&gt;
  What is Grid?
&lt;/h2&gt;

&lt;p&gt;Grid (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout"&gt;CSS Grid Layout&lt;/a&gt;) is defined as a tool to divide a page into main regions or to define the relationship in terms of size, position and layer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Grid layout is compatible with the vast majority of browsers, some like Opera Mini and IE do not support it, in &lt;a href="https://caniuse.com/?search=grid"&gt;Can I use&lt;/a&gt; you can see what properties are supported by which browsers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is also known as the two-dimension layout system that provide us with the best alternative to the tables we used in the past, and has taken our user interfaces to the next level.&lt;/p&gt;

&lt;p&gt;The grid layout allows us to align the elements in columns and rows, space the elements from the container element, position the child elements by overlapping them or forming layers, among other features.&lt;/p&gt;

&lt;p&gt;This facilitates the creation of dynamic and responsive layouts, as we will see throughout the article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-learn-more"&gt;
  &lt;/a&gt;
  Where to learn more?
&lt;/h2&gt;

&lt;p&gt;Although in this article we will see the initial concepts and a couple of use cases, tips and tricks, I recommend that if you are interested in knowing the ins and outs of Grid, you should take a look at these resources.&lt;/p&gt;

&lt;p&gt;In these courses and articles they explain Grid, show you different use cases and the little details they have learned from experience.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.smashingmagazine.com/2020/01/understanding-css-grid-container/"&gt;Understanding CSS Grid&lt;/a&gt; Series by Rachel Andrew at Smashing Magazine.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cssgrid.io/"&gt;Learn CSS Grid&lt;/a&gt; course by Wes Bos (free).&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://css-tricks.com/snippets/css/complete-guide-grid/"&gt;A Complete Guide to Grid&lt;/a&gt; by Chris House at CSS-Tricks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#grid-properties"&gt;
  &lt;/a&gt;
  Grid properties
&lt;/h2&gt;

&lt;p&gt;Now that you know the Grid concept, we are going to see the &lt;strong&gt;properties&lt;/strong&gt; we need to shape our layout, distinguishing between the properties of the &lt;em&gt;parent&lt;/em&gt; or &lt;em&gt;child&lt;/em&gt; element.&lt;/p&gt;

&lt;p&gt;Being the &lt;strong&gt;&lt;em&gt;parent&lt;/em&gt;&lt;/strong&gt; element, the one that contains one or more &lt;strong&gt;&lt;em&gt;child&lt;/em&gt;&lt;/strong&gt; elements that will be sized, aligned, layered and redistributed by the available space. Let's see an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"parent grid"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"child grid-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"child grid-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"child grid-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The parent will be in charge of defining the grid and the children will be in charge of positioning or aligning themselves in specific places, if necessary.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Parent&lt;/strong&gt; (grid &lt;em&gt;container&lt;/em&gt;) properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;display&lt;/strong&gt; - specifies the type of rendering box of an element. With the value &lt;em&gt;grid&lt;/em&gt;, every direct child will be in a grid context.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;display&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;grid&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;grid-template&lt;/strong&gt; - a shorthand property for defining grid columns, rows, and areas at once.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;grid-template&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;none&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;grid-template-rows&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nt"&gt;grid-template-columns&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;grid-template-areas&lt;/span&gt; &lt;span class="nt"&gt;grid-template-rows&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nt"&gt;grid-template-columns&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But let's take a look at each property individually to see how to define them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;grid-template-rows&lt;/strong&gt; - specifies the line names (optional) and track size of the grid rows (horizontal tracks).
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;grid-template-rows&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;none&lt;/span&gt;&lt;span class="o"&gt;|[&lt;/span&gt;&lt;span class="nt"&gt;line-name&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="nt"&gt;track-size&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;line-name-2&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SSC7T35z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iscul9zxx6dufihyqe4d.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SSC7T35z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iscul9zxx6dufihyqe4d.jpeg" alt="Defining grid row tracks size and line names"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;grid-template-columns&lt;/strong&gt; - specifies the line names (optional) and track size of the grid columns (vertical tracks).
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;grid-template-columns&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;none&lt;/span&gt;&lt;span class="o"&gt;|[&lt;/span&gt;&lt;span class="nt"&gt;line-name&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="nt"&gt;track-size&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;line-name-2&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;A &lt;strong&gt;grid track&lt;/strong&gt; is the space between any two lines on the grid. As we can see in the image below, between linename and linename2 we have defined a column track of 1fr in size.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a8xNaH3T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vn36vwk141v19snje1w3.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a8xNaH3T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vn36vwk141v19snje1w3.jpeg" alt="Defining grid column tracks size and line names"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To give value to the size of each row/column track, we must specify the values separating them by spaces and using different units:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;By common units&lt;/strong&gt;: length (px, rem, ...), percentage (%) and fr.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;strong&gt;fr&lt;/strong&gt; unit represents a fraction of the available space in the grid container.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;By grid items content&lt;/strong&gt;: &lt;em&gt;min-content,&lt;/em&gt; minimum size of the content, &lt;em&gt;max-content&lt;/em&gt;, maximum size of the content and &lt;em&gt;auto&lt;/em&gt;, similar to minmax(min-content, max-content).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;By functions&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;minmax(min-size, max-size)&lt;/em&gt; - It defines a size range, greater than or equal to &lt;em&gt;min&lt;/em&gt;, and less than or equal to &lt;em&gt;max&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;repeat(n-columns, track-size)&lt;/em&gt; - It allows defining numerous columns that exhibit a recurring pattern in a more compact form.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;fit-content(track-size)&lt;/em&gt; - It uses the space available, but not less than the &lt;em&gt;min-content&lt;/em&gt; and not more than the &lt;em&gt;max-content&lt;/em&gt; of the children.
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Common units */&lt;/span&gt;
&lt;span class="nt"&gt;grid-template-columns&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;linename&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;fr&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;linename2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="nt"&gt;fr&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;linename3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;fr&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;linename4&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
&lt;span class="nt"&gt;grid-template-rows&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;linename&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;fr&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;linename2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;fr&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;linename3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="nt"&gt;auto&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;linename4&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

&lt;span class="c"&gt;/* Grid items content */&lt;/span&gt;
&lt;span class="nt"&gt;grid-template-columns&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;fr&lt;/span&gt; &lt;span class="nt"&gt;max-content&lt;/span&gt; &lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="nt"&gt;fr&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;grid-template-rows&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;fr&lt;/span&gt; &lt;span class="nt"&gt;min-content&lt;/span&gt; &lt;span class="nt"&gt;max-content&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c"&gt;/* Functions (&amp;amp; combined) */&lt;/span&gt;
&lt;span class="nt"&gt;grid-template-columns&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;repeat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;minmax&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;fr&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="nt"&gt;grid-template-rows&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;minmax&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;60&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;fr&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;fit-content&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;75&lt;/span&gt;&lt;span class="o"&gt;%);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;grid-template-areas&lt;/strong&gt; - specifies named grid areas by setting the grid cells and assigning names to them.&lt;/p&gt;

&lt;p&gt;No grid item is associated to these areas, but any child element can reference any area with the grid placement properties (grid-row/grid-column, grid-area), which we will see below.&lt;br&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;grid-template-areas&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;none&lt;/span&gt;&lt;span class="o"&gt;|.|&lt;/span&gt;&lt;span class="nt"&gt;area-strings&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The best way to understand this property is to exemplify it, and you will see it clearly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;grid-template-columns&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;300&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="nt"&gt;repeat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;fr&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="nt"&gt;grid-template-rows&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;minmax&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;60&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;fr&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="err"&gt;4&lt;/span&gt;&lt;span class="nt"&gt;fr&lt;/span&gt; &lt;span class="nt"&gt;minmax&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;60&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;fr&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="nt"&gt;grid-template-areas&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="s1"&gt;"sidebar header  header  header"&lt;/span&gt;
                &lt;span class="s1"&gt;"sidebar content content content"&lt;/span&gt;
                    &lt;span class="s1"&gt;"sidebar footer  footer  footer"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The defined &lt;strong&gt;strings&lt;/strong&gt; in grid-template-areas are the &lt;strong&gt;row tracks,&lt;/strong&gt; and the times that a name is repeated is the &lt;strong&gt;columns&lt;/strong&gt; that occupies that area in that row. As you can see in the image below, the header occupies 3 columns and 1 row:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8zJr5cai--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrn008y4rehjbldolqzp.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8zJr5cai--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrn008y4rehjbldolqzp.jpeg" alt="Defined grid areas in a grid container"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;grid-auto-columns&lt;/strong&gt; - specifies the &lt;strong&gt;size&lt;/strong&gt; of an &lt;strong&gt;implicitly&lt;/strong&gt; created (auto-created) grid &lt;strong&gt;column track&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;By definition, if we haven't explicitly defined in grid-template-columns the size of a column track where a grid item has been positioned, implicit grid tracks are created to contain it.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;grid-auto-columns&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;implicit-tracks-size&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The size unit can be any of the ones we have used for grid-template-columns and grid-template-rows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;grid-template-columns&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;300&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="nt"&gt;grid-auto-columns&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;fr&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MWEpm96W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r2e5x2vh8rb6wrebyao9.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MWEpm96W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r2e5x2vh8rb6wrebyao9.jpeg" alt="Defined grid auto columns size"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;grid-auto-rows&lt;/strong&gt; - specifies the &lt;strong&gt;size&lt;/strong&gt; of an &lt;strong&gt;implicitly-created&lt;/strong&gt; grid &lt;strong&gt;row track&lt;/strong&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;grid-auto-rows&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;implicit-tracks-size&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As &lt;em&gt;grid-auto-columns&lt;/em&gt;, we will use any size unit for the implicit row tracks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;grid-auto-rows&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;6&lt;/span&gt;&lt;span class="nt"&gt;rem&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;grid-auto-flow&lt;/strong&gt; - controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid (&lt;em&gt;we can think of it as the flex-direction of grid&lt;/em&gt;).
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;grid-auto-flow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;row&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;column&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;dense&lt;/span&gt;&lt;span class="o"&gt;|[&lt;/span&gt;&lt;span class="nt"&gt;row&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;column&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="nt"&gt;dense&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While &lt;strong&gt;row&lt;/strong&gt; and &lt;strong&gt;column&lt;/strong&gt;, we can guess where the children of the grid will be placed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;row&lt;/em&gt;&lt;/strong&gt; placing the items in the &lt;strong&gt;available horizontal track&lt;/strong&gt;, if the current row becomes full then a new row will be started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dtta-iY0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oinnk1stuyoq2ji255kk.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dtta-iY0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oinnk1stuyoq2ji255kk.jpeg" alt="Result of setting row as a grid-auto-flow value"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;column&lt;/em&gt;&lt;/strong&gt; in the &lt;strong&gt;available vertical track&lt;/strong&gt;, once the items have filled all the rows in that particular column, then a new one will be created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RDFNXEKS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/80i7xtx3xey8eshha4pt.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RDFNXEKS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/80i7xtx3xey8eshha4pt.jpeg" alt="Result of setting column as a grid-auto-flow value"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instead, &lt;strong&gt;dense&lt;/strong&gt; tries to &lt;strong&gt;fill in the gaps&lt;/strong&gt; earlier in the grid. In the image below, you can see how the third element (blue) is placed in the space left between the first and second element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FqUi-VW_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfd0swfs9irpt306hupv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FqUi-VW_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfd0swfs9irpt306hupv.jpeg" alt="Result of setting dense as a grid-auto-flow value"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;WARNING - &lt;strong&gt;grid-auto-flow: dense;&lt;/strong&gt; can cause items to appear visually out of order, causing accessibility problems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;gap&lt;/strong&gt; - sets the gaps (gutters) between rows and columns. It is a shorthand for row-gap and column-gap.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;gap&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;row-col-gap&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;row-gap&lt;/span&gt; &lt;span class="nt"&gt;column-gap&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;(row-col-gap) As in &lt;em&gt;padding,&lt;/em&gt; if we specify a single value it will be set for both row and column.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;row-gap&lt;/strong&gt; - sets the size of the gap in y-axis, between row tracks.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;row-gap&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;20&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;column-gap&lt;/strong&gt; - sets the size of the gap in x-axis, between column tracks.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;column-gap&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Child&lt;/strong&gt; (grid &lt;em&gt;item&lt;/em&gt;) properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;grid-row&lt;/strong&gt; - specifies where a child is placed within the grid row tracks and how much it occupies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It can be a &lt;strong&gt;line&lt;/strong&gt; (placed in 1 row), a &lt;strong&gt;span&lt;/strong&gt; (placed in more than 1 row), or &lt;strong&gt;auto&lt;/strong&gt; (original placement), thereby specifying the inline-start and inline-end edge of the grid area it occupies.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;grid-row&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;grid-line&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;grid-row-start&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nt"&gt;grid-row-end&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see what possibilities we have to define the start or end of the child item with the *-start and *-end properties.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;grid-row-start&lt;/strong&gt; - specifies a grid item’s start position within the grid row.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;grid-row-start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;number&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="o"&gt;]|&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;number&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="o"&gt;]|&lt;/span&gt;&lt;span class="nt"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;line&lt;/strong&gt;: &lt;em&gt;number&lt;/em&gt; to refer to a numbered grid line, or &lt;em&gt;name&lt;/em&gt; to refer to a named grid line.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;span [number|name]&lt;/strong&gt;: the child item will occupy the number of grid rows provided, or until it reaches the line with the specified name.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;auto&lt;/strong&gt;: automatic placement on the original position, with a span of 1.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;grid-row-start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* The item occupies 2 rows */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;grid-row-end&lt;/strong&gt;: specifies a grid item’s end position within the grid row. The values that can be specified are the same as for grid-row-start.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;grid-row-end&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;number&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;number&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="o"&gt;]|&lt;/span&gt;&lt;span class="nt"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Combining both would look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;grid-row&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="err"&gt;2&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Fit 2 rows and end in the numbered line 5 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tPIrXO4S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8cmze74pm3h8rpexo5fd.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tPIrXO4S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8cmze74pm3h8rpexo5fd.jpeg" alt="Result of setting grid-row as span 2 / 5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;grid-column&lt;/strong&gt; - specifies where a child is placed within the grid column tracks and how much it occupies. Same as &lt;em&gt;grid-row&lt;/em&gt; but this time with the vertical tracks.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;grid-column&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;grid-line&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;grid-column-start&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nt"&gt;grid-column-end&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A shorthand for the CSS properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;grid-column-start&lt;/strong&gt; - specifies a grid item’s start position within the grid column by specifying a line, a span, or auto.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;grid-column-start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;number&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="o"&gt;]|&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;number&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="o"&gt;]|&lt;/span&gt;&lt;span class="nt"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;grid-column-end&lt;/strong&gt; - specifies a grid item’s end position within the grid column, also by specifying a line, a span, or auto.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;grid-column-end&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;number&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="o"&gt;]|&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;number&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="o"&gt;]|&lt;/span&gt;&lt;span class="nt"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;grid-area&lt;/strong&gt; - specifies where a child is placed within the grid and its size.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Its value can be expressed as a shorthand of grid-row-start / grid-row-end / grid-column-start / grid-column-end or with the name of the area created in grid-template-areas.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;grid-area&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;named-area&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;grid-row-start&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nt"&gt;grid-row-end&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nt"&gt;grid-column-start&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nt"&gt;grid-column-end&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see a simple example for each case:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="c"&gt;/* Given grid-template-areas: "content content sidebar"; */&lt;/span&gt;
  &lt;span class="nt"&gt;grid-area&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;content&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;/* Specifying line numbers:
  grid-row-start: 1
  grid-column-start: 1
  grid-row-end: auto
  grid-column-end: 3
  */&lt;/span&gt;
  &lt;span class="nt"&gt;grid-area&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nt"&gt;auto&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="err"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* OR grid-area: 1 / span 2; */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And these would be the properties that will help us to define the structure of our grid and position its elements individually. Now let's see how to align the elements in the same way, globally or from themselves.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alignment-properties"&gt;
  &lt;/a&gt;
  Alignment properties
&lt;/h2&gt;

&lt;p&gt;Whenever we want to align our layout elements, which are located in cells, we will have to use different properties from the parent but sometimes also from the children, depending on their behavior.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A &lt;strong&gt;grid cell&lt;/strong&gt; is the smallest unit on a grid. Once a grid is defined as a parent, the child items will lay themselves out in one cell each of the defined grid.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZYqKBoQ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7xef9bnhf415xmt1trf5.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZYqKBoQ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7xef9bnhf415xmt1trf5.jpeg" alt="What is a grid cell visually explained"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's see the possibilities we have to align our content by the container or child item.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parent&lt;/strong&gt; (grid &lt;em&gt;container&lt;/em&gt;) properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;place-items&lt;/strong&gt; - allows you to align child items along the block (y-axis/column) and inline (x-axis/row) directions at once. A shorthand for align-items and justify-items.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;place-items&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;align-items&lt;/span&gt; &lt;span class="nt"&gt;justify-items&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To see the values that can be defined, let's take a look at each one of the properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;align-items&lt;/strong&gt; - specifies the alignment of grid items on the block direction (y-axis). It sets the &lt;em&gt;align-self&lt;/em&gt; value on all child items as a group (we will see this property in the child properties section).
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;align-items&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;normal&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;center&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;start&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;end&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;stretch&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;center&lt;/strong&gt; causes the elements to be aligned to the center of themselves (grid item cell).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;start&lt;/strong&gt; &amp;amp; &lt;strong&gt;end&lt;/strong&gt; causes the elements to be aligned at the beginning of themselves (cell top) or end (cell bottom).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;stretch&lt;/strong&gt; causes the grid items to have the same height as their cell, filling the whole space vertically. The value by default (&lt;em&gt;normal&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xOd-riHH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3tdv1d15yhq2opcos3pw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xOd-riHH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3tdv1d15yhq2opcos3pw.jpeg" alt="Align items values visual examples"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;justify-items&lt;/strong&gt; - specifies the alignment of grid items on the inline direction (x-axis). It sets the &lt;em&gt;justify-self&lt;/em&gt; value on all child items as a group.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;justify-items&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;normal&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;center&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;start&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;end&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;stretch&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;center&lt;/strong&gt; causes the elements to be aligned to the center of themselves horizontally.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;start&lt;/strong&gt; &amp;amp; &lt;strong&gt;end&lt;/strong&gt; causes the elements to be aligned at the beginning or the end of themselves in the x-axis.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;stretch&lt;/strong&gt; causes the grid items to have the same height as their cell, filling the whole space horizontally. The value by default (&lt;em&gt;normal&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hxpZ1J7L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/91w1mm5wlb272xuzlofu.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hxpZ1J7L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/91w1mm5wlb272xuzlofu.jpeg" alt="Justify items values visual examples"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;place-content&lt;/strong&gt; - allows you to align the content along the block (y-axis/column) and inline (x-axis/row) directions at once. A shorthand for align-content and justify-content.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;place-content&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;align-content&lt;/span&gt; &lt;span class="nt"&gt;justify-content&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's take a closer look at the possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;align-content&lt;/strong&gt; - specifies the distribution of space between and around content items in the block direction (y-axis).
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;align-content&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;normal&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;center&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;start&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;end&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;space-around&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;space-between&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;space-evenly&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;stretch&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;center&lt;/strong&gt; causes the elements to be aligned at the center of the grid with respect to the y-axis.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;start&lt;/strong&gt; &amp;amp; &lt;strong&gt;end&lt;/strong&gt; causes the elements to be aligned at the beginning (top) or end (bottom) of the grid with respect to the y-axis.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;space-between&lt;/strong&gt; causes the grid items to be distributed evenly, being the first item at the start of the grid, and the last at the end.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;space-around&lt;/strong&gt; causes the grid items to be distributed evenly, having half-size space on top/bottom.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;space-evenly&lt;/strong&gt; causes the grid items to be distributed evenly, having equal space around them.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;stretch&lt;/strong&gt; causes the grid auto-sized items to have their size increased equally so that the combined size exactly fills the alignment container.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3_Y5JL5o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxijfqjd4neusddrqc5m.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3_Y5JL5o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxijfqjd4neusddrqc5m.jpeg" alt="Align content values visual examples"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;justify-content&lt;/strong&gt; - specifies the distribution of space between and around content items in the inline direction (x-axis).
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;justify-content&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;normal&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;center&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;start&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;end&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;space-around&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;space-between&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;space-evenly&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;stretch&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;center&lt;/strong&gt; causes the elements to be aligned at the center of the grid with respect to the x-axis.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;start&lt;/strong&gt; &amp;amp; &lt;strong&gt;end&lt;/strong&gt; causes the elements to be aligned at the beginning (left) or end (right) of the grid with respect to the x-axis.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;space-between&lt;/strong&gt; causes the grid items to be distributed evenly, being the first item at the left of the grid, and the last at the right.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;space-around&lt;/strong&gt; causes the grid items to be distributed evenly, having half-size space on left/right.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;space-evenly&lt;/strong&gt; causes the grid items to be distributed evenly, having equal space around them.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;stretch&lt;/strong&gt; causes the grid auto-sized items to have their size increased equally so that the combined size exactly fills the alignment container.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sBKK6OrG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwt0amzr83mpqekak2sx.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sBKK6OrG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwt0amzr83mpqekak2sx.jpeg" alt="Justify content values visual examples"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Child&lt;/strong&gt; (grid &lt;em&gt;item&lt;/em&gt;) properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;place-self&lt;/strong&gt; - allows you to align an individual child item along the block (y-axis/column) and inline (x-axis/row) directions at once. A shorthand for align-self and justify-self.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;place-self&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;align-self&lt;/span&gt; &lt;span class="nt"&gt;justify-self&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;align-self&lt;/strong&gt; - overrides the align-items value and aligns the item inside the grid area or cell along the block direction (y-axis).
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;align-self&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;center&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;start&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;end&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;stretch&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;center&lt;/strong&gt; aligns the content to the center of the grid cell in the y-axis.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;start &amp;amp; end&lt;/strong&gt; aligns the content to the start/end of the grid cell in the y-axis.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;stretch&lt;/strong&gt; fills the grid cell in the y-axis (normal value).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rM50YDh9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ykwnkqt3mh5xug2f9dxo.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rM50YDh9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ykwnkqt3mh5xug2f9dxo.jpeg" alt="Align self values visual examples"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;justify-self&lt;/strong&gt; - overrides the justify-items value and aligns the item inside the grid area or cell along the inline direction (x-axis).
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;justify-self&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;center&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;start&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;end&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;stretch&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;center&lt;/strong&gt; aligns the content to the center of the grid cell in the x-axis.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;start &amp;amp; end&lt;/strong&gt; aligns the content to the start/end of the grid cell in the x-axis.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;stretch&lt;/strong&gt; fills the grid cell in the x-axis (normal value).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FrH5C64_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j80vfu8azqtmvhvjl1ot.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FrH5C64_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j80vfu8azqtmvhvjl1ot.jpeg" alt="Justify self values visual examples"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;BONUS&lt;/strong&gt; - &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Masonry_Layout"&gt;Masonry Layout&lt;/a&gt; is an experimental feature, a layout method where 1 axis uses common values (usually columns), and the other the masonry value. In the axis of the masonry (usually the row), instead of leaving gaps after the small elements, the elements of the next row move up to fill the gaps. (AWESOME, isn't it?)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#real-use-cases"&gt;
  &lt;/a&gt;
  Real use cases
&lt;/h2&gt;

&lt;p&gt;Now, I am going to show you how I usually solve, with CSS Grid layout, different situations that I found in website I've developed:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#situation-1-grid-sidebar-layout"&gt;
  &lt;/a&gt;
  Situation 1 - Grid sidebar layout
&lt;/h3&gt;

&lt;p&gt;Imagine you are developing a layout that includes a sidebar on the left, which follows you as you scroll, and the rest of the website, header, content and footer, on the right.&lt;/p&gt;

&lt;p&gt;Here I show you an example of what I mean and how it could be distributed:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LHlWiStm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uan6kzvpa17xikvuyhbk.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LHlWiStm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uan6kzvpa17xikvuyhbk.jpeg" alt="Situation 1 - Schema on how the grid should look"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To do this, we will first define the grid container and the cells or areas we will need to place our elements, and then the position of the child items in the grid:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid grid-cols-[300px,minmax(0,1fr)] grid-rows-[60px,1fr] min-h-screen"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;aside&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"sidebar"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sticky top-0 h-screen"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Sidebar&lt;span class="nt"&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;header&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row-span-1 col-start-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Header&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"main"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-start-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Content&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;footer&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-start-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Footer&lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;CSS Parent&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nc"&gt;.grid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.grid-cols-&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="err"&gt;300&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;minmax&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;fr&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/* 2 column tracks, 1st 300px, 2nd max the space available */&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt; &lt;span class="n"&gt;minmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.grid-rows-&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="err"&gt;60&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;fr&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/* 2 row tracks, 1st 60px, 2nd the space available */&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.min-h-screen&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Fill the full screen */&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Why is it important to define minmax(0, 1fr) instead of 1fr?&lt;/strong&gt; Because by defining minmax and adding the possibility to have a smaller size than 1fr, the content does not overflow. This way, elements like a slider can be added to that responsive column without any problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;CSS Children&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="c"&gt;/**
  * Aside - Sidebar
  */&lt;/span&gt;
  &lt;span class="nc"&gt;.sticky&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sticky&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Follow you when scrolling */&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.top-0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.h-screen&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Fill the screen vertically */&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c"&gt;/**
  * Header
  */&lt;/span&gt;
  &lt;span class="nc"&gt;.row-span-1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Position: first row track */&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.col-start-2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;grid-column-start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Position: second column track */&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c"&gt;/**
  * Content &amp;amp; Footer
  */&lt;/span&gt;
  &lt;span class="nc"&gt;.col-start-2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;grid-column-start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Position: second column track (original position for the row) */&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: The examples will be styled with TailwindCSS using JIT mode, but I'm still going to add the generated CSS for those who don't use it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#situation-2-grid-post-thumbnail-layout"&gt;
  &lt;/a&gt;
  Situation 2 - Grid post thumbnail layout
&lt;/h3&gt;

&lt;p&gt;In this situation, our goal is to represent the thumbnail of our article, showing the image, the title, the description, the date and a like button to save it in our list of interests.&lt;/p&gt;

&lt;p&gt;Let's imagine that the image below is the outline of how we want to represent it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WrDGXXjf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gdv0lmtezpqq3qlispyu.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WrDGXXjf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gdv0lmtezpqq3qlispyu.jpeg" alt="Situation 2 - Example grid post thumbnail layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing will be to define our elements in semantic HTML and start defining the grid in the parent, in this case the children will not need to specify their position because they will occupy the space that corresponds to them by location in the HTML.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;article&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid grid-cols-[120px,minmax(0,1fr),64px] grid-rows-1 gap-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- Figure: By default will be added in the first column of 120px --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;figure&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"image_url"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"image_alt"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"120"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"120"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- Header (Title, excerpt and date): By default will be added in the second (available space) column --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;header&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"py-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Heading&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"pb-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Description or excerpt&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Date&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- Like button: By default will be added in the last column of 64px --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"w-8 h-8 p-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"32"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"32"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Like Icon&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As before, let's differentiate between the style applied to the parent and the one applied to the children:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;CSS Parent&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nc"&gt;.grid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.grid-cols-&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="err"&gt;120&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;minmax&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;fr&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="err"&gt;64&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/* 3 column tracks, 1st fixed of 120px, 2nd responsive from 0 to 1fr, and 3rd fixed of 64px */&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;120px&lt;/span&gt; &lt;span class="n"&gt;minmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;64px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.grid-rows-1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;/* 1 row track responsive from 0 to 1fr */&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.gap-4&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* gap between row and column tracks of 1rem (16px) */&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;CSS Children&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="c"&gt;/**
  * Header: Internal padding
  */&lt;/span&gt;
  &lt;span class="nc"&gt;.py-4&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c"&gt;/**
  * Button: Size and internal padding
  */&lt;/span&gt;
  &lt;span class="nc"&gt;.w-8&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* (32px) */&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.h-8&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* (32px) */&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.p-4&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#situation-3-grid-responsive-layout"&gt;
  &lt;/a&gt;
  Situation 3 - Grid responsive layout
&lt;/h3&gt;

&lt;p&gt;Another quite common situation that I usually find is the grid responsive by nature, that as the screen grows more elements are added to the previous rows, automatically defining the columns.&lt;/p&gt;

&lt;p&gt;In this way, when the element of x pixels fits in the previous row it moves up and the next one moves to the position of this one.&lt;/p&gt;

&lt;p&gt;If the width of the grid in the image below were larger, item 5 would be part of the first row.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JD7CVtkD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6or5tdvfhniskqxfrd1r.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JD7CVtkD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6or5tdvfhniskqxfrd1r.jpeg" alt="Situation 3 - Responsive layout made with grid"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this situation it is even easier to define the grid container, with just &lt;em&gt;grid-template-columns&lt;/em&gt; we will be able to get that result, but in order to have space between the items we will add the gap property as well:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;HTML&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid grid-cols-[repeat(auto-fit, 150px)] gap-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;Item 1&lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;Item 2&lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;Item 3&lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;Item 4&lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;Item 5&lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;CSS&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nc"&gt;.grid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.grid-cols-&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;repeat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;auto-fit&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;150&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto-fit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.gap-8&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* (32px) */&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, in this article I intended to have listed what I will need to review in the future when defining a new grid. And a couple of use cases to keep it fresh.&lt;/p&gt;

&lt;p&gt;I hope you find it as useful as I did and have a wonderful week full of grids and layout!&lt;/p&gt;

</description>
      <category>css</category>
      <category>grid</category>
      <category>basics</category>
      <category>usecases</category>
    </item>
    <item>
      <title>SvelteKit Blog Starter: Climate MDsveX Starter for Svelte</title>
      <author>Rodney Lab</author>
      <pubDate>Tue, 27 Jul 2021 09:02:37 +0000</pubDate>
      <link>https://dev.to/askrodney/sveltekit-blog-starter-climate-mdsvex-starter-for-svelte-44ko</link>
      <guid>https://dev.to/askrodney/sveltekit-blog-starter-climate-mdsvex-starter-for-svelte-44ko</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introducing-climate-sveltekit-blog-starter"&gt;
  &lt;/a&gt;
  Introducing Climate SvelteKit Blog Starter
&lt;/h2&gt;

&lt;p&gt;This SvelteKit Blog starter is based on the existing Climate Gatsby MDX blog starter.  Apart from being built for SvelteKit instead of Gatsby, the other big (related) difference is that it supports blog posts written in markdown files containing Svelte code (MDsvex), while the Gatsby version supported MDX (JSX in markdown).  Markdown support for blog authoring is a big deal is much shorthand notation, which saves you having to write out longer, more formal HTML.  As an example for a heading in HTML you write &lt;code&gt;&amp;lt;h1&amp;gt;My heading&amp;lt;/h2&amp;gt;&lt;/code&gt;, while in Markdown you write &lt;code&gt;# My heading&lt;/code&gt;.  There are similar shorter equivalents for writing &lt;a href="https://guides.github.com/features/mastering-markdown/"&gt;lists, adding links, pictures and so on&lt;/a&gt;.  All in all it means you spend less time tracking a missing close tag and concentrate on getting your thoughts down.  On top MDsveX makes customising blog posts a lot easier.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-sveltekit"&gt;
  &lt;/a&gt;
  About SvelteKit
&lt;/h2&gt;

&lt;p&gt;If you are completely new to SvelteKit, it might be worth skimming through my &lt;a href="https://rodneylab.com/getting-started-with-sveltekit/"&gt;recent post on Getting Started with SvelteKit&lt;/a&gt;, which will give you a head-start.  That said I have built the starter to help you get up to speed quicker if you are still discovering SvelteKit.  In this post I outline some key features.  If you're more of a hands on person, just &lt;a href="https://github.com/rodneylab/sveltekit-blog-mdx"&gt;crack open the Sveltekit Blog Starter repo&lt;/a&gt; and start playing!&lt;/p&gt;

&lt;p&gt;In this post rather than go through how I built the starter, to help get you going quicker with SvelteKit, I'll run through the most important parts of configuration.  As it's based on the Gatsby equivalent, I can also point out some differences.  My hope is that you can hit the ground running with help from the starter.  We will start looking at what's inside the repo and where you put your own blog posts.  Finally we'll end up with a comparison of Gatsby and SvelteKit, with a look at Server Side generation vs. Static Site Generation thrown in on the journey.  If that sounds good to you let's crack on!  If you would find a post on building something like this from scratch useful do let me know.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-start"&gt;
  &lt;/a&gt;
  🚀 Quick Start
&lt;/h2&gt;

&lt;p&gt;To get going you will clone the repo, install and spin up a dev server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/rodneylab/sveltekit-blog-mdx.git
&lt;span class="nb"&gt;cd &lt;/span&gt;sveltekit-blog-mdx
npm &lt;span class="nb"&gt;install
&lt;/span&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can run &lt;code&gt;pnpm install&lt;/code&gt; instead of &lt;code&gt;npm install&lt;/code&gt; if you have pnpm set up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-inside"&gt;
  &lt;/a&gt;
  🧐 What's Inside?
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
├── README.md
├── jsconfig.json
├── netlify.toml
├── package.json
├── pnpm-lock.yaml
├── src
│   ├── app.html
│   ├── hooks.js
│   ├── lib
│   │   ├── components
│   │   │   ├── BannerImage.svelte
│   │   │   ├── ...
│   │   │   └── SEO
│   │   ├── config
│   │   │   └── website.js
│   │   ├── constants
│   │   │   └── entities.js
│   │   ├── styles
│   │   │   ├── index.scss
│   │   │   ├── normalise.css
│   │   │   ├── styles.scss
│   │   │   └── variables.scss
│   │   └── utilities
│   │       └── blog.js
│   └── routes
│       ├── [slug].json.js
│       ├── __layout.svelte
│       ├── best-medium-format-camera-for-starting-out
│       │   └── index.md
│       ├── contact.svelte
│       ├── folding-camera
│       │   └── index.md
│       ├── index.json.js
│       ├── index.svelte
│       └── twin-lens-reflex-camera
│           └── index.md
├── static
│   ├── favicon.ico
│   └── robots.txt
└── svelte.config.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-src-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;src&lt;/code&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;hooks.js&lt;/code&gt; we define Content Security Policy (CSP) and other HTTP security headers in here.  More on this later.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#-raw-srccomponents-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;src/components&lt;/code&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;src/lib/components&lt;/code&gt; these are the components we use in pages.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#-raw-srclib-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;src/lib&lt;/code&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;src/lib/config/website.js&lt;/code&gt; for convenience we define properties for the site here such as the site title, contact email addresses and social media accounts.  Some properties feed from environment variables.  See the earlier post on getting started with SvelteKit for more on environment variables in SvelteKit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;src/lib/styles&lt;/code&gt; does what you expect!  We use SCSS for styling and source self-hosted fonts in the layouts (we'll see this further down the post).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#-raw-srcutilities-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;src/utilities&lt;/code&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;src/utilities/blog.js&lt;/code&gt; this file contains some code for helping us transform the markdown in blog posts to Svelte.  As well as that they help extract fields in the frontmatter (this is the metadata we include at the top fo the blog post &lt;code&gt;index.md&lt;/code&gt; files).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#-raw-srcroutes-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;src/routes&lt;/code&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;src/routes/[slug].json.js&lt;/code&gt; this is essentially a template for blog post data.  One of these file is generated at build for each blog post.  It is used to extract data needed in the Svelte file used to generate the post's HTML. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;__layout.svelte&lt;/code&gt; this is a generalised layout template used both for main site pages and individual blog posts.  Blog post data it loaded from this layout.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;src/routes/best-medium-format-camera-for-starting-out&lt;/code&gt; this is a folder for a blog post.  The blog post slug is taken from the folder name, meaning this folder creates a blog post at &lt;code&gt;www.example.com/best-medium-format-camera-for-starting-out&lt;/code&gt;. The actual Svelte in Markdown content for the post is found in the index.md file.  Create more blog posts by creating new folders with the same structure.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I mention most of the other files in the &lt;a href="https://rodneylab.com/getting-started-with-sveltekit/"&gt;Getting Started with SvelteKit blog post&lt;/a&gt;, but let me know if I have missed anything which needs more explanation.  Next let's look at a blog post file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%96%8B-blog-posts"&gt;
  &lt;/a&gt;
  🖋 Blog Posts
&lt;/h2&gt;

&lt;p&gt;Below is a fragment from one of the sample blog posts.  The first section is the frontmatter, mentioned earlier.  For now the SEO content is barebones, but in an upcoming post, I will run through generating SEO metadata for OpenGraph, Twitter and SchemaOrg.  In those posts we will make more use of post frontmatter to ensure we include data tailored for each post in the page's metadata.  This has a number of important uses from, having nice pictures show up when your page is shared on Twitter, Telegram or other apps to helping search engines understand what the page is about.  The latter is important for improving your SEO ranking.  For now the most important use is ensuring we get the right banner image appear, with expected alt text for each post.  If you are as keen on SEO as I am, you should read my post on SvelteKit SEO.  As you might expect, the dates from frontmatter are used to sort posts in the &lt;code&gt;BlogRoll&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="p"&gt;--------&lt;/span&gt;
postTitle: 'Best Medium Format Camera for Starting out'
focusKeyphrase: 'best medium format camera'
datePublished: '2021-04-07T16:04:42.000+0100'
lastUpdated: '2021-04-14T10:17:52.000+0100'
seoMetaDescription: "Best medium format camera for starting out is probably a question at the front of your mind right now! Let's take a look."
featuredImage: 'best-medium-format-camera-for-starting-out.jpg'
featuredImageAlt: 'Photograph of a Hasselblad medium format camera with the focusing screen exposed'
ogImage: ''
ogSquareImage: ''
twitterImage: ''
categories: ''
&lt;span class="gh"&gt;tags: ''
--------
&lt;/span&gt;
&lt;span class="gu"&gt;## What is a Medium Format Camera?&lt;/span&gt;

If you are old enough to remember the analogue film camera era, chances are it is the 35&lt;span class="ni"&gt;&amp;amp;nbsp;&lt;/span&gt;mm canisters with the track cut down the side that first come to mind. Shots normally had a 3:2 aspect ratio measuring 36&lt;span class="ni"&gt;&amp;amp;times;&lt;/span&gt;24&lt;span class="ni"&gt;&amp;amp;nbsp;&lt;/span&gt;mm.  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#blogpostsummary-component"&gt;
  &lt;/a&gt;
  🌟 BlogPostSummary Component
&lt;/h2&gt;

&lt;p&gt;Speaking of the blog roll, BlogRoll is used to generate it.  We generate one of these components for each blog post.  I thought this would be an interesting component to look at to compare Svelte and React code.  We want the user to be taken to the blog post when they click anywhere inside the component.  So we want it to behave like a link.  We also want to include the title and other information as links to the post.  Later we might add links to similarly tagged posts within the component.&lt;/p&gt;

&lt;p&gt;That's a lot of links! Semantically, you should not have an anchor tag enclosed in another anchor tag.  This is what we would have is we used anchors for all the links mentioned just then.  Instead I engineered the component so it has the look, feel and behaviour expected by the user as well as being accessible.  &lt;/p&gt;

&lt;p&gt;I won't go into detail on the accessibility features here and why I used them.  However, for the comparison I will explain a little about the structure.  You will see there is only one anchor tag (around the post title).  For sighted users though, to give the appearance of the link, we change the cursor to a pointer when the mouse is within the component.  On top we use javascript to take the user to the blog post when they click anywhere within the component.  That helps us achieve the goal of having the component behave as expected by the user.&lt;/p&gt;

&lt;p&gt;This behaviour is implemented using &lt;code&gt;onClick&lt;/code&gt; event handlers in the Gatsby (React) version.  In the Svelte version we &lt;code&gt;on:mouseenter&lt;/code&gt;, &lt;code&gt;on:mouseleave&lt;/code&gt; and &lt;code&gt;on:mousedown&lt;/code&gt; inline handlers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  ...
    const handleMouseEnter = (event) =&amp;gt; {
        event.target.style.cursor = 'pointer';
    };

    const handleMouseLeave = (event) =&amp;gt; {
        event.target.style.cursor = 'default';
    };

    const handleMouseDown = async () =&amp;gt; {
        goto(\`/\${slug}/\`);
    };

    const date = dayjs(datePublished);
    const dateString = \`\${date.format('D')} \${date.format('MMM')}\`;
    const idString = \`blog-post-summary-\${slug}\`;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;
    &lt;span class="na"&gt;on:mouseenter=&lt;/span&gt;&lt;span class="s"&gt;{handleMouseEnter}&lt;/span&gt;
    &lt;span class="na"&gt;on:mouseleave=&lt;/span&gt;&lt;span class="s"&gt;{handleMouseLeave}&lt;/span&gt;
    &lt;span class="na"&gt;on:mousedown=&lt;/span&gt;&lt;span class="s"&gt;{handleMouseDown}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;{\`Open&lt;/span&gt; &lt;span class="err"&gt;\${&lt;/span&gt;&lt;span class="na"&gt;postTitle&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="na"&gt;blog&lt;/span&gt; &lt;span class="na"&gt;post&lt;/span&gt;&lt;span class="err"&gt;\`}&lt;/span&gt; &lt;span class="na"&gt;aria-describedby=&lt;/span&gt;&lt;span class="s"&gt;{idString}&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;{\`/\${slug}/\`}&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{postTitle}&lt;span class="nt"&gt;&amp;lt;/a&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{dateString}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{seoMetaDescription}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;{idString}&lt;/span&gt; &lt;span class="na"&gt;aria-hidden=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Read more {H_ELLIPSIS_ENTITY}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BlogPostSummary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;datePublished&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;postTitle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;seoMetaDescription&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;containerNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;titleNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;containerNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// deliberately set style with javascript and not CSS for accessibility reasons&lt;/span&gt;
      &lt;span class="nx"&gt;containerNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pointer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;containerNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;titleNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;`/&lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;{slug}&lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="s2"&gt;);
      }
    };
    containerNode.current.addEventListener('mousedown', listener);
    return () =&amp;gt; {
      if (containerNode.current) {
        containerNode.current.removeEventListener('mousedown', listener);
      }
    };
  }, [containerNode, titleNode]);

  const date = dayjs(datePublished);
  const idString = &lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="s2"&gt;blog-post-summary-&lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;{slug.slice(0, -1)}&lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="s2"&gt;;

  return (
    &amp;lt;div className={container} ref={containerNode}&amp;gt;
      &amp;lt;div className={content}&amp;gt;
        &amp;lt;h3 ref={titleNode}&amp;gt;
          &amp;lt;Link
            aria-label={`&lt;/span&gt;&lt;span class="nx"&gt;Open&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;postTitle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;blog&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="s2"&gt;`}
            aria-describedby={idString}
            to={`&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`}
          &amp;gt;
            {postTitle}
          &amp;lt;/Link&amp;gt;
        &amp;lt;/h3&amp;gt;
        &amp;lt;p&amp;gt;{`&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;D&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MMM&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`}&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;{seoMetaDescription}&amp;lt;/p&amp;gt;
        &amp;lt;span aria-hidden id={idString}&amp;gt;
          Read more {H_ELLIPSIS_ENTITY}
        &amp;lt;/span&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#static-vs-serve-side-rendered"&gt;
  &lt;/a&gt;
  🔥 Static vs Serve Side Rendered
&lt;/h2&gt;

&lt;p&gt;With SvelteKit you can choose to make pages Server Side Rendered, like Next apps typically are, or static (Static Site Generated, SSG), like Gatsby apps typically are.  There is an &lt;a href="https://github.com/reactwg/react-18/discussions/37"&gt;excellent write up SSG by React guru Dan Abramov&lt;/a&gt;, worth the read, even if you already know about SSG.  For SSG pages, the SvelteKit Netlify adapter produces a serverless function which acts as the server.  With SvelteKit still being in development, there is an &lt;a href="https://crinkle.dev/writing/journey-from-gatsby-to-sveltekit-deployment#hosting-on-netlify" rel="nofollow noopeneer"&gt;issue creating SSG pages&lt;/a&gt; with the Netlify adapter.  For that reason I have made all pages in the starter static.  This was done page by page, by adding a line of code to the module block, telling SvelteKit to prerender the page (in the relevant file):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;context=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cm"&gt;/**
     * @type {import('@sveltejs/kit').Load}
     */&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prerender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remove this line for pages you want to use SSG for.  Hopefully the Netlify adapter issue gets fixed soon.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#self-hosted-fonts"&gt;
  &lt;/a&gt;
  🔧 Self Hosted Fonts
&lt;/h2&gt;

&lt;p&gt;In Gatsby we can install the &lt;code&gt;@fontsource&lt;/code&gt; npm package for the font we want to use on our site and import this in the &lt;code&gt;gatsby-browser.js&lt;/code&gt; file to make it accessible throughout the site.  Self hosting makes the page load faster, saving the user's browser having to connect to a different origin to download the fonts it needs.  In SvelteKit, it's not too different.  Once again, we install the font packages, we just include them differently.  In SvelteKt, we can add them to the default layout file if they are used throughout the site:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="c1"&gt;// Lora - supported variants:&lt;/span&gt;
  &lt;span class="c1"&gt;// weights: [400, 500, 600, 700]&lt;/span&gt;
  &lt;span class="c1"&gt;// styles: italic, normal&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@fontsource/lora/400.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@fontsource/lora/600.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@fontsource/lora/700.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@fontsource/lora/700-italic.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As with Gatsby, you only need to import the font variants which you will use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scss-styling"&gt;
  &lt;/a&gt;
  💄 SCSS Styling
&lt;/h2&gt;

&lt;p&gt;I'm a fan of SCSS so, we are using SCSS styling in the starter.  There are a few things you need to do to get this to work in SvelteKit (this is all already done in the starter, just listed for information here):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install the &lt;code&gt;sass&lt;/code&gt; and Svelte preprocessor packages:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-D&lt;/span&gt; sass svelte-preprocess
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Set up the Svelte preprocesser to convert SCSS into standard CSS:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/** @type {import('@sveltejs/kit').Config} */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;adapter&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@sveltejs/adapter-netlify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;preprocess&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte-preprocess&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;preprocess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;preprocess&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;scss&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;prependData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@import 'src/lib/styles/styles.scss';&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The file given in line &lt;code&gt;8&lt;/code&gt; can be used to include any variables which you want to expose to every style element.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Define any global styles in the files in &lt;code&gt;src/lib/styles&lt;/code&gt; directory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Import styles where components or pages need them:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$lib/styles/normalise.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$lib/styles/index.scss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Include SCSS where you would write regular CSS, specifying &lt;code&gt;scss&lt;/code&gt; as the language:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;style &lt;/span&gt;&lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"scss"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-between&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;spacing-4&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;spacing-0&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;spacing-0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;spacing-0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note how we can include SCSS variables now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#content-security-policy"&gt;
  &lt;/a&gt;
  🔐 Content Security Policy
&lt;/h2&gt;

&lt;p&gt;A Content Security Policy can break your site or make it unusable so it is important to test the policy.  Reporting is helpful here and the starter is set up to use Sentry reporting.  They offer free reporting, suitable for many use cases.  You will need a &lt;a href="https://blog.sentry.io/2018/09/04/how-sentry-captures-csp-violations/"&gt;free Sentry account and API keys for security error catching&lt;/a&gt;. Alternatively, remove the reporting lines from the &lt;code&gt;src/hooks.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;CSP is set to report only in the starter by default.  This means errors will appear in the browser console and the reports will get sent to your Sentry dashboard when there is an error (but no connections will be blocked).  You can test your HTTP security headers on &lt;a href="https://securityheaders.com/"&gt;securityheaders.com&lt;/a&gt;.  Once you are happy with the policy you should switch from &lt;code&gt;Content-Security-Policy-Report-Only&lt;/code&gt; to &lt;code&gt;Content-Security-Policy&lt;/code&gt;. Remember to comment out the report only line when you do this. &lt;/p&gt;

&lt;p&gt;To include Security headers, we can use the Svelte hooks handle.  The &lt;code&gt;hooks.js&lt;/code&gt; file is in the default location, so you should not have to include it in &lt;code&gt;svelte.config.js&lt;/code&gt;.  The Climate SvelteKit Blog Starter SvelteKit config, includes it just for completeness though.  You will almost certainly need to customise the CSP HTTP headers in the hooks file for you application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// https://gist.github.com/acoyfellow/d8e86979c66ebea25e1643594e38be73&lt;/span&gt;
&lt;span class="c1"&gt;// https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP&lt;/span&gt;
&lt;span class="c1"&gt;// https://scotthelme.co.uk/content-security-policy-an-introduction/&lt;/span&gt;
&lt;span class="c1"&gt;// scanner: https://securityheaders.com/&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootDomain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VITE_DOMAIN&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// or your server IP for dev&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;directives&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;base-uri&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;'self'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;child-src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;'self'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;connect-src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;'self'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ws://localhost:*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;img-src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;'self'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VITE_IMGIX_DOMAIN&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;font-src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;'self'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;form-action&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;'self'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;frame-ancestors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;'self'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;frame-src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;'self'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;manifest-src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;'self'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;media-src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;'self'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object-src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;'none'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;style-src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;'self'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;'unsafe-inline'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default-src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;'self'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rootDomain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;`ws://&lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;{rootDomain}&lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="s2"&gt;],
    'script-src': ["'self'", "'unsafe-inline'"],
    'worker-src': ["'self'"],
    'report-to': ["'csp-endpoint'"],
    'report-uri': [
        &lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="s2"&gt;https://sentry.io/api/&lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;{import.meta.env.VITE_SENTRY_PROJECT_ID}/security/?sentry_key=&lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;{
            import.meta.env.VITE_SENTRY_KEY
        }&lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="s2"&gt;
    ]
};

const csp = Object.entries(directives)
    .map(([key, arr]) =&amp;gt; key + ' ' + arr.join(' '))
    .join('; ');

export async function handle({ request, resolve }) {
    const response = await resolve(request);
    console.log('handle', { ...response.headers });
    return {
        ...response,
        headers: {
            ...response.headers,
            'X-Frame-Options': 'SAMEORIGIN',
            'Referrer-Policy': 'no-referrer',
            'Permissions-Policy':
                'accelerometer=(), autoplay=(), camera=(), document-domain=(), encrypted-media=(), fullscreen=(), gyroscope=(), interest-cohort=(), magnetometer=(), microphone=(), midi=(), payment=(), picture-in-picture=(), publickey-credentials-get=(), sync-xhr=(), usb=(), xr-spatial-tracking=(), geolocation=()',
            'X-Content-Type-Options': 'nosniff',
            'Content-Security-Policy-Report-Only': csp,
            'Expect-CT': &lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="s2"&gt;max-age=86400, report-uri="https://sentry.io/api/&lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;{
                import.meta.env.VITE_SENTRY_PROJECT_ID
            }/security/?sentry_key=&lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;{import.meta.env.VITE_SENTRY_KEY}"&lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="s2"&gt;,
            'Report-To': &lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="s2"&gt;{group: "csp-endpoint", "max_age": 10886400, "endpoints": [{"url": "https://sentry.io/api/&lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;{
                import.meta.env.VITE_SENTRY_PROJECT_ID
            }/security/?sentry_key=&lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;{import.meta.env.VITE_SENTRY_KEY}"}]}&lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="s2"&gt;,
            'Strict-Transport-Security': 'max-age=31536000; includeSubDomains; preload'
        }
    };
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As it stands the generated sites get an A rating from SecurityHeaders.com.  It should be possible to improve this by adding hashes for all inline styles and scripts and removing &lt;code&gt;unsafe-inline&lt;/code&gt;.  I will look into how to do this when I get a chance!  If you have already written a custom script to handle it, I would love to hear from you!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%96%BC-responsive-images"&gt;
  &lt;/a&gt;
  🖼 Responsive Images
&lt;/h2&gt;

&lt;p&gt;One area where Gatsby is still ahead of Svelte is on responsive images.   I guess we have to wait a little for someone smart to write something like the Gatsby Image API for SvelteKit.  In the meantime, I have cobbled together a responsive image component using Imgix for hosting.  You will need an Imgix account and to have your images in the cloud somewhere (e.g. AWS S3 or Backblaze) for this to work for you.  As normal, place your credentials in the &lt;code&gt;.env&lt;/code&gt; file (see &lt;code&gt;.env.EXAMPLE&lt;/code&gt; for a template).&lt;/p&gt;

&lt;p&gt;Imgix generates images in the best format based on the user's browser.  Their  CDN serves images around the globe with haste.  The &lt;code&gt;BannerImage&lt;/code&gt; component is able to query Imgix for the image url and &lt;code&gt;srcset&lt;/code&gt; to create a responsive image.  As a temporary hack, I have manually generated these data so that the entire site can be static (this is related to the Netlify adapter issue mentioned earlier).  If you also want to keep your site static, you have a choice of either also generating the data manually (or with a script) or using an alternative method for generating images.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gatsby-sveltekit-comparison"&gt;
  &lt;/a&gt;
  ⚖️ Gatsby – SvelteKit Comparison
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AuRMNsvx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qqi025ujn6lxlegtyz11.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AuRMNsvx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qqi025ujn6lxlegtyz11.png" alt="SvelteKit Blog Starter: Climate MDsveX Starter for Svelte"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So now you have a choice between two starters for you next markdown-based blog site Gatsby Starter Climate and SvelteKit Blog Climate — which do you choose? You might say go on speed.  Well the Lighthouse test shows them both getting clean sheets with 100s across the board!  Gatsby does have some optimisations built in, with links pre-loading, but then Svelte sites run pure javascript so you would expect them to load slightly quicker (I admit I am no expert on this matter).  So on speed, there is probably not much in it.  If speed is critical for your project, it will definitely we worth doing the research.&lt;/p&gt;

&lt;p&gt;I would say in time SvelteKit will offer the better developer experience, that's not to say that it is not already outstanding!  Builds are a lot faster (the Svelte starter builds in around 40 seconds consistently on Netlify, compared to a range of between one minute and three-and-a-half minutes for the Gatsby starter).  For bigger sites, I would imagine the difference will have an impact, especially when you have to pay per build minute.&lt;/p&gt;

&lt;p&gt;Gatsby is more established so has already has a large ecosystem of plugins and on top there are all the React plugins.  I think this gives Gatsby the advantage now if you need to build a new site quickly or generally rely on plugins.  I would expect the Svelte ecosystem to grow.  As it does there will probably be clear water appearing between the two on developer experience.  With that in mind it is probably worth learning Svelte and SvelteKit to future-proof yourself.  This is especially the case if you do not heavily rely on plugins for the sites you build, and like to roll your own components.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#feedback"&gt;
  &lt;/a&gt;
  🙏🏽 Feedback
&lt;/h2&gt;

&lt;p&gt;Please send me feedback! What do you think of the new starter?  I mentioned a few improvements I have in mind.  I would also love to hear your opinion on how we can be improve it. Have you found the post useful? Would you like to see posts on another topic instead? Get in touch with ideas for new posts. Also if you like my writing style, get in touch if I can write some posts for your company site on a consultancy basis. Read on to find ways to get in touch, further below. If you want to support posts similar to this one and can spare a couple of dollars, rupees, euros or pounds, please consider supporting me through Buy me a Coffee.&lt;/p&gt;

&lt;p&gt;Finally, feel free to share the post on your social media accounts for all your followers who will find it useful. As well as leaving a comment below, you can get in touch via &lt;a href="https://twitter.com/messages/compose?recipient_id=1323579817258831875"&gt;@askRodney&lt;/a&gt; on Twitter and also &lt;a href="https://t.me/askRodney"&gt;askRodney on Telegram&lt;/a&gt;. Also, see &lt;a href="https://rodneylab.com/contact"&gt;further ways to get in touch with Rodney Lab&lt;/a&gt;. I post regularly on &lt;a href="https://rodneylab.com/tags/sveltekit/"&gt;SvelteKit&lt;/a&gt; as well as &lt;a href="https://rodneylab.com/tags/gatsby"&gt;Gatsby JS&lt;/a&gt; among other topics. Also &lt;a href="https://rodneylab.com/about/#newsletter"&gt;subscribe to the newsletter to keep up-to-date&lt;/a&gt; with our latest projects.&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to mess up your JavaScript code like a boss</title>
      <author>Jan Küster</author>
      <pubDate>Tue, 27 Jul 2021 08:53:31 +0000</pubDate>
      <link>https://dev.to/jankapunkt/how-to-mess-up-your-javascript-code-like-a-boss-pa9</link>
      <guid>https://dev.to/jankapunkt/how-to-mess-up-your-javascript-code-like-a-boss-pa9</guid>
      <description>&lt;p&gt;&lt;small&gt;Photo by &lt;a href="https://unsplash.com/@officestock?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Sebastian Herrmann&lt;/a&gt; on &lt;a href="https://unsplash.com/@officestock?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;br&gt;
  &lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Good Bye, reliable code! Leverage these concepts and language features, deploy your app and then... watch everything burn 🔥 &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#quick-access"&gt;
  &lt;/a&gt;
  Quick access
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#typeof-checks"&gt;1. Relying on &lt;code&gt;typeof&lt;/code&gt; checks&lt;/a&gt;&lt;br&gt;
&lt;a href="#instanceof-checks"&gt;2. Relying on &lt;code&gt;instanceof&lt;/code&gt; checks&lt;/a&gt;&lt;br&gt;
&lt;a href="#in-checks"&gt;3. Mixing up direct with inherited properties&lt;/a&gt;&lt;br&gt;
&lt;a href="#tostring-checks"&gt;4. Relying on &lt;code&gt;toString&lt;/code&gt; output&lt;/a&gt;&lt;br&gt;
&lt;a href="#type-conversion"&gt;5. Using &lt;code&gt;parseInt&lt;/code&gt; without radix&lt;/a&gt;&lt;br&gt;
&lt;a href="#type-coercion"&gt;6. Introduce type coercion&lt;/a&gt;&lt;br&gt;
&lt;a href="#truthy-falsy"&gt;7. Using truthy / falsy in branch evaluations&lt;/a&gt;&lt;br&gt;
&lt;a href="#bracket-notation"&gt;8. Using object bracket notation with user input&lt;/a&gt;&lt;br&gt;
&lt;a href="#half-way-numbers"&gt;9. Validate numbers only half-way&lt;/a&gt;&lt;br&gt;
&lt;a href="#rely-on-number"&gt;10. Rely on Number arithmetic for floats&lt;/a&gt;&lt;br&gt;
&lt;a href="#conditional-return"&gt;11. Use &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; or &lt;code&gt;||&lt;/code&gt; in conditional returns&lt;/a&gt;&lt;br&gt;
&lt;a href="#pseudo-private"&gt;12. Rely on pseudo-private properties&lt;/a&gt;&lt;br&gt;
&lt;a href="#other"&gt;13. Other problematic stuff&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I actually felt that way from time to time when I just ran into some of these things the first time. It was like all my hard work had just been nullified by a simple misunderstanding or naive implementation. 😢&lt;/p&gt;

&lt;p&gt;This article is therefore my personal "best-of" collection of problems that came up due to my very naive usage of JavaScript. Some of them actually caused severe issues in my early days apps and brought me countless hours of debugging, reading, finding and fixing. 😠&lt;/p&gt;

&lt;p&gt;However, this process made me a better developer and engineer and I hope they will also serve for you and your projects well. Knowing them and finding alternatives at the design phase will improve your apps robustness and maintainability. At least I think so. Leave a comment, if think otherwise. ❤️&lt;/p&gt;





&lt;h2&gt;
  &lt;a href="#1-fire-relying-on-raw-typeof-endraw-checks"&gt;
  &lt;/a&gt;
  1. 🔥 Relying on &lt;code&gt;typeof&lt;/code&gt; checks&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In JavaScript you are actually pretty lost, when you rely on &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof"&gt;checking the given type of a variable&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// expected&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="mf"&gt;135.791113&lt;/span&gt; &lt;span class="c1"&gt;// "number"&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="c1"&gt;// "string"&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="c1"&gt;// "object"&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "symbol"&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="mi"&gt;1357911&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="c1"&gt;// "bigint"&lt;/span&gt;

&lt;span class="c1"&gt;// somewhat unexpected for beginners&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;// "object", expected something like "array"&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="c1"&gt;// "function", expected "async function"&lt;/span&gt;

&lt;span class="c1"&gt;// totally not as expected&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="kc"&gt;NaN&lt;/span&gt; &lt;span class="c1"&gt;// "number", what!? Not a number is a number!?&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="c1"&gt;// "object", how can nothing be an object!?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Relying on &lt;code&gt;typeof&lt;/code&gt; can therefore not be considered as safe, at least not without detailed additional checks. Relying on it in sensitive contexts can have severe consequences.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#involved-issues"&gt;
  &lt;/a&gt;
  Involved issues
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Runtime errors&lt;/li&gt;
&lt;li&gt;Injection of unwanted code into functions can become possible&lt;/li&gt;
&lt;li&gt;Breaking the applications or server process becomes possible&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#potential-fixes"&gt;
  &lt;/a&gt;
  Potential fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use a validation library (there are some, do your research)&lt;/li&gt;
&lt;li&gt;Define "interfaces" (easy in TypeScript, though) that check for primitive (own) properties of an input&lt;/li&gt;
&lt;li&gt;Extend your checks with additional checks (for example check if &lt;code&gt;n&lt;/code&gt; is of type &lt;code&gt;number&lt;/code&gt; and is not equal &lt;code&gt;NaN&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Add a lot more edge test-cases, use &lt;a href="https://owasp.org/www-community/Fuzzing"&gt;fuzzing techniques&lt;/a&gt; to make sure you cover as many non-trivial inputs as possible&lt;/li&gt;
&lt;li&gt;Use TypeScript to have built-in type-checking at "compile time" (it's not a silver-bullet though)&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#2-fire-relying-on-raw-instanceof-endraw-checks"&gt;
  &lt;/a&gt;
  2. 🔥 Relying on &lt;code&gt;instanceof&lt;/code&gt; checks &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This is not only a problem from an OOP perspective (implement against interfaces, not classes!) but also does not work out quite well all the time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Proxy simply comes from another dimension....&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt; &lt;span class="c1"&gt;// TypeError: 'prototype' property of Proxy is not an object&lt;/span&gt;


&lt;span class="c1"&gt;// descendants of Object are still Objects&lt;/span&gt;
&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="c1"&gt;// primitives disguising as Object&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.357911&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="c1"&gt;// Object disguising as non-Object&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#involved-issues"&gt;
  &lt;/a&gt;
  Involved issues
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;All of the former mentioned issues plus&lt;/li&gt;
&lt;li&gt;Tight coupling is introduced easily&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#potential-fixes"&gt;
  &lt;/a&gt;
  Potential fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;All of the former mentioned fixes plus&lt;/li&gt;
&lt;li&gt;Check for properties and their types instead of specific inheritance&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#3-fire-mixing-up-direct-with-inherited-properties"&gt;
  &lt;/a&gt;
  3. 🔥 Mixing up direct with inherited properties &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The prototypical inheritance of JavaScript brings further complexity when it comes to detecting an Object's properties. Some have been inherited from the prototype, others are the object's own properties. Consider the following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Food&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expires&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expires&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;expires&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;days&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;addDay&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;days&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;hasExpired&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;days&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expires&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Apple&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Food&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 3 days&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sphere&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-raw-in-endraw-operator"&gt;
  &lt;/a&gt;
  The &lt;code&gt;in&lt;/code&gt; operator
&lt;/h3&gt;

&lt;p&gt;Now let's create a new &lt;code&gt;Apple&lt;/code&gt; instance and see which of the properties are available:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Apple&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// let's add this method just to this one apple instance&lt;/span&gt;
&lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFresh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;days&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expires&lt;/span&gt;

&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;expires&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;shape&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;addDay&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hasExpired&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;isFresh&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see here we simply get &lt;code&gt;true&lt;/code&gt; for every &lt;code&gt;in&lt;/code&gt; check, because&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The in operator returns true if the specified property is in the specified object or its prototype chain.&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in"&gt;MDN&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-forin-endraw-statement"&gt;
  &lt;/a&gt;
  The &lt;code&gt;for...in&lt;/code&gt; statement
&lt;/h3&gt;

&lt;p&gt;Beware of confusing the &lt;code&gt;in&lt;/code&gt; operator with the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in"&gt;&lt;code&gt;for..in&lt;/code&gt; statement&lt;/a&gt;. It gives you a totally different result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// output&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;expires&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;days&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;shape&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;isFresh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;for..in&lt;/code&gt; loops only through the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties"&gt;enumerable properties&lt;/a&gt; and omits all the methods, &lt;strong&gt;which are assigned to the prototype&lt;/strong&gt; but it still lists the directly assigned properties.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-hasownproperty-endraw-method"&gt;
  &lt;/a&gt;
  The &lt;code&gt;hasOwnProperty&lt;/code&gt; method
&lt;/h3&gt;

&lt;p&gt;So it seems to be safe to always use &lt;code&gt;for..in&lt;/code&gt;? Let's take a look at a slightly different approach to our food-chain:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Food&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="nx"&gt;Food&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expires&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="c1"&gt;// assigned, right!?&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Food&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sphere&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// also assigned&lt;/span&gt;

&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;expires&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;expires&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;shape&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;shape&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// output&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;expires&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;shape&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;apple&lt;/code&gt; is now created with &lt;code&gt;Food&lt;/code&gt; as it's prototype, which itself has &lt;code&gt;Object&lt;/code&gt; as it's prototype.&lt;/p&gt;

&lt;p&gt;As you can see the &lt;code&gt;expires&lt;/code&gt; property hasn't been passed down the prototype chain as it happened with the ES6 classes example above. However, the property is considered as "enumerable", which is why it's listed in the &lt;code&gt;for..in&lt;/code&gt; statement's output.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#involved-issues"&gt;
  &lt;/a&gt;
  Involved issues
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Validations can fail, creating false-positives or false-negatives&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#potential-fixes"&gt;
  &lt;/a&gt;
  Potential fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Make it clear, whether validations will check for direct properties or have look at the full prototype-chain&lt;/li&gt;
&lt;li&gt;Avoid inheritance where possible and use composition in favor&lt;/li&gt;
&lt;li&gt;Otherwise try to stick with ES6 classes as they solve many fiddling with the prototype chain for you&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#4-fire-relying-on-raw-tostring-endraw-output"&gt;
  &lt;/a&gt;
  4. 🔥 Relying on &lt;code&gt;toString&lt;/code&gt; output &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;toString&lt;/code&gt; method is a builtin that descends from &lt;code&gt;Object&lt;/code&gt; and returns a String-representation of it. Descendants can override it to create a custom output that suits it's internal structure.&lt;/p&gt;

&lt;p&gt;However, you can't simply rely on it without knowing each specific implementation. Here is one example, where you might think you are clever by using the &lt;code&gt;toString&lt;/code&gt; method to fast-compare two Arrays:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// true, should be false&lt;/span&gt;

&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="c1"&gt;// false, should be true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also note, that someone can easily override global toString implementations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[I, am,compliant, to, your, checks]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// "[I, am,compliant, to, your, checks]"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#involved-issues"&gt;
  &lt;/a&gt;
  Involved Issues
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Runtime errors, due to wrong comparisons&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;toString&lt;/code&gt; spoofing / overriding can break these checks and is considered a vulnerability&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#potential-fixes"&gt;
  &lt;/a&gt;
  Potential fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;JSON.stringify&lt;/code&gt; + sorting on arrays&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;JSON.stringify&lt;/code&gt; alone isn't enough, you may need to write a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#the_replacer_parameter"&gt;custom replacer function&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;toLocaleString()&lt;/code&gt; or &lt;code&gt;toISOString()&lt;/code&gt; on Date objects but note they are also easily overridden&lt;/li&gt;
&lt;li&gt;Use an alternative Date library with better comparison options&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#5-fire-using-raw-parseint-endraw-without-radix"&gt;
  &lt;/a&gt;
  5. 🔥 Using &lt;code&gt;parseInt&lt;/code&gt; without radix &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;There are builtin Methods, that help to parse a variable into a different type. Consider &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt#description"&gt;&lt;code&gt;Number.parseInt&lt;/code&gt;&lt;/a&gt; which allows to parse a (decimal) Number to an integer (still Number).&lt;/p&gt;

&lt;p&gt;However, this can easily get out of hand if you don't determine the &lt;code&gt;radix&lt;/code&gt; parameter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// expected&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.357911&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1.357911&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x14b857&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1357911&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mb"&gt;0b101001011100001010111&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1357911&lt;/span&gt;

&lt;span class="c1"&gt;// boom&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hexStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1357911&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "14b857"&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hexStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 14&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;binStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1357911&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "101001011100001010111"&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;binStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 101001011100001010111&lt;/span&gt;

&lt;span class="c1"&gt;// fixes&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hexStr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1357911&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;binStr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1357911&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#involved-issues"&gt;
  &lt;/a&gt;
  Involved issues
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Calculations will end up wrong&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#potential-fixes"&gt;
  &lt;/a&gt;
  Potential fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Always use the &lt;code&gt;radix&lt;/code&gt; parameter&lt;/li&gt;
&lt;li&gt;Only allow numbers as input, note that &lt;code&gt;0x14b857&lt;/code&gt; and &lt;code&gt;0b101001011100001010111&lt;/code&gt; are of type &lt;code&gt;number&lt;/code&gt; and due to the &lt;code&gt;0x&lt;/code&gt; and the &lt;code&gt;0b&lt;/code&gt; prefixes the &lt;code&gt;parseInt&lt;/code&gt; method will automatically detect their radix (but not for other systems like octal or other bases)&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#6-fire-introduce-type-coercion"&gt;
  &lt;/a&gt;
  6. 🔥 Introduce type coercion &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;You can easily write code that may bring up unexpected results if you don't care about potential type coercion.&lt;/p&gt;

&lt;p&gt;To understand the difference to type conversion (which we discussion by one example in the previous section), check out this &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Type_coercion"&gt;definition from MDN&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Type coercion is the automatic or implicit conversion of values from one data type to another (such as strings to numbers). Type conversion is similar to type coercion because they both convert values from one data type to another with one key difference — type coercion is implicit whereas type conversion can be either implicit or explicit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The easiest example is a naive add-Function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// '10'&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// '01'&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// NaN, because Number + undefined  = NaN&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1, just don't think about why...&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="c1"&gt;// "1", just don't think about why...&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="c1"&gt;// "1", just don't think about why...&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="c1"&gt;// "1() =&amp;gt; {}", I'll stop here&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#involved-issues"&gt;
  &lt;/a&gt;
  Involved issues
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Totally uncontrollable results will happen&lt;/li&gt;
&lt;li&gt;Can break your application or server process&lt;/li&gt;
&lt;li&gt;Debugging back from errors to the function where the coercion happened will be lots of fun... 🔥&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#potential-fixes"&gt;
  &lt;/a&gt;
  Potential fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;validate input parameters
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// unfortunately NaN is of type number &lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;expected a and b to be a Number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// throws&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// throws&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// throws&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// throws&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="c1"&gt;// throws&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="c1"&gt;// throws&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="c1"&gt;// throws&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 3, yeay!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;explicit conversion before coercion can happen
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// preventing NaN by using parameter defaults&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// a1, b1 could be NaN so check them&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Expected input to be number-alike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// throws&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="c1"&gt;// throws&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="c1"&gt;// throws&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="c1"&gt;// throws&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 3, yeay!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#a-note-on-typescript"&gt;
  &lt;/a&gt;
  A note on TypeScript
&lt;/h3&gt;

&lt;p&gt;Simply using typescript won't fix the issue:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;NaN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// NaN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will therefore end up with one of the above strategies. Let me know if you came up with another strategy.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#7-fire-using-truthy-falsy-in-branch-evaluations"&gt;
  &lt;/a&gt;
  7. 🔥 Using truthy / falsy in branch evaluations &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isDefined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;
&lt;span class="nx"&gt;isDefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false, should be true&lt;/span&gt;
&lt;span class="nx"&gt;isDefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false, should be true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#involved-issues"&gt;
  &lt;/a&gt;
  Involved issues
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Runtime errors&lt;/li&gt;
&lt;li&gt;Undefined application state&lt;/li&gt;
&lt;li&gt;Potential security risk if user input is involved&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#potential-fixes"&gt;
  &lt;/a&gt;
  Potential fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Avoid truthy/falsy evaluations and evaluate strict&lt;/li&gt;
&lt;li&gt;Additionally: have high test coverage; use fuzzing; test for edge cases&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isDefined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;isDefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;isDefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;isDefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true &amp;lt;-- uh oh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Finally:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isDefined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="nx"&gt;isDefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;isDefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;isDefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you don't want to use the &lt;code&gt;typeof&lt;/code&gt; check here, you can alternatively use &lt;code&gt;x !== (void 0)&lt;/code&gt;.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#8-fire-using-object-bracket-notation-with-user-input"&gt;
  &lt;/a&gt;
  8. 🔥 Using object bracket notation with user input &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;A very underrated issues arises, when &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors"&gt;accessing properties via Object-Bracket notation&lt;/a&gt; by user input.&lt;/p&gt;

&lt;p&gt;This is, because bracket-notation allows us even to override properties of the prototype-chain like &lt;code&gt;__proto__&lt;/code&gt; or &lt;code&gt;prototype&lt;/code&gt; and thus potentially affecting all Objects in the current scope.&lt;/p&gt;

&lt;p&gt;With prototype pollution an attacker is able to manipulate properties in the prototype chain and exploit this fact to gain privileged access.&lt;/p&gt;

&lt;p&gt;Consider the following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jane Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="na"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// good use&lt;/span&gt;
&lt;span class="nx"&gt;updateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;profile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;locale&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;de-DE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// bad use&lt;/span&gt;
&lt;span class="nx"&gt;updateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;__proto__&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;exploit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;All your base are belong to us&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// consequence of this&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="nx"&gt;newObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exploit&lt;/span&gt; &lt;span class="c1"&gt;// "All your base are belong to us"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I admin this example is inherently dangerous as it contains so many problems but I tried to break it down to give you the idea how easily a prototype pollution can occur with bracket notation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#involved-issues"&gt;
  &lt;/a&gt;
  Involved issues
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Exploitable vulnerability&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#potential-fixes"&gt;
  &lt;/a&gt;
  Potential fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;use explicit variable names
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updateUserProfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;age&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;Object.prototype.hasOwnProperty&lt;/code&gt; to check
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;updateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;__proto__&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;exploit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;All your base are belong to us&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="nx"&gt;newObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exploit&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;use a &lt;code&gt;Proxy&lt;/code&gt; Object
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;forbidden&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;__proto__&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prototype&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;constructor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jane Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="na"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;forbidden&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// log this incident&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// ... otherwise do processing&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;updateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;profile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;locale&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;de-DE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;updateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;__proto__&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;exploit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;All your base are belong to us&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: &lt;a href="https://github.com/Kirill89/prototype-pollution-exploits"&gt;libraries are not a silver-bullet&lt;/a&gt; here!&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#9-fire-validate-numbers-only-halfway"&gt;
  &lt;/a&gt;
  9. 🔥 Validate numbers only half-way &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We already covered the problems with &lt;code&gt;'number'&lt;/code&gt; types in previous sections:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;isNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;NaN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;isNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MAX_VALUE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;isNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MIN_VALUE&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, there is much more to validating numerical input. Consider a few potential cases here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;value is expected to be integer but is a float&lt;/li&gt;
&lt;li&gt;value is not a "safe" integer (max./min. supported Int value)&lt;/li&gt;
&lt;li&gt;value is +/-Infinity but expected to be finite&lt;/li&gt;
&lt;li&gt;value is beyond Number.MIN_VALUE&lt;/li&gt;
&lt;li&gt;value is beyond Number.MAX_VALUE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The potential issues should be clear by now (unless you skipped the first couple of sections) so let's find a modular way to handle as many of these cases as possible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#base-check-for-value-to-be-a-raw-number-endraw-"&gt;
  &lt;/a&gt;
  Base check for value to be a &lt;code&gt;Number&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isValidNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; NaN&lt;/span&gt;
&lt;span class="nx"&gt;isNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false, as expected&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We simply don't want "not a number" to be interpreted as a number, that's just insane.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#check-for-value-to-be-a-safe-integer-raw-number-endraw-"&gt;
  &lt;/a&gt;
  Check for value to be a safe integer &lt;code&gt;Number&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isValidInteger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;isValidNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isSafeInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;isValidInteger&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;isValidInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;({}))&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;isValidInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.357911&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;isValidInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;isValidInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the edge case of &lt;code&gt;1.0&lt;/code&gt; which is internally in JS treated as integer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "1"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#check-for-value-to-be-a-safe-computable-raw-number-endraw-"&gt;
  &lt;/a&gt;
  Check for value to be a safe (computable) &lt;code&gt;Number&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isInFloatBounds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;isValidNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MIN_VALUE&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MAX_VALUE&lt;/span&gt;

&lt;span class="nx"&gt;isInFloatBounds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;isInFloatBounds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="c1"&gt;// check for MAX_VALUE&lt;/span&gt;
&lt;span class="nx"&gt;isInFloatBounds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;isInFloatBounds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="c1"&gt;// check for MIN_VALUE&lt;/span&gt;
&lt;span class="nx"&gt;isInFloatBounds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;isInFloatBounds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure the value is in between the usable range. Everything beyond that should be handled using &lt;code&gt;BigInt&lt;/code&gt; or a specialized library for large Numbers.&lt;/p&gt;

&lt;p&gt;Also note, that allthough these values are considered valid floats, you may still find odd interpretations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;almostZero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001&lt;/span&gt;
&lt;span class="nx"&gt;isInFloatBounds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;almostZero&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;almostZero&lt;/span&gt; &lt;span class="c1"&gt;// 1e-323&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;zero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001&lt;/span&gt;
&lt;span class="nx"&gt;isInFloatBounds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;zero&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;zero&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#check-is-value-is-a-valid-float-raw-number-endraw-"&gt;
  &lt;/a&gt;
  Check is value is a valid float &lt;code&gt;Number&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isValidFloat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isValidNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;// this is debatable&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isInFloatBounds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This section already reveals the next one: simply avoid any serious floating point computations with &lt;code&gt;Number&lt;/code&gt; in JavaScript!&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#10-fire-rely-on-number-arithmetic-for-floats"&gt;
  &lt;/a&gt;
  10. 🔥 Rely on Number arithmetic for floats&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In order to understand this section, let's read on the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number"&gt;JavaScript Number implementation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The JavaScript Number type is a double-precision 64-bit binary format IEEE 754 value, like double in Java or C#. This means it can represent fractional values, but there are some limits to what it can store. A Number only keeps about 17 decimal places of precision; arithmetic is subject to rounding. The largest value a Number can hold is about 1.8E308. Numbers beyond that are replaced with the special Number constant Infinity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some examples, where this can become problematic:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#rounding-issues"&gt;
  &lt;/a&gt;
  Rounding issues
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt; &lt;span class="c1"&gt;// 0.30000000000000004&lt;/span&gt;
&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Think of systems, where currencies are involved or calculation results are used for life-affecting decisions. Even the smallest rounding errors can lead to catastrophic consequences. 🔥&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#conversion-between-number-systems"&gt;
  &lt;/a&gt;
  Conversion between number systems
&lt;/h3&gt;

&lt;p&gt;Try to convert float to hex or to bin and back to float is not possible out-of-the box:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.357911&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1.5ba00e27e0efa&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// 1.010110111010000000001110001001111110000011101111101&lt;/span&gt;

&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1.5&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1.01011011101&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#working-with-large-numbers-is-easily-broken-when-using-raw-number-endraw-"&gt;
  &lt;/a&gt;
  Working with large numbers is easily broken when using &lt;code&gt;Number&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// integers&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MAX_SAFE_INTEGER&lt;/span&gt;
&lt;span class="nx"&gt;num&lt;/span&gt;       &lt;span class="c1"&gt;// 9007199254740991&lt;/span&gt;
&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="c1"&gt;// 9007199254741092, should be 9007199254741091&lt;/span&gt;

&lt;span class="c1"&gt;// floats&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MAX_VALUE&lt;/span&gt;
&lt;span class="nx"&gt;max&lt;/span&gt;           &lt;span class="c1"&gt;// 1.7976931348623157e+308&lt;/span&gt;
&lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;1.00001&lt;/span&gt; &lt;span class="c1"&gt;// Infinity&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#potential-solutions"&gt;
  &lt;/a&gt;
  Potential solutions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt"&gt;BigInt&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround"&gt;&lt;code&gt;Math.fround&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Use a library for precise arithmetic&lt;/li&gt;
&lt;li&gt;Use typed arrays to precisely convert between numerical systems&lt;/li&gt;
&lt;li&gt;Write your code in a way, that you can easily replace plain Number arithmetic with one of the above solutions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: I am not digging deeper into this as my best advice is to &lt;a href="https://github.com/MikeMcl"&gt;use a library that handles arithmetic precision&lt;/a&gt; for you. Doing your own implementations will easily still result in errors.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#11-fire-use-raw-ampamp-endraw-or-raw-endraw-in-conditional-returns"&gt;
  &lt;/a&gt;
  11. 🔥 Use &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; or &lt;code&gt;||&lt;/code&gt; in conditional returns &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This one is not definitive good or bad and rather depends on the situation. If you are certain, that the involved evaluations will always result in a boolean value then it it's safe to use them.&lt;/p&gt;

&lt;p&gt;As example you can review the extended Number checks above. However, consider the following example: You want to write a function, that checks, whether a given array is filled.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isFilled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nx"&gt;isFilled&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;isFilled&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;isFilled&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see the function has not a well-defined return type. It should return either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; but never &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In these case you should write your code more verbose and explicit in order to make sure, that functions really return only valid values:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Possible solution&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isFilled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="nx"&gt;isFilled&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;isFilled&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;isFilled&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Better&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This solution is just a half-baked one, better is to throw an error to ensure the function had the proper input to reason about - fail early, fail often to make your application more robust:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isFilled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;expected arr to be an Array&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;isFilled&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;isFilled&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;isFilled&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// throws Uncaught TypeError&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Related issues&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ambiguous return values, leading to potential branching issues and runtime errors&lt;/li&gt;
&lt;li&gt;Checks may fail&lt;/li&gt;
&lt;li&gt;Business/application logic becomes unreliable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Potential fixes&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use ternary operator&lt;/li&gt;
&lt;li&gt;return explicit&lt;/li&gt;
&lt;li&gt;use TypeScript&lt;/li&gt;
&lt;li&gt;Write extensive unit tests to ensure only valid return values are involved&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#12-fire-rely-on-pseudoprivate-properties"&gt;
  &lt;/a&gt;
  12. 🔥 Rely on pseudo-private properties &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If you work a bit longer in the JavaScript realm you may still remember these "psuedo"-private members: if they begin with an underscore they are intended (by convention) to be private and not used directly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#problems-involved"&gt;
  &lt;/a&gt;
  Problems involved:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;These properties are enumerable by default&lt;/li&gt;
&lt;li&gt;They can be manipulated without any restrictions&lt;/li&gt;
&lt;li&gt;By exploiting a prototype-pollution vulnerability they can theoretically be accessed by users; on the client they can be accessed anyway if the containing Object is accessible to the user&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#potential-fixes"&gt;
  &lt;/a&gt;
  Potential fixes:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use closures with real private variables
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Use a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy"&gt;&lt;code&gt;Proxy&lt;/code&gt; Object&lt;/a&gt; to have fine grained control about any member access&lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields"&gt;classes with private features&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Use my &lt;a href="https://github.com/jankapunkt/js-class-privacy"&gt;&lt;code&gt;class-privacy&lt;/code&gt;&lt;/a&gt; if you can't support private members yet&lt;/li&gt;
&lt;/ul&gt;





&lt;h2&gt;
  &lt;a href="#13-fire-other-problematic-stuff"&gt;
  &lt;/a&gt;
  13. 🔥 Other problematic stuff &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!"&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; without exactly knowing what you're doing&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#passing_string_literals"&gt;Passing String literals to &lt;code&gt;setTimeout&lt;/code&gt; (or &lt;code&gt;setInterval&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;rely on &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent"&gt;encodeURIComponent&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Next.js Authentication with Netlify Identity</title>
      <author>Pratik Bhagat</author>
      <pubDate>Tue, 27 Jul 2021 08:50:54 +0000</pubDate>
      <link>https://dev.to/bhagatpratik07/next-js-authentication-with-netlify-identity-3ghi</link>
      <guid>https://dev.to/bhagatpratik07/next-js-authentication-with-netlify-identity-3ghi</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Next.js is an open-source development framework built on top of Node.js enabling React-based web applications functionalities such as server-side rendering and generating static websites.&lt;/p&gt;

&lt;p&gt;In this guide, I will show you how to add authentication to your Next.js App using Netlify Identity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Basics of Next.js&lt;/p&gt;

&lt;p&gt;Context in React&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-nextjs-app"&gt;
  &lt;/a&gt;
  1. Next.js App
&lt;/h2&gt;

&lt;p&gt;First, create/select an app you would like to add authentication to. Deploy that app to Netlify so you can use Netlify Identity it's a service provided by Netlify to add authentication to your apps. &lt;/p&gt;

&lt;p&gt;If you don't have an app you can download the starter code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-next-app [your_project_name] -e https://github.com/bhagatpratik07/next-js-auth-blog/tree/blog

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: Change the name of the app before you run the command.&lt;/p&gt;

&lt;p&gt;Run the above command in the terminal. You will get a simple next.js application with Home and About Page. We will add authentication to this app. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-netlify-identity-in-our-app"&gt;
  &lt;/a&gt;
  Installing Netlify Identity in our App
&lt;/h3&gt;

&lt;p&gt;Netlify Identity is a service provided by Netlify to add authentication to our apps.&lt;/p&gt;

&lt;p&gt;Before we code we need to install Netlify identity in our app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install netlify-identity-widget
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the above command in the terminal to install Netlify Identity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-to-netlify"&gt;
  &lt;/a&gt;
  Deploying to Netlify
&lt;/h2&gt;

&lt;p&gt;Now that you have downloaded the starter code it's time to deploy it to Netlify. Head over to &lt;a href="https://www.netlify.com/"&gt;https://www.netlify.com/&lt;/a&gt; and deploy your site.  After deploying you should see something like this : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pc8AZlew--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627302005169/MPCtW362i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pc8AZlew--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627302005169/MPCtW362i.png" alt="Screenshot (2).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, click on Identity in navbar and click on Enable Identity. Now Netlify Identity is enabled in our app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-start"&gt;
  &lt;/a&gt;
  Let's Start
&lt;/h2&gt;

&lt;p&gt;Create a new contexts directory at the top level of our application and inside contexts create a new file called authContext.js. Our file structure should look something like this : &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wSJKgujn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627302492649/PdAdBOtta.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wSJKgujn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627302492649/PdAdBOtta.png" alt="Screenshot (4).png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#coding-our-authcontext"&gt;
  &lt;/a&gt;
  Coding our authContext
&lt;/h2&gt;

&lt;p&gt;Add the below code to our AuthContext&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { createContext} from "react";

export const AuthContext = createContext({
  user: null,
  login: () =&amp;gt; {},
  logout: () =&amp;gt; {},
  authReady: false,
});

const AuthContextProvider = ({ children }) =&amp;gt; {
  return &amp;lt;AuthContext.Provider&amp;gt;{children}&amp;lt;/AuthContext.Provider&amp;gt;;
};

export default AuthContextProvider;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, we create our AuthContext and give it default values like user initially is set to null. We have default functions for login and logout. We have authReady state, which is a boolean it will keep track of when we have established a connection with Netlify Identity. The reason we have authReady state is that when our app runs in the browser it doesn't know if the user is logged in or not. &lt;/p&gt;

&lt;p&gt;Until we establish connection with Netlify authReady will be false, when we do establish a connection with Netlify it will be set to true.&lt;/p&gt;

&lt;p&gt;Also, note that we have to wrap our app (pages/_app.js) with our context as we need to access context in our entire app. NavBar and Component are now children to our Context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// pages/_app.js

import NavBar from "../components/NavBar";
import AuthContextProvider from "../contexts/authContext";
import "../styles/globals.css";

function MyApp({ Component, pageProps }) {
  return (
    &amp;lt;AuthContextProvider&amp;gt;
      &amp;lt;NavBar /&amp;gt;
      &amp;lt;Component {...pageProps} /&amp;gt;
    &amp;lt;/AuthContextProvider&amp;gt;
  );
}

export default MyApp;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update your pages/_app.js file accordingly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#establishing-connection-with-netlify-identity"&gt;
  &lt;/a&gt;
  Establishing connection with Netlify Identity
&lt;/h2&gt;

&lt;p&gt;To establish a connection with netlify identity we will use the useEffect hook in react&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// contexts/authContext

import { createContext, useState, useEffect } from "react";
import { netlifyIdentity } from "netlify-identity-widget";

export const AuthContext = createContext({
  user: null,
  login: () =&amp;gt; {},
  logout: () =&amp;gt; {},
  authReady: false,
});

const AuthContextProvider = ({ children }) =&amp;gt; {
  useEffect(() =&amp;gt; {
    netlifyIdentity.init();
  }, []);
  return &amp;lt;AuthContext.Provider&amp;gt;{children}&amp;lt;/AuthContext.Provider&amp;gt;;
};

export default AuthContextProvider;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We import netlifyIdentity and inside our useEffect hook we simply need to add netlifyIdentity.init( ). All this will do is initialize connection with netlify identity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#providing-value-to-our-app"&gt;
  &lt;/a&gt;
  Providing value to our App
&lt;/h2&gt;

&lt;p&gt;Next, we need to provide login, logout, user values to our app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { createContext, useState, useEffect } from "react";
import netlifyIdentity from "netlify-identity-widget";

export const AuthContext = createContext({
  user: null,
  login: () =&amp;gt; {},
  logout: () =&amp;gt; {},
  authReady: false,
});

const AuthContextProvider = ({ children }) =&amp;gt; {
  const [user, setUser] = useState(null);


  useEffect(() =&amp;gt; {
      // on login
    netlifyIdentity.on("login", (user) =&amp;gt; {
      setUser(user);
      netlifyIdentity.close();
    });

    // on logout
    netlifyIdentity.on("logout", (user) =&amp;gt; {
      setUser(null);
    });


    // connect with Netlify Identity
    netlifyIdentity.init();
  }, []);

  const login = () =&amp;gt; {
    netlifyIdentity.open();
  };


  const logout = () =&amp;gt; {
    netlifyIdentity.logout();
  };


  const context = {
    login,
    logout,
    user,
  };


  return (
    &amp;lt;AuthContext.Provider value={context}&amp;gt;
    {children}
    &amp;lt;/AuthContext.Provider&amp;gt;
  );
};

export default AuthContextProvider;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's a lot of code...let me explain&lt;/p&gt;

&lt;p&gt;1.Login&lt;/p&gt;

&lt;p&gt;We create a login function in which we just use open( ) which is a built-in function of Netlify Identity. All this does is open a login/signup form. We will use this as a callback function on the login button.&lt;/p&gt;

&lt;p&gt;2.Logout&lt;/p&gt;

&lt;p&gt;Logout function is the same as the login function but we use logout( ) which is a built-in netlify function to log out the user.&lt;/p&gt;

&lt;p&gt;Also, we update our useEffect and we add event listeners to log in and log out actions. &lt;/p&gt;

&lt;p&gt;On login, the user will be set to the user from null and we close our form.&lt;/p&gt;

&lt;p&gt;On logout, we set our user to null.&lt;/p&gt;

&lt;p&gt;And we provide all this as context to our app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-loginlogout-buttons"&gt;
  &lt;/a&gt;
  Creating Login/Logout Buttons
&lt;/h2&gt;

&lt;p&gt;Now it's time to update our navbar. Open components/navbar file in the code editor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// components/navbar

import styles from "../styles/Home.module.css";
import Link from "next/link";
import { useContext } from "react";
import { AuthContext } from "../contexts/authContext";

const NavBar = () =&amp;gt; {
  const { user, login, logout } = useContext(AuthContext);
  return (
    &amp;lt;nav className={styles.nav}&amp;gt;
      &amp;lt;Link href="/"&amp;gt;
        &amp;lt;a&amp;gt;Home&amp;lt;/a&amp;gt;
      &amp;lt;/Link&amp;gt;
      &amp;lt;Link href="/about"&amp;gt;
        &amp;lt;a&amp;gt;About&amp;lt;/a&amp;gt;
      &amp;lt;/Link&amp;gt;
      &amp;lt;li&amp;gt;{!user &amp;amp;&amp;amp; &amp;lt;button onClick={login}&amp;gt;Login/Signup&amp;lt;/button&amp;gt;}&amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;{user &amp;amp;&amp;amp; &amp;lt;button onClick={logout}&amp;gt;Logout&amp;lt;/button&amp;gt;}&amp;lt;/li&amp;gt;
    &amp;lt;/nav&amp;gt;
  );
};

export default NavBar;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, we access login, logout, user values from our context using the useContext hook.&lt;/p&gt;

&lt;p&gt;Then we create a login button which on click fires off the login function we created in our context. Same with the logout button. &lt;/p&gt;

&lt;p&gt;We conditionally render the buttons based on if the user is logged in or not.&lt;/p&gt;

&lt;p&gt;Now click on the login button and voila.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tZQ_qzL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627321490757/96WV-IWJZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tZQ_qzL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627321490757/96WV-IWJZ.png" alt="Screenshot (5).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will ask you for the website URL. You just have to enter the URL of the website you deployed on Netlify.&lt;/p&gt;

&lt;p&gt;You can also add external providers such as Google, Github as login options. For that head back to Netlify and go to Site Settings -&amp;gt; Identity (on sidebar) and on external providers select the options you want to include.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XByxQ_Ts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627323621698/Vd0TgXI_P.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XByxQ_Ts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627323621698/Vd0TgXI_P.png" alt="Screenshot (7).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;First, we created authContext to globally provide user values to our Apps. We added user and log-in, logout functions (built-in Netlify Identity functions) in our Context and used them as callback functions to our Login and Logout buttons.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-for-reading-"&gt;
  &lt;/a&gt;
  Thank you for reading :)
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#drop-a-like-and-follow-me-if-you-found-this-useful"&gt;
  &lt;/a&gt;
  Drop a like and follow me if you found this useful 😊
&lt;/h2&gt;

</description>
      <category>react</category>
      <category>nextjs</category>
      <category>netlify</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A quick dive into 3 CSS keywords: min-content, max-content and fit-content</title>
      <author>Fabrizio Calderan</author>
      <pubDate>Tue, 27 Jul 2021 08:45:04 +0000</pubDate>
      <link>https://dev.to/fcalderan/a-quick-dive-into-3-css-keywords-min-content-max-content-and-fit-content-2nkf</link>
      <guid>https://dev.to/fcalderan/a-quick-dive-into-3-css-keywords-min-content-max-content-and-fit-content-2nkf</guid>
      <description>&lt;p&gt;The &lt;em&gt;&lt;a href="https://www.w3.org/TR/css-sizing-3/"&gt;CSS Box Sizing Module Level 3&lt;/a&gt;&lt;/em&gt; specs define 3 new sizing values:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;min-content&lt;/code&gt; — represents the minimum intrinsic size of an element. This means that when it's set as the &lt;code&gt;width&lt;/code&gt; (or &lt;code&gt;inline-size&lt;/code&gt;) of an element with text content, its size will be as long as the longest word. Every space or non-alphanumeric character (like hyphens, if hyphenation is &lt;code&gt;auto&lt;/code&gt;) can be used to apply a soft break, like in this example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F2PcFvXT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4dbv1d2wm4oswzyv73wk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F2PcFvXT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4dbv1d2wm4oswzyv73wk.png" alt="min-content example"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;code&gt;max-content&lt;/code&gt; – it works in the opposite way than &lt;code&gt;min-content&lt;/code&gt; since it represents the maximum intrinsic size of an element. &lt;/p&gt;

&lt;p&gt;When this keywords is set as the &lt;code&gt;width&lt;/code&gt; (or &lt;code&gt;inline-size&lt;/code&gt;) of an element with text content, it will be as long as the content without any line breaks. If the size of the parent is narrower then the element will cause an overflow, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WzmrYNJH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmzm15i6mmtn7whbtc2p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WzmrYNJH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmzm15i6mmtn7whbtc2p.png" alt="max-content example"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;code&gt;fit-content&lt;/code&gt; — it works like a mix of &lt;code&gt;min-content&lt;/code&gt; and &lt;code&gt;max-content&lt;/code&gt;: an element sized with this keyword will stretch to contain the text but it won't be &lt;em&gt;never&lt;/em&gt; longer than &lt;code&gt;max-content&lt;/code&gt; and &lt;em&gt;never&lt;/em&gt; shorter than &lt;code&gt;min-content&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sc09PGjh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmkaw0rhx6i9lcszky20.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sc09PGjh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmkaw0rhx6i9lcszky20.png" alt="fit-content example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that &lt;code&gt;fit-content&lt;/code&gt; is not the same as &lt;code&gt;auto&lt;/code&gt;: an element with &lt;code&gt;display: block;&lt;/code&gt; and &lt;code&gt;width: auto&lt;/code&gt; will always take the entire space available while &lt;code&gt;fit-content&lt;/code&gt; size is limited by its content.&lt;/p&gt;

&lt;p&gt;The last example will be more clear if you try it in this snippet and you resize the &lt;em&gt;result&lt;/em&gt; window.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/fcalderan/embed/ZEKvVNM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;As a side note, these keywords are not animatable and they can't be used inside a &lt;code&gt;calc()&lt;/code&gt; expression, like &lt;code&gt;inline-size: calc(min-content + 2rem)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Anyway you can still use them for other properties, like &lt;code&gt;max-width/max-inline-size&lt;/code&gt;, &lt;code&gt;min-width/min-inline-size&lt;/code&gt; or (in some browsers) &lt;code&gt;flex-basis&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#a-use-case-for-fitcontent"&gt;
  &lt;/a&gt;
  A use case for fit-content
&lt;/h2&gt;

&lt;p&gt;Exploring these keywords I've found a scenario where &lt;code&gt;fit-content&lt;/code&gt; can be somewhat useful.&lt;/p&gt;

&lt;p&gt;Let say that you have a link as the last element inside a paragraph, no &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; element before and no control over the markup: how could you show the link in a new line and centered?&lt;/p&gt;

&lt;p&gt;A possibility is to set &lt;code&gt;display: block&lt;/code&gt; on the link of course, but this will naturally expand it taking the full width of the parent, so you need to also set a &lt;code&gt;width&lt;/code&gt; (or &lt;code&gt;inline-size&lt;/code&gt;) to limit its size.&lt;/p&gt;

&lt;p&gt;Clearly the size should not be hardcoded with a fixed value, because the content may vary, but if you set instead &lt;code&gt;inline-size: fit-content&lt;/code&gt; the content now dictates the size of the element itself &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/fcalderan/embed/zYwpeXv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;and this is the final result. &lt;/p&gt;

&lt;p&gt;You can read more about it here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/min-content"&gt;min-content on MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/max-content"&gt;max-content on MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/fit-content"&gt;fit-content on MDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have found different and creative use cases for these keywords let me know in the comments👇 .&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#final-words-amp-thoughts"&gt;
  &lt;/a&gt;
  Final words &amp;amp; thoughts
&lt;/h2&gt;

&lt;p&gt;Feel free to &lt;a href="https://codepen.io/fcalderan/"&gt;follow me on Codepen&lt;/a&gt; or &lt;a href="https://twitter.com/fcalderan"&gt;Twitter&lt;/a&gt; where I usually talk about frontend and trees.&lt;/p&gt;

&lt;p&gt;Also, if this post was useful, you may take a look at my other &lt;strong&gt;carbon free&lt;/strong&gt; articles on dev or just retweet the announcement below:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--xqNx82s_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1409213607255150592/sDnD9EM6_normal.jpg" alt="Fabrizio Calderan profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Fabrizio Calderan
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/fcalderan"&gt;@fcalderan&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I published a new post on DEV community:&lt;br&gt;«A quick dive into 3 &lt;a href="https://twitter.com/hashtag/CSS"&gt;#CSS&lt;/a&gt; keywords: min-content, max-content and fit-content»&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/WOvhdXSogL"&gt;dev.to/fcalderan/a-qu…&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/ThePracticalDev"&gt;@ThePracticalDev&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      08:54 AM - 27 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1419944174082723840" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1419944174082723840" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1419944174082723840" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


</description>
      <category>css</category>
      <category>html</category>
      <category>tutorial</category>
      <category>codepen</category>
    </item>
    <item>
      <title>Protect Your SignalR Service Based Real-time Application with Application Gateway </title>
      <author>Yan Jin</author>
      <pubDate>Tue, 27 Jul 2021 08:42:38 +0000</pubDate>
      <link>https://dev.to/azure/protect-your-signalr-service-based-real-time-application-with-application-gateway-31cf</link>
      <guid>https://dev.to/azure/protect-your-signalr-service-based-real-time-application-with-application-gateway-31cf</guid>
      <description>&lt;p&gt;By &lt;a href="https://docs.microsoft.com/azure/azure-signalr/howto-private-endpoints"&gt;using the Azure Private Endpoint for your Azure SignalR&lt;/a&gt;, it allows clients on a virtual network (VNet) to securely access data over a &lt;a href="https://docs.microsoft.com/en-us/azure/private-link/private-link-service-overview"&gt;Private Link&lt;/a&gt;. As next step, let’s learn how to use the &lt;a href="https://docs.microsoft.com/en-us/azure/application-gateway/overview"&gt;Azure Application Gateway&lt;/a&gt; for your Azure SignalR to manage the real-time traffic.  &lt;/p&gt;

&lt;p&gt;Azure Application Gateway is a web traffic load balancer that enables you to manage traffic to your web applications. Using the Azure Application Gateway with Azure SignalR Service enables you to:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Protect your applications from common web vulnerabilities.
&lt;/li&gt;
&lt;li&gt;Get application-level load-balancing for your scalable and highly available applications.
&lt;/li&gt;
&lt;li&gt;Setup end to end secure. &lt;/li&gt;
&lt;li&gt;Customize the domain name. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s go through the key steps together and learn how to implement this reference solution:  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The Application Gateway helps you protect your applications and setup end to end secure.
&lt;/li&gt;
&lt;li&gt;The client cannot access the Azure SignalR Service instance through public network, and all the traffic is managed through Application Gateway.
&lt;/li&gt;
&lt;li&gt;The traffic between App Service and SignalR Service is also protected by Virtual Network. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6QQOf7DJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://techcommunity.microsoft.com/t5/image/serverpage/image-id/298568i2D82DD50A2A0BCCA/image-size/medium%3Fv%3Dv2%26px%3D400" alt="High level digram"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#setup-the-virtual-network"&gt;
  &lt;/a&gt;
  Setup the Virtual Network
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Create the &lt;a href="https://azure.microsoft.com/services/virtual-network"&gt;Virtual Network&lt;/a&gt; &lt;strong&gt;&lt;em&gt;VN1&lt;/em&gt;&lt;/strong&gt;.
&lt;/li&gt;
&lt;li&gt;There is a default subnet already created, and add 2 new subnets:

&lt;ul&gt;
&lt;li&gt;Subnet &lt;strong&gt;&lt;em&gt;applicationSN&lt;/em&gt;&lt;/strong&gt; for your &lt;a href="https://azure.microsoft.com/services/app-service/"&gt;App Service&lt;/a&gt; or &lt;a href="https://azure.microsoft.com/services/functions/"&gt;Azure Functions&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt;Subnet &lt;strong&gt;&lt;em&gt;gatewaySN&lt;/em&gt;&lt;/strong&gt; for Application Gateway. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NmgZ5O1N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://techcommunity.microsoft.com/t5/image/serverpage/image-id/298570iDE77A06747CD74F6/image-dimensions/499x186%3Fv%3Dv2" alt="Virtual Network Configuration"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#setup-signalr-service"&gt;
  &lt;/a&gt;
  Setup SignalR Service
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Create the resource of Azure SignalR Service &lt;strong&gt;&lt;em&gt;ASRS1&lt;/em&gt;&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;Go to the &lt;strong&gt;&lt;em&gt;ASRS1&lt;/em&gt;&lt;/strong&gt; in the portal. &lt;/li&gt;
&lt;li&gt;Go to the Private endpoint connections blade, and create a new private endpoint &lt;strong&gt;&lt;em&gt;PE1&lt;/em&gt;&lt;/strong&gt; with the &lt;strong&gt;&lt;em&gt;VN1&lt;/em&gt;&lt;/strong&gt; and its &lt;strong&gt;&lt;em&gt;default subnet&lt;/em&gt;&lt;/strong&gt;. Learn more details about &lt;a href="https://docs.microsoft.com/en-us/azure/azure-signalr/howto-private-endpoints"&gt;use private endpoint for Azure SignalR Service&lt;/a&gt;. 

&lt;ul&gt;
&lt;li&gt;Resource &lt;/li&gt;
&lt;li&gt;Resource Type: Microsoft.SignalRService/SignalR &lt;/li&gt;
&lt;li&gt;Resource: &lt;strong&gt;&lt;em&gt;ASRS1&lt;/em&gt;&lt;/strong&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JKV8oZvT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://techcommunity.microsoft.com/t5/image/serverpage/image-id/298573i3C7FBE9B69E8FA15/image-size/medium%3Fv%3Dv2%26px%3D400" alt="SignalR Service Resource"&gt;
&lt;/li&gt;
&lt;li&gt;Configuration &lt;/li&gt;
&lt;li&gt;Integration with private DNS zone: Yes &lt;/li&gt;
&lt;li&gt;Subnet: default subnet in VN1 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R6oS99vT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://techcommunity.microsoft.com/t5/image/serverpage/image-id/298572i3DD2D04F430E6783/image-size/medium%3Fv%3Dv2%26px%3D400" alt="SignalR Service Configuration"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Go to the network access control blade of ASRS1 and disable the all connections in public network.
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#setup-the-application-gateway"&gt;
  &lt;/a&gt;
  Setup the Application Gateway
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Create the &lt;a href="https://azure.microsoft.com/services/application-gateway"&gt;Application Gateway&lt;/a&gt; &lt;strong&gt;&lt;em&gt;AG1&lt;/em&gt;&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;In the Basic, use the &lt;strong&gt;&lt;em&gt;VN1&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;gatewaySN&lt;/em&gt;&lt;/strong&gt; to configure the virtual network.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TWOCRFII--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://techcommunity.microsoft.com/t5/image/serverpage/image-id/298576iA2B8FC1EA1828A1B/image-size/medium%3Fv%3Dv2%26px%3D400" alt="Application Gateway - Basic"&gt;
&lt;/li&gt;
&lt;li&gt;In the Frontends, create a new public address.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nmy1TwLQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://techcommunity.microsoft.com/t5/image/serverpage/image-id/298575i5B2B6D532C69145E/image-size/medium%3Fv%3Dv2%26px%3D400" alt="Application Gateway - Frontends"&gt;
&lt;/li&gt;
&lt;li&gt;In the Backends, create a new backend pool signalr for the SignalR Service resource. You need to use the host name of the SignalR Service resource as the Target. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9PylkXXn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://techcommunity.microsoft.com/t5/image/serverpage/image-id/298574i3E0ADDD849D6A4D2/image-size/medium%3Fv%3Dv2%26px%3D400" alt="Application Gateway - Backends"&gt;
&lt;/li&gt;
&lt;li&gt;In the Configuration, add a new routing rule signalrrule to route the traffic to SignalR Service. You need to create a new HTTP setting.

&lt;ul&gt;
&lt;li&gt;Listener &lt;/li&gt;
&lt;li&gt;Protocol: HTTP (We use the HTTP frontend protocol on Application Gateway in this blog to simplify the demo and help you get started easier. But in reality, you may need to enable HTTPs and Customer Domain on it with production scenario.)
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QxSX6R5i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://techcommunity.microsoft.com/t5/image/serverpage/image-id/298577iDFAF0C0B4C92A1A1/image-size/medium%3Fv%3Dv2%26px%3D400" alt="Application Gateway - Listener"&gt; &lt;/li&gt;
&lt;li&gt;Backend targets
&lt;/li&gt;
&lt;li&gt;Target type: Backend pool &lt;/li&gt;
&lt;li&gt;Add new HTTP setting

&lt;ul&gt;
&lt;li&gt;Backend protocol: HTTPs &lt;/li&gt;
&lt;li&gt;Use well known CA certificate: Yes &lt;/li&gt;
&lt;li&gt;Override with new host name: Yes &lt;/li&gt;
&lt;li&gt;Host name override: Pick host name from backend target.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JBKEoVLd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://techcommunity.microsoft.com/t5/image/serverpage/image-id/298579i2BD58CF013432744/image-size/medium%3Fv%3Dv2%26px%3D400" alt="Application Gateway - Backend"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Review and create the AG1 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ximslW6c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://techcommunity.microsoft.com/t5/image/serverpage/image-id/298578i286727C97E7C80C3/image-size/medium%3Fv%3Dv2%26px%3D400" alt="Application Gateway - Create"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, we already setup the Virtual Network, SignalR Service and Application Gateway. Let’s quick test whether the configuration is correct.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to the network access control blade of ASRS1 and set public network to allow server connection only. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6u3bYQOT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://techcommunity.microsoft.com/t5/image/serverpage/image-id/298581iEB693BA66C572E69/image-size/medium%3Fv%3Dv2%26px%3D400" alt="Configuration Test"&gt;
&lt;/li&gt;
&lt;li&gt;Go to AG1, open health probe, change the health probe path to /api/v1/health 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kOYvw2xt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://techcommunity.microsoft.com/t5/image/serverpage/image-id/298582iFAADEBD401C9E9ED/image-size/medium%3Fv%3Dv2%26px%3D400" alt="Configuration Test"&gt;
&lt;/li&gt;
&lt;li&gt;Go to the Overview blade of AG1, and find out the Frontend public IP address &lt;/li&gt;
&lt;li&gt;Open http://, and it should return 403. &lt;/li&gt;
&lt;li&gt;Open http:///api/v1/health, and it should return 200. &lt;/li&gt;
&lt;li&gt;Go back to the network access control blade of ASRS1 and disable the server connection in public network.
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#run-a-chat-application-locally"&gt;
  &lt;/a&gt;
  Run a Chat Application Locally
&lt;/h2&gt;

&lt;p&gt;Now, the traffic to Azure SignalR is already managed by the Application gateway. The customer could only use the public IP address or custom domain name to access the resource. In this blog, let’s use the &lt;a href="https://github.com/aspnet/AzureSignalR-samples/tree/main/samples/ChatRoom"&gt;chat application&lt;/a&gt; as an example, and start from running it locally.  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clone the github repo &lt;a href="https://github.com/aspnet/AzureSignalR-samples"&gt;https://github.com/aspnet/AzureSignalR-samples&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Go to the Keys blade of ASRS1 and get the connection string
&lt;/li&gt;
&lt;li&gt;Go to samples/Chatroom and open the shell &lt;/li&gt;
&lt;li&gt;Set the connection string and run the application locally
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet restore 
dotnet user-secrets set Azure:SignalR:ConnectionString "&amp;lt;connection-string-of-ASR1&amp;gt;;ClientEndpoint=http://&amp;lt; frontend-public-IP-address-of-AG1&amp;gt;" 
dotnet run 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Open &lt;a href="http://localhost:5000"&gt;http://localhost:5000&lt;/a&gt; and view network traces via explorer to see WebSocket connection is established through AG1  
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TB4kLX4i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://techcommunity.microsoft.com/t5/image/serverpage/image-id/298583iF7CDDD3105B8B701/image-dimensions/687x177%3Fv%3Dv2" alt="Run Test"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#deploy-the-chat-application-to-azure"&gt;
  &lt;/a&gt;
  Deploy the Chat Application to Azure
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Create a Web App &lt;strong&gt;&lt;em&gt;WA1&lt;/em&gt;&lt;/strong&gt;. 

&lt;ul&gt;
&lt;li&gt;Publish: Code &lt;/li&gt;
&lt;li&gt;Runtime stack: .NET Core 3.1 &lt;/li&gt;
&lt;li&gt;Operation System: Windows &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Go to Networking blade and configure the VNET integration.
&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;&lt;em&gt;VN1&lt;/em&gt;&lt;/strong&gt; and webapp subnet &lt;strong&gt;&lt;em&gt;applicationSN&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Publish the Web App with CLI 

&lt;ul&gt;
&lt;li&gt;Publishe the application and its dependencies to a folder for deployment
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet publish -c Release 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Package the bin\Release\netcoreapp3.1\publish folder as &lt;strong&gt;&lt;em&gt;app.zip&lt;/em&gt;&lt;/strong&gt;.
&lt;/li&gt;
&lt;li&gt;Perform deployment using the kudu zip push deployment.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;az login  
az account set –subscription &amp;lt;your-subscription-name-used-to-create-WA1&amp;gt; 
az webapp deployment source config-zip -n WA1 -g &amp;lt;resource-group-of-WA1&amp;gt; --src app.zip 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Go to the Configuration blade of &lt;strong&gt;&lt;em&gt;WA1&lt;/em&gt;&lt;/strong&gt;, and add following application setting to set connection string and enable private DNS zone.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Azure__SignalR__ConnectionString=&amp;lt;connection-string-of-ASR1&amp;gt;;ClientEndpoint=http://&amp;lt; frontend-public-IP-address-of-AG1&amp;gt; 
WEBSITE_DNS_SERVER=168.63.129.16 
WEBSITE_VNET_ROUTE_ALL=1  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Go to the TLS/SSL settings blade of &lt;strong&gt;&lt;em&gt;WA1&lt;/em&gt;&lt;/strong&gt;, and turn off the HTTPS Only. To Simplify the demo, we used the HTTP frontend protocol on Application Gateway. Therefore, we need to turn off this option to avoid changing the HTTP URL to HTTPs automatically.
&lt;/li&gt;
&lt;li&gt;Go to the Overview blade and get the URL of &lt;strong&gt;&lt;em&gt;WA1&lt;/em&gt;&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;Open the URL by replacing the https with http, and open network traces to see WebSocket connection is established through &lt;strong&gt;&lt;em&gt;AG1&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;Now, you are successful to build a real-time chatroom application with Azure SignalR Service and use Application Gateway to protect your applications and setup end to end secure.  &lt;/p&gt;

&lt;p&gt;If you are trying to build your own application with Azure SignalR and Application Gateway, you could also get more helpful resources from the &lt;a href="https://docs.microsoft.com/en-us/azure/azure-signalr/"&gt;Azure SignalR Service&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/en-us/azure/application-gateway"&gt;Azure Application Gateway&lt;/a&gt;. We are looking forward your feedback and ideas to help us become better via &lt;a href="https://feedback.azure.com/forums/915436-azure-signalr-service"&gt;Azure Feedback Forum&lt;/a&gt;! You could also go to &lt;a href="https://techcommunity.microsoft.com/t5/apps-on-azure/bg-p/AppsonAzureBlog"&gt;Tech Community&lt;/a&gt; to learn more blogs about Azure SignalR Service.&lt;/p&gt;

&lt;p&gt;  &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>security</category>
      <category>realtime</category>
    </item>
    <item>
      <title>You don’t need React for building websites</title>
      <author>Silvestar Bistrović</author>
      <pubDate>Tue, 27 Jul 2021 08:28:02 +0000</pubDate>
      <link>https://dev.to/starbist/you-don-t-need-react-for-building-websites-455f</link>
      <guid>https://dev.to/starbist/you-don-t-need-react-for-building-websites-455f</guid>
      <description>&lt;p&gt;Here’s what I think: if you are building websites, you don’t need React (in most cases).&lt;/p&gt;

&lt;p&gt;I have been building websites for over nine years now. As I get more experienced, I use fewer libraries and frameworks and rely on good old HTML, CSS, and vanilla JavaScript. I think you should consider doing the same.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-rant-about-react"&gt;
  &lt;/a&gt;
  My rant about React
&lt;/h2&gt;

&lt;p&gt;Ever since React came to the stage, I’ve been hearing, reading, and watching how great it is. I had a few attempts to learn it, but I failed every time. It is fair to say that I don’t understand it, so I cannot even rant about its features, shortcomings, or flaws.&lt;/p&gt;

&lt;p&gt;What I can rant about is the hype. I mean, it’s not even hype after all these years. It is a necessary evil. Of course, I am exaggerating here, but maybe not.&lt;/p&gt;

&lt;p&gt;I feel like 9 out of 10 job ads for a frontend developer mention React.&lt;/p&gt;

&lt;p&gt;I don’t get it. Why would I need to use React if I am supposed to work on building websites? Are employers afraid that if you don’t know React that you wouldn’t be able to make a landing page? Would knowing React help you solve any problems when creating a new layout or template? I cannot think of any part of the website that would require React.&lt;/p&gt;

&lt;p&gt;All these questions made me realize that I don’t need frameworks for my everyday work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#there-might-be-a-solution"&gt;
  &lt;/a&gt;
  There might be a solution
&lt;/h2&gt;

&lt;p&gt;Instead of adding React to every frontend job ad, employers should emphasize HTML, CSS, JavaScript, and accessibility skills. These four amigos are the only thing you need to make websites perform well, achieve a solid SEO score, and allow every user to consume the content.&lt;/p&gt;

&lt;p&gt;Brad Frost wrote about &lt;a href="https://bradfrost.com/blog/post/front-of-the-front-end-and-back-of-the-front-end-web-development/"&gt;front-of-the-frontend&lt;/a&gt;. Chris Coyier wrote about &lt;a href="https://css-tricks.com/the-great-divide/"&gt;the great divide&lt;/a&gt;. I agree with both of them, but I would make the following distinction: web app developer and website developer.&lt;/p&gt;

&lt;p&gt;The web app developer does need React or similar frameworks.&lt;/p&gt;

&lt;p&gt;The website developer doesn’t need React or similar frameworks.&lt;/p&gt;

&lt;p&gt;Of course, there are exceptions, but I am talking in general here.&lt;/p&gt;

&lt;p&gt;I am in a situation where I don’t need to apply to new positions and choose my employer often, but I keep my eye on job ads frequently. I sympathize with developers who are capable of building solid websites but struggle to find a job because of the lack of React skills. I know at least one person who would be thankful if React skill wouldn’t be listed so often — a friend of mine (and my mentee) with whom I share the office these days.&lt;/p&gt;

&lt;p&gt;I propose a simple solution: if the job is about building sites, please stop adding React as a required skill unless absolutely necessary. It might be helpful to use the &lt;strong&gt;website&lt;/strong&gt; developer term, too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Knowing React could only make you a better developer, and I am not saying you shouldn’t learn it. However, I am saying that it is not needed in most cases if your goal is to build websites.&lt;/p&gt;

&lt;p&gt;I hope more people would realize how powerful HTML, CSS, and JavaScript are and that these come with the most features that you’ll ever need for building a website. Simpler is usually better.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
    </item>
  </channel>
</rss>
