<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Clean up your storage using Appwrite Cloud functions!</title>
      <author>Christy Jacob</author>
      <pubDate>Wed, 14 Jul 2021 05:36:42 +0000</pubDate>
      <link>https://dev.to/appwrite/clean-up-your-storage-using-appwrite-cloud-functions-210i</link>
      <guid>https://dev.to/appwrite/clean-up-your-storage-using-appwrite-cloud-functions-210i</guid>
      <description>&lt;p&gt;&lt;strong&gt;Appwrite 0.9&lt;/strong&gt; adds support for both &lt;strong&gt;Java&lt;/strong&gt; and &lt;strong&gt;Kotlin&lt;/strong&gt; runtimes in Cloud Functions, growing the list of supported runtimes to &lt;strong&gt;over 15(!)&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;This example will walk you through the process of creating and uploading a &lt;strong&gt;Kotlin cloud function.&lt;/strong&gt; In particular, we'll teach you how to use cloud functions to periodically clean up your storage and delete unnecessary files! This example also highlights how Appwrite can integrate seamlessly with 3rd party APIs and coexist with your existing stack. Without further ado, let's dive right in!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  üìù Prerequisites
&lt;/h2&gt;

&lt;p&gt;At this stage, we assume that you already have an Appwrite instance up and running. If you do not have Appwrite setup yet, you can follow the super easy installation &lt;strong&gt;step&lt;/strong&gt; over at &lt;a href="https://appwrite.io/docs/installation"&gt;appwrite.io&lt;/a&gt;. It's not a typo. There really is only 1 step!&lt;/p&gt;

&lt;p&gt;You also need to create an &lt;strong&gt;API Key&lt;/strong&gt; from the Appwrite dashboard with the following scopes granted&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;files.read&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;files.write&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#create-your-project"&gt;
  &lt;/a&gt;
  üìΩÔ∏è Create your project
&lt;/h2&gt;

&lt;p&gt;Create a new Kotlin project using IntelliJ ( or Eclipse ) and choose Maven as your build system. Set the artifact ID accordingly and click proceed. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fMuXJS7y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ftcb8kzsxwy5u8g5zhv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fMuXJS7y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ftcb8kzsxwy5u8g5zhv.png" alt="create_project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the project is created, we'll add our dependencies. For this example, we will be using two dependencies.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Appwrite Kotlin SDK&lt;/strong&gt; (io.appwrite:sdk-for-kotlin:0.0.0-SNAPSHOT)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Google's GSON Library&lt;/strong&gt; (com.google.code.gson:gson:2.8.7)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add the following lines to the &lt;code&gt;&amp;lt;dependencies&amp;gt;&lt;/code&gt; section of your &lt;code&gt;pom.xml&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.appwrite&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;sdk-for-kotlin&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.0.0-SNAPSHOT&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.google.code.gson&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;gson&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.8.7&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Load the Maven changes from the UI or using the shortcut &lt;code&gt;Ctrl + Shift + O&lt;/code&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SlXKyqsa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1tw2jngnt6zg11q16xhf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SlXKyqsa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1tw2jngnt6zg11q16xhf.png" alt="refresh_maven"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#write-some-code"&gt;
  &lt;/a&gt;
  üë©‚Äçüíª Write some code
&lt;/h2&gt;

&lt;p&gt;Now that the dependencies are fetched, it's time to write some code.&lt;/p&gt;

&lt;p&gt;Create a new Kotlin file under &lt;code&gt;src/main/kotlin&lt;/code&gt; and name it &lt;code&gt;StorageCleaner.kt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, create a main function and initialize the Appwrite Client and Storage APIs. We'll be using environment variables to store our secrets and other configurable values. We will also store the file expiry date as an environment variable so that the cloud function can be configured without a redeployment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.Client&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.services.Storage&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlin.system.exitProcess&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;client&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"APPWRITE_ENDPOINT"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"APPWRITE_FUNCTION_PROJECT_ID"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"APPWRITE_API_KEY"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;storage&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Storage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;daysToExpire&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"DAYS_TO_EXPIRE"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;toFloatOrNull&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;daysToExpire&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Unable to parse DAYS_TO_EXPIRE."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;exitProcess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before the next step, we need to create a few model classes to parse our JSON response. Create a new Kotlin file &lt;code&gt;Models.kt&lt;/code&gt; under &lt;code&gt;src/main/kotlin&lt;/code&gt; and add the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;Permissions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;write&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;

&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="err"&gt;`$&lt;/span&gt;&lt;span class="py"&gt;id`&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="err"&gt;`$&lt;/span&gt;&lt;span class="py"&gt;permissions`&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Permissions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;dateCreated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;mimeType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;sizeOriginal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;FileList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;File&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;?)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's fetch the last 100 files that were uploaded to storage. Add the following lines to &lt;code&gt;StorageCleaner.kt&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gi"&gt;+import com.google.gson.Gson
&lt;/span&gt;&lt;span class="p"&gt;import io.appwrite.Client
import io.appwrite.services.Storage
import kotlin.system.exitProcess
&lt;/span&gt;
+suspend fun main(args: Array&amp;lt;String&amp;gt;) {
    val client = Client()
        .setEndpoint(System.getenv("APPWRITE_ENDPOINT"))
        .setProject(System.getenv("APPWRITE_FUNCTION_PROJECT_ID"))
        .setKey(System.getenv("APPWRITE_API_KEY"))
    val storage = Storage(client)

    val daysToExpire = System.getenv("DAYS_TO_EXPIRE").toFloatOrNull()
    if (daysToExpire == null) {
        println("Unable to parse DAYS_TO_EXPIRE.")
        exitProcess(1)
    }

+   val fileList = storage.listFiles("",100, 0, "DESC").body?.string() ?: ""
&lt;span class="gi"&gt;+   val files: FileList = Gson().fromJson(fileList, FileList::class.java)
&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's write the logic to delete files older than &lt;code&gt;daysToExpire&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;import com.google.gson.Gson
import io.appwrite.Client
import io.appwrite.services.Storage
&lt;/span&gt;&lt;span class="gi"&gt;+ import java.util.*
&lt;/span&gt;&lt;span class="p"&gt;import kotlin.system.exitProcess
&lt;/span&gt;
suspend fun main(args: Array&amp;lt;String&amp;gt;) {
    val client = Client()
        .setEndpoint(System.getenv("APPWRITE_ENDPOINT"))
        .setProject(System.getenv("APPWRITE_FUNCTION_PROJECT_ID"))
        .setKey(System.getenv("APPWRITE_API_KEY"))
    val storage = Storage(client)

    val daysToExpire = System.getenv("DAYS_TO_EXPIRE").toFloatOrNull()
    if (daysToExpire == null) {
        println("Unable to parse DAYS_TO_EXPIRE.")
        exitProcess(1)
    }

    val fileList = storage.listFiles("",100, 0, "DESC").body?.string() ?: ""
    val files: FileList = Gson().fromJson(fileList, FileList::class.java)

+   var deletedFiles =  0
&lt;span class="gi"&gt;+   for( file in files.files!!) {
+       val diff: Long = Date().time/1000 - file.dateCreated
+       if (diff &amp;gt; daysToExpire * 24 * 60 * 60) {
+           storage.deleteFile(file.`$id`)
+           println("Deleted ${file.`$id`}")
+           deletedFiles++
+       }
+   }
+   println("Total files deleted: $deletedFiles")
&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we've written all the required code, we need to package our function as a &lt;code&gt;.jar&lt;/code&gt;. Fortunately, this can be done really easily using IntelliJ, so let's see how.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-artifacts"&gt;
  &lt;/a&gt;
  ‚öôÔ∏è Configure artifacts.
&lt;/h2&gt;

&lt;p&gt;In this step, we will create the &lt;code&gt;.jar&lt;/code&gt; artifacts required to deploy our cloud function. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yOvh2hWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bj9m3owx3pkl3xwni33u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yOvh2hWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bj9m3owx3pkl3xwni33u.png" alt="configure_artifacts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the following dialog, enter the name of your main class. In our case it is &lt;code&gt;StorageCleanerKt&lt;/code&gt;. Don't worry if it doesn't show up in the list. Just click OK. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iqwm6MSp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/znfyw3i3yn1taqfp1p7n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iqwm6MSp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/znfyw3i3yn1taqfp1p7n.png" alt="configure_artifacts_2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: If you don't see the main class, try to follow the steps in this answer &lt;a href="https://stackoverflow.com/questions/10654120/error-could-not-find-or-load-main-class-in-intellij-ide"&gt;https://stackoverflow.com/questions/10654120/error-could-not-find-or-load-main-class-in-intellij-ide&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the next dialog, click Apply and then OK.&lt;/p&gt;

&lt;p&gt;Confirm that a new file was created at &lt;code&gt;src/main/kotlin/META-INF/MANIFEST.MF&lt;/code&gt; with the following contents.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Manifest-Version: 1.0
Main-Class: StorageCleanerKt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now build your artifacts using &lt;code&gt;Build &amp;gt; Build Artifacts &amp;gt; Select your artifact from the list &amp;gt; Build&lt;/code&gt;. You will find the output of this step in &lt;code&gt;out/artifacts/mainModule_jar/mainModule.jar&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-locally"&gt;
  &lt;/a&gt;
  üß™ Test locally
&lt;/h2&gt;

&lt;p&gt;Great! Let's test if your function is working fine and doesn't have any compilation issues. Run the following command from the root directory of your Kotlin project. Make sure you replace the values of the required environment variables with those of your own setup. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;APPWRITE_ENDPOINT&lt;/li&gt;
&lt;li&gt;APPWRITE_FUNCTION_PROJECT_ID&lt;/li&gt;
&lt;li&gt;APPWRITE_API_KEY&lt;/li&gt;
&lt;li&gt;DAYS_TO_EXPIRE
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;--volume&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;:/usr/local/src:rw &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--env&lt;/span&gt; &lt;span class="nv"&gt;APPWRITE_ENDPOINT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"http://192.168.1.35/v1"&lt;/span&gt;  &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--env&lt;/span&gt; &lt;span class="nv"&gt;APPWRITE_FUNCTION_PROJECT_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"60d31170f368f"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--env&lt;/span&gt; &lt;span class="nv"&gt;DAYS_TO_EXPIRE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"0.00001"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--env&lt;/span&gt; &lt;span class="nv"&gt;APPWRITE_API_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"7e....879f"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    appwrite/runtime-for-java:11 &lt;span class="se"&gt;\&lt;/span&gt;
    java &lt;span class="nt"&gt;-jar&lt;/span&gt; out/artifacts/mainModule_jar/mainModule.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The APPWRITE_ENDPOINT is &lt;strong&gt;NOT&lt;/strong&gt; localhost in this case since localhost is not accessible from the cloud functions runtime. You will need to set this to a publicly accessible IP of your Appwrite Server. You can find this by running &lt;code&gt;hostname -I&lt;/code&gt; in UNIX systems.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If everything goes well, you should see the following output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Total files deleted: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-your-cloud-function"&gt;
  &lt;/a&gt;
  üå©Ô∏è Create your cloud function
&lt;/h2&gt;

&lt;p&gt;Head over to the Appwrite Dashboard and navigate to the &lt;strong&gt;Functions&lt;/strong&gt; Tab on the sidebar and click on &lt;strong&gt;Add Function&lt;/strong&gt; . Give your function a Name, select an appropriate Java runtime and click &lt;code&gt;Create&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, head over to the &lt;strong&gt;Settings&lt;/strong&gt; tab in your cloud function and add the required environment variables and a suitable CRON schedule. In our case, we want to run it every hour (&lt;code&gt;0 * * * *&lt;/code&gt;).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KkVP9NPI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o8ln5w814didlqpka0wf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KkVP9NPI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o8ln5w814didlqpka0wf.png" alt="configure_functions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't forget to click &lt;strong&gt;Update&lt;/strong&gt; to save your settings.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#deploying-amp-execute"&gt;
  &lt;/a&gt;
  ‚ÜóÔ∏è Deploying &amp;amp; Execute
&lt;/h2&gt;

&lt;p&gt;We're now ready to deploy our function. This step can be done either with the Appwrite CLI or manually.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#deploying-manually"&gt;
  &lt;/a&gt;
  üëÄ Deploying Manually
&lt;/h3&gt;

&lt;p&gt;Head over to the root directory of your Kotlin project and run the following commands to create a tarfile.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;out/artifacts

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-zcvf&lt;/span&gt; code.tar.gz mainModule_jar                                                  

mainModule_jar/
mainModule_jar/mainModule.jar

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;code.tar.gz  mainModule_jar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a new archive called &lt;code&gt;code.tar.gz&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With this created, head over to your &lt;code&gt;Appwrite Dashboard &amp;gt; Functions &amp;gt; Overview &amp;gt; Deploy Tag&lt;/code&gt;. In the dialog that pops up, upload the &lt;code&gt;tarfile&lt;/code&gt; we just created and &lt;code&gt;java -jar mainModule.jar&lt;/code&gt; for the entry point command. &lt;/p&gt;

&lt;p&gt;Once your function is successfully uploaded you need to activate your tag by clicking the Activate Button You can now go ahead and click &lt;strong&gt;Execute&lt;/strong&gt; and leave the data field empty.&lt;/p&gt;

&lt;p&gt;If everything goes well, you should be able to see the execution logs under the &lt;code&gt;Logs&lt;/code&gt; tab.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fzGqiAI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wfhzh5tave1747p3x6t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fzGqiAI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wfhzh5tave1747p3x6t.png" alt="logs"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#deploying-with-the-cli"&gt;
  &lt;/a&gt;
  ‚å®Ô∏è Deploying with the CLI
&lt;/h3&gt;

&lt;p&gt;If using the Appwrite CLI, run the following commands from the root directory of your Kotlin project. Be sure to replace the IDs with your own values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;out/artifacts/

&lt;span class="nv"&gt;$ &lt;/span&gt;appwrite functions createTag &lt;span class="nt"&gt;--functionId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;60d41cdbec776 &lt;span class="nt"&gt;--command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"java -jar mainModule.jar"&lt;/span&gt; &lt;span class="nt"&gt;--code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;mainModule_jar

&lt;span class="nv"&gt;$id&lt;/span&gt; : 60d46ee4506d4
functionId : 60d41cdbec776
dateCreated : 1624534756
&lt;span class="nb"&gt;command&lt;/span&gt; : java &lt;span class="nt"&gt;-jar&lt;/span&gt; mainModule.jar
size : 4381381

&lt;span class="nv"&gt;$ &lt;/span&gt;appwrite functions updateTag &lt;span class="nt"&gt;--functionId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;60d41cdbec776 &lt;span class="nt"&gt;--tag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;60d46ee4506d4

&lt;span class="nv"&gt;$id&lt;/span&gt; : 60d41cdbec776
&lt;span class="nv"&gt;$permissions&lt;/span&gt; : 
name : Storage Test
dateCreated : 1624513755
dateUpdated : 1624534608
status : disabled
runtime : java-11
tag : 60d46ee4506d4
vars : 
events : &lt;span class="o"&gt;{}&lt;/span&gt;
schedule : 0 &lt;span class="k"&gt;*&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;
scheduleNext : 
schedulePrevious : 1624532406
&lt;span class="nb"&gt;timeout&lt;/span&gt; : 15
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your Cloud Function is now active and will be triggered every 30 minutes based on our CRON schedule.&lt;/p&gt;

&lt;p&gt;Great! You've successfully deployed and executed your first Koltin Cloud Function! This is just the tip of the iceberg and the possibilities with Cloud Functions are endless! Stay tuned for more Cloud Function ideas from the Appwrite Team. If you'd like to learn more about Appwrite or how Appwrite works under the hood, we've just curated all the resources for you during &lt;a href="https://30days.appwrite.io/"&gt;30 Days of Appwrite&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-credits"&gt;
  &lt;/a&gt;
  ‚ú®Ô∏è Credits
&lt;/h2&gt;

&lt;p&gt;Hope you enjoyed this article! You can find the complete code for this tutorial over at the &lt;a href="https://github.com/appwrite/demos-for-functions"&gt;Cloud Functions Demo&lt;/a&gt; repository where we have a lot more examples for various runtimes. We love contributions and encourage you to take a look at our &lt;a href="https://github.com/appwrite/appwrite/issues"&gt;open isuses&lt;/a&gt; and &lt;a href="https://github.com/appwrite/rfc/pulls"&gt;ongoing RFCs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you get stuck anywhere, feel free to reach out to us on our &lt;a href="https://appwrite.io/discord"&gt;friendly support channels&lt;/a&gt; run by humans.  &lt;/p&gt;

&lt;p&gt;Here are some handy links for more information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite/appwrite/blob/master/CONTRIBUTING.md"&gt;Appwrite Contribution Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite"&gt;Appwrite Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/docs"&gt;Appwrite Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>tutorial</category>
      <category>opensource</category>
      <category>kotlin</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Handy Tips for Social Media Marketing</title>
      <author>Raymond Halliwell</author>
      <pubDate>Wed, 14 Jul 2021 05:32:25 +0000</pubDate>
      <link>https://dev.to/raymondhalliwell/handy-tips-for-social-media-marketing-1i74</link>
      <guid>https://dev.to/raymondhalliwell/handy-tips-for-social-media-marketing-1i74</guid>
      <description>&lt;p&gt;The world is evolving and it also revolves around social media. Social media is not only for catching up with our loved ones, for entertainment purposes, or for connecting with new people. It is also used for educational purposes and to market our products and services. Millions of people are on social media which makes it an excellent way to promote our business. It is up to business owners to know how to effectively do Social Media Marketing for their benefit.&lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://twitter.com/raymondhalliwel"&gt;Raymond Halliwell&lt;/a&gt;, a digital marketing expert, ‚ÄúI use my Facebook page with the username ‚ÄòRaymond Halliwell‚Äò, to advertise myself as a freelance digital marketer. I am happy to say that I have more customers than when I was marketing myself offline. I was able to reach more customers within and outside Australia. These and many more are the numerous benefits of social media marketing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#definition-of-social-media-marketing"&gt;
  &lt;/a&gt;
  Definition of Social Media Marketing
&lt;/h2&gt;

&lt;p&gt;Social Media Marketing is also called e-marketing or digital marketing. It is the use of social media platforms to connect to your target audience to promote and advertise products and services. These platforms include; Facebook, Twitter, YouTube, Instagram, WhatsApp, and many more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tips-for-social-platforms-marketing"&gt;
  &lt;/a&gt;
  Tips for social platforms marketing
&lt;/h3&gt;

&lt;p&gt;These are the tips shared by Raymond Halliwell who has been using social media for many years to promote his business.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#map-out-your-goals-and-objectives"&gt;
  &lt;/a&gt;
  Map out your goals and objectives
&lt;/h4&gt;

&lt;p&gt;List out your plans and what you wish to achieve in your business with social media. Your social media expectations should be in line with your overall marketing endeavors.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#do-market-research-to-learn-and-connect-with-your-target-audience"&gt;
  &lt;/a&gt;
  Do Market Research to Learn and Connect with your Target Audience
&lt;/h4&gt;

&lt;p&gt;You need to know your audience and potential customers to relate, communicate and engage with them. This will give you an insight into the customers‚Äô wants and needs, and areas to improve on. You can do this by taking a survey, comments on blogs related to your business, and responses from existing customers.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#use-the-right-digital-marketing-tools"&gt;
  &lt;/a&gt;
  Use the right digital marketing tools
&lt;/h4&gt;

&lt;p&gt;The appropriate digital marketing tools make you efficiently maximize social platforms for your business. Ensure you employ the proper tools and techniques for your social pages. Examples are; Analytics (Google, Hootsuite), Graphics (Pixel lab, Canva, VSCO), Content Curation.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#carefully-create-content-tailored-for-your-audience"&gt;
  &lt;/a&gt;
  Carefully create content tailored for your audience
&lt;/h4&gt;

&lt;p&gt;Make posts with relevant subjects that appeal to your target audience. Also, let it be short, concise, and full of information.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#use-pictures-and-videos-in-your-post"&gt;
  &lt;/a&gt;
  Use Pictures and Videos in Your Post
&lt;/h4&gt;

&lt;p&gt;Videos and attractive images are fascinating to social media users. They make your posts to be interesting and attract extra likes, visits than text-only content.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pay-attention-to-trendsetters-and-trends"&gt;
  &lt;/a&gt;
  Pay Attention to Trendsetters and Trends
&lt;/h4&gt;

&lt;p&gt;Find out what is currently in vogue on social platforms through viral content, influencers, blogs, and many more.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#create-contest-according-to-your-business-goals-and-audience"&gt;
  &lt;/a&gt;
  Create Contest According to your Business Goals and Audience
&lt;/h4&gt;

&lt;p&gt;Do giveaway competitions and sweepstakes to create awareness of your business platform. This will attract a wider audience and expose your page more.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#let-your-watchword-be-quality-not-quantity"&gt;
  &lt;/a&gt;
  Let Your Watchword be Quality not Quantity
&lt;/h4&gt;

&lt;p&gt;It is quite nice to generate massive sales and profit but a dishonest thriving business will soon flop and collapse. Be honest, trustworthy and let your customers know that what you see is what you get. Provide the exact items you showcase on your Social Media to customers so that you can have repeat customers.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#have-an-automated-social-content-calder-in-place"&gt;
  &lt;/a&gt;
  Have an automated social content Calder in place
&lt;/h4&gt;

&lt;p&gt;Post consistently so that your followers or audience won‚Äôt forget about you.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#track-your-performance"&gt;
  &lt;/a&gt;
  Track Your Performance
&lt;/h4&gt;

&lt;p&gt;This is very important to your business. As a student at the end of the term, there is a midterm assessment to determine the learning progress. It is also essential for you to monitor and track your platform traffic, visitors, and sales. This is to refine your business and make necessary changes.&lt;/p&gt;

&lt;p&gt;A business owner should know how to use social media marketing to generate more sales and connect with your customers. This will not only increase your profit but will also build a connection between you and your potential customers.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://getjoys.net/uncategorized/social-media-marketing"&gt;getjoys.net&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>digitalmarketing</category>
      <category>socialmediamarketing</category>
      <category>seo</category>
      <category>raymondhalliwell</category>
    </item>
    <item>
      <title>Next.js Sign In page with Firebase UI (and Firebase Auth)</title>
      <author>Menard Maranan</author>
      <pubDate>Wed, 14 Jul 2021 05:32:12 +0000</pubDate>
      <link>https://dev.to/menard_codes/next-js-sign-in-page-with-firebase-ui-and-firebase-auth-5375</link>
      <guid>https://dev.to/menard_codes/next-js-sign-in-page-with-firebase-ui-and-firebase-auth-5375</guid>
      <description>&lt;p&gt;Handling Authentication and Authorization with Firebase is like a piece of cake thanks to their awesome SDK and documentation.&lt;/p&gt;

&lt;p&gt;But that doesn't stop there, because Firebase also offers a pre-built UI for us Devs to use so that we can quickly build a sign in/sign up page. This UI that I'm talking to is also the same UI used by Google throughout its Google products, which is backed by years of research on UI/UX (so yeah, we're actually standing in the shoulder of a giant, folks!)&lt;/p&gt;

&lt;p&gt;So in this blog, we will be building a Sign In page with Firebase UI and Auth, and I'll be using Next.js here (because it's awesome, but you can also use React if you want, or other framework).&lt;/p&gt;

&lt;p&gt;So without further ado, let's go ahead and build a Sign In Page!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Before we begin, this blog assumes you already have a Firebase account and app set up. If you haven't yet, you can go to their page at &lt;a href="https://firebase.google.com/"&gt;Firebase&lt;/a&gt; to create an account, and start a new project. They also have a very generous free plan without requiring you a credit card, so this step will be not that of an obstacle. After signing up, proceed to creating a Project, and then add app, and choose web. You can name it whatever you want. You can then proceed to console once everything is set up.&lt;/p&gt;

&lt;p&gt;Also, this blog assumes you already know Next.js since we will be building the sign in page with Next.js, but if you didn't, you can use React if you prefer (since the code will also be pretty much the same) or use any framework you like. Btw, if you want to learn Next.js and get up to speed with what it is (and why it's better than React), I have a blog about &lt;a href="https://dev.to/menard_codes/a-quick-introduction-to-next-js-k9c"&gt;A quick introduction to Next.js&lt;/a&gt; which you can check out.&lt;/p&gt;

&lt;p&gt;Ok, if you're all set, let's go ahead and build a sign in page, shall we?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-build"&gt;
  &lt;/a&gt;
  Let's Build!
&lt;/h2&gt;

&lt;p&gt;Alright, so the first thing we have to do is to start our next project, install some dependencies, and get our configs from firebase. So let go ahead and do that!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-next-app"&gt;
  &lt;/a&gt;
  Create Next App
&lt;/h3&gt;

&lt;p&gt;To start our Next.js project, open your terminal, then enter &lt;code&gt;npx create-next-app my_login&lt;/code&gt; and wait for it to set up a Next.js Environment (btw, you can name it whatever you want, it doesn't need to be my_login).&lt;/p&gt;

&lt;p&gt;Once that's finished, we can &lt;code&gt;cd my_login&lt;/code&gt; (or whatever name you chose), and install our dependencies.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-dependencies"&gt;
  &lt;/a&gt;
  Install Dependencies
&lt;/h3&gt;

&lt;p&gt;For out dependencies, we need:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;firebase&lt;/strong&gt; - The Firebase SDK we will be using for this project&lt;br&gt;
&lt;strong&gt;react-firebase-hooks&lt;/strong&gt; - A very cool firebase utils to deal with common firebase operations. This will lessen the boilerplate we have.&lt;br&gt;
&lt;strong&gt;react-firebaseui&lt;/strong&gt; - The SignIn UI by Firebase. This module contains a component that we can just import and render, that's why I said building Sign In page with Firebase is a breeze.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So in your terminal, enter:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm i firebase react-firebase-hooks react-firebaseui&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Or you can use yarn if you want.&lt;/p&gt;

&lt;p&gt;Let it finish in the background while we proceed on the next step üòâ.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#firebase-app"&gt;
  &lt;/a&gt;
  Firebase App
&lt;/h3&gt;

&lt;p&gt;Ok, so while we're waiting for our dependencies, we can go ahead to firebase console, set uo auth, and get our SDK config.&lt;/p&gt;

&lt;p&gt;First, go to firebase console, go to Authentication, and choose SignIn method.&lt;/p&gt;

&lt;p&gt;From there, choose the sign in method you want. In my case, I chose: Google, Twitter, and GitHub. (Note: You need a dev account to twitter and github before you can add them as OAuth providers, then connect them to Firebase).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YCScGvZJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wh32xxzdzwyg09ehxqbq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YCScGvZJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wh32xxzdzwyg09ehxqbq.png" alt="firebase sign in providers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Side Note: If you're using a custom domain, add that under authorized domain which you can find right below these providers).&lt;/p&gt;

&lt;p&gt;Ok, so now for the SDK config.&lt;/p&gt;

&lt;p&gt;You can just click on the gear icon next to &lt;code&gt;Project Overview&lt;/code&gt; on the top left and choose &lt;code&gt;Project Settings&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tVzJZV6D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xp5mkfrhsfdqv1u7jq5x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tVzJZV6D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xp5mkfrhsfdqv1u7jq5x.png" alt="Firebase Console Project Settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then scroll through the bottom and find &lt;code&gt;SDK setup and configuration&lt;/code&gt;, then choose &lt;code&gt;Config&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---c4oyUPS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3gookvjhgehnu9skmo1b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---c4oyUPS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3gookvjhgehnu9skmo1b.png" alt="Firebase SDK config"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Copy your config&lt;/strong&gt; (not mine, copy your own, because it won't work to you, but I will be deleting this project anyway, so it will not actually work).&lt;/p&gt;

&lt;p&gt;Now that we have the config, we can continue on our Next.js App and start coding (maybe the dependencies are also done installing).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuring-our-firebase-app-locally"&gt;
  &lt;/a&gt;
  Configuring Our Firebase App locally
&lt;/h3&gt;

&lt;p&gt;So back to our Next.js App, we can configure and initialize our Firebase project.&lt;/p&gt;

&lt;p&gt;First, let us save the Firebase SDK Config we just copied. Create a new folder &lt;code&gt;config&lt;/code&gt; and a new file called &lt;code&gt;firebaseApp.config.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CAajMTrO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ub24pv4by0pvjcvleox0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CAajMTrO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ub24pv4by0pvjcvleox0.png" alt="Firebase Config"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(You might see that I have another file there. We will be adding that later).&lt;/p&gt;

&lt;p&gt;So inside the &lt;code&gt;firebaseApp.config.js&lt;/code&gt;, we can save and export our SDK config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firebaseConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="c1"&gt;// paste your config here...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After saving the config, we can now initialize our firebase app.&lt;/p&gt;

&lt;p&gt;I might be thinking too much here, but I think it's a good practice to separate files based on their concerns. Though it's not actually essential, I prefer personally to separate the initialization of my firebase app in a separate &lt;code&gt;App&lt;/code&gt; folder because I think it's much cleaner and more modularize. You can also do the same if you also don't want to mix up the firebase initialization with next.js. And by the way, inside the App folder, create a &lt;code&gt;firebaseApp.js&lt;/code&gt; file:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fJCdSuQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbmujfjnmqdi4kpwaust.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fJCdSuQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbmujfjnmqdi4kpwaust.png" alt="firebase app file structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;firebaseApp.js&lt;/code&gt;, we can write the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firebase/app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firebase/auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;firebaseConfig&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../config/firebaseApp.config.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initializeApp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alright, our firebase set up is near ready! To complete the setup, let's have the AuthUI config (the one you saw above together with firebaseApp.config.js.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#authui-config"&gt;
  &lt;/a&gt;
  AuthUI Config
&lt;/h3&gt;

&lt;p&gt;The AuthUI config will be used by the FirebaseUI to generate the Sign In components for us. In this config, you can specify how you would like the FirebaseUI behave and what will be included. You can check out all the &lt;a href="https://github.com/firebase/firebaseui-web#configuration"&gt;configurations here.&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's now create a new file inside the &lt;code&gt;config&lt;/code&gt; folder and name it &lt;code&gt;firebaseAuthUI.config.js&lt;/code&gt; and for this tutorial, we will be using the following config (write this inside the &lt;code&gt;firebaseAuthUI.config.js&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uiConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;signInFlow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;popup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;signInSuccessUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;tosUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/terms-of-service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;privacyPolicyUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/privacy-policy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;signInOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GoogleAuthProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PROVIDER_ID&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And yeah, this is a function that returns a config, because we don't want to import the firebase app from multiple modules, and we want this to be more &lt;code&gt;Functional Programming'ish&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I think it's a cleaner way of coding but yeah, let's proceed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-the-pages"&gt;
  &lt;/a&gt;
  Adding The Pages
&lt;/h3&gt;

&lt;p&gt;Since we're using Next.js (am I right?), it will handle routing for us via pages folder, so inside the pages folder, we will be adding three more files:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pages&lt;/code&gt;&lt;br&gt;
  &lt;code&gt;-login.js&lt;/code&gt;&lt;br&gt;
  &lt;code&gt;-privacy-policy.js&lt;/code&gt;&lt;br&gt;
  &lt;code&gt;-terms-of-service.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: We don't necessarily need to put any valid &lt;code&gt;TOS&lt;/code&gt; or &lt;code&gt;Privacy Policy&lt;/code&gt;. We just have that for the config of our LogIn UI (though optional, it makes it look more like a sign in page. You can add whatever you want there for production ready apps you have)&lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;privacy-policy.js&lt;/code&gt;, we can just add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;PrivacyPolicy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Privacy&lt;/span&gt; &lt;span class="nx"&gt;policy&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also do the same in TOS (terms-of-service) page replace the privacy policy names.&lt;/p&gt;

&lt;p&gt;Alright, so we can actually proceed coding the AuthUI.&lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;login.js&lt;/code&gt;, write the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Next JS related&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Firebase related&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useAuthState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-firebase-hooks/auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;StyledFirebaseAuth&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-firebaseui/StyledFirebaseAuth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../app/firebaseApp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;uiConfig&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../config/firebaseAuthConfig&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Components&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Logo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../components/elements/Logo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Card&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../components/elements/Card&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../components/elements/Error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Loading&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../components/elements/Loading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Styles&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;LoginStyle&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/Login.module.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAuthState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// user is already logged in, redirect to home page&lt;/span&gt;
        &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;authConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;uiConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;CodeBlog&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;LogIn&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/title&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Head&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;LoginStyle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;LoginStyle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loginTitleContainer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Log&lt;/span&gt; &lt;span class="nx"&gt;In&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Logo&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StyledFirebaseAuth&lt;/span&gt; &lt;span class="nx"&gt;uiConfig&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;authConfig&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;firebaseAuth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Card&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In here, I might be a little obsessed with structuring things out given combining and labeling related imports, but again, this is how I code.&lt;/p&gt;

&lt;p&gt;Also, I made custom components here like loading and error, and you can also do your own. I also have a custom CSS imported (I'm not going to show it, it's unnecessary for this tutorial anyway but you can configure your own style and import that here.)&lt;/p&gt;

&lt;p&gt;Note that I haven't designed or made the &lt;code&gt;Sign In with {whatever provider}&lt;/code&gt; on the component, because the &lt;code&gt;&amp;lt;StyledFirebaseAuth uiConfig={authConfig} firebaseAuth={auth} /&amp;gt;&lt;/code&gt; handled that for us. By just providing the auth config and firebase auth, it will handle the rest of the auth logic plus component for us.&lt;/p&gt;

&lt;p&gt;This is how it looks like to me:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cq-PBNGo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twk4qaqu5p7ckutf4m9d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cq-PBNGo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twk4qaqu5p7ckutf4m9d.png" alt="FirebaseUI SignIn"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AaXD81To--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duxfxm9lfs09pv42q5al.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AaXD81To--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duxfxm9lfs09pv42q5al.png" alt="SignIn With Google"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;And that's it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#were-done"&gt;
  &lt;/a&gt;
  We're done!
&lt;/h3&gt;

&lt;p&gt;Whew! What a ride isn't it?&lt;/p&gt;

&lt;p&gt;As you can see, building a SignIn page with firebase is very easy, and we don't even need to think all of the auth logic ourselves.&lt;/p&gt;

&lt;p&gt;And this is why I love Firebase. The awesome Developer SDK makes things easier for us to implement, increases our productivity, and greatly lessens the development time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-your-author"&gt;
  &lt;/a&gt;
  About your author
&lt;/h2&gt;

&lt;p&gt;I am  Menard Maranan, a Web Developer with a focus on JAMstack and Next.js. I often combine technologies like GraphQL and Firebase with these choices I have (because they are just so easy and cool to use. I love embracing new tech üòâ)&lt;/p&gt;

&lt;p&gt;Follow me here for more content like this!&lt;/p&gt;

&lt;p&gt;Also, &lt;strong&gt;Follow Me On &lt;a href="https://https://twitter.com/menard_codes"&gt;Twitter!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;'Til next time!&lt;/p&gt;

</description>
      <category>firebase</category>
      <category>nextjs</category>
      <category>auth</category>
      <category>signin</category>
    </item>
    <item>
      <title># Using GraphQL in Express JS</title>
      <author>Muhammad Yusuf</author>
      <pubDate>Wed, 14 Jul 2021 05:05:34 +0000</pubDate>
      <link>https://dev.to/mhmmdysf/using-graphql-in-express-js-oi9</link>
      <guid>https://dev.to/mhmmdysf/using-graphql-in-express-js-oi9</guid>
      <description>&lt;p&gt;GraphQL is a useful query language for your API. But it can be intimidating because they bring the complexity upfront as there are a lot  that has to be set up before we can create our first query. I hope this article will be useful and understandable. Let's get started!&lt;/p&gt;

&lt;p&gt;First things first, we'll need to require our module to our file and put some basic express boilerplate, let's say it's called &lt;code&gt;app.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;graphqlHTTP&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express-graphql&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;

&lt;span class="c1"&gt;// We'll put everything here later&lt;/span&gt;

&lt;span class="c1"&gt;// This code below must be on the last part of the file&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Listening on port:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we'll create our first and (maybe) only route in this article:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/graphql&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;graphqlHTTP&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;graphiql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of using &lt;code&gt;(req, res) =&amp;gt; {}&lt;/code&gt; to the callback we put an invoked  &lt;code&gt;graphqlHTTP&lt;/code&gt; function, so we can let the graphql do its thing. Inside the graphqlHTTP, we put a object that contains option to switch the graphiQL interface on, and schema that we'll create later on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-whats-a-schema"&gt;
  &lt;/a&gt;
  So what's a schema?
&lt;/h2&gt;

&lt;p&gt;Schema defines a hierarchy of types with fields that are populated from your back-end data stores. The most basic components of a GraphQL schema are object types for query and mutation (optional), which just represent a kind of object you can fetch from your service, and what fields it has.&lt;/p&gt;

&lt;p&gt;In the simplest way, we might represent the object types like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Book&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GraphQLString&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GraphQLString&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What's &lt;code&gt;GraphQLString&lt;/code&gt;? It's a type that can only be recognized by graphQL instead of regular &lt;code&gt;String&lt;/code&gt; in javascript. They have other types as well like &lt;code&gt;GraphQLInt&lt;/code&gt;, &lt;code&gt;GraphQLList&lt;/code&gt;, and &lt;code&gt;GraphQLObjectType&lt;/code&gt;. And we can define them like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;GraphQLSchema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// for base schema type&lt;/span&gt;
  &lt;span class="nx"&gt;GraphQLString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;GraphQLInt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;GraphQLList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;GraphQLObjectType&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;graphql&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now before we make our schema, we can create our own type first by putting the book object from earlier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BookType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GraphQLObjectType&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Book&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GraphQLString&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GraphQLString&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we create our query object and prepare it with a small dummy data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dummyBooks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Harry Potter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JK Rowling&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lord of The Rings&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JRR Tolkien&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sherlock Holmes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Arthur Conan Doyle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GraphQLObjectType&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Book query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// we called it books so we can type 'books' later on&lt;/span&gt;
      &lt;span class="na"&gt;books&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GraphQLList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BookType&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;dummyBooks&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Query object requires &lt;code&gt;fields&lt;/code&gt; function that returns an object. The object itself contains properties of what we want to find via the query later on. And each  has to have &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;resolve&lt;/code&gt;. &lt;code&gt;type&lt;/code&gt; property defines the type returned to us users and &lt;code&gt;resolve&lt;/code&gt; gives the actual data, which is &lt;code&gt;dummyBooks&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Lastly, we can define our schema like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GraphQLSchema&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;queryType&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#running-the-file"&gt;
  &lt;/a&gt;
  Running the file
&lt;/h2&gt;

&lt;p&gt;Now we can run this from terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type this in the browser:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;localhost:3000/graphql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you'll see this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CZkzGOYf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eetxcq8wsm2cdtuflz80.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CZkzGOYf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eetxcq8wsm2cdtuflz80.png" alt="GraphiQL"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are two main parts in the screen, the white part on the left is the query editor, we can crate our query there. And the gray part on the right side will show the result of query done in the left.&lt;/p&gt;

&lt;p&gt;Now we can create our first query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;query {
  books {
    title
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice there's no author in the query, and we'll get the data exactly like our query format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"books"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Harry Potter"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Lord of The Rings"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Sherlock Holmes"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;source: &lt;a href="https://graphql.org/learn/"&gt;https://graphql.org/learn/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>express</category>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>The Ultimate Guide to Browser-Side Storage</title>
      <author>OpenReplay Tech Blog</author>
      <pubDate>Wed, 14 Jul 2021 05:03:38 +0000</pubDate>
      <link>https://dev.to/asayerio_techblog/the-ultimate-guide-to-browser-side-storage-2nmm</link>
      <guid>https://dev.to/asayerio_techblog/the-ultimate-guide-to-browser-side-storage-2nmm</guid>
      <description>&lt;p&gt;&lt;em&gt;by author &lt;a href="https://blog.openreplay.com/authors/craig-buckler"&gt;Craig Buckler&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It's &lt;em&gt;usually&lt;/em&gt; necessary to store user data server side in a database or similar repository. This guarantees persistence and ensures users can access their data from any web-connected browser (presuming your storage system is reliable, of course!)&lt;/p&gt;

&lt;p&gt;Storing data in the browser becomes a more viable option when:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;You're &lt;a href="https://blog.openreplay.com/how-to-use-indexdb-to-manage-state-in-javascript"&gt;retaining an application's state&lt;/a&gt;, such as the active panel, chosen theme, input options, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You're storing data locally, perhaps for practicality, performance, privacy, or pre-upload reasons.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You're creating a Progressive Web App which works offline and has no server-side requirements other than the initial download and updates.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The data you store in the browser will either be persistent (retained until you delete it) or temporary (deleted when the user's session ends). Browsers are more complex:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The OS, browser, plugins, or user can block or delete data depending on the storage space available, supported technologies, vendor policies, configuration settings, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Temporary data is often retained beyond the session. For example, you can close then reopen a browser tab and data should remain available.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In all cases, data is domain-specific: values stored by one domain (or sub-domain) cannot be read, updated, or deleted by another. That said, a third-party page script loaded from another domain has the same level of access as any of your scripts.&lt;/p&gt;

&lt;p&gt;To help you choose the best option, browser storage options below are split into three categories:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Current options&lt;/strong&gt;. APIs you can use today in all modern and most older browsers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Future options&lt;/strong&gt;. Experimental APIs which should be stable within a few years.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Past options&lt;/strong&gt;. Deprecated APIs you should avoid at all costs!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But first, a couple of tips that will help you analyze your current situation and decide what to do with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#devtools-analysis"&gt;
  &lt;/a&gt;
  DevTools analysis
&lt;/h2&gt;

&lt;p&gt;The DevTools &lt;strong&gt;Application&lt;/strong&gt; panel (&lt;strong&gt;Storage&lt;/strong&gt; in Firefox) permits viewing, modification, and deletion of most storage containers. The &lt;strong&gt;Network&lt;/strong&gt; panel is also useful when examining downloaded data or cookies sent by HTTP requests and responses.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#storage-space-analysis"&gt;
  &lt;/a&gt;
  Storage space analysis
&lt;/h2&gt;

&lt;p&gt;You can verify storage API support by looking for specific properties or methods of the &lt;code&gt;window&lt;/code&gt; object, e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// is localStorage available?&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// yes!&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's more difficult to check when a data store has space available. You can use a &lt;code&gt;try/catch&lt;/code&gt; block to detect failures:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myObject&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localStorage failed:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alternatively, you can use the Promise-based &lt;a href="https://developer.mozilla.org/docs/Web/API/Storage_API"&gt;Storage API&lt;/a&gt; to check the remaining space for Web Storage, IndexedDB, and the Cache API. The asynchronous &lt;a href="https://developer.mozilla.org/docs/Web/API/StorageManager/estimate"&gt;&lt;code&gt;.estimate()&lt;/code&gt; method&lt;/a&gt; returns:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;a &lt;code&gt;quota&lt;/code&gt; property: the space available to the domain, and&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;usage&lt;/code&gt; property: the space already in use.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// Storage API support&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;estimate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`permitted: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quota&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; Kb`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`used     : &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;usage&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; Kb`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`% used   : &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;usage&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quota&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;%`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`remaining: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quota&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; Kb`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This API is not supported in Safari or Internet Explorer. Neither will it help you decide what to do when storage runs out! You may need to consider server-side storage but retain a proportion of frequently-used data locally.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#current-storage-options"&gt;
  &lt;/a&gt;
  Current storage options
&lt;/h2&gt;

&lt;p&gt;The following client-side storage APIs are available in all browsers going back a &lt;strong&gt;decade or longer&lt;/strong&gt;. They should pose no problems in modern applications or IE11.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-variables"&gt;
  &lt;/a&gt;
  1. Variables
&lt;/h3&gt;

&lt;p&gt;JavaScript variables are the fastest storage option but they're highly volatile. The browser deletes data when you refresh or navigate away. Variables have no storage limit (other than your computer's memory limit), but the browser will slow down as you fill the available memory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt;
  &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;two&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;one&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;two&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;three&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use when:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you're writing any client-side JavaScript&lt;/li&gt;
&lt;li&gt;temporary data is adequate. In situations where you need permanent storage, you can write variables to a data store when the &lt;a href="https://developer.mozilla.org/docs/Web/API/Window/beforeunload_event"&gt;page unloads&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if you've written any JavaScript, you've used variables already&lt;/li&gt;
&lt;li&gt;the fastest and simplest option&lt;/li&gt;
&lt;li&gt;no need for serialization or de-serialization (converting to a JSON string and back again)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Disadvantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data storage is temporary&lt;/li&gt;
&lt;li&gt;third-party scripts can examine and overwrite global values.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-dom-storage"&gt;
  &lt;/a&gt;
  2. DOM Storage
&lt;/h3&gt;

&lt;p&gt;While not strictly a storage method, you can append values to any DOM node in named attributes or as a property of that object, e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// locate a DOM node&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mycomponent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// store values&lt;/span&gt;
&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myValue1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myValue2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myValue3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// retreive values&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myValue1&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myValue2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "2"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myValue3&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "3"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's fast and there are no strict limits, although it's not ideal for large volumes of data. Third-party scripts or a refresh wipes the data, although the server can write attributes to the HTML again.&lt;/p&gt;

&lt;p&gt;Adding a property (&lt;code&gt;element.myValue1&lt;/code&gt;) makes no change to the HTML itself and uses the prototypal nature of JavaScript objects.&lt;/p&gt;

&lt;p&gt;Alternatively, you can set and get element attributes with:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/docs/Web/API/Element/setAttribute"&gt;&lt;code&gt;.setAttribute()&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/docs/Web/API/Element/getAttribute"&gt;&lt;code&gt;.getAttribute()&lt;/code&gt;&lt;/a&gt;. Be careful not to use an HTML attribute with associated functionality such as &lt;code&gt;disabled&lt;/code&gt; or &lt;code&gt;hidden&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the &lt;a href="https://developer.mozilla.org/docs/Web/API/HTMLOrForeignElement/dataset"&gt;&lt;code&gt;dataset&lt;/code&gt; property&lt;/a&gt;. This appends an attribute prefixed with &lt;code&gt;data-&lt;/code&gt; so it will not have default functionality.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the &lt;a href="https://developer.mozilla.org/docs/Web/API/Element/classList"&gt;&lt;code&gt;classList&lt;/code&gt; API&lt;/a&gt; to add or remove classes from the &lt;code&gt;class&lt;/code&gt; attribute. These cannot (easily) have a value assigned so are most practical for retaining Boolean variables.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All three options convert the value to a string so deserialization may become necessary.&lt;/p&gt;

&lt;p&gt;Use when:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it's practical to store a component's state in its HTML or DOM representation&lt;/li&gt;
&lt;li&gt;you want to pass data from the server to a component in HTML attributes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you can set values client side or server side&lt;/li&gt;
&lt;li&gt;still fast if you can avoid DOM node searches and triggering layout changes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Disadvantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;temporary data only&lt;/li&gt;
&lt;li&gt;attribute strings may require serialization and deserialization&lt;/li&gt;
&lt;li&gt;third-party scripts can examine and overwrite attribute values.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-web-storage-raw-localstorage-endraw-and-raw-sessionstorage-endraw-"&gt;
  &lt;/a&gt;
  3. Web Storage (&lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt;)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/docs/Web/API/Web_Storage_API"&gt;Web Storage&lt;/a&gt; offers two APIs to get and set string-only name/value pairs:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;window.localStorage&lt;/code&gt; for persistent data, and&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;window.sessionStorage&lt;/code&gt; for temporary session data.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The browser limits each domain to 5MB and, unusually, read and write operations are synchronous so it can delay other JavaScript processes.&lt;/p&gt;

&lt;p&gt;The API is one of the easiest and well supported with &lt;a href="https://developer.mozilla.org/docs/Web/API/Storage/setItem"&gt;&lt;code&gt;.setItem()&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/docs/Web/API/Storage/getItem"&gt;.&lt;code&gt;getItem()&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://developer.mozilla.org/docs/Web/API/Storage/removeItem"&gt;.&lt;code&gt;removeItem()&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "1"&lt;/span&gt;
&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// gone&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can iterate though all items using &lt;a href="https://developer.mozilla.org/docs/Web/API/Storage/length"&gt;&lt;code&gt;.length&lt;/code&gt;&lt;/a&gt; (the number of items) and &lt;a href="https://developer.mozilla.org/docs/Web/API/Storage/key"&gt;&lt;code&gt;.key(N)&lt;/code&gt;&lt;/a&gt; (the name of the key N), or delete everything with &lt;a href="https://developer.mozilla.org/docs/Web/API/Storage/clear"&gt;&lt;code&gt;.clear()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Changing a value raises a &lt;code&gt;storage&lt;/code&gt; event in all other browser tabs/windows on the same domain so your application views can update as necessary:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;storage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`key changed: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`from       : &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;oldValue&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`to         : &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newValue&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use when:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you need to store small quantities of simple values and access them infrequently&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;simple API which is popular among developers&lt;/li&gt;
&lt;li&gt;good browser support&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Disadvantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;strings only: serialization and de-serialization may be necessary&lt;/li&gt;
&lt;li&gt;unstructured data, easy to overwrite a &lt;code&gt;name&lt;/code&gt; used by another component&lt;/li&gt;
&lt;li&gt;saving large datasets will affect page performance&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-indexeddb"&gt;
  &lt;/a&gt;
  4. IndexedDB
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://blog.openreplay.com/getting-started-with-indexeddb-for-big-data-storage"&gt;IndexedDB&lt;/a&gt; provides a NoSQL-like name/value database which can store at least 1GB and even reach 60% of the remaining disk space. You can apply indexes, use transactions, and search using a fast asynchronous API. Browser support is good (IE10+) and you can store JavaScript values natively without string serialization or de-serialization. It's ideal for storing large quantities of &lt;a href="https://blog.openreplay.com/how-to-use-indexdb-to-manage-state-in-javascript"&gt;state data&lt;/a&gt;‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So why do few developers adopt IndexedDB?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The main reason is the API. It's old, requires callback juggling, and feels inelegant when compared to modern &lt;code&gt;async/await&lt;/code&gt; operations. You can Promisify it with wrapper functions, e.g. create a database connection when passed a name, version number, and upgrade function called when the version changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// connect to IndexedDB database&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;dbConnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dbName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;upgrade&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;indexedDB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dbName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onsuccess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onerror&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`connect error: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errorCode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onupgradeneeded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;upgrade&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then connect and initialize a &lt;code&gt;mystore&lt;/code&gt; object store:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;dbConnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;db&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createObjectStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mystore&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use the &lt;code&gt;db&lt;/code&gt; connection to &lt;code&gt;.add&lt;/code&gt; new data items in a transaction:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mystore&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;readwrite&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;objectStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mystore&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;the value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;key1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onsuccess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;added&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or retrieve values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mystore&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;readonly&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;objectStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mystore&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;key1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onsuccess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use when:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you have lots of data to store&lt;/li&gt;
&lt;li&gt;performance is a priority&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a NoSQL database with transactions, indexing, and search options&lt;/li&gt;
&lt;li&gt;no need to serialize or de-serialize data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Disadvantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the API is awful. You'll want a wrapper library such as &lt;a href="https://www.npmjs.com/package/idb"&gt;idb&lt;/a&gt; to make it usable.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#5-cache-api"&gt;
  &lt;/a&gt;
  5. Cache API
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://developer.mozilla.org/docs/Web/API/Cache"&gt;Cache API&lt;/a&gt; stores HTTP request and response objects. It's primarily used in Progressive Web Apps to cache network responses so an app can serve cached resources when it's offline. It's not practical for storing other types of data.&lt;/p&gt;

&lt;p&gt;The cache storage size depends on the device. Chrome-based browsers typically permit 100MB per domain, but Safari limits it to 50Mb and expires data after 14 days.&lt;/p&gt;

&lt;p&gt;You're unlikely to encounter the Promise-based Cache API outside Service Workers, but you can store the content of a request in a named cache:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// open a cache&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myCache&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// fetch and store response&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/myfile.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and retrieve it later:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt;

  &lt;span class="c1"&gt;// open cache&lt;/span&gt;
  &lt;span class="nx"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myCache&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt;

  &lt;span class="c1"&gt;// fetch stored response&lt;/span&gt;
  &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/myfile.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt;

  &lt;span class="c1"&gt;// get content as text&lt;/span&gt;
  &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use when:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;caching files for offline usage&lt;/li&gt;
&lt;li&gt;you want to improve web performance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;good Promise-based API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Disadvantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;impractical for storing anything other than HTTP responses&lt;/li&gt;
&lt;li&gt;some Apple-imposed restrictions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#6-cookies"&gt;
  &lt;/a&gt;
  6. Cookies
&lt;/h3&gt;

&lt;p&gt;Cookies have a bad reputation, but they're essential for any web system which needs to maintain server/browser state such as logging on. Strictly speaking, cookies are not a client-side storage option since the server and browser can modify data. It's also the only option which can automatically expire data after a period of time.&lt;/p&gt;

&lt;p&gt;A domain can store no more than 20 named cookies with a maximum string of 4Kb in each. This is a restrictive 80Kb limit, but every HTTP request and response sends the cookie data. If you set a total of 50Kb then request ten 1-byte files, it would incur more than 1MB of cookie-specific bandwidth.&lt;/p&gt;

&lt;p&gt;The JavaScript &lt;a href="https://developer.mozilla.org/docs/Web/API/Document/cookie"&gt;&lt;code&gt;document.cookie&lt;/code&gt;&lt;/a&gt; API is simplistic with name/value pairs separated by an equals symbol (&lt;code&gt;=&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cookie1=1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cookie2=two&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Values cannot contain commas, semicolons, or whitespace so the &lt;a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent"&gt;&lt;code&gt;encodeURIComponent()&lt;/code&gt;&lt;/a&gt; may be necessary:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`cookie3=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nb"&gt;encodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can add further options with semi-colon separators:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;option&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;;domain=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;cookies are only accessible to the current domain, but &lt;code&gt;;path=site.com&lt;/code&gt; permits use on any subdomain&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;;path=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;cookies only available to the current and child paths, &lt;code&gt;;path=/&lt;/code&gt; permits use on any path&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;;max-age=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;the cookie expiry time in seconds&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;;expires=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;a cookie expiry date, e.g. &lt;code&gt;;expires=Mon, 12 July 2021 11:22:33 UTC&lt;/code&gt; (format with &lt;a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString"&gt;&lt;code&gt;date.toUTCString()&lt;/code&gt;&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;;secure&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;send the cookie over HTTPS only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;;HTTPOnly&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;cookies are server-only and not available to client-side JavaScript&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;For example, set a state object accessible on any path which expires in 10 minutes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`state=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nb"&gt;encodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;; path=/; max=age=600`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To examine cookies, you must parse the long &lt;code&gt;document.cookie&lt;/code&gt; string to extract name and value pairs using a function such as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cookieValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;state&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// cache of parsed cookie values&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cookieCache&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// return a cookie value&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;cookieValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;cookieCache&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;cookieCache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cookieCache&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

    &lt;span class="c1"&gt;// parse&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nv&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="nx"&gt;nv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

          &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;decodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;nv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

          &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){}&lt;/span&gt;

          &lt;span class="nx"&gt;cookieCache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;nv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="p"&gt;});&lt;/span&gt;


  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// return cookie value&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cookieCache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use when:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you need to maintain small quantities of state data between the client and server - such as a session ID&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;essential for logins&lt;/li&gt;
&lt;li&gt;current session by default, but expiry control with &lt;code&gt;max-age&lt;/code&gt; and &lt;code&gt;Expires&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Disadvantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;limited space&lt;/li&gt;
&lt;li&gt;poor JavaScript API&lt;/li&gt;
&lt;li&gt;requires string serialization and de-serialization&lt;/li&gt;
&lt;li&gt;browsers and plugins can block cookies&lt;/li&gt;
&lt;li&gt;legislation may require a warning or opt-in for non-essential cookies, although this usually applies to whatever storage option you choose.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#future-storage-options"&gt;
  &lt;/a&gt;
  Future storage options
&lt;/h2&gt;

&lt;p&gt;The following client-side storage APIs are new. They have limited browser support, may be behind experimental flags, and are subject to change. There's no guarantee they'll ever become a Web Standard so avoid using them for mission-critical applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-file-system-access-api"&gt;
  &lt;/a&gt;
  7. File System Access API
&lt;/h3&gt;

&lt;p&gt;Browsers run in an isolated sandboxed environment which prevents malicious sites accessing personal data stored on your hard drive.&lt;/p&gt;

&lt;p&gt;The downside is that you cannot 'edit' a local file. Consider a web-based text editor. You must upload a file to that application, edit it, then download the updated version. &lt;em&gt;And what if you're working on several files?&lt;/em&gt; You &lt;em&gt;could&lt;/em&gt; store the file in the cloud or use synchronization services such as Dropbox and OneDrive, but those can be impractical or overkill for simple apps.&lt;/p&gt;

&lt;p&gt;The new &lt;a href="https://developer.mozilla.org/docs/Web/API/File_System_Access_API"&gt;File System Access API&lt;/a&gt; allows a browser to read, write, update, and delete from your local file system when you grant permission to a specific file or directory. A returned &lt;a href="https://developer.mozilla.org/docs/Web/API/FileSystemHandle"&gt;FileSystemHandle&lt;/a&gt; allows your web application to behave like a desktop app.&lt;/p&gt;

&lt;p&gt;The following example function saves a &lt;a href="https://developer.mozilla.org/docs/Web/API/Blob"&gt;Blob&lt;/a&gt; to a local file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;blob&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// create handle to a local file&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showSaveFilePicker&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// create writable stream&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createWritable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// write data&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// close the file&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use when:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you want a web app to read and write local files&lt;/li&gt;
&lt;li&gt;you're happy to wait a couple of years before browser support is viable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;some exciting possibilities&lt;/li&gt;
&lt;li&gt;web apps can compete with native apps&lt;/li&gt;
&lt;li&gt;less need to upload files or process data on a server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Disadvantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;little browser support - partial implementation in Blink but behind a flag&lt;/li&gt;
&lt;li&gt;the API is subject to change.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#8-file-and-directory-entries-api"&gt;
  &lt;/a&gt;
  8. File and Directory Entries API
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://developer.mozilla.org/docs/Web/API/File_and_Directory_Entries_API"&gt;File and Directory Entries API&lt;/a&gt; provides a domain-specific virtual local file system where a web app can read and write files without having to request user permission.&lt;/p&gt;

&lt;p&gt;While some support is available in most browsers, it's not on the Web Standards track, and could easily slip into the &lt;em&gt;"storage options to avoid"&lt;/em&gt; category. The API is unlikely to be practical for a number of years.&lt;/p&gt;

&lt;p&gt;Use when:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you like living dangerously!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a virtual file system is safer than a real one&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Disadvantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;non-standard, implementation incompatibilities, subject to change, and may never receive good browser support.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#open-source-session-replay"&gt;
  &lt;/a&gt;
  Open Source Session Replay
&lt;/h2&gt;

&lt;p&gt;Debugging a web application in production may be challenging and time-consuming. &lt;a href="https://github.com/openreplay/openreplay"&gt;OpenReplay&lt;/a&gt; is an Open-source alternative to FullStory, LogRocket and Hotjar. It allows you to monitor and replay everything your users do and shows how your app behaves for every issue. &lt;br&gt;
It‚Äôs like having your browser‚Äôs inspector open while looking over your user‚Äôs shoulder.&lt;br&gt;
OpenReplay is the only open-source alternative currently available.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MvoFt7Qf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/openreplay/openreplay/main/static/replayer.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MvoFt7Qf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/openreplay/openreplay/main/static/replayer.png" alt="OpenReplay"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy debugging, for modern frontend teams - &lt;a href="https://github.com/openreplay/openreplay"&gt;Start monitoring your web app for free&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#past-storage-options"&gt;
  &lt;/a&gt;
  Past storage options
&lt;/h2&gt;

&lt;p&gt;The following client-side storage APIs are old, deprecated, or hacks. They may continue to work, but are best avoided for new projects.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#9-raw-windowname-endraw-"&gt;
  &lt;/a&gt;
  9. &lt;code&gt;window.name&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://developer.mozilla.org/docs/Web/API/Window/name"&gt;&lt;code&gt;window.name&lt;/code&gt; property&lt;/a&gt; sets and gets the name of the current window. This was typically used to keep track of several windows/tabs, but the browser retains the string value between refreshes or linking elsewhere.&lt;/p&gt;

&lt;p&gt;Bizarrely, &lt;code&gt;window.name&lt;/code&gt; will accept a few megabytes of string data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which you can read back at any point:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;window.name&lt;/code&gt; was never designed for data storage but was often used as a hack or to polyfill &lt;code&gt;localStorage&lt;/code&gt; APIs in IE7 and below.&lt;/p&gt;

&lt;p&gt;Use when:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you're supporting very old browsers and there's no other option&lt;/li&gt;
&lt;li&gt;you're not storing sensitive information&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;easy, session-only data storage&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Disadvantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;requires string serialization and de-serialization&lt;/li&gt;
&lt;li&gt;any other domain can read or change &lt;code&gt;window.name&lt;/code&gt; when you link elsewhere.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#10-websql"&gt;
  &lt;/a&gt;
  10. WebSQL
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.w3.org/TR/webdatabase/"&gt;WebSQL&lt;/a&gt; brought SQL-like database storage to the browser. It had a limit of 5MB and a reputation for poor performance, but the API was familiar to anyone using SQL databases on the server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// create database (name, version, description, size in bytes)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;openDatabase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;todo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;to-do list&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// create table&lt;/span&gt;
  &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;executeSql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CREATE TABLE task (id unique, name)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// add record&lt;/span&gt;
  &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;executeSql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INSERT INTO task (id,name) VALUES (1, "write article")&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// output all items&lt;/span&gt;
&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;executeSql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SELECT * FROM task&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Chrome and Safari offered varying inconsistent implementations of WebSQL, but Mozilla and Microsoft opposed it in favor of &lt;a href="#indexeddb"&gt;IndexedDB&lt;/a&gt;. The API was deprecated in 2010 and will not receive updates.&lt;/p&gt;

&lt;p&gt;Use when:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you have an old web app and it's impractical to update to another storage mechanism&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;familiar SQL syntax&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Disadvantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;limited storage&lt;/li&gt;
&lt;li&gt;missing or buggy browser support with inconsistent SQL&lt;/li&gt;
&lt;li&gt;old callback-based API&lt;/li&gt;
&lt;li&gt;poor performance&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#11-appcache"&gt;
  &lt;/a&gt;
  11. AppCache
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/docs/Web/HTML/Using_the_application_cache"&gt;AppCache&lt;/a&gt; is the predecessor to the &lt;a href="#cacheapi"&gt;Cache API&lt;/a&gt;. It attempted to specify caching behavior in a plain text manifest file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CACHE MANIFEST
# cache files
index.html
css/style.css
js/main.js
images/image.png

# use from network when available
NETWORK:
network.html

# fallback when not available
FALLBACK:
. fallback.html
images/ images/offline.png
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This looks simple when compared with Service Workers, but there were &lt;a href="https://alistapart.com/article/application-cache-is-a-douchebag/"&gt;many AppCache issues and gotchas&lt;/a&gt; which would break your site. For example, the cache would only update when you changed the manifest and non-cached resources would refuse to load on a cached page. AppCache was a failure - &lt;em&gt;avoid it!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Use when:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you're a masochist with no fear of breaking your app!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;conceptually easy at first&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Disadvantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;devilishly difficult once you progressed beyond the basics&lt;/li&gt;
&lt;li&gt;removed from the Web platform.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Browsers have evolved over the past three decades so it's not surprising they offer a multitude of storage APIs which essentially do the same thing. It's not always easy to find the 'best' option and you may have to combine several depending on the functionality you're implementing, e.g.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a cookie or two for session state&lt;/li&gt;
&lt;li&gt;DOM storage for Web Component state&lt;/li&gt;
&lt;li&gt;Web Storage for simple UI options (dark mode, sidebar size, etc.)&lt;/li&gt;
&lt;li&gt;IndexedDB for large binary objects and data dumps&lt;/li&gt;
&lt;li&gt;the Cache API for offline and quick file access&lt;/li&gt;
&lt;li&gt;JavaScript variables for everything else.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>HTTP Status Codes that You must know</title>
      <author>Ayushi Rawat </author>
      <pubDate>Wed, 14 Jul 2021 04:18:58 +0000</pubDate>
      <link>https://dev.to/ayushi7rawat/http-status-codes-that-you-must-know-5edn</link>
      <guid>https://dev.to/ayushi7rawat/http-status-codes-that-you-must-know-5edn</guid>
      <description>&lt;p&gt;Hello reader! &lt;/p&gt;

&lt;p&gt;Whenever a client sends a request to server, the response always contains a status code. You might not see it always but its returned at every client-server interaction. Well, even if you are not a programmer, you would still know about the 404 Not Found error.&lt;/p&gt;

&lt;p&gt;In this blog post we will discuss all about http and its response status codes. Consider this as a small cheat sheet, for your references, every time you encounter one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-will-be-covered-in-this-blog"&gt;
  &lt;/a&gt;
  What will be covered in this Blog
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="n"&gt;What&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;HTTP&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;
&lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="n"&gt;What&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Status&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;
&lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;XX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Informational&lt;/span&gt; &lt;span class="n"&gt;codes&lt;/span&gt;
&lt;span class="mf"&gt;4.&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;XX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Success&lt;/span&gt; &lt;span class="n"&gt;codes&lt;/span&gt;
&lt;span class="mf"&gt;5.&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;XX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Redirection&lt;/span&gt; &lt;span class="n"&gt;codes&lt;/span&gt;
&lt;span class="mf"&gt;6.&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;XX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="n"&gt;codes&lt;/span&gt; 
&lt;span class="mf"&gt;7.&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;XX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="n"&gt;codes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Let's get started!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-http"&gt;
  &lt;/a&gt;
  What is HTTP?
&lt;/h2&gt;

&lt;p&gt;HTTP which stands for &lt;strong&gt;Hypertext Transfer Protocol&lt;/strong&gt;. According to the Wikipedia definition:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Hypertext Transfer Protocol is an application layer protocol for distributed, collaborative, hypermedia information systems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;HTTP is a client-server protocol, acts as the foundation of any data exchange on the Web. Each interaction between the client and server is called a message. HTTP messages are requests or responses. Client devices submit HTTP requests to servers, which reply by sending HTTP responses back to the clients.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-status-code"&gt;
  &lt;/a&gt;
  What is Status code?
&lt;/h2&gt;

&lt;p&gt;At every client request, server responds with a code which helps to communicate the status of the request. It is a quick way to inspect if request was successful or not without investing the response body. &lt;/p&gt;

&lt;p&gt;These codes are formed by three numbers indicating the status of a web element. There are basically five standard groups in which status codes are divided and they can be identified by the first digit of the code. They are as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;1XX - Informational codes&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;2XX - Success codes&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;3XX - Redirection codes&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;4XX - Client error codes&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;5XX - Server error codes&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's have a look at each group briefly and discuss the most common status codes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1xx-informational-response"&gt;
  &lt;/a&gt;
  1XX - Informational Response
&lt;/h2&gt;

&lt;p&gt;An informational response indicates that the request was received and understood. It is issued on a provisional basis while request processing continues. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;100 - Continue:&lt;/strong&gt; The server has received the request headers and the client should proceed to send the request body. It states that the client request is good and processing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;101 - Switching Protocols&lt;/strong&gt;: The requester has asked the server to switch protocols and the server has agreed to switch. Basically, the request may involve file operations, requiring a long time to complete the request.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;102 - Processing&lt;/strong&gt;: This code indicates that the server has received and is processing the request, but no response is available yet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;103 - Early Hints&lt;/strong&gt;: Used to return some response headers before final HTTP message.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2xx-success"&gt;
  &lt;/a&gt;
  2XX - Success
&lt;/h2&gt;

&lt;p&gt;This class of status codes indicates the action requested by the client was received, understood, and accepted.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;200 - OK:&lt;/strong&gt; Standard response for successful HTTP requests. Everything's normal and the requested resource has been returned through the message body.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;201 - Created:&lt;/strong&gt; The request has been fulfilled, resulting in the creation of a new resource and the server has acknowledged it. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;202 - Accepted:&lt;/strong&gt; This code indicates that the server has received and is processing the request, but no response is available yet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;204 - No Content:&lt;/strong&gt; The server successfully processed the request, and is not returning any content. Generally, the PUT method is used for a 204 response.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3xx-redirection"&gt;
  &lt;/a&gt;
  3XX - Redirection
&lt;/h2&gt;

&lt;p&gt;This group of status code indicates that the client must take additional action to complete the request.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;301 - Moved Permanently&lt;/strong&gt;: This indicates that the URL has been moved once and for all. This is used to inform the browser that the requested file has been moved and can be used to redirect from a page that is no longer in existence.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;305 - Use Proxy&lt;/strong&gt;: The requested resource is available only through a proxy, the address for which is provided in the response.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;307 - Temporary Redirect&lt;/strong&gt;: In this scenario, the response code indicates that the requested resource has been temporarily moved to another URI. however, future requests should still use the original URI.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4xx-client-errors"&gt;
  &lt;/a&gt;
  4XX - Client errors
&lt;/h2&gt;

&lt;p&gt;This class of status code is intended for situations in which the error seems to have been caused by the client.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;400 - Bad Request&lt;/strong&gt;: The server cannot or will not process the request due to wrong syntax causing an error.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;401 - Unauthorized&lt;/strong&gt;: Response is similar to &lt;em&gt;403 Forbidden&lt;/em&gt;, but specifically for use when authentication is required and has failed or has not yet been provided. The requested file can be protected one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;403 - Forbidden&lt;/strong&gt;: The request contained valid data and was understood by the server, but the server is refusing action. It's possible that the server might not have permission to share the file with client.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;404 - Not Found&lt;/strong&gt;: The requested resource could not be found or does not exist but may be available in the future.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;405 - Method Not Allowed:&lt;/strong&gt; A request method is not supported for the requested resource; eg, a PUT request on a read-only resource.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;414 URI Too Long&lt;/strong&gt;: The URI provided was too long for the server to process as a result of too much data being encoded as a query-string of a GET request.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;429 Too Many Requests&lt;/strong&gt;: The user has sent too many requests in a given amount of time, helps increase the security.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5xx-server-errors"&gt;
  &lt;/a&gt;
  5XX - Server errors
&lt;/h2&gt;

&lt;p&gt;You can encounter server error when the client has raised a valid request, The server failed to fulfil the request.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;500 - Internal Server Error&lt;/strong&gt;: An error message, displayed when an unexpected situation was encountered that does not match any other class errors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;501 - Not Implemented&lt;/strong&gt;: The server either does not recognize the request method, or it lacks the ability to fulfil the request.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;502 - Bad Gateway&lt;/strong&gt;: The server act as a gateway and received an invalid response from the server while making the request.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;503 - Service Unavailable&lt;/strong&gt;: The server cannot handle the request because it is overloaded or down for maintenance.&lt;/p&gt;

&lt;p&gt;That's all for this article and with that, it's a wrap! I hope you found the article useful. Thank you for reading, If you have reached so far, please like the article, It will encourage me to write more such articles. Do share your valuable suggestions, I appreciate your honest feedback!&lt;/p&gt;

&lt;p&gt;I create content about &lt;strong&gt;Career, Blogging, Programming, and Productivity&lt;/strong&gt;, If this is something that interests you, please share the article with your friends and connections.&lt;/p&gt;

&lt;p&gt;I would strongly recommend you to Check out the &lt;a href="https://www.youtube.com/watch?v=jAOkWehMF6E"&gt;YouTube video&lt;/a&gt; of the same and &lt;strong&gt;don't forget to subscribe to my Channel&lt;/strong&gt;. I would love to connect with you at &lt;a href="https://twitter.com/ayushi7rawat"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/ayushi7rawat/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You should definitely check out my other Blogs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/python-39-all-you-need-to-know"&gt;Python 3.9: All You need to know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/github-cli-10-all-you-need-to-know"&gt;GitHub CLI 1.0: All you need to know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/how-to-make-your-own-google-chrome-extension-1"&gt;How to make your own Google Chrome Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/run-javascript-from-python"&gt;Run Javascript from Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/automate-whatsapp-using-python"&gt;Automate WhatsApp using Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/automate-cowin-vaccine-slots-availablity-using-python"&gt;Automate Cowin Vaccine slots Availability using Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/what-is-competitive-programming-or-beginners-guide"&gt;What is Competitive Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol"&gt;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes"&gt;https://en.wikipedia.org/wiki/List_of_HTTP_status_codes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See you in my next Blog article, Take care!!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>computerscience</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to Add Legends to the React Charts of Syncfusion</title>
      <author>Techguy</author>
      <pubDate>Wed, 14 Jul 2021 03:34:30 +0000</pubDate>
      <link>https://dev.to/syncfusion/how-to-add-legends-to-the-react-charts-of-syncfusion-4hmo</link>
      <guid>https://dev.to/syncfusion/how-to-add-legends-to-the-react-charts-of-syncfusion-4hmo</guid>
      <description>&lt;p&gt;Learn how easily you can add legends to Syncfusion &lt;a href="https://www.syncfusion.com/react-ui-components/react-charts"&gt;React Charts&lt;/a&gt;. This video explains how to align the legends, customize the legends and their icon sizes, select a series on clicking the legends, and enable animations.&lt;/p&gt;

&lt;p&gt;Download the example from GitHub: &lt;br&gt;
&lt;a href="https://bit.ly/3jONwM8"&gt;https://bit.ly/3jONwM8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Refer to the following documentation to add legends in the Syncfusion React Charts:&lt;br&gt;
&lt;a href="https://bit.ly/2UsWGmQ"&gt;https://bit.ly/2UsWGmQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out this online example of legend in the Syncfusion React Charts: &lt;br&gt;
&lt;a href="https://bit.ly/2UngOa6"&gt;https://bit.ly/2UngOa6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/7VYeN4W_wMc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>charts</category>
      <category>webdev</category>
      <category>component</category>
    </item>
    <item>
      <title>Setting Permissions in S3</title>
      <author>Ajit Singh</author>
      <pubDate>Wed, 14 Jul 2021 02:50:15 +0000</pubDate>
      <link>https://dev.to/this-is-learning/setting-permissions-in-s3-2ccf</link>
      <guid>https://dev.to/this-is-learning/setting-permissions-in-s3-2ccf</guid>
      <description>&lt;p&gt;We studied about the basics of S3 in the last tutorial. In this article we will see how to set permissions for a bucket in S3. To setup permissions in S3 we can use 2 options &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Bucket Policies&lt;/li&gt;
&lt;li&gt;ACL(Access control Lists)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#bucket-policies"&gt;
  &lt;/a&gt;
  Bucket policies
&lt;/h2&gt;

&lt;p&gt;As we saw in last tutorial anyone cannot access our S3 objects there is permission denied page when we try to access it over the internet. To provide public access to the objects in the bucket we need to set a bucket policy which explicitly allows some objects to be visible over the internet. Let us checkout a demo policy so that we can see how we can setup a bucket policy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"2012-10-17"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"Statement"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Sid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"PublicRead"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Allow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Principal"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"s3:GetObject"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"s3:GetObjectVersion"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Resource"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"arn:aws:s3:::DOC-EXAMPLE-BUCKET/*"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bucket policies are JSON based policies. Lets study what each key means.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Version&lt;/strong&gt; - The policy Version defines the version of the policy language&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Statement&lt;/strong&gt; - This defines the all the things that are defined using the policy language defined in version.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sid&lt;/strong&gt; - The Sid or statement-ID is an identifier that you provide for the policy statement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Effect&lt;/strong&gt; - It has two values Allow/Deny it tells us whether this statement allows certain things or Deny access to anyone.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prinicipal&lt;/strong&gt; - Principal specifies the user, account, service, or other entity that is allowed or denied access to a resource in AWS S3 bucket.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Action&lt;/strong&gt; - This defined what actions we are limiting t=in the policy statement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resource&lt;/strong&gt; - Defines the bucket and objects on which this policy works.&lt;/p&gt;

&lt;p&gt;You can add multiple statements in a policy and this will define who can access our S3 bucket.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aclaccess-control-lists"&gt;
  &lt;/a&gt;
  ACL(Access control Lists)
&lt;/h2&gt;

&lt;p&gt;ACL defines which AWS accounts or groups are granted access and the type of access granted to these accounts. When a request is received against a resource, Amazon S3 checks the corresponding ACL to verify that the requester has the necessary access permissions. ACL are rarely used and a bit complex so let us leave them for now as everything that an ACL can do can be done via bucket policy or IAM permissions but if you want to know more about them I've attached a link to the &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the next tutorial we will setup some S3 policies and see how it affects the buckets.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>devops</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Improve your JavaScript code with these...</title>
      <author>Neha Sharma </author>
      <pubDate>Wed, 14 Jul 2021 00:47:51 +0000</pubDate>
      <link>https://dev.to/hellonehha/improve-your-javascript-code-with-these-1fji</link>
      <guid>https://dev.to/hellonehha/improve-your-javascript-code-with-these-1fji</guid>
      <description>&lt;p&gt;Have you ever thought what are the areas or things to take care of to improve your code? Logical code can be improved by focusing on time and space complexity.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IMpGXTB7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3b6wy1hu1z201fque2ph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IMpGXTB7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3b6wy1hu1z201fque2ph.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, the way we are writing the code also contributes a lot. Below are a few tips for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-use-raw-const-endraw-"&gt;
  &lt;/a&gt;
  1. use &lt;code&gt;const&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Use &lt;code&gt;const&lt;/code&gt; in your JavaScript code for the variables and methods. This will help you in avoiding the unexpected change in the value or reassignment of the variables.&lt;/p&gt;

&lt;p&gt;An easy way to make your JavaScript code safe from bugs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const name = 'Delhi';
const getName = function(){
    name = 'Mumbai'; // this will throw an error
    return name;
}

getName();

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-avoid-global-variables-and-methods"&gt;
  &lt;/a&gt;
  2. Avoid global variables and methods
&lt;/h2&gt;

&lt;p&gt;As we saw that &lt;code&gt;const&lt;/code&gt; won't let the accidental value update. There are hardly any programs that can be done using only &lt;code&gt;const&lt;/code&gt;. We need to declare the variables, &amp;amp; methods. &lt;/p&gt;

&lt;p&gt;So, in such a case, we use var or &lt;code&gt;let&lt;/code&gt; but instead of making them global, we should make their scope as per the requirements. Why? global variables could be error-prone. declare global only when it is unavoidable and required.&lt;/p&gt;

&lt;p&gt;So, in short, avoid the global variables and methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-functions-methods"&gt;
  &lt;/a&gt;
  3. functions /methods
&lt;/h2&gt;

&lt;p&gt;Always create the functions to wrap your code or logic. &lt;/p&gt;

&lt;p&gt;Eg: Instead of doing this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var a = 2;
var b = 3;

var result = a + b;
return result;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
function sumNumbers(a,b){
     return result = a + b;
}

sumNumbers(2,3);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-array-new-methods"&gt;
  &lt;/a&gt;
  4. Array new methods
&lt;/h2&gt;

&lt;p&gt;The ECMA team is doing an amazing job in making the developer's life easy and difficult at the same time.  How? well, they are coming up with awesome features to make our life easy but at the same time there is always something new is coming up :) &lt;/p&gt;

&lt;p&gt;ES6 introduced a lot of array-based methods. such as &lt;code&gt;map()&lt;/code&gt;, &lt;code&gt;reduce()&lt;/code&gt;, &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;every()&lt;/code&gt;, &lt;code&gt;some()&lt;/code&gt;. They implicitly return a new array. Do you know what it means? &lt;/p&gt;

&lt;p&gt;It means that they are far efficient than the code we will write to do the same operation. &lt;br&gt;
So, wherever you get the chance use these methods.&lt;/p&gt;

&lt;p&gt;Eg: Instead of this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const a = [1,2,3,4]
let tempArr = [];

for(let i =0; i &amp;lt; a.length; i++){ 
  tempArr.push(a[i]);
}

return tempArr;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const a = [1,2,3,4]

const b = a.map((val, index) =&amp;gt; {
  return val;
});

return b;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;You can follow me at &lt;a href="https://twitter.com/hellonehha"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/nehha/"&gt;Linkedin&lt;/a&gt;;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;



&lt;h2&gt;
  &lt;a href="#5-patterns-are-your-friends"&gt;
  &lt;/a&gt;
  5. Patterns are your friends
&lt;/h2&gt;

&lt;p&gt;Patterns help in readability, and encapsulation. In JavaScript, we have different kinds of patterns and as per the need, we can pick the pattern. It is a good practice to identify or move your code to a pattern.&lt;/p&gt;

&lt;p&gt;Read about patterns &lt;a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#6-communication-through-comments"&gt;
  &lt;/a&gt;
  6. Communication through Comments
&lt;/h2&gt;

&lt;p&gt;Write meaningful comments. Comments are the way the developers communicate and understand the code. It is important to use clear and well-written comments in the code.&lt;br&gt;
One of the areas I would strongly suggest having comments is: what kind of arguments a function is expecting. This is important when we are not using any type-checking library.&lt;/p&gt;

&lt;p&gt;Instead of doing this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* pass value to add numbers  */

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
 * return the sum of the two given arguments
 * @type numbers
 */

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#7-identify-reusable-code"&gt;
  &lt;/a&gt;
  7.  Identify Reusable Code
&lt;/h2&gt;

&lt;p&gt;Every programming language focus on the 'DRY - Do not Repeat Yourself' or the Reusability principle. JavaScript also focuses on the same. As a developer identify the reusable code and move them to &lt;code&gt;functions&lt;/code&gt;. So, that it can be reuse, test once, avoid errors, save time, and have consistency.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-error-and-exception-handling"&gt;
  &lt;/a&gt;
  8.  Error and exception handling
&lt;/h2&gt;

&lt;p&gt;Use &lt;code&gt;try/catch&lt;/code&gt; to handle the error and exceptions. This is one thing that a lot of developers just missed (including me).  Using try/catch is an important way to avoid the embarrassing errors messages on browsers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-use-pure-functions"&gt;
  &lt;/a&gt;
  9.  Use Pure functions
&lt;/h2&gt;

&lt;p&gt;Pure functions are important to avoid errors and writing functional, reusable code.&lt;br&gt;
Pure functions mean it will always return the same output with the same input values without any side effects. Eg: &lt;code&gt;map()&lt;/code&gt; is an example of the pure function but &lt;code&gt;Math.max()&lt;/code&gt; is not.&lt;/p&gt;

&lt;p&gt;Why pure functions are important? &lt;br&gt;
As I mentioned that they help in avoiding errors,  promote reusable and functional code.&lt;br&gt;
When there are no side effects there will be fewer errors. They are the small functions that promote reusability. Hence, helps us in writing reusable code. &lt;/p&gt;




&lt;p&gt;&lt;strong&gt;&lt;em&gt;These are a few points but are not limited to. We should also take care of the performance, data operation's complexity, and a lot more. Always keep questioning and refactoring your code. There might not be a perfect code but we should not ship bad code ever.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Happy Learning!!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>development</category>
      <category>frontend</category>
    </item>
    <item>
      <title>I tried to mount a client-side "attack" on a news website poll by using only Javascript. And I failed miserably.  </title>
      <author>Ivan Spoljaric</author>
      <pubDate>Wed, 14 Jul 2021 00:18:10 +0000</pubDate>
      <link>https://dev.to/ispoljari/i-tried-to-mount-a-client-side-attack-on-a-news-website-poll-by-using-only-javascript-and-i-failed-miserably-1ebf</link>
      <guid>https://dev.to/ispoljari/i-tried-to-mount-a-client-side-attack-on-a-news-website-poll-by-using-only-javascript-and-i-failed-miserably-1ebf</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JOdHFqKw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofx1p297o3kb1prtxn9k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JOdHFqKw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofx1p297o3kb1prtxn9k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-step-running-the-script-locally"&gt;
  &lt;/a&gt;
  First step - Running the script locally
&lt;/h2&gt;

&lt;p&gt;For academic purposes I tried to create a client-side script to manipulate the results of a random poll on a &lt;a href="https://www.index.hr/vijesti/clanak/velika-anketa-treba-li-cijepljenje-u-skolstvu-zdravstvu-i-socijali-biti-obavezno/2290306.aspx"&gt;Croatian news portal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The poll is open at the moment writing, but it probably won't stay that way for long.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackblitz.com/edit/js-ddpj1r?file=backup.js"&gt;Here's the code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code consists of these steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;waiting for "DOMContentLoaded" event&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;closing the cookie banner&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;selecting a poll answer&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;MutationObserver indicates changes in the DOMTree target iframe. This means that the results are "in". Then the  localStorage is cleared.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;a timer, which started running immediately after "DOMContentLoaded", reloads the page after 2 seconds. And the script starts from the beginning&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It works as intended if you run it directly in the dev tools console.&lt;/p&gt;

&lt;p&gt;You'll probably notice how the code is tightly coupled with the html/css implementation of the web page. &lt;/p&gt;

&lt;p&gt;Since I was creating a proof of concept I didn't bother to  write the functions in a generalised way. &lt;/p&gt;

&lt;p&gt;I used the exact CSS class name from the site, and targeted the poll iframe based on its position in the HTML. &lt;/p&gt;

&lt;p&gt;I had a pretty strong hunch that it won't work anyway (not that it stopped me from trying).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#second-step-automating-the-script"&gt;
  &lt;/a&gt;
  Second step - Automating the script
&lt;/h2&gt;

&lt;p&gt;The next step was to think of a way to run the script automatically, without the need to paste the code in the console every time. &lt;/p&gt;

&lt;p&gt;So, I created a custom &lt;a href="https://stackblitz.com/edit/js-uhxg5p?file=content-script.js"&gt;browser extension&lt;/a&gt;, which has only one additional manifest.json file.&lt;/p&gt;

&lt;p&gt;And that didn't work. &lt;/p&gt;

&lt;p&gt;Line 2 is the problem.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;iframe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;contentDocument&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It doesn't work because of the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"&gt;"Same Origin Policy"&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;It's a "critical security mechanism that restricts how a document or script loaded by one origin can interact with a resource from another origin".&lt;/p&gt;

&lt;p&gt;And this also applies to iframes.&lt;/p&gt;

&lt;p&gt;"External" iframe's can't be accessed, nor manipulated from a document which is not served on the same origin (domain). &lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;For completeness sake, I also tried to use the 3 most popular browser extensions that enable running custom scripts on any web page; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GreaseMonkey&lt;/li&gt;
&lt;li&gt;TamperMonkey&lt;/li&gt;
&lt;li&gt;ViolentMonkey.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I tested out a few StackOverflow suggestions, related to the configuration of those extensions, in a foolish attempt to beat the system. &lt;/p&gt;

&lt;p&gt;But with no luck.&lt;/p&gt;

&lt;p&gt;You can't beat the system by breaking its hard rules. Unless you're the One. And it turns out I'm not. At least not yet. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-glimmer-of-hope"&gt;
  &lt;/a&gt;
  A glimmer of hope
&lt;/h2&gt;

&lt;p&gt;Fortunately not all of my work was in vain. &lt;/p&gt;

&lt;p&gt;As I was slowly accepting my fate, and getting ready to completely give up, I stumbled on an alternative approach to this problem. &lt;/p&gt;

&lt;p&gt;There's a method called &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage"&gt;Window.postMessage&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And its API looks kind of promising (with regard to CORS issues caused by external iframe communication).&lt;/p&gt;

&lt;p&gt;So the story continues. Stay tuned. :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Do you know any other way, or a hack, to bypass the Same Origin Policy? &lt;/p&gt;

&lt;p&gt;Is there another approach to the "external iframe" problem, which I didn't think of?&lt;/p&gt;

&lt;p&gt;Or is it just plain impossible to do this on the client (FE) side (which is a good thing I suppose, because it prevents malicious behaviour).&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Your Guide to HTTP Response Status Code</title>
      <author>Aya Bouchiha</author>
      <pubDate>Tue, 13 Jul 2021 23:20:59 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/http-response-status-code-43ai</link>
      <guid>https://dev.to/ayabouchiha/http-response-status-code-43ai</guid>
      <description>&lt;p&gt;Hello, I'm &lt;a href="https://t.me/AyaBouchiha"&gt;Aya Bouchiha&lt;/a&gt; and this is #day-31, in this post, we'll cover the most famous  &lt;strong&gt;HTTP Status Codes&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#definition-of-http-response-status-codes"&gt;
  &lt;/a&gt;
  Definition of HTTP Response Status Codes
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;HTTP response status codes&lt;/strong&gt; are three-digit responses from the server to the browser-side request. such as &lt;em&gt;500&lt;/em&gt; and &lt;em&gt;404&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://umbraco.com/knowledge-base/http-status-codes/"&gt;www.umbraco.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#http-status-codes-groups"&gt;
  &lt;/a&gt;
  HTTP Status Codes Groups
&lt;/h2&gt;

&lt;p&gt;These are the most famous HTTP Status Codes, for more details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status"&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://umbraco.com/knowledge-base/http-status-codes/#400-bad-request"&gt;https://umbraco.com/knowledge-base/http-status-codes/#400-bad-request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://restfulapi.net/http-status-codes/"&gt;https://restfulapi.net/http-status-codes/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#1-informational-responses-100-199"&gt;
  &lt;/a&gt;
  1. Informational Responses (100 - 199)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;100&lt;/strong&gt;: (Continue) means that the initial part of the request has been received and has not yet been rejected by the server.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;102&lt;/strong&gt;: (Processing) this status code means that the server has received and is processing the request. But no response is available yet&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-successful-responses-200-299"&gt;
  &lt;/a&gt;
  2. Successful Responses    (200 - 299)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;200&lt;/strong&gt; : (OK) the request has succeded.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;201&lt;/strong&gt; : (Created) means that the request (&lt;em&gt;POST or PUT&lt;/em&gt;) has succeeded and a new resource has been created as a result. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;202&lt;/strong&gt;: (Accepted) the request has been accepted for processing, but the processing has not been completed&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-redirection-messages-300-399"&gt;
  &lt;/a&gt;
  3. Redirection Messages    (300 - 399)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;301&lt;/strong&gt;: (Moved Permanently) indicates that the URL has been changed permanently &amp;amp; the new one is given in the response&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;307&lt;/strong&gt;: (Temporary Redirect) the server-side send this kind of response in order to direct the client  to get the requested resource at another URI&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-client-error-responses-400-499"&gt;
  &lt;/a&gt;
  4. Client Error Responses  (400 - 499)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;400&lt;/strong&gt;: (Bad Request) the server can't understand the request due to the invalid syntax.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;401&lt;/strong&gt;: (Unauthorized) means that the client is unauthenticated, and should authenticate for getting the requested response&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;403&lt;/strong&gt;: (Forbidden) the server refused to give the requested resource because the client is unauthorized to get the content.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;404&lt;/strong&gt;: (Not Found) indicates that the URL is not recognized.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;405&lt;/strong&gt;: (Method Not Allowed) The request method is not supported.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#5-server-error-responses-500-599"&gt;
  &lt;/a&gt;
  5. Server Error Responses  (500 - 599)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;500&lt;/strong&gt;: (Internal Server Error)given when an unexpected condition was encountered and no more specific message is suitable&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;501&lt;/strong&gt;: (Not Implemented)  indicates that the request can not be handled because it is not supported by the server&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;503&lt;/strong&gt;: (Service Unavailable) indicates that the server is currently not ready to handle the request. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;511&lt;/strong&gt;: (Network Authentication Required) means that the client needs to authenticate to gain network access.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#references-and-useful-resources"&gt;
  &lt;/a&gt;
  References and useful Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status"&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://umbraco.com/knowledge-base/http-status-codes/#400-bad-request"&gt;https://umbraco.com/knowledge-base/http-status-codes/#400-bad-request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://restfulapi.net/http-status-codes/"&gt;https://restfulapi.net/http-status-codes/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=iYM2zFP3Zn0"&gt;https://www.youtube.com/watch?v=iYM2zFP3Zn0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=wJa5CTIFj7U"&gt;https://www.youtube.com/watch?v=wJa5CTIFj7U&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#quote-of-the-day"&gt;
  &lt;/a&gt;
  Quote of the day
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;"failure is an event, not a person"&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Zig Ziglar&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Happy Coding :)&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title>I got 99 problems, but that‚Äôs better than one</title>
      <author>Mauro L√≥pez</author>
      <pubDate>Tue, 13 Jul 2021 23:07:40 +0000</pubDate>
      <link>https://dev.to/maurolopezj/i-got-99-problems-but-that-s-better-than-one-45ln</link>
      <guid>https://dev.to/maurolopezj/i-got-99-problems-but-that-s-better-than-one-45ln</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This is a small collection of some lessons learned facing up different situations in my daily life as a software engineer. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In my opinion, work as a software engineer is nothing but the continuous implementation of solutions to different situations, some of them are technical and others no-technical. No matter the type of situation, each one can teach you many things, even things you thought you knew. &lt;/p&gt;

&lt;p&gt;This article pretends to be a support for any dev but especially for those who are starting on this great road&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#we-work-with-computers-but-humans-are-our-principal-customer"&gt;
  &lt;/a&gt;
  We work with computers, but humans are our principal customer
&lt;/h2&gt;

&lt;p&gt;When I talk about a ‚Äúcustomer‚Äù I‚Äôm not only talking about the final user of the app or the product owner, I‚Äôm talking about our co-workers too because, in the end, we are giving a service, the service of build software! And real software is building in teams. &lt;/p&gt;

&lt;p&gt;So, to be gentle, kind, and empathetic is very important. Virtuality or the fast pace from routine makes it easy to forget that on the other side of the screen/table, there is a human too. Small actions such as showing genuine interest in others or small talks with your teammates can make the different. Every person is different and great on their own.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-can-be-a-leader-no-matter-where-you-are"&gt;
  &lt;/a&gt;
  You can be a leader, no matter where you are
&lt;/h2&gt;

&lt;p&gt;You don't need to wait until you are in a leadership position in order to perform your leadership. No matter your position you always be able to make suggestions, provide solutions, discuss scenarios, spread a good attitude to the team‚Ä¶ and by doing that, you will build relations that will allow you to increase your influence zone every day more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#visibility-is-the-key"&gt;
  &lt;/a&gt;
  Visibility is the key
&lt;/h2&gt;

&lt;p&gt;Usually, we have an inner voice that tells us we're lost even before we realize we truly are. In that case, the best approach is to raise our hand as soon as we hear it in order to give visibility to the situation and plan different scenarios.&lt;/p&gt;

&lt;p&gt;You don't have to send a red flag to the team at the first time you hear the voice I just mentioned, it‚Äôs only to communicate that probably that ticket will require more time than you expected or you‚Äôre having troubles with X or Y thing and because of that you will need to add new subtask or increase the remaining time of the task. When the situation progress, you can give updates and in case you require help, the situation will be easier to manage because you gave visibility with time   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#documentation-is-like-a-hug-to-yourself-or-someone-else-in-the-future"&gt;
  &lt;/a&gt;
  Documentation is like a hug to yourself (or someone else) in the future
&lt;/h2&gt;

&lt;p&gt;Do you remember the reason why you and your friends went to that new cafe and not to the usual one 4 months ago? Well, basically the same here! Sometimes we make small decisions that make a lot of sense at the moment, but we can forget in the future, and in case that you need to look back and understand the reason for the things, you can save a lot of time if you can find context easily. So, document!! Document your methods, document your tickets, document your pull request, document with clear messages your git commitments‚Ä¶ document.&lt;/p&gt;

&lt;p&gt;Documentation requires time, but trust me, is a good investment. Also, you can add a subtask in your ticket only to document all the stuff you did there. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;We work with computers, but humans are our principal customer&lt;/li&gt;
&lt;li&gt;You can be a leader, no matter where you are&lt;/li&gt;
&lt;li&gt;Visibility is the key&lt;/li&gt;
&lt;li&gt;Documentation is like a hug to yourself (or someone else) in the future&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#postdata"&gt;
  &lt;/a&gt;
  Postdata:
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;This article is based on &lt;a href="https://faingezicht.com/articles/2020/06/13/chunks/"&gt;this other&lt;/a&gt; written by &lt;a href="https://twitter.com/avyfain"&gt;Avy Faingezicht&lt;/a&gt;  (even has the same title, but kind of different focus). I decided to write my own version because I feel identified with many situations exposed there and it was very helpful in order to give me a guide for solving some of my situations as a software engineer. For that reason, I would love to share my experience in case it could help others.  Also, I recommended you to take a look into Avy Faingezicht‚Äôs blog, which has many other interesting &lt;a href="https://faingezicht.com/articles/"&gt;articles&lt;/a&gt; and &lt;a href="https://faingezicht.com/photos/"&gt;cool photos !&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>career</category>
      <category>devlive</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
