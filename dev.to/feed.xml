<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Coordination does not scale</title>
      <author>Edoardo Tenani</author>
      <pubDate>Tue, 02 Nov 2021 11:38:29 +0000</pubDate>
      <link>https://dev.to/endorama/coordination-does-not-scale-394e</link>
      <guid>https://dev.to/endorama/coordination-does-not-scale-394e</guid>
      <description>&lt;p&gt;It's monday. You wake out and reach the office (which may very well be your sofa given the current times), turn on your laptop and open your email software.&lt;br&gt;
One of them catches your attention; the title reads "New company wide Project Management tool".&lt;/p&gt;

&lt;p&gt;A chill goes down your spine. "Make it be not Jira" is the first thought as you open the email.&lt;/p&gt;

&lt;p&gt;Feels familiar? I guess everyone had a similar moment in their professional career.&lt;/p&gt;

&lt;p&gt;I've had the pleasure to follow the rollout and administrate an Atlassian Jira Cloud instance for a couple of years for a small company, and I don't think I have fully recovered yet. The complexity hidden behind that subscription is massive.&lt;/p&gt;

&lt;p&gt;After self-reflection, my question is: was it Jira's fault? Is the tool to blame for the complexity of the resulting process and the effort it required just to use it for day to day work? Would another tool change the outcome?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;It seems it's the tool that matters, but it's not. It's the context around the tool that matters.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a perspective from an ex-DevOps working for a product company.&lt;br&gt;
This post is not about Jira. Far from being perfect but you'll never be happy using a hammer when you need a screwdriver.&lt;/p&gt;

&lt;p&gt;This post is about the fundamental wrong assumption we make when searching for a project management tool.&lt;/p&gt;

&lt;p&gt;The first interesting question is: why do we need a project management tool?&lt;br&gt;
The answer I've seen in the wild is that coordinating the work in progress becomes too difficult, and this complexity is blamed on the tooling being missing or not adequate (i.e. different or fragmented usage, missing items, lack of visibility or adoption).&lt;/p&gt;

&lt;p&gt;The supposed benefit of a Project Management tool are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;coordination, defined as being able to make plans on top of other groups activities/plannings&lt;/li&gt;
&lt;li&gt;consistency, defined as being able to move easily across groups/teams with a small overhead&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But you are not going to achieve consistency, and once that promise is broken, good luck obtaining coordination. More interesting, coordination may not be what you need at all.&lt;/p&gt;

&lt;p&gt;First, let's examine consistency. I've yet to see two teams (or people) use the same tool in the same way. It doesn't matter how far the teams are, even in the same company.&lt;br&gt;
Most of the time, the usage is so different that they could be two different, not interoperable tools, and the complexity would be the same.&lt;br&gt;
Consistency requires a massive effort in understanding, coordination, enforcement. Such effort does not scale and is so rigid that you risk being paralysed by it.&lt;/p&gt;

&lt;p&gt;Do we really need consistency? &lt;strong&gt;No&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We strive for consistency because we expect it to drive better collaboration. And we struggle so much trying to be consistent that our work becomes keeping the consistency.&lt;/p&gt;

&lt;p&gt;I would argue that once you reach proper consistency, the one-size-fits-all approach resulting from it would be a terrible product management take. (Remember it is a product company, not a consultancy).&lt;br&gt;
The one-size-fits-all does not work because software development is knowledge work. It implies learning, continuously. It implies adapting.&lt;/p&gt;

&lt;p&gt;We know that knowledge work requires "&lt;a href="https://www.calnewport.com/blog/2012/11/21/knowledge-workers-are-bad-at-working-and-heres-what-to-do-about-it/"&gt;deep work&lt;/a&gt;", defined as long slots of uninterrupted focus work time. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The Deep Work Hypothesis.&lt;/strong&gt;&lt;br&gt;
Deep work is becoming increasingly valuable at the same time that it’s becoming increasingly rare. Therefore, if you cultivate this skill, you’ll thrive.&lt;br&gt;
&lt;em&gt;Cal Newport in &lt;a href="https://www.calnewport.com/blog/2015/11/20/deep-work-rules-for-focused-success-in-a-distracted-world/"&gt;Deep Work: Rules for Focused Success in a Distracted World&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c0npIBRW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1453728013993-6d66e9c9123a%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1740%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c0npIBRW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1453728013993-6d66e9c9123a%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1740%26q%3D80" alt="landscape with focused center through photographic lens" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The recent remote work explosion made clear something that remote companies already knew: focus work drives productivity (and revenue).&lt;br&gt;
If we already trust people to plan work and execute through long focused time slots, why don't we trust teams to do the same?&lt;/p&gt;

&lt;p&gt;It's time to go back to the drawing board and review the question that brought us here. The question we should start from is "how do we deliver better software?". &lt;br&gt;
We know some coordination is needed and we know focus is needed.&lt;br&gt;
So why don't we focus on making coordination &lt;em&gt;easier&lt;/em&gt; instead of making it &lt;em&gt;consistent&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;What does consistency even mean in a fast-paced context like software development? There is an industry focus on being agile to respond to changes, but coordination makes reacting to change more difficult and expensive.&lt;/p&gt;

&lt;p&gt;What to do instead? Incidentally, we can take inspiration from the same field we are in. Software Engineers developed ways to make it easier for different code created in isolation to work once it is put all together.&lt;/p&gt;

&lt;p&gt;We use testing, decoupling, interfaces and APIs. Those are our tools to build incredibly complex and interconnected systems.&lt;/p&gt;

&lt;p&gt;Then why don't we apply the same principles to coordinating work? (Spoiler: hyperscalers do).&lt;br&gt;
We can derive that it is not coordination that is important, but boundaries and understanding.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Boundaries&lt;/strong&gt;: once I start thinking about what a dependency should do to fulfil a need I have, I stop worrying about my work and start worrying about someone else’s work. Boundaries drive &lt;strong&gt;Expectations&lt;/strong&gt;: if I know I cannot directly influence something, I will need to find ways to integrate with more generalist approaches.&lt;br&gt;
&lt;strong&gt;Understanding&lt;/strong&gt;: no system can talk to another without mutual protocols that both systems understand. No teams can work together without mutual understanding and building shared processes.&lt;/p&gt;

&lt;p&gt;Defining boundaries and understanding others can be only fulfilled through communication. Any communication protocol (in use by humans or machines) adds overhead to the conversation (why is the Lora protocol preferred over TCP/IP in IoT? Lower overhead)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Being a generalist and understating others requires communicating, which creates overhead, like any communication protocol.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Any form of collaboration has overhead. Your Project Management tool of choice will have overhead, probably hidden behind all the marketing. &lt;/p&gt;

&lt;p&gt;But we have a North Star to drive us, we want to &lt;strong&gt;build better software&lt;/strong&gt;.&lt;br&gt;
We cannot answer only considering costs (collaboration overhead) we have to consider quality.&lt;br&gt;
Boundaries and understanding drive quality.&lt;/p&gt;

&lt;p&gt;You will adopt a Project Management tool. But do not use it for coordination, use it to empower teams within themselves.&lt;/p&gt;

&lt;p&gt;Coordination is not the forcing function you want your employee to spend time on. Instead, engage teams to define boundaries and create space to understand each other.&lt;/p&gt;

&lt;p&gt;In the end, we want &lt;a href="https://twitter.com/shreyas/status/1326199111058481152"&gt;better software for better products to better serve our customers&lt;/a&gt; in an ever changing landscape. Your silver bullets are empowered teams working towards the same goals.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover photo by &lt;a href="https://unsplash.com/@myleon?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Leon&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/project-manager?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Inline photo by &lt;a href="https://unsplash.com/@pawelskor?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Paul Skorupskas&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/focus-camera?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hey 👋 I'm Edoardo. I've been a DevOps and started digging into processes and what does it mean to improve software delivery within a company. Reading and listening creates opinion, and I'd like to discuss them with anyone interested! Join the conversation and let me know what you think in the comments!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>management</category>
      <category>business</category>
    </item>
    <item>
      <title>Top 10 articles about JavaScript of the week💚.</title>
      <author>Kavindu Santhusa</author>
      <pubDate>Tue, 02 Nov 2021 11:32:01 +0000</pubDate>
      <link>https://dev.to/ksengine/top-10-articles-about-javascript-of-the-week-590l</link>
      <guid>https://dev.to/ksengine/top-10-articles-about-javascript-of-the-week-590l</guid>
      <description>&lt;p&gt;DEV is a community of software developers getting together to help one another out. The software industry relies on collaboration and networked learning. They provide a place for that to happen.&lt;/p&gt;

&lt;p&gt;Once relegated to the browser as one of the 3 core technologies of the web, JavaScript can now be found almost anywhere you find code.&lt;br&gt;
JavaScript developers move fast and push software development forward; they can be as opinionated as the frameworks they use, so let's keep it clean here and make it a place to learn from each other!&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__6"&gt;
  
    .ltag__tag__id__6 .follow-action-button{
      background-color: #F7DF1E !important;
      color: #000000 !important;
      border-color: #F7DF1E !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/javascript" class="ltag__tag__link"&gt;javascript&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        &amp;lt;p&amp;gt;Once relegated to the browser as one of the 3 core technologies of the web, JavaScript can now be found almost anywhere you find code. &amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;JavaScript developers move fast and push software development forward; they can be as opinionated as the frameworks they use, so let's keep it clean here and make it a place to learn from each other!&amp;lt;/p&amp;gt;
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Here is the most popular articles published on this platform.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1"&gt;
  &lt;/a&gt;
  #1
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/freakcdev297/creating-a-blockchain-in-60-lines-of-javascript-5fka"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4GC2eyQi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uSUz8bE4--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ubno1i6mkcco3xkhps1.jpg" alt="Image of post" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/freakcdev297" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8NfZCk6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--RBN44Pfq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/605458/d78adfc7-1d97-4f09-b2ee-1aeef0f782f8.png" alt="freakcdev297"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/freakcdev297/creating-a-blockchain-in-60-lines-of-javascript-5fka" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Creating a blockchain in 60 lines of Javascript&lt;/h2&gt;
      &lt;h3&gt;Phu Minh ・ Oct 29 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#blockchain&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#2"&gt;
  &lt;/a&gt;
  #2
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/nehal_mahida/filter-map-and-reduce-in-js-when-and-where-to-use-281c"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GkTcRBEj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Un_Faevb--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a133hjbjfi9wwcexub0m.png" alt="Image of post" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/nehal_mahida" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SB5pZS-L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--u_LyBlwY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/668705/cae5806f-ff6f-4032-8fee-56020d184232.jpg" alt="nehal_mahida"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/nehal_mahida/filter-map-and-reduce-in-js-when-and-where-to-use-281c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;filter, map and reduce in JS. When and Where to use??&lt;/h2&gt;
      &lt;h3&gt;Nehal Mahida ・ Oct 27 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#3"&gt;
  &lt;/a&gt;
  #3
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/0shuvo0/easiest-way-to-add-multilanguage-in-your-website-4n7"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--whjxALTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--1hvstQpL--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t68umi2xkf5fr8g0uol5.png" alt="Image of post" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/0shuvo0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wZgMNup---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j0_lvM9_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/728097/0f6e1da9-f243-42d0-b446-301ac6ea6412.jpeg" alt="0shuvo0"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/0shuvo0/easiest-way-to-add-multilanguage-in-your-website-4n7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Easiest way to add multilanguage in your website&lt;/h2&gt;
      &lt;h3&gt;Shuvo ・ Oct 26 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#4"&gt;
  &lt;/a&gt;
  #4
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/franciscomendes10866/create-a-responsive-navbar-using-react-and-tailwind-3768"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zLCwFNOg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--98Gihlfk--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0gppai9tavc2hpe7ajsj.png" alt="Image of post" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/franciscomendes10866" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CuhtViEQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--QtQl0Tjz--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/334620/1aeb3076-321f-48db-b8a6-1f4a7dcaf7cb.jpg" alt="franciscomendes10866"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/franciscomendes10866/create-a-responsive-navbar-using-react-and-tailwind-3768" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Create a Responsive Navbar using React and Tailwind&lt;/h2&gt;
      &lt;h3&gt;Francisco Mendes ・ Oct 31 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#5"&gt;
  &lt;/a&gt;
  #5
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/sgoulas/i-created-an-e-commerce-site-from-scratch-and-kept-a-development-diary-over-the-cource-of-5-months-12mm"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGavLq3j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--FJ0xik80--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zibj168e2c9xsdlojexh.png" alt="Image of post" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/sgoulas" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BhUGwn9i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---NxA8wsi--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/417615/142b6299-2605-443a-8bb7-a0bb4f6b4839.jpeg" alt="sgoulas"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/sgoulas/i-created-an-e-commerce-site-from-scratch-and-kept-a-development-diary-over-the-cource-of-5-months-12mm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;I created an e-commerce site from scratch and kept a development diary over the cource of 5 months&lt;/h2&gt;
      &lt;h3&gt;sgoulas ・ Oct 31 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#nextjs&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#6"&gt;
  &lt;/a&gt;
  #6
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/codeoz/7-nice-api-for-your-projects--3ap"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hjU-zhx1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XcuP3uHc--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7fvl52qsqiilcey0n1i.jpeg" alt="Image of post" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/codeoz" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fqyYINYJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--A8scdPPB--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/535221/d73c1f8e-f607-440b-a29d-1e8e5f1174ab.png" alt="codeoz"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/codeoz/7-nice-api-for-your-projects--3ap" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;7 Nice API for your projects !&lt;/h2&gt;
      &lt;h3&gt;CodeOz ・ Oct 30 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#7"&gt;
  &lt;/a&gt;
  #7
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/aviyel/building-a-music-player-application-in-react-js-3ngd"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5MjEr3jr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--g9-63U1h--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zs01nq18gjt385xkshgm.png" alt="Image of post" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/aviyel" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jk48Byhz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8ml24Y9z--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/3818/2fd02162-3471-44cd-8f8f-5336ddc7abc1.png" alt="Aviyel Inc" width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X1bzjyno--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--co8MU9_n--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/413418/f04996e5-b2bc-48b2-b362-dbe716bb5b38.JPG" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aviyel/building-a-music-player-application-in-react-js-3ngd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Building a music player application in react from absolute scratch 🔥🎶&lt;/h2&gt;
      &lt;h3&gt;Pramit Marattha for Aviyel Inc ・ Oct 29 ・ 14 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#8"&gt;
  &lt;/a&gt;
  #8
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/j471n/how-to-share-anything-from-your-website-by-web-share-api-1h5g"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sJ5-58Px--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--VK9_gxza--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52pjqkmjblnuqkj30si7.png" alt="Image of post" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/j471n" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AbQjEjLR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--t7LFH36x--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/495014/2c4958e0-2f03-4d45-ba15-b668d660f05a.jpg" alt="j471n"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/j471n/how-to-share-anything-from-your-website-by-web-share-api-1h5g" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to share anything from your website by Web Share API&lt;/h2&gt;
      &lt;h3&gt;Jatin Sharma ・ Oct 29 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#9"&gt;
  &lt;/a&gt;
  #9
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/mustapha/a-deep-dive-into-es6-classes-2h52"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9F0_R6uH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hFhMEYhY--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azhvn8vuqrofsidykaas.jpg" alt="Image of post" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/mustapha" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TjMto4tb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Bz3nRw5I--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/174804/95610498-02ee-4f3f-846b-b85ccb539f0a.jpg" alt="mustapha"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mustapha/a-deep-dive-into-es6-classes-2h52" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;A deep dive into ES6 Classes&lt;/h2&gt;
      &lt;h3&gt;Mustapha Aouas ・ Oct 26 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#10"&gt;
  &lt;/a&gt;
  #10
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/javascriptacademy/create-a-simple-calculator-using-html-css-and-javascript-4o7k"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mxYMvSN4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--R92mhD9R--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19yus2bb4xdofh1vmnh3.png" alt="Image of post" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/javascriptacademy" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5hibFiYf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ehxqwaKf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/721655/cf6268db-f6d4-4eee-ad3e-7c2970dede90.jpeg" alt="javascriptacademy"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/javascriptacademy/create-a-simple-calculator-using-html-css-and-javascript-4o7k" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Create a simple calculator using HTML, CSS and Javascript&lt;/h2&gt;
      &lt;h3&gt;Adam Nagy ・ Oct 26 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Orginal authors of this articles are &lt;a class="mentioned-user" href="https://dev.to/freakcdev297"&gt;@freakcdev297&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/nehal_mahida"&gt;@nehal_mahida&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/0shuvo0"&gt;@0shuvo0&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/franciscomendes10866"&gt;@franciscomendes10866&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/sgoulas"&gt;@sgoulas&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/codeoz"&gt;@codeoz&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/pramit_armpit"&gt;@pramit_armpit&lt;/a&gt;
, j471n, mustapha, javascriptacademy .&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Enjoy these articles.&lt;br&gt;
Follow me for more articles.&lt;br&gt;
Thanks 💖💖💖&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>react</category>
    </item>
    <item>
      <title>Super Simple Drag N' Drop from Scratch in React (without dependencies)</title>
      <author>Aaron Wolf</author>
      <pubDate>Tue, 02 Nov 2021 11:17:30 +0000</pubDate>
      <link>https://dev.to/wolfmath/super-simple-drag-n-drop-from-scratch-in-react-without-dependencies-1j84</link>
      <guid>https://dev.to/wolfmath/super-simple-drag-n-drop-from-scratch-in-react-without-dependencies-1j84</guid>
      <description>&lt;p&gt;I recently had been tasked to create Drag N' Drop component from scratch - so no &lt;code&gt;npm i react-beautiful-dnd&lt;/code&gt;. Before tackling this I decided (with a helpful suggestion from a coworker) to write it in CodeSandbox first. Now I get to share it with you! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: This is how &lt;em&gt;I&lt;/em&gt; approached the problem, but I have no doubts that there are other/better ways to go about doing it. If you feel there's a better way I'd appreciate you writing it in the comments. This is &lt;strong&gt;very&lt;/strong&gt; rudimentary, so if you decide to use it know that you'd need to make refinements.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#set-up"&gt;
  &lt;/a&gt;
  Set Up
&lt;/h1&gt;

&lt;p&gt;First I created 3 groups to drag and drop between, then I iterated over them to create the &lt;code&gt;div&lt;/code&gt;s that they would create. Then I created an array of 7 objects that can be dragged from one group to another. These are saved in state, hence the &lt;code&gt;useState&lt;/code&gt; import.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState } from "react";

export default function Dnd() {
  const groups = ["group1", "group2", "group3"];
  const [items, setitems] = useState([
    { id: 1, group: groups[0], value: "Chicken" },
    { id: 2, group: groups[0], value: "Monkey" },
    { id: 3, group: groups[0], value: "Duck" },
    { id: 4, group: groups[1], value: "Rhino" },
    { id: 5, group: groups[1], value: "Sandwich" },
    { id: 6, group: groups[2], value: "Ostrich" },
    { id: 7, group: groups[2], value: "Flamingo" }
  ]);

  return (
    &amp;lt;div className="groups"&amp;gt;
      {groups.map((group) =&amp;gt; (
        &amp;lt;div
          className="group"
          key={group}
        &amp;gt;
          &amp;lt;h1 className="title"&amp;gt;{group}&amp;lt;/h1&amp;gt;
          &amp;lt;div&amp;gt;
            {items
              .filter((item) =&amp;gt; item.group === group)
              .map((thing) =&amp;gt; (
                &amp;lt;div
                  key={thing.id}
                  id={thing.id}
                  className="thing"
                &amp;gt;
                  {thing.value}
                &amp;lt;/div&amp;gt;
              ))}
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      ))}
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we have the &lt;code&gt;scss&lt;/code&gt; that goes along with it (it's not pretty, but just enough to get the visuals right).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.groups {
  display: flex;
  margin: 20px;
  padding: 20px;
  flex-wrap: wrap;

  .group {
    margin: 20px;
    padding: 20px;
    min-height: 16rem;
    background-color: green;

    .title{
      color: white;
      padding: 0;
      margin-top: 0;
    }
  }

  .group-hover {
    margin: 20px;
    padding: 20px;
    background-color: darkgreen
  }
}

.thing {
  background-color: yellow;
  color: blue;
  margin: 5px;
  padding: 5px;
  border: 2px green;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Together these two things create 7 yellow boxes inside 3 green boxes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fm4D1oAM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqhqvwnih0z1d65jrq9w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fm4D1oAM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqhqvwnih0z1d65jrq9w.png" alt="Image description" width="562" height="340"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#dnd"&gt;
  &lt;/a&gt;
  DND
&lt;/h1&gt;

&lt;p&gt;Now we get to discuss how to start the DND functionality.&lt;/p&gt;

&lt;p&gt;First is to set the &lt;em&gt;thing&lt;/em&gt; (animal) &lt;code&gt;div&lt;/code&gt; to be &lt;code&gt;draggable&lt;/code&gt;. This will allow the click and drag of the &lt;code&gt;div&lt;/code&gt;, but it won't actually do anything.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div
  key={thing.id}
  id={thing.id}
  className="thing"
  draggable
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we need to have a little understanding of the &lt;a href="https://www.w3schools.com/jsref/event_ondrag.asp"&gt;HTML5 onDrag events&lt;/a&gt;. There are different events for the dragged item and the item being dragged over/onto.&lt;/p&gt;

&lt;p&gt;I set up some state to know which item is being dragged at any given time then on the dragged item I set the state &lt;code&gt;onDragStart&lt;/code&gt; and I created a function to handle the dragStart.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...

const [dragging, setDragging] = useState();

...  

const handleDragStart = (e) =&amp;gt; {
  setDragging(e.target);
};

...

&amp;lt;div
  ...
  draggable
  onDragStart={(e) =&amp;gt; handleDragStart(e)}
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly we need to handle what happens to the dragged over group. So I just have the animal added to the group as soon as it's dragged into the new group, but you can edit that behavior later. I'm using the &lt;code&gt;onDragEnter&lt;/code&gt; which fires &lt;strong&gt;once&lt;/strong&gt; when the dragged item enters the div.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div
  className="group"
  key={group}
  onDragEnter={(e) =&amp;gt; handleDragEnter(e, group)}
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then I created the &lt;code&gt;handleDragEnter&lt;/code&gt; function to set the state of the dragged item to the group of that it's being dragged into.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const handleDragEnter = (e, group) =&amp;gt; {
  setitems([...items, (items[dragging.id - 1].group = group)]);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FQdbsx-S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/30iec6r9raaes3q1l1nx.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FQdbsx-S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/30iec6r9raaes3q1l1nx.gif" alt="Image description" width="320" height="186"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now the whole DND should be fully functional! Here's all the code put together and the &lt;a href="https://bit.ly/3jYsBFG"&gt;CodeSandbox code&lt;/a&gt;!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState } from "react";
import "./Dnd.scss";

export default function Dnd() {
  const groups = ["group1", "group2", "group3"];
  const [items, setitems] = useState([
    { id: 1, group: groups[0], value: "Chicken" },
    { id: 2, group: groups[0], value: "Monkey" },
    { id: 3, group: groups[0], value: "Duck" },
    { id: 4, group: groups[1], value: "Rhino" },
    { id: 5, group: groups[1], value: "Sandwich" },
    { id: 6, group: groups[2], value: "Ostrich" },
    { id: 7, group: groups[2], value: "Flamingo" }
  ]);

  const [dragging, setDragging] = useState();

  const handleDragStart = (e) =&amp;gt; {
    setDragging(e.target);
  };

  const onDragEnter = (e, group) =&amp;gt; {
    setitems([...items, (items[dragging.id - 1].group = group)]);
  };

  return (
    &amp;lt;div className="groups"&amp;gt;
      {groups.map((group) =&amp;gt; (
        &amp;lt;div
          className="group"
          key={group}
          onDragEnter={(e) =&amp;gt; onDragEnter(e, group)}
        &amp;gt;
          &amp;lt;h1 className="title"&amp;gt;{group}&amp;lt;/h1&amp;gt;
          &amp;lt;div&amp;gt;
            {items
              .filter((item) =&amp;gt; item.group === group)
              .map((thing) =&amp;gt; (
                &amp;lt;div
                  key={thing.id}
                  id={thing.id}
                  className="thing"
                  draggable
                  onDragStart={(e) =&amp;gt; handleDragStart(e)}
                &amp;gt;
                  {thing.value}
                &amp;lt;/div&amp;gt;
              ))}
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      ))}
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>react</category>
      <category>dragndrop</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>"Single Responsibility" will make your code better without you even noticing </title>
      <author>Yonatan Korem</author>
      <pubDate>Tue, 02 Nov 2021 11:12:07 +0000</pubDate>
      <link>https://dev.to/yonatankorem/single-responsibility-will-make-your-code-better-without-you-even-noticing-3ep7</link>
      <guid>https://dev.to/yonatankorem/single-responsibility-will-make-your-code-better-without-you-even-noticing-3ep7</guid>
      <description>&lt;p&gt;This column is not about what is the "Single Responsibility Principle". There are a lot of other places you can read all about it. &lt;a href="https://blog.cleancoder.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html"&gt;Robert Martin's blog is a good place to start&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is also not about how strict you should be applying single responsibility.&lt;/p&gt;

&lt;p&gt;This column is about how following this principle will make your code better. Your code will be shorter, simpler, maintainable, testable, and various other adjectives.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exercise-in-imagination"&gt;
  &lt;/a&gt;
  Exercise in imagination
&lt;/h2&gt;

&lt;p&gt;Imagine a hamburger cookbook. It tells you what you need to make the patty, how to grill it, how to make and bake the buns, and how to put it all together. Now imagine that it is all on the same page.&lt;br&gt;
The ingredients list is long and difficult to understand what goes in the bun and what in the burger.&lt;br&gt;
The preparation guide tells you how to do everything combined. The steps jump between the patty and the bun - it's time saving because while the bun bakes, the next couple of steps is about the burger. But it is also comprised of dozens of steps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#srp-makes-your-code-easier-to-follow"&gt;
  &lt;/a&gt;
  SRP Makes your code easier to follow
&lt;/h2&gt;

&lt;p&gt;Why do cookbooks separate the items? It is much better to do all at same time, plus it saves paper because there is less white spaces. They separate it to make each part easier to follow and understand. It also makes it harder to confuse the ingredients.&lt;/p&gt;

&lt;p&gt;Your class/function/file becomes simpler to follow because it focuses on one subject. You can feel safe that your backend API controller only handles defining the API and validating the inputs. Nothing more and nothing less.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#srp-makes-your-code-shorter"&gt;
  &lt;/a&gt;
  SRP makes your code shorter
&lt;/h2&gt;

&lt;p&gt;With the same example of the cookbook: instead of a single recipe taking three pages, you get two parts - each taking two pages. Combined you might end up with more pages, but each component of the hamburger is shorter.&lt;/p&gt;

&lt;p&gt;In the cookbook, though it has more pages, it is easy to find what you are looking for. It has a structure and logic to it.&lt;/p&gt;

&lt;p&gt;True, you will end up with more files in your repository. But each one is shorter, and the entire thing is organized and structured so anything you need, you know where to look.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#srp-will-make-it-easier-to-debug-problems"&gt;
  &lt;/a&gt;
  SRP will make it easier to debug problems
&lt;/h2&gt;

&lt;p&gt;If you use the bad cookbook to make your burger and confuse the seasoning between the bun and patty, you could get a salty hamburger and tasteless bun, because a portion of the salt that was meant for the bun is in the patty.&lt;br&gt;
If you use the normal cookbook, you might get a poorly seasoned hamburger, but it will not impact how the bun ended up.&lt;/p&gt;

&lt;p&gt;Problems are easier to find because they are contained.&lt;br&gt;
Your API responded with an error. It responded, so the controller got the message. You look at the body and all the fields have the correct type and length. Like before, the controller only defines the API and validates inputs.&lt;br&gt;
Together that automatically means there is no reason to investigate the controller.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#srp-makes-your-code-easier-to-unit-test"&gt;
  &lt;/a&gt;
  SRP makes your code easier to unit test
&lt;/h2&gt;

&lt;p&gt;When your class has a single responsibility, it depends on other components for any other functionality it requires.&lt;br&gt;
The class handles some logic, which means it does not handle creation of its dependencies. Hence, your class gets the dependencies from outside.&lt;/p&gt;

&lt;p&gt;When your class does that, it becomes easier to inject fake dependencies - which is exactly what you need to unit test.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#srp-helps-naming-things"&gt;
  &lt;/a&gt;
  SRP helps naming things
&lt;/h2&gt;

&lt;p&gt;From the function level, to your folder structure, having "things" be responsible for one thing makes it easier to name them.&lt;/p&gt;

&lt;p&gt;A component that does one specific thing, can have an equally specific name, at the same abstraction level.&lt;br&gt;
When the class encapsulates HTTP calls to get and set &lt;code&gt;Contact&lt;/code&gt; from a DB, it becomes clear that it should be named &lt;code&gt;ContactGateway&lt;/code&gt;&lt;br&gt;
The folder that contains all the components and logic that handles the login page, would probably be named &lt;code&gt;LoginModule&lt;/code&gt;&lt;br&gt;
When your library handles thread pools using a SQL server, it would probably be named &lt;code&gt;SqlThreadPool&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#srp-helps-following-established-design-patterns"&gt;
  &lt;/a&gt;
  SRP helps following established design patterns
&lt;/h2&gt;

&lt;p&gt;Now that your class does one thing, and is named to match, you'll find yourself following established design patterns. When you separate the modeling of a graph from the algorithm that traverses it, you end up with the &lt;code&gt;Strategy&lt;/code&gt; class and the context it operates on.&lt;br&gt;
The graph is comprised of individual nodes, each encapsulating its data and logic. Congratulations! You are using the &lt;code&gt;Composite&lt;/code&gt; design pattern.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#srp-makes-your-code-readable"&gt;
  &lt;/a&gt;
  SRP makes your code readable
&lt;/h2&gt;

&lt;p&gt;When you combine all of the above, you get code that is shorter, highly focused, with lower cyclomatic complexity. Plus, the code is easy to find.&lt;/p&gt;

&lt;p&gt;These are all things that every developer will appreciate. Think of the times where you had to juggle multiple trails of thought to try and figure out why something does not work right.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#srp-makes-your-project-better"&gt;
  &lt;/a&gt;
  SRP makes your project better
&lt;/h2&gt;

&lt;p&gt;Because it helps generate code that is easier to maintain, test, refactor, and extend.&lt;br&gt;
Maintainable code is critical for allowing your project to continue consistent and fast development.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In conclusion
&lt;/h2&gt;

&lt;p&gt;SRP helps you make better hamburgers.&lt;/p&gt;

</description>
      <category>design</category>
      <category>programming</category>
      <category>codequality</category>
    </item>
    <item>
      <title>I made a git cheatsheet of useful commands like reverting commits, work between branches, manage PRs, and much more.</title>
      <author>Gourav</author>
      <pubDate>Tue, 02 Nov 2021 11:07:04 +0000</pubDate>
      <link>https://dev.to/gorvgoyl/i-made-a-git-cheatsheet-of-useful-commands-like-reverting-commits-work-between-branches-manage-prs-and-much-more-379k</link>
      <guid>https://dev.to/gorvgoyl/i-made-a-git-cheatsheet-of-useful-commands-like-reverting-commits-work-between-branches-manage-prs-and-much-more-379k</guid>
      <description>&lt;p&gt;When I collaborate with others using Git, I often have to google to find right git commands for various situations.&lt;/p&gt;

&lt;p&gt;Situations like how to pull changes without committing local files, save uncommitted changes in current branch and switch, add new changed to last commit, reset my local branch to main, revert last commit from local and remote, etc.&lt;/p&gt;

&lt;p&gt;So, I decided to write these down at one place so that it's easier for me (and hopefully others) to recall and use.&lt;/p&gt;

&lt;p&gt;here's the git cheatsheet: &lt;a href="https://gourav.io/blog/git-cheatsheet"&gt;https://gourav.io/blog/git-cheatsheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's an &lt;a href="https://github.com/GorvGoyl/Personal-Site-Gourav.io/blob/main/content/blog/git-cheatsheet/index.md"&gt;open-source cheatsheet&lt;/a&gt; so contributions are more than welcome to improve it and add more useful commands 🙏.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>git</category>
      <category>github</category>
    </item>
    <item>
      <title>HOW TO FIX “ERROR: COULD NOT FIND OR LOAD MAIN CLASS” IN JAVA?</title>
      <author>Sakshii</author>
      <pubDate>Tue, 02 Nov 2021 10:44:09 +0000</pubDate>
      <link>https://dev.to/sakshii1/how-to-fix-error-could-not-find-or-load-main-class-in-java-2k23</link>
      <guid>https://dev.to/sakshii1/how-to-fix-error-could-not-find-or-load-main-class-in-java-2k23</guid>
      <description>&lt;p&gt;The main() method is required to run/execute programs developed in the Java programming language since it is where the program execution begins. When starting a &lt;a href="https://www.codeleaks.io/category/java/"&gt;Java&lt;/a&gt; program, you could encounter the warning “error: Could not find or load main class.” You’re having this problem because you’re using the java command to run main() from within the class.&lt;/p&gt;

&lt;p&gt;Note: You can also learn Errors and Exception in &lt;a href="https://www.codeleaks.io/category/python/"&gt;Python&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to fix could not find or load the main class?&lt;/strong&gt;&lt;br&gt;
There are many ways to solve this issue depending on the reason of occurring this error. We will discuss each reason one by one and try to fix this problem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are the possible causes or reasons of this error?&lt;/strong&gt;&lt;br&gt;
There are several reasons for this problem, which are listed below.&lt;/p&gt;

&lt;p&gt;File Extension&lt;br&gt;
Wrong Package&lt;br&gt;
Classpath is not valid&lt;br&gt;
The class name is incorrect&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;File Extension&lt;/strong&gt;&lt;br&gt;
We need to save the Java source code file with the extension .java to compile it. To compile a Java program, Java Compiler is being used as (javac command). After compilation, the .java file will be converted to a .class file.&lt;/p&gt;

&lt;p&gt;As a result, your source code file will end in.java, while the produced file will end in .class. For compiling source code, we were using filename, but for running a compiled file, we cannot use the file name but the class name. Else it will throw an error like in the below example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example: HelloWorld.java&lt;/strong&gt;&lt;br&gt;
public class HelloWorld {&lt;br&gt;
    public static void main(String[] args) {&lt;br&gt;
        System.out.println("Hello, World!");&lt;br&gt;
    }&lt;br&gt;
}&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How Shell Executes `ls -l *.c`</title>
      <author>Dereje Desta</author>
      <pubDate>Tue, 02 Nov 2021 10:28:33 +0000</pubDate>
      <link>https://dev.to/dere7/how-shell-executes-ls-l-c-2da9</link>
      <guid>https://dev.to/dere7/how-shell-executes-ls-l-c-2da9</guid>
      <description>&lt;p&gt;In this post we'll talk about how shell executes command &lt;code&gt;ls -l *.c&lt;/code&gt;. Moreover, we'll also discus how it is implemented under the hood.&lt;/p&gt;

&lt;p&gt;We strongly advise you to have at least fundamental knowlege of C programming language and Linux system programming before you continue.&lt;/p&gt;

&lt;p&gt;Note that we skipped many error check and memory management for brevity which are must be included in working version of the code. Refer &lt;a href="//github.com/dere7/simple_shell/"&gt;here&lt;/a&gt; for implemention.&lt;/p&gt;

&lt;p&gt;When we open a shell(&lt;em&gt;users perspective&lt;/em&gt;) it prompts us to enter a line of command and when we enter the command it executes our command and it prompts us to enter another command.&lt;/p&gt;

&lt;p&gt;But there is more to this story. The following are simplfied version of steps the shell takes. The shell:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;prints the prompt and waits for input. Let us assume we entered &lt;code&gt;ls -l *.c&lt;/code&gt;. This is preformed using &lt;code&gt;getline()&lt;/code&gt;.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"$ "&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;nline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nline&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// continues here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;splits this line of command into tokens. In our case &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;-l&lt;/code&gt;and &lt;code&gt;*.c&lt;/code&gt;. this uses &lt;code&gt;strtok(command, DELIM)&lt;/code&gt; where DELIM is string consisting whitespaces character(spaces, tabs and etc.).
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="c1"&gt;// continued&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;DELIM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="s"&gt;" &lt;/span&gt;&lt;span class="se"&gt;\t\a\r&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strtok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DELIM&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// push to array of strings&lt;/span&gt;
    &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strtok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DELIM&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;looks for expansion in our case token &lt;code&gt;*.c&lt;/code&gt; matches every file ending in &lt;code&gt;.c&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Checks if the first token is aliased. if it is it replaces it with the orginal expanded version.
In our case &lt;code&gt;ls&lt;/code&gt; is aliased to &lt;code&gt;ls --colory=tty&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;checks if the command is builtin(like &lt;code&gt;exit&lt;/code&gt;, &lt;code&gt;cd&lt;/code&gt;, &lt;code&gt;help&lt;/code&gt; ... etc). &lt;code&gt;ls&lt;/code&gt; is not builtin command.&lt;/li&gt;
&lt;li&gt;If the command is not builtin command it searches the command in the &lt;code&gt;PATH&lt;/code&gt; enviromental variable. &lt;code&gt;ls&lt;/code&gt; is found in path &lt;code&gt;/bin/ls&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Creates new process using syscall &lt;code&gt;fork()&lt;/code&gt;.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;pid_t&lt;/span&gt; &lt;span class="n"&gt;child_pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child_pid&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child_pid&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// if this is child process execute&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;execve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__environ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="c1"&gt;// if it is parent wait for child&lt;/span&gt;
    &lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Finaly it executes it. It uses &lt;code&gt;execve(tokens[0], tokens, env)&lt;/code&gt; system call. See step 7. and continues at step 1 again.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This is just simple illustration of how shell goes on executing commands like &lt;code&gt;ls -l *.c&lt;/code&gt;. But now days shells has evolved to do much complex tasks like history, conditional statements, loops and any other things programming languages supports. It was quite journey learning shell and we do believe you can benfit be implementing those concepts in yourself. You can find our implementation in &lt;strong&gt;C&lt;/strong&gt; &lt;a href="//github.com/dere7/simple_shell/"&gt;here&lt;/a&gt;. Thanks :)&lt;/p&gt;

</description>
      <category>linux</category>
      <category>beginners</category>
      <category>programming</category>
      <category>c</category>
    </item>
    <item>
      <title>How To Build a Dapp: Blockchain Developer’s Starter Pack by GetBlock</title>
      <author>GetBlock</author>
      <pubDate>Tue, 02 Nov 2021 10:22:00 +0000</pubDate>
      <link>https://dev.to/getblock/how-to-build-a-dapp-blockchain-developers-starter-pack-by-getblock-2b01</link>
      <guid>https://dev.to/getblock/how-to-build-a-dapp-blockchain-developers-starter-pack-by-getblock-2b01</guid>
      <description>&lt;p&gt;Here’s the instruments utilized by decentralized applications developers over the globe.&lt;/p&gt;

&lt;p&gt;Decentralized applications or dApps should be referred to as a class of software programs that utilize distributed ledgers for their data processes. As such, basically, every dApp consists of a front-end and smart contracts.&lt;/p&gt;

&lt;p&gt;GetBlock prepares a shortest digest of what is required to build a successful decentralized application in 2021.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-dapp"&gt;
  &lt;/a&gt;
  What is a dApp?
&lt;/h2&gt;

&lt;p&gt;Decentralized applications or dApps are software programs using blockchains for data transfers and payments. dApps can be deployed to the blockchains that support smart contracts e.g. &lt;a href="https://getblock.io/en/nodes/eth/"&gt;Ethereum (ETH)&lt;/a&gt;, &lt;a href="https://getblock.io/en/nodes/bsc/"&gt;Binance Smart Chain (BSC)&lt;/a&gt;, &lt;a href="https://getblock.io/en/nodes/matic/"&gt;Polygon (previously Matic Network, MATIC)&lt;/a&gt;, &lt;a href="https://getblock.io/en/nodes/eos/"&gt;Eos (EOS)&lt;/a&gt;, &lt;a href="https://getblock.io/en/nodes/trx/"&gt;Tron (TRX)&lt;/a&gt;, &lt;a href="https://getblock.io/en/nodes/near/"&gt;Near (NEAR)&lt;/a&gt;, &lt;a href="https://getblock.io/en/nodes/sol/"&gt;Solana (SOL)&lt;/a&gt;, and so on.&lt;/p&gt;

&lt;p&gt;In this case, ‘decentralized’ can be replaced with ‘serverless’, ‘peer-to-peer’ as dApps have no single point of centralization: server, cloud storage, dashboard, cold wallet for crypto and so on.&lt;/p&gt;

&lt;p&gt;Launched in 2015, &lt;a href="https://getblock.io/en/nodes/eth/"&gt;Ethereum&lt;/a&gt; was the first smart contracts platform specially created for dApps deployment while primitive Bitcoin-based game Satoshi Dice was, in fact, first dApp ever.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-benefits-of-using-dapps"&gt;
  &lt;/a&gt;
  What are the benefits of using dApps?
&lt;/h2&gt;

&lt;p&gt;Unlike ‘centralized’ applications of Web2.0 epoch, dApps are way more attack-resistant, censorship-resistant and transparent. For instance, this is crucial for gambling and betting tools when provable randomness is a pivotal element of the business model.&lt;/p&gt;

&lt;p&gt;Also, dApps can ‘natively’ interact with cryptocurrencies, so they can easily target the rocketing audience of crypto enthusiasts.&lt;/p&gt;

&lt;p&gt;By Q4, 2021, &lt;a href="https://getblock.io/blog/what-is-defi/"&gt;decentralized finances protocols (DeFis)&lt;/a&gt;, online gambling tools, marketplaces for non-fungible tokens and high-risk schemes are the &lt;a href="https://getblock.io/blog/polygon-bsc-ethereum-nodes-api-for-dapps-next-big-thing/"&gt;largest categories of dApps&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-you-need-to-build-a-dapp"&gt;
  &lt;/a&gt;
  What do you need to build a dApp?
&lt;/h2&gt;

&lt;p&gt;All in all, dApps building remains the complicated process that takes specific skills, software and infrastructure instruments.&lt;/p&gt;

&lt;p&gt;Developers of dApps utilize special programming languages, software instruments and nodes connection services to deploy their products to distributed ledgers of all kinds. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-build-a-dapp-languages"&gt;
  &lt;/a&gt;
  How To Build a Dapp: Languages
&lt;/h2&gt;

&lt;p&gt;Purpose-made programming languages are utilized for dApps programming. To deploy dApps to &lt;a href="https://getblock.io/en/nodes/eth/"&gt;Ethereum (ETH)&lt;/a&gt; or other blockchain compatible with Ethereum Virtual Machine (&lt;a href="https://getblock.io/en/nodes/bsc/"&gt;Binance Smart Chain&lt;/a&gt;, &lt;a href="https://getblock.io/en/nodes/matic/"&gt;Polygon&lt;/a&gt;, &lt;a href="https://getblock.io/en/nodes/heco/"&gt;Huobi Eco Chain&lt;/a&gt;, and so on), developers use Solidity, an object-oriented programming language.&lt;/p&gt;

&lt;p&gt;Cardano devs utilize Haskell language; dApps on &lt;a href="https://getblock.io/en/nodes/ada/"&gt;Cardano (ADA)&lt;/a&gt; are deployed through a special Plutus Core compiler.&lt;/p&gt;

&lt;p&gt;Also, some blockchain-focused teams created their own programming languages. ‘Singaporean Ethereum’ &lt;a href="https://getblock.io/en/nodes/zil/"&gt;Zilliqa&lt;/a&gt;, for instance, &lt;a href="https://getblock.io/blog/ethereum-killers-that-not-exploded-yet-introducing-near-and-zilliqa/"&gt;utilizes&lt;/a&gt; Scilla language for its decentralized applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-build-a-dapp-software-tools"&gt;
  &lt;/a&gt;
  How To Build a Dapp: Software tools
&lt;/h2&gt;

&lt;p&gt;Software stack necessary for dApps building can be better studied with &lt;a href="https://getblock.io/en/nodes/eth/"&gt;Ethereum (ETH)&lt;/a&gt; as an example. Ethereum developers utilize multiple dApps development, testing and debugging frameworks such as Truffle, Etherlime, Brownie, Embark, Open Zeppelin and so on.&lt;/p&gt;

&lt;p&gt;Metamask software is used by devs as a core wallet while The Graph instrument can optimize data structures of your dApp.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-build-a-dapp-nodes"&gt;
  &lt;/a&gt;
  How To Build a Dapp: Nodes
&lt;/h2&gt;

&lt;p&gt;Once the code of a decentralized application is ready, it can be deployed to blockchain &lt;a href="https://getblock.io/en/nodes/"&gt;nodes&lt;/a&gt;. Instead of running nodes themselves, dApps developers access nodes via APIs by nodes connection providers.&lt;/p&gt;

&lt;p&gt;Launched in 2019, &lt;a href="//getblock.io"&gt;GetBlock&lt;/a&gt; is a high-end provider of node connection. It empowers dozens of dApps with the access to &lt;a href="https://getblock.io/en/nodes/eth/"&gt;Ethereum&lt;/a&gt;, &lt;a href="https://getblock.io/en/nodes/bsc/"&gt;Binance Smart Chain&lt;/a&gt;, &lt;a href="https://getblock.io/en/nodes/matic/"&gt;Polygon&lt;/a&gt;, &lt;a href="https://getblock.io/en/nodes/btc/"&gt;Bitcoin&lt;/a&gt;, and other nodes.&lt;/p&gt;

&lt;p&gt;Besides providing dApps with the access to nodes, &lt;a href="//getblock.io"&gt;GetBlock&lt;/a&gt;  builds block explorers from scratch and supports CTOs with blockchain expertise. To start building on &lt;a href="//getblock.io"&gt;GetBlock&lt;/a&gt; today, please, contact our team in &lt;a href="https://t.me/getblockio_eng"&gt;Telegram&lt;/a&gt; or &lt;a href="https://discord.com/invite/T2hbgqfEnv"&gt;Discord&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bottom-line"&gt;
  &lt;/a&gt;
  Bottom line
&lt;/h2&gt;

&lt;p&gt;In a nutshell, decentralized applications are software programs where all centralized elements are replaced by &lt;a href="https://getblock.io/blog/what-are-the-smart-contracts-and-how-they-work/"&gt;smart contracts architecture&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;To develop modern dApps, engineers need special software, specific programming language and nodes access provider.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>tutorial</category>
      <category>node</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Merge files in a path with goMerge</title>
      <author>Javad Rajabzade</author>
      <pubDate>Tue, 02 Nov 2021 10:03:09 +0000</pubDate>
      <link>https://dev.to/gopher/merge-files-in-path-with-gomerge-3jmh</link>
      <guid>https://dev.to/gopher/merge-files-in-path-with-gomerge-3jmh</guid>
      <description>&lt;h1&gt;
  &lt;a href="#gomerge"&gt;
  &lt;/a&gt;
  goMerge
&lt;/h1&gt;

&lt;p&gt;Merge some files in a path with custom extension in golang&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Ja7ad"&gt;
        Ja7ad
      &lt;/a&gt; / &lt;a href="https://github.com/Ja7ad/goMerge"&gt;
        goMerge
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Merge some files in a path with custom extension in golang
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
goMerge&lt;/h1&gt;
&lt;p&gt;Merge some files in a path with custom extension in golang&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/Ja7ad/goMerge./file.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CD9X3UbZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Ja7ad/goMerge./file.jpg" alt="goMerge"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Feature&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Walk in a path with a goroutine using parallelism&lt;/li&gt;
&lt;li&gt;Merge files with custom extension&lt;/li&gt;
&lt;li&gt;Remove unmerged files with remove flag&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Install goMerge&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;go get -u github.com/Ja7ad/goMerge&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
Example&lt;/h2&gt;
&lt;div class="highlight highlight-source-go position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;package&lt;/span&gt; main

&lt;span class="pl-k"&gt;import&lt;/span&gt; (
    fileMerger &lt;span class="pl-s"&gt;"github.com/Ja7ad/goMerge"&lt;/span&gt;
    &lt;span class="pl-s"&gt;"log"&lt;/span&gt;
)

&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;main&lt;/span&gt;() {
    &lt;span class="pl-s1"&gt;err&lt;/span&gt; &lt;span class="pl-c1"&gt;:=&lt;/span&gt; &lt;span class="pl-s1"&gt;fileMerger&lt;/span&gt;.&lt;span class="pl-en"&gt;Merge&lt;/span&gt;(&lt;span class="pl-s"&gt;"./test"&lt;/span&gt;, &lt;span class="pl-s"&gt;".log"&lt;/span&gt;, &lt;span class="pl-s"&gt;"./test/merged.txt"&lt;/span&gt;, &lt;span class="pl-c1"&gt;true&lt;/span&gt;)
    &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-s1"&gt;err&lt;/span&gt; &lt;span class="pl-c1"&gt;!=&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; {
        &lt;span class="pl-s1"&gt;log&lt;/span&gt;.&lt;span class="pl-en"&gt;Fatal&lt;/span&gt;(&lt;span class="pl-s1"&gt;err&lt;/span&gt;)
    }
}&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Ja7ad/goMerge"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h2&gt;
  &lt;a href="#feature"&gt;
  &lt;/a&gt;
  Feature
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Walk in a path with a goroutine using parallelism&lt;/li&gt;
&lt;li&gt;Merge files with custom extension&lt;/li&gt;
&lt;li&gt;Remove unmerged files with remove flag&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#install-gomerge"&gt;
  &lt;/a&gt;
  Install goMerge
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;go get -u github.com/Ja7ad/goMerge&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;fileMerger&lt;/span&gt; &lt;span class="s"&gt;"github.com/Ja7ad/goMerge"&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fileMerger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"./test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;".log"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"./test/merged.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>go</category>
      <category>programming</category>
    </item>
    <item>
      <title>Best CSS Frameworks in 2021</title>
      <author>The Nerdy Dev</author>
      <pubDate>Tue, 02 Nov 2021 09:55:13 +0000</pubDate>
      <link>https://dev.to/thenerdydev/best-css-frameworks-in-2021-1f3p</link>
      <guid>https://dev.to/thenerdydev/best-css-frameworks-in-2021-1f3p</guid>
      <description>&lt;h2&gt;
  &lt;a href="#best-css-frameworks-in-2021"&gt;
  &lt;/a&gt;
  Best CSS Frameworks in 2021
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Bootstrap &lt;/li&gt;
&lt;li&gt;Foundation &lt;/li&gt;
&lt;li&gt;Bulma &lt;/li&gt;
&lt;li&gt;Tailwind CSS &lt;/li&gt;
&lt;li&gt;UI Kit &lt;/li&gt;
&lt;li&gt;Milligram &lt;/li&gt;
&lt;li&gt;Materialize CSS &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#bootstrap"&gt;
  &lt;/a&gt;
  1️⃣ Bootstrap
&lt;/h2&gt;

&lt;p&gt;Quickly design and customize responsive mobile-first sites with Bootstrap, the world’s most popular front-end open source toolkit, featuring Sass variables and mixins, responsive grid system, extensive prebuilt components, and powerful JavaScript plugins.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WjSg1SfA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gmcqb9tdwzgbiecx2se.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WjSg1SfA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gmcqb9tdwzgbiecx2se.png" alt="Image description" width="880" height="381"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#foundation"&gt;
  &lt;/a&gt;
  2️⃣ Foundation
&lt;/h2&gt;

&lt;p&gt;A Framework for any device, medium, and accessibility. Foundation is a family of responsive front-end frameworks that make it easy to design beautiful responsive websites, apps and emails that look amazing on any device. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://get.foundation"&gt;https://get.foundation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ReSu37L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pcvbgh2qzs660gwro360.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ReSu37L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pcvbgh2qzs660gwro360.png" alt="Image description" width="880" height="359"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bulma"&gt;
  &lt;/a&gt;
  3️⃣ Bulma
&lt;/h2&gt;

&lt;p&gt;Bulma is the modern CSS framework that just works.&lt;br&gt;
Bulma is a free, open source framework that provides ready-to-use frontend components that you can easily combine to build responsive web interfaces.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bulma.io"&gt;https://bulma.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--61aUMTNU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a1rj0dauhvclqng263ik.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--61aUMTNU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a1rj0dauhvclqng263ik.png" alt="Image description" width="880" height="378"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#tailwind-css"&gt;
  &lt;/a&gt;
  4️⃣ Tailwind CSS
&lt;/h2&gt;

&lt;p&gt;Rapidly build modern websites without ever leaving your HTML.&lt;br&gt;
A utility-first CSS framework packed with classes like flex, pt-4, text-center and rotate-90 that can be composed to build any design, directly in your markup. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://tailwindcss.com/"&gt;https://tailwindcss.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vreYuC-k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsht1lk7n33xifykw4qa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vreYuC-k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsht1lk7n33xifykw4qa.png" alt="Image description" width="880" height="463"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#uikit"&gt;
  &lt;/a&gt;
  5️⃣ UIkit
&lt;/h2&gt;

&lt;p&gt;A lightweight and modular front-end framework&lt;br&gt;
for developing fast and powerful web interfaces.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://getuikit.com"&gt;https://getuikit.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4qSStZSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/km4pcmh9nk46ydhgq179.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4qSStZSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/km4pcmh9nk46ydhgq179.png" alt="Image description" width="880" height="432"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#milligram"&gt;
  &lt;/a&gt;
  6️⃣ Milligram
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A8PXWxmh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5yffo264w2y4tq2px7g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A8PXWxmh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5yffo264w2y4tq2px7g.png" alt="Image description" width="880" height="506"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://milligram.io"&gt;https://milligram.io&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#materialize-css"&gt;
  &lt;/a&gt;
  7️⃣ Materialize CSS
&lt;/h2&gt;

&lt;p&gt;A modern responsive front-end framework based on Material Design. &lt;br&gt;
To get started, check this : &lt;a href="http://materializecss.com"&gt;http://materializecss.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iK-uUVJF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sl473uqo0qgww3z9v73q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iK-uUVJF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sl473uqo0qgww3z9v73q.png" alt="Image description" width="880" height="351"&gt;&lt;/a&gt;&lt;br&gt;
If you found this list useful, consider:&lt;/p&gt;

&lt;p&gt;⭐Follow &lt;a class="mentioned-user" href="https://dev.to/thenerdydev"&gt;@thenerdydev&lt;/a&gt;
 for more content like this &lt;/p&gt;

&lt;p&gt;So this is it for this article. Thanks for reading. &lt;br&gt;
&lt;strong&gt;Don't forget to leave a like if you loved the article. Also share it with your friends and colleagues.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" alt="Alt Text" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt; - If you are looking to learn Web Development, I have curated a &lt;strong&gt;FREE&lt;/strong&gt; course for you on my YouTube Channel, check the below article :&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Apr 28 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Looking to learn React.js with one Full &lt;strong&gt;Project&lt;/strong&gt;, check this out : &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/learn-react-with-one-big-project-notes-included-demo-and-video-link-4fe5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learn React with one BIG Project [NOTES included] - Demo and Video Link&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Jun 10 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>100daysofcode</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Why I Love Vue 3's Composition API</title>
      <author>Michael Hoffmann</author>
      <pubDate>Tue, 02 Nov 2021 09:48:50 +0000</pubDate>
      <link>https://dev.to/mokkapps/why-i-love-vue-3s-composition-api-2n3m</link>
      <guid>https://dev.to/mokkapps/why-i-love-vue-3s-composition-api-2n3m</guid>
      <description>&lt;p&gt;&lt;a href="https://v3.vuejs.org/"&gt;Vue 3&lt;/a&gt; introduced the &lt;a href="https://v3.vuejs.org/guide/composition-api-introduction.html"&gt;Composition API&lt;/a&gt; to provide a better way to collocate code related to the same logical concern. In this article, I want to tell you why I love this new way of writing Vue components.&lt;/p&gt;

&lt;p&gt;First, I will show you how you can build components using Vue 2, and then I will show you the same component implemented using Composition API. I’ll explain some of the Composition API basics and why I prefer Composition API for building components.&lt;/p&gt;

&lt;p&gt;For this article, I created a &lt;a href="https://stackblitz.com/edit/vue-3-composition-api-demo?file=src/App.vue"&gt;Stackblitz Vue 3 demo application&lt;/a&gt; which includes all the components that I’ll showcase in this article:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/vue-3-composition-api-demo?embed=1&amp;amp;&amp;amp;" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The source code is also available on &lt;a href="https://github.com/Mokkapps/vue-3-composition-api-demo/"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#options-api"&gt;
  &lt;/a&gt;
  Options API&lt;a href="#options-api"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;First, let’s look at how we build components in Vue 2 without the Composition API.&lt;/p&gt;

&lt;p&gt;In Vue 2 we build components using the Options API by filling (option) properties like methods, data, computed, etc. An example component could look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Properties for data, filtering, sorting and paging&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Methods for data, filtering, sorting and paging&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Values for data, filtering, sorting and paging&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, Options API has a significant drawback: The logical concerns (filtering, sorting, etc.) are not grouped but split between the different options of the Options API. Such fragmentation is what makes it challenging to understand and maintain complex Vue components.&lt;/p&gt;

&lt;p&gt;Let’s start by looking at &lt;a href="https://github.com/Mokkapps/vue-3-composition-api-demo/blob/master/src/components/CounterOptionsApi.vue"&gt;CounterOptionsApi.vue&lt;/a&gt;, the Options API counter component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Counter Options API&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Count: {{ count }}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;2^Count: {{ countPow }}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"increment()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Increase Count&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"incrementBy(5)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Increase Count by 5&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"decrement()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Decrease Count&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;emits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;counter-update&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;counter-update&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;countPow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;incrementBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Options API counter mounted&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This simple counter component includes multiple essential Vue functionalities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We use a &lt;code&gt;count&lt;/code&gt; data property that uses the &lt;code&gt;initialValue&lt;/code&gt; property as its initial value.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;countPow&lt;/code&gt; as computed property which calculates the power of the &lt;code&gt;count&lt;/code&gt; value.&lt;/li&gt;
&lt;li&gt;A watcher that emits the &lt;code&gt;counter-update&lt;/code&gt; event if the &lt;code&gt;count&lt;/code&gt; value has changed.&lt;/li&gt;
&lt;li&gt;Multiple methods to modify the &lt;code&gt;count&lt;/code&gt; value.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;console.log&lt;/code&gt; message that is written if the &lt;a href="https://vuejs.org/v2/api/#mounted"&gt;mounted lifecycle hook&lt;/a&gt; was triggered.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are not familiar with the Vue 2 features mentioned above, you should first read the &lt;a href="https://vuejs.org/v2/guide/"&gt;official Vue 2 documentation&lt;/a&gt; before you continue reading this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#composition-api"&gt;
  &lt;/a&gt;
  Composition API&lt;a href="#composition-api"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Since Vue 3 we can &lt;strong&gt;additionally&lt;/strong&gt; use &lt;a href="https://v3.vuejs.org/guide/composition-api-introduction.html#why-composition-api"&gt;Composition API&lt;/a&gt; to build Vue components.&lt;/p&gt;

&lt;p&gt;ℹ️ Composition API is fully optional, and we can still use Options API in Vue 3.&lt;/p&gt;

&lt;p&gt;In my &lt;a href="https://stackblitz.com/edit/vue-3-composition-api-demo?file=src/App.vue"&gt;demo application&lt;/a&gt; I use the same template for all Vue components, so let’s focus on the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; part of the &lt;a href="https://github.com/Mokkapps/vue-3-composition-api-demo/blob/master/src/components/CounterCompositionApi.vue"&gt;CounterCompositionApi.vue&lt;/a&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ts"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onMounted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;watch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;emits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;counter-update&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decrement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;incrementBy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;countPow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;counter-update&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;onMounted&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Composition API counter mounted&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;incrementBy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;countPow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s analyze this code:&lt;/p&gt;

&lt;p&gt;The entry point for all Composition API components is the new &lt;code&gt;setup&lt;/code&gt; method. It is executed &lt;strong&gt;before&lt;/strong&gt; the component is created and once the props are resolved. The function returns an object, and all of its properties are exposed to the rest of the component.&lt;/p&gt;

&lt;p&gt;⚠️ We should avoid using &lt;code&gt;this&lt;/code&gt; inside setup as it won’t refer to the component instance. &lt;code&gt;setup&lt;/code&gt; is called before data properties, computed properties, or methods are resolved, so that they won’t be available within setup.&lt;/p&gt;

&lt;p&gt;But we need to be careful: The variables we return from the setup method are, by default, not reactive.&lt;/p&gt;

&lt;p&gt;We can use the &lt;code&gt;reactive&lt;/code&gt; method to create a reactive state from a JavaScript object. Alternatively, we can use &lt;code&gt;ref&lt;/code&gt; to make a standalone primitive value (for example, a string, number, or boolean) reactive:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;ref&lt;/code&gt; object contains only one property named &lt;code&gt;value&lt;/code&gt;, which can access the property value.&lt;/p&gt;

&lt;p&gt;Vue 3 also provides different new methods like &lt;code&gt;computed&lt;/code&gt;, &lt;code&gt;watch&lt;/code&gt;, or &lt;code&gt;onMounted&lt;/code&gt; that we can use in our &lt;code&gt;setup&lt;/code&gt; method to implement the same logic we used in the Options API component.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extract-composition-function"&gt;
  &lt;/a&gt;
  Extract Composition Function&lt;a href="#extract-composition-function"&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;But we can further improve our Vue component code by extracting the counter logic to a standalone &lt;strong&gt;composition function&lt;/strong&gt; (&lt;a href="https://github.com/Mokkapps/vue-3-composition-api-demo/blob/master/src/composables/useCounter.ts"&gt;useCounter&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onMounted&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decrement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;incrementBy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;countPow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;onMounted&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;useCounter mounted&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;countPow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;incrementBy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This drastically reduces the code in our &lt;a href="https://github.com/Mokkapps/vue-3-composition-api-demo/blob/master/src/components/CounterCompositionApiv2.vue"&gt;CounterCompositionApiv2.vue&lt;/a&gt; component and additionally allows us to use the counter functionality in any other component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ts"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;watch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useCounter&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../composables/useCounter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;emits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;counter-update&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;countPow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;incrementBy&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;counter-update&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;countPow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;incrementBy&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Vue 2, &lt;a href="https://vuejs.org/v2/guide/mixins.html#Basics"&gt;Mixins&lt;/a&gt; were mainly used to share code between components. But they have a few issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It’s impossible to pass parameters to the mixin to change its logic which drastically reduces its flexibility.&lt;/li&gt;
&lt;li&gt;Property name conflicts can occur as properties from each mixin are merged into the same component.&lt;/li&gt;
&lt;li&gt;It isn’t necessarily apparent which properties came from which mixin if a component uses multiple mixins.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Composition API addresses all of these issues.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sfc-script-setup"&gt;
  &lt;/a&gt;
  SFC Script Setup&lt;a href="#sfc-script-setup"&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://blog.vuejs.org/posts/vue-3.2.html"&gt;Vue 3.2&lt;/a&gt; allows us to get rid of the &lt;code&gt;setup&lt;/code&gt; method by providing the &lt;code&gt;&amp;lt;script setup&amp;gt;&lt;/code&gt;. It’s the recommended syntax if you use Composition API and &lt;a href="https://v3.vuejs.org/api/sfc-spec.html#sfc-syntax-specification"&gt;SFC (Single File Component)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This syntactic sugar provides several advantages over the normal &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; syntax:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We can declare props and emitted events using TypeScript&lt;/li&gt;
&lt;li&gt;Less boilerplate&lt;/li&gt;
&lt;li&gt;More concise code&lt;/li&gt;
&lt;li&gt;Better runtime performance: The template is compiled into a render function in the same scope, without an intermediate proxy&lt;/li&gt;
&lt;li&gt;Better IDE type-inference performance: The language server has less work to extract types from code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/Mokkapps/vue-3-composition-api-demo/blob/master/src/components/CounterCompositionApiv3.vue"&gt;CounterCompositionApiv3.vue&lt;/a&gt; demonstrates our counter example using the &lt;code&gt;&amp;lt;script setup&amp;gt;&lt;/code&gt; syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;setup&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ts"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;defineEmits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;watch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useCounter&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../composables/useCounter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;withDefaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defineProps&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Props&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;emit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defineEmits&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;counter-update&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;countPow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;incrementBy&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;counter-update&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-the-composition-api-with-vue-2"&gt;
  &lt;/a&gt;
  Using the Composition API with Vue 2&lt;a href="#using-the-composition-api-with-vue-2"&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If you can’t migrate to Vue 3 today, then you can still use the Composition API already. You can do this by installing &lt;a href="https://github.com/vuejs/composition-api"&gt;the official Composition API Vue 2 Plugin&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion&lt;a href="#conclusion"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;You’ve seen the same counter component created in Vue 2 using Options API and created in Vue 3 using Composition API.&lt;/p&gt;

&lt;p&gt;Let’s summarize all the things I love about Composition API:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;More readable and maintainable code with the feature-wise separation of concerns brought with the composition API.&lt;/li&gt;
&lt;li&gt;No more &lt;code&gt;this&lt;/code&gt; keyword, so we can use arrow functions and use functional programming.&lt;/li&gt;
&lt;li&gt;We can only access the things we return from the &lt;code&gt;setup&lt;/code&gt; method, making things more readable.&lt;/li&gt;
&lt;li&gt;Vue 3 is written in TypeScript and &lt;a href="https://v3.vuejs.org/guide/typescript-support.html#using-with-composition-api"&gt;fully supports Composition API&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Composition functions can easily be unit tested.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following image shows a large component where colors group its logical concerns and compares Options API versus Composition API:&lt;/p&gt;

&lt;p&gt;&lt;a href="///static/97ade2c0a240b31abd5eb9205a399669/47311/vue-options-api-vs-composition-api.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0tErjpen--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.mokkapps.de/static/97ade2c0a240b31abd5eb9205a399669/15ec7/vue-options-api-vs-composition-api.jpg" alt="Vue Options API vs. Composition API" title="Vue Options API vs. Composition API" width="690" height="859"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Vue Options API vs. Composition API&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can see that Composition API groups logical concerns, resulting in better maintainable code, especially for larger and complex components.&lt;/p&gt;

&lt;p&gt;I can understand that many developers still prefer Options API as it is easier to teach people who are new to the framework and have JavaScript knowledge. But I would recommend that you use Composition API for complex applications that require a lot of domains and functionality. Additionally, Options API does not work very well with TypeScript, which is, in my opinion, also a must-have for complex applications.&lt;/p&gt;

&lt;p&gt;If you liked this article, follow me on &lt;a href="https://twitter.com/mokkapps"&gt;Twitter&lt;/a&gt; to get notified about new blog posts and more content from me.&lt;/p&gt;

&lt;p&gt;Alternatively (or additionally), you can also &lt;a href="https://mokkapps.de/newsletter"&gt;subscribe to my newsletter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>frontend</category>
    </item>
    <item>
      <title>How to mount a lamp like a pragmatist?</title>
      <author>bright inventions</author>
      <pubDate>Tue, 02 Nov 2021 09:43:00 +0000</pubDate>
      <link>https://dev.to/brightdevs/how-to-mount-a-lamp-like-a-pragmatist-5ekc</link>
      <guid>https://dev.to/brightdevs/how-to-mount-a-lamp-like-a-pragmatist-5ekc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-bad-example"&gt;
  &lt;/a&gt;
  The Bad Example
&lt;/h2&gt;

&lt;p&gt;Imagine a character called Jack who hires an electrician to have a ceiling lamp mounted.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"Hello Mr Electrician, could you mount the lamp for me please?." - Jack asks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With a bright smile Electrician starts his job. At the end of his work, Jack pushes the switch and… the lamp doesn't give any light. &lt;/p&gt;

&lt;p&gt;Full of surprise on his face Jack kindly asks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“Why isn’t it working?”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the response was:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"You didn’t ask me to make the lamp work, you asked me to get it mounted."&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is lots of absurdity in the story but one can find in it an analogy to a modern software engineer’s work reality. &lt;strong&gt;We, developers, want some clear acceptance criteria, mock ups and well refined tasks.&lt;/strong&gt; On Friday afternoon we are proud that all the requirements are clearly met by our implementation, but from users’ perspective the functionality sometimes resembles the well mounted lamp that gives no light. &lt;/p&gt;

&lt;p&gt;In that story Jack is the project manager and Mr Electrician is the orthodox, acceptance-criteria-oriented-developer. &lt;/p&gt;

&lt;p&gt;Such a situation is a project manager’s nightmare. The role of a project manager is to receive, digest and broadcast signals between people of different worlds. From developers, through upper management up to customers. They physically cannot point out every single thing to be done and hold the dev by hand to make sure everything in his implementation makes sense. &lt;strong&gt;They want to trust the developers, have faith in their common sense and rely on their technical, but also user-oriented expertise.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-good-example"&gt;
  &lt;/a&gt;
  The Good Example
&lt;/h2&gt;

&lt;p&gt;Since we have covered the nightmare scenario, let’s now imagine a more pragmatic and professional approach to mounting the lamp.&lt;/p&gt;

&lt;p&gt;Driven by frustration and disappointment Jack found another electrician to make his lamp work. His name is Mr Pragmatic Electrician. Right after receiving the job Mr Pragmatic Electrician mysteriously started looking around the room. He came back to Jack and said:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"I’ve reviewed the lamp, it has no lightbulb in it. Moreover the wiring is not covered safely. I also verified the allowed amperage in your room and it’s not sufficient for the lamp. I’d propose to completely replace the main wiring, but that will require hammering the walls. Alternatively you could remove some electrical devices from the room. And if we are going to rewire the room, I’d also propose to move the lamp a bit more to the center, as it would provide a much better light distribution across the room."&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jack was absolutely stunned by the professionalism and complexity of the advice he received. He felt really comfortable and felt he could trust Mr Pragmatic and told him:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"I can see you know what you’re talking about, I need to go out, but please do all you find suitable to make it work. I’ll be back in the evening."&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The result of Mr Pragmatic’s work was a beautifully lit and safely wired room.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-analysis"&gt;
  &lt;/a&gt;
  The Analysis
&lt;/h2&gt;

&lt;p&gt;Why was Mr Pragmatic's approach so much more valuable to Jack?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;He reviewed the current state of the lamp&lt;/li&gt;
&lt;li&gt;Investigated the surroundings &lt;/li&gt;
&lt;li&gt;Verified the related pathways&lt;/li&gt;
&lt;li&gt;Took a broader look all around the lamp, presented a non-technical, user-oriented guidance to properly mount the lamp in the most efficient way&lt;/li&gt;
&lt;li&gt;Clearly described his findings, dangers and risks&lt;/li&gt;
&lt;li&gt;Decomposed the problem on many layers: safety, effort, effectiveness of the potential solution.&lt;/li&gt;
&lt;li&gt;Defined the obstacles, blockers and presented an alternative approach&lt;/li&gt;
&lt;li&gt;Proposed clear and professional solutions to the problems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And most of all… &lt;strong&gt;He took responsibility for the idea of LIGHTING THE ROOM instead of MOUNTING THE LAMP.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Following Mr’s Pragmatic attitude you will gain lots of trust from your Project Manager and you will make his life much easier.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The skill I value the most in developers is the ability to take a look at the product as a whole, beyond the Jira tasks - Kasia, Project Manager at Bright Inventions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-summary"&gt;
  &lt;/a&gt;
  The Summary
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The professional developer takes responsibility for fulfilling a high level, abstract need, he supports the manager to achieve his needs.&lt;/strong&gt; A pragmatic approach is to take a holistic view on the idea, the concept, the issue that you are working on. Change perspective, think like a specialist, but then like a plain, ignorant user. Do not blindly follow the acceptance criteria of your task. Fulfil them, but make sure they sit well within the system. Verify all the flows around your new feature - do they still make sense? Should they be aligned? Think about the future of this feature - is it likely to be extended? Does the codebase allow that? Should you propose a refactoring for that module? Be courageous, accept the fact that the business thinking is intrinsically entangled into developers' work routine. &lt;strong&gt;Do not only do the coding, but take responsibility for the functionalities.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At the end, please ask yourself these questions:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As a software engineer&lt;/strong&gt; have you happened to stick so hard to acceptance criteria that you missed some meaningful details in your implementation?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As a project manager&lt;/strong&gt;, have you come across non-supportive, acceptance-criteria-oriented devs? How did you approach the lack of reason in their attitude?&lt;/p&gt;

&lt;p&gt;By Radosław Landowski, Backend Developer @ Bright Inventions.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@chatelp?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Pierre Châtel-Innocenti&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>discuss</category>
      <category>agile</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
