<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Make a Blockchain Speak to You</title>
      <author>omar-saadoun</author>
      <pubDate>Wed, 26 May 2021 20:33:23 +0000</pubDate>
      <link>https://dev.to/omarsaadoun/make-a-blockchain-speak-to-you-2jp3</link>
      <guid>https://dev.to/omarsaadoun/make-a-blockchain-speak-to-you-2jp3</guid>
      <description>&lt;h6&gt;
  &lt;a href="#the-%C3%A6ternity-middleware-puts-blockchain-data-into-context-so-you-get-the-information-you-need"&gt;
  &lt;/a&gt;
  The √¶ternity Middleware puts blockchain data into context so you get the information you need
&lt;/h6&gt;

&lt;p&gt;There are good technical reasons for blockchain protocols to leave bits of information stored in their granular way. Although a good source of immutable trustful data, only connecting the dots between all available information unleashes the full value of blockchains. Have your questions, the open-source √¶ternity Middleware has the answers.&lt;/p&gt;

&lt;p&gt;‚ÄúWhat is the most popular token?‚Äù&lt;/p&gt;

&lt;p&gt;‚ÄúHow many owners of this token are there, what are their balances and how did they change over the last blocks?‚Äù&lt;/p&gt;

&lt;p&gt;‚ÄúTell me whenever something happens with regard to my oracle/account/contract!‚Äù&lt;/p&gt;

&lt;p&gt;To keep the chain data of the √¶ternity protocol concise, √¶ternity would not store answers to the questions above. Projects requiring this information for their use cases though (especially in the De-Fi sector) have a tool at hand, that automatically gathers lots of important correlations between on-chain data to process it into an easily digestible form.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-the-new-%C3%A6ternity-middleware"&gt;
  &lt;/a&gt;
  Introducing: The new √¶ternity Middleware
&lt;/h2&gt;

&lt;p&gt;You might have seen it in action already: It runs √¶ternity‚Äôs &lt;a href="https://explorer.aeternity.io/"&gt;Explorer&lt;/a&gt; under the hood.&lt;/p&gt;

&lt;p&gt;It was developed with any kind of usage scenario in mind: You can spawn it up to visualize what is happening on your private network or follow along the progress of the √¶ternity mainnet. And yes, you get both the back-end service as well as the beautifully designed web interface if you want to. And the next good news is: It‚Äôs open-source and very easy to set up. You can follow the steps in the &lt;a href="https://github.com/aeternity/ae_mdw"&gt;Github Repository&lt;/a&gt; and always ask for help on the &lt;a href="https://forum.aeternity.com/"&gt;forum&lt;/a&gt; if you get stuck.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for-techies-and-endusers-alike"&gt;
  &lt;/a&gt;
  For Techies and End-Users alike
&lt;/h2&gt;

&lt;p&gt;Using the Middleware, you can serve the purposes of several stakeholders of your projects alike: have people get visual feedback and allow for quick read-ups on important information, as well as gathering of huge chunks of complicated information for your project‚Äôs tech. The latter is supported by over 40 APIs serving different purposes (get a brief overview &lt;a href="https://github.com/aeternity/ae_mdw#http-endpoints"&gt;here&lt;/a&gt; and if anything important is missing, you are always welcome to express your requests on the &lt;a href="https://forum.aeternity.com/"&gt;forum&lt;/a&gt;. Besides querying APIs for required information you can also use web sockets to be notified about specific happenings in real-time. This means that you don‚Äôt have to pull the API constantly for updates with requests causing load on your service, but have all kinds of new information regarding your accounts, contracts or oracles pushed to you via the WebSocket. Think how your dapp‚Äôs UX will benefit from having an integrated querying/events notifications service, without the need of using third-party services often used to achieve performance and efficiency in dapps UX.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-real-deal"&gt;
  &lt;/a&gt;
  The Real Deal
&lt;/h2&gt;

&lt;p&gt;Utilizing the Middleware for your project comes with low maintenance efforts: √¶ternity uses the Middleware for its official block explorer you will automatically benefit from all patches, updates, and new features that get introduced to the Middleware.&lt;/p&gt;

&lt;p&gt;In the same way that you have oracles, state channels, and the naming system seamlessly integrated into the protocol, you can also count on the advantages of the √¶ternity Middleware out of the box.&lt;/p&gt;

&lt;p&gt;Get in touch: &lt;a href="https://github.com/aeternity"&gt;GitHub&lt;/a&gt; | &lt;a href="http://forum.aeternity.com/"&gt;Forum&lt;/a&gt; | &lt;a href="https://www.reddit.com/r/Aeternity/"&gt;Reddit&lt;/a&gt; | &lt;a href="https://twitter.com/aeternity"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.youtube.com/channel/UCEsM0b7QPazeMR80DxNkzCA"&gt;YouTube&lt;/a&gt;| &lt;a href="https://www.linkedin.com/company/aeternity"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Original article:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.aeternity.com/make-a-blockchain-speak-to-you-3f3a566ca441"&gt;https://blog.aeternity.com/make-a-blockchain-speak-to-you-3f3a566ca441&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>aeternityblockchain</category>
      <category>middleware</category>
    </item>
    <item>
      <title>Filtering, Sorting and Pagination With React Hooks &amp; Redux üòç</title>
      <author>Said Mounaim</author>
      <pubDate>Wed, 26 May 2021 20:31:07 +0000</pubDate>
      <link>https://dev.to/said_mounaim/filtering-sorting-and-pagination-with-react-hooks-redux-4m9n</link>
      <guid>https://dev.to/said_mounaim/filtering-sorting-and-pagination-with-react-hooks-redux-4m9n</guid>
      <description>&lt;h1&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://react-redux-filtering.netlify.app/"&gt;https://react-redux-filtering.netlify.app/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#github"&gt;
  &lt;/a&gt;
  Github
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://github.com/saidMounaim/React-Redux-Filtering"&gt;https://github.com/saidMounaim/React-Redux-Filtering&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;These instructions will get you a copy of the project up and running on your local machine for development and testing purposes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node@v10.16.0 or higher
npm@6.9.0 or higher
git@2.17.1 or higher
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How To Use
&lt;/h2&gt;

&lt;p&gt;From your command line, clone and run React Redux Filtering:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Clone this repository&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/saidMounaim/React-Redux-Filtering.git

&lt;span class="c"&gt;# Go into the repository&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;React-Redux-Filtering

&lt;span class="c"&gt;# Install dependencies&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="c"&gt;#Start's development server&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#technologies-used"&gt;
  &lt;/a&gt;
  Technologies Used
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://redux.js.org/"&gt;Redux&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>100daysofcode</category>
      <category>redux</category>
    </item>
    <item>
      <title>The race to connect the world to the blocks</title>
      <author>omar-saadoun</author>
      <pubDate>Wed, 26 May 2021 20:21:27 +0000</pubDate>
      <link>https://dev.to/omarsaadoun/the-race-to-connect-the-world-to-the-blocks-3i1f</link>
      <guid>https://dev.to/omarsaadoun/the-race-to-connect-the-world-to-the-blocks-3i1f</guid>
      <description>&lt;p&gt;Blockchain adoption has been taking giant leaps forward in the last couple of years, and with DeFi leading the change, &lt;strong&gt;oracles have become a necessity, representing one of the cornerstones of blockchains‚Äô utility&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Blockchain oracles allow interaction between real-world data and smart contracts, allowing any publicly available data to be seamlessly integrated into smart contracts. &lt;strong&gt;The oracle connects the blockchain and the real world&lt;/strong&gt;, allowing the smart contracts to change when certain world events trigger such a reaction.&lt;/p&gt;

&lt;p&gt;It is well established that √¶ternity was born DeFi-ready, with smart contract capability as well as extremely high scalability and transaction speed. However, it is not common knowledge that √¶ternity also offers an embedded oracle system to its users. What the developers of √¶ternity knew at the time of building the blockchain‚Äôs foundations is that &lt;strong&gt;oracles will be an integral part of any blockchain that wants to host the plethora of DeFi applications&lt;/strong&gt; that are currently being developed. By looking ahead and learning from the mistakes of the early blockchain platforms, &lt;strong&gt;√¶ternity‚Äôs design resulted in a completely modern blockchain, with sufficient performance and functionalities to support the heavy traffic demands of DeFi.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Oracles are just one of many functions essential for what blockchain is trying to bring to the world ‚Äî efficient independence from the central banking systems and the instant interoperability of the physical world and the decentralized financial system.&lt;/p&gt;

&lt;p&gt;However, √¶ternity‚Äôs oracles differ from most oracles in the blockchain space in the sense that they do not operate automatically. Instead, &lt;strong&gt;√¶ternity utilizes oracle operators&lt;/strong&gt; ‚Äî individuals or entities who register oracles and set them up to communicate the relevant data between smart contracts and the world outside the blockchain.&lt;/p&gt;

&lt;p&gt;Although this makes the process more complex, it creates a structure in which oracle operators can earn from the parties using the oracles they provide. This means that, in the future, there could be a &lt;strong&gt;dedicated Oracle Marketplace&lt;/strong&gt; where users can choose their trusted oracles, creating strong competition in the market to provide the best possible oracle service.&lt;/p&gt;

&lt;p&gt;Undeniably, any business planning to utilize blockchain for its benefit will have to go through oracles. With numerous blockchain projects offering different solutions, it will be a &lt;strong&gt;system with the most secure structure and least capacity for manipulation that becomes the standard&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The race to provide the world and blockchain with seamless interoperability is far from over, and oracle systems will continue to be created and improved. The &lt;strong&gt;Akshwani haeck&lt;/strong&gt; held in April and May, organized by √¶ternity, aimed to do just that ‚Äî find more opportunities to utilize and improve the ways oracles are being used. The brightest minds of the blockchain space took on the ambitious task of testing out the new use cases of oracles and &lt;strong&gt;building the digital structures of the future on the √¶ternity blockchain network.&lt;/strong&gt; The fruits of their labour can be found in the &lt;a href="https://akshwanihaeck.devpost.com/project-gallery"&gt;Devpost project gallery of the Akshwani haeck&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While √¶ternity isn‚Äôt the only competitor working on advancing oracles and bringing mass adoption to blockchain, one thing is certain ‚Äî with oracles embedded in its protocols from the start, and with its uniquely active and collaborative community, &lt;strong&gt;√¶ternity has a head start&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Get in touch: &lt;a href="https://github.com/aeternity"&gt;GitHub&lt;/a&gt; | &lt;a href="http://forum.aeternity.com/"&gt;Forum&lt;/a&gt; | &lt;a href="https://www.reddit.com/r/Aeternity/"&gt;Reddit&lt;/a&gt; | &lt;a href="https://twitter.com/aeternity"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.youtube.com/channel/UCEsM0b7QPazeMR80DxNkzCA"&gt;YouTube&lt;/a&gt;| &lt;a href="https://www.linkedin.com/company/aeternity"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Original Article&lt;br&gt;
&lt;a href="https://blog.aeternity.com/the-race-to-connect-the-world-to-the-blocks-44cfa659edc7"&gt;https://blog.aeternity.com/the-race-to-connect-the-world-to-the-blocks-44cfa659edc7&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>aeternityblockchain</category>
      <category>oracles</category>
    </item>
    <item>
      <title>Building a blog with Franklin.jl</title>
      <author>Ifihan Olusheye</author>
      <pubDate>Wed, 26 May 2021 19:54:30 +0000</pubDate>
      <link>https://dev.to/ifihan/building-a-blog-with-franklin-jl-3h77</link>
      <guid>https://dev.to/ifihan/building-a-blog-with-franklin-jl-3h77</guid>
      <description>&lt;h4&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  INTRODUCTION
&lt;/h4&gt;

&lt;p&gt;Franklin.jl is a simple, customizable static site generator . It is a template that can be modified to suit your taste and it is very fast and efficient to use. &lt;/p&gt;

&lt;p&gt;Franklin is light and very easy to use, and this is why I decided to build a blog with it. Franklin has cool and key features like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Augmented markdown, allowing definition of LaTeX-like commands.&lt;/li&gt;
&lt;li&gt;Easy inclusion of user-defined div-blocks.&lt;/li&gt;
&lt;li&gt;Maths rendered via KaTeX, code via highlight.js (both can be pre-rendered).&lt;/li&gt;
&lt;li&gt;Live evaluation of Julia code blocks.&lt;/li&gt;
&lt;li&gt;Live preview of modifications.&lt;/li&gt;
&lt;li&gt;Simple optimization step to compress and pre-render the website.&lt;/li&gt;
&lt;li&gt;Simple publication step to deploy the website.&lt;/li&gt;
&lt;li&gt;Straightforward integration with Literate.jl.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#getting-started-with-franklin"&gt;
  &lt;/a&gt;
  GETTING STARTED WITH FRANKLIN
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#1-set-up-the-environment"&gt;
  &lt;/a&gt;
  1. Set up the environment.
&lt;/h4&gt;

&lt;p&gt;To set up the Franklin.jl environment, follow the steps below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download and Install &lt;a href="https://julialang.org/"&gt;Julia&lt;/a&gt; for your Operating System.&lt;/li&gt;
&lt;li&gt;Open the Julia REPL.&lt;/li&gt;
&lt;li&gt;Run the command &lt;code&gt;using Pkg&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Install Franklin with the command &lt;code&gt;Pkg.add(Franklin)&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;julia&amp;gt; using Pkg
julia&amp;gt; Pkg.add(Franklin)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2-start-a-project"&gt;
  &lt;/a&gt;
  2. Start a project.
&lt;/h4&gt;

&lt;p&gt;Before beginning a project, it's advisable to read through the list of &lt;a href="https://franklinjl.org/styling/templates/index.html"&gt;templates&lt;/a&gt; available by Franklin to know what template to use. You can also decide to build your template and create a PR (if you want your own template). After reading through the templates, run the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;julia&amp;gt; using Franklin
julia&amp;gt; newsite("nameofsite", template="basic") 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I used the "basic" template for my blog because I love the simplicity! &lt;/p&gt;

&lt;p&gt;After doing this, you would get a message like the one below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚úì Website folder generated at "nameofsite" (now the current directory).
‚Üí Use serve() from Franklin to see the website in your browser.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run the serve command &lt;code&gt;serve()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;julia&amp;gt; serve()
‚Üí Initial full pass...
‚Üí Starting the server...
‚úì LiveServer listening on http://localhost:8000/ ...
  (use CTRL+C to shut down)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It would automatically open up on your default browser. The &lt;code&gt;Project.toml&lt;/code&gt; starts up the server. If any dependency is being added, it is good to include it there.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-structure-of-franklin-site"&gt;
  &lt;/a&gt;
  3. Structure of Franklin site.
&lt;/h4&gt;

&lt;p&gt;The new project should have a structure like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚îú‚îÄ‚îÄ .github 
‚îú‚îÄ‚îÄ _assets/
‚îú‚îÄ‚îÄ _css/
‚îú‚îÄ‚îÄ _layout/
‚îú‚îÄ‚îÄ _libs/
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ .gitlab-ci
‚îú‚îÄ‚îÄ 404.md
‚îú‚îÄ‚îÄ config.md
‚îú‚îÄ‚îÄ index.md
‚îú‚îÄ‚îÄ menu1.md
‚îú‚îÄ‚îÄ menu2.md
‚îú‚îÄ‚îÄ menu3.md
‚îú‚îÄ‚îÄ Project.toml
‚îî‚îÄ‚îÄ utils.jl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running the &lt;code&gt;serve()&lt;/code&gt; function, a &lt;code&gt;__site&lt;/code&gt; folder would be generated. This is the generated website from Markdown to HTML. Do not edit the content of this folder, but rather, edit the corresponding file in the project. We do this because the changes in the &lt;code&gt;__site&lt;/code&gt; folder won't reflect, as the folder is included in the &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;index.md&lt;/code&gt; file is the page you would see on starting the server. The remaining folders are auxiliary folders supporting the site. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;_assets/  contains the images, code snippets, etc.,&lt;/li&gt;
&lt;li&gt;_css/ contains the style sheets.&lt;/li&gt;
&lt;li&gt;_libs/ contains JavaScript libraries.&lt;/li&gt;
&lt;li&gt;_layout/ will contain bits of HTML scaffolding for the generated pages such as the header and footer. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;config.md&lt;/code&gt; allows you to specify variables that help steer the page generation. It can also be used to declare global variables or definitions that can then be used on all pages. It is a very important file. I would say more about it later in the article.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;.github&lt;/code&gt; folder, there is a &lt;code&gt;deploy.yml&lt;/code&gt; for Github Actions. You can configure some fields for your customization.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Side note:&lt;/strong&gt; If you want to change the content of the pages, read up on the &lt;code&gt;index.md&lt;/code&gt;, &lt;code&gt;menu1.md&lt;/code&gt;, &lt;code&gt;menu2.md&lt;/code&gt;, and &lt;code&gt;menu3.md&lt;/code&gt; for a proper understanding of how to write the Markdown.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-editing-the-raw-configmd-endraw-"&gt;
  &lt;/a&gt;
  4. Editing the &lt;code&gt;config.md&lt;/code&gt;.
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;config.md&lt;/code&gt; folder looks like this: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vg-vlQ6e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621958953852/WAYjqLmro.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vg-vlQ6e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621958953852/WAYjqLmro.png" alt="config.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First off, you start by editing the name of the author, so it shows at the footer. The prepath has to be defined if you're creating a project website with the repo. Then, the URL path is in the form of &lt;code&gt;username.github.io/nameofrepo/&lt;/code&gt;, if not the CSS of the site would look terrible. &lt;/p&gt;

&lt;p&gt;You can go edit the site to your taste! For my blog, I created an About, Blog, and Contact page. The Blog section contains articles I've written before. Their README files can be found in the &lt;code&gt;posts&lt;/code&gt; folder. I also customized the CSS of the page.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-post-processing-verifying-links"&gt;
  &lt;/a&gt;
  5. Post processing / verifying links
&lt;/h4&gt;

&lt;p&gt;To avoid multiple pushes to GitHub and ensuring that links in your site work, Franklin has a function to help with that. &lt;code&gt;verify_links()&lt;/code&gt; is used to check that.&lt;/p&gt;

&lt;p&gt;Also, if you close the Julia REPL and want to continue working on the project, restarting the server is quite easy. Just head over to the directory the project is in and type in &lt;code&gt;julia&lt;/code&gt; in the directory path.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Julia must be added to PATH for this to work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BXl-GQ81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622010093152/XDIsnPDwV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BXl-GQ81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622010093152/XDIsnPDwV.png" alt="back.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After this, the Julia REPL will come up.  Next, type in the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;julia&amp;gt; using Franklin
julia&amp;gt; serve()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#6-pushing-to-github"&gt;
  &lt;/a&gt;
  6. Pushing to GitHub.
&lt;/h4&gt;

&lt;p&gt;After working on the project locally, you will want to deploy it so people can see what you have done. This is quite easy to do. There are two methods of deploying to GitHub pages. They depend on what the project is.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Personal website &lt;code&gt;(username.github.io)&lt;/code&gt;  or Organizational website &lt;code&gt;(orgname.github.io)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Project website &lt;code&gt;(username.github.io/myWebsite/)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you consider a project website, you must define a prepath variable in your &lt;code&gt;config.md&lt;/code&gt; with the name of that project. For instance: &lt;code&gt;@def prepath = "myWebsite"&lt;/code&gt;. This is used when deploying to indicate that the base URL of your website is &lt;code&gt;username.github.io/myWebsite/&lt;/code&gt; instead of &lt;code&gt;username.github.io&lt;/code&gt;. If you forget to do this, the CSS won't load and your website will look terrible, amongst other problems. &lt;/p&gt;

&lt;p&gt;Synchronizing your repository and local folder is next on our list. After creating the repo, type in the commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/Ifihan/nameofrepo.git
git push -u origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or for an already initialized repo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote add origin https://github.com/Ifihan/nameofrepo.git
git branch -M main
git push -u origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can read more on Git here: &lt;a href="https://git-scm.com/"&gt;site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;Side note: *&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you're familiar with GitHub, you might run into this issue:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;! [remote rejected] main -&amp;gt; main (refusing to allow a Personal Access Token to create or update workflow `.github/workflows/Deploy.yml` without `workflow` scope)
error: failed to push some refs to 'https://github.com/Ifihan/nameofrepo.git'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's nothing to worry about as it is a slight error that can be fixed easily. This is because the token registered on your computer doesn't have the workflow option. &lt;/p&gt;

&lt;p&gt;You can fix this by generating a new token and including the workflow option. Head over to &lt;a href="//github.com"&gt;GitHub&lt;/a&gt; &amp;gt; Settings &amp;gt; Developer Settings &amp;gt; Personal access tokens. Then click on "Generate new token."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EKUtj0ZW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622006947439/_0m3HuC37.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EKUtj0ZW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622006947439/_0m3HuC37.png" alt="token.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Type in the name of the token and tick the workflow function.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oxxUoDWX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622006526758/1gp-rnXnI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oxxUoDWX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622006526758/1gp-rnXnI.png" alt="workflow.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go to Control Panel&amp;gt; User Accounts &amp;gt; Manage Windows Credentials and find the git credential.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OnvRifYD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621953370230/tNMRCIUN95.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OnvRifYD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621953370230/tNMRCIUN95.png" alt="credentials.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on it and then click on the "remove" button. When pushing to GitHub, you would be prompted to input your username and password. For the password option, put the token you generated and you're good to go!&lt;/p&gt;

&lt;p&gt;Go to the Action section and wait for it to be deployed. You would also find another branch called gh-pages. That's where it was deployed according to the &lt;code&gt;deploy.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ULncH8vY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621955319814/uN0Zctwfn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ULncH8vY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621955319814/uN0Zctwfn.png" alt="deploy.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go over to the Settings &amp;gt; Pages, and change the branch from main to gh-pages, and your site is hosted successfully!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--18ZFQAr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621953708309/cqP2xZumn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--18ZFQAr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621953708309/cqP2xZumn.png" alt="gh-pages.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My blog is hosted at &lt;a href="https://ifihan.github.io/blogue/"&gt;https://ifihan.github.io/blogue/&lt;/a&gt;, and you can find the source code on &lt;a href="https://github.com/Ifihan/blogue"&gt;GitHub&lt;/a&gt;. Feel free to star, and contributions are welcomed via PRs. &lt;/p&gt;

&lt;p&gt;New To Julia? Read the article I wrote on Julia &lt;a href="https://dev.to/ifihan/the-julia-programming-language-5b10"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have any issues, you can ask on the #franklin channel on the &lt;a href="https://julialang.org/slack/"&gt;Slack&lt;/a&gt; workspace or send me a DM on &lt;a href="http://twitter.com/ifihan_"&gt;Twitter&lt;/a&gt;. You can also shoot me a &lt;a href="//victoriaolusheye@gmail.com"&gt;mail&lt;/a&gt;, and I would be glad to help.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  REFERENCES
&lt;/h4&gt;

&lt;p&gt;This article was written with the help of &lt;a href="https://franklinjl.org/"&gt;Franklin's Documentation&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>blog</category>
      <category>julia</category>
      <category>franklinjl</category>
    </item>
    <item>
      <title>JavaScript: Understand 'this' keyword</title>
      <author>Mariana Simon</author>
      <pubDate>Wed, 26 May 2021 19:16:38 +0000</pubDate>
      <link>https://dev.to/simonpaix/javascript-understand-this-keyword-55j</link>
      <guid>https://dev.to/simonpaix/javascript-understand-this-keyword-55j</guid>
      <description>&lt;p&gt;&lt;code&gt;'this'&lt;/code&gt; is one of the most important concepts in JavaScript. It's part of the basics and the sooner you get comfortable with it the easier your coding life will be :)   &lt;/p&gt;

&lt;p&gt;Make sure you understand the use of 'this' by reading this post.  &lt;/p&gt;

&lt;p&gt;First, the simple 5 yo explanation: &lt;br&gt;
¬†&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The use of &lt;code&gt;'this'&lt;/code&gt; in programming like what you do in plain English. For example, when you say "I got a job! This is great!". We know 'this' is referring to the fact you got the job. In other words, 'this' gives context to the second sentence. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;--5 yo &lt;br&gt;
¬†&lt;/p&gt;

&lt;p&gt;So, to understand &lt;code&gt;'this'&lt;/code&gt;, you need to know what context is.  &lt;/p&gt;

&lt;p&gt;¬†  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#context-explained"&gt;
  &lt;/a&gt;
  Context explained
&lt;/h2&gt;

&lt;p&gt;¬† &lt;/p&gt;

&lt;p&gt;Context is related to objects. It refers to the object a method or property belongs to. Your code starts running in a global context, which in your browser is the &lt;code&gt;window&lt;/code&gt; (in Node, the global object is called &lt;code&gt;global&lt;/code&gt;). Look at the example below: &lt;/p&gt;

&lt;p&gt;¬†&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Beyonce&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;  

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// Beyonce &lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// Beyonce &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;In the example, &lt;code&gt;'this'&lt;/code&gt; equals &lt;code&gt;window&lt;/code&gt; because I ran it on my browser, where the global object is the window.  So, window.name ==="Ash"  .  So far, the context is window. Ok. &lt;/p&gt;

&lt;p&gt;Now, the context changes during your code execution. Whenever an object's method is called, &lt;code&gt;'this'&lt;/code&gt; is set to the object the method was called on. &lt;/p&gt;

&lt;p&gt;See the example below. Both lines 4 and 10 are identical but they log different results according to the value of &lt;code&gt;'this'&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;¬†&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Beyonce&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; 
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Your name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//  'this' is  window &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;heisenberg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Heisenberg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="na"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Your name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//  'this' is heisenberg &lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="nx"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;span class="c1"&gt;// Your name is Beyonce. &lt;/span&gt;
&lt;span class="nx"&gt;heisenberg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Your name is Heisenberg. &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;The code above works fine, but we repeated line 4 which is not cool (remember: DRY Don't Repeat Yourself). &lt;/p&gt;

&lt;p&gt;There is a way to write the &lt;code&gt;console.log()&lt;/code&gt; only once and reuse it. To do that, we use the function &lt;code&gt;bind&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#this-with-bind"&gt;
  &lt;/a&gt;
  'this' with bind
&lt;/h2&gt;

&lt;p&gt;¬†&lt;br&gt;
&lt;code&gt;Bind&lt;/code&gt; applies a given &lt;code&gt;'this'&lt;/code&gt; (an object) to the function that is calling it. The object that you want to bind to the function is passed as a parameter to bind. &lt;/p&gt;

&lt;p&gt;See example: &lt;br&gt;
¬†&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; 
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Your name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;beyonce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Beyonce&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;heisenberg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Heisenberg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sayBeyonce&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;beyonce&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sayHeisenberg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heisenberg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="nx"&gt;sayBeyonce&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Your name is Beyonce. &lt;/span&gt;
&lt;span class="nx"&gt;sayHeisenberg&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Your name is Heisenberg. &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;Nice! Now, let's say we didn't want to create new functions to say each person's name.  We only want to use sayMyName() .   &lt;/p&gt;

&lt;p&gt;We can do so with the &lt;code&gt;call&lt;/code&gt; function and a generic person object. &lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#this-with-call"&gt;
  &lt;/a&gt;
  'this' with call
&lt;/h2&gt;

&lt;p&gt;¬†&lt;br&gt;
Like bind, &lt;code&gt;call&lt;/code&gt; can be used to set a custom value to &lt;code&gt;'this'&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;See the example: &lt;br&gt;
¬†&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Your name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.`&lt;/span&gt;&lt;span class="p"&gt;)};&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;beyonce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Beyonce&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 

&lt;span class="p"&gt;};&lt;/span&gt;   

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;heisenberg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Heisenberg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt; 

&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;beyonce&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Your name is Beyonce. &lt;/span&gt;
&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heisenberg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Your name is Heisenberg. &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#this-with-arrow-functions"&gt;
  &lt;/a&gt;
  'this' with arrow functions
&lt;/h2&gt;

&lt;p&gt;¬†&lt;br&gt;
Be careful with arrow functions üèπ   &lt;/p&gt;

&lt;p&gt;When an arrow function is used, it doesn‚Äôt set a new value to &lt;code&gt;'this'&lt;/code&gt;. Instead, it inherits the one from the parent scope. &lt;/p&gt;

&lt;p&gt;This example is identical to the previous one, but with an arrow function instead of a normal one. &lt;/p&gt;

&lt;p&gt;It logs "Ash" twice to the console. Weird, right? &lt;br&gt;
¬†&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Your name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt; 

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;beyonce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Beyonce&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt;  

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;heisenberg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Heisenberg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt; 

&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;beyonce&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Your name is Ash. &lt;/span&gt;
&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heisenberg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Your name is Ash. &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;Even if you use call/bind, it won't work. It still logs "Ash". Why?  &lt;/p&gt;

&lt;p&gt;¬† &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#this-with-regular-vs-arrow-functions"&gt;
  &lt;/a&gt;
  'this' with regular vs arrow functions
&lt;/h2&gt;

&lt;p&gt;¬† &lt;/p&gt;

&lt;p&gt;Regular functions set their own &lt;code&gt;'this'&lt;/code&gt; object to the caller.&lt;/p&gt;

&lt;p&gt;BUT, Arrow functions don't. They inherit &lt;code&gt;'this'&lt;/code&gt; from the previous context, aka from the scope it sits inside. In this case, from window. This is called "lexical scoping". &lt;/p&gt;

&lt;p&gt;So, when we used an arrow function, &lt;code&gt;'this'&lt;/code&gt; had nothing to do with the caller of the function. It was still equal to &lt;code&gt;window&lt;/code&gt; and it stayed that way, logging "Ash" as a result. &lt;/p&gt;

&lt;p&gt;What if we wrap the arrow function with a regular function? &lt;/p&gt;

&lt;p&gt;The regular function is called and sets &lt;code&gt;'this'&lt;/code&gt; to the caller person.  &lt;/p&gt;

&lt;p&gt;The arrow function is called from inside the regular function. 'this' value in the arrow function inherits 'this' value from the outer (regular) function. &lt;strong&gt;So it works!&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrowFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Your name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="nx"&gt;arrowFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
  &lt;span class="p"&gt;},&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt;  

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;beyonce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Beyonce&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt; 

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;heisenberg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Heisenberg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt;  

&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;beyonce&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Your name is Beyonce. &lt;/span&gt;
&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heisenberg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Your name is Heisenberg. &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¬†&lt;br&gt;
Cool. So using arrow functions is bad? Not at all. There are many use cases when you actually want to inherit 'this' from the surrounding context. In those cases, arrow functions are super useful.  &lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#useful-cases-of-this-with-arrow-functions"&gt;
  &lt;/a&gt;
  Useful cases of 'this' with arrow functions
&lt;/h2&gt;

&lt;p&gt;¬†&lt;br&gt;
Let's see an example.  Here, we want to log a different name every 2 seconds by using an array of names. If we run this code, we get the error: &lt;strong&gt;[Uncaught TypeError: Cannot read property 'forEach' of undefined].&lt;/strong&gt; &lt;br&gt;
¬†&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Beyonce&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Heisenberg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 

  &lt;span class="na"&gt;sayNames&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 

    &lt;span class="c1"&gt;// log each name after 1 second &lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;your name is&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
      &lt;span class="p"&gt;});&lt;/span&gt; 
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
  &lt;span class="p"&gt;},&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt; 

&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayNames&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;Why? &lt;/p&gt;

&lt;p&gt;When sayNames is called it sets 'this' to be the people object. But when setTimeout is called, it sets 'this' to be the window. The window doesn't have a &lt;code&gt;names&lt;/code&gt; property.  How do we solve that?  &lt;/p&gt;

&lt;p&gt;You guessed it right! We use an arrow function, which will inherit the 'this' from its outer context. In other words, it will inherit &lt;code&gt;'this'&lt;/code&gt; from sayNames context. &lt;br&gt;
¬†&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Beyonce&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Heisenberg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 

  &lt;span class="na"&gt;sayNames&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

    &lt;span class="c1"&gt;// log each name after 1 second &lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;your name is &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
      &lt;span class="p"&gt;});&lt;/span&gt; 
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
  &lt;span class="p"&gt;},&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt; 

&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayNames&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-me-lets-connect"&gt;
  &lt;/a&gt;
  About me, let's connect! üëãüë©‚Äçüíª
&lt;/h2&gt;

&lt;p&gt;¬†&lt;br&gt;
Thanks for reading! I'm an avid learner and I love sharing what I know. I teach coding live for free üëâ &lt;a href="https://learnpine.com"&gt;here&lt;/a&gt; and I share coding tips on &lt;a href="https://twitter.com/simonpaix"&gt;my Twitter&lt;/a&gt; . If you want to, come visit and say hi in the chat üòÅ &lt;br&gt;
¬†&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Read More/Read Less functionality with Vue</title>
      <author>Laur.Rvt</author>
      <pubDate>Wed, 26 May 2021 19:00:35 +0000</pubDate>
      <link>https://dev.to/laurrvt/read-more-read-less-functionality-with-vue-3km0</link>
      <guid>https://dev.to/laurrvt/read-more-read-less-functionality-with-vue-3km0</guid>
      <description>&lt;p&gt;Hi!&lt;br&gt;
In this post I am going to show you a simple way to do a Read More/Read Less functionality in vue.js.&lt;/p&gt;

&lt;p&gt;One way to do that is to have two divs that will store both versions of the text (the long and the short one) but that is working only if we work with static texts.&lt;/p&gt;

&lt;p&gt;This is a working version of this functionality using a variable in which will be stored our text:&lt;br&gt;
&lt;a href="https://codesandbox.io/s/eager-kowalevski-u406b?file=/src/App.vue"&gt;https://codesandbox.io/s/eager-kowalevski-u406b?file=/src/App.vue&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The idea is pretty simple. I just have a bool variable named "readMore" which will control displaying of Read More and Read Less buttons. Also, using readMore ,I give to div that stores the text a new class named "readLess" which have it own styles.&lt;br&gt;
Hope it was useful for you. If you have any questions or suggestions, feel free to text me about that :)&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Tools to know when starting coding</title>
      <author>Chaitanya Prabuddha</author>
      <pubDate>Wed, 26 May 2021 18:38:59 +0000</pubDate>
      <link>https://dev.to/line/tools-to-know-when-starting-coding-2nhn</link>
      <guid>https://dev.to/line/tools-to-know-when-starting-coding-2nhn</guid>
      <description>&lt;p&gt;When we start to code, most of us really don't focus on tools. These tools can really make your programming more productive and efficient. &lt;/p&gt;

&lt;p&gt;In the tech world, there are thousands of tools that people use themselves, or probably will tell you to use these tools. How are we as beginners or intermediates know which tool is good for us. In this blog, I have talked about this in this article, &lt;strong&gt;Enjoy&lt;/strong&gt;-&lt;/p&gt;

&lt;p&gt;1.&lt;strong&gt;WhatFont&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This Amazing Chrome extensions help to us to identify the fond of the website.&lt;/p&gt;

&lt;p&gt;2.&lt;strong&gt;StackOverFlow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most of us falls in problems related to our code or there is a bug that you are facing but can't solve, you can search that on stackoverflow and could get the solution over there.&lt;/p&gt;

&lt;p&gt;3.&lt;strong&gt;Wappalyzer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is also a Chrome extension that helps in identifying the technology used in that website.&lt;/p&gt;

&lt;p&gt;4.&lt;strong&gt;Redux Dev Tools&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This tool is good for debugging application made by Redux.&lt;/p&gt;

&lt;p&gt;5.&lt;strong&gt;Vimeo Repeat and Speed&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is Also an Chrome extension, most of coding tutorials made by individual websites are either hosted on Vimeo or sometimes Youtube. This extension gives you flexibility to watch vimeo videos in a your custom way. &lt;/p&gt;

&lt;p&gt;6.&lt;strong&gt;Git Lens&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you use VS code, this vs code extension will help you find what, when changes were made and who made the changes in the code.&lt;/p&gt;

&lt;p&gt;7.&lt;strong&gt;VSCode-Icons&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This extension on VS code changes the Coding window according to yourself and make it the most pleasant look for your eyes.&lt;/p&gt;

&lt;p&gt;8.&lt;strong&gt;Code Spell Checker&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This as the name suggest checks the spelling of the code, and makes it easier for you to code, if you don't want to waste your time on learning and memorizing spellings.&lt;/p&gt;

&lt;p&gt;9.&lt;strong&gt;Guides&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This code guide will make sure that the brackets and parenthesis that you put in your code are correct and is in the write place, so that in the future no bugs could be found.&lt;/p&gt;

&lt;p&gt;10.&lt;strong&gt;Auto Rename Tag&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;This will automatically make the ending tag of any HTML code you do, like if you wrote  then it will automatically make  in the correct position according to your code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;END&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Finally this big topic is over now, Now I would like to talk about my Newsletter&lt;/em&gt; -&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I have started a newsletter in which you will get Email twice a week directly from me. I will send you latest tech, coding &amp;amp; Other useful information. I will also be spending a one riddle each time and the first to complete the riddle will get a small gift from me&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://linenewsletter.substack.com/subscribe?utm_source=menu&amp;amp;simple=true&amp;amp;next=https%3A%2F%2Flinenewsletter.substack.com%2Fp%2Fcoming-soon"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDFP6Lsm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tyih1zf664aoqcwaxr17.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow me on Twitter as well. &lt;a href="https://twitter.com/chetanistaken"&gt;Click Here.&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Integrating Scylla DB with Quarkus</title>
      <author>Jo√£o Victor Martins</author>
      <pubDate>Wed, 26 May 2021 18:18:09 +0000</pubDate>
      <link>https://dev.to/j_a_o_v_c_t_r/integrating-scylla-db-with-quarkus-519d</link>
      <guid>https://dev.to/j_a_o_v_c_t_r/integrating-scylla-db-with-quarkus-519d</guid>
      <description>&lt;p&gt;Hello, everyone!! In the previous post, we talk about Scylla DB and some characteristics of the database. For those who have not seen it yet, this is the link &lt;a href="https://dev.to/j_a_o_v_c_t_r/working-with-scylla-database-3al9"&gt;https://dev.to/j_a_o_v_c_t_r/working-with-scylla-database-3al9&lt;/a&gt;. Today I intend to integrate the database with an application Java and to help us I decided to use Java + Quarkus. Quarkus is a Kubernetes Native Java stack tailored for OpenJDK HotSpot and GraalVM, crafted from the best-of-breed Java libraries and standards. It is known as Supersonic Subatomic java because it is fast and small. To those interested, the link will be at the final of the post. Ok, now that we know our goal, let's start!!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creating-the-application"&gt;
  &lt;/a&gt;
  Creating the application
&lt;/h1&gt;

&lt;p&gt;The first step is to create the application and for that, Quarkus gives us a simple interface that we can access at this link &lt;a href="https://code.quarkus.io/"&gt;https://code.quarkus.io/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CbtYqFQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0ptpmkx367vihz2crwy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CbtYqFQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0ptpmkx367vihz2crwy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On this page we put information like &lt;em&gt;groupId&lt;/em&gt;, &lt;em&gt;artifactId&lt;/em&gt;, build tools, and select which dependencies we will use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tzKNU40y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avr8dypohiqj95jtogzp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tzKNU40y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avr8dypohiqj95jtogzp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's know about the selected dependencies&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Datastack Apache Cassandra client: Driver to connect to Apache Cassandra databases. How we saw, Scylla DB is based on Cassandra, so we can use the same client.&lt;/li&gt;
&lt;li&gt;RESTEasy JSON-B: JSON-B serialization support for RESTEasy. We will use endpoints to interact with our application&lt;/li&gt;
&lt;li&gt;RESTEasy Mutiny: Mutiny support for RESTEasy server. If we want to call async resources (We don't use them in this example).&lt;/li&gt;
&lt;li&gt;SmallRye Health: Monitor service health.&lt;/li&gt;
&lt;li&gt;Micrometer Registry Prometheus: Enable Prometheus support for micrometer, so with this dependency, we can collect metrics for our application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, now we can generate our application in the Generate your application button. &lt;/p&gt;

&lt;p&gt;Let's import the application in our &lt;em&gt;IDE&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Quarkus gives us a &lt;em&gt;GET&lt;/em&gt; resource for testing, but we are not going to use it so we can delete it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--msTM1R2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3p8bgri3rqgxqr78h24n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--msTM1R2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3p8bgri3rqgxqr78h24n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want test,  is enough execute mvn package quarkus:dev command, wait application is up and call &lt;a href="http://localhost:8080/hello-reasteasy"&gt;http://localhost:8080/hello-reasteasy&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we can create our entity. &lt;em&gt;Entity&lt;/em&gt; class is a model for objects that we will work on. This object will be &lt;code&gt;Car&lt;/code&gt;. In the name of the class will use the annotation &lt;code&gt;@Entity&lt;/code&gt;. &lt;em&gt;The name of the class should be the same as the table of database&lt;/em&gt;. The object will have the fields &lt;em&gt;id&lt;/em&gt;, &lt;em&gt;brand&lt;/em&gt;, &lt;em&gt;color&lt;/em&gt;, and &lt;em&gt;model&lt;/em&gt;. How we saw in the previous post, the &lt;em&gt;id&lt;/em&gt; field is a &lt;em&gt;primary key&lt;/em&gt;, so we will use the annotation &lt;code&gt;@PartitionKey&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In the next post, I will talk about Scylla Primary Key and the differences in relation the relational databases&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lK7PIz9y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vuatj8eqk4hwec6yqn46.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lK7PIz9y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vuatj8eqk4hwec6yqn46.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How we can see, the class does not compile, because we need to add some dependencies in our &lt;code&gt;pom.xml&lt;/code&gt;. This dependencies are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;com.datastax.oss:java-driver-core: A modern, feature-rich, and highly tunable Java client library for Apache Cassandra¬Æ (2.1+) and DataStax Enterprise (4.7+), and DataStax Astra, using exclusively Cassandra's binary protocol and Cassandra Query Language (CQL) v3.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;com.datastax.oss:java-driver-mapper-runtime: The mapper generates the boilerplate to execute queries and convert the results into application-level objects.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;The dependencies can be downloaded in &lt;a href="https://mvnrepository.com/"&gt;https://mvnrepository.com/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And we need to change the original &lt;em&gt;maven-compiler-plugin&lt;/em&gt; in &lt;code&gt;pom.xml&lt;/code&gt; for the below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;plugin&amp;gt;
                &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;3.8.0&amp;lt;/version&amp;gt;
                &amp;lt;configuration&amp;gt;
                    &amp;lt;source&amp;gt;${java.version}&amp;lt;/source&amp;gt;
                    &amp;lt;target&amp;gt;${java.version}&amp;lt;/target&amp;gt;
                    &amp;lt;annotationProcessorPaths&amp;gt;
                        &amp;lt;path&amp;gt;
                            &amp;lt;groupId&amp;gt;com.datastax.oss.quarkus&amp;lt;/groupId&amp;gt;
                            &amp;lt;artifactId&amp;gt;cassandra-quarkus-mapper-processor&amp;lt;/artifactId&amp;gt;
                            &amp;lt;version&amp;gt;1.0.1&amp;lt;/version&amp;gt;
                        &amp;lt;/path&amp;gt;
                    &amp;lt;/annotationProcessorPaths&amp;gt;
                &amp;lt;/configuration&amp;gt;
            &amp;lt;/plugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is necessary because Quarkus need know the annotations in compile time for injecting the resources like &lt;em&gt;DAO&lt;/em&gt; and others. We'll see that soon.&lt;/p&gt;

&lt;p&gt;After including the dependencies in &lt;code&gt;pom.xml&lt;/code&gt;, we can import annotations and include &lt;em&gt;constructors&lt;/em&gt; and &lt;em&gt;getters/setters&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W3pWnOHk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9o2fec5mpu49f12xk4h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W3pWnOHk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9o2fec5mpu49f12xk4h.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;rest of the methods omitted!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The next step is to create the &lt;em&gt;Data Access Object&lt;/em&gt; or more commonly &lt;em&gt;DAO&lt;/em&gt;. Is enough for this post two methods, one &lt;em&gt;select&lt;/em&gt; method and one &lt;em&gt;insert&lt;/em&gt; method.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sOHfMU86--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kok3sscjwqrdgbnva36p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sOHfMU86--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kok3sscjwqrdgbnva36p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The annotation &lt;code&gt;@Dao&lt;/code&gt; comes from the DataStax Object Mapper, which will also automatically generate an implementation of this &lt;em&gt;interface&lt;/em&gt; for us. &lt;code&gt;@Insert&lt;/code&gt; and &lt;code&gt;@Select&lt;/code&gt; generate an implementation of methods. Note also the special return type of the &lt;code&gt;findAll&lt;/code&gt; method, &lt;code&gt;PagingIterable&lt;/code&gt;: it‚Äôs the base type of result sets returned by the driver. &lt;/p&gt;

&lt;p&gt;Now let's create a &lt;em&gt;mapper&lt;/em&gt; that is responsible for constructing instances of &lt;em&gt;DAOs&lt;/em&gt;. In this case, will create an instance of &lt;code&gt;CarDAO&lt;/code&gt;. The name will be &lt;code&gt;CarMapper&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OwyzU-_n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2x3ga94wvvy61312s2gf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OwyzU-_n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2x3ga94wvvy61312s2gf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To interact with the saved information or save new information in the database, we will create a &lt;em&gt;REST&lt;/em&gt; endpoint and for that will create a &lt;code&gt;CarResource&lt;/code&gt; class. For our example, we will need a &lt;em&gt;POST&lt;/em&gt; and a &lt;em&gt;GET&lt;/em&gt; method.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9DqPyqOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtp90fsna29s34j0tpif.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9DqPyqOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtp90fsna29s34j0tpif.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In relation to the image above, let's talk about some details. The resource for access the application will be &lt;code&gt;cars&lt;/code&gt;. We should send JSON for the application and consume JSON of the application. To save or retrieve information, we need access to the database, so for that, we inject the &lt;code&gt;CarDAO&lt;/code&gt; in &lt;code&gt;CarResource&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The last step will be to configure the information of the database in the application. For that, we will use &lt;code&gt;application.properties&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a3l4wBIT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iody4zjp0tm1dov2f5v3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a3l4wBIT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iody4zjp0tm1dov2f5v3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And we can see the information above when we up our node Scylla. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h3w137yH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9160elcr75s6p500selq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h3w137yH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9160elcr75s6p500selq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's start the application using &lt;code&gt;mvn package quarkus:dev&lt;/code&gt; command&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wMwtZPUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/carcsm794k55j0j8g192.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wMwtZPUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/carcsm794k55j0j8g192.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And to use our browser to do a request for the application &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--utOhpzKh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jr0t5l3t1xm9kncebl8n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--utOhpzKh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jr0t5l3t1xm9kncebl8n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Saving information&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YA9LoL4h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cypr8u3xy47mki7n22fr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YA9LoL4h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cypr8u3xy47mki7n22fr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;New saved information&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YLrcz3OK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0rr7lgu4m10vpflmnjg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YLrcz3OK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0rr7lgu4m10vpflmnjg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tested requests, our application is complete and functional. We can now explore more features.&lt;/p&gt;

&lt;p&gt;The reason we put in our &lt;code&gt;pom.xml&lt;/code&gt; the &lt;code&gt;quarkus-smallrye-health&lt;/code&gt; dependency is automatically add a readiness health check to validate the connection to the Scylla cluster. We can access &lt;a href="http://localhost:8080/q/health/ready"&gt;http://localhost:8080/q/health/ready&lt;/a&gt; to know if our connection is healthy or not.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v5NFzVuP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61mxej9evkksd91s8bmi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v5NFzVuP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61mxej9evkksd91s8bmi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I will pause the docker that is running ScyllaDB&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fT6VeaLx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6kiq51j317bxy541i1aa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fT6VeaLx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6kiq51j317bxy541i1aa.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And test connection again&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X43rJzXP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y78r8r4oi3dcawq7x2xz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X43rJzXP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y78r8r4oi3dcawq7x2xz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can see the metrics of Scylla session and about individual Scylla nodes and for this is enough add a property &lt;code&gt;quarkus.cassandra.metrics.enabled=true&lt;/code&gt; in our &lt;code&gt;application.properties&lt;/code&gt; what we already did. To see metrics we can access &lt;a href="http://localhost:8080/metrics"&gt;http://localhost:8080/metrics&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qHhak-8C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7s48ns07ledu4m21fxb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qHhak-8C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7s48ns07ledu4m21fxb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;My intention with this post is to show how we can integrate an application Java with Scylla DB and how easy that is using Quarkus. Some details can explorer yet, like primary key, but we can see this in the next post. I hope that you liked it and any doubt, critics, or suggestions tell me. Will be a pleasure to help you.&lt;/p&gt;

&lt;p&gt;References&lt;br&gt;
&lt;a href="https://quarkus.io/"&gt;https://quarkus.io/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://quarkus.io/guides/cassandra"&gt;https://quarkus.io/guides/cassandra&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>quarkus</category>
      <category>scylladb</category>
      <category>database</category>
    </item>
    <item>
      <title>Learn SVG animation while saving the planet üåç</title>
      <author>Francesco Pigozzi</author>
      <pubDate>Wed, 26 May 2021 18:03:49 +0000</pubDate>
      <link>https://dev.to/pigozzifr/learn-svg-animation-while-saving-the-planet-234k</link>
      <guid>https://dev.to/pigozzifr/learn-svg-animation-while-saving-the-planet-234k</guid>
      <description>&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@ralphkayden?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Ralph (Ravi) Kayden&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/planet-earth?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;I made &lt;a href="https://savethebees.cloud"&gt;this&lt;/a&gt; landing page and wanted to make it cool so I used SVG's &lt;code&gt;animateMotion&lt;/code&gt;, docs &lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/rotate#examples"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-story"&gt;
  &lt;/a&gt;
  The story
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;If you find stories a boring stuff, skip this section&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It was a day like many others in &lt;a href="https://www.cubbit.io/"&gt;Cubbit&lt;/a&gt; and suddenly a message sent to the whole company saying that we have started an internal referral program üéâ&lt;/p&gt;

&lt;p&gt;What a perfect opportunity to finally build something I had in mind for quite a long time: a landing page with animated bees, Cubbit's symbol, and strong emphatic messages with the goal to spread our mission as much as possible&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Also, the best opportunity for everyone to get access to a nice discount code&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creative-process"&gt;
  &lt;/a&gt;
  Creative process
&lt;/h2&gt;

&lt;p&gt;A wise friend once said: &lt;em&gt;programmers, when they have an idea, start coding immediately and this is the worst error you could make!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RDg73bu1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hhw72b55ty7crcyolgr0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RDg73bu1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hhw72b55ty7crcyolgr0.png" alt="Untitled"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;So, a huge step back and we are ready to start designing something and this is the result of the first draft of a sketched minimal bee&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LbToDIA9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4eyn7e429stej8kzsnn5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LbToDIA9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4eyn7e429stej8kzsnn5.png" alt="OldBee_(1)"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Not very interesting uh? Asking feedback is the best way for you to come to a better solution and so I asked to my girlfriend.&lt;/p&gt;

&lt;p&gt;This is the final result&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--724ROPB1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/22yogtegb8dubxshenuv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--724ROPB1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/22yogtegb8dubxshenuv.png" alt="Bee"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Much better, right? &lt;strong&gt;Lovely&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-now-its-time-to-start-coding-right-wrong"&gt;
  &lt;/a&gt;
  So, now it‚Äôs time to start coding, right? Wrong
&lt;/h3&gt;

&lt;p&gt;First of all, you wouldn't go far with just a bunch of bees flying around and..&lt;/p&gt;

&lt;p&gt;Wait, HOW THE HECK DO I MAKE THEM FLY? Ok, I will think about this later&lt;/p&gt;

&lt;p&gt;Now it's time to design some interfaces, maybe a story line and, why not, a prototype!&lt;/p&gt;

&lt;p&gt;The very first frame looked something like this, a little bit boring right? I know, but ideas couldn't stop coming!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yqdyae7X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qpm65lifervsw9jx1yt7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yqdyae7X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qpm65lifervsw9jx1yt7.png" alt="Frame_28"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;And this is the evolution&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AHqCaIFO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mi1amkysmh9hr11jx0fz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AHqCaIFO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mi1amkysmh9hr11jx0fz.png" alt="Frame_27"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Way better, now the user won't pay much attention to the bees' details and will focus on what I have to say: time for some text!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cYQtPwps--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kehqq4fnbtpszclkkjgl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cYQtPwps--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kehqq4fnbtpszclkkjgl.png" alt="Frame_29"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This is good already but looks a little too flat, without any depth and some bees might interfere with the focus on the text, even if they are blurred.&lt;/p&gt;

&lt;p&gt;The same wise friend I was talking about before gave me a cool &lt;em&gt;trick&lt;/em&gt; that designers adopt when it comes to typography and readability&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Again, some feedback to the rescue!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RBa3F2wn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zf5ttodomsl72njjqviu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RBa3F2wn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zf5ttodomsl72njjqviu.png" alt="Frame_1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--deceIEFX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7mpmtvy4fn01gggs8m4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--deceIEFX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7mpmtvy4fn01gggs8m4.png" alt="Frame_2"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Shadows are magical&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;These screens are already the final result that you can enjoy on the live page&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#coding-finally"&gt;
  &lt;/a&gt;
  Coding, finally!
&lt;/h2&gt;

&lt;p&gt;Just to give you some small details, this site is built with &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;, &lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt;, &lt;a href="https://styled-components.com/"&gt;styled-components&lt;/a&gt;, &lt;a href="https://reactcommunity.org/react-transition-group/"&gt;React Transition Group&lt;/a&gt; and a lot of sense of humor. It's hosted on &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt;, of course.&lt;/p&gt;

&lt;p&gt;Ok, building the interfaces, preparing all the styles and scaffolding the codebase was the simple part and now come the troubles&lt;/p&gt;

&lt;p&gt;Quoting myself&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;HOW THE HECK DO I MAKE THEM FLY?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And this has been the longest and toughest challenge of this project&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-transform"&gt;
  &lt;/a&gt;
  CSS transform
&lt;/h3&gt;

&lt;p&gt;Ok, the very first thing I tried was to wrap everything into multiple transformed containers with some properties like &lt;code&gt;translate3d&lt;/code&gt; and &lt;code&gt;rotate3d&lt;/code&gt; ; &lt;em&gt;the &lt;code&gt;3d&lt;/code&gt; part is necessary to access the hardware acceleration&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And it started to work fine until I decided to animate the bees automatically, with some sort of algorithm and random numbers: a complete failure&lt;/p&gt;

&lt;p&gt;When you deal with CSS and Javascript at the same time, you can't benefit from both with a solution that involves both of them: my problem was the huge load of computations that the main thread had to handle in order to find the next possible point for a bee to move to&lt;/p&gt;

&lt;p&gt;You can already understand that this solutions doesn't scale up very well&lt;/p&gt;

&lt;p&gt;Thank you, next!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#svg-to-the-rescue"&gt;
  &lt;/a&gt;
  SVG to the rescue!
&lt;/h3&gt;

&lt;p&gt;So, after the previous failure I started wondering: &lt;em&gt;isn't there a way to smoothly animate an SVG without using any JS and/or CSS?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After googling a bit (ok I admit it, after googling a lot), I stumbled across this documentation on our beloved MDN: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/rotate#examples"&gt;https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/rotate#examples&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And everything started to be magical and possible again üåà&lt;/p&gt;

&lt;p&gt;This article represents the exact solution I was looking for!&lt;/p&gt;

&lt;p&gt;The problem is not to move the bees in a random set of points generated at runtime; instead, you should focus on a set of already defined paths and let the SVG magic do the rest üßô‚Äç‚ôÇÔ∏è&lt;/p&gt;

&lt;p&gt;This is the export of the SVG of the bee with the path&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uxaorG1J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sx52wuajr75fn4ifzpsq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uxaorG1J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sx52wuajr75fn4ifzpsq.png" alt="BeeAndPath"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-final-code-of-the-bee"&gt;
  &lt;/a&gt;
  The final code of the Bee
&lt;/h3&gt;

&lt;p&gt;I won't make it any longer, here you can find the resulting code of a React component, with CSS transforms, SVG elements and animations&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;keyframes&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vibration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;keyframes&lt;/span&gt;&lt;span class="s2"&gt;`
    from,
    to {
    transform: translate3d(0, 0, 0);
    }
    10%,
    30%,
    50%,
    70%,
    90% {
        transform: translate3d(-3px, 0, 0);
    }
    20%,
    40%,
    60%,
    80% {
        transform: translate3d(1px, 0, 0);
    }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;VibratingWings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="s2"&gt;`
    animation: 1s &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;vibration&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; infinite;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;TransformProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;y&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BeeSVG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TransformProps&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rotation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;absolute&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`translate3d(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px, 0px) rotate3d(0, 0, 1, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;deg)`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}))&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;TransformProps&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Bee&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;transformProps&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BeeSVG&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;transformProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"422"&lt;/span&gt;
            &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"552"&lt;/span&gt;
            &lt;span class="na"&gt;viewBox&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0 0 422 552"&lt;/span&gt;
            &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt;
            &lt;span class="na"&gt;xmlns&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;g&lt;/span&gt; &lt;span class="na"&gt;clipPath&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"url(#clip0)"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;
                    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"motionPath"&lt;/span&gt;
                    &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"M80.4017 146.011C80.4018 1.26631 376.903 53.5395 339.785 146.011C302.666 238.483 69.0275 297.382 80.4017 402.125C91.776 506.868 339.784 543.688 339.785 402.125C339.785 260.562 80.4017 290.757 80.4017 146.011Z"&lt;/span&gt;
                    &lt;span class="na"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"black"&lt;/span&gt;
                    &lt;span class="na"&gt;strokeOpacity&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;g&lt;/span&gt; &lt;span class="na"&gt;clipPath&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"url(#clip1)"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"M0 13L3 11.268L3 14.7321L0 13Z"&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#434141"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;mask&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mask0"&lt;/span&gt; &lt;span class="na"&gt;mask&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"alpha"&lt;/span&gt; &lt;span class="na"&gt;maskUnits&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"userSpaceOnUse"&lt;/span&gt; &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"5"&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"16"&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"16"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;circle&lt;/span&gt; &lt;span class="na"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"10"&lt;/span&gt; &lt;span class="na"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"13"&lt;/span&gt; &lt;span class="na"&gt;r&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"8"&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#E6CC74"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;g&lt;/span&gt; &lt;span class="na"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"url(#mask0)"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"M10 21C5.58172 21 2 17.4183 2 13C2 8.58172 5.58172 5 10 5C14.4183 5 18 8.58172 18 13C18 17.4183 14.4183 21 10 21Z"&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#E6CC74"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"M8 -3L8 29H5L5 -3L8 -3Z"&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#434141"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"M14 -3L14 29H11L11 -3L14 -3Z"&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#434141"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;g&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;VibratingWings&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"M10.4645 3.53551C12.0266 5.09761 12.0266 7.63027 10.4645 9.19236C8.90238 10.7545 6.36972 10.7545 4.80762 9.19236C3.24552 7.63027 3.24552 5.09761 4.80762 3.53551C6.36972 1.97341 8.90238 1.97341 10.4645 3.53551Z"&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#B5D2FF"&lt;/span&gt; &lt;span class="na"&gt;fillOpacity&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0.6"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"M11.1716 2.8284C12.7337 4.3905 12.7337 6.92316 11.1716 8.48526C9.60953 10.0474 7.07687 10.0474 5.51477 8.48526C3.95268 6.92316 3.95268 4.3905 5.51477 2.8284C7.07687 1.26631 9.60953 1.26631 11.1716 2.8284Z"&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#B5D2FF"&lt;/span&gt; &lt;span class="na"&gt;fillOpacity&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0.8"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"M10.4645 22.4853C8.90238 24.0474 6.36972 24.0474 4.80762 22.4853C3.24552 20.9232 3.24552 18.3906 4.80762 16.8285C6.36972 15.2664 8.90238 15.2664 10.4645 16.8285C12.0266 18.3906 12.0266 20.9232 10.4645 22.4853Z"&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#B5D2FF"&lt;/span&gt; &lt;span class="na"&gt;fillOpacity&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0.6"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"M11.1716 23.1924C9.60947 24.7545 7.07681 24.7545 5.51471 23.1924C3.95262 21.6303 3.95262 19.0976 5.51471 17.5355C7.07681 15.9734 9.60947 15.9734 11.1716 17.5355C12.7337 19.0976 12.7337 21.6303 11.1716 23.1924Z"&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#B5D2FF"&lt;/span&gt; &lt;span class="na"&gt;fillOpacity&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0.8"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;VibratingWings&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"M16.5 11C16.5 11 19.25 10.5 20 10C20.75 9.50002 21 8.00002 21 8.00002"&lt;/span&gt; &lt;span class="na"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#434141"&lt;/span&gt; &lt;span class="na"&gt;strokeWidth&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0.2"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"M16.5 15C16.5 15 19.25 15.5 20 16C20.75 16.5 21 18 21 18"&lt;/span&gt; &lt;span class="na"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#434141"&lt;/span&gt; &lt;span class="na"&gt;strokeWidth&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0.2"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

                    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/rotate */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;animateMotion&lt;/span&gt; &lt;span class="na"&gt;dur&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;s`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;repeatCount&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"indefinite"&lt;/span&gt; &lt;span class="na"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"auto"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;mpath&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#motionPath"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;animateMotion&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;g&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;g&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;defs&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;clipPath&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"clip0"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;rect&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"422"&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"552"&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"white"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;clipPath&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;clipPath&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"clip1"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;rect&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"26.0208"&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"22"&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"white"&lt;/span&gt; &lt;span class="na"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"translate(22) rotate(90)"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;clipPath&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;defs&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;BeeSVG&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Bee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;BeeSVG&lt;/code&gt; is the wrapper around the SVG and it accepts some props in order to make the entire SVG transformable; &lt;em&gt;in order to place the bees in a random position and rotation inside the page&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;VibratingWings&lt;/code&gt; is a styled &lt;code&gt;g&lt;/code&gt; element that lets the wings simulate a vibration&lt;/p&gt;

&lt;p&gt;&lt;code&gt;animateMotion&lt;/code&gt; with &lt;code&gt;rotate="auto"&lt;/code&gt; is my best friend for this project&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#considerations"&gt;
  &lt;/a&gt;
  Considerations
&lt;/h3&gt;

&lt;p&gt;Ok, I have to admit that I like a lot this final solution but unfortunately it's not performing very well neither; even though it runs at 60fps on average devices&lt;/p&gt;

&lt;p&gt;I think that in the next releases I'll think about moving to WebGL in order to benefit from real hardware acceleration&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now-its-your-turn"&gt;
  &lt;/a&gt;
  Now it's your turn!
&lt;/h2&gt;

&lt;p&gt;Let me know what you think about this article and, of course, don't forget to visit my, and Cubbit's, pages about the real problem: &lt;strong&gt;our world is suffering and the bees are dying&lt;/strong&gt; üêùüåé&lt;/p&gt;

&lt;p&gt;Don't let this happen, &lt;a href="https://savethebees.cloud/"&gt;take action&lt;/a&gt;! Whatever you can do is enough, you don't need to make anything big!&lt;/p&gt;

&lt;p&gt;Start with the simple things, like me!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ill-bee-around"&gt;
  &lt;/a&gt;
  I'll bee around
&lt;/h2&gt;

&lt;p&gt;Hope that you enjoyed this little story and have learned something new!&lt;/p&gt;

&lt;p&gt;Leave a ü¶Ñ, if so, and a üêù in the comments!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>showdev</category>
      <category>frontend</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Custom colors in React-Native</title>
      <author>SAQ</author>
      <pubDate>Wed, 26 May 2021 17:54:40 +0000</pubDate>
      <link>https://dev.to/swair_aq/custom-colors-in-react-native-19b5</link>
      <guid>https://dev.to/swair_aq/custom-colors-in-react-native-19b5</guid>
      <description>&lt;h1&gt;
  &lt;a href="#popup-your-apps-brand"&gt;
  &lt;/a&gt;
  Pop-up your app‚Äôs brand.
&lt;/h1&gt;

&lt;p&gt;Obviously, you‚Äôll be using multiple colors in your app but the question is how to make color usage effective and optimized.&lt;/p&gt;

&lt;p&gt;We‚Äôll be quickly adding colors to our react-native application.&lt;br&gt;
First thing first define hierarchy of your app and know where you want your color file to be, I like to keep in utilities/config folder and name it as Color.js&lt;/p&gt;

&lt;p&gt;Now open your newly made file and start defining your colors.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Colors =
{}
export default Colors;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We made a simple ‚ÄúColors‚Äù object and exported it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Colors =
{
AQUA_GREEN: '#1A5276',
RED: '#B03A2E',
ORANGE: '#DC7633',
PURPLE: '#8E44AD',
GRAY: '#566573',
}
export default Colors;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can put Hex, rgba, rgb whatever sails your boat, I like to work mostly with hex unless need to control opacity.&lt;/p&gt;

&lt;p&gt;Now save it and go back to your App.js or wherever:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Colors from './src/utilites/Color'
after importing Colors you can use as you please..
&amp;lt;Text style={{
backgroundColor: Colors.AQUA_GREEN,
color: Colors.ORANGE
}}&amp;gt;
{HELLO_WORLD}
&amp;lt;/Text&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&amp;amp; that‚Äôs practically it.&lt;br&gt;
The main advantage of using colors in separate files that it is: &lt;/p&gt;

&lt;ol&gt;
1- Maintainable.
2- Reusable.
3- Changeable.
&lt;/ol&gt;

&lt;p&gt;Like say, if you want to change the shade of red a tone you won‚Äôt have to go in each file changing it, you can easily change it in your file &amp;amp; it‚Äôll be applied to whole app.&lt;br&gt;
&lt;/p&gt;
&lt;center&gt; ** Automated ** &lt;/center&gt;
&lt;br&gt;
Kidding lol, anyway, I have this series of easy customization things for your react-native app. If you want me to cover anything in this series do let me know in comments below.&lt;br&gt;
Until next time!

&lt;p&gt;P.S: Drop a heart, I just like that notification. üëá&lt;/p&gt;

&lt;p&gt;Here's a link to github repo:&lt;br&gt;
&lt;a href="https://github.com/swairAQ/CustomizationReactNative"&gt;https://github.com/swairAQ/CustomizationReactNative&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Youtube tutorial:&lt;br&gt;
&lt;a href="https://youtu.be/NEX_eQR-mEY"&gt;https://youtu.be/NEX_eQR-mEY&lt;/a&gt;&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>customization</category>
      <category>javascript</category>
      <category>colors</category>
    </item>
    <item>
      <title>Quick Tip: Formatting Elixir templates</title>
      <author>Murphy Randle</author>
      <pubDate>Wed, 26 May 2021 17:51:29 +0000</pubDate>
      <link>https://dev.to/mrmurphy/quick-tip-formatting-elixir-templates-hed</link>
      <guid>https://dev.to/mrmurphy/quick-tip-formatting-elixir-templates-hed</guid>
      <description>&lt;p&gt;Finding a VS Code plugin to automatically format my Elixir templates (.eex, .leex) has been some trouble. The Elixir Language Server extension doesn't do this by default. I've been using "Beautify" up until now, because at least it properly formats HTML. However, it'd leave Elixir's special forms (if, for, etc...) completely un-indented:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UAxwOtnI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlywmhzwu6kdrl14bk8q.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UAxwOtnI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlywmhzwu6kdrl14bk8q.jpeg" alt="Un-indented code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reading through this issue, it's apparant that I'm not the only one who wants some indenting from a formatter: &lt;a href="https://github.com/timmhirsens/vscode-elixir/issues/129"&gt;https://github.com/timmhirsens/vscode-elixir/issues/129&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This comment solved it for me: &lt;a href="https://github.com/timmhirsens/vscode-elixir/issues/129#issuecomment-653891686"&gt;https://github.com/timmhirsens/vscode-elixir/issues/129#issuecomment-653891686&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After installing &lt;a href="https://marketplace.visualstudio.com/items?itemName=ouven.vscode-yab-for-eex-leex"&gt;https://marketplace.visualstudio.com/items?itemName=ouven.vscode-yab-for-eex-leex&lt;/a&gt; and the &lt;code&gt;htmlbeautifier&lt;/code&gt; gem, I configured the default formatting for my .leex files by bringing up the command palette, typing "format document with", then choosing "Configure Default Formatter...", and then selecting "YAB for eex/leex".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Adiu60RQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rz0d41cs8n4a2i9sqskk.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Adiu60RQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rz0d41cs8n4a2i9sqskk.jpeg" alt="Command palette choosing new default formatter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, after a file save, my indentation comes back! Well, mostly. Sadly there's no indentation support for &lt;code&gt;form_for/3&lt;/code&gt;, since it's just a variable assignment folled at the end by a &lt;code&gt;&amp;lt;/form&amp;gt;&lt;/code&gt; tag, but having indentation for the rest is a huge help.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cHOXrqt4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vglq659m9ea2gfsx8f0p.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cHOXrqt4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vglq659m9ea2gfsx8f0p.jpeg" alt="Indentation returned"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Building a Distributed Turn-Based Game System in Elixir</title>
      <author>Fly.io</author>
      <pubDate>Wed, 26 May 2021 17:38:25 +0000</pubDate>
      <link>https://dev.to/superfly/building-a-distributed-turn-based-game-system-in-elixir-24p1</link>
      <guid>https://dev.to/superfly/building-a-distributed-turn-based-game-system-in-elixir-24p1</guid>
      <description>&lt;p&gt;One of the best things about building web applications in Elixir is LiveView, the &lt;a href="https://www.phoenixframework.org/"&gt;Phoenix Framework&lt;/a&gt; feature that makes it easy to create live and responsive web pages without all the layers people normally build.&lt;/p&gt;

&lt;p&gt;Many great &lt;a href="https://github.com/phoenixframework/phoenix_live_view"&gt;Phoenix LiveView&lt;/a&gt; examples exist. They often show the ease and power of LiveView but stop at multiple browsers talking to a single web server. I wanted to go further and create a fully clustered, globally distributed, privately networked, secure application. What's more, I wanted to have fun doing it.&lt;/p&gt;

&lt;p&gt;So I set out to see if I could create a fully distributed, clustered, privately networked, global game server system. &lt;strong&gt;Spoiler Alert: I did&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-didnt-have-to-build"&gt;
  &lt;/a&gt;
  What I didn't have to build
&lt;/h2&gt;

&lt;p&gt;What I find remarkable is what I &lt;strong&gt;didn't&lt;/strong&gt; need to build.&lt;/p&gt;

&lt;p&gt;I &lt;strong&gt;didn't&lt;/strong&gt; build a Javascript front end using something like React.js or Vue.js. That is the typical approach. Building a JS front-end means I need JS components, a front-end router, a way to model the state in the browser, a way to transfer player actions to the server and a way to receive state updates from the server.&lt;/p&gt;

&lt;p&gt;On the server, I &lt;strong&gt;didn't&lt;/strong&gt; build an API. Typically that would be REST or GraphQL with a JSON structure for transferring data to and from the front-end.&lt;/p&gt;

&lt;p&gt;I &lt;strong&gt;didn't&lt;/strong&gt; need other external systems like Amazon SQS, Kafka, or even just Redis to pass state between servers. This means the entire system requires less cross-technology knowledge or specialized skills to build and maintain it. I used &lt;code&gt;Phoenix.PubSub&lt;/code&gt; which is built on technology already in Elixir's VM, called the BEAM. I used the Horde library to provide a distributed process registry for finding and interacting with GameServers.&lt;/p&gt;

&lt;p&gt;As for &lt;a href="https://fly.io/docs/reference/privatenetwork"&gt;Fly.io's WireGuard connected private network&lt;/a&gt; between &lt;a href="https://fly.io/docs/reference/regions/"&gt;geographically distant regions&lt;/a&gt; and data centers? I don't even know how I would have done that in AWS, which is why I've always given up on the idea.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-did-build"&gt;
  &lt;/a&gt;
  What I did build
&lt;/h2&gt;

&lt;p&gt;What I built was just a proof of concept, but I'm surprised at how it came together. I ended up with a platform that can host many different types of games, all of which:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Can be multi-player&lt;/li&gt;
&lt;li&gt;Offer a &lt;a href="https://en.wikipedia.org/wiki/Jackbox_Games"&gt;Jackbox&lt;/a&gt;-style 4-letter game code system&lt;/li&gt;
&lt;li&gt;Have on-demand game and match creation&lt;/li&gt;
&lt;li&gt;With a fast, response UI&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, just one little extra detail: the platform supports multiple connected servers operating together in clusters. Elixir for the win!&lt;/p&gt;

&lt;p&gt;I created this as an open source project on Github, so you can check it out yourself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/fly-apps/tictac"&gt;https://github.com/fly-apps/tictac&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technology"&gt;
  &lt;/a&gt;
  Technology
&lt;/h2&gt;

&lt;p&gt;I've worked with enough companies and teams to imagine several different approaches to build a system like this. Those approaches would all require large multi-disciplinary teams like a front-end JS team, a backend team, a DevOps team, and more. In contrast, I set out to do this by myself, in my spare time, and with a whole lot of "life" happening too.&lt;/p&gt;

&lt;p&gt;Here's what I chose to use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://elixir-lang.org/"&gt;Elixir programming language&lt;/a&gt; ‚Äì A dynamic, functional language for building scalable and maintainable applications.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.phoenixframework.org/"&gt;Phoenix Framework&lt;/a&gt; ‚Äì Elixir's primary web framework&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/phoenixframework/phoenix_live_view"&gt;Phoenix LiveView&lt;/a&gt; ‚Äì Rich, real-time user experiences with server-rendered HTML delivered by websockets&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bitwalker/libcluster"&gt;libcluster&lt;/a&gt; ‚Äì Automatic cluster formation/healing for Elixir applications.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/derekkraan/horde"&gt;Horde&lt;/a&gt; ‚Äì Elixir library that provides a distributed and supervised process registry.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://fly.io/"&gt;Fly.io&lt;/a&gt; ‚Äì Hosting platform that enables private networked connections and multi-region support.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#application-architecture"&gt;
  &lt;/a&gt;
  Application Architecture
&lt;/h2&gt;

&lt;p&gt;There are many guides to &lt;a href="https://www.google.com/search?hl=en&amp;amp;q=getting%20started%20with%20phoenix%20liveview"&gt;getting started with LiveView&lt;/a&gt;, I'm not focusing on that here. However, for context, this demonstrates the application architecture when running on a local machine.&lt;/p&gt;

&lt;p&gt;The "ABCD" in the graphic is a running game identified by the 4-letter code "ABCD".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oTcQWh26--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://fly.io/public/images/tictac-single-node-game-state-and-gen-server.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oTcQWh26--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://fly.io/public/images/tictac-single-node-game-state-and-gen-server.png" alt="local system architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's walk it through.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A player uses a web browser to view the game board. The player clicks to make a move.&lt;/li&gt;
&lt;li&gt;The browser click triggers an event in the player's LiveView. There is a bi-directional websocket connection from the browser to LiveView.&lt;/li&gt;
&lt;li&gt;The LiveView process sends a message to the game server for the player's move.&lt;/li&gt;
&lt;li&gt;The GameServer uses &lt;code&gt;Phoenix.PubSub&lt;/code&gt; to publish the updated state of game ABCD.&lt;/li&gt;
&lt;li&gt;The player's LiveView is subscribed to notifications for any updates to game ABCD. The LiveView receives the new game state. This automatically triggers LiveView to re-render the game immediately pushing the UI changes out to the player's browser.&lt;/li&gt;
&lt;li&gt;All connected players see the new state of the board and game.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#we-need-a-game"&gt;
  &lt;/a&gt;
  We need a game
&lt;/h2&gt;

&lt;p&gt;I needed a simple game to play and model for this game system. I chose Tic-Tac-Toe. Why?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's simple to understand and play.&lt;/li&gt;
&lt;li&gt;Easy to model.&lt;/li&gt;
&lt;li&gt;Doesn't bog down the project with designing a game.&lt;/li&gt;
&lt;li&gt;Quick to play through and test it being "over".&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I want to emphasize that this system can be used to build &lt;strong&gt;many&lt;/strong&gt; turn-based, multi-user games! This simple Tic-Tac-Toe game covers all of the basics we will need. Besides, &lt;a href="https://www.youtube.com/watch?v=xHObMqUdBa8"&gt;Tic-Tac-Toe was even made into a TV Show&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;This is what the game looks like with 2 players.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hnduopNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://fly.io/public/images/tictac_local_playing.gif%3Fcard" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hnduopNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://fly.io/public/images/tictac_local_playing.gif%3Fcard" alt="animated gif demoing game play"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The game system works great locally. Let's get it deployed!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hosting-on-flyio"&gt;
  &lt;/a&gt;
  Hosting on Fly.io
&lt;/h2&gt;

&lt;p&gt;Following the &lt;a href="https://fly.io/docs/getting-started/elixir/"&gt;Fly.io Getting Started Guide for Elixir&lt;/a&gt;, I created a Dockerfile to generate a release for my application. Check out the repo here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/fly-apps/tictac"&gt;https://github.com/fly-apps/tictac&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The README file outlines both how to run it locally and deploy it globally on Fly.io.&lt;/p&gt;

&lt;p&gt;What is special about hosting it on Fly.io? Fly makes it easy to deploy a server geographically closer to the users I want to reach. When a user goes to my website, they are directed to &lt;strong&gt;my nearest server&lt;/strong&gt;. This means any responsive LiveView updates and interactions will be even faster and smoother because the regular TCP and websocket connections are just that much physically closer.&lt;/p&gt;

&lt;p&gt;But for the game, I wanted there to be a single source of truth. That GameServer can only exist in one place. Supporting a private, networked, and fully clustered environment means my server in the EU can communicate with the GameServer that might be running in the US. But my EU players have a fast and responsive UI connection close to them. This provides a better user experience!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dYMKyghO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://fly.io/public/images/tictac-fly-region-cluster.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dYMKyghO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://fly.io/public/images/tictac-fly-region-cluster.png" alt="Fly region clustering"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is what I find compelling about Fly.io for hosting Elixir applications:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Secure HTTPS automatically using Let's Encrypt. I didn't do anything to set that up!&lt;/li&gt;
&lt;li&gt;Distributed nodes use &lt;a href="https://fly.io/docs/reference/privatenetwork/"&gt;private network&lt;/a&gt; connections through &lt;a href="https://www.wireguard.com/"&gt;WireGuard&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Nodes auto-clustered using &lt;code&gt;libcluster&lt;/code&gt; and the &lt;code&gt;DNSPoll&lt;/code&gt; strategy. (See &lt;a href="https://github.com/fly-apps/tictac/blob/main/config/runtime.exs#L25"&gt;here for details&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Geographically distributed servers near my users are clustered together.&lt;/li&gt;
&lt;li&gt;This was the easiest multi-region yet still privately networked solution I've ever seen! (I have experience with AWS, DigitalOcean, and Heroku)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;For a proof-of-concept, I couldn't be happier! In a short time, by myself, I created a working, clustered, distributed, multi-player, globe-spanning gaming system!&lt;/p&gt;

&lt;p&gt;The pairing of Elixir + LiveView + Fly.io is excellent. Using Elixir and LiveView, I built a powerful, resilient, and distributed system in orders of magnitude shorter time and effort. Deploying it on Fly.io let let me easily do something I would never have even tried before, namely, deploying servers in regions around the globe while keeping the application privately networked and clustered together.&lt;/p&gt;

&lt;p&gt;Whenever I've thought of creating a service with a global audience, I'd usually scapegoat the idea saying, "Well I don't know how I'd get the translations, so I'll just stick with the US. It's a huge market anyway." In short, I've never even considered a globally connected application because it would be "way too hard".&lt;/p&gt;

&lt;p&gt;But here, with Elixir + LiveView + Fly.io, I did something by myself in my spare time that larger teams using more technologies struggle to deliver. I'm still mind blown by it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-will-you-build"&gt;
  &lt;/a&gt;
  What will you build?
&lt;/h2&gt;

&lt;p&gt;Tic-Tac-Toe is a simple game and doesn't provide "hours of fun". I know &lt;strong&gt;you&lt;/strong&gt; can think of a much cooler and more interesting multi-player, turn-based game that you could build on a system like this. What do you have in mind?&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>liveview</category>
      <category>phoenix</category>
      <category>gamedev</category>
    </item>
  </channel>
</rss>
