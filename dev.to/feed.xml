<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>async actions in react-redux</title>
      <author>atulit023</author>
      <pubDate>Thu, 12 Aug 2021 11:50:41 +0000</pubDate>
      <link>https://dev.to/icecoffee/async-actions-in-react-redux-17p4</link>
      <guid>https://dev.to/icecoffee/async-actions-in-react-redux-17p4</guid>
      <description>&lt;p&gt;&lt;code&gt;Redux&lt;/code&gt; is a widely opinionated tool for state management. Although it's not exclusively made for &lt;code&gt;react&lt;/code&gt; but it's praised by a lot of react developers.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Redux&lt;/code&gt; uses a big javascript object called the &lt;code&gt;state&lt;/code&gt; tree to store and preserve the global state of the application. &lt;/p&gt;

&lt;p&gt;Which we can access via dispatching actions to the reducer. &lt;/p&gt;

&lt;p&gt;Reducer is a special function and in a higher-level language, I can say reducer is something that takes the original part of the state that it needs to work on and the action that you want it to do and gives away the result. Like a black box.&lt;/p&gt;

&lt;p&gt;Now this is a very beautiful concept but you can not do something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;LOAD_USER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;loadUser&lt;/span&gt;&lt;span class="p"&gt;(...);&lt;/span&gt;
        &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To fetch and update state tree with async data, the traditional way is to use applyMiddleWare or some 3rd partly library like redux-thunk. But I won't be using that.&lt;/p&gt;

&lt;p&gt;To bypass all the fuss we'll use a little trick.&lt;br&gt;
Since react takes care of all the visual state of the application we just have to make sure that after our async function completes it should somehow tell redux that "yo! buddy I have done the thing that you asked for" and then redux can simply add/modify that information inside the global state tree.&lt;/p&gt;

&lt;p&gt;And here is how we can do that.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#loading-async-data-in-reducer"&gt;
  &lt;/a&gt;
  Loading Async Data in reducer
&lt;/h2&gt;

&lt;p&gt;This is a multi-step process&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First we will pass an action to the reducer which will make an async call. &lt;/li&gt;
&lt;li&gt;Then on the callback of that async action we will set up another dispatch that will be called after that async action completes.&lt;/li&gt;
&lt;li&gt;In the meanwhile we can return that state of the tree with an isLoading label set to true from the original action.&lt;/li&gt;
&lt;li&gt;The on-completion action will just return the state with the modified values and the loading label to false.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;et voila.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example-application"&gt;
  &lt;/a&gt;
  Example Application.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l_2S-m-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ub7zdlkhbvrqbyuyqzgm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l_2S-m-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ub7zdlkhbvrqbyuyqzgm.png" alt="Example Application Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this application, I have used the same concept to load users asynchronously from &lt;a href=""&gt;jsonplaceholder. api&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can check out the Github repo from here 👇 &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/icecoffee-dev"&gt;
        icecoffee-dev
      &lt;/a&gt; / &lt;a href="https://github.com/icecoffee-dev/redux-users-app"&gt;
        redux-users-app
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
REDUX for async tasks&lt;/h1&gt;
&lt;p&gt;You can manage async data in redux via two methods&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Via 3rd party liberary like redux thunk&lt;/li&gt;
&lt;li&gt;Unhealthy but simple way : Kind of a ruse&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I am not using the second way because it adds additional compelexiy of the middle ware.&lt;/p&gt;
&lt;h2&gt;
Main concept behind 2nd method&lt;/h2&gt;
&lt;p&gt;Since state of the application changes everytime the state tree changes. I can dispatch &lt;code&gt;onCompletion&lt;/code&gt; action in the callback&lt;code&gt;asyncLoading&lt;/code&gt; action which is inside the &lt;code&gt;reducer&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-en"&gt;reducer&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;state&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;initialState&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-s1"&gt;action&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; users &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;state&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
    &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;action&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;type&lt;/span&gt; &lt;span class="pl-c1"&gt;===&lt;/span&gt; &lt;span class="pl-c1"&gt;DONE&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
        &lt;span class="pl-smi"&gt;console&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;log&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'-updated-'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; ...&lt;span class="pl-s1"&gt;state&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-c1"&gt;loading&lt;/span&gt;: &lt;span class="pl-c1"&gt;false&lt;/span&gt;&lt;span class="pl-kos"&gt;}&lt;/span&gt;
    &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;else&lt;/span&gt; &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;action&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;type&lt;/span&gt; &lt;span class="pl-c1"&gt;===&lt;/span&gt; &lt;span class="pl-c1"&gt;LOAD_USER&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
        &lt;span class="pl-en"&gt;loadUser&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;...&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-s1"&gt;then&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;user&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
            &lt;span class="pl-s1"&gt;users&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;push&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;user&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/icecoffee-dev/redux-users-app"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Thanks for reading.&lt;br&gt;
Hope this may have added a little value, however small that may be.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cover Image: &lt;br&gt;
&lt;a href="https://medium.com/swlh/handling-asynchronous-actions-with-redux-thunk-86b8d8e0b83e"&gt;https://medium.com/swlh/handling-asynchronous-actions-with-redux-thunk-86b8d8e0b83e&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This article by &lt;a href="https://medium.com/swlh/handling-asynchronous-actions-with-redux-thunk-86b8d8e0b83e"&gt;Robin Kim&lt;/a&gt; follows the redux-thunk middleware approach so it's my advice to check it out.&lt;/p&gt;

&lt;p&gt;Thanks again! Have a lovely day.&lt;/p&gt;

</description>
      <category>react</category>
      <category>redux</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Azure Functions with F# using .NET 5</title>
      <author>Matt Thornton</author>
      <pubDate>Thu, 12 Aug 2021 11:12:12 +0000</pubDate>
      <link>https://dev.to/choc13/azure-functions-with-f-using-net-5-3348</link>
      <guid>https://dev.to/choc13/azure-functions-with-f-using-net-5-3348</guid>
      <description>&lt;p&gt;Serverless computing promises to make it "easier" to just write some code, sling it at the cloud and voila, you're done. No more worrying about how your code is hosted, configuring application servers or writing hundreds of lines of "boilerplate" to get something running. The reality, however, is a little different, as we found out when trying to write an Azure function that targets the .NET 5 runtime. &lt;/p&gt;

&lt;p&gt;The reason it failed to live up to this promise is that at this point in time the default Azure functions host supports .NET Core 3. So in order to target .NET 5 we have to get our hands dirty and write some boilerplate. Unfortunately, the documentation on how to do this and the project templates for .NET 5 Azure functions don't seem to cover all of the "quirks" that are necessary to make it work.&lt;/p&gt;

&lt;p&gt;In this post I'm going to walk through the steps required to get a .NET 5 Azure function running both locally and in Azure and highlight the gotchas that tripped us up when trying to do this. The function itself will be written in F#, but all of the quirks are related to using a .NET 5 runtime and so would equally apply to a C# project. In fact, switching between the two languages is an extremely minimal code change.&lt;/p&gt;

&lt;p&gt;The final version of the code shown in this blog post can be found on &lt;a href="https://github.com/Choc13/az-function-fsharp-net5"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inprocess-vs-outofprocess-hosting"&gt;
  &lt;/a&gt;
  "In-process" vs "Out-of-process" hosting
&lt;/h2&gt;

&lt;p&gt;First off, what's a host? In Azure functions the host is the term used to refer to the process that your function will be executed in. It includes a runtime, e.g. dotnet or Python, and all of the external libraries, e.g. DLLs or Python modules, that your code needs to be able to run. &lt;/p&gt;

&lt;p&gt;By default Azure functions uses what it calls an "in-process" hosting model. In practice this means that when you deploy your code as a library, or a script, it runs it in a process with a pre-configured host. &lt;/p&gt;

&lt;p&gt;The upside to this model is that you don't have to worry about infrastructure concerns. You just write your core logic and ship it. This supposedly frees developers from the burden of configuring a host in the entry point to their application, saving them time.&lt;/p&gt;

&lt;p&gt;The downside is that if you don't like what's included in the box then your options for altering that are limited to whatever is exposed via the switches and dials they provide. Unfortunately there’s no .NET 5 switch available. This is where the "out-of-process" host comes in.&lt;/p&gt;

&lt;p&gt;With out-of-process hosting you get explicit control over how the host is created allowing you to choose a dotnet runtime. When you ship an Azure function using this hosting model you're responsible for configuring the host and making sure it boots correctly. With that background out the way, let's get stuck into the code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-new-project"&gt;
  &lt;/a&gt;
  Create a new project
&lt;/h2&gt;

&lt;p&gt;We're going to need an F# project to work with. It will be edited quite heavily, so the easiest way to create one is to just create a console app by running the following command from the root of your project directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet new console &lt;span class="nt"&gt;-lang&lt;/span&gt; f# &lt;span class="nt"&gt;-n&lt;/span&gt; Function &lt;span class="nt"&gt;-o&lt;/span&gt; src/Function
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Note, we've put the project under a &lt;code&gt;src&lt;/code&gt; directory as is quite typical for dotnet projects, you don't have to follow this convention, but the rest of the steps will assume this project layout.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#configure-the-raw-fsproj-endraw-file"&gt;
  &lt;/a&gt;
  Configure the &lt;code&gt;.fsproj&lt;/code&gt; file
&lt;/h2&gt;

&lt;p&gt;The first step is to ensure the project file (&lt;code&gt;.fsproj&lt;/code&gt;) is configured correctly. A minimal example looks like this.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;Project&lt;/span&gt; &lt;span class="na"&gt;Sdk=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.NET.Sdk"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;AzureFunctionsVersion&amp;gt;&lt;/span&gt;v3&lt;span class="nt"&gt;&amp;lt;/AzureFunctionsVersion&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;_FunctionsSkipCleanOutput&amp;gt;&lt;/span&gt;True&lt;span class="nt"&gt;&amp;lt;/_FunctionsSkipCleanOutput&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;OutputType&amp;gt;&lt;/span&gt;Exe&lt;span class="nt"&gt;&amp;lt;/OutputType&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TargetFramework&amp;gt;&lt;/span&gt;net5.0&lt;span class="nt"&gt;&amp;lt;/TargetFramework&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.Azure.Functions.Worker"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"1.4.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.Azure.Functions.Worker.Extensions.Timer"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"4.1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.Azure.Functions.Worker.Sdk"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"1.0.4"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Compile&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Execute.fs"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Compile&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Program.fs"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;None&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"host.json"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;CopyToOutputDirectory&amp;gt;&lt;/span&gt;PreserveNewest&lt;span class="nt"&gt;&amp;lt;/CopyToOutputDirectory&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/None&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;None&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"local.settings.json"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;CopyToOutputDirectory&amp;gt;&lt;/span&gt;PreserveNewest&lt;span class="nt"&gt;&amp;lt;/CopyToOutputDirectory&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;CopyToPublishDirectory&amp;gt;&lt;/span&gt;Never&lt;span class="nt"&gt;&amp;lt;/CopyToPublishDirectory&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/None&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can just go ahead and replace the contents of the generated &lt;code&gt;Function.fsproj&lt;/code&gt; file with the above.&lt;/p&gt;

&lt;p&gt;There are a few things to point out that are required to make this work which weren't documented or included in the official code templates.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;_FunctionsSkipCleanOutput&lt;/code&gt; must be set to &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The directives for the &lt;code&gt;host.json&lt;/code&gt; and &lt;code&gt;local.settings.json&lt;/code&gt; must use &lt;code&gt;&amp;lt;None Include=&amp;gt;&lt;/code&gt;. The functions templates generate these with &lt;code&gt;&amp;lt;None Update=&amp;gt;&lt;/code&gt; which doesn't work.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The templates also don't include the correct package references. At a minimum we need the ones listed above, at their latest versions, in order to run on .NET 5.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note this example is using &lt;code&gt;Microsoft.Azure.Functions.Worker.Extensions.Timer&lt;/code&gt; because this basic example just uses a simple timer trigger, you might need a different extension package if you're using a different trigger, e.g. Blob triggers require &lt;code&gt;Microsoft.Azure.Functions.Worker.Extensions.Storage&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#configure-raw-hostjson-endraw-"&gt;
  &lt;/a&gt;
  Configure &lt;code&gt;host.json&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;We need to add a &lt;code&gt;host.json&lt;/code&gt; file to the project with the following contents.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"logging"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"applicationInsights"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"samplingSettings"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"isEnabled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"samplingExcludedTypes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Request"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;There aren't any quirks here, so just add that and move on.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#add-a-raw-localsettingsjson-endraw-"&gt;
  &lt;/a&gt;
  Add a &lt;code&gt;local.settings.json&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;We also need a &lt;code&gt;local.settings.json&lt;/code&gt; file in the project which should look like this.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"IsEncrypted"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"Values"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"AzureWebJobsStorage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"UseDevelopmentStorage=true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"FUNCTIONS_WORKER_RUNTIME"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dotnet-isolated"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The crucial bit here is that we've set &lt;code&gt;FUNCTIONS_WORKER_RUNTIME&lt;/code&gt; to &lt;code&gt;"dotnet-isolated"&lt;/code&gt;. This is how we specify that we want to use an out-of-process host.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#configure-the-host-in-raw-programfs-endraw-"&gt;
  &lt;/a&gt;
  Configure the host in &lt;code&gt;Program.fs&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Because we've opted to go out-of-process we need to write the host bootstrapping code in &lt;code&gt;Program.fs&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Microsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Extensions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Hosting&lt;/span&gt;

&lt;span class="nc"&gt;HostBuilder&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ConfigureFunctionsWorkerDefaults&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Build&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Run&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As you can see, the boilerplate is actually very minimal for this simple function. Also, the nice thing about using the &lt;code&gt;dotnet-isolated&lt;/code&gt; runtime and explicitly defining how the host is bootstrapped is that if the application grows and requires interaction with more azure services, such as blob storage or message queues, then we get complete control over how those services are configured. We're also able to specify exactly which NuGet packages, at which versions, are included in the runtime too. In my experience this leads to much fewer surprises and less time spent opaquely debugging in Azure, as compared to using an in-process host in which issues such as assembly conflicts occur at runtime. Give me that sweet, sweet, boilerplate every time.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#add-your-functions"&gt;
  &lt;/a&gt;
  Add your functions
&lt;/h2&gt;

&lt;p&gt;We can now go ahead and write our functions. Our project is configured to expect a file called &lt;code&gt;Execute.fs&lt;/code&gt;, which is where we're going to place them. There's nothing special about that file name, so feel free to call it whatever you want, or arrange your functions in multiple files if that suits your needs better.&lt;/p&gt;

&lt;p&gt;Here's what our simple example timer function looks like in F#.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;My&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Function&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Microsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Azure&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Functions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Worker&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Microsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Extensions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Logging&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ILogger&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Execute&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Execute"&lt;/span&gt;&lt;span class="o"&gt;)&amp;gt;]&lt;/span&gt;
    &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="o"&gt;_.&lt;/span&gt;&lt;span class="nc"&gt;Run&lt;/span&gt;&lt;span class="o"&gt;([&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TimerTrigger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"0 */5 * * * *"&lt;/span&gt;&lt;span class="o"&gt;)&amp;gt;]&lt;/span&gt; &lt;span class="n"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;TimerInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;LogInformation&lt;/span&gt;&lt;span class="o"&gt;($&lt;/span&gt;&lt;span class="s2"&gt;"Hello at {System.DateTime.UtcNow} from an Azure function using F# on .NET 5."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Somewhat annoyingly, we have to add the &lt;code&gt;TimerTrigger&lt;/code&gt; attribute to a method parameter, rather than being able to specify it at the method level. So even if we don't want to use the &lt;code&gt;TimerInfo&lt;/code&gt;, we need to accept it as an argument.&lt;/p&gt;

&lt;p&gt;Also, ironically, we have to create a class to write a "function" 😜 &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#building-the-code"&gt;
  &lt;/a&gt;
  Building the code
&lt;/h2&gt;

&lt;p&gt;This one should be fairly straight forward, but there's a gotcha here too. In order to build an Azure function running on .NET 5 you'll need the .NET Core 3.1 SDK installed. There's more information in this &lt;a href="https://github.com/Azure/azure-functions-dotnet-worker/issues/480"&gt;GitHub&lt;/a&gt; issue. Once you've got that installed you can just run &lt;code&gt;dotnet build&lt;/code&gt; like usual.  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#run-it-locally"&gt;
  &lt;/a&gt;
  Run it locally
&lt;/h2&gt;

&lt;p&gt;At this point we can run the function locally using the &lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-run-local"&gt;Azure Function Tools&lt;/a&gt; and the &lt;a href="https://docs.microsoft.com/en-us/azure/storage/common/storage-use-azurite?tabs=npm"&gt;Azurite&lt;/a&gt; storage emulator.&lt;/p&gt;

&lt;p&gt;With these two tools installed you can run the following commands (in separate terminals or as background processes) to start the function.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;azurite &lt;span class="nt"&gt;--location&lt;/span&gt; ~/.azurite &lt;span class="nt"&gt;--debug&lt;/span&gt; ~/.azurite/debug.log
func start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The output from &lt;code&gt;func start&lt;/code&gt; should look something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DF3f_5c7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ysv9cfopzdyy3h740bv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DF3f_5c7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ysv9cfopzdyy3h740bv.png" alt="functions-output"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#deploy-to-azure"&gt;
  &lt;/a&gt;
  Deploy to Azure
&lt;/h2&gt;

&lt;p&gt;In order to deploy to Azure we need to create some Azure resources. At a minimum we need a resource group containing a storage account, app service plan on the consumption billing tier and a function app. We can configure all of this from an ARM template. Whilst straight forward if you know how to use ARM templates, it's quite verbose, so instead of inlining it here, you can see it on &lt;a href="https://github.com/Choc13/az-function-fsharp-net5/blob/master/azuredeploy.json"&gt;GitHub&lt;/a&gt; instead.&lt;/p&gt;

&lt;p&gt;Assuming you've got an Azure subscription and the &lt;a href="https://docs.microsoft.com/en-us/cli/azure/install-azure-cli"&gt;Az CLI&lt;/a&gt; installed then we can deploy it with these commands.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Create a resource group, only needs to be done the first time&lt;/span&gt;
az group create &lt;span class="nt"&gt;-n&lt;/span&gt; &amp;lt;resource-group-name&amp;gt; &lt;span class="nt"&gt;-l&lt;/span&gt; &amp;lt;location&amp;gt;

&lt;span class="c"&gt;# Build the code, this will publish all the necessary files to the location specified by the -o argument&lt;/span&gt;
dotnet build src/Function &lt;span class="nt"&gt;-c&lt;/span&gt; Release &lt;span class="nt"&gt;-o&lt;/span&gt; .publish/func

&lt;span class="c"&gt;# The template outputs the function app's name so we can use it in the next step to deploy the code&lt;/span&gt;
&lt;span class="nv"&gt;FUNCTION_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;az deployment group create &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--no-prompt&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--output&lt;/span&gt; tsv &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--query&lt;/span&gt; properties.outputs.functionName.value &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--resource-group&lt;/span&gt; &amp;lt;resource-group-name&amp;gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--template-file&lt;/span&gt; ./azuredeploy.json&lt;span class="si"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;cd&lt;/span&gt; .publish/func

&lt;span class="c"&gt;# Zip up the build output for deployment to the app&lt;/span&gt;
zip &lt;span class="nt"&gt;-r&lt;/span&gt; ./funtionapp.zip &lt;span class="nb"&gt;.&lt;/span&gt;

az functionapp deployment &lt;span class="nb"&gt;source &lt;/span&gt;config-zip &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--resource-group&lt;/span&gt; &amp;lt;resource-group-name&amp;gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--name&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FUNCTION_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--src&lt;/span&gt; ./functionapp.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;One quirk here is that you might have been expecting to use the &lt;code&gt;dotnet publish&lt;/code&gt; command in order to create the deployable artefact, as is typical when developing an ASP.NET app. That's not the case here, for Azure functions the publishing happens automatically when running &lt;code&gt;dotnet build&lt;/code&gt;. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#bonus-build-and-deploy-from-github"&gt;
  &lt;/a&gt;
  Bonus: Build and Deploy from GitHub
&lt;/h2&gt;

&lt;p&gt;Now that we've automated the build and deployment using CLI tools, it's actually very easy to turn this into a GitHub action. Especially if we create a script called &lt;code&gt;deploy.sh&lt;/code&gt; that takes care of all of the Azure related steps from the previous section.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build &amp;amp; Deploy&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;master&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;FUNCTION_PACKAGE_PATH&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.publish/function&lt;/span&gt;
  &lt;span class="na"&gt;RESOURCE_GROUP&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;az-function-fsharp-net5&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build-and-deploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-18.04&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout code&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@master&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;fetch-depth&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Setup dotnet SDK 3.1 (https://github.com/Azure/azure-functions-dotnet-worker/issues/480)&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-dotnet@v1&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;dotnet-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.1.409"&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Setup dotnet SDK&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-dotnet@v1&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;dotnet-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;5.0.300"&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Publish Function&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dotnet build src/Function -c Release -o ${{ env.FUNCTION_PACKAGE_PATH }}&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Login to Azure&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;azure/login@v1&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;creds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.AZURE_RBAC_CREDENTIALS }}&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy to Azure&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;azure/CLI@v1&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;inlineScript&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./deploy.sh ${{ env.FUNCTION_PACKAGE_PATH }} -g ${{ env.RESOURCE_GROUP }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Note that we have to install both the .NET Core 3.1 and .NET 5 SDKs in order to build the code.&lt;/p&gt;

&lt;p&gt;In order for this to work you'll need to set a GitHub secret called &lt;code&gt;AZURE_RBAC_CREDENTIALS&lt;/code&gt; in your repo. More details about how to generate and set these credentials can be found on the &lt;a href="https://github.com/marketplace/actions/azure-login#configure-deployment-credentials"&gt;Azure Login Action's page&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#see-the-full-example-on-github"&gt;
  &lt;/a&gt;
  See the full example on GitHub
&lt;/h2&gt;

&lt;p&gt;If you want to see the final example all in one place then you can check it out on GitHub. Feel free to clone it or fork it and use it as a starting template.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Choc13"&gt;
        Choc13
      &lt;/a&gt; / &lt;a href="https://github.com/Choc13/az-function-fsharp-net5"&gt;
        az-function-fsharp-net5
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A minimal example of creating an Azure function using F# on .NET 5. with bonus GitHub actions deployment
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Example Azure Function using F# on .NET 5&lt;/h1&gt;
&lt;p&gt;This repo shows a minimal example of how to write an Azure function using F# and run it on .NET 5
It also includes an example of deploying to Azure from your local machine and using GitHub actions.&lt;/p&gt;
&lt;h2&gt;
Gotchas&lt;/h2&gt;
&lt;p&gt;There were several gotchas that were discovered when trying to get this to work which were often tricky to find in the existing documentation
In fact, all of these gotchas are related to using .NET 5 and apply equally to a C# project.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h3&gt;
Isolated .NET Host&lt;/h3&gt;
&lt;p&gt;Running the function on .NET 5 requires an &lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/dotnet-isolated-process-guide" rel="nofollow"&gt;isolated .NET host&lt;/a&gt;
Specifically, we have to set the environment variable &lt;code&gt;FUNCTIONS_WORKER_RUNTIME&lt;/code&gt; to the value &lt;code&gt;"dotnet-isolated"&lt;/code&gt;
This is because the default host in the functions runtime is still using .NET Core 3.1
We have to set this in both the &lt;a href="https://github.com/Choc13/az-function-fsharp-net5local.settings.json"&gt;&lt;code&gt;local.settings.json&lt;/code&gt;&lt;/a&gt; file for running locally and the …&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Choc13/az-function-fsharp-net5"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-state-of-azure-severless-in-2021"&gt;
  &lt;/a&gt;
  The state of Azure severless in 2021
&lt;/h2&gt;

&lt;p&gt;Given the variety of triggers available and the consumption based billing model Azure functions are well suited for running reactive asynchronous background tasks. This is an important piece in the architecture of any reasonably sized distributed system hosted in the cloud. It also provides a complimentary role to that of the backend API, such as a REST API, which expects to make quick decisions and not spend its time chugging away at long running async computations.&lt;/p&gt;

&lt;p&gt;It's a shame then that Azure functions seem to have conflated this feature set with the one of reducing-all-the-boilerplate. It's understandable that there is a use case that exists in which many people will just want to write some code and get it running somewhere with minimal fuss. Unfortunately, I think that's a completely different set of people to the ones who want to use Azure functions as part of the architecture of a larger distributed system.&lt;/p&gt;

&lt;p&gt;As someone in the latter camp I care much more about being able to have explicit control over the environment in which my code runs than I do about eliminating a dozen lines of host configuration boilerplate. Spending time eliminating this boilerplate is a false economy because I probably spend less than 0.001% of my time when building such a system on those dozen lines of config code. The problem with trying to eliminate all the boilerplate is that if you don't nail the abstractions they end up creating more friction than the original boilerplate did, by forcing developers to figure out how to work around them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Creating an Azure function targeting the latest .NET runtime is quite fiddly and insufficiently documented at present. Fortunately, with a bit of tinkering it is possible to make it work. Choosing between F# and C# is also just a matter of which language suits your project better as neither requires any extra Azure functions magic than the other.&lt;/p&gt;

&lt;p&gt;In the future it would be great the see Microsoft focus more on building a solid pay-per-use background processing solution without all the magic, basically good old WebJobs on a consumption plan. The "in-process" use case should then be simple to build on top of this foundation for those that don't need such control and don't want to have to figure out how to configure a host. Better to try and walk before you can run.&lt;/p&gt;

</description>
      <category>azure</category>
      <category>dotnet</category>
      <category>fsharp</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Ultimate Vue.js (2021) Cheat Sheet</title>
      <author>Eric The Coder</author>
      <pubDate>Thu, 12 Aug 2021 11:06:03 +0000</pubDate>
      <link>https://dev.to/ericchapman/ultimate-vue-js-2021-cheat-sheet-1ihf</link>
      <guid>https://dev.to/ericchapman/ultimate-vue-js-2021-cheat-sheet-1ihf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#vuejs-cheat-sheet-including-vuerouter-vuex-and-composition-api"&gt;
  &lt;/a&gt;
  VueJS cheat sheet including VueRouter, Vuex and Composition API
&lt;/h2&gt;

&lt;p&gt;If you want more content like this one, click Follow and follow me on twitter &lt;a href="https://twitter.com/EricTheCoder_"&gt;@EricTheCoder_&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I put a lot of hours creating this cheat sheet, I hope you will like it!&lt;/p&gt;

&lt;p&gt;If you discover any errors or have any suggestions please leave a comment at the bottom of this page.&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#must-have-vscode-extensions-for-vuejs"&gt;
  &lt;/a&gt;
  Must have VSCode extensions for VueJS
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur"&gt;Vetur&lt;/a&gt;: Syntax-highlighting, Formating, Emmet, IntelliSense, and more&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=sdras.vue-vscode-snippets"&gt;Vue VSCode Snippets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#addition-to-vscode-settingsjson"&gt;
  &lt;/a&gt;
  Addition to VSCode settings.json
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;emmet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includeLanguages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue-html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#how-to-install-vuejs"&gt;
  &lt;/a&gt;
  How to install VueJS
&lt;/h3&gt;

&lt;p&gt;Vue is a progressive framework. You can use it just in a small part of your web page or if you prefer you can use the Vue CLI tool to scaffold a full VueJS application.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#use-vue-only-on-part-of-your-web-page"&gt;
  &lt;/a&gt;
  Use Vue only on part of your web page
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add a 'script' tag that contains a link to the VueJS CDN library&lt;/li&gt;
&lt;li&gt;Add another 'script' tag that contains a link to your Vue application file (app.js)&lt;/li&gt;
&lt;li&gt;Create a div with id = "app" which will serve as a container for rendering your Vue application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an example of a page using Vue.js&lt;br&gt;
&lt;br&gt;(index.html)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Ma page Vue.js&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      {{ title }}
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/vue@next"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./app.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/boby&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(app.js)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// function to initialize Vue.js instance&lt;/span&gt;
&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello Word Vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;// .mount specifies that the Vue application will be render in the div with id = "app"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-a-full-vuejs-app"&gt;
  &lt;/a&gt;
  Create a full VueJS app
&lt;/h3&gt;

&lt;p&gt;The tool for creating a VueJS project is Vue CLI. You will need to install it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g @vue/cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-your-vuejs-app"&gt;
  &lt;/a&gt;
  Create your VueJS app
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vue create my-app-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#npm-run-serve"&gt;
  &lt;/a&gt;
  npm run serve
&lt;/h3&gt;

&lt;p&gt;Once the application is created, you can position yourself in the folder and start the development server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd my-app-name
npm run serve
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#vue-add"&gt;
  &lt;/a&gt;
  Vue add
&lt;/h3&gt;

&lt;p&gt;It is possible to add plugins / libraries to your Vue project using the 'vue add' shortcut. Here are 3 examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vue add vue-router
vue add vuex
vue add tailwind
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#entry-point"&gt;
  &lt;/a&gt;
  Entry point
&lt;/h3&gt;

&lt;p&gt;Vue CLI will create multiple folders and files. The starting point is public / index.html and "src / main.js"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createApp&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;createApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The component which serves as an entry point is therefore App.vue&lt;/p&gt;

&lt;p&gt;With a Vue application, no HTML code will be written to the index.html file. Your HTML code will be written in the &amp;lt;template&amp;gt; section of each of your components&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#singlefile-component"&gt;
  &lt;/a&gt;
  Single-File Component
&lt;/h3&gt;

&lt;p&gt;Each Vue component is defined in its own .vue file with the following syntax &amp;lt;template&amp;gt; &amp;lt;script&amp;gt; &amp;lt;style&amp;gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
    &amp;lt;img alt="Vue logo" src="./assets/logo.png" /&amp;gt;
    &amp;lt;HelloWorld msg="Hello Vue 3" /&amp;gt;
    {{ message }}
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
    import HelloWorld from './components/HelloWorld.vue'

    export default {
        components: {
            HelloWorld
        },
        data() {
             return {
                message: 'Hello World'
            }
        },    
    }
&amp;lt;/script&amp;gt;

&amp;lt;style scope &amp;gt;
    #app {
      font-family: Avenir, Helvetica, Arial, sans-serif;
      text-align: center;
      color: #2c3e50;
    }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#use-a-component-inside-your-current-component"&gt;
  &lt;/a&gt;
  Use a component inside your current component.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
    &amp;lt;HelloWorld msg="Hello Vue" /&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You then need to import the component file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import HelloWorld from './components/HelloWorld.vue'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#component-props"&gt;
  &lt;/a&gt;
  Component Props
&lt;/h3&gt;

&lt;p&gt;Components can can define and pass a props value when rendering&lt;/p&gt;

&lt;p&gt;The props is define inside your component with this syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mon application&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Props can also be used with shorthand syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can then assign a value to these props when using the component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;nav-bar&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"My App"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#component-file-location"&gt;
  &lt;/a&gt;
  Component file location
&lt;/h3&gt;

&lt;p&gt;Single-File-Component are saved in the src / components or src / pages folder depending on whether the component acts as a page (eg About.vue) or as a reusable component (eg NavBar.vue)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#component-data"&gt;
  &lt;/a&gt;
  Component Data()
&lt;/h3&gt;

&lt;p&gt;The data () function is used to create reactive variables that will be used in your Vue application. Whenever a reactive variable is changed, whether it is displayed or used in your page, Vue will update it immediately.&lt;/p&gt;

&lt;p&gt;To display a reactive variable or an expression in your page you must use the double brackets Vue will replace the content of the expression with its value&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// variable
{{ title }}

// expression
{{ title.toUpperCase() }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#vuejs-directives"&gt;
  &lt;/a&gt;
  VueJS directives
&lt;/h3&gt;

&lt;p&gt;VueJS directives are html attributes that can be inserted into your page in order to modify the rendering of your Vue application.&lt;/p&gt;

&lt;p&gt;Here is the list of available directives:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#vbind"&gt;
  &lt;/a&gt;
  v-bind
&lt;/h4&gt;

&lt;p&gt;Allows you to assign an expression to an attribute. Vue will replace the expression with its value&lt;/p&gt;

&lt;p&gt;(eg image_url: "&lt;a href="http://www.example.com/car.jpg"&gt;http://www.example.com/car.jpg&lt;/a&gt;"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;v-bind:src=&lt;/span&gt;&lt;span class="s"&gt;"image_url"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

// ou syntaxe raccourci
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;:src=&lt;/span&gt;&lt;span class="s"&gt;"image_url"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;v-once&lt;/p&gt;

&lt;p&gt;With the v-once directive Vue will interpolate the expression only once. The expression will therefore be ignored for all other refreshes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;v-once&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   {{ title }}
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#vhtml"&gt;
  &lt;/a&gt;
  v-html
&lt;/h4&gt;

&lt;p&gt;Allows you to display an expression with HTML tags.&lt;/p&gt;

&lt;p&gt;ex: title: "&amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;v-html=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#vmodel"&gt;
  &lt;/a&gt;
  v-model
&lt;/h4&gt;

&lt;p&gt;Used to link the value of an input element with a variable. If you change one or the other Vue will automatically update the other. As a result, the variable and the input element will always have the same value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;v-model=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    Nom : {{ name }}
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#vif-velseif-et-velse"&gt;
  &lt;/a&gt;
  v-if, v-else-if et v-else
&lt;/h4&gt;

&lt;p&gt;Makes an element visible or not visible depending on the true or false value of the expression. When not visible, the element is not rendered in the html&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"amount &amp;gt; 100"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Free Shipping!
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;v-else-if=&lt;/span&gt;&lt;span class="s"&gt;"montant &amp;gt; 50"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Shipping: 9.95$
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;v-else&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Shipping: 19.95$
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#vshow"&gt;
  &lt;/a&gt;
  v-show
&lt;/h4&gt;

&lt;p&gt;Makes an element visible or not visible depending on the true or false value of the expression. The element always remains present in the rendering. When not visible the element is rendered with the CSS attribute: display: none;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;v-show=&lt;/span&gt;&lt;span class="s"&gt;"isError"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  {{ errorMessage }}
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#vfor"&gt;
  &lt;/a&gt;
  v-for
&lt;/h4&gt;

&lt;p&gt;Display a list of items&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"item in items"&lt;/span&gt; &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"item.id"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        {{ item.name }}
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the attribute "key" is necessary to allow Vue to uniquely identify the element&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ref"&gt;
  &lt;/a&gt;
  Ref
&lt;/h4&gt;

&lt;p&gt;Allows your Vue application to identify an html element and perform actions on that element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Manipulation from your Vue code using the special object: this.$refs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$refs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$refs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$refs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#vbind-on-the-class-attribute-and-the-style"&gt;
  &lt;/a&gt;
  v-bind on the "class" attribute and the "style"
&lt;/h4&gt;

&lt;p&gt;It is possible to v-bind the class and style attributes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-2xl"&lt;/span&gt; &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"isAdmin ? 'text-red-500' : 'text-gray-500'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   Hello World
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the class attribute is used twice. Vue will combine these two attributes on render&lt;/p&gt;

&lt;p&gt;It is also possible to use an object to send content in our "class" attribute&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"{ 'text-red-500': isAdmin, 'text-gray-500': !isAdmin }"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   Hello World
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the syntax of the object {attribute: expression} if the expression returns true then the attribute will be added to the class&lt;/p&gt;

&lt;p&gt;Similar syntax applies to the style attribute&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div :style="{'margin-top': '10px', 'padding': '5px'"&amp;gt;
   Hello World
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally the class and style attributes can be defined by an object type variable created elsewhere in your application&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;titleClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-red-400&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAdmin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-gray-500&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAdmin&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;titleClass&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;World&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#lttemplategt-tag"&gt;
  &lt;/a&gt;
  &amp;lt;template&amp;gt; tag
&lt;/h4&gt;

&lt;p&gt;This element allows you to use Vue directives without creating an html element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&lt;/span&gt; &lt;span class="na"&gt;v-show=&lt;/span&gt;&lt;span class="s"&gt;"quantity === 0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Quantity must be greater than zero
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#events"&gt;
  &lt;/a&gt;
  Events
&lt;/h3&gt;

&lt;p&gt;Vue allows you to manage javascript events like click, input, change, etc. To do this you must use the v-on: directive followed by the name of the event.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#vonclick"&gt;
  &lt;/a&gt;
  v-on:click
&lt;/h4&gt;

&lt;p&gt;Allows you to execute code on the click of an element&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;v-on:click=&lt;/span&gt;&lt;span class="s"&gt;"name = 'Mike'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Display a message&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

// or shortened syntax
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"name = 'Mike'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Display a mssagee&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#vonkeydown"&gt;
  &lt;/a&gt;
  v-on:keydown
&lt;/h4&gt;

&lt;p&gt;Allows you to execute code at the press of a key (e.g. enter)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;v-on:keydown.enter=&lt;/span&gt;&lt;span class="s"&gt;"name = 'Mike'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Display a message&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

// or shortened syntax
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"name = 'Mike'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Display a message&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Other possible values for v-on: keydown, keyup, keypress&lt;/p&gt;

&lt;p&gt;Other possible values for .enter, tab, esc, up, down, left, right, delete&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#vonsubmit"&gt;
  &lt;/a&gt;
  v-on:submit
&lt;/h4&gt;

&lt;p&gt;Allows you to run code when submitting a form&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;v-on:submit.prevent=&lt;/span&gt;&lt;span class="s"&gt;"name = 'Mike'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;v-model=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Save&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the presence of ".prevent" after the v-on: submit directive. This instruction will prevent the form from being submitted to the server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#methods"&gt;
  &lt;/a&gt;
  Methods
&lt;/h3&gt;

&lt;p&gt;Vue js allows you to create methods in order to place a reusable code block in your applications. Here is the syntax for creating a method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mike Taylor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;resetName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the keyword 'this' placed in front of the name variable. This keyword is mandatory to allow to reference a variable inside our Vue instance.&lt;/p&gt;

&lt;p&gt;To call a method you can do it simply by using its name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;v-model=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; 
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"resetName"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Delete&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A method can also contain parameters&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;resetName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newName&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;v-model=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; 
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"resetName('John')"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Effacer&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A method can also send the object event&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;resetName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newName&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;v-model=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; 
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"resetName('John', $event)"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Delete&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the special parameter $event will send the object event to our method&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#emit"&gt;
  &lt;/a&gt;
  $emit
&lt;/h3&gt;

&lt;p&gt;The keyword $emit is used to emit an event. This event can then be captured by your application with a v-on: event-name&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;methods: {
    sendDelete() {
        const userId = 10
        this.$emit('delete', userId)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;nav-bar&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"My App"&lt;/span&gt; &lt;span class="na"&gt;v-on:delete=&lt;/span&gt;&lt;span class="s"&gt;"deleteUser"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#computed-methods"&gt;
  &lt;/a&gt;
  Computed Methods
&lt;/h3&gt;

&lt;p&gt;Unlike the other methods which will be re-executed each time your application is rendered, the "computed" methods will be re-executed only if the variables they contain are modified.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;recalcTotal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;taxes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calcTotal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;taxes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The "computed" methods can then be called in our page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"recalcTotal"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Re-Calc&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that no parameter or parenthesis is used&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#watch-method"&gt;
  &lt;/a&gt;
  Watch Method
&lt;/h3&gt;

&lt;p&gt;These methods will "watch" a variable and as soon as it changes will execute the code of the method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newTitle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oldTitle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Le titre &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;oldTitle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; à changé pour &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;newTitle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#lifecycle-hook-methods"&gt;
  &lt;/a&gt;
  Lifecycle Hook Methods
&lt;/h3&gt;

&lt;p&gt;Each view instance goes through a series of initialization steps when it is created - for example, it needs to set up data observation, compile the template, mount the instance on the DOM, and update the DOM. when the data changes.&lt;/p&gt;

&lt;p&gt;Along the way, it will also invoke lifecycle hooks, which give us the opportunity to execute custom logic at each step.&lt;/p&gt;

&lt;p&gt;For example, the "created" hook is called after the instance is created&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;created&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Component instance created&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are several other hook methods. Here are a few:&lt;/p&gt;

&lt;p&gt;beforeCreate&lt;br&gt;
created&lt;br&gt;
beforeMount&lt;br&gt;
mounted&lt;br&gt;
beforeUpdate&lt;br&gt;
updated&lt;br&gt;
beforeDestroy&lt;br&gt;
destroyed&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#les-slots"&gt;
  &lt;/a&gt;
  Les Slots
&lt;/h3&gt;

&lt;p&gt;Slots allow you to add content to a component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;custom-button&amp;gt;&lt;/span&gt;
  ...custom content...
  Titre: {{ title }}
&lt;span class="nt"&gt;&amp;lt;/custom-button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the rendering of 'title' will be done in the parent component. The same principle will apply for the css. So the content of the slot must be defined / accessible in the parent component&lt;/p&gt;

&lt;p&gt;Internally the custom-button looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The slot tag will be replaced by the content of 'custom-button'&lt;/p&gt;

&lt;p&gt;It is possible to define a default value for the slot&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;slot&amp;gt;&lt;/span&gt;If nothing than display this&lt;span class="nt"&gt;&amp;lt;/slot&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the default value is defined in the child component, so must use the variables or the css defined in the child component.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiple-slots"&gt;
  &lt;/a&gt;
  Multiple slots
&lt;/h3&gt;

&lt;p&gt;Allows you to add content associated only with a particular slot&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;custom-button&amp;gt;&lt;/span&gt;
   Custom Content
  &lt;span class="nt"&gt;&amp;lt;template&lt;/span&gt; &lt;span class="na"&gt;#title&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {{ title }}
  &lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/custom-button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;'#title' identifies the template in the title slot. The v-slot: title syntax can also be used&lt;/p&gt;

&lt;p&gt;Internally the custom-button looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/slot&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the main slot is still available&lt;/p&gt;

&lt;p&gt;(the tags here are optional) but it is possible to add a second slot with a name&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#slot-props"&gt;
  &lt;/a&gt;
  Slot Props
&lt;/h3&gt;

&lt;p&gt;Slots can have props&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt; &lt;span class="na"&gt;status=&lt;/span&gt;&lt;span class="s"&gt;"info"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/slot&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Props can then be used&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;custom-button&amp;gt;&lt;/span&gt;
    custom content...
  &lt;span class="nt"&gt;&amp;lt;template&lt;/span&gt; &lt;span class="na"&gt;#title&lt;/span&gt;&lt;span class="err"&gt;="&lt;/span&gt;&lt;span class="na"&gt;titleProps&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {{ title }}
    {{ titleProps.status }}
  &lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/custom-button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is possible to define Props for the main slot using '#default'&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"ajout"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/slot&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt; &lt;span class="na"&gt;status=&lt;/span&gt;&lt;span class="s"&gt;"info"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/slot&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;custom-button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;template&lt;/span&gt; &lt;span class="na"&gt;#default&lt;/span&gt;&lt;span class="err"&gt;="&lt;/span&gt;&lt;span class="na"&gt;defaultProps&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       custom content...
     {{ defaultProps.type }}
  &lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;template&lt;/span&gt; &lt;span class="na"&gt;#title&lt;/span&gt;&lt;span class="err"&gt;="&lt;/span&gt;&lt;span class="na"&gt;titleProps&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {{ title }}
    {{ titleProps.status }}
  &lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/custom-button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that if there is no named slot. It is possible to use the default Props with this syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;custom-button&lt;/span&gt; &lt;span class="na"&gt;#default&lt;/span&gt;&lt;span class="err"&gt;="&lt;/span&gt;&lt;span class="na"&gt;defaultProps&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       custom content...
     {{ defaultProps.type }}
&lt;span class="nt"&gt;&amp;lt;/custom-button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#vue-router"&gt;
  &lt;/a&gt;
  Vue Router
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#clientside-routing"&gt;
  &lt;/a&gt;
  Client-Side Routing
&lt;/h3&gt;

&lt;p&gt;The client-side routing allows you to change the url address of the browser and load another Vue page / component without refreshing the browser. All this is possible thanks to the VueRouter library.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation-vuerouer-v4"&gt;
  &lt;/a&gt;
  Installation VueRouer v4
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;vue-router@4

// or vue cli plugin
vue add router
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#vuerouter-configuration"&gt;
  &lt;/a&gt;
  VueRouter Configuration
&lt;/h3&gt;

&lt;p&gt;Add in main.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createApp&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;VueRouter&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue-router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./pages/Home.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./pages/About.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;VueRouter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createRouter&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="na"&gt;history&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;VueRouter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createWebHistory&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="na"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;About&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#routerview"&gt;
  &lt;/a&gt;
  RouterView
&lt;/h3&gt;

&lt;p&gt;This component comes with the vue-router library and acts as a container to render the routes we have defined&lt;/p&gt;

&lt;p&gt;App.vue&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;router-view&amp;gt;&amp;lt;/router-view&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#routerlink"&gt;
  &lt;/a&gt;
  RouterLink
&lt;/h3&gt;

&lt;p&gt;On clicking this element, Vue will render the route specified by the 'router-link' tag and the 'to =' attribute. The render will take place where you placed your &amp;lt;router-view&amp;gt; &amp;lt;/router-view&amp;gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Home page&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;router-link&lt;/span&gt; &lt;span class="na"&gt;to=&lt;/span&gt;&lt;span class="s"&gt;"/about"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="nt"&gt;&amp;lt;/router-link&amp;gt;&lt;/span&gt;
    // or
      &lt;span class="nt"&gt;&amp;lt;router-link&lt;/span&gt; &lt;span class="na"&gt;:to=&lt;/span&gt;&lt;span class="s"&gt;"{ name: About }"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="nt"&gt;&amp;lt;/router-link&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style &lt;/span&gt;&lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"scss"&lt;/span&gt; &lt;span class="na"&gt;scoped&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#route-parameters"&gt;
  &lt;/a&gt;
  Route Parameters
&lt;/h3&gt;

&lt;p&gt;It is possible to extract the information relating to the path. Like for example the Id of a product: /products/id&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/products/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ProductDetails&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ProductDetails&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can then launch the link from the Products component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;router-link&lt;/span&gt; &lt;span class="na"&gt;:to=&lt;/span&gt;&lt;span class="s"&gt;"{ name: 'ProductDetails', params: { id: product.id }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    See details
&lt;span class="nt"&gt;&amp;lt;/router-link&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will finally be possible to read this parameter from the ProductDetail component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    The product ID is {{ $route.params.id }}
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is also possible to read this parameter as a component Props (eg ProductDetails component)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    The product ID is {{ idid }}
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To enable the conversion of the parameter to Props, you must mention it when you define the route.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/products/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ProductDetails&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ProductDetails&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#route-thisroute"&gt;
  &lt;/a&gt;
  $route / this.$route
&lt;/h3&gt;

&lt;p&gt;Is a global object that contains information about the current route:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;name&lt;/li&gt;
&lt;li&gt;fullPath&lt;/li&gt;
&lt;li&gt;path&lt;/li&gt;
&lt;li&gt;query&lt;/li&gt;
&lt;li&gt;params&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#route-redirection"&gt;
  &lt;/a&gt;
  Route redirection
&lt;/h3&gt;

&lt;p&gt;It is possible to redirect from one road to another.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/about-us&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#route-alias"&gt;
  &lt;/a&gt;
  Route Alias
&lt;/h3&gt;

&lt;p&gt;It is possible to have two routes which display the same component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;'/' et '/home' point to the same component. &lt;/p&gt;

&lt;p&gt;The alias property can also be an array ['/ home', '/ homepage']&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#404-redirect"&gt;
  &lt;/a&gt;
  404 redirect
&lt;/h3&gt;

&lt;p&gt;It is possible to redirect a page if the route does not exist&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/:catchAll(.*)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NotFound&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NotFount&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#modify-the-route-in-your-code-with-thisrouter"&gt;
  &lt;/a&gt;
  Modify the route in your code with this.$router
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;back&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;go&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c1"&gt;// or same thing&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;back&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;go&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c1"&gt;// or same thing&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;   
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#route-query"&gt;
  &lt;/a&gt;
  Route query
&lt;/h3&gt;

&lt;p&gt;It is possible to read the query parameters passed to the route&lt;br&gt;
ex: /products?brand=Apple&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    Filter Brand : {{ $route.query.brand }}
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is possible to call a route with a query parameter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;brand&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;brand&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If query is equal to * undefined * then it will not appear in the url bar of the browser&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nested-routes"&gt;
  &lt;/a&gt;
  Nested Routes
&lt;/h3&gt;

&lt;p&gt;Allows you to manage the sub-routes. ex: / products / 1050 / tags&lt;/p&gt;

&lt;p&gt;You must first define the sub route with the property * children *&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/products/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ProductDetails&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ProductDetails&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tags&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Tags&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt; 
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the ProductDetails component you can display the component tags using &amp;lt;route-view&amp;gt; tags&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  Product no
  {{ $route.params.id }}

  List of tags associated with the product
  &lt;span class="nt"&gt;&amp;lt;router-view&amp;gt;&amp;lt;/router-view&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#composition-api"&gt;
  &lt;/a&gt;
  Composition API
&lt;/h2&gt;

&lt;p&gt;Is an alternative to the Option API and allows us to write our code bundled and more naturally, without using properties / objects and without using the keyword 'this.'&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup-method"&gt;
  &lt;/a&gt;
  setup() method
&lt;/h3&gt;

&lt;p&gt;All the code of your component will be write inside this method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  export default &lt;span class="si"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the template and style section remains unchanged&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#return-value-of-the-setup-method"&gt;
  &lt;/a&gt;
  Return value of the setup () method
&lt;/h3&gt;

&lt;p&gt;If you want to use a variable or a function outside the setup () method, in the template for example, you must return it in the return () method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  export default &lt;span class="si"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;My Title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#props"&gt;
  &lt;/a&gt;
  Props
&lt;/h3&gt;

&lt;p&gt;You can access your component's props with the props parameter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  export default &lt;span class="si"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#reactive-variables"&gt;
  &lt;/a&gt;
  Reactive Variables
&lt;/h3&gt;

&lt;p&gt;To use the v-model directive on a variable. you must make this variable reactive with the function ref()&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;v&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;model&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  import &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt; from 'vue'
  export default &lt;span class="si"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;My Title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#value-property"&gt;
  &lt;/a&gt;
  .value property
&lt;/h3&gt;

&lt;p&gt;To modify a reactive variable, declared with ref(), you must use its .value property&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;v&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;model&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  import &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt; from 'vue'
  export default &lt;span class="si"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;My Title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ref-directive-to-link-an-html-element"&gt;
  &lt;/a&gt;
  ref directive to link an HTML element
&lt;/h3&gt;

&lt;p&gt;The ref directive can also be used to create a binding with an html element (replacing this.$ref in the API option))&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
import &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt; from 'vue'

export default &lt;span class="si"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#reactive-an-alternative-to-the-ref-function"&gt;
  &lt;/a&gt;
  reactive: an alternative to the ref function
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;v&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;model&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"state.title"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  import &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt; from 'vue'
  export default &lt;span class="si"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;My Title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the reactive function only takes an object as a value (no string, number, etc.) and that unlike the ref() function you should not use the .value property to return the value of the variable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#combination-of-beforecreate-and-created-lifecycle-hook"&gt;
  &lt;/a&gt;
  Combination of BeforeCreate and Created Lifecycle Hook
&lt;/h3&gt;

&lt;p&gt;To run code when creating the component simply place some code directly in setup()&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;v&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;model&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  import &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt; from 'vue'
  export default &lt;span class="si"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;My Title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Default value on creation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#onmounted"&gt;
  &lt;/a&gt;
  onMounted
&lt;/h3&gt;

&lt;p&gt;Allows you to run code when creating the component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
export default &lt;span class="si"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;onMounted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;onMounted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://fakestoreapi.com/products&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#emit"&gt;
  &lt;/a&gt;
  Emit
&lt;/h3&gt;

&lt;p&gt;The emit function replace $emit&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"save"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;save&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  import &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt; from 'vue'
  export default &lt;span class="si"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;emit&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;save&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;onCLickEvent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; 
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="si"&gt;}&lt;/span&gt;
  }
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-the-store-vuex"&gt;
  &lt;/a&gt;
  Using the Store (Vuex)
&lt;/h3&gt;

&lt;p&gt;The this.$store method is not available in composition API mode, you must now use the useStore() method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;v&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;model&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"saveTitle"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;save&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  import &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt; from 'vue'
  import &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vuex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;My Title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

      &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;saveTitle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;save&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the saveTitle function is in fact a function. Returning a function allows you not to execute the commit right away but only when calling saveTitle&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-computed-methods"&gt;
  &lt;/a&gt;
  The computed() methods
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  import &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt; from 'vue'
  import &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vuex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;My Title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

      &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The computed variable 'count' will be refreshed only if the value of the 'state.count' changes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#watch-method"&gt;
  &lt;/a&gt;
  Watch method
&lt;/h3&gt;

&lt;p&gt;Allows you to run code when modifying a variable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  import &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;watch&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt; from 'vue'
  import &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vuex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;My Title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

      &lt;span class="nx"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;old&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The title have change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To make a watch on several variables at the same time you can use the function watchEffect ()&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;watchEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function will run on each modification of all the variables present in the watchEffect()&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-router-and-route"&gt;
  &lt;/a&gt;
  Using Router and Route
&lt;/h3&gt;

&lt;p&gt;In Composition API mode you cannot use 'this.$router' and 'this.$route', you will have to use useRouter and useRoute&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  import &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRoute&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue-router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRoute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

      &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ltscript-setupgt"&gt;
  &lt;/a&gt;
  &amp;lt;script setup&amp;gt;
&lt;/h3&gt;

&lt;p&gt;It is possible to use the abbreviated syntax to create the code of your API composition&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  import &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;watch&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt; from 'vue'
  import &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vuex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;My Title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="nx"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;old&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The title have change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the 'script setup' attribute allows not to use a setup() method and no return either. They are managed automatically. Vue returns with all the variables and functions defined in the top level.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#props-and-emit-with-setup-attribute"&gt;
  &lt;/a&gt;
  Props and emit with setup attribute
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;defineEmit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

  &lt;span class="nx"&gt;defineProps&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;msg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="c1"&gt;// or&lt;/span&gt;
  &lt;span class="nx"&gt;defineProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="c1"&gt;// or&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defineProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="c1"&gt;// console.log(props.title)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;emit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defineEmit&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;handleClick&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;attrs&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#style-vbind"&gt;
  &lt;/a&gt;
  Style v-bind
&lt;/h3&gt;

&lt;p&gt;With Vue 3.2, It is now possible to use v-bind within the style section&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style &lt;/span&gt;&lt;span class="na"&gt;scope&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
css&lt;br&gt;
.title {&lt;br&gt;
  color: v-bind(color);&lt;br&gt;
}&lt;br&gt;
&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;


### Conclusion
Thank you for reading this article. If you want more content like this, click &amp;lt;strong&amp;gt; Follow &amp;lt;string&amp;gt; or &amp;lt;a href="https://twitter.com/EricTheCoder_" class="twitter-follow-button"&amp;gt; follow me on Twitter &amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Docker - Understanding the Basics</title>
      <author>Emma Donery</author>
      <pubDate>Thu, 12 Aug 2021 11:03:58 +0000</pubDate>
      <link>https://dev.to/emma_donery/docker-understanding-the-basics-2n37</link>
      <guid>https://dev.to/emma_donery/docker-understanding-the-basics-2n37</guid>
      <description>&lt;p&gt;Docker is an open-source centralized platform designed to create, deploy, and run applications. It  takes away repetitive, mundane configuration tasks and is used throughout the development life-cycle for fast, easy and portable application development &lt;br&gt;
Docker uses container on the host's operating system to run applications. It allows applications to use the same Linux kernel as a system on the host computer, rather than creating a whole virtual operating system. Containers ensure that our application works in any environment like development, test, or production.&lt;/p&gt;

&lt;p&gt;Docker Features&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easy and Faster Configuration - It helps us to configure the system easily and faster.We can deploy our code in less time and effort.&lt;/li&gt;
&lt;li&gt;Increase productivity - By easing technical configuration and rapid deployment of application. No doubt it has increase productivity.&lt;/li&gt;
&lt;li&gt;Application Isolation - It provides containers that are used to run applications in isolation environment. Each container is independent to another and allows us to execute any kind of application.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swarm - It is a clustering and scheduling tool for Docker containers. Swarm uses the Docker API as its front end, which helps us to use various tools to control it. It also helps us to control a cluster of Docker hosts as a single virtual host. It's a self-organizing group of engines that is used to enable pluggable backends&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Routing Mesh - It routes the incoming requests for published ports on available nodes to an active container. This feature enables the connection even if there is no task is running on the node. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Services - Services is a list of tasks that lets us specify the state of the container inside a cluster. Each task represents one instance of a container that should be running and Swarm schedules them across nodes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Security Management - It allows us to save secrets into the swarm itself and then choose to give services access to certain secrets.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#difference-between-docker-containers-and-virtual-machines"&gt;
  &lt;/a&gt;
  Difference between Docker Containers and Virtual Machines
&lt;/h4&gt;
&lt;h5&gt;
  &lt;a href="#docker-containers"&gt;
  &lt;/a&gt;
  Docker Containers
&lt;/h5&gt;

&lt;p&gt;Docker containers are the lightweight alternatives of the virtual machine. It allows developers to package up the application with all its libraries and dependencies, and ship it as a single package. The advantage of using a docker container is that you don't need to allocate any RAM and disk space for the applications. It automatically generates storage and space according to the application requirement. Also, Integration in a container is faster and cheap, does not waste of memory, and It uses the same kernel, but different distribution.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#virtual-machines"&gt;
  &lt;/a&gt;
  Virtual Machines
&lt;/h5&gt;

&lt;p&gt;A virtual machine is a software that allows us to install and use other operating systems (Windows, Linux, and Debian) simultaneously on our machine. The operating system in which virtual machine runs are called virtualized operating systems. These virtualized operating systems can run programs and preforms tasks that we perform in a real operating system&lt;br&gt;
However, Integration in virtual is slow and costly, wastes a lot of memory, and It uses multiple independent operating systems.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#why-docker"&gt;
  &lt;/a&gt;
  Why Docker??
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It runs the container in seconds instead of minutes.&lt;/li&gt;
&lt;li&gt;It uses less memory.&lt;/li&gt;
&lt;li&gt;It provides lightweight virtualization.&lt;/li&gt;
&lt;li&gt;It does not a require full operating system to run applications.&lt;/li&gt;
&lt;li&gt;It uses application dependencies to reduce the risk.&lt;/li&gt;
&lt;li&gt;Docker allows you to use a remote repository to share your container with others.&lt;/li&gt;
&lt;li&gt;It provides continuous deployment and testing environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#docker-container-and-image"&gt;
  &lt;/a&gt;
  Docker Container and Image
&lt;/h3&gt;

&lt;p&gt;Docker container is a running instance of an image. An image is a read-only template with instructions for creating a Docker container. &lt;br&gt;
A docker image is described in text file called a Dockerfile, which has a simple, well-defined syntax. An image does not have states and never changes.&lt;br&gt;
A Dockerfile is a text document that contains commands that are used to assemble an image.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#dockerfile-instructions"&gt;
  &lt;/a&gt;
  Dockerfile Instructions
&lt;/h2&gt;

&lt;p&gt;The instructions are not case-sensitive but you must follow conventions which recommend to use uppercase. Docker runs instructions of Dockerfile in top to bottom order, so the first instruction should be &lt;strong&gt;FROM&lt;/strong&gt; in order to specify the base image&lt;br&gt;
A statement begin with # treated as a comment. You can use RUN, CMD, FROM, EXPOSE, ENV etc instructions in your Dockerfile.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FROM&lt;/strong&gt;&lt;br&gt;
This instruction is used to set the Base Image for the subsequent instructions. A valid Dockerfile must have FROM as its first instruction. ARG is the only instruction that may precede FROM in the Dockerfile. &lt;a href="https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact"&gt;understand how ARG and FROM interact&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;ARG&lt;/span&gt;&lt;span class="s"&gt;  CODE_VERSION=latest&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; &amp;lt;image&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; &amp;lt;image&amp;gt;:&amp;lt;tag&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; &amp;lt;image&amp;gt;@&amp;lt;digest&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;NB: The tag or digest values are optional. If you omit either of them, the builder assumes a latest by default.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MAINTAINER&lt;/strong&gt;&lt;br&gt;
Allows you to set the Author field of the generated images.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;MAINTAINER&lt;/span&gt;&lt;span class="s"&gt; &amp;lt;name&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;LABEL&lt;/strong&gt;&lt;br&gt;
We can add labels to an image to organize images of our project. We need to use LABEL instruction to set label for the image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;LABEL&lt;/span&gt;&lt;span class="s"&gt; &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt; [&amp;lt;key&amp;gt;=&amp;lt;value&amp;gt; ...]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;RUN&lt;/strong&gt;&lt;br&gt;
This instruction is used to execute any command of the current image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;&amp;lt;&lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;shell form, the &lt;span class="nb"&gt;command &lt;/span&gt;is run &lt;span class="k"&gt;in &lt;/span&gt;a shell&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;executable&amp;gt;"&lt;/span&gt;, &lt;span class="s2"&gt;"&amp;lt;param1&amp;gt;"&lt;/span&gt;, &lt;span class="s2"&gt;"&amp;lt;param2&amp;gt;"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;exec &lt;/span&gt;form&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;CMD&lt;/strong&gt;&lt;br&gt;
This is used to execute application by the image.&lt;br&gt;
NB: There can be only one CMD in a Dockerfile. If we use more than one CMD, only last one will execute.&lt;/p&gt;

&lt;p&gt;The CMD instruction has three forms:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["&amp;lt;executable&amp;gt;","&amp;lt;param1&amp;gt;","&amp;lt;param2&amp;gt;"] (exec form, this is the preferred form)&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["&amp;lt;param1&amp;gt;","&amp;lt;param2&amp;gt;"] (as default parameters to ENTRYPOINT)&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; &amp;lt;command&amp;gt; &amp;lt;param1&amp;gt; &amp;lt;param2&amp;gt; (shell form)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;EXPOSE&lt;/strong&gt;&lt;br&gt;
Informs Docker that the container listens on the specified network port(s) at runtime.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; &amp;lt;port&amp;gt; [&amp;lt;port&amp;gt; ...]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;ENV&lt;/strong&gt;&lt;br&gt;
The ENV instruction sets the environment variable  to the value &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt; [&amp;lt;key&amp;gt;=&amp;lt;value&amp;gt; ...]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;ADD&lt;/strong&gt;&lt;br&gt;
Copies new files, directories, or remote file URLs from  and adds them to the filesystem of the image at the path &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;ADD&lt;/span&gt;&lt;span class="s"&gt; &amp;lt;src&amp;gt; [&amp;lt;src&amp;gt; ...] &amp;lt;dest&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;ADD&lt;/span&gt;&lt;span class="s"&gt; ["&amp;lt;src&amp;gt;", ... "&amp;lt;dest&amp;gt;"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;COPY&lt;/strong&gt;&lt;br&gt;
This instruction is used to copy new files or directories from source to the filesystem of the container at the destination.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; &amp;lt;src&amp;gt; [&amp;lt;src&amp;gt; ...] &amp;lt;dest&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ["&amp;lt;src&amp;gt;", ... "&amp;lt;dest&amp;gt;"] (this form is required for paths containing whitespace)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;ENTRYPOINT&lt;/strong&gt;&lt;br&gt;
Allows you to configure a container that will run as an executable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["&amp;lt;executable&amp;gt;", "&amp;lt;param1&amp;gt;", "&amp;lt;param2&amp;gt;"] (exec form, preferred)&lt;/span&gt;
&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; &amp;lt;command&amp;gt; &amp;lt;param1&amp;gt; &amp;lt;param2&amp;gt; (shell form)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VOLUME&lt;/strong&gt;&lt;br&gt;
Creates a mount point with the specified name and marks it as holding externally mounted volumes from native host or other containers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;VOLUME&lt;/span&gt;&lt;span class="s"&gt; ["&amp;lt;path&amp;gt;", ...]&lt;/span&gt;
&lt;span class="k"&gt;VOLUME&lt;/span&gt;&lt;span class="s"&gt; &amp;lt;path&amp;gt; [&amp;lt;path&amp;gt; ...]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;USER&lt;/strong&gt;&lt;br&gt;
The USER instruction sets the user name or UID to use when running the image and for any RUN, CMD and ENTRYPOINT instructions that follow it in the Dockerfile&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;USER&lt;/span&gt;&lt;span class="s"&gt; &amp;lt;username | UID&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;WORKDIR&lt;/strong&gt;&lt;br&gt;
The WORKDIR is used to set the working directory for any RUN, CMD and COPY instruction that follows it in the Dockerfile. If work directory does not exist, it will be created by default.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; &amp;lt;/path/to/workdir&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;NB: We can use WORKDIR multiple times in a Dockerfile.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ONBUILD&lt;/strong&gt;&lt;br&gt;
Adds to the image a trigger instruction to be executed at a later time, when the image is used as the base for another build. The trigger will be executed in the context of the downstream build, as if it had been inserted immediately after the FROM instruction in the downstream Dockerfile.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;ONBUILD &amp;lt;Dockerfile INSTRUCTION&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;STOPSIGNAL&lt;/strong&gt;&lt;br&gt;
The STOPSIGNAL instruction sets the system call signal that will be sent to the container to exit&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;STOPSIGNAL&lt;/span&gt;&lt;span class="s"&gt; &amp;lt;signal&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;HEALTHCHECK&lt;/strong&gt;&lt;br&gt;
Tells Docker how to test a container to check that it is still working&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;HEALTHCHECK&lt;/span&gt;&lt;span class="s"&gt; [&amp;lt;options&amp;gt;] CMD &amp;lt;command&amp;gt; (check container health by running a command inside the container)&lt;/span&gt;
&lt;span class="k"&gt;HEALTHCHECK&lt;/span&gt;&lt;span class="s"&gt; NONE (disable any healthcheck inherited from the base image)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SHELL&lt;/strong&gt;&lt;br&gt;
Allows the default shell used for the shell form of commands to be overridden&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;SHELL&lt;/span&gt;&lt;span class="s"&gt; ["&amp;lt;executable&amp;gt;", "&amp;lt;param1&amp;gt;", "&amp;lt;param2&amp;gt;"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>docker</category>
      <category>programming</category>
      <category>kubernetes</category>
      <category>devops</category>
    </item>
    <item>
      <title>Git bloom</title>
      <author>Muhammad Umar Khan</author>
      <pubDate>Thu, 12 Aug 2021 10:35:38 +0000</pubDate>
      <link>https://dev.to/mumarkhan999/git-bloom-395h</link>
      <guid>https://dev.to/mumarkhan999/git-bloom-395h</guid>
      <description>&lt;p&gt;This post contains the collection of examples of major git cli commands that we normally use in our daily office work. I have grouped them and organised in such a way that it will be easy to remember them and utilise them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pictorial-representation"&gt;
  &lt;/a&gt;
  Pictorial representation
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0KEhg-Zf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/npd8kfovuseixz3jdhjd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0KEhg-Zf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/npd8kfovuseixz3jdhjd.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qWYWDwuo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sr9t25dir4yv2nniu68m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qWYWDwuo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sr9t25dir4yv2nniu68m.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lDqJRii---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfo4wb64u0vik65viipr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lDqJRii---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfo4wb64u0vik65viipr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#startup"&gt;
  &lt;/a&gt;
  Startup
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;To turn any &lt;code&gt;directory&lt;/code&gt; into &lt;code&gt;git repo&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;After that add &lt;code&gt;remote&lt;/code&gt; of any &lt;code&gt;github&lt;/code&gt; repo to link your repo to remote&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;or&lt;/code&gt; You can just &lt;code&gt;clone&lt;/code&gt; a repo if you have any
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone &amp;lt;your github repo url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#to-view-raw-logs-endraw-"&gt;
  &lt;/a&gt;
  To view &lt;code&gt;logs&lt;/code&gt;
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#to-check-raw-status-endraw-of-tracked-untracked-files"&gt;
  &lt;/a&gt;
  To check &lt;code&gt;status&lt;/code&gt; of tracked / untracked files
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#remotes"&gt;
  &lt;/a&gt;
  Remotes
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#list-down-all-the-remotes-information"&gt;
  &lt;/a&gt;
  List down all the remotes information
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote -vv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#adding-a-raw-new-remote-endraw-"&gt;
  &lt;/a&gt;
  Adding a &lt;code&gt;new remote&lt;/code&gt;
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote add origin git@github.com:mumarkhan999/css-tricks.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#edit-an-raw-already-added-remote-endraw-"&gt;
  &lt;/a&gt;
  Edit an &lt;code&gt;already added remote&lt;/code&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Here &lt;code&gt;origin&lt;/code&gt; is the name of the &lt;code&gt;remote&lt;/code&gt; that you wanna edit
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote set-url origin git@github.com:mumarkhan999/elephant-fight-in-flex-layout.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#-raw-remove-endraw-already-added-origin"&gt;
  &lt;/a&gt;
  &lt;code&gt;Remove&lt;/code&gt; already added origin
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You will replace &lt;code&gt;origin&lt;/code&gt; with your remote name
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote remove origin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#-raw-fetch-endraw-data-from-raw-remote-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Fetch&lt;/code&gt; data from &lt;code&gt;remote&lt;/code&gt;
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git fetch origin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;it will bring branch names, meta data e.t.c.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#branching"&gt;
  &lt;/a&gt;
  Branching
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#list-down-raw-local-branches-endraw-"&gt;
  &lt;/a&gt;
  List down &lt;code&gt;local branches&lt;/code&gt;
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#list-down-all-branches"&gt;
  &lt;/a&gt;
  List down all branches
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch -a
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-branch"&gt;
  &lt;/a&gt;
  Creating a branch
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch my_new_branch
git checkout my_new_branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#creating-and-checking-out-branch-in-raw-1-step-endraw-"&gt;
  &lt;/a&gt;
  Creating and checking out branch in &lt;code&gt;1 step&lt;/code&gt;
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout -b my_new_branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-branch-from-raw-another-branch-endraw-not-from-the-current-one"&gt;
  &lt;/a&gt;
  Creating a branch from &lt;code&gt;another branch&lt;/code&gt; not from the current one
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout -b my_new_branch not_current_branch_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#checkout-to-the-last-branch-which-you-were-on-raw-without-name-endraw-"&gt;
  &lt;/a&gt;
  Checkout to the last branch which you were on &lt;code&gt;without  name&lt;/code&gt;
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout -
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#print-raw-current-branch-endraw-name"&gt;
  &lt;/a&gt;
  Print &lt;code&gt;current branch&lt;/code&gt; name
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git rev-parse --abbrev-ref HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#pushing-a-local-branch-to-a-remote-branch-having-different-name"&gt;
  &lt;/a&gt;
  Pushing a local branch to a remote branch having different name
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout -b my_local_master origin/master
...
git push origin my_local_master:master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can even push different branch to a different branch on remote&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push origin develop:master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will make the master on remote to the exact replica of develop from local&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-force-endraw-push"&gt;
  &lt;/a&gt;
  &lt;code&gt;Force&lt;/code&gt; push
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push origin branch_name -f
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-fetch-endraw-and-raw-pull-endraw-of-branch"&gt;
  &lt;/a&gt;
  &lt;code&gt;Fetch&lt;/code&gt; and &lt;code&gt;Pull&lt;/code&gt; of branch
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;fetch&lt;/code&gt; will just bring your branch from remote
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git fetch origin develop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;pull&lt;/code&gt; will &lt;code&gt;fetch&lt;/code&gt; as well as &lt;code&gt;merge&lt;/code&gt; the incoming data into &lt;code&gt;current branch&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git pull origin develop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#-raw-pull-endraw-with-default-which-is-raw-merge-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;pull&lt;/code&gt; with default which is &lt;code&gt;--merge&lt;/code&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;If you pull remote changes with the flag --merge, which is also the default, then your local changes are merged with the remote changes. This results in a merge commit that points to the latest local commit and the latest remote commit.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git pull --merge
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#-raw-pull-endraw-with-raw-rebase-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;pull&lt;/code&gt; with &lt;code&gt;--rebase&lt;/code&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;If you pull remote changes with the flag --rebase, then your local changes are reapplied on top of the remote changes.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git pull --rebase
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#deleting-multiple-git-branches-using-regular-expression"&gt;
  &lt;/a&gt;
  Deleting multiple git branches using regular expression
&lt;/h3&gt;

&lt;p&gt;You can use the git command as mentioned below to delete multiple git branches at once using regular expression&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch -D `git branch | grep "your regular expression"`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#list-down-all-the-branches-information"&gt;
  &lt;/a&gt;
  List down all the branches information
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch -vv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-rename-endraw-current-branch"&gt;
  &lt;/a&gt;
  &lt;code&gt;Rename&lt;/code&gt; current branch
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch -m new-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-rename-endraw-if-you-are-on-raw-other-branch-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Rename&lt;/code&gt; if you are on &lt;code&gt;other branch&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch -m old-name new-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#delete-the-oldname-remote-branch-and-push-the-newname-local-branch"&gt;
  &lt;/a&gt;
  Delete the old-name remote branch and push the new-name local branch
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push origin :old-name new-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#reset-the-upstream-branch-for-the-newname-local-branch"&gt;
  &lt;/a&gt;
  Reset the upstream branch for the new-name local branch
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Switch to the branch and then
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push origin -u new-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-deleting-endraw-a-branch"&gt;
  &lt;/a&gt;
  &lt;code&gt;Deleting&lt;/code&gt; a branch
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch -D branch_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-D&lt;/code&gt; is for forcefully&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#-raw-deleting-endraw-unnecessary-branches-of-a-raw-remote-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Deleting&lt;/code&gt; unnecessary branches of a &lt;code&gt;remote&lt;/code&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;This will list down the branches which are available to be &lt;code&gt;deleted&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote prune origin --dry-run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;This will delete them, it's better that you run both of these commands
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote prune origin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#bring-specific-file-from-raw-another-branch-endraw-"&gt;
  &lt;/a&gt;
  Bring specific file from &lt;code&gt;another branch&lt;/code&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Let's say you are on &lt;code&gt;master&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;You wanna bring specific file from &lt;code&gt;develop&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout develop -- lms/djangoapps/courseware/admin.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adding"&gt;
  &lt;/a&gt;
  Adding
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#adding-raw-all-endraw-"&gt;
  &lt;/a&gt;
  Adding &lt;code&gt;all&lt;/code&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;All the &lt;code&gt;newly&lt;/code&gt; created files are &lt;code&gt;untracked&lt;/code&gt; one&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git&lt;/code&gt; doesn't &lt;code&gt;track&lt;/code&gt; them&lt;/li&gt;
&lt;li&gt;To make them trackable you &lt;code&gt;add&lt;/code&gt; them individually
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add new1.txt new2.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;or&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add -A
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;or&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add directory/*
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#adding-only-raw-tracked-files-endraw-"&gt;
  &lt;/a&gt;
  Adding only &lt;code&gt;tracked files&lt;/code&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Now let's say there are two types of files in your &lt;code&gt;working directory&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;tracked / untracked&lt;/li&gt;
&lt;li&gt;You only want to &lt;code&gt;commit&lt;/code&gt; tracked one so
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add -u
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;will do the job
## Commiting
### Amend last commit message
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit --amend -m "New commit message."
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#amend-last-commit-without-editing-its-message"&gt;
  &lt;/a&gt;
  Amend last commit without editing its message
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit --amend --no-edit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tagging"&gt;
  &lt;/a&gt;
  Tagging
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#moving-git-tag-to-the-latest-commit"&gt;
  &lt;/a&gt;
  Moving git tag to the latest commit
&lt;/h3&gt;

&lt;p&gt;Let's say that you have a branch having three commits. On first commit you have a tag, but you wanna move it to the latest one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git tag -af &amp;lt;tag_name_on_first_commit&amp;gt;
git push origin --tags -f
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this you may need to update the tag/release description on github.&lt;/p&gt;

&lt;p&gt;In the above scenerio we moved the tag to the latest commit means the third one, but it is also possible to move it from first to second commit. You just need to specify the commit hash&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git tag -af &amp;lt;tag_name_on_first_commit&amp;gt; &amp;lt;commit_hash_of_second_commit&amp;gt;
git push origin --tags -f
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-fetching-endraw-tags-from-raw-remote-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Fetching&lt;/code&gt; tags from &lt;code&gt;remote&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git fetch --tags --all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#rebasing"&gt;
  &lt;/a&gt;
  Rebasing
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#rebasing-with-raw-other-branch-endraw-eg-raw-master-endraw-"&gt;
  &lt;/a&gt;
  Rebasing with &lt;code&gt;other branch&lt;/code&gt; e.g. &lt;code&gt;master&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git rebase master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rebasing-with-only-specific-range-of-commits"&gt;
  &lt;/a&gt;
  Rebasing (with only specific range of commits)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git rebase --onto &amp;lt;base_branch&amp;gt; &amp;lt;start_commit_hash&amp;gt; &amp;lt;end_commit_hash&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will create a commit for you (in deattached state) from which you can create a new branch or whatever you want&lt;br&gt;
you can now rebase your  with this commit&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#squashing-your-commits"&gt;
  &lt;/a&gt;
  Squashing your commits
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Here 4 is the number of commits that you wanna squash
git rebase -i HEAD~4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A file will be opened most probably in vim&lt;br&gt;
Now, leave the first commit with &lt;code&gt;p&lt;/code&gt; --&amp;gt; &lt;code&gt;pick&lt;/code&gt; option&lt;br&gt;
and change the rest of commits option to &lt;code&gt;s&lt;/code&gt; --&amp;gt; &lt;code&gt;squash&lt;/code&gt;&lt;br&gt;
Save the file, A new file will open having commit messages&lt;br&gt;
Do what ever you want with the commit messages and save it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#diff"&gt;
  &lt;/a&gt;
  Diff
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-ignoring-endraw-files-while-running-git-diff-command"&gt;
  &lt;/a&gt;
  &lt;code&gt;Ignoring&lt;/code&gt; files while running git diff command
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git diff my_branch_name ':!*.min.js' ':!*.js' ':!*.po' ':!*.underscore'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#taking-diff-of-raw-two-branches-endraw-"&gt;
  &lt;/a&gt;
  Taking diff of &lt;code&gt;two branches&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git diff feature1 feature2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#taking-diff-of-raw-current-branch-with-another-branch-endraw-"&gt;
  &lt;/a&gt;
  Taking diff of &lt;code&gt;current branch with another branch&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git diff other_branch_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#taking-diff-with-raw-stash-endraw-"&gt;
  &lt;/a&gt;
  Taking diff with &lt;code&gt;stash&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git diff stash@{0} 
# 0 is the number of stashed changes on the stack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#taking-diff-with-raw-last-commit-endraw-"&gt;
  &lt;/a&gt;
  Taking diff with &lt;code&gt;last commit&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git diff HEAD~1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#taking-diff-of-a-raw-specific-filefolder-of-two-different-branches-endraw-"&gt;
  &lt;/a&gt;
  Taking diff of a &lt;code&gt;specific file/folder of two different branches&lt;/code&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You need to use &lt;code&gt;relatvie&lt;/code&gt; path of the file/folder you wanna compare
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git diff first_branch second_branch -- myfile.cs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#reset"&gt;
  &lt;/a&gt;
  Reset
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#undo-the-changes-of-single-file-from-staging-and-unstaging"&gt;
  &lt;/a&gt;
  Undo the changes of single file from staging and unstaging
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout &amp;lt;your_file_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#wanna-move-your-file-from-staged-to-working-directory"&gt;
  &lt;/a&gt;
  Wanna move your file from staged to working directory
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git reset file_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;or to move all
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git reset
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#wanna-keep-your-last-commited-files-1-in-the-working-directory-but-not-as-commited-or-stagged"&gt;
  &lt;/a&gt;
  Wanna keep your last commited files (~1) in the working directory but not as commited or stagged
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git reset HEAD~1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#totally-undo-all-the-changes-which-are-in-staged-or-unstaged"&gt;
  &lt;/a&gt;
  Totally undo all the changes which are in staged or unstaged
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git reset --hard
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#totally-raw-sync-endraw-current-branch-with-other-branch"&gt;
  &lt;/a&gt;
  Totally &lt;code&gt;sync&lt;/code&gt; current branch with other branch
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Let's say you are on &lt;code&gt;local_develop&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;You have done some changes and multiple / single comit&lt;/li&gt;
&lt;li&gt;To make &lt;code&gt;local_develop&lt;/code&gt; just like &lt;code&gt;origin/develop&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout local_develop
git reset --hard origin/develop
# origin is the name of your remote
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#stashing"&gt;
  &lt;/a&gt;
  Stashing
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#dont-want-to-commit-but-raw-wanna-save-the-changes-endraw-"&gt;
  &lt;/a&gt;
  Don't want to commit but &lt;code&gt;wanna save the changes&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#to-take-back-your-raw-saved-changes-endraw-"&gt;
  &lt;/a&gt;
  To take back your &lt;code&gt;saved changes&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash pop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#to-list-down-your-raw-saved-changes-endraw-"&gt;
  &lt;/a&gt;
  To list down your &lt;code&gt;saved changes&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#cherrypicking"&gt;
  &lt;/a&gt;
  cherry-picking
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Cherry-pick the commits. Don't cherry-pick the merge.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--djfDIWdr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lw4eobe75vhsta226tyi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--djfDIWdr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lw4eobe75vhsta226tyi.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In its most basic form, you only need to provide the SHA identifier of the commit you want to integrate into your current HEAD branch&lt;/li&gt;
&lt;li&gt;This way, the specified revision will directly be committed to your currently checked-out branch
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git cherry-pick af02e0b
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;BUT If you would like to make some further modifications, you can also instruct Git to only add the commit's changes to your Working Copy - without directly committing them
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git cherry-pick af02e0b --no-commit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>github</category>
      <category>git</category>
    </item>
    <item>
      <title>Kinx v1.0.3 Relaeased.</title>
      <author>Kray-G</author>
      <pubDate>Thu, 12 Aug 2021 10:20:05 +0000</pubDate>
      <link>https://dev.to/krayg/kinx-v1-0-3-relaeased-4lde</link>
      <guid>https://dev.to/krayg/kinx-v1-0-3-relaeased-4lde</guid>
      <description>&lt;p&gt;Hello everyone!&lt;/p&gt;

&lt;p&gt;I published Kinx v1.0.3 as an official release. See &lt;a href="https://github.com/Kray-G/kinx/releases"&gt;Release Page&lt;/a&gt; for details or I put the history since v1.0.0 at the bottom of this article.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reference

&lt;ul&gt;
&lt;li&gt;First motivation ... &lt;a href="https://dev.to/krayg/kinx-as-a-script-language-4iko"&gt;The post of introduction&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Kinx, I wanted a scripting language with a syntax of C family.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Repository ... &lt;a href="https://github.com/Kray-G/kinx"&gt;&lt;/a&gt;&lt;a href="https://github.com/Kray-G/kinx"&gt;https://github.com/Kray-G/kinx&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;I am waiting for pull requests.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Any comments are welcome.&lt;br&gt;
And also I'll wait for a star on Github!&lt;/p&gt;

&lt;p&gt;See you!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#change-log"&gt;
  &lt;/a&gt;
  Change Log
&lt;/h2&gt;

&lt;p&gt;Here is a change log since v1.0.0.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#v103-officially-released-20210810"&gt;
  &lt;/a&gt;
  V1.0.3 (Officially Released) - 2021/08/10
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Improvements

&lt;ul&gt;
&lt;li&gt;  #308: Improvement of the stack usage.&lt;/li&gt;
&lt;li&gt;  Some feedbacks from V1.1.0.

&lt;ul&gt;
&lt;li&gt;  Supported putting a comma at the end of an argument's list for both declaration and calling.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;  Bug Fixed

&lt;ul&gt;
&lt;li&gt;  #302: Fixed a prblem of the string optimization.&lt;/li&gt;
&lt;li&gt;  #305: Fixed a prblem of no POPC in try.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#v102-officially-released-20210521"&gt;
  &lt;/a&gt;
  V1.0.2 (Officially Released) - 2021/05/21
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Bug Fixed

&lt;ul&gt;
&lt;li&gt;  #284: Fixed a segmentation fault problem on Linux.&lt;/li&gt;
&lt;li&gt;  #288: Incorrect message is displayed when &lt;code&gt;File.open&lt;/code&gt; failed.&lt;/li&gt;
&lt;li&gt;  #289: &lt;code&gt;File.setFiledate&lt;/code&gt; does not work correctly.&lt;/li&gt;
&lt;li&gt;  #293: Fixed a problem of a stack overflow with &lt;code&gt;=~&lt;/code&gt; or &lt;code&gt;!~&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#v101-officially-released-20210422"&gt;
  &lt;/a&gt;
  V1.0.1 (Officially Released) - 2021/04/22
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Improvements

&lt;ul&gt;
&lt;li&gt;  Improved type analysis for the language server.&lt;/li&gt;
&lt;li&gt;  Improved Array.keySet() for &lt;code&gt;Array&lt;/code&gt; itself.&lt;/li&gt;
&lt;li&gt;  #264: Supported to change directory.&lt;/li&gt;
&lt;li&gt;  #265: Supported &lt;code&gt;$pwd&lt;/code&gt; for getting a current directory.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;  Bug Fixed

&lt;ul&gt;
&lt;li&gt;  #235: Crash when using &lt;code&gt;_&lt;/code&gt; outside a function.&lt;/li&gt;
&lt;li&gt;  #236: Can't specify the class as a return type of function.&lt;/li&gt;
&lt;li&gt;  #237: Comparing between variables having a string is failed.&lt;/li&gt;
&lt;li&gt;  #256: Comparison operator will be failed with an integer on LHS and a variable(double) on RHS.&lt;/li&gt;
&lt;li&gt;  #257: Fails a destructuring assignment when declaration with const.&lt;/li&gt;
&lt;li&gt;  #258: There is a case that the bytecode is not outputted.&lt;/li&gt;
&lt;li&gt;  #267: Can't use a variable name using an upper case in debugger.&lt;/li&gt;
&lt;li&gt;  #269: Object item is removed by flatten().&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#v100-official-release-20210316"&gt;
  &lt;/a&gt;
  V1.0.0 (Official Release) - 2021/03/16
&lt;/h3&gt;

&lt;p&gt;This is 1st official release version.&lt;/p&gt;

</description>
      <category>kinx</category>
      <category>javascript</category>
      <category>ruby</category>
    </item>
    <item>
      <title>Story time with Treblle: The curious case of password reset</title>
      <author>Vedran Cindrić</author>
      <pubDate>Thu, 12 Aug 2021 09:47:53 +0000</pubDate>
      <link>https://dev.to/treblle/story-time-with-treblle-the-curious-case-of-password-reset-e1a</link>
      <guid>https://dev.to/treblle/story-time-with-treblle-the-curious-case-of-password-reset-e1a</guid>
      <description>&lt;p&gt;While working in our previous development company we were developing a new platform for a dear client. Our role was to develop the entire back-end with an API for mobile apps. Another development company, on a different side of the planet, was tasked to develop the mobile apps. At the beginning we had a lot of common challenges like communication, syncing time zones, documentation questions and others. I asked the client if we could add Treblle on the API side so we would eliminate some of these problems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As soon as we added Treblle and made a few calls to the API it was 100x easier.&lt;/strong&gt; The documentation was auto generated and updated, the mobile devs saw what they were doing. More importantly we also saw what they were doing so it was easier to understand how they were using the API and what problems they were facing. &lt;strong&gt;Interestingly enough our client also got into APIs and started to learn what we're doing, when we're working and when not 😎.&lt;/strong&gt; He was also a huge fan of the fact he could see the API response time because he felt like the app was slow and thought it was on the back-end side. Turns out it wasn't. Anyway…&lt;/p&gt;

&lt;p&gt;The app we were working on was already on the App store and the mobile team was preparing to do a new important update. When you are sending apps to the App Store if your app requires a login you HAVE to provide Apple with a login combination. We knew that, so we provided the credentials since day one and never changed them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The mobile team uploaded the new build, sent the app for review and after 2-3 days the build was rejected.&lt;/strong&gt; The reason Apple specified was "Login credentials were incorrect". Our client called me and was super irritated by the fact that the app got rejected. He started asking me why we changed the login data and explaining how he needed the update live ASAP. Now when something like this happens there aren’t a lot of options you have as a developer.&lt;/p&gt;

&lt;p&gt;One option is to investigate what happened by trying to login and reporting back to the client if it worked. What's even crazier is - if it works then why couldn't Apple login?! If it doesn’t work then you have to investigate your own team and the mobile apps team to see who changed the credentials and how. Finally you have to come back to your client and tell him xyz happened, we know what it was, we fixed it and 100% it won’t happen again.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The first thing I thought was let's use Treblle to see all the login attempts in the last 24 hours.&lt;/strong&gt; With Treblle you can view all requests between the API and apps including location and device data. Immediately I saw a request that happened a few hours ago, from an iOS device from Sunnyvale, California (Apple HQ). I also saw that they did in fact use the phone number we provided them for login, and that the API did return an error message saying that the login credentials were incorrect?!&lt;/p&gt;

&lt;p&gt;This is where it got interesting. With Treblle you can click on any request and find "More requests like this". Treblle will then go and find all requests made to the API from the same user. Taking into account things like IP, location and even the user ID. &lt;strong&gt;Because I could see requests in chronological order, as they were made by the Apple testers, I saw that the first thing they did was made a call to an API endpoint that resets the password&lt;/strong&gt; 🤣 I was shocked. I triple checked and realized exactly what happened. The app had a password reset option on the login screen. Apple testers clicked on reset password first. That sent an SMS with the new password. Since we used a made up phone number they didn’t get the SMS and didn’t think it would change the password.&lt;/p&gt;

&lt;p&gt;At that point I sent my client a link to the request on Treblle and explained to him what happened and what they did. We made a fix which wouldn’t change the password straight away but rather send a reset link in the SMS first. Not something my client wanted but got the job done. We sent the app for review and it got approved the next day😎 And yes, the first thing Apple did was the tried to reset the password 🚀.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If we didn't have Treblle I can guarantee you we would have never known what happened.&lt;/strong&gt; More importantly without Treblle we would have never been able to “prove” to the client what exactly happened. No other tool could help us figure this out that fast and easy. With Treblle it was clear as day to us, to him and to the mobile team. Since then the client always asked if Treblle was added to the API 💪🏻&lt;/p&gt;

</description>
      <category>tooling</category>
      <category>api</category>
      <category>ios</category>
      <category>startup</category>
    </item>
    <item>
      <title>GitHub 10 Repos for JavaScript Developer</title>
      <author>Suprabha</author>
      <pubDate>Thu, 12 Aug 2021 09:22:51 +0000</pubDate>
      <link>https://dev.to/suprabhasupi/github-10-repo-for-javascript-developer-23a9</link>
      <guid>https://dev.to/suprabhasupi/github-10-repo-for-javascript-developer-23a9</guid>
      <description>&lt;p&gt;I've included 10 amazing GitHub repos which will help you to become a better JavaScript Developer. These repository will clear your all doubts in Javascript, also you can practise more problems using the below repos.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-javascript-algorithms"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;JavaScript Algorithms&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Star:&lt;/strong&gt; ~116k ⭐️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UyJUVF51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/UhCNtkl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UyJUVF51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/UhCNtkl.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This repository contains JavaScript based examples of many popular algorithms and data structures.

Each algorithm and data structure has its own separate README with related explanations and links for further reading (including ones to YouTube videos).
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-javascript-questions"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://github.com/lydiahallie/javascript-questions"&gt; JavaScript Questions&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Star:&lt;/strong&gt; ~37k ⭐️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xgYhqmQQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/DmCQnR7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xgYhqmQQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/DmCQnR7.png" alt="JavaScript Questions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;
This repository contains a long list of (advanced) JavaScript questions along with their explanations and gets frequently updated
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-clean-code-javascript"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://github.com/ryanmcdermott/clean-code-javascript"&gt;Clean Code JavaScript&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Star:&lt;/strong&gt; ~56k ⭐️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7A0Onwm---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/jihs1hw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7A0Onwm---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/jihs1hw.png" alt="Clean Code JavaScript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;
This repository consists of the software engineering principles, from Robert C. Martin's book Clean Code, adapted for JavaScript. It's a guide for producing readable, reusable, and refactored software in JavaScript.
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-awesome-javascript"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://github.com/sorrycc/awesome-javascript"&gt;Awesome JavaScript&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jzHf1xC7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/CfIRLyn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jzHf1xC7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/CfIRLyn.png" alt="Awesome JavaScript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Star:&lt;/strong&gt; ~25k ⭐️&lt;/p&gt;

&lt;p&gt; A collection of awesome browser-side JavaScript libraries and resources. This repository contains a list of variety of frameworks, template engines, articles and post, documentations, reactive and functional programming 
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-30-seconds-of-code"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://github.com/30-seconds/30-seconds-of-code"&gt;30 seconds of Code&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Star:&lt;/strong&gt; ~82k ⭐️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VB3Rx000--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/nUdPeX9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VB3Rx000--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/nUdPeX9.png" alt="30 seconds of Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This repository contains a huge collection of short JavaScript code snippets which can be super useful while working on your JavaScript projects thus increasing your efficiency and knowledge.
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-you-dont-know-js"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://github.com/getify/You-Dont-Know-JS"&gt;You don't know JS&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Star:&lt;/strong&gt; ~143k ⭐️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jj4_V46k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Cw7SIHY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jj4_V46k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Cw7SIHY.png" alt="You don't know JS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This repo is a series of books on core mechanisms of the Javascript language. The 2nd edition of the series is currently in progress, while the first edition is available and is entirely free to read online!
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-js-interviews"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://github.com/kdn251/interviews"&gt;JS Interviews&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Star:&lt;/strong&gt; ~53k ⭐️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VLiWs6TK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ggWI35r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VLiWs6TK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ggWI35r.png" alt="Awesome Interviews"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; Your personal guide to Software Engineering technical interviews.
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-frontend-checklist"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://github.com/thedaviddias/Front-End-Checklist"&gt;Front-End Checklist&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Star:&lt;/strong&gt; ~55k ⭐️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PM5_dpGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PwqNb28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PM5_dpGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PwqNb28.png" alt="Front-End Checklist"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are a million things to take care of when you launch a website. So how do you ensure you have taken care of things that can break your product when it goes into production. Enter Front-end Checklist.
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-front-end-interview-handbook"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://github.com/yangshun/front-end-interview-handbook"&gt; Front End interview handbook&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Star:&lt;/strong&gt; ~31k ⭐️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G6xGTJ1Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/qojLPd1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G6xGTJ1Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/qojLPd1.png" alt=" Front End interview handbook"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This repo promises to make you go from zero to front-end interview hero even if you don't have prior interview experience. And, from the number of stargazers it has, it looks like it delivers on that promise.
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-airbnb-javascript"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://github.com/airbnb/javascript"&gt;Airbnb JavaScript&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Star:&lt;/strong&gt; ~113k ⭐️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X1HbjgIe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/SSJGliq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X1HbjgIe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/SSJGliq.png" alt="Airbnb JavaScript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A mostly reasonable approach to JavaScript
&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Thanks for reading the article ❤️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/suprabhasupi"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDe0OdcG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/4t25pJE.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;
        🌟 &lt;a href="https://twitter.com/suprabhasupi"&gt; Twitter&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        📚 &lt;a href="https://gum.co/css-pseudo-class-elements"&gt; Ebooks&lt;/a&gt;
      &lt;/td&gt;
&lt;td&gt;
        🌟 &lt;a href="https://www.instagram.com/suprabhasupi/"&gt; Instagram&lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>github</category>
    </item>
    <item>
      <title>Deploying our code at Feather</title>
      <author>vincent Audoire</author>
      <pubDate>Thu, 12 Aug 2021 09:01:04 +0000</pubDate>
      <link>https://dev.to/feather-insurance/deploying-our-code-at-feather-1h6a</link>
      <guid>https://dev.to/feather-insurance/deploying-our-code-at-feather-1h6a</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This article is part of our internal documentation at Feather. We build our product in the open and share our learnings with the community. We're always looking for talents to join our team &lt;a href="https://feather-insurance.com/careers"&gt;check out our careers page&lt;/a&gt;!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;At Feather, we love simple and efficient solutions. We firmly believe in continuous development and continuous integration with the shortest iteration cycle. Our workflows need to be designed so that if we need to deploy to productions &lt;em&gt;hundreds&lt;/em&gt; of times a day, we are be able to do so. &lt;/p&gt;

&lt;p&gt;We have been invested in automated tests from the start: we practice unit testing, integration testing, end to end tests, and more. We feel confident that we aren't breaking anything while developing. &lt;/p&gt;

&lt;p&gt;We use a branching policy inspired by &lt;a href="https://trunkbaseddevelopment.com"&gt;Trunk Based Development&lt;/a&gt; with the use of &lt;a href="https://martinfowler.com/articles/feature-toggles.html"&gt;Features Toggles&lt;/a&gt; in order to keep our velocity as high as possible. For version control, we're using GitHub and our continuous integration and continuous development runs on &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;. To learn more about this, check out our article on the &lt;a href="https://dev.to/feather-insurance/branching-policy-at-feather-3jjh"&gt;Branching policy at Feather&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This article describes our release and deployment policy. We have found a way to keep everyone on the team updated on important changes and have integrated it into our development workflow.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#deploying-our-code"&gt;
  &lt;/a&gt;
  Deploying our code
&lt;/h1&gt;

&lt;p&gt;Every commit pushed to the &lt;em&gt;main&lt;/em&gt; branch will trigger a staging build. In addition to this, every commit pushed to the &lt;em&gt;main&lt;/em&gt; branch will draft a new release on GitHub with the help of the &lt;a href="https://github.com/release-drafter/release-drafter"&gt;release drafter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The drafted release will contain all the commits added since the previous release and a suggested new version for the (soon to be) new release. The suggested new version is following the &lt;a href="https://semver.org"&gt;Semantic Versioning&lt;/a&gt; rules.&lt;/p&gt;

&lt;p&gt;In order to deploy our code to production, we simply need to click on the "Publish release" button on GitHub. From there, a GitHub action will take over and take care of the following: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deploy the code to production.&lt;/li&gt;
&lt;li&gt;Notify the team (on Slack) about a new release being deployed and let them know what's changed.&lt;/li&gt;
&lt;li&gt;Bump &lt;code&gt;package.json&lt;/code&gt; version to one of the drafted releases and push the changes to GitHub.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#checklist-for-releasing"&gt;
  &lt;/a&gt;
  Checklist for releasing ✅
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jAYZUacn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yir3xgvd6ijkhsu62fc9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jAYZUacn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yir3xgvd6ijkhsu62fc9.png" alt="draft-release-detail-view"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to publish a release we need to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Check that the SemVer is correct&lt;/li&gt;
&lt;li&gt;Check that the "Raw changelog" section contains the changes we wish to deploy&lt;/li&gt;
&lt;li&gt;Check that the "What’s changed" section is descriptive enough. This will be read by non-techies 🤓&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If everything is correct ✅, click on (4) "Publish release". The version will shortly go live and the changelog will be sent to the whole team.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#release-notes"&gt;
  &lt;/a&gt;
  Release notes
&lt;/h1&gt;

&lt;p&gt;Everyone on the team is following our release notes, so they have to be easy to read. That's why we've split the notes into two sections: a high-level summary that is added by the person publishing the release and the raw changelog that's compiled of all the commit messages.&lt;/p&gt;

&lt;p&gt;You can use our release drafter template in your project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;name-template:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'app:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;v$RESOLVED_VERSION'&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;tag-template:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'v$RESOLVED_VERSION'&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;template:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;What’s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Changed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;🤩&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;_Please&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;insert&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;human&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;readable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;changelog&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;based&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;raw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;changelog_&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Raw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;changelog&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;📃&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;$CHANGES&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It looks like this in our Slack:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pa1eCiv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ny7iuiegqdimv3otlr6x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pa1eCiv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ny7iuiegqdimv3otlr6x.png" alt="release-note-slack"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>githubaction</category>
      <category>ci</category>
      <category>cd</category>
    </item>
    <item>
      <title>스프링 주요 어노테이션 정리</title>
      <author>Ukjin Yang</author>
      <pubDate>Thu, 12 Aug 2021 08:59:23 +0000</pubDate>
      <link>https://dev.to/composite/-40c0</link>
      <guid>https://dev.to/composite/-40c0</guid>
      <description>&lt;p&gt;JRebel 제작사인 ZeroTurnaround (현재 Perforce가 인수함)에서 &lt;a href="https://www.jrebel.com/blog/spring-annotations-cheat-sheet"&gt;Spring Annotations Cheat Sheet&lt;br&gt;
&lt;/a&gt; 글을 올해 개제했는데, 상당히 유용한 정보이기에 내마음대로 알려주도록 하겠다.&lt;br&gt;
꼬우면 원문 가서 직접 번역하던가 하면 된다.&lt;br&gt;
스프링 개발하는 너님들의 많은 도움이 되기 바란다.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%EC%8A%A4%ED%94%84%EB%A7%81%EC%9D%98-%EC%A3%BC%EC%9A%94-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98"&gt;
  &lt;/a&gt;
  스프링의 주요 어노테이션
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;@Configuration&lt;/code&gt;&lt;/strong&gt;: 이 어노테이션을 단 클래스는 빈 설정을 담당하는 클래스가 된다. 이 클래스 안에서 &lt;code&gt;@Bean&lt;/code&gt; 어노테이션이 동봉된 메소드를 선언하면, 그 메소드를 통해 스프링 빈을 정의하고 생명주기를 설정하게 된다. 자바 기반의 config가 싫다면 XML 쓰면 된다.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;@ComponentScan&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;@Configuration&lt;/code&gt; 어노테이션과 함께 쓰면, 이 클래스는 자바 빈 설정 클래스이며, 이 &lt;code&gt;@ComponentScan&lt;/code&gt; 어노테이션에서 제공하는 &lt;code&gt;package&lt;/code&gt; 속성을 통해 스프링 빈 범위를 정의할 수 있다. 복수개를 지정하고 싶다면 자바 8에서는 단순히 같은 어노테이션을 쓰면 되지만, 자바 7 이하에서는 &lt;code&gt;@ComponentScans&lt;/code&gt; 어노테이션 안에 넣으면 된다.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;@Import&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;@Configuration&lt;/code&gt; 어노테이션이 선언된 스프링 설정 클래스를 가져온다. 클래스명을 기입하면 된다. 예를 들면, DB 빈 설정과 DB를 활용하는 빈 (Mybatis 등)을 같이 써야 할 경우 사용하면 된다. 이게 있으면 빈 선언 시 실행 순서도 보장되기 때문에 가끔 튀어나오는 빈 선언 오류도 막을 수 있다.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;@Component&lt;/code&gt;&lt;/strong&gt;: 빈을 선언하는 클래스를 작성하기 위해 넣는 어노테이션이다. 당연히 질리도록 쓸 어노테이션 중 하나일 것이다. 이들은 당연하겠지만 &lt;code&gt;@ComponentScan&lt;/code&gt; 의 주요 스캔 대상이다.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;@Service&lt;/code&gt;&lt;/strong&gt;: 사실 &lt;code&gt;@Component&lt;/code&gt; 어노테이션과 별 차이가 없어 보인다. 하지만 이녀석과 &lt;code&gt;@Component&lt;/code&gt; 어노테이션의 차이점을 알려면 &lt;strong&gt;캡슐화&lt;/strong&gt; 개념에 대한 이해가 필요하다. 이 말은 즉슨, 보통 이 어노테이션을 달은 클래스에는 '비즈니스 레이어' 로직에 맞게 짜기 때문에 보통 별도의 데이터를 가지고 있지 않을 것이다. 이건 아주 올바른 사용 케이스이다. 그렇다. 이 어노테이션을 단 클래스는. 그저 업무 메소드만 정의하면 된다. 다른 빈에서 가져와 처리를 하고 결과를 제공하는 그저 비즈니스 로직만 정의하면 된다. 평소처럼. 보통 스프링 MVC에 자주 쓰기 때문에 MVC 소속 어노테이션이라고 생각하지만 MVC 없어도 선언 가능하다.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;@Autowired&lt;/code&gt;&lt;/strong&gt;: 질리도록 쓰는 어노테이션 2번째. 이 어노테이션은 필드, 메소드, 생성자에다가 넣을 수 있다. 아는 그대로다. 스프링 빈을 가져오는 가장 기본적인 방법이다. 해당 클래스에 맞는 빈을 가져오는데, 만약 하나만 있으면 이름 아무렇게나 해도 잘 가져오고, 만약 2개 이상이면 시그니처 명칭에 맞는 빈을 가져오지만, 그 외의 경우는 &lt;code&gt;NoUniqueBeanDefinitionException&lt;/code&gt; 예외가 스프링 시작 시 반겨줄 것이다.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;@Bean&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;@Configuration&lt;/code&gt; 선언한 빈 설정 클래스에 빈 선언을 담당하는 어노테이션으로, 메소드에만 넣을 수 있다. 보통은 메소드 이름이 곧 빈 이름으로 탄생한다.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;@Lookup&lt;/code&gt;&lt;/strong&gt;: 이 어노테이션이 선언된 메소드는 리턴 타입을 가진 스프링 빈을 뱉는다. 메소드 본문을 아무리 화려하게 작성해도 씹힌다. 그렇게 작용하도록 AOP 디자인되어 있기 때문이다. 주로 &lt;code&gt;Provider&amp;lt;T&amp;gt;&lt;/code&gt; 클래스 감싼 빈 클래스처럼, 싱글톤 빈에 대한 새 인스턴스를 가져오려고 할 때 사용한다. 또다른 사용법도 있는데 이건 나중에 다루도록 하겠다.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;@Primary&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;@Configuration&lt;/code&gt; 선언한 빈 설정 클래스에 빈 선언을 담당하면서, &lt;strong&gt;기본&lt;/strong&gt; 빈 요소를 정의할 때 사용한다. 만약 같은 클래스로 여러 개의 빈을 설정했을 때, 이 어노테이션을 추가로 달면, &lt;code&gt;@Autowired&lt;/code&gt; 어노테이션을 통해 빈을 주입 시 이 어노테이션을 가진 빈을 우선적으로 가져온다고 보면 된다. 빈 관리에 편리한 기능이니 여러 빈을 다룰 때 참고하도록.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;@Required&lt;/code&gt;&lt;/strong&gt;: 일반적인 빈 클래스를 초기화 시, 반드시 설정(&lt;code&gt;setter&lt;/code&gt;)해야 하는 &lt;code&gt;setter&lt;/code&gt; 메소드를 정의할 때 사용한다. &lt;code&gt;@Bean&lt;/code&gt; 선언 및 XML 방식의 빈 선언 시, 만약 이 어노테이션을 통해 빈 속성을 정의하지 않으면 &lt;code&gt;BeanInitializationException&lt;/code&gt; 예외가 스프링 시작시 개발자를 반겨준다. 선언적 어노테이션(&lt;code&gt;@Component&lt;/code&gt; 등)에도 넣을 수 있는데, 이 때는  &lt;code&gt;@Autowired(required = false)&lt;/code&gt; 어노테이션 주입을 통해서 씹을 수 있다.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;@Value&lt;/code&gt;&lt;/strong&gt;: 생성자, &lt;code&gt;setter&lt;/code&gt; 따위의 메소드, 필드 등에다가 스프링에서 설정한 &lt;em&gt;값&lt;/em&gt;을 주입할 수 있다. 주로 &lt;code&gt;application.properties&lt;/code&gt; 및 스프링이나 자바 property 값을 가져올 때 쓴다.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;@DependsOn&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;@Bean&lt;/code&gt; 및 &lt;code&gt;@Component&lt;/code&gt; 등에 정의 및 선언한 빈 생성 시 요구되는 다른 빈을 정의할 때 사용한다. 이 어노테이션을 달면, 이 어노테이션에서 설정한 빈이 등록되지 전까지 어노테이션이 달린 빈을 선언하지 않게 된다. &lt;code&gt;@Import&lt;/code&gt; 어노테이션이 클래스 단위 종속성 관리라면, &lt;code&gt;@DependsOn&lt;/code&gt; 어노테이션은 빈 단위의 종속성 관리라고 보면 된다.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;@Lazy&lt;/code&gt;&lt;/strong&gt;: 이 어노테이션을 선언한 빈이나 빈 &lt;code&gt;getter&lt;/code&gt; 및 필드는 다른 빈처럼 스프링 시작 시 빈 초기화를 하는 것이 아닌, 처음 가져올 때 빈 초기화를 하게 된다, 만약 같은 빈을 가져올 때, 하나라도 이 어노테이션이 달리지 않으면 평소처럼 스프링 시작시 빈을 초기화하게 되므로, &lt;code&gt;@Bean&lt;/code&gt; 및 &lt;code&gt;@Component&lt;/code&gt; 어노테이션과 같이 선언하거나, 가져올 때 &lt;code&gt;@Lazy&lt;/code&gt; 어노테이션이 다 붙어있는지 확인해야 한다.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;@Scope&lt;/code&gt;&lt;/strong&gt;: 빈의 생명주기를 설정한다. 기본값은 뭐 많이 쓰는 &lt;code&gt;singleton&lt;/code&gt; 이고, 그다음 매 가져올 때마다 빈을 생성해서 보내주는 &lt;code&gt;prototype&lt;/code&gt; 이 있으며, 스프링 MVC가 있을 경우 요청 단위인 &lt;code&gt;request&lt;/code&gt;, 세션 단위인 &lt;code&gt;session&lt;/code&gt; 및 &lt;code&gt;globalSession&lt;/code&gt; 생명주기를 추가로 설정할 수 있다. 또한 아예 &lt;a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-custom-creating"&gt;커스텀 생명주기&lt;/a&gt; 설정도 가능하다.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;@Profile&lt;/code&gt;&lt;/strong&gt;: 이 어노테이션이 달린 빈은 특정 프로필에서만 동작하도록 설정할 수 있다. 예를 들어 &lt;code&gt;spring.profile=dev&lt;/code&gt; 설정 시 &lt;code&gt;@Profile("dev")&lt;/code&gt; 일 때만 빈이 초기화된다. 다른 프로필로 하면 없는 빈이 되기 때문에 빈 관리 잘 하도록.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#spring-boot-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98"&gt;
  &lt;/a&gt;
  Spring boot 어노테이션
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;@SpringBootApplication&lt;/code&gt;&lt;/strong&gt;: 스프링 부트는 기본적으로 이 어노테이션 기준으로 동작하도록 되어 있다. 스프링에서 필수적인 초기화를 담당하는 &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt;, &lt;code&gt;@ComponentScan&lt;/code&gt;, &lt;code&gt;@Configuration&lt;/code&gt; 어노테이션이 함축되어 있다. 이 클래스를 기준으로 빈 스캔을 하게 되며, 여기다가도 &lt;code&gt;@Bean&lt;/code&gt; 어노테이션을 이용한 빈 정의도 가능하다.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;@EnableAutoConfiguration&lt;/code&gt;&lt;/strong&gt;: 스프링 부트의 핵심 어노테이션으로, 여태까지 Spring boot 없이 XML이던 자바던 필수적으로 &lt;code&gt;annotation-driven&lt;/code&gt; 이나 &lt;code&gt;annotation-config&lt;/code&gt; 등... 필수적으로 스프링에 세팅하는 왠만한 것들을 자동 설정하여 &lt;strong&gt;일단 돌아가게&lt;/strong&gt; 하도록 도와주는 어노테이션이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#spring-mvc-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98"&gt;
  &lt;/a&gt;
  Spring MVC 어노테이션
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;@Controller&lt;/code&gt;&lt;/strong&gt;: 이 어노테이션을 통해 웹 요청의 기준을 담당한다. 이 어노테이션을 통해 빈 등록과 동시에 라우팅 테이블에 등록하는 중요한 어노테이션이다. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;@ResponseBody&lt;/code&gt;&lt;/strong&gt;: 컨트롤러 메소드 리턴값에 이 어노테이션을 선언함으로써 스프링은 해당 응답 객체를 클라이언트가 요구하는 요청 내용 유형(&lt;code&gt;Content-Type&lt;/code&gt;)에 따라 응답하도록 도와주는 어노테이션이다. 보통은 Jackson 모듈에 의해 &lt;code&gt;json&lt;/code&gt; 유형으로 응답해줄 것이며, 클라이언트가 &lt;code&gt;xml&lt;/code&gt; 응답을 요청하면 &lt;code&gt;xml&lt;/code&gt; 응답을 해주기도 하고, 경우에 따라 응답 유형을 &lt;code&gt;mimeType&lt;/code&gt; 에 따라 설정할 수 있다.(예: MessagePack 등)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;@RestController&lt;/code&gt;&lt;/strong&gt;: 이 어노테이션을 달면, 모든 컨트롤러 메소드는 &lt;code&gt;@ResponseBody&lt;/code&gt; 어노테이션이 달린 반환 값을 달고 다니게 된다. 주로 REST API 설계 시 필수 어노테이션이라 보면 된다. 물론 &lt;code&gt;ModelAndView&lt;/code&gt; 처럼 특수한 유형은 스프링이 평소 그대로 처리하여 응답해준다.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;@RequestMapping(method = RequestMethod.GET, value = "/path")&lt;/code&gt;&lt;/strong&gt;: 메소드에 달면, 해당 메소드는 이 어노테이션이 설정한 경로를 호출했을 때 메소드가 설정한 응답값을 받게 되며, 컨트롤러 클래스에 달면, 클래스에 설정한 경로를 기준삼아 각 메소드는 클래스 경로의 하위 경로로 추가되어 경로가 잡히게 된다. 또한 &lt;code&gt;method&lt;/code&gt; 설정으로 &lt;code&gt;GET&lt;/code&gt;만 받거나, &lt;code&gt;POST&lt;/code&gt;로 받는 등 특정 HTTP 메소드에만 응답 가능하도록 설정할 수 있으며, &lt;code&gt;GET&lt;/code&gt; 의 경우 &lt;code&gt;@GetMapping&lt;/code&gt; 같이 메소드 별칭 어노테이션이 있으니 이걸 활용해도 된다. 거기에다가 &lt;code&gt;consumes&lt;/code&gt; 속성으로 요청 값에 대한 유형을 한정지을 수 있으며, &lt;code&gt;produces&lt;/code&gt; 속성을 통해 응답 유형을 강제할 수 있다. 이들 둘이 설정 시 지정 타입 안맞으면 &lt;code&gt;400 Bad Request&lt;/code&gt; 응답을 뱉도록 스프링에서 설정되어 있다.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;@RequestParam(value="name", defaultValue="World")&lt;/code&gt;&lt;/strong&gt;: 컨트롤러 메소드 인자에서 요청값을 받을 때, 요청 주소(URL)에 &lt;code&gt;?&lt;/code&gt; 뒤로 시작하는 질의 문자열, &lt;code&gt;POST&lt;/code&gt; 전송 시 요청받을 키/값, 등을 받을 수 있으며, &lt;code&gt;required&lt;/code&gt; 속성으로 필수 여부를 지정할 수 있고, &lt;code&gt;defaultValue&lt;/code&gt; 속성을 통해 요청이 없을 경우 대체 기본값을 설정할 수 있다. 만약 &lt;code&gt;required = true&lt;/code&gt; 일 경우 해당 파라미터 없이 호출하면 &lt;code&gt;400 Bad Request&lt;/code&gt; 응답을 뱉도록 스프링에서 설정되어 있다.
&lt;strong&gt;Spring Webflux 사용시 주의!&lt;/strong&gt;: Spring WebFlux 사용시 MVC 패턴을 사용할 수 있으나, &lt;code&gt;@RequestParam&lt;/code&gt; 어노테이션은 요청 주소 &lt;code&gt;?&lt;/code&gt; 뒤에 질의 문자열만 받게 된다. 만약 &lt;code&gt;POST&lt;/code&gt; 를 통해 얻은 값을 얻고 싶으면, &lt;code&gt;@ModelAttribute&lt;/code&gt; 어노테이션을 사용해야 한다. (내 경험 -&amp;gt; &lt;a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html#webflux-ann-requestparam"&gt;Spring 공식 문서&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;@PathVariable("placeholderName")&lt;/code&gt;&lt;/strong&gt;: 동적 라우팅 구성 시, (예: &lt;code&gt;/path/to/{placeholderName}&lt;/code&gt;) 동적 라우팅에 대한 바인딩 값을 가져오는 인자 어노테이션이다. 길게 설명할 거 없이 동적 라우팅에서 동적 값을 가져올 때 없어서 안될 어노테이션이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;와 고생했다. 끗.&lt;/p&gt;

</description>
      <category>java</category>
      <category>spring</category>
      <category>korean</category>
      <category>springframework</category>
    </item>
    <item>
      <title>How to Create Forms with Webix JavaScript</title>
      <author>Serhii Pylypchuk</author>
      <pubDate>Thu, 12 Aug 2021 08:57:50 +0000</pubDate>
      <link>https://dev.to/serhiipylypchuk1991/how-to-create-forms-with-webix-javascript-m61</link>
      <guid>https://dev.to/serhiipylypchuk1991/how-to-create-forms-with-webix-javascript-m61</guid>
      <description>&lt;p&gt;The daily routine of a typical programmer consists of monotonous keystrokes and coffee breaks. A good programmer can reach the desired result with fewer keystrokes. And I don't mean the "&lt;em&gt;Ctrl+C / Ctrl+V&lt;/em&gt;" combination, as you might think :) In this article, I want to tell you how to save precious time and nerves if you need to create a beautiful and functional form.&lt;/p&gt;

&lt;p&gt;There are many libraries that provide a large number of features for working with forms. But today we will consider only one of the most convenient and multifunctional tools for building app interfaces of any complexity. It is about the Webix library and its capabilities.&lt;/p&gt;

&lt;p&gt;To prove that these are not empty words, we will create a small app for bookselling and see how to implement an &lt;strong&gt;order form&lt;/strong&gt; using Webix components.&lt;/p&gt;

&lt;p&gt;You can find the full source code and live demo &lt;a href="https://github.com/serhiipylypchuk1991/book-store-service"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Webix and Its Capabilities&lt;/h1&gt;

&lt;p&gt;Webix UI is a &lt;a href="https://webix.com/"&gt;JavaScript library&lt;/a&gt; that allows you to create a responsive design without worrying about the app's performance. The range of possibilities is represented by UI components of varying complexity. It can be a simple button and a complex solution. Each widget includes a whole set of methods and properties for flexible configuring and controlling. Besides, the library has extra tools. For example, event handling, methods of working with data, interaction with the server, styling themes and much more. You can find out more information about capabilities in the &lt;a href="https://docs.webix.com/"&gt;documentation&lt;/a&gt;. Now it is time to move on to the practice.&lt;/p&gt;

&lt;h1&gt;Main Preparations&lt;/h1&gt;

&lt;p&gt;In order to use the Webix library, we need to include it in the main index.html file. It is worth mentioning here that the library is distributed in 2 versions: the basic &lt;a href="https://webix.com/get-webix-gpl/"&gt;GPL&lt;/a&gt; and extended &lt;a href="https://webix.com/download/"&gt;Pro&lt;/a&gt; version. The GPL version is free and provides a wide set of features that cover 97.26% of our day-to-day needs. But for working with forms, which are the main topic of this article, we will need some special features of the advanced version. I will mention them in the process. Based on this, we will use the extended Pro trial version to get the most impact.&lt;/p&gt;

&lt;p&gt;To get the trial version of the library, we need to visit the &lt;a href="https://webix.com/download/"&gt;download page&lt;/a&gt;, enter the necessary data and get a link for downloading the coveted archive.&lt;/p&gt;

&lt;p&gt;The archive includes the &lt;strong&gt;&lt;em&gt;webix/codebase/&lt;/em&gt;&lt;/strong&gt; folder with two sacred files, namely: &lt;em&gt;"webix.js"&lt;/em&gt; and &lt;em&gt;"webix.css"&lt;/em&gt;. In order for the Webix magic to start working, we need to move this folder into the root of our project and include the library source files in the &lt;em&gt;index.html&lt;/em&gt; file:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;It's worth noting that these files are also available via the CDN at the following links:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We'll use local files, as they work faster and do not need Internet access (sometimes it happens). The &lt;em&gt;index.html&lt;/em&gt; file looks like this:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We have created a basic &lt;em&gt;index.html&lt;/em&gt; file and included all the necessary tools. Let's start with making an overview of our app.&lt;/p&gt;

&lt;h1&gt;Application Overview&lt;/h1&gt;

&lt;p&gt;We have a small bookselling app. It consists of a toolbar and two replaceable modules, namely:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;module with a catalog of books&lt;/li&gt;
&lt;li&gt;module with a book description and order form.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The module with the catalog consists of small blocks, 2 items in one row. Each block contains a short description of the product and button to order. It is worth clarifying here that we use the &lt;strong&gt;&lt;a href="https://docs.webix.com/desktop__dataview.html"&gt;dataview&lt;/a&gt;&lt;/strong&gt; widget for creating this module. In the browser, we will see the following result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--60VwABo2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xu2qk4w6hikm0tuxlviv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--60VwABo2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xu2qk4w6hikm0tuxlviv.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When clicking on the "&lt;strong&gt;Buy now&lt;/strong&gt;" button, the user will see the module with a detailed description of the product. For its creation we use the &lt;strong&gt;&lt;a href="https://docs.webix.com/desktop__template.html"&gt;template&lt;/a&gt;&lt;/strong&gt; widget. Next to the product description we will place the module with our form, which this article is devoted to. In the browser, we will see the following result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ueGGcBTG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6i1r65310u3ubtb3h746.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ueGGcBTG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6i1r65310u3ubtb3h746.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And now our task is to add a module with a form, where the user can enter all the necessary data for ordering. As you may know, the purpose of any form is collecting information from users. In our case, we are going to collect the following data:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;information about the order and its delivery&lt;/li&gt;
&lt;li&gt;information about the user&lt;/li&gt;
&lt;li&gt;information about the payment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each form should contain input fields and various controls, namely: checkboxes, radiobuttons, selectors, buttons and much more. Considering the data we need to collect, our form will be large enough.&lt;/p&gt;

&lt;p&gt;If we don't want to scare off the user with a large number of fields and controls, let's divide the form into semantic groups mentioned above. Each group will deal with each particular order step. Group will be placed in a separate tab and the user will be able to navigate back and forth through them. There will be 3 tabs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the first one includes an order form with the possibility to choose between the *"pick-up"* and *"delivery"* options. If the user chooses *"delivery"*, the app will display some extra fields for entering the desired delivery address&lt;/li&gt;
&lt;li&gt;the second one includes a form for user's personal data&lt;/li&gt;
&lt;li&gt;the last tab includes a form to collect information about the user's credit card. , where the user may enter information about the credit card.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The interface of each form will be created in a separate file and saved to a variable. These variables will be used for building the layout in the &lt;em&gt;index.html&lt;/em&gt; file.&lt;/p&gt;

&lt;h1&gt;Layout for Module with Forms&lt;/h1&gt;

&lt;p&gt;In this article, we will not dive into the details of building the entire app layout. If you would like to study this topic more deeply, read the &lt;a href="https://webix-ui.medium.com/creating-a-booking-application-with-webix-ui-32e1ee42e799"&gt;Creating a Booking App with Webix UI&lt;/a&gt; article. You can also refer to the &lt;strong&gt;&lt;a href="https://docs.webix.com/desktop__layout.html"&gt;layout&lt;/a&gt;&lt;/strong&gt; documentation. There you will find an exhaustive description of all properties and methods with corresponding samples.&lt;/p&gt;

&lt;p&gt;Here we are interested in only the part of the layout containing the tabs with forms. These tabs will be switched by the user dynamically. For such cases, Webix provides a special &lt;strong&gt;&lt;a href="https://docs.webix.com/api__refs__ui.multiview.html"&gt;multiview&lt;/a&gt;&lt;/strong&gt; component. The needed modules (in our case it is the forms) have to be placed in the array of the &lt;strong&gt;&lt;em&gt;cells&lt;/em&gt;&lt;/strong&gt; property. When initial loading, the first element of this array will be displayed. To navigate between modules, we need to set them a unique &lt;strong&gt;id&lt;/strong&gt;. The code of layout looks like this:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We have created the layout with forms. Now let's get down to the forms directly. And we start with the order form.&lt;/p&gt;

&lt;h1&gt;Order Form&lt;/h1&gt;

&lt;p&gt;The order form will consist of two logical parts. The first part will contain the fields for information about the order itself, and the second one - about its delivery.&lt;/p&gt;

&lt;p&gt;Initially, the form will be displayed only with the "&lt;strong&gt;Order Information&lt;/strong&gt;" section:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VZf0a8bl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9eqbn0qwd4nryx87mh2j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VZf0a8bl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9eqbn0qwd4nryx87mh2j.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second one "&lt;strong&gt;Delivery Information&lt;/strong&gt;" section will be hidden by default. We will show it only if the user selects the corresponding option of the &lt;strong&gt;radio&lt;/strong&gt; control. The order form with 2 sections will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h05aqpBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pzhe3s1mvd7f7k2rh7hw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h05aqpBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pzhe3s1mvd7f7k2rh7hw.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To navigate through the tabs with forms, we will use the "&lt;strong&gt;Back&lt;/strong&gt;" and "&lt;strong&gt;Next&lt;/strong&gt;" buttons. The former button returns us to the catalog of goods, and the latter displays the next form.&lt;/p&gt;

&lt;p&gt;Now let's take a look at how to implement all of this in code.&lt;/p&gt;

&lt;p&gt;To collect data from users, Webix provides a special &lt;a href="https://docs.webix.com/desktop__form.html"&gt;&lt;strong&gt;form&lt;/strong&gt;&lt;/a&gt; widget and a number of related &lt;a href="https://docs.webix.com/desktop__controls.html"&gt;&lt;strong&gt;controls&lt;/strong&gt;&lt;/a&gt;. The form organisation is similar to the &lt;a href="https://docs.webix.com/desktop__layout.html"&gt;&lt;strong&gt;layout&lt;/strong&gt;&lt;/a&gt; component. We can divide form into rows and columns, putting the necessary controls into the corresponding containers.&lt;/p&gt;

&lt;p&gt;We create a form in the &lt;em&gt;order_form.js&lt;/em&gt; file and save it to the &lt;strong&gt;order_form&lt;/strong&gt; variable:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Here we also need to define the form layout mentioned above. For doing this, the widget has dedicated &lt;a href="https://docs.webix.com/api__link__ui.form_cols_config.html"&gt;&lt;strong&gt;&lt;em&gt;cols&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;, &lt;a href="https://docs.webix.com/api__link__ui.form_rows_config.html"&gt;&lt;strong&gt;&lt;em&gt;rows&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; and &lt;a href="https://docs.webix.com/api__link__ui.form_elements_config.html"&gt;&lt;strong&gt;&lt;em&gt;elements&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; properties. The first two properties allow us to divide the component interface into columns and rows. The &lt;strong&gt;&lt;em&gt;elements&lt;/em&gt;&lt;/strong&gt; property we are going to use, allows us to place the form elements as rows. All we need to do is to place two sections with the desired fields into the array of this property. Now let's tackle these sections.&lt;/p&gt;

&lt;h2&gt;The "Order Information" Section&lt;/h2&gt;

&lt;p&gt;To group the form fields into sections, we use the &lt;a href="https://docs.webix.com/api__refs__ui.fieldset.html"&gt;&lt;strong&gt;fieldset&lt;/strong&gt;&lt;/a&gt; component. The first section is "&lt;strong&gt;Order Information&lt;/strong&gt;". It combines several inputs for collecting the order data. The name of this section is defined via the &lt;strong&gt;&lt;em&gt;label&lt;/em&gt;&lt;/strong&gt; property. The desired controls will be described in the object of the &lt;strong&gt;&lt;em&gt;body&lt;/em&gt;&lt;/strong&gt; property.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;All the fields within this section will be arranged in rows. For this, we need to put them inside the array of the &lt;strong&gt;&lt;em&gt;rows&lt;/em&gt;&lt;/strong&gt; property. Now let's create these fields.&lt;/p&gt;

&lt;h3&gt;Special Field for Order Name&lt;/h3&gt;

&lt;p&gt;Let's start with the field that contains the order name. It doesn't need any data entry, since its value is set dynamically. To create this field, we can use 2 label components and arrange them as columns. The first component will contain the field name, and the second one will contain the name of the selected item (in our case it is the book title).&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now the section looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KMSHhtNZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3817e11u5mm86i4377jd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KMSHhtNZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3817e11u5mm86i4377jd.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the second label we need to set the &lt;strong&gt;&lt;em&gt;name&lt;/em&gt;&lt;/strong&gt; property to the &lt;strong&gt;&lt;em&gt;order_name&lt;/em&gt;&lt;/strong&gt; value. The unique name is required to access corresponding form elements. The reason is that the value of this control will be set and read dynamically via the form API. We also need to specify the unique names for other fields, the values ​​of which we are going to set or read.&lt;/p&gt;

&lt;h3&gt;Control for Goods Amount Setting&lt;/h3&gt;

&lt;p&gt;In this section we need to give the user an ability to indicate the desired number of goods. To do this, let's use the special &lt;a href="https://docs.webix.com/desktop__counter.html"&gt;&lt;strong&gt;counter&lt;/strong&gt;&lt;/a&gt; tool and specify its label and unique name. We can also define the min and max values via the dedicated &lt;strong&gt;&lt;em&gt;min&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;max&lt;/em&gt;&lt;/strong&gt; properties.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now the section looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9IgmBmT_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3s5phx5y3trmhms0lh93.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9IgmBmT_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3s5phx5y3trmhms0lh93.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Input Field for Gift Card&lt;/h3&gt;

&lt;p&gt;Now let's create a field where the user can enter a gift card number. It is best to use the &lt;a href="https://docs.webix.com/desktop__text.html"&gt;&lt;strong&gt;text&lt;/strong&gt;&lt;/a&gt; control here. Besides the name and label, we can set a placeholder via the &lt;strong&gt;&lt;em&gt;placeholder&lt;/em&gt;&lt;/strong&gt; property and a special icon on the right part of the field via the &lt;strong&gt;&lt;em&gt;clear&lt;/em&gt;&lt;/strong&gt; property. The icon will appear when the user enters data in the field. When he clicks on this icon, the entered data will be deleted and the icon will disappear.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now the section looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EW0Ppx0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/khit0sf4bq5du8yj7j28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EW0Ppx0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/khit0sf4bq5du8yj7j28.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Special Field for Order Price&lt;/h3&gt;

&lt;p&gt;Next, we have a field for displaying the order price. The price, as well as the order name, is set dynamically via the form's API and changes depending on the selected parameters. Here we do the same as with the order name field: use 2 &lt;a href="https://docs.webix.com/desktop__label.html"&gt;&lt;strong&gt;label&lt;/strong&gt;&lt;/a&gt; components, place them as columns and set the name to the second one through its &lt;strong&gt;&lt;em&gt;name&lt;/em&gt;&lt;/strong&gt; property.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now the section looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IRhwmLRG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x2kwtzqgdhde58dxtdr9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IRhwmLRG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x2kwtzqgdhde58dxtdr9.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Control for Order Receiving Method&lt;/h3&gt;

&lt;p&gt;In this section, we have to implement the field where the user can select the receiving order method: pick-up or delivery. We can do this via the &lt;a href="https://docs.webix.com/desktop__radio.html"&gt;&lt;strong&gt;radio&lt;/strong&gt;&lt;/a&gt; control with two options. The label of this control will be empty, because the radio button names are informative enough. The options data for the radio buttons are set via the &lt;strong&gt;&lt;em&gt;options&lt;/em&gt;&lt;/strong&gt; property.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now let's make it so that if the user switches between the "&lt;em&gt;Delivery&lt;/em&gt;" and "&lt;em&gt;Pick-up&lt;/em&gt;" options, the "&lt;strong&gt;Delivery Information&lt;/strong&gt;" section will be displayed or hidden correspondingly. Let me remind you that the "&lt;em&gt;Pick-up&lt;/em&gt;" option is selected by default, and the section itself is hidden.&lt;/p&gt;

&lt;p&gt;To handle the desired event, we need to specify the special &lt;strong&gt;&lt;em&gt;on&lt;/em&gt;&lt;/strong&gt; property into the constructor of the &lt;strong&gt;radio&lt;/strong&gt; control. In the object of this property, we also need to specify the required event (in our case, it is &lt;em&gt;onChange&lt;/em&gt;) and set to it the desired handler.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;First, we get the current value of the &lt;strong&gt;radio&lt;/strong&gt; control via its &lt;strong&gt;getValue()&lt;/strong&gt; method. If the value is 1 (the "&lt;em&gt;pick-up&lt;/em&gt;" option is selected), we will hide the "&lt;strong&gt;Delivery Information&lt;/strong&gt;" section via its &lt;strong&gt;hide()&lt;/strong&gt; method.&lt;/p&gt;

&lt;p&gt;If the value is 2 (the "&lt;em&gt;delivery&lt;/em&gt;" option is selected), we will display the "&lt;strong&gt;Delivery Information&lt;/strong&gt;" section via its &lt;strong&gt;show()&lt;/strong&gt; method.&lt;/p&gt;

&lt;p&gt;The whole section looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1UoYXvjc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yktlnysgpne0oos8yauh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1UoYXvjc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yktlnysgpne0oos8yauh.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;The "Delivery Information" Section&lt;/h2&gt;

&lt;p&gt;Now let's move on to the "&lt;strong&gt;Delivery Information&lt;/strong&gt;" section. It combines the fields for entering the delivery address. We create it in the same way as the previous "&lt;strong&gt;Order Information&lt;/strong&gt;" section. As mentioned above, this section is hidden by default. To do this, we need to set its &lt;strong&gt;&lt;em&gt;hidden&lt;/em&gt;&lt;/strong&gt; property to &lt;em&gt;true&lt;/em&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;To ship the order, we need to get a delivery address. For this, we will create special fields in which the user can enter the following parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;country&lt;/li&gt;
&lt;li&gt;address within the country:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;region&lt;/li&gt;
&lt;li&gt;city&lt;/li&gt;
&lt;li&gt;street and house&lt;/li&gt;
&lt;li&gt;zip code&lt;/li&gt;
&lt;/ul&gt;




&lt;li&gt;desired shipping date&lt;/li&gt;

&lt;li&gt;additional instructions.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;Besides, we will provide the user with the ability to insure the delivery. And as a nice bonus, the user will be able to choose the desired packaging color, which I personally attach great importance to :) Now let's start implementing our plan.&lt;/p&gt;

&lt;h3&gt;Control for Country Selection&lt;/h3&gt;

&lt;p&gt;Let's make it so that the user doesn’t enter the country name but selects it from the drop-down list. For creating this field we can use the &lt;a href="https://docs.webix.com/desktop__combo.html"&gt;&lt;strong&gt;combo&lt;/strong&gt;&lt;/a&gt; tool of the Webix library. In addition to the standard set of properties ( &lt;em&gt;label, name, clear and placeholder&lt;/em&gt; ), we need to parse data for the drop-down list options. This is done via the &lt;strong&gt;&lt;em&gt;options&lt;/em&gt;&lt;/strong&gt; property. The data can be set either as an array with data (if they are on the client) or as the path to the data on the server. The data schema should be as follows:&lt;/p&gt;

&lt;pre&gt;
[
    { "id":1, "value":"Canada" },
    { "id":2, "value":"United Kingdom" },
    ...
]
&lt;/pre&gt;

&lt;p&gt;The library allows us to make the fields required for filling. To do this, we need to set the &lt;strong&gt;&lt;em&gt;required&lt;/em&gt;&lt;/strong&gt; property to &lt;em&gt;true&lt;/em&gt;. As a result, we will see a special red marker at the top right corner of the label. Looking ahead, if the user leaves such a field empty and runs validation, it will turn in red and the data will not be sent.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now the section looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O-sO5nGW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jdba24k0chtqdzxyp5c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O-sO5nGW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jdba24k0chtqdzxyp5c.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Input Fields for Delivery Address&lt;/h3&gt;

&lt;p&gt;All the fields for addresses within the country will contain the same settings. To create them, we use the well-known &lt;strong&gt;text&lt;/strong&gt; control and a set of basic properties: &lt;em&gt;label, name, clear, placeholder and required&lt;/em&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now the section looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ktE15lb6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4gsuuj9o2tj89xez1agr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ktE15lb6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4gsuuj9o2tj89xez1agr.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Control for Shipping Date Selection&lt;/h3&gt;

&lt;p&gt;We can ask the user about the desired shipping date of the order. And here, instead of the usual input field, Webix provides us with a special &lt;a href="https://docs.webix.com/desktop__datepicker.html"&gt;&lt;strong&gt;datepicker&lt;/strong&gt;&lt;/a&gt; widget. When the user clicks on it, the component will display a compact calendar, in which he can select the required shipping date. In addition to the basic properties mentioned above, we can specify the format for displaying the date via the &lt;strong&gt;&lt;em&gt;format&lt;/em&gt;&lt;/strong&gt; property. To read more about all capabilities of this widget, visit its &lt;a href="https://docs.webix.com/api__refs__ui.datepicker.html"&gt;documentation&lt;/a&gt; page.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now the section looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0UQxk0OD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lpoz4t5p3a06deppyfsx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0UQxk0OD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lpoz4t5p3a06deppyfsx.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Field for Additional Instructions&lt;/h3&gt;

&lt;p&gt;It is difficult to foresee the fields for each specific situation. Sometimes it happens that the user wants to specify the additional delivery instructions. For example, he wants the order to be left on the porch of the house or packed in additional packaging. Let's give the user such ability in our form.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://docs.webix.com/desktop__textarea.html"&gt;&lt;strong&gt;textarea&lt;/strong&gt;&lt;/a&gt; component is the best decision for such an issue. If you have worked with plain HTML forms, you should be familiar with this element. In addition to the standard settings of this widget, we will set a fixed height via its &lt;strong&gt;&lt;em&gt;height&lt;/em&gt;&lt;/strong&gt; property.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now the section looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pRxE89FA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4z9b8h0ndzwjgrj3vtf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pRxE89FA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4z9b8h0ndzwjgrj3vtf.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Control for Applying Insurance&lt;/h3&gt;

&lt;p&gt;Let's provide our users with the ability to insure order delivery.&lt;/p&gt;

&lt;p&gt;To apply for insurance, we will use the &lt;a href="https://docs.webix.com/desktop__switch.html"&gt;&lt;strong&gt;switch&lt;/strong&gt;&lt;/a&gt; control. It is a toggle button that allows the user to switch between two opposite values ​​(0 and 1). Besides the label and name, we can specify 2 inside labels for active and passive states. This can be done via its &lt;strong&gt;&lt;em&gt;onLabel&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;offLabel&lt;/em&gt;&lt;/strong&gt; properties.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;Control for Сolor Selection&lt;/h3&gt;

&lt;p&gt;As mentioned above, we will give users the ability to choose the packaging color. For this, the Webix library provides several widgets, namely: &lt;a href="https://docs.webix.com/desktop__colorpicker.html"&gt;&lt;strong&gt;colorpicker&lt;/strong&gt;&lt;/a&gt;, &lt;a href="https://docs.webix.com/desktop__colorselector.html"&gt;&lt;strong&gt;colorselect&lt;/strong&gt;&lt;/a&gt; and &lt;a href="https://docs.webix.com/desktop__colorboard.html"&gt;&lt;strong&gt;colorboard&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since we only have 4 types of color packages, the best option would be the &lt;strong&gt;colorboard&lt;/strong&gt; widget with a limited palette.&lt;/p&gt;

&lt;p&gt;We can specify the palette colors via the &lt;strong&gt;&lt;em&gt;palette&lt;/em&gt;&lt;/strong&gt; property and the default color via the &lt;strong&gt;&lt;em&gt;value&lt;/em&gt;&lt;/strong&gt; property. Let's also set fixed dimensions for each palette box via the corresponding &lt;strong&gt;&lt;em&gt;width&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;height&lt;/em&gt;&lt;/strong&gt; properties, and remove the border around the component using its &lt;strong&gt;&lt;em&gt;borderless&lt;/em&gt;&lt;/strong&gt; property.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The whole section looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nBWuoEL6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gq5vf6jzsmar9vhv7fpz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nBWuoEL6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gq5vf6jzsmar9vhv7fpz.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Buttons for Navigation&lt;/h2&gt;

&lt;p&gt;For the order form we have to implement one more important part. It is about buttons for switching to the next form and back to the trade list. For creating these buttons we will use the &lt;a href="https://docs.webix.com/desktop__button.html"&gt;&lt;strong&gt;button&lt;/strong&gt;&lt;/a&gt; component.&lt;/p&gt;

&lt;p&gt;To apply built-in styling, we need to set the css property to the corresponding webix class. In our case, it is about the &lt;em&gt;webix_secondary&lt;/em&gt; and &lt;em&gt;webix_primary&lt;/em&gt; classes.&lt;/p&gt;

&lt;p&gt;The button name is set via its &lt;strong&gt;&lt;em&gt;label&lt;/em&gt;&lt;/strong&gt; property. For completeness, it is worth noting that along with the label of each button, we will place a small arrow to indicate the button's purpose. The left arrow for going back (in this case, to the goods list), and the right one for going forward to the next form. To define built-in webix icons, we need to use dedicated css classes.&lt;/p&gt;

&lt;p&gt;Both these buttons will be displayed as columns. For this, we need to put them into the array of the &lt;strong&gt;&lt;em&gt;cols&lt;/em&gt;&lt;/strong&gt; property.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The buttons look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VUkTr-KD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdli8kquu97ffqk3takf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VUkTr-KD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdli8kquu97ffqk3takf.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The order form interface is ready. Now we need to include the &lt;em&gt;order_form.js&lt;/em&gt; file into &lt;em&gt;index.html&lt;/em&gt; and put the &lt;strong&gt;order_form&lt;/strong&gt; variable into the layout code. In the browser, we will see the following result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--siYPOTqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fx67ackf8tl2cpo8593r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--siYPOTqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fx67ackf8tl2cpo8593r.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;User Form&lt;/h2&gt;

&lt;p&gt;After the user has entered the necessary information about the order, we need to get his personal data. It is required for identifying the user when he comes to pick up his order or receives it through the delivery service.&lt;/p&gt;

&lt;p&gt;Let's create a separate form with fields for entering the following personal data:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;first and last name&lt;/li&gt;
&lt;li&gt;age&lt;/li&gt;
&lt;li&gt;gender&lt;/li&gt;
&lt;li&gt;contact information:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;email&lt;/li&gt;
&lt;li&gt;phone number.&lt;/li&gt;
&lt;/ul&gt;




&lt;/ul&gt;

&lt;p&gt;The user form will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--siYPOTqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fx67ackf8tl2cpo8593r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--siYPOTqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fx67ackf8tl2cpo8593r.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's see how to implement this in the code.&lt;/p&gt;

&lt;p&gt;We create a form in the &lt;em&gt;user_form.js&lt;/em&gt; file and save it to the &lt;strong&gt;user_form **variable. After this we define the "&lt;/strong&gt;User Information**" section with the fields mentioned above.&lt;/p&gt;

&lt;h3&gt;Input Fields for First and Last Name&lt;/h3&gt;

&lt;p&gt;Now let's move on to the fields in which the user can enter its first and last name. To create them, we can use the well-known &lt;strong&gt;text&lt;/strong&gt; control. As in the previous form, for these controls we also specify a standard set of properties, namely: &lt;em&gt;label, name, placeholder, clear and required&lt;/em&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now the section looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f5L7SXef--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8mdqq4q7vjrsmhkixni.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f5L7SXef--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8mdqq4q7vjrsmhkixni.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Controls for Age and Gender&lt;/h3&gt;

&lt;p&gt;Next, we have 2 optional fields. It is about a counter with which the user can indicate his age and radio buttons for choosing a gender.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Counter&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To get the user age, we can use the &lt;strong&gt;counter&lt;/strong&gt; control. We have already used it to define the number of goods.&lt;/p&gt;

&lt;p&gt;The age of our customer should be in the range from 18 to 100. These parameters can be set via the &lt;strong&gt;&lt;em&gt;min&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;max&lt;/em&gt;&lt;/strong&gt; properties.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Radio&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To get the user gender, we can use the &lt;strong&gt;radio&lt;/strong&gt; control. We have also used it to select the method of the order receiving. The widget will consist of 2 options, namely: &lt;em&gt;Male&lt;/em&gt; and &lt;em&gt;Female&lt;/em&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now the section looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gOrYWRR3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aoc02kvbdx4b78sziub8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gOrYWRR3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aoc02kvbdx4b78sziub8.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Input Fields for Contact Information&lt;/h3&gt;

&lt;p&gt;To contact the user for clarifying any additional information and notifying about the order readiness or its dispatch, we need to get its contact information.&lt;/p&gt;

&lt;p&gt;Let's create 2 fields in which the user can enter his email and phone number. For this, we use the *&lt;em&gt;text **control and specify the set of standard properties (*label, name, placeholder, clear and required&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;A special emphasis should be placed on the phone number field. Here we can apply a special mask for entering a phone number. To do this we need to set the &lt;strong&gt;&lt;em&gt;pattern&lt;/em&gt;&lt;/strong&gt; property to the built-in &lt;strong&gt;&lt;em&gt;webix.patterns.phone&lt;/em&gt;&lt;/strong&gt; value. It is worth mentioning here that this is one of those features that are available only in the PRO version. In &lt;a href="https://docs.webix.com/desktop__formatted_text_inputs.html"&gt;this&lt;/a&gt; article, you can find more information about the input field formatting.&lt;/p&gt;

&lt;p&gt;The mask allows users to enter only 11 characters of the phone number, adds a "+" sign at the beginning of the number and encloses the telephone operator code in parentheses. Other characters will be ignored.&lt;/p&gt;

&lt;p&gt;Let's give a little hint for filling this field and add a short message at the bottom of the input. For this, we can use the &lt;strong&gt;&lt;em&gt;bottomLabel&lt;/em&gt;&lt;/strong&gt; property.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The whole section looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nUrQfWlg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5nd27n3xtagesnwlr81.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nUrQfWlg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5nd27n3xtagesnwlr81.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this form, we also need to add navigation buttons. Here we don't have to bother too much and just copy the similar code from the previous form. The differences will only be visible when we make these buttons workable.&lt;/p&gt;

&lt;p&gt;The user form interface is ready. Now we just need to include the &lt;em&gt;user_form.js&lt;/em&gt; file into &lt;em&gt;index.html&lt;/em&gt; and put the &lt;strong&gt;user_form&lt;/strong&gt; variable into layout code. In the browser, we will see the following result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dlVyRllW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3r4grx1wpceubhqohloc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dlVyRllW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3r4grx1wpceubhqohloc.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;Payment form&lt;/h1&gt;

&lt;p&gt;After the user has entered personal data, we need to get his credit card information for paying the order through a special service.&lt;/p&gt;

&lt;p&gt;Let's create a separate form for payment information and collect the following data:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;card number&lt;/li&gt;
&lt;li&gt;cardholder's name&lt;/li&gt;
&lt;li&gt;expiration date&lt;/li&gt;
&lt;li&gt;CVV code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The payment form will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WdQEayz---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8vn1go5qxq3l8igiwww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WdQEayz---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8vn1go5qxq3l8igiwww.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We create a form in the &lt;em&gt;payment_form.js&lt;/em&gt; file and save it to the &lt;strong&gt;payment_form&lt;/strong&gt; variable. After this, we define the "&lt;strong&gt;Payment Information&lt;/strong&gt;" section with the fields mentioned above.&lt;/p&gt;

&lt;p&gt;The first field is intended for the card number. Besides the standard properties of the &lt;strong&gt;text&lt;/strong&gt; control (&lt;em&gt;label, name, placeholder, clear and required&lt;/em&gt;), we also specify a built-in mask for entering the card number: &lt;strong&gt;&lt;em&gt;pattern: webix.patterns.card&lt;/em&gt;&lt;/strong&gt;. It means that the user can enter only 16 digits indicated on the front of his card. Other characters will be ignored. I would like to remind you that masks are only available in the Pro version.&lt;/p&gt;

&lt;p&gt;Next, we need to create a field for entering the name of the cardholder. The &lt;strong&gt;text&lt;/strong&gt; control of this field will also include the standard set of properties mentioned above.&lt;/p&gt;

&lt;p&gt;The controls for selecting card expiration date deserve more attention. Here we can use 2 &lt;a href="https://docs.webix.com/desktop__richselect.html"&gt;&lt;strong&gt;richselect&lt;/strong&gt;&lt;/a&gt; components. When the user clicks on it, the widget will display a drop-down list with options. The data for these options are set via the &lt;strong&gt;&lt;em&gt;options&lt;/em&gt;&lt;/strong&gt; property.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now we move on to the field for entering the CVV code. Here the user needs to enter 3 secret digits indicated on the back of the card. The &lt;strong&gt;text *&lt;em&gt;control of this field will also include a standard set of properties. Besides, we can set the *&lt;/em&gt;*type&lt;/strong&gt;* property to the &lt;em&gt;password&lt;/em&gt; value, to define the type of the field. It will display asterisks instead of the entered data. We will also specify a custom mask via the &lt;strong&gt;&lt;em&gt;pattern&lt;/em&gt;&lt;/strong&gt; property. So now the user can enter only 3 digits of the CVV code.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Let's add some control for saving the entered data in the browser settings. If the user enters data and checks this control, he can reuse payment data the next time. For this, we use the &lt;a href="https://docs.webix.com/desktop__checkbox.html"&gt;&lt;strong&gt;checkbox&lt;/strong&gt;&lt;/a&gt; control with the &lt;strong&gt;&lt;em&gt;name&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;labelRight&lt;/em&gt;&lt;/strong&gt; properties. The second property will display the label on the right part of the control&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;For this form, we also need to add corresponding buttons for going back and making the order. Here we just copy the similar code from the previous form and rename the second button to "&lt;strong&gt;Make order&lt;/strong&gt;".&lt;/p&gt;

&lt;p&gt;The payment form interface is ready. Now we just need to include the &lt;em&gt;payment_form.js&lt;/em&gt; file into index.html and put the &lt;strong&gt;payment_form&lt;/strong&gt; variable into layout code. In the browser, we will see the following result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ImGYucqL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iw7i62kp45gwd3kufw8r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ImGYucqL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iw7i62kp45gwd3kufw8r.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;How to Get the App Working&lt;/h1&gt;

&lt;p&gt;Above we have described the layout and interface of our forms. But this is only half the way. Now let's get them to work. And for this, Webix has all the necessary tools.&lt;/p&gt;

&lt;h3&gt;The List of Goods&lt;/h3&gt;

&lt;p&gt;And we will start from the main page, where the list of goods is displayed. Each block on this page consists of a short description and the "&lt;strong&gt;Buy now&lt;/strong&gt;" button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xRtk90Xu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/igyyjs2wzyd3hnrn3d1d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xRtk90Xu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/igyyjs2wzyd3hnrn3d1d.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When the user clicks on this button, we need to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;show the module with the order form&lt;/li&gt;
&lt;li&gt;fill out the order form with the data of the selected book.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To implement the mentioned above, we need to handle the button &lt;strong&gt;click&lt;/strong&gt; event. This can be done via the corresponding &lt;strong&gt;&lt;em&gt;onClick&lt;/em&gt;&lt;/strong&gt; property of the &lt;strong&gt;dataview&lt;/strong&gt; widget. Inside the object of this property, we specify the &lt;em&gt;css&lt;/em&gt; class of our button and set a handler to it as a value.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;To fill out the order form fields, we can use its &lt;strong&gt;setValues()&lt;/strong&gt; method and pass the object with the needed data as a parameter.&lt;/p&gt;

&lt;p&gt;As you remember, we have set the name for all form fields via the &lt;strong&gt;&lt;em&gt;name&lt;/em&gt;&lt;/strong&gt; property. In the data object, we use these names as the keys and set them to the corresponding values.&lt;/p&gt;

&lt;p&gt;If we pass only the data object to the method, it will remove all the form values ​​and set new values specified in the object. In this case, the delivery information will also be cleared and the user will need to enter the address again.&lt;/p&gt;

&lt;p&gt;To avoid this inconvenience, we can pass the &lt;em&gt;true&lt;/em&gt; value to the method as the second parameter. So now the method will change only the values passed in the object.&lt;/p&gt;

&lt;p&gt;After all the data manipulation, we can switch the &lt;strong&gt;multiview&lt;/strong&gt; component to the next module using its &lt;strong&gt;show()&lt;/strong&gt; method.&lt;/p&gt;

&lt;h3&gt;How to Calculate the Order Price&lt;/h3&gt;

&lt;p&gt;Now we need to calculate the order price and update it every time when the user changes the number of goods or applies the insurance control.&lt;/p&gt;

&lt;p&gt;To listen to any change in the form fields, we need to use the &lt;strong&gt;&lt;em&gt;on&lt;/em&gt;&lt;/strong&gt; property. In the object of this property, we can specify the desired event and its handler.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;So now we need to create this handler. And it will look like this:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Here we get an object with the form values ​​via its &lt;strong&gt;getValues()&lt;/strong&gt; method. It is worth noting that this object will include only the fields value with the &lt;strong&gt;&lt;em&gt;name&lt;/em&gt;&lt;/strong&gt; property.&lt;/p&gt;

&lt;p&gt;The price variable stores the total goods price. It depends on the initial price (set in the hidden &lt;em&gt;initial_price&lt;/em&gt; field) and the goods count.&lt;/p&gt;

&lt;p&gt;Next, we need to check the insurance that can be applied in the "&lt;strong&gt;Delivery Information&lt;/strong&gt;" section and will affect the order price. For this, we check the visibility of the "&lt;strong&gt;Delivery Information&lt;/strong&gt;" section using the &lt;strong&gt;isVisible()&lt;/strong&gt; method. It returns &lt;em&gt;true&lt;/em&gt; if the section is visible and &lt;em&gt;false&lt;/em&gt; if not.&lt;/p&gt;

&lt;p&gt;If the section is visible, we need to check the state of the &lt;strong&gt;switch&lt;/strong&gt; control (if enabled - value 1, if disabled - value 0) and generate the final order cost. If the insurance is applied, we will increase the cost by 20%.&lt;/p&gt;

&lt;p&gt;When the final order price is ready, we need to update it in the corresponding &lt;strong&gt;Price&lt;/strong&gt; field. To do this, we can use the &lt;strong&gt;setValues​​()&lt;/strong&gt; method and update only the field we need.&lt;/p&gt;

&lt;p&gt;Now the order price is updated dynamically when the user changes the number of goods and applies the insurance.&lt;/p&gt;

&lt;h3&gt;How to Navigate Between Forms&lt;/h3&gt;

&lt;p&gt;In each form of our application, we have created the "&lt;strong&gt;Back&lt;/strong&gt;" and "&lt;strong&gt;Next&lt;/strong&gt;" buttons to navigate between tabs.&lt;/p&gt;

&lt;p&gt;The "&lt;strong&gt;Back&lt;/strong&gt;" button will switch the &lt;strong&gt;multiview&lt;/strong&gt; component to the previous module, and the "&lt;strong&gt;Next&lt;/strong&gt;" button to the next one. To get the buttons to work, we need to catch the click events and set the appropriate handlers.&lt;/p&gt;

&lt;p&gt;To handle the click event, the &lt;strong&gt;button&lt;/strong&gt; control has a special &lt;strong&gt;&lt;em&gt;click&lt;/em&gt;&lt;/strong&gt; property.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In the handler of the "&lt;strong&gt;Back&lt;/strong&gt;" button of the user form, we go back to the trade list via its &lt;strong&gt;show()&lt;/strong&gt; method.&lt;/p&gt;

&lt;pre&gt;
function goBackCustomHandler(){
    $$("trade_list").show(); //go to the trade list
}
&lt;/pre&gt;

&lt;p&gt;In the same handlers of two other forms, we go to the previous module via the &lt;strong&gt;back()&lt;/strong&gt; method of the &lt;strong&gt;multiview&lt;/strong&gt; widget, which contains the tabs with the forms.&lt;/p&gt;

&lt;pre&gt;
function goBackCustomHandler(){
    $$("form_multiview").back(); //go to the previous module
}
&lt;/pre&gt;

&lt;p&gt;In the handler of the "&lt;strong&gt;Next&lt;/strong&gt;" button, we also use the &lt;strong&gt;show()&lt;/strong&gt; method to display the desired module, included in the &lt;strong&gt;multiview&lt;/strong&gt; component.&lt;/p&gt;

&lt;pre&gt;
function goNextCustomHandler(){
    $$("id_of_next_form").show();
}
&lt;/pre&gt;

&lt;p&gt;In this way we will change tabs dynamically.&lt;/p&gt;

&lt;h3&gt;How to Validate the Forms&lt;/h3&gt;

&lt;p&gt;When the user clicks on the "&lt;strong&gt;Next&lt;/strong&gt;" button and before switching to the next form, we need to validate the current form. This can be done in the "&lt;strong&gt;Next&lt;/strong&gt;" button handler:&lt;/p&gt;

&lt;pre&gt;
function goNextCustomHandler(){
    if($$("id_of_current_form").validate()){
        $$("id_of_next_form").show();
    }
}
&lt;/pre&gt;

&lt;p&gt;Here we run the validation of the current form via its &lt;strong&gt;validate()&lt;/strong&gt; method. It will return true if the validation is successful, and false if not. It should be noted here that the method checks only those form fields for which we applied the rules. Webix allows setting these rules for a separate field via its &lt;a href="https://docs.webix.com/api__ui.text_required_config.html"&gt;&lt;strong&gt;&lt;em&gt;required&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; and &lt;a href="https://docs.webix.com/api__ui.text_validate_config.html"&gt;&lt;strong&gt;&lt;em&gt;validate&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; properties, and for the whole form via its &lt;a href="https://docs.webix.com/api__link__ui.form_rules_config.html"&gt;&lt;strong&gt;&lt;em&gt;rules&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; property.&lt;/p&gt;

&lt;p&gt;I hope you still remember that for the required fields we defined the required property. This property adds a red asterisk to the labels of the required fields. By default, such fields are validated by the built-in &lt;strong&gt;&lt;em&gt;webix.rules.isNotEmpty&lt;/em&gt;&lt;/strong&gt; rule and must be filled. If at least one of these fields is not filled in, the validation method will return an error and the fields will be highlighted in red.&lt;/p&gt;

&lt;p&gt;The unvalidated order form will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C2wz1-zG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mll6xgmudyzujgq06tvg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C2wz1-zG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mll6xgmudyzujgq06tvg.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If all the required fields of this form are filled in, or the "Delivery Information" section is hidden, the multiview will be switched to the next form.&lt;/p&gt;

&lt;p&gt;Besides the &lt;strong&gt;&lt;em&gt;required&lt;/em&gt;&lt;/strong&gt; property with the default validation rule, we can apply other built-in rules or define our own. Let's set such rules for checking the email and phone number in the user form. And this can be done in the object of the &lt;strong&gt;&lt;em&gt;rules&lt;/em&gt;&lt;/strong&gt; property of the form.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;To check the email address, we use the built-in &lt;strong&gt;&lt;em&gt;webix.rules.isEmail&lt;/em&gt;&lt;/strong&gt; rule, and for the phone number we use our own condition. Since the phone number consists of 11 digits, we will return an error if the entered value length is less than the required one.&lt;/p&gt;

&lt;p&gt;To make the field validation more informative, let's add a hint that will be displayed if the validation method returns an error. For the required fields, we need to specify the &lt;strong&gt;&lt;em&gt;invalidMessage&lt;/em&gt;&lt;/strong&gt; property and set it to the error message.&lt;/p&gt;

&lt;p&gt;The unvalidated user form will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mBhOF2zs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1f28uq7e9bygo85x4vv7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mBhOF2zs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1f28uq7e9bygo85x4vv7.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In case the user navigates to the previous form and then comes back, let's clear the validation markers of the current form. To do this, we can use the &lt;strong&gt;clearValidation()&lt;/strong&gt; method of the form and call it in the "&lt;strong&gt;Back&lt;/strong&gt;" button handler.&lt;/p&gt;

&lt;h3&gt;How to Make Order&lt;/h3&gt;

&lt;p&gt;In the last payment form, we have created the "&lt;strong&gt;Make order&lt;/strong&gt;" button instead of the "&lt;strong&gt;Next&lt;/strong&gt;" button. This button runs validation and, if successful, collects data from all three forms, clears the current form and displays the main page with the goods list. The handler code will look like this:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In a real example, the collected data needs to be sent to the server for further processing. But this is the topic of another article.&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;You can find the full source code and live demo &lt;a href="https://github.com/serhiipylypchuk1991/book-store-service"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this article, we have detailed how to create forms using the Webix library, and now we know:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;how to connect the library&lt;/li&gt;
&lt;li&gt;how to describe UI components using JSON syntax&lt;/li&gt;
&lt;li&gt;how to use component methods&lt;/li&gt;
&lt;li&gt;how to set the event handlers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And most importantly, we have learned how to work with Webix forms, apply various controls and use methods for managing the form (collecting and setting data, validation, etc.).&lt;/p&gt;

&lt;p&gt;As you can see, the widget names, their methods and properties are intuitive and easy to use. In fact, this is only a small part of everything that the library can offer. For more detailed information, you can go to the &lt;a href="https://docs.webix.com/"&gt;documentation&lt;/a&gt;, which contains a detailed description of all the possibilities with examples.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>html</category>
    </item>
    <item>
      <title>Python ile REST-API Servisi Oluşturma</title>
      <author>Ali Buğra Okkalı</author>
      <pubDate>Thu, 12 Aug 2021 08:26:17 +0000</pubDate>
      <link>https://dev.to/aciklab/rest-api-e26</link>
      <guid>https://dev.to/aciklab/rest-api-e26</guid>
      <description>&lt;h1&gt;
  &lt;a href="#rest-api-nedir-"&gt;
  &lt;/a&gt;
  REST API Nedir ?
&lt;/h1&gt;

&lt;p&gt;REST  (&lt;strong&gt;R&lt;/strong&gt;epresentational &lt;strong&gt;S&lt;/strong&gt;tate &lt;strong&gt;T&lt;/strong&gt;ransfer)  Temsili Durum Aktarımı anlamına gelir. &lt;/p&gt;

&lt;p&gt;Bir istemci bir sunucudan kaynaklar hakkında bilgi almak için bir istekte bulunduğunda, sunucu kaynağın mevcut durumunu istemci makineye geri aktarır.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bay7ekfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1evd4zhnf0822vxgohz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bay7ekfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1evd4zhnf0822vxgohz.png" alt="representational-state-transfer-diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yukarıdaki şekilde de görebilceğiniz gibi , istemci bir veri tabanı sunucusundan veri talep edebileceğiniz PC'nizdir ve tüm iletişim REST API'leri üzerinden yapılır.&lt;/p&gt;

&lt;p&gt;Bunun için de birkaç farklı yöntem vardır :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;GET&lt;/strong&gt; - İstemci tarafından sunucudan veri seçmek veya almak için kullanılır.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;POST&lt;/strong&gt; - İstemci tarafından sunucuya veri göndermek veya yazmak için kullanılır.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;PUT&lt;/strong&gt; - İstemci tarafından sunucudaki mevcut verileri güncellemek için kullanılır.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;DELETE&lt;/strong&gt; - İstemci tarafından sunucudaki mevcut verileri silmek için kullanılır.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#rest-api-nas%C4%B1l-olu%C5%9Fturulur-"&gt;
  &lt;/a&gt;
  REST API Nasıl Oluşturulur ?
&lt;/h1&gt;

&lt;p&gt;API'ler Java, C#, Python vb. gibi istediğiniz herhangi bir programlama dili kullanılarak oluşturulabilir.&lt;/p&gt;

&lt;p&gt;Bu uygulamada, bir API oluşturmak için Python'u kullanacağız ve bunun için Flask olarak bilinen bir kütüphaneden yararlanacağız. Flask, bizim için bir sunucu oluşturmak için ağır kaldırmanın çoğunu yapan popüler bir hafif web uygulaması geliştirme çerçevesidir ve geliştiriciler olarak yalnızca API'leri oluşturmak için iş mantığına odaklanmamız gerekir.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#kurulum"&gt;
  &lt;/a&gt;
  Kurulum
&lt;/h1&gt;

&lt;p&gt;Şimdi, Rest-API'yi oluşturmak için kullanacağımız flask, flask_restful ve veri işlemede kullanacağımız pandas paketlerini python3-pip ile kuralım.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo apt install python3-pip
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pip3 install flask
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pip3 install flask_restful
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pip3 install pandas
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#kod"&gt;
  &lt;/a&gt;
  Kod
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/abugraokkali/Rest-API"&gt;https://github.com/abugraokkali/Rest-API&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gerekli paketlerin import edilmesi.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from flask import Flask
from flask_restful import Api, Resource, reqparse
import pandas as pd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Api nesnesinin oluşturulması.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app = Flask(__name__)
api = Api(app)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;GET çağırıldığında users.csv okunması, dict formatına çevrilmesi ve döndürülmesi.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Users(Resource):
    def get(self):
        data = pd.read_csv('users.csv')
        data = data.to_dict('records')
        return {'data' : data}, 200
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;POST çağırıldığında girdilerin parse edilmesi ve users.csv'ye bir satır eklenmesi.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    def post(self):
        parser = reqparse.RequestParser()
        parser.add_argument('name', required=True)
        parser.add_argument('age', required=True)
        parser.add_argument('city', required=True)
        args = parser.parse_args()

        data = pd.read_csv('users.csv')

        new_data = pd.DataFrame({
            'name'      : [args['name']],
            'age'       : [args['age']],
            'city'      : [args['city']]
        })

        data = data.append(new_data, ignore_index = True)
        data.to_csv('users.csv', index=False)
        return {'data' : new_data.to_dict('records')}, 201
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Çoğu zaman bir API'de kaynağınızın birden çok URL'si olacaktır. Api nesnesindeki add_resource() fonksiyonu ile birden çok URL iletebilirsiniz. Her biri bir Resource'a yönlendirilecektir.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;api.add_resource(Users, '/users')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#%C3%A7al%C4%B1%C5%9Ft%C4%B1rma"&gt;
  &lt;/a&gt;
  Çalıştırma
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python3 flask_app.py 

Serving Flask app 'flask_app' (lazy loading)

Environment: production
WARNING: This is a development server. Do not use it in a production deployment.
Use a production WSGI server instead.

Debug mode: off

Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#testler"&gt;
  &lt;/a&gt;
  Testler
&lt;/h1&gt;

&lt;p&gt;Testler için bir VSCode eklentisi olan Thunder Client kullanılmıştır.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GET http://127.0.0.1:5000/users&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u_3EO-CE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtd021cvv7nybf27qmby.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_3EO-CE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtd021cvv7nybf27qmby.png" alt="GET"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;POST http://127.0.0.1:5000/users?name=Bugra&amp;amp;age=29&amp;amp;city=Istanbul&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hLIk-xo9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aikrp3i508nvv1a79dur.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hLIk-xo9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aikrp3i508nvv1a79dur.png" alt="POST"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GET http://127.0.0.1:5000/users&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Ft4f2UH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqd9id7b5l8ooqo82wmf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Ft4f2UH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqd9id7b5l8ooqo82wmf.png" alt="GET2"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GET http://127.0.0.1:5000/Tom&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CigUkQKt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xpm5ksl5wwph7tn946b2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CigUkQKt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xpm5ksl5wwph7tn946b2.png" alt="GET3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ali Buğra Okkalı&lt;br&gt;
HAVELSAN - 2021&lt;/em&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>flask</category>
      <category>api</category>
    </item>
  </channel>
</rss>
