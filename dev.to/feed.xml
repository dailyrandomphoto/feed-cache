<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Stack overflow is down forever. Discuss what you would do.</title>
      <author>ManuTheCoder</author>
      <pubDate>Fri, 29 Oct 2021 04:46:23 +0000</pubDate>
      <link>https://dev.to/manuthecoder/stack-overflow-is-down-forever-discuss-what-you-would-do-mfa</link>
      <guid>https://dev.to/manuthecoder/stack-overflow-is-down-forever-discuss-what-you-would-do-mfa</guid>
      <description>&lt;p&gt;(Not real obviously). Discuss what you would do if Stack overflow was down forever!&lt;/p&gt;

</description>
      <category>discuss</category>
    </item>
    <item>
      <title>Making the most boring website ever with TypeScript, NestJs, React and others. Part 6. </title>
      <author>NordicBeaver</author>
      <pubDate>Fri, 29 Oct 2021 04:43:28 +0000</pubDate>
      <link>https://dev.to/nordicbeaver/making-the-most-boring-website-ever-with-typescript-nestjs-react-and-others-part-6-4ikp</link>
      <guid>https://dev.to/nordicbeaver/making-the-most-boring-website-ever-with-typescript-nestjs-react-and-others-part-6-4ikp</guid>
      <description>&lt;p&gt;&lt;em&gt;This series is about making a generic website for a local business with TypeScript, NodeJs, NestJs, Prisma, React and NextJs. I'm trying to make my videos quite short, about 10 minutes each (except for the first one), while putting as much content there as I can. &lt;a href="https://www.youtube.com/playlist?list=PL7b0cPjh8z6K_4qLNu_QdE3RpiU6omViC"&gt;Here&lt;/a&gt; is the full playlist.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Today we will deal with authentication and finally finish something resembling a complete product.&lt;/p&gt;

&lt;p&gt;Enjoy :)&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/_doefwHiXis"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>40+ JavaScript Projects for Beginners – Easy Ideas to Get Started Coding JS </title>
      <author>Jonny</author>
      <pubDate>Fri, 29 Oct 2021 04:42:11 +0000</pubDate>
      <link>https://dev.to/jnc/40-javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-120</link>
      <guid>https://dev.to/jnc/40-javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-120</guid>
      <description>&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;The best way to learn a new programming language is to build projects.

I have created a list of 40 beginner friendly project tutorials in Vanilla JavaScript, React, and TypeScript.

My advice for tutorials would be to watch the video, build the project, break it apart and rebuild it your own way. Experiment with adding new features or using different methods.

That will test if you have really learned the concepts or not.

You can click on any of the projects listed below to jump to that section of the article.

&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/40-javascript-projects-for-beginners/&amp;amp;ved=2ahUKEwiB9tj0rPjyAhUMX30KHZQ5CG0QFnoECAgQAQ&amp;amp;usg=AOvVaw26RDQjHugdhbATVS83LI83"&gt;40+ JavaScript Projects for Beginners – Easy Ideas to Get Started Coding JS

&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>October 29th, 2021: What did you learn this week?</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Fri, 29 Oct 2021 04:17:02 +0000</pubDate>
      <link>https://dev.to/nickytonline/october-29th-2021-what-did-you-learn-this-week-5an5</link>
      <guid>https://dev.to/nickytonline/october-29th-2021-what-did-you-learn-this-week-5an5</guid>
      <description>&lt;p&gt;It's that time of the week again. So wonderful devs, what did you learn this week? It could be programming tips, career advice etc.&lt;/p&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/yDYAHbqe5DfyM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/yDYAHbqe5DfyM/giphy.gif" alt="Yoda wooping someone's butt" width="260" height="146"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;Feel free to comment with what you learnt and/or reference your TIL post to give it some more exposure.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__5305"&gt;
  
    .ltag__tag__id__5305 .follow-action-button{
      background-color: #ffedc9 !important;
      color: #820000 !important;
      border-color: #ffedc9 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/todayilearned" class="ltag__tag__link"&gt;todayilearned&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        Summarize a concept that is new to you.
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>weeklyretro</category>
      <category>weeklylearn</category>
      <category>discuss</category>
    </item>
    <item>
      <title>GitHub Universe 2021 Recap - All You NEED to Know</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Fri, 29 Oct 2021 03:40:35 +0000</pubDate>
      <link>https://dev.to/n3wt0n/github-universe-2021-recap-all-you-need-to-know-2ji7</link>
      <guid>https://dev.to/n3wt0n/github-universe-2021-recap-all-you-need-to-know-2ji7</guid>
      <description>&lt;p&gt;GitHub's &lt;strong&gt;flagship event&lt;/strong&gt;, GitHub Universe 2021, has just closed its virtual doors after 2 days packed of information, announcements, and releases.&lt;/p&gt;

&lt;p&gt;In this video I'm gonna go through all the announcements and new features you need to know from the event&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation and demos&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/HJYpzyUsjKc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/HJYpzyUsjKc"&gt;Link to the video: https://youtu.be/HJYpzyUsjKc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... Let's dive straight into the first couple of announcements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-projects"&gt;
  &lt;/a&gt;
  New Projects
&lt;/h3&gt;

&lt;p&gt;Let's start with the new Projects. GitHub has announced this a while back as part as the &lt;em&gt;Issues revamp&lt;/em&gt; that contained also the new Issues Forms, Task lists, etc. But differently from those features, which went live publicly, the new Projects where kept under private beta.&lt;/p&gt;

&lt;p&gt;Now this feature graduates from private beta to &lt;strong&gt;public beta&lt;/strong&gt;, and as such it will be &lt;strong&gt;available to everyone&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eq8b6mR8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j82j82abidg4a5oipk5k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eq8b6mR8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j82j82abidg4a5oipk5k.png" alt="New Projects" width="703" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Built like a spreadsheet, the new projects tables give you a &lt;strong&gt;live canvas&lt;/strong&gt; to filter, sort, and group issues, pull requests, and cards.&lt;/p&gt;

&lt;p&gt;You can also extend issues with &lt;strong&gt;custom fields&lt;/strong&gt; with support for text, number, date, and single-select types; filter, sort, and group by any field; and instantly switch between project tables and boards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e5XGCMTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2tsqvj1qtjr9m5f18yd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e5XGCMTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2tsqvj1qtjr9m5f18yd.png" alt="Boards" width="663" height="423"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Differently from the limited beta, in which the new projects were available only for selected organization, with this announcement &lt;strong&gt;Projects will be available for everyone&lt;/strong&gt;, including individual users, and it is now possible to also create &lt;strong&gt;public projects&lt;/strong&gt; (before they were only private).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#project-automation"&gt;
  &lt;/a&gt;
  Project Automation
&lt;/h4&gt;

&lt;p&gt;And there is also a new &lt;strong&gt;automation&lt;/strong&gt; capability embedded into the new Projects. Before this, to automate a project board and the related issues you had to rely on GitHub Actions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ei0pdPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c253mahv8xzaz5e1x8b8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ei0pdPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c253mahv8xzaz5e1x8b8.png" alt="Projects Automation" width="880" height="406"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now instead users will be able to simply turn on automation that helps them keep their project boards up-to-date without needing any manual intervention.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cumulative-flow-diagrams"&gt;
  &lt;/a&gt;
  Cumulative Flow Diagrams
&lt;/h4&gt;

&lt;p&gt;And finally, still talking about issues and projects, GitHub is introducing CFDs - &lt;strong&gt;cumulative flow diagrams&lt;/strong&gt; - into the projects experience.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8aC0DHvh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9t384nws3eybewdxam3z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8aC0DHvh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9t384nws3eybewdxam3z.png" alt="Cumulative Flow Diagram" width="880" height="602"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks to this, users will be able to &lt;strong&gt;visualize&lt;/strong&gt; progress, remaining work, and throughput of a specific project&lt;/p&gt;

&lt;p&gt;It is unclear when the chart will be available to everyone, but I can't wait to have it and use it and see what other reports and charts will be available in the future.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#command-palette"&gt;
  &lt;/a&gt;
  Command Palette
&lt;/h3&gt;

&lt;p&gt;Alright, second announcement that I want to talk about is the Public Beta for the &lt;strong&gt;Command Palette&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eWOYUxt1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gl2juw0njy1tscvceurf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eWOYUxt1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gl2juw0njy1tscvceurf.gif" alt="Command Palette" width="880" height="510"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Command Palette is a new GitHub surface designed to improve how users navigate around GitHub and execute time saving commands. You can quickly jump to your organizations and repositories, and search within them for pull requests, issues, projects, files, and more. &lt;/p&gt;

&lt;p&gt;You can access the Command Palette using &lt;code&gt;ctrl + k&lt;/code&gt; on Windows or &lt;code&gt;command + k&lt;/code&gt; on Mac, and just start typing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OSPmtiUi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7l08njubsp9f1i1h6ldo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OSPmtiUi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7l08njubsp9f1i1h6ldo.png" alt="Command Mode" width="880" height="651"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And if you then press &lt;code&gt;&amp;gt;&lt;/code&gt; (greater than) you enter the "&lt;strong&gt;&lt;em&gt;command mode&lt;/em&gt;&lt;/strong&gt;", where you can execute commands to optimize your workflows, all without lifting your hands from the keyboard.&lt;/p&gt;

&lt;p&gt;What do you think of this? &lt;strong&gt;&lt;em&gt;I love it&lt;/em&gt;&lt;/strong&gt;, it's really cool. Let me know in the comment below your thoughts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-releases"&gt;
  &lt;/a&gt;
  New Releases
&lt;/h3&gt;

&lt;p&gt;Next up, let's talk about Releases, because two improvements to the release process on GitHub are generally available. A redesigned UI, and automatically generated release notes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SkboTh3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hi410kqrn82tbrrxhli6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SkboTh3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hi410kqrn82tbrrxhli6.png" alt="Releases UI" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Releases UI refresh&lt;/strong&gt; gives more clarity into what’s included in a given release and recognition for contributors in the community. GitHub has also made pagination significantly better and introduced new search functionality.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aeY8PHGV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7d4d37ai6m89dt78szt6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aeY8PHGV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7d4d37ai6m89dt78szt6.png" alt="Releases Comparison" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And we now have a handy comparison feature right in the UI, to be able to compare 2 releases.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#automatically-generated-release-notes"&gt;
  &lt;/a&gt;
  Automatically Generated Release Notes
&lt;/h4&gt;

&lt;p&gt;But it is not all, because as I've already mentioned we now also have the possibility to &lt;strong&gt;automatically generate release notes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eUyezszI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp5pcqll3xmkq0xrnuge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eUyezszI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp5pcqll3xmkq0xrnuge.png" alt="Automatic Release Notes" width="880" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This provides an automated alternative to manually writing release notes for your GitHub releases. With automatically generated release notes, you can &lt;strong&gt;quickly generate an overview of the contents of a release&lt;/strong&gt;. You can also &lt;strong&gt;customize&lt;/strong&gt; your automated release notes, using labels to create custom categories to organize pull requests you want to include, and exclude certain labels and users from appearing in the output.&lt;/p&gt;

&lt;p&gt;You can also customize the automatically generated release notes by creating a template for them. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kB8OxFUt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cveccfzi92mrs8jx3829.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kB8OxFUt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cveccfzi92mrs8jx3829.png" alt="Releases YAML Template" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This template is a YAML file, as you can see above, which must be called &lt;code&gt;release.yml&lt;/code&gt; and placed in the &lt;code&gt;.github&lt;/code&gt; folder in the root of your repo.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#codespaces"&gt;
  &lt;/a&gt;
  Codespaces
&lt;/h3&gt;

&lt;p&gt;Next series of announcements are about Codespaces. Some are somewhat &lt;strong&gt;minor&lt;/strong&gt;, like the support for Codespaces from the &lt;strong&gt;GitHub CLI&lt;/strong&gt; to help integrate Codespaces with user workflows, or the availability (in beta) of &lt;strong&gt;REST APIs to manage Codespaces&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;I called those minor features, even though I'm sure a lot of users and sysadmins will rejoice for having them, because the next ones I will talk about are even more exciting.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#devcontainer-feature-composition"&gt;
  &lt;/a&gt;
  Devcontainer Feature Composition
&lt;/h4&gt;

&lt;p&gt;First, the &lt;strong&gt;Devcontainer features&lt;/strong&gt;. The name may not be very exciting, but this is huge.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UQwBPh4t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0oxbs05hn0vn4nkraqjx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UQwBPh4t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0oxbs05hn0vn4nkraqjx.png" alt="Codespaces DevContainer" width="880" height="650"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To customize your Codespaces experience and include custom tools and other configuration you had to create a &lt;code&gt;devcontainer.json&lt;/code&gt; file and edit it, perhaps adding different container images and post creation scripts. Which frankly is not the best in terms of user experience. Now, instead, this feature enables users to more easily &lt;strong&gt;install common tools to their devcontainers&lt;/strong&gt; instead of having to manually script the installation in their &lt;em&gt;Dockerfiles&lt;/em&gt; or &lt;em&gt;postCreate&lt;/em&gt; scripts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bcc4ml3T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6l1k66awtmbvas03v78.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bcc4ml3T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6l1k66awtmbvas03v78.png" alt="Feature Composition" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just add a template devcontainer definition through the &lt;code&gt;Add development container configuration files…&lt;/code&gt; workflow in Codespaces and you will see the new feature selection, which change and depend on the previous selections.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4_fbuaWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oy37zw64p0a3mhjpyvce.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4_fbuaWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oy37zw64p0a3mhjpyvce.png" alt="Features YAML" width="880" height="188"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The selected features will be added to a new &lt;code&gt;features&lt;/code&gt; section of the &lt;code&gt;devcontainer.json&lt;/code&gt; file and the Codespaces engine will take care of them for you.&lt;/p&gt;

&lt;p&gt;This is super cool, but there's more: Codespaces users can use the Copilot technical preview&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#copilot-4-codespaces"&gt;
  &lt;/a&gt;
  Copilot 4 Codespaces
&lt;/h4&gt;

&lt;p&gt;Until now, only users that have been accepted into the private beta were able to use Copilot. Now instead &lt;strong&gt;all Codespaces users can use Copilot&lt;/strong&gt; by installing the Copilot extension in VS Code without having to apply to the Copilot technical preview waiting list.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#copilot"&gt;
  &lt;/a&gt;
  Copilot
&lt;/h3&gt;

&lt;p&gt;And speaking of Copilot, we do have some announcements for this service as well.&lt;/p&gt;

&lt;p&gt;GitHub in fact announced the support for &lt;strong&gt;more languages&lt;/strong&gt;, including Java, &lt;strong&gt;support for additional IDEs&lt;/strong&gt; thanks to the plugin for the JetBrains editors (like &lt;em&gt;Pycharm&lt;/em&gt;, &lt;em&gt;IntelliJ&lt;/em&gt;, &lt;em&gt;WebStorm&lt;/em&gt;, and more), and an enhanced OpenAI model that makes the service &lt;strong&gt;even more accurate&lt;/strong&gt; than it was before.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KsFaOCwk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/836itv7aw098btesr20u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KsFaOCwk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/836itv7aw098btesr20u.png" alt="Copilot JetBrain Plugin" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custom-repository-roles"&gt;
  &lt;/a&gt;
  Custom Repository Roles
&lt;/h3&gt;

&lt;p&gt;Next announcement will make organization admins happy. GitHub has indeed announced that we now get &lt;strong&gt;Custom Repository Roles&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RTX5X8CK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vuums8k2ax84ipx46tws.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RTX5X8CK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vuums8k2ax84ipx46tws.gif" alt="Custom Repo Roles" width="880" height="498"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Custom Repository Roles feature allows organization admins to &lt;strong&gt;create custom permission levels&lt;/strong&gt; that can be applied to teams, organization members, and outside collaborators. They must inherit from one of the predefined roles but can extend them because you can pick and choose the permissions you want. Custom Repo Roles apply to all repositories in an organization.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F1ytBf9L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wf43z6q241psslfnu7af.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F1ytBf9L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wf43z6q241psslfnu7af.png" alt="Change Repo Default Role" width="481" height="691"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And once you have the custom roles, it is even possible to assign one of those as &lt;strong&gt;default role for a repo&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pull-request-merge-queue"&gt;
  &lt;/a&gt;
  Pull Request Merge Queue
&lt;/h3&gt;

&lt;p&gt;Ok, last one. This is an improvement to the Pull Request experience, especially when working on big projects or &lt;strong&gt;busy branches&lt;/strong&gt;. It is called &lt;strong&gt;Pull Request Merge Queue&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---FJSeh8N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrrj8kqp1045o4mthpj2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---FJSeh8N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrrj8kqp1045o4mthpj2.png" alt="Merge Queue" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once a pull request has passed all its usual required checks and approvals, instead of the developer trying to merge the pull request (which can turn into a race with other developers --- all trying to avoid the dreaded "your branch is out of date, please update" also triggering a new round of CI checks), the developer simply adds the pull request to the merge queue. The queue then creates a temporary branch with that pull request and the pull requests ahead of it in the queue and triggers CI. Once CI passes, the pull request is merged by fast-forwarding the main branch.&lt;/p&gt;

&lt;p&gt;This feature is in a private beta access for organization accounts at the moment, but I hope this will be soon open to more accounts because it's a really good feature for big projects and busy branches.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;Alright, that's it for today. So what do you think of this year's GitHub Universe and of these new features and announcements? Let me know in the comment section below, and also &lt;strong&gt;let me know which is your favorite announcement&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And if you are into new features, you may also want to watch &lt;a href="https://youtu.be/lRypYtmbKMs"&gt;this video&lt;/a&gt;, in which I cover the recently announced Reusable Workflows in GitHub Actions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
📧 &lt;a href="https://coderdave.io/newsletter"&gt;Newsletter&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee" width="545" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/HJYpzyUsjKc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>devops</category>
      <category>news</category>
      <category>event</category>
    </item>
    <item>
      <title>map, filter and reduce functions in JavaScript</title>
      <author>Srajan Gupta</author>
      <pubDate>Fri, 29 Oct 2021 03:33:44 +0000</pubDate>
      <link>https://dev.to/srajangupta__/map-filter-and-reduce-functions-in-javascript-1lnf</link>
      <guid>https://dev.to/srajangupta__/map-filter-and-reduce-functions-in-javascript-1lnf</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UdzfxEnXK2Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The .map(), .filter() and .reduce() functions in JavaScript are 3 most very useful functions in JavaScript.&lt;/p&gt;

&lt;p&gt;The common thing between them is that they are Array functions and the difference between them is in their return type.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>javascriptarrays</category>
      <category>mapfilterreduce</category>
      <category>node</category>
    </item>
    <item>
      <title>What you missed at GitHub Universe, the latest feature announcements</title>
      <author>Michelle Mannering</author>
      <pubDate>Fri, 29 Oct 2021 02:40:27 +0000</pubDate>
      <link>https://dev.to/github/what-you-missed-at-github-universe-the-latest-feature-announcements-190l</link>
      <guid>https://dev.to/github/what-you-missed-at-github-universe-the-latest-feature-announcements-190l</guid>
      <description>&lt;p&gt;GitHub Universe has been our flagship event for announcing and launching new products. Since last year's GitHub Universe, we've shipped more than 20,000 improvements! That's a lot of cool new features for developers, open source communities, students, and enterprise teams.&lt;/p&gt;

&lt;p&gt;At this year's Universe, we highlighted some of these major features which have recently shipped, as well as launched new products, and announced new things coming.&lt;/p&gt;

&lt;p&gt;If you missed the stream (or were just too awed by Nat's amazing keynote), here's everything you missed from GitHub Universe 2021.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/etMvd9IKPH4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;To make things easy to follow, here's all the sweet new features, in the order they appeared in the keynote. See if you can spot each one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#codespaces"&gt;
  &lt;/a&gt;
  Codespaces
&lt;/h2&gt;

&lt;p&gt;Since launching &lt;a href="https://github.com/features/codespaces"&gt;Codespaces&lt;/a&gt;, people have loved this feature. Being able to create an entire developer environment from anywhere in the world, is just pure awesome. The biggest kicker for developers, is you can spin up a Codespace in seconds. No more waiting for dev computers, credentials, access, or authentication. You can code from anywhere, anytime.&lt;/p&gt;

&lt;p&gt;Codespaces now features &lt;strong&gt;REST API support&lt;/strong&gt; which is in public beta. There's also the new &lt;strong&gt;devcontainer feature composition&lt;/strong&gt;. This is available now in beta too.&lt;/p&gt;

&lt;p&gt;One of the newest additions to Codespaces is in the support for the &lt;strong&gt;GitHub CLI&lt;/strong&gt; directly from Codespaces. If you're yet to try out Codespaces, go and check this out. It's available for Team and Enterprise Cloud plans.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e0967PRy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/FCtu4oJUcAMm3cG.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--HsXy4zaH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1093646089255702528/i-PRZsOj_normal.jpg" alt="Cory Wilkerson profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Cory Wilkerson
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @corywilkerson
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🚢&lt;a href="https://twitter.com/github"&gt;@github&lt;/a&gt; Codespaces + cli. Codespaces from your home in the terminal. ssh and make something great! 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:36 PM - 27 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1453385231264714756" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1453385231264714756" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1453385231264714756" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#copilot"&gt;
  &lt;/a&gt;
  Copilot
&lt;/h2&gt;

&lt;p&gt;Probably one of the most exciting things GitHub launched this year was GitHub Copilot. &lt;a href="https://copilot.github.com/"&gt;Copilot&lt;/a&gt; is your AI pair programmer who can suggest lines of code, or whole functions, in your editor.&lt;/p&gt;

&lt;p&gt;If you're yet to try out Copilot, keep an eye on your inbox. We just &lt;strong&gt;expanded the technical preview&lt;/strong&gt; to more GitHub users. There's also &lt;strong&gt;support for Neovim and JetBrains&lt;/strong&gt;. We're adding new languages too, so this is something you definitely want to keep an eye on.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hoi6vVm4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FCt4FzqWUAcJrrV.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--WtqGx4H6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1414990564408262661/r6YemvF9_normal.jpg" alt="GitHub profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        GitHub
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @github
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      GitHub Copilot Technical Preview is available now for developers on the &lt;a href="https://twitter.com/jetbrains"&gt;@jetbrains&lt;/a&gt; IntelliJ platform of editors including &lt;a href="https://twitter.com/intellijidea"&gt;@intellijidea&lt;/a&gt; and &lt;a href="https://twitter.com/pycharm"&gt;@pycharm&lt;/a&gt; &lt;a href="https://t.co/1FZjsv4NoJ"&gt;plugins.jetbrains.com/plugin/17718-g…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:45 PM - 27 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1453387348692119558" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1453387348692119558" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1453387348692119558" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#new-github-issues"&gt;
  &lt;/a&gt;
  New GitHub Issues
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://github.com/features/issues"&gt;new GitHub Issues&lt;/a&gt; is your ultimate tool for developer project planning and productivity. With the new Issues, you can create task lists, and break them down into more issues. The new project board functionality allows you to track relationships, add custom fields, and visualise projects the way you want.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/64xO030aneI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;At Universe, we announced on Day 1 that the new Issues would be &lt;strong&gt;expanding to public beta&lt;/strong&gt;. Now everyone can try out issue forms, task tracking, and new project workflows. We also announced cumulative flow diagram would be coming soon.&lt;/p&gt;

&lt;p&gt;So don't wait any longer. Jump in and start using the new GitHub Issues. If you'd like to give feedback on this feature, you can &lt;a href="https://github.com/github/feedback/discussions/categories/issues-feedback"&gt;do so over on the GitHub Discussions&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-enterprise-32"&gt;
  &lt;/a&gt;
  GitHub Enterprise 3.2
&lt;/h2&gt;

&lt;p&gt;If you're working for a company, you'll love the new GitHub Enterprise features. We just launched GitHub Enterprise 3.2 with over 70 new features!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ruby support for CodeQL&lt;/strong&gt; is now coming in public beta, and secret scanning is now available to all GitHub Enterprise users. There's also the new &lt;strong&gt;security center&lt;/strong&gt; we just launched in beta. This allows you to better manage your secrets, tokens, and credentials. Check out more &lt;a href="https://github.com/enterprise"&gt;about GitHub Enterprise on the website&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-actions"&gt;
  &lt;/a&gt;
  GitHub Actions
&lt;/h2&gt;

&lt;p&gt;Developers love GitHub Actions, and there are now over 10,400 Actions on the &lt;a href="https://github.com/marketplace?type=actions"&gt;GitHub Marketplace&lt;/a&gt; 😮 The &lt;strong&gt;workflow visualiser&lt;/strong&gt; we launched earlier in the year, has helped developers better manage their workflows. You can also manage workflows better, with improvements to &lt;strong&gt;reusable workflows&lt;/strong&gt;, and a &lt;strong&gt;new auto-scaling functionality&lt;/strong&gt; for self-hosted runners.&lt;/p&gt;

&lt;p&gt;Now, there's also support for &lt;strong&gt;secure cloud deployment with OpenID Connect&lt;/strong&gt;. This is available in public beta.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-discussions"&gt;
  &lt;/a&gt;
  GitHub Discussions
&lt;/h2&gt;

&lt;p&gt;Communities have been loving GitHub Discussions. Now, GitHub Discussions is open to everyone. All communities can take advantage of &lt;strong&gt;labels&lt;/strong&gt;, and the new &lt;strong&gt;announcements&lt;/strong&gt; categories. Keep an eye on &lt;a href="https://docs.github.com/en/discussions"&gt;Discussions&lt;/a&gt;, as Discussion &lt;strong&gt;Polls&lt;/strong&gt; are coming, as well as &lt;strong&gt;insights&lt;/strong&gt; to track the health and growth of your community.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8ty3aTxfqRg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#releases-galore"&gt;
  &lt;/a&gt;
  Releases Galore
&lt;/h2&gt;

&lt;p&gt;One of the tough things about maintaining a project, is the release notes. Some projects don't bother with them, as they are a lot of work, while others projects forget to include fixes or enhancements. Now, you can &lt;strong&gt;auto-generate release notes&lt;/strong&gt;, making sure your community is up to date on the latest project changes.&lt;/p&gt;

&lt;p&gt;When you generate these notes, maintainers can &lt;strong&gt;credit their communities&lt;/strong&gt; with shout-outs for individual contributors. Releases Galore (or auto-generated release notes), is now available to everyone!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#papercuts"&gt;
  &lt;/a&gt;
  Papercuts
&lt;/h2&gt;

&lt;p&gt;There's a few smaller features which we launched throughout the year to help make the lives of developers easier. As Nat said "on their own, they're small. But, when you add them all up, they really make a big difference."&lt;/p&gt;

&lt;p&gt;Users can easily navigate large markdown files with a down drop &lt;strong&gt;table of contents&lt;/strong&gt;. There are also buttons on code blocks to quickly &lt;strong&gt;copy a chunk of code&lt;/strong&gt;. If you're viewing a raw file, you can &lt;strong&gt;copy raw contents&lt;/strong&gt; with the click of a button.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/vWZOHsirqNY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you haven't tried out the new &lt;strong&gt;fetch&lt;/strong&gt; button yet, give this a shot. We released this earlier in the year and it's been a huge hit. I know I've had a much easier time fetching the upstream on my repos.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PR Auto-merge&lt;/strong&gt; was also added early in the year, so you can automatically merge a PR once all the checks are passed. A new feature coming soon is &lt;strong&gt;merge queue&lt;/strong&gt;. This will allow users to queue and batch PRs.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M6OshENu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/FCt9OAvVUAknYm4.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--F26Oc0ef--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1677873294/image_normal.jpg" alt="Nat Friedman profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Nat Friedman
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @natfriedman
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Queue your PR to merge and let the queue worry about the rest. No more broken builds after merge. 🥳 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:15 PM - 27 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1453394825269571591" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1453394825269571591" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1453394825269571591" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#command-palette"&gt;
  &lt;/a&gt;
  Command Palette
&lt;/h2&gt;

&lt;p&gt;We've made it even easier to navigate the GitHub web using your keyboard. The new command palette allows you to jump to an org, repo, file, issue, PR, Discussion, or execute commands. Now you don't have any reason to use the mouse! Next time you're on GitHub, hit CMD+K (for Mac users) or CTRL+K (for Windows users), to open up the command palette.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o0pfSfoK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FCt5pV9XsAIEQbP.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--WtqGx4H6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1414990564408262661/r6YemvF9_normal.jpg" alt="GitHub profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        GitHub
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @github
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      You can now use the cmd-k / ctrl-k keyboard shortcut to navigate around GitHub without taking your hands off the keyboard. &lt;a href="https://t.co/H31sg6BdRl"&gt;githubuniverse.com&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:52 PM - 27 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1453389061478043652" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1453389061478043652" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1453389061478043652" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#github-universe"&gt;
  &lt;/a&gt;
  GitHub Universe
&lt;/h2&gt;

&lt;p&gt;Well that's it for GitHub Universe 2021. There's now over 73 million developers using GitHub, over 4 million orgs on GitHub, and over 200 million repos.&lt;/p&gt;

&lt;p&gt;We hope all these features create a seamless developer experience for you. As Nat said in his keynote closing, "the developer is at the center of everything we do [...] we believe deeply in the power of developers to create a better future with the software they build."&lt;/p&gt;

&lt;p&gt;He tells all developers, no matter where they are in their journey to "keep learning and keep building amazing things, we'll handle the rest." These features are designed for you, to go out and do amazing things. You can read more about them on the &lt;a href="https://github.blog/2021-10-27-everything-new-from-universe-2021/"&gt;GitHub blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you'd like to rewatch all the awesome-ness from GitHub Universe 2021, head to YouTube to view all the action from &lt;a href="https://youtu.be/t7owQr243JY"&gt;Day 1&lt;/a&gt; and &lt;a href="https://youtu.be/kMtlI01zJVk"&gt;Day 2&lt;/a&gt;. And as always, if you have feedback, you can leave your comments, suggestions, and ideas in the &lt;a href="https://github.com/github/feedback/discussions"&gt;GitHub Discussions&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>github</category>
      <category>product</category>
      <category>devops</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Creating a blockchain in 60 lines of Javascript</title>
      <author>Phu Minh</author>
      <pubDate>Fri, 29 Oct 2021 02:27:47 +0000</pubDate>
      <link>https://dev.to/freakcdev297/creating-a-blockchain-in-60-lines-of-javascript-5fka</link>
      <guid>https://dev.to/freakcdev297/creating-a-blockchain-in-60-lines-of-javascript-5fka</guid>
      <description>&lt;p&gt;In recent years, cryptocurrencies and blockchains are two uprising fields, so today, I will share my way of creating a blockchain in Javascript in just 60 lines of codes. I'm still new to the field, if I'm wrong with something, please remind me in the comment section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-blockchain"&gt;
  &lt;/a&gt;
  What is a blockchain?
&lt;/h2&gt;

&lt;p&gt;Before we do any coding, we need to understand what a blockchain is. Technically, a blockchain at its bare minimum is just a list containing objects that have some basic information on it like timestamp, transactions, hash,... Its data must be immutable and unhackable. Modern platforms like Ethereum, Cardano, Polkadot,... have way more complex stuff, but we are staying simple in this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;We are using Node.js for this project, so be sure to install it if you haven't.&lt;/p&gt;

&lt;p&gt;Throughout the article, I will be using the object-oriented programming style, so I expect you to know basic knowledge about it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-block"&gt;
  &lt;/a&gt;
  Creating a block
&lt;/h2&gt;

&lt;p&gt;As I have said, a block is just an object that has some information on it, so we should have a &lt;code&gt;Block&lt;/code&gt; class like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Block&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// this.data should contain information like transactions.&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we have our &lt;code&gt;timestamp&lt;/code&gt; and &lt;code&gt;data&lt;/code&gt;, but a blockchain needs immutability. We can gain that effect by using a hashing function that hashes all of our properties in the block. I suggest reading about hasing on wikipedia, it plays an essential role in a blockchain. &lt;/p&gt;

&lt;p&gt;I'm using the &lt;code&gt;sha256&lt;/code&gt; algorithm. To implement its hashing function, I'll just going to use the Nodejs' built-in &lt;code&gt;crypto&lt;/code&gt; package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;crypto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;crypto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;SHA256&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;crypto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createHash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sha256&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;digest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code should give us what we wanted, but if you want to know how it works, check out &lt;a href="https://nodejs.org/api/crypto.html#class-hash"&gt;Node.js's official doc about the hash class&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We should have something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Get the sha256 hash function.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;crypto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;crypto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;SHA256&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;crypto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createHash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sha256&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;digest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Block&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getHash&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prevHash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// previous block's hash&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Our hash function.&lt;/span&gt;
    &lt;span class="nx"&gt;getHash&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;SHA256&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;prevHash&lt;/code&gt; property also plays a big role in immutability, it ensures that the blocks will stay unchanged along the blockchain's lifespan. It contains the hash of the previous block. You can see that it's empty, but we will do something with it later in this article. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-blockchain"&gt;
  &lt;/a&gt;
  The blockchain
&lt;/h2&gt;

&lt;p&gt;Let's move over to the blockchain class.&lt;/p&gt;

&lt;p&gt;Like I have said, a blockchain is a list with blocks, so we can have a basic form like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Blockchain&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// This property will contain all the blocks.&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You must have a genesis block, which is technically just the first block:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Blockchain&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Create our genesis block&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just for convenience, I'll create a function to get the latest block:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;getLastBlock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we should have a way to add a block to the blockchain.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;addBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Since we are adding a new block, prevHash will be the hash of the old latest block&lt;/span&gt;
        &lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prevHash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getLastBlock&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#validation"&gt;
  &lt;/a&gt;
  Validation
&lt;/h3&gt;

&lt;p&gt;We need to know whether the chain is still valid or not, so we need a method to check validation. The chain is valid if a block's hash is equal to what its hashing method returns, and a block's &lt;code&gt;prevHash&lt;/code&gt; property should be equal to the previous block's hash.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Iterate over the chain&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentBlock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prevBlock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

            &lt;span class="c1"&gt;// Check validation&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentBlock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;currentBlock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getHash&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;prevBlock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;currentBlock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prevHash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#proofofwork"&gt;
  &lt;/a&gt;
  Proof-of-work
&lt;/h2&gt;

&lt;p&gt;Turns out, &lt;code&gt;hash&lt;/code&gt; and &lt;code&gt;prevHash&lt;/code&gt; still have caveats, people can modify a previous block in the chain and then recompute each of the following blocks to coin out another valid chain, and we would also like to implement a way for users to come to a &lt;em&gt;consensus&lt;/em&gt; on a single chronological history of the chain in the correct order in which the transactions were made. Bitcoin and many other cryptocurrencies have a proof-of-work system to solve this problem.&lt;/p&gt;

&lt;p&gt;The system makes it much harder to perform the work required to create a new block. If you want to modify the previous block, you would have to redo the work of the block and all of the blocks that follow it. It requires scanning for a value that starts with a certain number of zero bits when hashed. The value is called the &lt;code&gt;nonce&lt;/code&gt; value, the number of leading zero bits is known as the difficulty. By increasing the difficulty, it gets harder and harder to mine, and we can prevent modifications to the previous blocks because doing all the work again but still catching up to others is impossible.&lt;/p&gt;

&lt;p&gt;We can implement this system by adding a &lt;code&gt;mine&lt;/code&gt; method and a &lt;code&gt;nonce&lt;/code&gt; property to our block:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Block&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getHash&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prevHash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// previous block's hash&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nonce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Our hash function.&lt;/span&gt;
    &lt;span class="nx"&gt;getHash&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;SHA256&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nonce&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;mine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;difficulty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Basically, it loops until the substring of the hash with length of 0, &amp;lt;difficulty&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;// until it is equal to the string 0...000 with length of &amp;lt;difficulty&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;difficulty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;difficulty&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// We increases our nonce so that we can get a whole different hash.&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nonce&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="c1"&gt;// Update our new hash with the new nonce value.&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getHash&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Moving over to the &lt;code&gt;Blockchain&lt;/code&gt; class, we should create a difficulty property:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;difficulty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I will set it to 1, the difficulty should update based on how many blocks mined.&lt;/p&gt;

&lt;p&gt;We must update the &lt;code&gt;addBlock&lt;/code&gt; method from the Blockchain too:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;addBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prevHash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getLastBlock&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mine&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, all blocks need to be mined before being added to the chain.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-note"&gt;
  &lt;/a&gt;
  Quick note
&lt;/h3&gt;

&lt;p&gt;Because we are staying simple, so I used the proof-of-work system for this blockchain. Note that most modern blockchains use a way better system called proof-of-stake (or many of its upgraded variations).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-out-the-chain"&gt;
  &lt;/a&gt;
  Testing out the chain!
&lt;/h2&gt;

&lt;p&gt;Create a new file, that file will be the entry file.&lt;/p&gt;

&lt;p&gt;Let's use our freshly created blockchain! I'll call it &lt;code&gt;JeChain&lt;/code&gt; for now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Blockchain&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./your-blockchain-file.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;JeChain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Blockchain&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Prints out the chain&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JeChain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Add a new block&lt;/span&gt;
&lt;span class="nx"&gt;JeChain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bob&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="c1"&gt;// (This is just a fun example, real cryptocurrencies often have some more steps to implement).&lt;/span&gt;

&lt;span class="c1"&gt;// Prints out the updated chain&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JeChain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--68_lbPh9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yaxvmoz4w7mbfno2mi00.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--68_lbPh9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yaxvmoz4w7mbfno2mi00.png" alt="Image description" width="880" height="509"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source code
&lt;/h2&gt;

&lt;p&gt;You can get the full source code &lt;a href="https://github.com/nguyenphuminh/JeChain"&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#honorable-mention"&gt;
  &lt;/a&gt;
  Honorable mention
&lt;/h2&gt;

&lt;p&gt;I have learnt a lot about blockchains from Simply Explained. Please check them out on Youtube, they have really good blockchain tutorial series.&lt;/p&gt;

&lt;p&gt;I also grabbed some info on &lt;a href="https://www.activestate.com/blog/how-to-build-a-blockchain-in-python/"&gt;this article too.&lt;/a&gt; Check them out!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#offtopic"&gt;
  &lt;/a&gt;
  Off-topic
&lt;/h2&gt;

&lt;p&gt;Should I continue the series? And if yes, what should I write about? Proof-of-stake? Full cryptocurrency? Smart contracts? Please let me know in the comment section.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Discuss: When is the right stage to move from JavaScript to a JavaScript framework like React or Angular ?</title>
      <author>Cess</author>
      <pubDate>Fri, 29 Oct 2021 00:34:18 +0000</pubDate>
      <link>https://dev.to/cesscode/discuss-when-is-the-right-stage-to-move-from-javascript-to-a-javascript-framework-like-react-or-angular--22n2</link>
      <guid>https://dev.to/cesscode/discuss-when-is-the-right-stage-to-move-from-javascript-to-a-javascript-framework-like-react-or-angular--22n2</guid>
      <description>&lt;p&gt;Hello Everyone 👋🏾&lt;/p&gt;

&lt;p&gt;Quick question&lt;/p&gt;

&lt;p&gt;At what point do you get to when learning JavaScript and you say Yes I know enough now. Let me move to React or any other JavaScript framework ???&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>discuss</category>
      <category>programming</category>
    </item>
    <item>
      <title>Binary Data Transfer on Azure Functions via OpenAPI</title>
      <author>Justin Yoo</author>
      <pubDate>Fri, 29 Oct 2021 00:00:29 +0000</pubDate>
      <link>https://dev.to/azure/binary-data-transfer-on-azure-functions-via-openapi-5c0i</link>
      <guid>https://dev.to/azure/binary-data-transfer-on-azure-functions-via-openapi-5c0i</guid>
      <description>&lt;p&gt;Since the &lt;a href="https://www.nuget.org/packages/Microsoft.Azure.WebJobs.Extensions.OpenApi"&gt;latest version (0.9.0-preview)&lt;/a&gt; of the &lt;a href="https://aka.ms/azfunc-openapi"&gt;OpenAPI extension&lt;/a&gt; for &lt;a href="https://docs.microsoft.com/azure/azure-functions/functions-overview?WT.mc_id=dotnet-47576-juyoo"&gt;Azure Functions&lt;/a&gt; was released, it supports the byte array types. With this support, you can now define the binary data type like image files onto the OpenAPI document. Throughout this post, I'm going to discuss how to declare the binary data and transfer it through the Azure Functions OpenAPI extension.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can download the sample app code from the GitHub repository below:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/devkimchi"&gt;
        devkimchi
      &lt;/a&gt; / &lt;a href="https://github.com/devkimchi/azure-functions-binary-data-via-swagger-ui"&gt;
        azure-functions-binary-data-via-swagger-ui
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This provides a sample app to show how to handle binary data through Swagger UI on Azure Functions
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Azure Functions Binary Data Transfer via Swagger UI&lt;/h1&gt;
&lt;p&gt;This provides a sample app to show how to transfer binary data through Swagger UI on Azure Functions.&lt;/p&gt;
&lt;h2&gt;
Related Read&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;한국어: TBD&lt;/li&gt;
&lt;li&gt;English: TBD&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/devkimchi/azure-functions-binary-data-via-swagger-ui"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#binary-data-transfer-with-raw-textplain-endraw-content-type"&gt;
  &lt;/a&gt;
  Binary Data Transfer with &lt;code&gt;text/plain&lt;/code&gt; Content Type
&lt;/h2&gt;

&lt;p&gt;Let's look at the function below. It directly passes the based64 encoded string to Azure Function app through the request payload. It would be best to assume that the binary data has already been converted to a base64 string. The function defines the content type of &lt;code&gt;text/plain&lt;/code&gt; and data type of &lt;code&gt;byte[]&lt;/code&gt; &lt;em&gt;(line #7)&lt;/em&gt;. For the response payload, it defines the content type of &lt;code&gt;image/png&lt;/code&gt; and data type of &lt;code&gt;byte[]&lt;/code&gt; &lt;em&gt;(line #9)&lt;/em&gt;. As the actual data you are passing is the base64 encoded string, all you need to do is to convert the encoded string into byte array &lt;em&gt;(line #15-21)&lt;/em&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The OpenAPI document about this part looks like below (omitted unrelated lines for brevity). First, the request payload is defined as &lt;code&gt;text/plain&lt;/code&gt;, with the data type of &lt;code&gt;string&lt;/code&gt; and format of &lt;code&gt;binary&lt;/code&gt; &lt;em&gt;(line #7-10)&lt;/em&gt;. Next, the response payload is also defined as &lt;code&gt;image/png&lt;/code&gt;, with the data type of string and format of &lt;code&gt;binary&lt;/code&gt; &lt;em&gt;(line #16-19)&lt;/em&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Once you run the function app on your local machine, it looks like below. The image data is transferred correctly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kOAPkhQx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/10/transmitting-binary-data-via-openapi-on-azure-functions-01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kOAPkhQx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/10/transmitting-binary-data-via-openapi-on-azure-functions-01.png" alt="Byte Array"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#binary-data-transfer-with-raw-multipartformdata-endraw-content-type"&gt;
  &lt;/a&gt;
  Binary Data Transfer with &lt;code&gt;multipart/form-data&lt;/code&gt; Content Type
&lt;/h2&gt;

&lt;p&gt;Let's transfer both binary data and text data through the &lt;code&gt;multipart/form-data&lt;/code&gt; content type. This content type is the most typical way to transfer binary data through API. The request payload declares the content type of &lt;code&gt;multipart/form-data&lt;/code&gt; and data type of &lt;code&gt;MultiPartFormDataModel&lt;/code&gt; &lt;em&gt;(line #7)&lt;/em&gt;. &lt;code&gt;MultiPartFormDataModel&lt;/code&gt; is a DTO that contains the &lt;code&gt;Image&lt;/code&gt; property with the byte array type &lt;em&gt;(line #34)&lt;/em&gt;. When you send a POST request to the API endpoint, because you use the &lt;code&gt;multipart/form-data&lt;/code&gt; content type, the image data should be retrieved from &lt;code&gt;req.Form.Files[0]&lt;/code&gt;, and you need to convert it to the byte array &lt;em&gt;(line #15-23)&lt;/em&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The OpenAPI document related to this part looks like below (omitted unrelated lines for brevity). The request payload has a reference to the object &lt;em&gt;(line #9)&lt;/em&gt;, and the object has a property of &lt;code&gt;image&lt;/code&gt;, with the data type of &lt;code&gt;string&lt;/code&gt; and format of &lt;code&gt;binary&lt;/code&gt; &lt;em&gt;(line #31-33)&lt;/em&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Run the function app and see how it's going. Your image data has been transferred successfully through the &lt;code&gt;multipart/form-data&lt;/code&gt; content type.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e9x506ni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/10/transmitting-binary-data-via-openapi-on-azure-functions-02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e9x506ni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/10/transmitting-binary-data-via-openapi-on-azure-functions-02.png" alt="Multi-Part Form-Data"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;So far, we've walked through how to define binary data through Azure Functions OpenAPI extension and run it on Swagger UI. Since this feature was one of the long-waited ones, I'm hoping everyone can make use of this feature in many places.&lt;/p&gt;

</description>
      <category>azure</category>
      <category>azurefunctions</category>
      <category>openapi</category>
      <category>binarydata</category>
    </item>
    <item>
      <title>How Next.js 12 improved Material-UI app compile by 8X</title>
      <author>Kyle Hoskins</author>
      <pubDate>Thu, 28 Oct 2021 23:53:38 +0000</pubDate>
      <link>https://dev.to/kyleapex/how-nextjs-12-improved-material-ui-app-compile-by-8x-47nf</link>
      <guid>https://dev.to/kyleapex/how-nextjs-12-improved-material-ui-app-compile-by-8x-47nf</guid>
      <description>&lt;p&gt;Some are calling &lt;a href="https://nextjs.org/blog/next-12"&gt;Next.js 12&lt;/a&gt; the "biggest step forward yet."   &lt;strong&gt;&lt;em&gt;Especially&lt;/em&gt;&lt;/strong&gt; Rust fans.  &lt;/p&gt;

&lt;p&gt;Next.js 12's new Rust compiler features ~3x faster refresh locally and ~5x faster builds, &lt;strong&gt;but that's not the feature that helped me most&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The unsung hero of the release for me was...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#compiled-module-count"&gt;
  &lt;/a&gt;
  Compiled module count!
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Next.js now outputs Fast Refresh timing in the console for both client and server compilation, including the number of modules and files compiled.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2XNnKrhf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oz8tabreo4snzf32yl2y.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2XNnKrhf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oz8tabreo4snzf32yl2y.jpg" alt="Image description" width="880" height="218"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10000-modules-faint-"&gt;
  &lt;/a&gt;
  10,000 Modules * faint *
&lt;/h2&gt;

&lt;p&gt;10,000 is great if we're talking about &lt;em&gt;Outliers&lt;/em&gt; 📚, but downright scary 😱 when we're talking about modules.&lt;/p&gt;

&lt;p&gt;My application uses &lt;a href="https://mui.com/"&gt;Material-UI&lt;/a&gt;, but is pretty small, so what happened?!&lt;/p&gt;

&lt;p&gt;Take a look:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Menu from '@mui/icons-material/Menu';
import ChevronRight from '@mui/icons-material/ChevronRight';
import Save from '@mui/icons-material/Save';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;versus:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Menu, ChevronRight, Save} from '@mui/icons-material';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The shorter one sure looks prettier, and VSCode even suggests importing from @mui/icons-material first, but don't fall for it!&lt;/p&gt;

&lt;p&gt;How does it impact the compile time?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// importing from @mui/icons-material
event - compiled successfully in 5.1s (10013 modules)

// importing from @mui/icons-material/ChevronRight
event - compiled successfully in 615ms (1024 modules)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a first time Next.js user, I did not have a project to compare against to recognize that my compile times were slow until the new module count logging feature.&lt;/p&gt;

&lt;p&gt;If you use Material-UI, be sure to replace any instances of direct imports from &lt;code&gt;@mui/material&lt;/code&gt; or &lt;code&gt;@mui/styles&lt;/code&gt; as you will be compiling ALL the modules from the entire packages. Watch out for &lt;a href="https://basarat.gitbook.io/typescript/main-1/barrel"&gt;barrel files&lt;/a&gt; too!&lt;/p&gt;

&lt;p&gt;With 1,000 modules remaining, I still have some improvements to make, but I figured I'd share for any others who may experience the same shock!  &lt;strong&gt;How many modules does your Next.js application have?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;P.S. Thanks for reading my first DEV article!&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>javascript</category>
      <category>performance</category>
    </item>
    <item>
      <title>tsParticles 1.37.0 Released</title>
      <author>Matteo Bruni</author>
      <pubDate>Thu, 28 Oct 2021 23:45:28 +0000</pubDate>
      <link>https://dev.to/matteobruni/tsparticles-1370-released-5enp</link>
      <guid>https://dev.to/matteobruni/tsparticles-1370-released-5enp</guid>
      <description>&lt;h1&gt;
  &lt;a href="#tsparticles-1370-changelog"&gt;
  &lt;/a&gt;
  tsParticles 1.37.0 Changelog
&lt;/h1&gt;

&lt;p&gt;last post was 1.34.0 so every missing version will be detailed&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1341"&gt;
  &lt;/a&gt;
  1.34.1
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#bug-fixes"&gt;
  &lt;/a&gt;
  Bug Fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fixed themes and emitters interoperability, themes were not loaded correctly when the window is resized.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#1350"&gt;
  &lt;/a&gt;
  1.35.0
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#internal-updates"&gt;
  &lt;/a&gt;
  Internal updates
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Split some polygon-mask files, nothing affecting output&lt;/li&gt;
&lt;li&gt;Updated code to work with TypeScript 4.4 (except angular and svelte for now)&lt;/li&gt;
&lt;li&gt;Moved some code out from particle constructor to updaters&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#new-features"&gt;
  &lt;/a&gt;
  New Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Added roll mode to use only horizontal, vertical or both rolling&lt;/li&gt;
&lt;li&gt;Added auto options to theme default to change theme automatically&lt;/li&gt;
&lt;li&gt;Created a custom pathseg for now with some removed types in TypeScript 4.4, sent PR to the &lt;a href="https://github.com/progers/pathseg/pull/32"&gt;original project&lt;/a&gt; to add them in the polyfill. It's nomore required when using PolygonMask since is dynamically imported if needed&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#1351"&gt;
  &lt;/a&gt;
  1.35.1
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#bug-fixes"&gt;
  &lt;/a&gt;
  Bug Fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fixed issue #2241 &lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#1352"&gt;
  &lt;/a&gt;
  1.35.2
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#bug-fixes"&gt;
  &lt;/a&gt;
  Bug Fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Added try catch in the pathseg polyfill to avoid crashes when server side (fixes #2264)&lt;/li&gt;
&lt;li&gt;Improved &lt;code&gt;isSsr&lt;/code&gt; utility&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#1353"&gt;
  &lt;/a&gt;
  1.35.3
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#new-features"&gt;
  &lt;/a&gt;
  New Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Removed &lt;code&gt;id&lt;/code&gt; constraint on &lt;code&gt;tsParticles.load/set&lt;/code&gt; methods, a random one will be generated if not specified.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h4&gt;

&lt;p&gt;The following syntax is now valid:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;tsParticles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="cm"&gt;/* options */&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#1360"&gt;
  &lt;/a&gt;
  1.36.0
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#bug-fixes"&gt;
  &lt;/a&gt;
  Bug Fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fixed missing file in cdnjs&lt;/li&gt;
&lt;li&gt;Fixed lazy loading of custom pathseg polyfill&lt;/li&gt;
&lt;li&gt;Fixed issue with responsive not refreshing when changing options &lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;
  &lt;a href="#1370"&gt;
  &lt;/a&gt;
  1.37.0
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#bug-fixes"&gt;
  &lt;/a&gt;
  Bug Fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Refreshing all tsParticles instances when adding a plugin, fixes an issue with polygon mask and chrome&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#new-features"&gt;
  &lt;/a&gt;
  New Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Added responsive mode (canvas or screen) from dev branch, closes #2358&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#features-changed"&gt;
  &lt;/a&gt;
  Features Changed
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;FullScreen mode is now active by default with a z index of &lt;code&gt;0&lt;/code&gt;, and the interactivity mode is &lt;code&gt;"window"&lt;/code&gt; so everything still works as expected.&lt;/li&gt;
&lt;/ul&gt;




&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/matteobruni"&gt;
        matteobruni
      &lt;/a&gt; / &lt;a href="https://github.com/matteobruni/tsparticles"&gt;
        tsparticles
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      tsParticles - Easily create highly customizable particles animations and use them as animated backgrounds for your website. Ready to use components available for React.js, Vue.js (2.x and 3.x), Angular, Svelte, jQuery, Preact, Inferno, Solid, Riot and Web Components.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://particles.js.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/58f22f0a546d5d7f34b4668dc842ac91b3a4cf9a5de72346559b7d15b13e587e/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f62616e6e6572322e706e67" alt="banner"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
tsParticles - TypeScript Particles&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;A lightweight TypeScript library for creating particles. Dependency free (*), browser ready and compatible with
React.js, Vue.js (2.x and 3.x), Angular, Svelte, jQuery, Preact, Inferno, Riot.js, Solid.js, and Web Components&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://openbase.com/js/tsparticles?utm_source=embedded&amp;amp;utm_medium=badge&amp;amp;utm_campaign=rate-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/303db015a31c411aee869f57d55a44a53cd2f5380d0de5ee8abecb337a9452a6/68747470733a2f2f6261646765732e6f70656e626173652e636f6d2f6a732f726174696e672f74737061727469636c65732e737667" alt="Rate on Openbase"&gt;&lt;/a&gt; &lt;a href="https://www.jsdelivr.com/package/npm/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8c64088d02effc095dd7386325d216ce6d6bd46513a88ed2274e0ec4e6d876cf/68747470733a2f2f646174612e6a7364656c6976722e636f6d2f76312f7061636b6167652f6e706d2f74737061727469636c65732f62616467653f7374796c653d726f756e646564" alt="jsDelivr"&gt;&lt;/a&gt; &lt;a href="https://cdnjs.com/libraries/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e9e5a7a72f7cbc65eedd0e4d7431e4d4762c472ad4a66b6648a8e74c2b6be331/68747470733a2f2f696d672e736869656c64732e696f2f63646e6a732f762f74737061727469636c6573" alt="Cdnjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e18baafcedd7efbbd13d6e2b1cf738c07ea898383c946e6e7b16400f813d70cb/68747470733a2f2f62616467652e667572792e696f2f6a732f74737061727469636c65732e737667" alt="npmjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bc16ec38506bbab6f6b729850ad28fd94a5643f1633b4356647033c3aa3fe102/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f74737061727469636c6573" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://lerna.js.org/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3bc63f921dd60bac6d91aa900ef570c928b2aa4c2124ed23647e8fe9d2232853/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d61696e7461696e6564253230776974682d6c65726e612d6363303066662e737667" alt="lerna"&gt;&lt;/a&gt; &lt;a href="https://www.codefactor.io/repository/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ce969771f1502f57861fe8ce7c787c209c50ef17c2e19f35cb1de0c960eba94a/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f6d617474656f6272756e692f74737061727469636c65732f6261646765" alt="CodeFactor"&gt;&lt;/a&gt; &lt;a href="https://www.codacy.com/manual/ar3s/tsparticles?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=matteobruni/tsparticles&amp;amp;utm_campaign=Badge_Grade" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f96d4d0dccc9c7491f3ed07af70a808b0fd4d2e4d863a1f7bb9e51e10ae526e/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6239383361616633343631613463343862316532656563636531666631643734" alt="Codacy Badge"&gt;&lt;/a&gt; &lt;a href="https://gitpod.io/#https://github.com/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/daadb4894128d1e19b72d80236f5959f1f2b47f9fe081373f3246131f0189f6c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f476974706f642d72656164792d2d746f2d2d636f64652d626c75653f6c6f676f3d676974706f64" alt="Gitpod Ready-to-Code"&gt;&lt;/a&gt; &lt;a href="https://repl.it/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/64adf1bd83058aa64f848245f74bef77cd7cc2a3f36343ac44d6d0c39cc41bc3/68747470733a2f2f7265706c2e69742f62616467652f6769746875622f6d617474656f6272756e692f74737061727469636c6573" alt="Run on Repl.it"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://join.slack.com/t/tsparticles/shared_invite/enQtOTcxNTQxNjQ4NzkxLWE2MTZhZWExMWRmOWI5MTMxNjczOGE1Yjk0MjViYjdkYTUzODM3OTc5MGQ5MjFlODc4MzE0N2Q1OWQxZDc1YzI" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ee2eed4d8159b570eef394a484f574d3bd038f6c64ad92ca0db286045486edcb/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f736c61636b2e706e67" alt="Slack"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/hACwv45Hme" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7c4f4ed816c2b77d7c2e15df3876cafa1cf89a896afb04633a1b6e28a81c5036/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f646973636f72642e706e67" alt="Discord"&gt;&lt;/a&gt; &lt;a href="https://t.me/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/309cad18f9a2090efdb147ac71064a969b826c3f4e9387f0a8d8e36e70133a80/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f74656c656772616d2e706e67" alt="Telegram"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.producthunt.com/posts/tsparticles?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-tsparticles%22" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e86b7f51a0224618fe45aad99bff3e02ed8a5838691f244bf1df0e94454dafe2/68747470733a2f2f6170692e70726f6475637468756e742e636f6d2f776964676574732f656d6265642d696d6167652f76312f66656174757265642e7376673f706f73745f69643d313836313133267468656d653d6c69676874" alt="tsParticles Product Hunt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Do-you-want-to-use-it-on-your-website"&gt;Use for your website&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Library-installation"&gt;Library installation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Official-components-for-some-of-the-most-used-frameworks"&gt;Official components for some of the most used frameworks&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Angular"&gt;Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Inferno"&gt;Inferno&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#jQuery"&gt;jQuery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Preact"&gt;Preact&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#ReactJS"&gt;ReactJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Svelte"&gt;Svelte&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#VueJS-2x"&gt;VueJS 2.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#VueJS-3x"&gt;VueJS 3.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#WordPress"&gt;WordPress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Templates-and-Resources"&gt;Templates and Resources&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Demo--Generator"&gt;Demo / Generator&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Characters-as-particles"&gt;Characters as particles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Mouse-hover-connections"&gt;Mouse hover connections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Polygon-mask"&gt;Polygon mask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Animated-stars"&gt;Animated stars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Nyan-cat-flying-on-scrolling-stars"&gt;Nyan cat flying on scrolling stars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Background-Mask-particles"&gt;Background Mask particles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Migrating-from-Particlesjs"&gt;Migrating from Particles.js&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/matteobruni/tsparticles#PluginsCustomizations"&gt;Plugins/Customizations&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Do you want to use it on your website?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Documentation and Development references &lt;a href="https://particles.js.org/docs/" rel="nofollow"&gt;here&lt;/a&gt; 📖&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This library is available on the two most popular CDNs and it's easy and ready to use, if you were using particles.js
it's even easier&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You'll find the
instructions &lt;a href="https://github.com/matteobruni/tsparticles/blob/main/README.md#library-installation"&gt;below&lt;/a&gt;, with all the
links you need, and &lt;em&gt;don't be scared by &lt;/em&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/matteobruni/tsparticles"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
    </item>
  </channel>
</rss>
