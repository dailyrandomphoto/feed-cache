<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Divtober Day 30: Contrast</title>
      <author>Alvaro Montoro</author>
      <pubDate>Sun, 31 Oct 2021 14:58:33 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/divtober-day-30-contrast-23em</link>
      <guid>https://dev.to/alvaromontoro/divtober-day-30-contrast-23em</guid>
      <description>&lt;p&gt;Again, I forgot to publish this yesterday, when the word was "Contrast." I did two drawings:&lt;/p&gt;

&lt;p&gt;The first one was a basic "logo" showing the word "contrast" with the contrast symbol (kind of):&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/MWvvMpy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The second one was an animated drawing showing the contrast between the summer and winter season on the same landscape (slide right and left to see the changes):&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/VwzMvzx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Unfortunately, this last one won't work for Firefox users, who will only see the static winter landscape and won't be able to interact with it.&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>divtober</category>
      <category>css</category>
      <category>art</category>
    </item>
    <item>
      <title>Top 3 Office 365 Backup And Recovery Solutions On The Market</title>
      <author>ArjunPatel33</author>
      <pubDate>Sun, 31 Oct 2021 14:31:52 +0000</pubDate>
      <link>https://dev.to/arjunpatel/top-3-office-365-backup-and-recovery-solutions-on-the-market-9ph</link>
      <guid>https://dev.to/arjunpatel/top-3-office-365-backup-and-recovery-solutions-on-the-market-9ph</guid>
      <description>&lt;p&gt;Since Microsoft doesn’t provide native backup for Microsoft Office 365, its very important to find the best backup and recovery solution on the market. In these following sections i'm going to talk about the best 3 solutions that will work perfectly for you and for your customers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.Dell&lt;/strong&gt;, it’s available as a stand-alone solution and as a part of Dell’s Data Protection Suite, which also includes Avamar and NetWorker. They offer a range of solutions and products that secure IT infrastructure, individual employee devices and wider industries. The solution provides software defined data protection as well as automated discovery and deduplication.&lt;a href="https://www.delltechnologies.com/en-us/index.htm"&gt;Dell Technologies&lt;/a&gt; focus on empowering organizations through digital transformation. PowerProtect Data Manager is Dell Technologies’ main data backup and recovery solution, designed to protect physical, virtual and cloud environments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Altaro&lt;/strong&gt; are a market-leading vendor for backup and recovery solutions for SMBs and MSPs. The solution is also easy to manage via a central cloud management console, from which admins can configure full and granular data restorations.&lt;br&gt;
&lt;a href="https://www.altaro.com/office-365-backup/"&gt;Backup office 365&lt;/a&gt; is cloud-based, which makes it easy to deploy and configure. Altaro Office 365 Backup is their MS O365 replication and restoration software solution that focuses on backing up Office 365 mailboxes and files stored within OneDrive and SharePoint.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Veeam&lt;/strong&gt; are a global market leader in backup and recovery solutions, holding the highest market share in EMEA (Europe, the Middle East and Africa) and the third largest share worldwide. 82% of Fortune 500 companies are in the Veeam client pool and trust this vendor with their data. However, &lt;a href="https://www.veeam.com/"&gt;Veeam&lt;/a&gt; also offer Veeam Backup for Microsoft Office 365 as a standalone product to protect and restore Microsoft O365 data, including Office 365 mailboxes, Exchange, SharePoint, OneDrive, OneNote and Teams.&lt;br&gt;
Veeam offer a range of solutions to fit business needs, with their Backup &amp;amp; Replication solution being one of their most popular flagship products.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are your thoughts on this?&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>officebackup</category>
      <category>solutions</category>
      <category>backup</category>
    </item>
    <item>
      <title>All Algorithms</title>
      <author>Danish Saleem</author>
      <pubDate>Sun, 31 Oct 2021 14:28:46 +0000</pubDate>
      <link>https://dev.to/mrdanishsaleem/all-25-algorithms-5292</link>
      <guid>https://dev.to/mrdanishsaleem/all-25-algorithms-5292</guid>
      <description>&lt;h2&gt;
  &lt;a href="#searching"&gt;
  &lt;/a&gt;
  Searching
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Linear Search&lt;/li&gt;
&lt;li&gt;Binary Search&lt;/li&gt;
&lt;li&gt;Depth First Search&lt;/li&gt;
&lt;li&gt;Breadth First Search&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#sorting"&gt;
  &lt;/a&gt;
  Sorting
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Insertion Sort&lt;/li&gt;
&lt;li&gt;Heap Sort&lt;/li&gt;
&lt;li&gt;Selection Sort&lt;/li&gt;
&lt;li&gt;Merge Sort&lt;/li&gt;
&lt;li&gt;Quick Sort&lt;/li&gt;
&lt;li&gt;Counting Sort&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#graphs"&gt;
  &lt;/a&gt;
  Graphs
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Kruskal’s Algorithm&lt;/li&gt;
&lt;li&gt;Dijkstra’s Algorithm&lt;/li&gt;
&lt;li&gt;Bellman Ford Algorithm&lt;/li&gt;
&lt;li&gt;Floyd Warshall Algorithm&lt;/li&gt;
&lt;li&gt;Topological Sort Algorithm&lt;/li&gt;
&lt;li&gt;Flood Fill Algorithm&lt;/li&gt;
&lt;li&gt;Lee Algorithm&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#arrays"&gt;
  &lt;/a&gt;
  Arrays
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Kadane’s Algorithm&lt;/li&gt;
&lt;li&gt;Floyd’s Cycle Detection Algorithm&lt;/li&gt;
&lt;li&gt;KMP Algorithm&lt;/li&gt;
&lt;li&gt;Quick Select Algorithm&lt;/li&gt;
&lt;li&gt;Boyer – More Majority Vote Algorithm&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#basics"&gt;
  &lt;/a&gt;
  Basics
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Huffman Coding Compression Algorithm&lt;/li&gt;
&lt;li&gt;Euclid’s Algorithm&lt;/li&gt;
&lt;li&gt;Union Find Algorithm&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  Let's connect!
&lt;/h2&gt;

&lt;p&gt;You can follow me on &lt;a href="https://twitter.com/MrDanishSaleem"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/mrdanishsaleem/"&gt;LinkedIn&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/mrdanishsaleem/"&gt;GitHub&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you like this post. Kindly support me by &lt;a href="https://www.buymeacoffee.com/mrdanishsaleem"&gt;Buying Me a Coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IrvJezlq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0ikih5nlsqs0oops11e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IrvJezlq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0ikih5nlsqs0oops11e.png" alt="Buy Me a Coffee" width="880" height="193"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>beginners</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Creating an NFT on Solana with Metaplex Candy Machine. </title>
      <author>Devind Dev</author>
      <pubDate>Sun, 31 Oct 2021 14:16:53 +0000</pubDate>
      <link>https://dev.to/devindxdeveloper/creating-an-nft-on-solana-with-metaplex-candy-machine-4agp</link>
      <guid>https://dev.to/devindxdeveloper/creating-an-nft-on-solana-with-metaplex-candy-machine-4agp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#guide-overiew"&gt;
  &lt;/a&gt;
  Guide Overiew
&lt;/h2&gt;

&lt;p&gt;After what felt like walking through a mine field trying to figure out how to create my own NFT on Solana with the current guides, I decided to put together a guide myself in a very beginner friendly fashion.&lt;/p&gt;

&lt;p&gt;I won't be taking a deeper dive into the specifics of how everything works, but rather help people with zero knowledge of rust obtain a general understanding on how to create their very own NFT on Solana with the help of Metaplex candy machine and a web starter kit.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I used &lt;strong&gt;Ubuntu 21.10 - Wayland&lt;/strong&gt; for it. Some things may vary depending on the operating system you are running.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-metaplex-candy-machine"&gt;
  &lt;/a&gt;
  What is a Metaplex Candy Machine?
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Metaplex&lt;/code&gt; is a command line tool that interacts with the candy-machine program. In this guide, we will use it to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;em&gt;Upload&lt;/em&gt; your images along with their metadata to &lt;em&gt;arweave&lt;/em&gt;, then register them on the Solana blockchain.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Verify&lt;/em&gt; that the state of your candy machine is valid and complete.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Mint&lt;/em&gt; individual tokens.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;Candy Machine&lt;/code&gt; is a system that manages fair mints.&lt;br&gt;
• The minting process starts and finishes at the same time for everyone.&lt;br&gt;
• It won't accept your funds if there are no more NFTs to sell.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://nodejs.org/en/"&gt;NodeJS&lt;/a&gt; &lt;em&gt;(version 14.17.6)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.solana.com/cli/install-solana-cli-tools"&gt;SolanaCLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/metaplex-foundation/metaplex.git"&gt;Metaplex CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://phantom.app/"&gt;Phantom Wallet&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you have a different version of Node installed on your system, you can use &lt;a href="https://github.com/nvm-sh/nvm"&gt;nvm&lt;/a&gt; which allows you to quickly install and use different versions of node via the command line.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#installing-the-solanacli"&gt;
  &lt;/a&gt;
  Installing The SolanaCLI
&lt;/h3&gt;

&lt;p&gt;Solana already has really well made guides on installing and using the Solana command line.&lt;br&gt;
• &lt;a href="https://docs.solana.com/cli/install-solana-cli-tools"&gt;Install Solana Command Line Tools&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#using-devnet"&gt;
  &lt;/a&gt;
  Using Devnet
&lt;/h4&gt;

&lt;p&gt;Devnet is really useful for developers to test out their programs and applications.&lt;/p&gt;

&lt;p&gt;You can set your default Solana url to devnet using:&lt;br&gt;
&lt;code&gt;$ solana config set --url https://api.devnet.solana.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, let's create a devnet wallet:&lt;br&gt;
&lt;code&gt;$ solana-keygen new --outfile ~/.config/solana/devnet.json&lt;/code&gt;&lt;br&gt;
Remember to store your seed phrase somewhere safe.&lt;/p&gt;

&lt;p&gt;I highly recommend making devnet your default &lt;em&gt;keypair&lt;/em&gt;&lt;br&gt;
&lt;code&gt;$ solana config set --keypair ~/.config/solana/devnet.json&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#funding-the-devnet-wallet"&gt;
  &lt;/a&gt;
  Funding The Devnet Wallet
&lt;/h4&gt;

&lt;p&gt;Firstly, let’s make sure that we’re on devnet by checking the configuration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ solana config get
//Output:
Config File: /Users/dev/.config/solana/cli/config.yml
RPC URL: https://api.devnet.solana.com
WebSocket URL: wss://api.devnet.solana.com/ (computed)
Keypair Path: /Users/dev/.config/solana/devnet.json
Commitment: confirmed
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let’s fund that wallet:&lt;br&gt;
Firstly, We check the balance of our current wallet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ solana balance 
//Output:
0 SOL
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we airdrop the amount of SOL to our wallet. Remember, the amount is capped to 5 SOL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ solana airdrop 4
//Output
Requesting airdrop of 4

Signature: Transaction Signature

4 SOL
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, Let’s check our balance to confirm the airdrop was successful.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ solana balance
//Output:
4 SOL //This can vary depending on the balance you initially had.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;In case you’re confused by any of the above steps, you can check the manuals to get a better understanding by running:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ solana help config
$ solana help balance
$ solana help airdrop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#configuring-phantom-wallet"&gt;
  &lt;/a&gt;
  Configuring Phantom Wallet
&lt;/h4&gt;

&lt;p&gt;After setting up your phantom wallet, we can link our newly created devnet wallet above to phantom.&lt;br&gt;
To do so, first we need to open its settings, click on &lt;code&gt;Change Network&lt;/code&gt; and select &lt;code&gt;Devnet&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, we need to obtain the devnet wallet private key. To obtain that, open your terminal and &lt;code&gt;cat&lt;/code&gt; to view the contents of the &lt;code&gt;keypair.json&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cat .config/solana/devnet.json
//Output:
[12,22,.....]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now copy the output you received and open phantom wallet. Click on the top left navigation menu and click on &lt;code&gt;Add/Connect Wallet&lt;/code&gt; and then click on &lt;code&gt;Import Private Key&lt;/code&gt; and give it a suitable name and paste the contents we copied before in the Private Key field.&lt;/p&gt;

&lt;p&gt;You should be able to see 4 SOL in your wallet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#running-candy-machine-cli"&gt;
  &lt;/a&gt;
  Running Candy Machine CLI
&lt;/h3&gt;

&lt;p&gt;Please ensure that you have &lt;code&gt;node&lt;/code&gt; and &lt;code&gt;yarn&lt;/code&gt; installed before proceeding.&lt;/p&gt;

&lt;p&gt;Also install &lt;code&gt;ts-node&lt;/code&gt; by running:&lt;br&gt;
&lt;code&gt;$ npm install -g ts-node&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, let’s clone the metaplex project into the location of your choice.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git clone https://github.com/metaplex-foundation/metaplex.git
$ cd metaplex/js
$ yarn install &amp;amp;&amp;amp; yarn bootstrap &amp;amp;&amp;amp; yarn build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run the command line utility,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$  ts-node metaplex/js/packages/cli/src/candy-machine-cli.ts help
Usage: candy-machine-cli [options] [command]

Options:
  -V, --version                          output the version number
  -h, --help                             display help for command

Commands:
  upload [options] &amp;lt;directory&amp;gt;
  verify [options]
  verify_price [options]
  create_candy_machine [options]
  update_candy_machine [options]
  mint_one_token [options]
  sign [options]
  sign_candy_machine_metadata [options]
  help [command]                         display help for command
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#organizing-amp-uploading-your-assets"&gt;
  &lt;/a&gt;
  Organizing &amp;amp; Uploading Your Assets
&lt;/h3&gt;

&lt;p&gt;For this guide, we will be using pre-made assets which you can download by &lt;a href="https://drive.google.com/drive/folders/1DoV44eED8PrgmMeAL-i-ceJ3NAx1ND5L?usp=sharing"&gt;clicking here.&lt;/a&gt; courtesy of &lt;a href="https://github.com/kevinfaveri/solana-candy-factory"&gt;solana-candy-factory&lt;/a&gt;&lt;br&gt;
Place this &lt;code&gt;assets&lt;/code&gt; folder in a suitable location.&lt;br&gt;
Here is how you should organize your NFT files to upload:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ls assets | sort -n
0.json
0.png
1.json
1.png
2.json
2.png
3.json
3.png
....
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can notice that these files come in numerical pairs, that is &lt;code&gt;1.png&lt;/code&gt; and &lt;code&gt;1.json&lt;/code&gt; are the two halves of the NFT. The &lt;code&gt;png&lt;/code&gt; file is the art work and the &lt;code&gt;json&lt;/code&gt; file contains the metadata.&lt;/p&gt;

&lt;p&gt;The directory name &lt;code&gt;assets&lt;/code&gt; does not matter. You can go with anything you like.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#validating-your-assets"&gt;
  &lt;/a&gt;
  Validating Your Assets
&lt;/h4&gt;

&lt;p&gt;This may feel tedious but it's just as important. Checkout the the manual on carrying this out at&lt;br&gt;
&lt;a href="https://docs.metaplex.com/nft-standard"&gt;https://docs.metaplex.com/nft-standard&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#uploading-your-project-assets"&gt;
  &lt;/a&gt;
  Uploading Your Project Assets
&lt;/h3&gt;

&lt;p&gt;Now that we have the funds, assets all organized and vaidated, we can proceed with the fun stuff!&lt;/p&gt;

&lt;p&gt;We will proceed with uploading our assets with the CLI. Remember, our assets are located at &lt;code&gt;metaplex\js\packages\cli\example-assets&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ts-node metaplex/js/packages/cli/src/candy-machine-cli.ts upload assets --env devnet --keypair ~/.config/solana/devnet.json

//Output
Processing file: 0
Processing file: 1
Processing file: 2
Processing file: 3
Done
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By uploading, it sends the files to Arweave and also registers those files with your candy machine. Both Arweave and Solana are initialized after a successful run.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#validating-your-candy-machine"&gt;
  &lt;/a&gt;
  Validating Your Candy Machine
&lt;/h4&gt;

&lt;p&gt;You can confirm the health and status of your on-chain assets using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ts-node metaplex/js/packages/cli/src/candy-machine-cli.ts verify --env devnet --keypair ~/.config/solana/devnet.json
//Output:
Looking at key  0
Name {redacted-name} 0 with https://arweave.net/{redacted-tx-id} checked out
Looking at key  1
Name {redacted-name} 1 with https://arweave.net/{redacted-tx-id} checked out
Looking at key  2
Name {redacted-name} 2 with https://arweave.net/{redacted-tx-id} checked out
Looking at key  3
Name {redacted-name} 3 with https://arweave.net/{redacted-tx-id} checked out
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#starting-your-candy-machine"&gt;
  &lt;/a&gt;
  Starting Your Candy Machine
&lt;/h4&gt;

&lt;p&gt;After verifying that our assets are good to go, we can finally start the candy machine.&lt;br&gt;
&lt;code&gt;$ ts-node metaplex/js/packages/cli/src/candy-machine-cli.ts create_candy_machine --env devnet --keypair ~/.config/solana/devnet.json&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#updating-your-candy-machine"&gt;
  &lt;/a&gt;
  Updating Your Candy Machine
&lt;/h4&gt;

&lt;p&gt;We can modify our candy machine details to include a start date and/or price etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ts-node metaplex/js/packages/cli/src/candy-machine-cli.ts update_candy_machine --env devnet --keypair ~/.config/solana/devnet.json --price 1 --date "29 Oct 2021 00:12:00 GMT"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#minting-our-nft"&gt;
  &lt;/a&gt;
  Minting Our NFT
&lt;/h2&gt;

&lt;p&gt;To mint our NFT, we can use &lt;code&gt;mint_one_token&lt;/code&gt; like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ts-node metaplex/js/packages/cli/src/candy-machine-cli.ts mint_one_token --env devnet --keypair ~/.config/solana/devnet.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If all goes well, you can now open your phantom wallet, open the collectibles page (It's beside the $ symbol on the bottom) and voila! Your newly minted NFT will be there!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-web-starter-kit"&gt;
  &lt;/a&gt;
  Setting Up The Web Starter Kit
&lt;/h2&gt;

&lt;p&gt;Now that we've successfully minted an NFT into our wallet, let's make a web application to carry out the mint instead! &lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt; This project is very new and could cause some issues, if it does then please report it on github.&lt;/p&gt;

&lt;p&gt;The goal of the project is for you to be able to configure it and customize it to your liking.&lt;/p&gt;

&lt;p&gt;Fork the project and then clone it to your desired location.&lt;br&gt;
Link: &lt;a href="https://github.com/exiled-apes/candy-machine-mint"&gt;https://github.com/exiled-apes/candy-machine-mint&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we need to build the project,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd candy-machine-mint
yarn install
yarn build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is where things get a little bit complicated. When we uploaded our NFTs, a cache file was created in the &lt;strong&gt;same&lt;/strong&gt; directory as our assets directory. However, this &lt;code&gt;.cache&lt;/code&gt; folder is hidden! If you're on ubuntu, use &lt;code&gt;ctrl+h&lt;/code&gt; to display hidden files.&lt;/p&gt;

&lt;p&gt;Once you have discovered that folder, open it and you'll find &lt;code&gt;devnet-temp&lt;/code&gt; file. Open it in your IDE and you'll see the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"program"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"uuid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Ch3xxx"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"config"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Ch3xxx"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"items"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"0"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"link"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://arweave.net/xxxx"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"TEST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"onChain"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"link"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://arweave.net/xxxx"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"TEST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"onChain"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"link"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://arweave.net/xxxx"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"TEST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"onChain"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"3"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"link"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://arweave.net/xxxx"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"TEST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"onChain"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"4"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"link"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://arweave.net/xxxx"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"TEST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"onChain"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"5"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"link"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://arweave.net/xxxx"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"TEST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"onChain"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"env"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"devnet"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"cacheName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"temp"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"authority"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"9xJxxxx"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"candyMachineAddress"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"3Wmxxxx"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"startDate"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1632615120&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're going to need all this data when we run our web application to mint.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuring-candymachinemint"&gt;
  &lt;/a&gt;
  Configuring Candy-Machine-Mint
&lt;/h3&gt;

&lt;p&gt;Open up the candy-machine-mint folder, where you will find a file called &lt;code&gt;.env.example&lt;/code&gt; &lt;br&gt;
(The file is usually hidden, use &lt;code&gt;ctrl+h&lt;/code&gt; to display hidden files)&lt;br&gt;
Rename it to &lt;code&gt;.env&lt;/code&gt; and then open it to edit the following details:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;REACT_APP_CANDY_MACHINE_CONFIG=__PLACEHOLDER__
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the &lt;code&gt;program.config&lt;/code&gt; key from our &lt;code&gt;.cache/devnet-temp&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;REACT_APP_CANDY_MACHINE_ID=__PLACEHOLDER__
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the &lt;code&gt;candyMachineAddress&lt;/code&gt; from our &lt;code&gt;.cache/devnet-temp&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;REACT_APP_TREASURY_ADDRESS=__PLACEHOLDER__
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This the Solana address that receives the funds gathered during the minting process. You can set this to your devnet wallet address.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;REACT_APP_CANDY_START_DATE=__PLACEHOLDER__
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the &lt;code&gt;startDate&lt;/code&gt; key from our &lt;code&gt;.cache/devnet-temp&lt;/code&gt; file. &lt;br&gt;
Note: If you cannot find it, use &lt;code&gt;update_candy_machine&lt;/code&gt; as mentioned above as you may have missed out on mentioning the date.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;REACT_APP_SOLANA_NETWORK=devnet
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This identifies the Solana network you want to connect to. Options are devnet, testnet, and mainnet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;REACT_APP_SOLANA_RPC_HOST=https://explorer-api.devnet.solana.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This identifies the RPC server your web app will access the Solana network through.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#starting-the-web-application"&gt;
  &lt;/a&gt;
  Starting The Web Application
&lt;/h3&gt;

&lt;p&gt;Open your terminal and navigate to the &lt;code&gt;candy-machine-mint&lt;/code&gt; directory and start the react app by using &lt;code&gt;yarn start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once you see &lt;em&gt;Compiled Successfully&lt;/em&gt; in your terminal, Open &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; to view it in the browser.&lt;/p&gt;

&lt;p&gt;You can now proceed with connecting your wallet, and clicking on the &lt;strong&gt;mint&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;After clicking on the &lt;strong&gt;mint&lt;/strong&gt; button, you can check the collectibles page on your phantom wallet and you'll see your newly minted NFT!&lt;/p&gt;

&lt;p&gt;That’s all I will be covering in this guide. If you encounter any issues, comment down below and I’ll try to help!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-resources"&gt;
  &lt;/a&gt;
  Other Resources
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/@levicook/HJcDneEWF"&gt;https://hackmd.io/@levicook/HJcDneEWF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.metaplex.com/"&gt;https://docs.metaplex.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Follow &lt;a href="https://twitter.com/aeyakovenko?s=21"&gt;Anatoly&lt;/a&gt; and &lt;a href="https://twitter.com/rajgokal?s=21"&gt;Raj Gokal&lt;/a&gt; for good vibes.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>blockchain</category>
      <category>nft</category>
      <category>solana</category>
      <category>beginners</category>
    </item>
    <item>
      <title>🚄 ScrollTriggering Through a Tube GSAP - ScrollTrigger Demo</title>
      <author>Jayant Goel</author>
      <pubDate>Sun, 31 Oct 2021 14:13:47 +0000</pubDate>
      <link>https://dev.to/jayantgoel001/scrolltriggering-through-a-tube-gsap-scrolltrigger-demo-59c0</link>
      <guid>https://dev.to/jayantgoel001/scrolltriggering-through-a-tube-gsap-scrolltrigger-demo-59c0</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/motionharvest/embed/WNQYJyM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>Dominos with Physijs and ScrollTrigger</title>
      <author>Jayant Goel</author>
      <pubDate>Sun, 31 Oct 2021 14:10:40 +0000</pubDate>
      <link>https://dev.to/jayantgoel001/dominos-with-physijs-and-scrolltrigger-3n7a</link>
      <guid>https://dev.to/jayantgoel001/dominos-with-physijs-and-scrolltrigger-3n7a</guid>
      <description>&lt;p&gt;Dominos wrapped with Physijs and a  ball controlled with GSAP ScrollTrigger&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/motionharvest/embed/KKdrezJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>HOW TO LEARN TO CODE AS A BEGINNER</title>
      <author>webcodespace</author>
      <pubDate>Sun, 31 Oct 2021 13:57:07 +0000</pubDate>
      <link>https://dev.to/webcodespace/how-to-learn-to-code-as-a-beginner-j28</link>
      <guid>https://dev.to/webcodespace/how-to-learn-to-code-as-a-beginner-j28</guid>
      <description>&lt;p&gt;So you want to learn a new technical skill, and you've heard a lot about programming and you've decided this is the new skill you want to learn. &lt;/p&gt;

&lt;p&gt;You keep wondering how you are going to acquire this new skill of programming and as a result you start googling a lot of things about programming. &lt;/p&gt;

&lt;p&gt;The only problem is that, the internet is full with a lot of information about what you should and shouldn't do. &lt;/p&gt;

&lt;p&gt;You will have a lot of people presenting you with a lot of technology to learn and by the end of the day, you're going to get confused. &lt;/p&gt;

&lt;p&gt;In this post, I'm going to be talking about four steps you can take if you want to learn how to code. &lt;/p&gt;

&lt;p&gt;These steps are:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-set-a-goal"&gt;
  &lt;/a&gt;
  1. Set a goal
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EcOQkFSi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jf8vp54yrk4ymdwevwia.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EcOQkFSi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jf8vp54yrk4ymdwevwia.jpg" alt="how to learn programming" width="880" height="517"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is really important. Not just in programming but everything else. What do you want to achieve? What do you want to be able to build? Which area of programming do you want to go into? You need to have answers to these questions. Without a set goal, you're going to spend more time trying to learn how to code and nothing will ever really satisfy you&lt;/p&gt;

&lt;p&gt;This step can actually take you quite some time, but it is definitely worth it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-choose-a-programming-language"&gt;
  &lt;/a&gt;
  2. Choose a programming language:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j9EMLMXl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wvsf9lflw7rcffpsctno.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j9EMLMXl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wvsf9lflw7rcffpsctno.jpg" alt="learn to code" width="880" height="473"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you've completed the first step, you'll be ready to &lt;a href="https://www.webcodespace.com/best-programming-languages-for-beginners"&gt;choose your first programming language&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Choosing your first programming language can sometimes be a hassle for a lot of beginners. &lt;/p&gt;

&lt;p&gt;There are a lot of amazing options out there and sometimes you just wish you can learn them all, all at once. &lt;/p&gt;

&lt;p&gt;Well, before picking up a new programming language, you need to consider the following:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-the-popularity-of-that-language"&gt;
  &lt;/a&gt;
  a. The popularity of that language
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dTOy0AJp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhgskcv5521b43lkc4ms.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dTOy0AJp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhgskcv5521b43lkc4ms.jpg" alt="how to choose a programming language" width="880" height="622"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The reason why this is so important is because you need to a language that is already used by a lot of programmers. &lt;/p&gt;

&lt;p&gt;If there are a lot of programmers using this particular language, it will be easier to find tutorials or code examples to learn from. &lt;/p&gt;

&lt;p&gt;As a beginner, it wouldn't be very nice to start switching between different programming languages in order to learn new concepts. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#b-the-job-market"&gt;
  &lt;/a&gt;
  b. The job market
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f8aoQfq1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7g36ycz5ouibx86c3j6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f8aoQfq1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7g36ycz5ouibx86c3j6.jpg" alt="beginner programmer" width="880" height="530"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some people actually go into programming because they believe they can find a promising job. &lt;/p&gt;

&lt;p&gt;If you are one of those people, then it will be really important to check out the job opportunities available to you both locally and remotely. &lt;/p&gt;

&lt;p&gt;If you are learning how to program because of job opportunities and there are a lot of javascript jobs available around you, it wouldn't really be advisable to learn something else like java or ruby.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#c-your-interest"&gt;
  &lt;/a&gt;
  c. Your interest
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R69T82x0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iob42b4p4y9u0sm3nit9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R69T82x0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iob42b4p4y9u0sm3nit9.jpg" alt="learn code" width="880" height="586"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is all about what really excites you about programming. &lt;/p&gt;

&lt;p&gt;Do you love to play and build games? You can become a game developer. Do you think you will enjoy coding out web applications? You can consider web development.&lt;/p&gt;

&lt;p&gt;Doing the things that really excite you, can really help you learn faster. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#d-learning-curve"&gt;
  &lt;/a&gt;
  d. Learning curve
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QGg-g3ln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zcp3vccdq3dewnxgaq2i.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QGg-g3ln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zcp3vccdq3dewnxgaq2i.jpg" alt="coding tutorial" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose something easy, you're just starting out. &lt;/p&gt;

&lt;p&gt;Having a good understanding of the basics of programming can really help you to become a very good programmer.&lt;/p&gt;

&lt;p&gt;The best programmers know their basics very well. &lt;/p&gt;

&lt;p&gt;If you choose an easy language, it will be easier for you to learn those basic programming concepts. &lt;/p&gt;

&lt;p&gt;It wouldn't be very nice that while you are trying to learn those new concepts, you also struggle to understand the syntax of a new programming language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-look-for-a-course"&gt;
  &lt;/a&gt;
  3. Look for a course:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yX6bjEwl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xb2uahif0jiafmj4e7qi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yX6bjEwl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xb2uahif0jiafmj4e7qi.jpg" alt="programmer guide" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These days there are a lot of resources online to help you learn code. There are both free and paid ones. &lt;/p&gt;

&lt;p&gt;You can go through YouTube and find cool videos that can help you learn or you can also buy a course on udemy. It's totally up to you. &lt;/p&gt;

&lt;p&gt;You need to find content that you can easily understand. If you come across anything you don't understand, you can google them.&lt;/p&gt;

&lt;p&gt;However, I would advise that you find a course that has a good structure and gradually follow it step by step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-practice"&gt;
  &lt;/a&gt;
  4. Practice
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iwv1bo-_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2yln6a00nao85a4gvo9i.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iwv1bo-_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2yln6a00nao85a4gvo9i.jpg" alt="webcodespace" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Programming is a skill, and just like every other skill, you need to practice in order to become proficient. &lt;/p&gt;

&lt;p&gt;Once you are done with your courses and you have a good understanding of the basics, you can move on to practicing and building out projects. &lt;/p&gt;

&lt;p&gt;Start building out your dream projects. This is where the real fun begins. This is really important because once you successfully complete one project, it will prompt you to build another. And by the time you successfully complete a lot of projects, your skill and experience will develop. &lt;/p&gt;

&lt;p&gt;Learning how to code still remains one of the most valuable skill anyone can learn. &lt;/p&gt;

&lt;p&gt;Be patient with the learning process and soon you'll begin to notice progress. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy coding!!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>tutorial</category>
      <category>python</category>
    </item>
    <item>
      <title>Form validation using javascript</title>
      <author>Adam Nagy</author>
      <pubDate>Sun, 31 Oct 2021 13:51:03 +0000</pubDate>
      <link>https://dev.to/javascriptacademy/form-validation-using-javascript-34je</link>
      <guid>https://dev.to/javascriptacademy/form-validation-using-javascript-34je</guid>
      <description>&lt;p&gt;Working with forms is an every day task for almost every web developer. No matter what site you'll create it will use forms. Validating the form data on the client side is a nice-to-have feature when it comes to user experience. In this tutorial we'll create a simple form validation using javascript.&lt;/p&gt;

&lt;p&gt;While client-side form validation gives a nice user experience, it can be tricked and bypassed really easily. To prevent malicious use, &lt;strong&gt;you should always validate form data on the server side&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#video-tutorial"&gt;
  &lt;/a&gt;
  Video Tutorial
&lt;/h2&gt;

&lt;p&gt;If you would watch a detailed step-by-step video instead you can check out the video I made covering this project on &lt;a href="https://www.youtube.com/c/JavaScriptAcademyOfficial"&gt;my Youtube Channel&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/CYlNJpltjMM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h2&gt;

&lt;p&gt;Let's start with the HTML markup. We'll have a &lt;code&gt;container&lt;/code&gt; div, that we'll use to position and style our form. Inside that, not surprisingly, we'll create a &lt;code&gt;form&lt;/code&gt;, we also set an &lt;code&gt;id&lt;/code&gt; for it, and set the &lt;code&gt;action&lt;/code&gt; to &lt;code&gt;/&lt;/code&gt; since we don't really want to submit this form.&lt;/p&gt;

&lt;p&gt;We'll create four input fields, for the username, email, password, and password confirmation. For styling and control purposes we'll wrap these &lt;code&gt;input&lt;/code&gt; tags into &lt;code&gt;div&lt;/code&gt;s with the class &lt;code&gt;input control&lt;/code&gt;. Each of these input controls will contain a &lt;code&gt;label&lt;/code&gt;, an &lt;code&gt;input&lt;/code&gt;, and a &lt;code&gt;div&lt;/code&gt; with the class &lt;code&gt;error&lt;/code&gt;. Every input should have an id and name attribute. The label's should have a matching &lt;code&gt;for&lt;/code&gt; property with the corresponding input tag's name attribute. For the input type we will use &lt;code&gt;text&lt;/code&gt; for the username and email, and use &lt;code&gt;password&lt;/code&gt; for the password and the password confirmation. The div with the &lt;code&gt;error&lt;/code&gt; class will hold the error messages for the specific input field. It will be empty for now, we will modify it from javascript.&lt;/p&gt;

&lt;p&gt;Lastly, we have to add a button to "submit" our form. In this example we won't really submit the form just simulate it. For the submit button I'll use a button with a type of &lt;code&gt;submit&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"form"&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Registration&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"input-control"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Username&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"error"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"input-control"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Email&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"error"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"input-control"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Password&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"error"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"input-control"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"password2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Password again&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"password2"&lt;/span&gt;&lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"password2"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"error"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Sign Up&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is the HTML markup that we need for our form. Let's style it a bit with CSS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h2&gt;

&lt;p&gt;We'll give a simple clean spacious design for this tutorial. I'll set a linear gradient as the background and I'll use a custom google font, that you can &lt;a href="https://fonts.google.com/specimen/Poppins"&gt;install from here.&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#0f2027&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#203a43&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#2c5364&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Poppins'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll give a fix width to our form, and center it with margins, also I'll give it a top margin to move it down a bit vertically. To have more space we apply 20px of padding. We'll set a fixed font size, a light background color and also set a border radius to have rounded corners.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#form&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20vh&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;whitesmoke&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the form title, we'll use a dark text color, and center it horizontally using &lt;code&gt;text-align: center&lt;/code&gt;. The submit button should stand out so we'll use a blue background color, and white text color. We also remove the browser default borders and give it a little border-radius. We'll give it a little spacing with paddings and margins, and make it full-width by applying 100% width.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#form&lt;/span&gt; &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0f2027&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#form&lt;/span&gt; &lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;41&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;57&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;194&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To have the inputs stacked below each other we'll use flexbox. To do that we'll set &lt;code&gt;display: flex;&lt;/code&gt; and &lt;code&gt;flex-direction: column&lt;/code&gt;. For the inputs we'll set a grey border, with a little border-radius. We'll set the display property to &lt;code&gt;block&lt;/code&gt;, and make them full-width, by applying width 100%. We'll also set a little padding, so it'll be more spacious. I'll also remove the outline when the input is in focus, by setting &lt;code&gt;outline: 0&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.input-control&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.input-control&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#f0f0f0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.input-control&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll use two classes ("success" and "error") to give visual feedback to the user on whether the input's value is valid or not. We'll apply these classes from javascript to the input-control div which contains the specific input field. When the success class is present we will set a green border color, otherwise if error is present we'll use a red border color instead. For the error div we'll use a smaller font-size and a red color to show the error messages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.input-control.success&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#09c372&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.input-control.error&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ff3860&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.input-control&lt;/span&gt; &lt;span class="nc"&gt;.error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ff3860&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;9px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;13px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's do the validation in javascript next!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  Javascript
&lt;/h2&gt;

&lt;p&gt;The first thing we have to do is to save references for the form, and the input fields. As we gave id for every input and the form we can easily to do by using &lt;code&gt;getElementById&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;password2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To prevent the form for automatically submit we have to attach and event listener to our form's &lt;code&gt;submit&lt;/code&gt; event. In this event handler function we have to call &lt;code&gt;preventDefault()&lt;/code&gt; function to prevent the form from submitting automatically. Instead of submitting we'll call the &lt;code&gt;validateInputs&lt;/code&gt; function, which will validate the inputs and if we want to we can submit the form in there after every check passes, but we won't do that in this tutorial. We'll create this &lt;code&gt;validateInputs&lt;/code&gt; shortly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;validateInputs&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll also create two helper functions: &lt;code&gt;setError&lt;/code&gt;, &lt;code&gt;setSuccess&lt;/code&gt;. We'll use these helper functions to set the error or success states of the input controls. Let's start with the setError one. It receives two parameters: &lt;code&gt;element&lt;/code&gt;, and &lt;code&gt;message&lt;/code&gt;. The element will be the input element that is in the specific input-control. So first we have to get the input control parent div. We'll save it into the &lt;code&gt;inputControl&lt;/code&gt; variable, and get the input control div by using the &lt;code&gt;parent&lt;/code&gt; property of the input element. Next we have to gather the error div, and save it into a variable. We can do that by querying the input control with the error class.&lt;br&gt;
Now we have to set the error div's innerText to be the message that we got in parameters, and remove the &lt;code&gt;success&lt;/code&gt; class from the input control (if it exists) and add the error class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inputControl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;errorDisplay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inputControl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;errorDisplay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;inputControl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;inputControl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The setSuccess method will be really similar. The first difference is that it won't receive a message as a parameter. We have to clear the error display by setting its innerText to an empty string. Lastly we have to reverse the class application. We'll add the &lt;code&gt;success&lt;/code&gt; class to the inputControl and remove the &lt;code&gt;error&lt;/code&gt; class (if present).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setSuccess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inputControl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;errorDisplay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inputControl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;errorDisplay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;inputControl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;inputControl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will create one last helper function to validate emails. This is an optional step, if you don't want to use regular expressions, feel free to just set the input type of the email field to &lt;code&gt;email&lt;/code&gt;. The &lt;code&gt;isValidEmail&lt;/code&gt; function will take a string as a parameter and use this weird looking regular expression to check whether it is a valid email or not. We'll use &lt;code&gt;String.test()&lt;/code&gt; function to test the string against the regex. We'll also convert the email to a string and make it lowercase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isValidEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;re&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;(([^&lt;/span&gt;&lt;span class="sr"&gt;&amp;lt;&amp;gt;()[&lt;/span&gt;&lt;span class="se"&gt;\]\\&lt;/span&gt;&lt;span class="sr"&gt;.,;:&lt;/span&gt;&lt;span class="se"&gt;\s&lt;/span&gt;&lt;span class="sr"&gt;@"&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;(\.[^&lt;/span&gt;&lt;span class="sr"&gt;&amp;lt;&amp;gt;()[&lt;/span&gt;&lt;span class="se"&gt;\]\\&lt;/span&gt;&lt;span class="sr"&gt;.,;:&lt;/span&gt;&lt;span class="se"&gt;\s&lt;/span&gt;&lt;span class="sr"&gt;@"&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;|&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;".+"&lt;/span&gt;&lt;span class="se"&gt;))&lt;/span&gt;&lt;span class="sr"&gt;@&lt;/span&gt;&lt;span class="se"&gt;((\[[&lt;/span&gt;&lt;span class="sr"&gt;0-9&lt;/span&gt;&lt;span class="se"&gt;]{1,3}\.[&lt;/span&gt;&lt;span class="sr"&gt;0-9&lt;/span&gt;&lt;span class="se"&gt;]{1,3}\.[&lt;/span&gt;&lt;span class="sr"&gt;0-9&lt;/span&gt;&lt;span class="se"&gt;]{1,3}\.[&lt;/span&gt;&lt;span class="sr"&gt;0-9&lt;/span&gt;&lt;span class="se"&gt;]{1,3}\])&lt;/span&gt;&lt;span class="sr"&gt;|&lt;/span&gt;&lt;span class="se"&gt;(([&lt;/span&gt;&lt;span class="sr"&gt;a-zA-Z&lt;/span&gt;&lt;span class="se"&gt;\-&lt;/span&gt;&lt;span class="sr"&gt;0-9&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;\.)&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;a-zA-Z&lt;/span&gt;&lt;span class="se"&gt;]{2,}))&lt;/span&gt;&lt;span class="sr"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we should create the validator &lt;code&gt;validateInputs&lt;/code&gt; function. First we will get the value of all the input fields. We can do that by getting the value property's value of the input field references. We'll call the &lt;code&gt;String.trim()&lt;/code&gt; function to remove the trailing empty spaces (if any) from the start and end of the values.&lt;br&gt;
Then we can start validating inputs. We'll use &lt;code&gt;if, else&lt;/code&gt; statements to do the validation. For the username we will check whether if it is empty or not, by comparing the value with an empty string. If it empty, we'll call the &lt;code&gt;setError&lt;/code&gt; function and provide the username element to it, with our error message. Otherwise we'll call the &lt;code&gt;setSuccess&lt;/code&gt; method with the username element. Now we have to do this for the other input fields, but the approach will be the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validateInputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;usernameValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;emailValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;passwordValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;password2Value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;password2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;usernameValue&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Username is required&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the email we'll check if it is provided or not, and set an error if it is empty. If it is not empty we'll check whether it is a valid email address, and if not we'll set an error, otherwise we set success for the field.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emailValue&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Email is required&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isValidEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emailValue&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Provide a valid email address&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the password we'll check whether it is empty or not, and if it is not empty we'll check if it is longer than 7 characters. If not, well set an error, otherwise we'll set it as success.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;passwordValue&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Password is required&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;passwordValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Password must be at least 8 character.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the password confirmation we'll check if it is empty, and we should also check if the password confirmation's value is equal to the password's value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password2Value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Please confirm your password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password2Value&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;passwordValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Passwords doesn't match&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have every input validated, if we wanted to we could submit our form now to a specific endpoint.&lt;/p&gt;

&lt;p&gt;Good job now you have a working form validation Javascript. Please note that you always have to validate the form inputs on the server-side as client-side validation can be easily bypassed. There are way more advanced form validation methods and libraries that we use in modern web development, but this project is a really good way to start and learn the fundamentals.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-you-can-learn-more-from-me"&gt;
  &lt;/a&gt;
  Where you can learn more from me?
&lt;/h2&gt;

&lt;p&gt;I create education content covering web-development on several platforms, feel free to 👀 check them out.&lt;/p&gt;

&lt;p&gt;I also create a newsletter where I share the week's or 2 week's educational content that I created. No bull💩 just educational content.&lt;/p&gt;

&lt;p&gt;🔗 Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;💬 Join our &lt;a href="https://discord.gg/GuxmcEgAjB"&gt;community on Discord&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📧 Newsletter &lt;a href="https://www.getrevue.co/profile/dev_adamnagy"&gt;Subscribe here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🎥 YouTube &lt;a href="https://www.youtube.com/channel/UCicOwFWkuMX0ddFaKCc_E5Q"&gt;Javascript Academy&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🐦 Twitter: &lt;a href="https://twitter.com/dev_adamnagy"&gt;@dev_adamnagy&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📷 Instagram &lt;a href="https://www.instagram.com/javascriptacademy/"&gt;@javascriptacademy&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Hawk Open Source Project</title>
      <author>Paulo Medeiros</author>
      <pubDate>Sun, 31 Oct 2021 13:25:51 +0000</pubDate>
      <link>https://dev.to/medpaf/hawk-open-source-project-4okk</link>
      <guid>https://dev.to/medpaf/hawk-open-source-project-4okk</guid>
      <description>&lt;p&gt;Hawk is a network and pentest utility that I developed so that I could perform different kinds of task using the same suite, instead of jumping from one tool to another.&lt;br&gt;
Currently, this script can perform a good variety of tasks such as: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ifconfig, &lt;/li&gt;
&lt;li&gt;ping, &lt;/li&gt;
&lt;li&gt;traceroute, &lt;/li&gt;
&lt;li&gt;port scans (including SYN, TCP, UDP, ACK, comprehensive scan), 
host discovery (scan for up devices on a local network), &lt;/li&gt;
&lt;li&gt;MAC address detection (get MAC address of a host IP on a local network), &lt;/li&gt;
&lt;li&gt;banner grabbing, &lt;/li&gt;
&lt;li&gt;DNS checks (with geolocation information), &lt;/li&gt;
&lt;li&gt;WHOIS, &lt;/li&gt;
&lt;li&gt;subdomain enumeration, &lt;/li&gt;
&lt;li&gt;vulnerability reconnaissance, - &lt;/li&gt;
&lt;li&gt;packet sniffing, &lt;/li&gt;
&lt;li&gt;MAC spoofing, &lt;/li&gt;
&lt;li&gt;IP spoofing, &lt;/li&gt;
&lt;li&gt;SYN flooding, &lt;/li&gt;
&lt;li&gt;deauth attack, &lt;/li&gt;
&lt;li&gt;brute-force attack (beta).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other features are still being implemented. Future implementations may include WAF detection, DNS enumeration, traffic analysis, XSS vulnerability scanner, ARP cache poisoning, DNS cache poisoning, MAC flooding, ping of death, network disassociation attack (not deauth attack), OSINT, exploits, some automated tasks and others.&lt;br&gt;
If you want to become a contributor, make a pull request or issue.&lt;br&gt;
Waiting for your feedback. Kudos&lt;/p&gt;

&lt;p&gt;Link to the repository: &lt;br&gt;
&lt;a href="https://github.com/medpaf/hawk"&gt;https://github.com/medpaf/hawk&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>showdev</category>
      <category>github</category>
      <category>security</category>
    </item>
    <item>
      <title>Confetti succesfull screen Tailwind</title>
      <author>Can 🚀</author>
      <pubDate>Sun, 31 Oct 2021 13:22:43 +0000</pubDate>
      <link>https://dev.to/mecaltin/confetti-succesfull-screen-tailwind-c2h</link>
      <guid>https://dev.to/mecaltin/confetti-succesfull-screen-tailwind-c2h</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/flyagen/embed/QWMqgyR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>How to upload multi files in react native using apollo, graphql and node js</title>
      <author>zubyrbutt</author>
      <pubDate>Sun, 31 Oct 2021 13:19:16 +0000</pubDate>
      <link>https://dev.to/zubyrbutt/how-to-upload-multi-files-in-react-native-using-apollo-graphql-and-node-js-4847</link>
      <guid>https://dev.to/zubyrbutt/how-to-upload-multi-files-in-react-native-using-apollo-graphql-and-node-js-4847</guid>
      <description>&lt;p&gt;apollo-upload-client: 16.0.0&lt;br&gt;
apollo-boost: 0.4.9&lt;br&gt;
apollo-link: 1.2.14&lt;br&gt;
apollo-link-error: 1.1.13&lt;br&gt;
graphql: 15.3.0&lt;br&gt;
&lt;a class="mentioned-user" href="https://dev.to/baronha"&gt;@baronha&lt;/a&gt;
/react-native-multiple-image-picker: 0.4.6&lt;/p&gt;

&lt;p&gt;here is a youtube link&lt;br&gt;
&lt;a href="https://youtu.be/n0qdt61cpkU"&gt;https://youtu.be/n0qdt61cpkU&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Minification of CSS and JavaScript</title>
      <author>AKANKSHA </author>
      <pubDate>Sun, 31 Oct 2021 13:16:13 +0000</pubDate>
      <link>https://dev.to/iamakanksha16/minification-of-css-and-javascript-31ng</link>
      <guid>https://dev.to/iamakanksha16/minification-of-css-and-javascript-31ng</guid>
      <description>&lt;p&gt;Minification is the process of deleting unneeded or redundant data from a resource without altering how the browser processes it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS Minification&lt;/strong&gt;&lt;br&gt;
It is the process of taking the beautified, well formed CSS code and deleting useless characters from the source code in order to lower the file size and speed up the site's loading time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does code minification remove&lt;/strong&gt;&lt;br&gt;
Comments, unwanted spaces, unused code, line breaks (newline characters) as well as the shortening of variable and function names are removed during minification. While comments and whitespace make the code easier to read, the browser ignores them. As a result, these components can be safely removed prior to deployment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How CSS minification increases page performance&lt;/strong&gt;&lt;br&gt;
CSS is a render blocking resource on the web.&lt;/p&gt;

&lt;p&gt;The browser must download, parse, and execute CSS files every time it loads a page. Because this occurs on the main thread, the browser is prevented from performing other activities during the first page load.  &lt;/p&gt;

&lt;p&gt;The larger the CSS files are, the longer it will take for them to download, and the longer the main-thread will be blocked.&lt;/p&gt;

&lt;p&gt;The payload of these files can be reduced to improve page speed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How CSS and JS minification helps in decreasing in page load time&lt;/strong&gt;&lt;br&gt;
Minification is a technique for lowering file size and thereby improving web performance. When a user requests a webpage, the minified version of a webpage is transmitted instead of the full version resulting in faster response times and lower bandwidth costs. It enhances the site's speed and accessibility while also assisting in the improvement of search engine rankings.&lt;/p&gt;

&lt;p&gt;Minified code bases also take up less space on a server's hard drive. Not only does this save storage resources, but it also helps to minimise network congestion.&lt;/p&gt;

&lt;p&gt;Code that has been minified, for example, by replacing runs of spaces with a single space, is lighter and takes less time to load in a browser.&lt;br&gt;
In fact, minifying code can cut the size of a file by 30-40%. It can be as much as 50% in some cases.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A Step-by-step description of how js and css files minification works&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A web developer develops a JavaScript or CSS file to be utilised in a web application. These files are designed for developer convenience, which means they contain whitespace, comments, lengthy variable names, and other readability techniques.&lt;/li&gt;
&lt;li&gt;The developer uses a minification approach to optimise the file while making it more difficult to understand. Removing whitespace, shrinking of variable and function names are all common minification approaches.&lt;/li&gt;
&lt;li&gt;When responding to web requests, the web server utilises the minified file, resulting in decreased bandwidth use without losing functionality.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;How to minify js and css files using best online tools&lt;/strong&gt;&lt;br&gt;
There are a lot of free and easy online tools can quickly minify CSS/ JavaScript.&lt;br&gt;
For CSS minification: minifycode, freeformatter&lt;br&gt;
JavaScript Minifier: javascript-minifier.com, &lt;a href="https://www.minifier.org/"&gt;https://www.minifier.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How CSS And JS Minification works using online tools&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To produce the minified JavaScript or CSS file, copy the JavaScript or CSS code from the unminified file and paste it into any JavaScript or CSS minifying online tool of developers’ choice.&lt;/li&gt;
&lt;li&gt;Hit Minify JavaScript or CSS button.&lt;/li&gt;
&lt;li&gt;Now, copy the minified code and paste it in in place of respective JavaScript or CSS code.&lt;/li&gt;
&lt;li&gt;Save the file before deployment.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;How does code looks like before CSS minification&lt;/strong&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QaSeCKnP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hkzadfuutmi4tfjm4he3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QaSeCKnP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hkzadfuutmi4tfjm4he3.png" alt="unminified text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How does code looks like after CSS minification&lt;/strong&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0g0rIXqZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7r6sa48gcay6jd69zhmp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0g0rIXqZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7r6sa48gcay6jd69zhmp.png" alt="minified text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How does code look in JS minification&lt;/strong&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qjLph8xM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hai9fcvrq0gd7dgifd3r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qjLph8xM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hai9fcvrq0gd7dgifd3r.png" alt="JS minification"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to minify CSS and JS File in WordPress&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Step 1&lt;/strong&gt;: To minify CSS and JS File in WordPress we need to install a plugin. As shown below let’s start by going to the left-hand admin panel and clicking on Plugins, then selecting the “Add New” option.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3XwLdFUo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xopwmi5oidphzgkobih9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3XwLdFUo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xopwmi5oidphzgkobih9.png" alt="adding new plugins"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step2&lt;/strong&gt;: In the available search box, type “Autoptimize”. This will bring up a list of additional plugins that we might find useful.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ZKPsXhY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7xh0sb43psmrbbatwq04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ZKPsXhY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7xh0sb43psmrbbatwq04.png" alt="autoptimise plugin"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: To use the plugin, click the "Install Now" button and activate it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--98x9QQKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88nb6sy9z7rw8j5xuln8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--98x9QQKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88nb6sy9z7rw8j5xuln8.png" alt="autoptimise plugin dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;: click on “Settings” tab as shown below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lX0qPPgh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9cqlqib0ccrfjlginbu6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lX0qPPgh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9cqlqib0ccrfjlginbu6.png" alt="autoptimise plugin setting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt;: Select Compress JavaScript and Compress CSS from the drop-down menus. To complete the minification process, click the "Save Changes" button as shown below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jMdvtDpd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3dglg35setrc555e65ag.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jMdvtDpd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3dglg35setrc555e65ag.png" alt="save changes minification wordpress"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to Minify CSS File in Visual Studio Code&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Step 1&lt;/strong&gt;: Clicking on extensions in left side-bar. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UgP8o8wm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3m1rqpzr5nf9b5am8vlp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UgP8o8wm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3m1rqpzr5nf9b5am8vlp.png" alt="minify css in visual studio code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: On Search button, typing “minify” will bring up a list of additional extensions that we might find useful.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tnHuSqk5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xi51e6cr6w570wo0l3zy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tnHuSqk5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xi51e6cr6w570wo0l3zy.png" alt="minify in vscode extensions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: Clicking on the first button “minify” and then installing it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T_6IELV0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ol0izfoh9wm07dqw2j6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T_6IELV0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ol0izfoh9wm07dqw2j6.png" alt="minify install"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;: Pressing F1 key and typing minify as shown in the image below for style.css&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DGkSgRZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0jgpm0v9mk9r7h7bnw0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DGkSgRZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0jgpm0v9mk9r7h7bnw0.png" alt="F1 minify"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt;: As soon as we hit “Enter” from Step 4 style.min.css gets appeared at the bottom of “style.css”&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CnrxqGp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lb2n5odhcr9w0u34i2um.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CnrxqGp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lb2n5odhcr9w0u34i2um.png" alt="style.min.css"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 6&lt;/strong&gt;: To complete the minification process, click the "style.min.css" button to get below output as shown below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0dcfZICb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4n04cz39wbk3ip6mizsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0dcfZICb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4n04cz39wbk3ip6mizsk.png" alt="style.min.css output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;: Minification in CSS and JS files is a simple and quick technique to reduce a web application’s resource usage. Minifying a website can result in significant speed improvements without sacrificing the user experience.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>css</category>
      <category>performance</category>
    </item>
  </channel>
</rss>
