<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Best CSS3 library for Frontend Developer</title>
      <author>Gtuut</author>
      <pubDate>Thu, 19 Aug 2021 04:40:49 +0000</pubDate>
      <link>https://dev.to/gtuut/best-css3-library-for-frontend-developer-4372</link>
      <guid>https://dev.to/gtuut/best-css3-library-for-frontend-developer-4372</guid>
      <description>&lt;p&gt;Web Developers used to spend a lot of time creating beautiful CSS. Thanks to the CSS libraries, we now have a better, faster, and more effective way to build responsive websites and web applications.&lt;/p&gt;
&lt;p&gt;Are you still looking for the best CSS libraries? Do you want to know which library you should try? In this article, we have 20 best CSS libraries for your inspiration.&lt;/p&gt;
&lt;h2&gt;
&lt;br&gt;
&lt;a href="https://dev.to/chetan_atrawalkar/20-best-css3-library-for-developers-58p#how-do-css-libraries-work"&gt;&lt;/a&gt;ðŸ¤” How do CSS libraries work?&lt;/h2&gt;
&lt;p&gt;CSS library gives web developers a basic structure, which includes grid, interactive UI patterns, web typography, tooltips, buttons, form elements, icons. This structure helps web developers to start quickly and efficiently when they are designing a website or web applications.&lt;/p&gt;
&lt;p&gt;Here we have put togetherÂ &lt;span&gt;20 best CSS libraries.&lt;/span&gt;Â We hope you like them, and most importantly, find the best one for your needs.&lt;/p&gt;
&lt;h4&gt;
&lt;br&gt;
&lt;a href="#"&gt;&lt;/a&gt;Let's go....ðŸ¤©&lt;/h4&gt;
&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/20-best-css3-library-for-developers/&amp;amp;ved=2ahUKEwii76qFzaPyAhWvyzgGHX9RA-kQFnoECAMQBQ&amp;amp;usg=AOvVaw2AtoxfMkY_y5JPLB2VuSdV"&gt;ðŸš€20 Best CSS3 Library For Developers&lt;/a&gt;&lt;/b&gt;.

</description>
    </item>
    <item>
      <title>React VS Vue | What about them?</title>
      <author>Atif Aiman</author>
      <pubDate>Thu, 19 Aug 2021 03:51:59 +0000</pubDate>
      <link>https://dev.to/alserembani94/react-vs-vue-what-about-them-2o</link>
      <guid>https://dev.to/alserembani94/react-vs-vue-what-about-them-2o</guid>
      <description>&lt;p&gt;There are a lot of Javascript frontend framework in market right now, in which their hype to their own. The famous 3 - Angular, React and Vue (Svelte is still in the race as well), and also honorable mention for MeteorJS, Ionic. Of course there are higher frontend framework as well such as NestJS, NextJS and NuxtJS, but let's leave them for another discussion, shall we?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The purpose of this writing is not comparing both great framework for modern web app, but to highlight both features&lt;/strong&gt; that gives the great developer experience, and where they can interchange the knowledge between both, so you won't have to start from scratch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; I have professional experience in React for more than two years (and still counting upon me writing this article), and I just involved in Vue in my new project, so the comparison might not be fair towards Vue, so I hope I can do the best I can for Vue as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Another disclaimer:&lt;/strong&gt; This is not a proper documentation for both frameworks, so if you look on how to use the framework, I recommend you to go to the documentation for the respective framework.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-similarity"&gt;
  &lt;/a&gt;
  The Similarity
&lt;/h2&gt;

&lt;p&gt;Both are javascript framework. I know right ðŸ˜œ?&lt;/p&gt;

&lt;p&gt;Just kidding! Let us see the similarity offered by both before highlighting features those are unique to the respective frameworks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#virtual-dom"&gt;
  &lt;/a&gt;
  Virtual DOM
&lt;/h3&gt;

&lt;p&gt;Document Object Model (DOM) is an object that defines the document structure. To put it the easy way, the way you arrange all HTML elements. To optimize the DOM rendering when there is a change, both utilizes virtual DOM, where the DOM is structured right before the page with changes displayed to the user, so user won't have to experience a glitch.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#event-changes"&gt;
  &lt;/a&gt;
  Event changes
&lt;/h3&gt;

&lt;p&gt;Both relies on event changes, where state plays an important role in triggering events such as mounts, renders, and updates (known as lifecycles). Differs with traditional JQuery approach, where you have to trigger the event on your own, React and Vue helps developer to encapsulate everything into an event, so the rerender can be triggered when there is state changes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#componentbased"&gt;
  &lt;/a&gt;
  Component-based
&lt;/h3&gt;

&lt;p&gt;To be able to produce components are what makes the framework the choice of developers, since it can save a lot of work, holding to the Don't Repeat Yourself (DRY) principle.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#react"&gt;
  &lt;/a&gt;
  React
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#jsx"&gt;
  &lt;/a&gt;
  JSX
&lt;/h3&gt;

&lt;p&gt;When you mention React, &lt;strong&gt;JSX&lt;/strong&gt; will always come into play. Though you feel like you are writing HTML, you are actually using JSX, where Javascript will parse it in object later on and React will run the function to convert in into something like &lt;code&gt;document.getElementByElement&lt;/code&gt;. That is why, inside JSX, you have to use &lt;code&gt;className&lt;/code&gt; instead of &lt;code&gt;class&lt;/code&gt; since the word &lt;code&gt;class&lt;/code&gt; is reserved in Javascript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"wrapper"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#declaratives"&gt;
  &lt;/a&gt;
  Declaratives
&lt;/h3&gt;

&lt;p&gt;Since we composite everything under single function for a single component, it is easy to use the declared variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To trigger all javascript inside JSX, you only need to open curly braces, and you can do anything.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Adam&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAge&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increaseAge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setAge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;increaseAge&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increase Age&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#hooks"&gt;
  &lt;/a&gt;
  Hooks
&lt;/h3&gt;

&lt;p&gt;Don't get me wrong. Vue also has its own hook. However, React really has its strong suit with their hook implementation (given that you need to use functional pattern to use it). Before this, React uses Higher Order Component (HOC), which can also be implemented for both class component and functional component. To make it more verbose, React introduces hooks, which later introduce more verbose pattern and developer is able to split their code based on functionality, and not lifecycle. The most basic hook, &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useEffect&lt;/code&gt; are the most used hooks in React ecosystem.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello console!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#states-and-props"&gt;
  &lt;/a&gt;
  States and props
&lt;/h3&gt;

&lt;p&gt;What I love about React is how you can actually optimize the state and props. From &lt;code&gt;useState&lt;/code&gt;, you can optimize by memoize it using &lt;code&gt;useMemo&lt;/code&gt;, then if you need to elevate and group bunch of states, you can use &lt;code&gt;useReducer&lt;/code&gt;. Note that, you also need to know the cost of using the hooks as well.&lt;/p&gt;

&lt;p&gt;To pass the props, you can simply pass it along with the function of the component as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The rest of the component&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you import the component, you can pass anything that you need to the component this way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"John"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let say, you don't have a lot of changes happened to a certain component, we can also use pure component, so the render is predictable for the renders, and you don't have to put &lt;code&gt;useState&lt;/code&gt; inside it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-lifecycle"&gt;
  &lt;/a&gt;
  React Lifecycle
&lt;/h3&gt;

&lt;p&gt;React has a standard component lifecycle - mount, update, unmount. In class component, there are methods that is used, like &lt;code&gt;componentDidUpdate&lt;/code&gt;, &lt;code&gt;componentWillUnmount&lt;/code&gt;. In functional components, its all packed inside &lt;code&gt;useEffect&lt;/code&gt;, where you can set which changes will it subscribe to, and split code better.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Functions here are equivalent to&lt;/span&gt;
    &lt;span class="c1"&gt;// `componentDidMount`, `shouldComponentUpdate`&lt;/span&gt;
    &lt;span class="c1"&gt;// and `componentDidUpdate`&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Functions here are equivalent to&lt;/span&gt;
      &lt;span class="c1"&gt;// `componentWillUnmount`&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;changesDeps&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// Changes can be state, props&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note that useEffect can be used repeatedly, oppose to class lifecycle method which can only be used once in a single class.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#vue"&gt;
  &lt;/a&gt;
  Vue
&lt;/h2&gt;

&lt;p&gt;Before going into details about Vue, I will only use Vue 3 approach, mostly on Composition API. For React developers, I personally use Vue Composition API which are really similar to React. I might touch a little bit about the usual pattern, just to compare how simple Vue has been in term of verbosity and optimization.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#templates"&gt;
  &lt;/a&gt;
  Templates
&lt;/h3&gt;

&lt;p&gt;Differs with React, Vue uses the usual HTML pattern, and not JSX. That is why, Vue recommends usage of templates (though you can also use render function and JSX if there is the need). You can use the usual pattern, including the usual element class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"wrapper"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#declarative"&gt;
  &lt;/a&gt;
  Declarative
&lt;/h3&gt;

&lt;p&gt;Vue has its own style of declare a variable. In traditional way, you can pass variable as &lt;code&gt;data&lt;/code&gt; when you export the component, along with the templates.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, starting Vue 3, where Composition API has been introduced, it provides developer a new way of writing the component, where React developer such as me, feel close to home, and helps me to adopt Vue as fast as I can.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that Composition API in Vue 3 didn't totally replace the old pattern in Vue 2, it's just providing a more verbose way of writing your component.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt; &lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Simpler, right?&lt;/p&gt;

&lt;p&gt;So, how about render that involve conditions and loops? Vue introduce binding, where you bind a variable to the content inside the template.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"wrapperClass"&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"counter &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt; &lt;span class="err"&gt;3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"increaseCounter"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Increase&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt; &lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wrapperClass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;wrapper&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increaseCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#states-and-props"&gt;
  &lt;/a&gt;
  States and props
&lt;/h3&gt;

&lt;p&gt;Noticed that before this, we have a thing called &lt;code&gt;data&lt;/code&gt;? Yeah, it serves the same purpose as React's &lt;code&gt;state&lt;/code&gt;, where it will handle reactivity. This is to make sure the state is immutable. But in the following example, I'll just show the &lt;code&gt;script setup&lt;/code&gt; equivalent.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt; &lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, how about props? Okay, let me show you the old and the new way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt; &lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defineProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, when you you import your component elsewhere, it behaves the same way as React pass the props.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Countdown&lt;/span&gt; &lt;span class="na"&gt;counter=&lt;/span&gt;&lt;span class="s"&gt;"3"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt; &lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Countdown&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../sources/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#vue-lifecycles"&gt;
  &lt;/a&gt;
  Vue Lifecycles
&lt;/h3&gt;

&lt;p&gt;The flow of lifecycles between React and Vue are generally same, with Vue introducing some addition to the process. (I haven't use lifecycle extensively yet, so I will update it if I found new information).&lt;/p&gt;

&lt;p&gt;So, the old way (Option API)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Execute function after mounted&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;script setup&lt;/code&gt; way (Composition API),&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt; &lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;onMounted&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Execute function after mounted&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There, you can see the usage of hooks inside Vue!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;React and Vue both offers their own way of managing states and props, the lifecycles, and their own way of binding and executing function to the HTML. Of course the next question should be "which one is better?", nevertheless both have evolved tremendously and will improve in future. So again, my aim to highlight the feature from both sides, so we can mutually recognize each pattern. Later, you can jump right to the other side, without worrying about relearning again.&lt;/p&gt;

&lt;p&gt;Which one is easier for me? I will still say React is easy-win for me, but that doesn't give a fair comparison to Vue, given that I am still new to Vue.&lt;/p&gt;

&lt;p&gt;If there's a missing part, that you believe is the key to each framework, comment down below ðŸ‘‡!&lt;/p&gt;

</description>
      <category>react</category>
      <category>vue</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Python Contact/Address Book Demo Project - GUI</title>
      <author>rrtutors</author>
      <pubDate>Thu, 19 Aug 2021 03:05:45 +0000</pubDate>
      <link>https://dev.to/rrtutors/python-contact-address-book-demo-project-gui-o6</link>
      <guid>https://dev.to/rrtutors/python-contact-address-book-demo-project-gui-o6</guid>
      <description>&lt;p&gt;This &lt;a href="https://rrtutors.com/projectsinfo/How-to-Create-Contact-Book-in-Python"&gt;python contact Book&lt;/a&gt; GUI application  is store entries related to a peopleâ€™s contacts like a phone number, email address, etc.&lt;/p&gt;


&lt;li&gt; Basic pattern of the CBook App&lt;/li&gt;
&lt;br&gt;
   &lt;li&gt; Specification of the CBook App&lt;/li&gt;
&lt;br&gt;
   &lt;li&gt; General structure of the CBook App&lt;/li&gt;
&lt;br&gt;
   &lt;li&gt; Folder organization of the CBook App   &lt;/li&gt;
&lt;br&gt;
    &lt;li&gt;Installing a IDE Application &lt;/li&gt;
&lt;br&gt;&lt;br&gt;
    &lt;li&gt;Development of the CBook App&lt;/li&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/A7F76BX_-xg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Download &lt;a href="https://rrtutors.com/projectsinfo/How-to-Create-Contact-Book-in-Python"&gt;Python address Book source Code&lt;/a&gt; &lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Beginner's guide to Chaos Engineering</title>
      <author>Shatakshi Gupta</author>
      <pubDate>Thu, 19 Aug 2021 02:37:37 +0000</pubDate>
      <link>https://dev.to/shatakshiigupta/beginner-s-guide-to-chaos-engineering-5edp</link>
      <guid>https://dev.to/shatakshiigupta/beginner-s-guide-to-chaos-engineering-5edp</guid>
      <description>&lt;p&gt;Have you ever wondered what firms/companies do or would do when their product or service that they are offering to customers suffers from &lt;a href="https://www.merriam-webster.com/dictionary/downtime"&gt;Downtime&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Well, if not then this article will definitely help you in knowing about it in depth.&lt;/p&gt;

&lt;p&gt;So taking the concept from scratch what is Chaos and why are we talking about it?&lt;/p&gt;

&lt;p&gt;Let's suppose you create an application and deploy it on an online platform accessible to the public and all of a sudden your project/application gets recognized and you observe a lot of traffic over your application, people start using it as it might be helpful to them in some or the other way. Now you had no idea that something like this would happen and due to this you never took into account that whether you should scale your project or not. &lt;br&gt;
As the traffic increases more and more each day, you observe that people are not able to access your application as some issues are being faced by a lot of people. &lt;/p&gt;

&lt;p&gt;Now here comes the concept of scaling your application so that more and more people can access your application. So you now scaled your application to a large extent, still some issues were being faced that some microservices of your application were down and people were not able to update/make changes.&lt;/p&gt;

&lt;p&gt;Here comes the concept of testing which is done while updating/scaling your application so that people can easily make use of it. We test our applications/system so that people in the near future do not face any difficulties while making use of your application.&lt;br&gt;
Testing is done to ensure our system can withstand unexpected disruptions.&lt;/p&gt;

&lt;p&gt;What we do is we inject Chaos in our applications to test for resiliency.&lt;br&gt;
&lt;strong&gt;Chaos&lt;/strong&gt; can also be explained as a technique that helps us to get to know that how our application would react when so and so changes are made in the system. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resilience&lt;/strong&gt; is the crucial concept of our testing as through this we can know that whether our application can stay afloat during downtimes.&lt;br&gt;
One good example can be when there are sales on E-commerce websites be that for any occasion or literally any thing. Then there is huge amount of customers each day during the sale due to the low prices.&lt;/p&gt;

&lt;p&gt;Chaos is used in four steps while testing your application-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D6Bj-sOt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r6wy767cct1o4w28ueid.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D6Bj-sOt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r6wy767cct1o4w28ueid.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;u&gt;&lt;strong&gt;Step 1&lt;/strong&gt;&lt;/u&gt;:&lt;br&gt;
We basically observe and take into account how your system is behaving in normal state or in the steady state&lt;/p&gt;

&lt;p&gt;&lt;u&gt;&lt;strong&gt;Step 2&lt;/strong&gt;&lt;/u&gt;:&lt;br&gt;
We make a hypothesis how our system would behave during Vulnerability/chaotic state and in steady state &lt;/p&gt;

&lt;p&gt;&lt;u&gt;&lt;strong&gt;Step 3&lt;/strong&gt;&lt;/u&gt;:&lt;br&gt;
This hypothesis further leads to experiments that help us know about what changes our system needs in chaotic state&lt;/p&gt;

&lt;p&gt;&lt;u&gt;&lt;strong&gt;Step 4&lt;/strong&gt;&lt;/u&gt;:&lt;br&gt;
And this cycle continues till our system starts getting adapted to the experiments provided.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Chaos Engineering&lt;/em&gt; also has some states that help us better understand the state of our application. These states are listed below-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WC7vGs18--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unsd0i9xaa39b28387jd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WC7vGs18--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unsd0i9xaa39b28387jd.jpg" alt="Chaos cycle"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;STEADY STATE OF AN APPLICATION&lt;/strong&gt;-&lt;br&gt;
Identify the steady state that how your application behaves during normal state.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;INTRODUCTION OF FAULTS&lt;/strong&gt;-&lt;br&gt;
Another state is the deliberate introduction of a fault. This is done so as to test that how would our application react when it would experience a downtime&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEADY STATE REGAINED OR NOT&lt;/strong&gt;-&lt;br&gt;
If we see no difference after introducing a fault then our application is in healthy state or resilient state&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WEAKNESS FOUND&lt;/strong&gt;-&lt;br&gt;
If we do observe that the application isn't working or stopped working then that is called as weakness&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FIXING &amp;amp; AGAIN PASS THE FAULT&lt;/strong&gt;-&lt;br&gt;
In this we try to fix the weakness or vulnerability and pass the faults again for testing of resiliency&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RESILIENT&lt;/strong&gt;-&lt;br&gt;
This process continues till we observe that our application has achieved resiliency and is no longer in weak state even after introduction of multiple faults&lt;/p&gt;

&lt;p&gt;These all the states help us better know about our system and how we should scale and test them so that it can be easily accessed by people.&lt;br&gt;
&lt;strong&gt;Chaos Engineering&lt;/strong&gt; is one of the most important and interesting concepts in the field of testing as through this once can inject chaos in application/system to test for Resiliency.&lt;/p&gt;

&lt;p&gt;Here including some of the resources to get you started with Chaos if you found this article interesting:&lt;/p&gt;

&lt;p&gt;1.&lt;a href="https://chaos-mesh.org/docs/quick-start"&gt;Quick Start-Chaos Engineering&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href="https://groups.google.com/g/chaos-community"&gt;Chaos Community&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href="https://cloud-native.slack.com/ssb/redirect"&gt;CNCF Slack for #project-chaos-mesh channel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you so much for reading this article! Hope you found it interesting. Have a Great day ahead! :)&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>engineering</category>
      <category>guide</category>
      <category>chaosengineering</category>
    </item>
    <item>
      <title>What's the Best Mesh Router for 2021?</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Thu, 19 Aug 2021 00:58:21 +0000</pubDate>
      <link>https://dev.to/nickytonline/what-s-the-best-mesh-router-for-2021-3i1k</link>
      <guid>https://dev.to/nickytonline/what-s-the-best-mesh-router-for-2021-3i1k</guid>
      <description>&lt;p&gt;I have a Google Home mesh router that I've had for a few years and it's been working well, but I'm looking to upgrade to something faster and probably add a fourth node.&lt;/p&gt;

&lt;p&gt;Yes I've Googled and found some, but curious what folks here think. What mesh router would you recommend in 2021?&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@rgaleria?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Ricardo Gomez Angel&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/mesh-router?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>routers</category>
      <category>hardware</category>
    </item>
    <item>
      <title>Software Dev Weekly Update #4: New Tools, New Community</title>
      <author>Ethan Goddard</author>
      <pubDate>Thu, 19 Aug 2021 00:00:46 +0000</pubDate>
      <link>https://dev.to/realnerdethan/software-dev-weekly-update-4-new-tools-new-community-1kbl</link>
      <guid>https://dev.to/realnerdethan/software-dev-weekly-update-4-new-tools-new-community-1kbl</guid>
      <description>&lt;p&gt;This week saw the completion of sections 32, 33, and the start of 34 (out of 60)! I'm really hitting a stride and it's exciting to see the progress made!&lt;/p&gt;

&lt;p&gt;I spent time connecting with other developers thanks to &lt;a href="https://twitter.com/DThompsonDev"&gt;Danny Thompson&lt;/a&gt;, a self taught developer who made his way from gas station fry cook to developer at Google. He hosts regular virtual meetups through &lt;a href="https://twitter.com/DThompsonDev/status/1426937080953835521?s=20"&gt;Twitter Spaces&lt;/a&gt; and most recently he put together a panel for new developers to pose their questions and get real answers from industry professionals. It was an incredible conversation and thank you so much to everyone involved!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4STlAWFU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/startup-grind/image/upload/dpr_2.0%2Cfl_sanitize/v1/gcs/platform-data-goog/contentbuilder/logo_dark_QmPdj9K.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4STlAWFU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/startup-grind/image/upload/dpr_2.0%2Cfl_sanitize/v1/gcs/platform-data-goog/contentbuilder/logo_dark_QmPdj9K.svg" alt="Google Developers Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also attended a virtual meetup with &lt;a href="https://gdg.community.dev/gdg-new-orleans/"&gt;Google Developer Group New Orleans&lt;/a&gt; and participated in their &lt;a href="//11ty.dev"&gt;Eleventy&lt;/a&gt; demo. &lt;a href="https://twitter.com/TheGreenGreek"&gt;Sia Karamalegos&lt;/a&gt; led the discussion as we worked through what HTML templating can do and how she's utilized it in her blog, &lt;a href="https://sia.codes/"&gt;Sia.codes&lt;/a&gt;. This talk directly relates to what I've been studying this past week, Creating Dynamic HTML with Templating!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating Dynamic HTML with Templating&lt;/strong&gt;&lt;br&gt;
So what is templating and why would you use it? Templating is the creation of HTML files that share the same (or similar) element pattern. Think of reddit pages, the sizing or the theme might be different across subreddits but they all share the same basic structure. &lt;/p&gt;

&lt;p&gt;So why manually write a page for each new subreddit and post? With templates we can dynamically generate HTML pages and swap out the information as needed but retain the shared elements such as 'upvote', 'downvote', the comments and share buttons.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9rjMJpzp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://repository-images.githubusercontent.com/112150776/57c07300-6132-11e9-992f-604a24e67c83" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9rjMJpzp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://repository-images.githubusercontent.com/112150776/57c07300-6132-11e9-992f-604a24e67c83" alt="Eleventy Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To take a closer look at templating check out &lt;a href="https://github.com/siakaramalegos/11ty-sia-blog"&gt;Sia's 11ty blog repository&lt;/a&gt; where she outlines how to implement your own blog and &lt;a href="https://www.youtube.com/watch?v=rZyNBd1WgVM&amp;amp;t=1s"&gt;The Eleventy Meetup's &lt;em&gt;Templating Superpower&lt;/em&gt; video&lt;/a&gt; where they review how to use templating to make your static site feel dynamic!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating Servers with Node&lt;/strong&gt;&lt;br&gt;
As part of this week's lessons we learned how to configure and operate a localhost server using node.js in conjunction with the &lt;a href="https://expressjs.com/"&gt;express&lt;/a&gt; and &lt;a href="https://www.npmjs.com/package/nodemon"&gt;nodemon&lt;/a&gt; packages.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#express"&gt;
  &lt;/a&gt;
  Express
&lt;/h5&gt;

&lt;p&gt;A minimalist web framework that allows us to design and build web applications quickly.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can think of Express as a utility belt for creating web applications with Node.js. It provides functions for pretty much everything you need to do to build a web server. If you were to write the same functionality with vanilla Node.js, you would have to write significantly more code. - &lt;a href="https://stackoverflow.com/a/19411563/11545799"&gt;Jondlm, Stack Overflow&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#nodemon"&gt;
  &lt;/a&gt;
  Nodemon
&lt;/h5&gt;

&lt;p&gt;&lt;em&gt;"A tool that helps develop node.js based applications by automatically restarting the node application when file changes in the directory are detected." -&lt;a href="https://www.npmjs.com/package/nodemon"&gt;Nodemon Module Description&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This allows up to makes changes on the fly and reload the server to review our pages automatically! It may seem small, but it's a wonderful tool :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--80YsOM8x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/kgf8xHE.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--80YsOM8x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/kgf8xHE.gif" alt="Nodemon Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Week In Review&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PbFQzNoD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/y0B0Fsc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PbFQzNoD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/y0B0Fsc.jpg" alt="Forest"&gt;&lt;/a&gt;&lt;br&gt;
I had a great time connecting with other developers and exploring different node modules. I'm realizing how many helpful resources are out there and I'm excited to share what I've learned. See you next week!&lt;/p&gt;




&lt;p&gt;I hope you enjoyed the read!&lt;/p&gt;

&lt;p&gt;Feel free to follow me on &lt;a href="https://github.com/RealNerdEthan"&gt;GitHub&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/ethan-goddard-a4376952/"&gt;LinkedIn&lt;/a&gt; and &lt;a href="https://dev.to/realnerdethan"&gt;DEV&lt;/a&gt; for more!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>node</category>
    </item>
    <item>
      <title>Sending POST Request In JS Using fetch</title>
      <author>Aya Bouchiha</author>
      <pubDate>Wed, 18 Aug 2021 23:44:14 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/sending-post-request-in-js-using-fetch-3lkd</link>
      <guid>https://dev.to/ayabouchiha/sending-post-request-in-js-using-fetch-3lkd</guid>
      <description>&lt;h2&gt;
  &lt;a href="#whats-post-request"&gt;
  &lt;/a&gt;
  What's POST request
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;POST&lt;/strong&gt;: is a request that is used for sending information or data to a specific server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#post-request-using-then-and-catch"&gt;
  &lt;/a&gt;
  POST request using then and catch
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;header-name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;header-value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cm"&gt;/* {id:101} */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;something went wrong :(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;buy food&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;buy healthy food&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;postTodo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#post-request-using-async-and-await"&gt;
  &lt;/a&gt;
  POST request using async and await
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;header-name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;header-value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// {id:101}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;something went wrong :(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;buy food&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;buy healthy food&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;postTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#suggested-posts"&gt;
  &lt;/a&gt;
  Suggested Posts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/sending-get-request-using-fetch-5fie"&gt;Sending GET Request Using Fetch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/making-get-and-post-request-using-axios-7g8"&gt;Making GET And POST Request Using Axios In React.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/making-put-delete-request-using-axios-in-react-js-j07"&gt;Making PUT &amp;amp; DELETE Request Using Axios In React.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/youtube-courses-projects-to-master-javascript-3lhc"&gt;Youtube Courses, Projects To Master Javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/the-essential-guide-to-map-built-in-object-in-javascript-17d2"&gt;Your Essential Guide To Map Built-in Object In Javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/all-js-string-methods-in-one-post-4h23"&gt;All JS String Methods In One Post!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To Contact Me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;email: &lt;a href="mailto:developer.aya.b@gmail.com"&gt;developer.aya.b@gmail.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;telegram: &lt;a href="https://t.me/AyaBouchiha"&gt;Aya Bouchiha&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy codding!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>The Dungeon (A sidescroller game)</title>
      <author>FRADAR</author>
      <pubDate>Wed, 18 Aug 2021 23:41:44 +0000</pubDate>
      <link>https://dev.to/fradar/the-dungeon-a-sidescroller-game-10b3</link>
      <guid>https://dev.to/fradar/the-dungeon-a-sidescroller-game-10b3</guid>
      <description>&lt;p&gt;This is a codepen.io challenge game that I tried to make. It turned out really well. My friend told me to write some parts of this game in French, so I had to use A LOT of Google translate. Anyways, hope you like this game! If you have something to tell me about this pen, please do so in the comment section, any feedback is appreciated and I can improve this game.&lt;/p&gt;

&lt;p&gt;READ: If you would like to make your own map, you just have to add a new array level in the "niveau" variable at the end of the script :)&lt;/p&gt;

&lt;p&gt;Play the game here:&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR/full/eYvOXJK"&gt;https://codepen.io/FRADAR/full/eYvOXJK&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like my games?&lt;br&gt;
Follow me here!:&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR"&gt;https://codepen.io/FRADAR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Au revoir!&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>gamedev</category>
      <category>challenge</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Building a Real Time Scoreboard with Ruby on Rails and CableReady</title>
      <author>David Colby</author>
      <pubDate>Wed, 18 Aug 2021 23:20:11 +0000</pubDate>
      <link>https://dev.to/davidcolbyatx/building-a-real-time-scoreboard-with-ruby-on-rails-and-cableready-1205</link>
      <guid>https://dev.to/davidcolbyatx/building-a-real-time-scoreboard-with-ruby-on-rails-and-cableready-1205</guid>
      <description>&lt;p&gt;The release of Hotwire in late 2020 brought attention to a growing interest within the Rails community in building modern, &lt;a href="https://cableready.stimulusreflex.com/advocating-for-reactive-rails"&gt;reactive&lt;/a&gt; Rails applications without needing the complexity of an API + SPA.&lt;/p&gt;

&lt;p&gt;Although Hotwire's &lt;a href="https://turbo.hotwired.dev/"&gt;Turbo&lt;/a&gt; library garnered a lot of attention, the Rails community has been working for years to improve the toolset we have to build modern, full-stack Rails applications. Turbo isn't the first attempt at giving Rails developers the tools they need.&lt;/p&gt;

&lt;p&gt;One of the most important of these projects is &lt;a href="https://cableready.stimulusreflex.com/"&gt;CableReady&lt;/a&gt;, which powers &lt;a href="https://docs.stimulusreflex.com/"&gt;StimulusReflex&lt;/a&gt; and &lt;a href="https://optimism.leastbad.com/"&gt;Optimism&lt;/a&gt;, along with standing on its own as a tool to:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Create great real-time user experiences by triggering client-side DOM changes, events and notifications over &lt;a href="https://guides.rubyonrails.org/action_cable_overview.html"&gt;ActionCable&lt;/a&gt; web sockets (&lt;a href="https://cableready.stimulusreflex.com/"&gt;source&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Today we're going to explore CableReady by using Rails, CableReady, and &lt;a href="https://stimulus.hotwired.dev/"&gt;Stimulus&lt;/a&gt; to build a scoreboard that updates for viewers in real-time, with just a few lines of Ruby and JavaScript.&lt;/p&gt;

&lt;p&gt;When weâ€™re finished, our scoreboard will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DxHj_ACx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jsn398zh2u375v7vtbxh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DxHj_ACx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jsn398zh2u375v7vtbxh.gif" alt="A screen recording of a user with a web page and a terminal window open. On the page are the scores for two teams, Miami and Dallas. The user types a command in the terminal to update the home team's score to 95 and, after the command runs, the score on the web page for Miami updates to 95."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This article assumes that you're comfortable working with Rails but you won't need any prior knowledge of CableReady or ActionCable to follow along. If you've never used Rails before, this article isn't the best place to start.&lt;/p&gt;

&lt;p&gt;Letâ€™s dive in!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#application-setup"&gt;
  &lt;/a&gt;
  Application Setup
&lt;/h2&gt;

&lt;p&gt;First, letâ€™s create our Rails application, pull in CableReady and Stimulus, and scaffold up a Game model that weâ€™ll use to power our scoreboard.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails new scoreboard_ready &lt;span class="nt"&gt;-T&lt;/span&gt;
&lt;span class="nb"&gt;cd &lt;/span&gt;scoreboard_ready
bundle add cable_ready
yarn add cable_ready
rails webpacker:install:stimulus
rails g scaffold Game home_team:string away_team:string home_team_score:integer away_team_score:integer
rails db:migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Although Redis is not technically required in development for CableReady, weâ€™ll use it and &lt;a href="https://github.com/redis/hiredis-rb"&gt;hiredis&lt;/a&gt; to match the &lt;a href="https://cableready.stimulusreflex.com/installation"&gt;installation guidance&lt;/a&gt; from CableReady. &lt;/p&gt;

&lt;p&gt;Update your Gemfile with these gems:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'redis'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'~&amp;gt; 4.0'&lt;/span&gt; &lt;span class="c1"&gt;# Uncomment this line, it should already be in your Gemfile&lt;/span&gt;
&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'hiredis'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then &lt;code&gt;bundle install&lt;/code&gt; from your terminal.&lt;/p&gt;

&lt;p&gt;Donâ€™t have Redis installed in your development environment? Installing Redis on your machine is outside the scope of this article, but you can find instructions for &lt;a href="https://redis.io/topics/quickstart"&gt;Linux&lt;/a&gt; and &lt;a href="https://phoenixnap.com/kb/install-redis-on-mac"&gt;OSX&lt;/a&gt; online.&lt;/p&gt;

&lt;p&gt;Finally, we need to update our ActionCable configuration in config/cable.yml to use Redis in development:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;development&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;adapter&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis&lt;/span&gt;
  &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;%= ENV.fetch("REDIS_URL") { "redis://localhost:6379/1" } %&amp;gt;&lt;/span&gt;
  &lt;span class="na"&gt;channel_prefix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;scoreboard_ready_development&lt;/span&gt;

&lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;adapter&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;test&lt;/span&gt;

&lt;span class="na"&gt;production&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;adapter&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis&lt;/span&gt;
  &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;%= ENV.fetch("REDIS_URL") { "redis://localhost:6379/1" } %&amp;gt;&lt;/span&gt;
  &lt;span class="na"&gt;channel_prefix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;scoreboard_ready_production&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the application setup complete, weâ€™ll build the basic layout for our scoreboard next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-the-scoreboard-view"&gt;
  &lt;/a&gt;
  Setup the scoreboard view
&lt;/h2&gt;

&lt;p&gt;First, update the games show view:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"text-align: center;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"margin-top: 2rem;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s1"&gt;'Back to all games'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;games_path&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="s2"&gt;"game_detail"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;game: &lt;/span&gt;&lt;span class="vi"&gt;@game&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here weâ€™re inlining a couple of styles to make the scoreboard a little more legible and rendering a &lt;code&gt;game_detail&lt;/code&gt; partial that doesnâ€™t exist yet. Add that next, from your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;app/views/games/_game_detail.html.erb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And fill it in with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;home_team&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; vs. &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;away_team&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: gray; font-size: 1.2rem; margin-bottom: 0.8rem;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;home_team&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;home_team_score&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: gray; font-size: 1.2rem;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;away_team&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;away_team_score&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some more inline styles (weâ€™ll remove these later!) with some standard erb to render each teamâ€™s name and score.&lt;/p&gt;

&lt;p&gt;At this point, we can go to &lt;a href="http://localhost:3000/games"&gt;localhost:3000/games&lt;/a&gt; and create a game, and then go to the game show page to view it. &lt;/p&gt;

&lt;p&gt;We don't have real-time updates in place yet, we'll start building that with CableReady next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-channel-and-controller"&gt;
  &lt;/a&gt;
  Create channel and controller
&lt;/h2&gt;

&lt;p&gt;Our first step to delivering real-time updates is to add a channel to broadcast updates on. When a user visits a gameâ€™s show page, theyâ€™ll be subscribed via a WebSocket connection to an ActionCable channel. &lt;/p&gt;

&lt;p&gt;Without a channel subscription, the CableReady broadcasts weâ€™ll be sending soon wonâ€™t be received.&lt;/p&gt;

&lt;p&gt;To create a channel we can use the built-in generator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails g channel Game
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a few files for us. For the purposes of this article, weâ€™re interested in the &lt;code&gt;game_channel.rb&lt;/code&gt; file created in &lt;code&gt;app/channels&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Open that file and update the subscribed method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;subscribed&lt;/span&gt;
  &lt;span class="n"&gt;stream_or_reject_for&lt;/span&gt; &lt;span class="no"&gt;Game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;subscribed&lt;/code&gt; method is called each time a new &lt;a href="https://guides.rubyonrails.org/action_cable_overview.html#consumers"&gt;Consumer&lt;/a&gt; connects to the channel. &lt;/p&gt;

&lt;p&gt;In this method, weâ€™re using the &lt;a href="https://api.rubyonrails.org/v6.1.0/classes/ActionCable/Channel/Streams.html#method-i-stream_or_reject_for"&gt;ActionCable method&lt;/a&gt; &lt;code&gt;stream_or_reject_for&lt;/code&gt; to create a &lt;a href="https://guides.rubyonrails.org/action_cable_overview.html#streams"&gt;Stream&lt;/a&gt; that will send subscribed users broadcasts for a specific instance of a game, based on an &lt;code&gt;id&lt;/code&gt; parameter.&lt;/p&gt;

&lt;p&gt;When no game is found, the subscription request will be rejected.&lt;/p&gt;

&lt;p&gt;With the channel built, next we need to allow consumers to subscribe to the channel so they can receive broadcasted updates.&lt;/p&gt;

&lt;p&gt;The channel generator we ran automatically creates a file at &lt;code&gt;javascripts/channels/game_channel.js&lt;/code&gt; that we could use to handle the subscription on the frontend; however, CableReady really shines when &lt;a href="https://cableready.stimulusreflex.com/leveraging-stimulus"&gt;combined&lt;/a&gt; with Stimulus.&lt;/p&gt;

&lt;p&gt;To do that, weâ€™ll create a new Stimulus controller, from the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;app/javascript/controllers/game_controller.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And fill it in with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stimulus&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CableReady&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cable_ready&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GameChannel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;idValue&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;received&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cableReady&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;CableReady&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;operations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;disconnect&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This Stimulus controller is very close to &lt;code&gt;game_channel.js&lt;/code&gt; created by the channel generator, with a little Stimulus and CableReady power added.&lt;/p&gt;

&lt;p&gt;Each time the Stimulus controller connects to the DOM, we create a new consumer subscription to the &lt;code&gt;GameChannel&lt;/code&gt;, passing an &lt;code&gt;id&lt;/code&gt; parameter. When the Stimulus controller disconnects from the DOM, the subscription is removed.&lt;/p&gt;

&lt;p&gt;When a broadcast is received by the consumer, we use CableReady to &lt;code&gt;perform&lt;/code&gt; the requested &lt;a href="https://cableready.stimulusreflex.com/reference/operations"&gt;operations&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before the Stimulus controller will work, we need to update &lt;code&gt;app/javascript/controllers/index.js&lt;/code&gt; to import &lt;code&gt;consumer.js&lt;/code&gt; (part of the &lt;code&gt;ActionCable&lt;/code&gt; package) and attach consumer to the Stimulus Application object. &lt;/p&gt;

&lt;p&gt;Update &lt;code&gt;controllers/index.js&lt;/code&gt; with these two lines of code to accomplish that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;consumer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../channels/consumer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;consumer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;consumer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Read more about why this is the right way to combine ActionCable and Stimulus &lt;a href="https://cableready.stimulusreflex.com/leveraging-stimulus#1-this-application-consumer"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With our Stimulus controller built, we can update the &lt;code&gt;game_detail&lt;/code&gt; partial to connect the controller to the DOM.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; 
  &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;dom_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
  &lt;span class="na"&gt;data-controller=&lt;/span&gt;&lt;span class="s"&gt;"game"&lt;/span&gt;
  &lt;span class="na"&gt;data-game-id-value=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;home_team&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; vs. &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;away_team&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: gray; font-size: 1.2rem; margin-bottom: 0.8rem;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;home_team&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;home_team_score&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: gray; font-size: 1.2rem;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;away_team&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;away_team_score&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we accomplished a lot with one change to the parent div:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We attached the Stimulus controller to the parent div&lt;/li&gt;
&lt;li&gt;Set the id &lt;a href="https://stimulus.hotwired.dev/reference/values"&gt;value&lt;/a&gt; that the Stimulus controller uses to send the id param in the channel subscription request&lt;/li&gt;
&lt;li&gt;Set the id of the div to the dom_id of the rendered game instance. Weâ€™ll use this id in the CableReady broadcast weâ€™ll generate in our model, up next.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With all of this in place, visit a game show page and check the Rails server logs. If everything is setup correctly, you should see log entries that look like this after the show page renders:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GameChannel is transmitting the subscription confirmation
GameChannel is streaming from game:Z2lkOi8vc2NvcmVib2FyZC1yZWFkeS9HYW1lLzE
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#broadcast-game-updates-from-the-model"&gt;
  &lt;/a&gt;
  Broadcast game updates from the model
&lt;/h2&gt;

&lt;p&gt;With the channel built and consumers subscribing to updates, our last step to real-time scoreboard updates is sending a broadcast each time a game is updated.&lt;/p&gt;

&lt;p&gt;The simplest way to do this is to broadcast a CableReady operation in an &lt;code&gt;after_update&lt;/code&gt; callback in the &lt;code&gt;Game&lt;/code&gt; model. &lt;/p&gt;

&lt;p&gt;To make this possible, we first need to include the CableReady &lt;code&gt;Broadcaster&lt;/code&gt; in our models and delegate calls to &lt;code&gt;render&lt;/code&gt; to the &lt;code&gt;ApplicationController&lt;/code&gt;, as described in the (excellent) CableReady &lt;a href="https://cableready.stimulusreflex.com/cableready-everywhere#activerecord"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Update &lt;code&gt;app/models/application_record.rb&lt;/code&gt; as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ApplicationRecord&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;abstract_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;CableReady&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Broadcaster&lt;/span&gt;
  &lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="ss"&gt;:render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;to: :ApplicationController&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then update &lt;code&gt;app/models/game.rb&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Game&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;after_update&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;cable_ready&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;GameChannel&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;morph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="ss"&gt;selector: &lt;/span&gt;&lt;span class="n"&gt;dom_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="ss"&gt;html: &lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;partial: &lt;/span&gt;&lt;span class="s2"&gt;"games/game_detail"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;locals: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;game: &lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;broadcast_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here weâ€™ve added an &lt;code&gt;after_update&lt;/code&gt; callback to trigger a CableReady &lt;code&gt;broadcast&lt;/code&gt;. The broadcast is sent on the &lt;code&gt;GameChannel&lt;/code&gt;, queuing up a &lt;code&gt;morph&lt;/code&gt; &lt;a href="https://cableready.stimulusreflex.com/reference/operations/dom-mutations#morph"&gt;operation&lt;/a&gt; targeting the current game instance, and rendering the existing &lt;code&gt;game_detail&lt;/code&gt; partial.&lt;/p&gt;

&lt;p&gt;With this callback in place, our scoreboard should now update in real-time. &lt;/p&gt;

&lt;p&gt;You can test this yourself by heading to a game show page and then opening your Rails console and running something like &lt;code&gt;Game.find(some_id).update(home_team_score: 100)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You should see the score update in the browser window immediately after submitting the update command in the Rails console.&lt;/p&gt;

&lt;p&gt;While this works pretty well, our scoreboard really only needs to receive updates when the score changes, and it would be helpful to provide a little feedback to the user when the score changes. &lt;/p&gt;

&lt;p&gt;Letâ€™s finish up this article by updating our implementation to broadcast only on score changes, and to animate newly updated scores.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-fancier"&gt;
  &lt;/a&gt;
  Getting fancier
&lt;/h2&gt;

&lt;p&gt;To start, weâ€™ve got some clunky inline styling that makes our erb code pretty hard to follow. Letâ€™s move those styles out of the HTML and into a stylesheet. From your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;app/javascript/stylesheets
&lt;span class="nb"&gt;touch &lt;/span&gt;app/javascript/stylesheets/application.scss
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add the below to &lt;code&gt;application.scss&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.score-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;gray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="mi"&gt;.2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.8rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.swing-in-top-fwd&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;-webkit-animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;swing-in-top-fwd&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5s&lt;/span&gt; &lt;span class="nf"&gt;cubic-bezier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.175&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.885&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.320&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="mi"&gt;.275&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;both&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;swing-in-top-fwd&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5s&lt;/span&gt; &lt;span class="nf"&gt;cubic-bezier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.175&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.885&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.320&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="mi"&gt;.275&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;both&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@-webkit-keyframes&lt;/span&gt; &lt;span class="nt"&gt;swing-in-top-fwd&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;-webkit-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-100deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-100deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="na"&gt;-webkit-transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;100&lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;-webkit-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="na"&gt;-webkit-transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="nt"&gt;swing-in-top-fwd&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;-webkit-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-100deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-100deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="na"&gt;-webkit-transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;100&lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;-webkit-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="na"&gt;-webkit-transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To animate the scores, weâ€™re just using a simple CSS swing animation, copy/pasted directly from the always handy &lt;a href="https://animista.net/play/entrances/swing-in"&gt;Animista&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally import that new stylesheet into the webpack bundle:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app/javascripts/application.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stylesheets/application&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We want to be able to update scores individually. To enable that, weâ€™ll move the score portion of the scoreboard into a dedicated partial that we can then render in a broadcast.&lt;/p&gt;

&lt;p&gt;From your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;app/views/games/_score.html.erb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And fill that in with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;team&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_score"&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"swing-in-top-fwd"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then update the &lt;code&gt;game_detail&lt;/code&gt; partial to remove the inline styles and to use our new &lt;code&gt;score&lt;/code&gt; partial:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-controller=&lt;/span&gt;&lt;span class="s"&gt;"game"&lt;/span&gt; 
  &lt;span class="na"&gt;data-game-id-value=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; 
  &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;dom_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;home_team&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; vs. &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;away_team&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"score-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;home_team&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;:
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="s2"&gt;"score"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="ss"&gt;score: &lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;home_team_score&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="ss"&gt;team: &lt;/span&gt;&lt;span class="s2"&gt;"home"&lt;/span&gt; 
    &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"score-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;away_team&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;:
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="s2"&gt;"score"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="ss"&gt;score: &lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;away_team_score&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="ss"&gt;team: &lt;/span&gt;&lt;span class="s2"&gt;"away"&lt;/span&gt; 
    &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, weâ€™ll update the callback in the &lt;code&gt;Game&lt;/code&gt; model:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Game&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;after_update_commit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;broadcast_changes&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;broadcast_changes&lt;/span&gt;
    &lt;span class="n"&gt;update_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;team: &lt;/span&gt;&lt;span class="s1"&gt;'home'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;saved_change_to_home_team_score?&lt;/span&gt; 
    &lt;span class="n"&gt;update_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;team: &lt;/span&gt;&lt;span class="s1"&gt;'away'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;saved_change_to_away_team_score?&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;team&lt;/span&gt;&lt;span class="p"&gt;:)&lt;/span&gt;
    &lt;span class="n"&gt;cable_ready&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;GameChannel&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;outer_html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="ss"&gt;selector: &lt;/span&gt;&lt;span class="s2"&gt;"#&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;team&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_score"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;html: &lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;partial: &lt;/span&gt;&lt;span class="s1"&gt;'games/score'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;locals: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;score: &lt;/span&gt;&lt;span class="nb"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;team&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_team_score"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;team: &lt;/span&gt;&lt;span class="n"&gt;team&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;broadcast_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here weâ€™ve updated our callback to check for changes to the two attributes we care about (&lt;code&gt;home_team_score&lt;/code&gt; and &lt;code&gt;away_team_score&lt;/code&gt;). When either attribute is changed, a broadcast is triggered from &lt;code&gt;update_score&lt;/code&gt; to replace the target divâ€™s contents with the content of the &lt;code&gt;score&lt;/code&gt; partial. &lt;/p&gt;

&lt;p&gt;We use the &lt;code&gt;outer_html&lt;/code&gt; CableReady operation in this case to completely replace the DOM content and ensure that our animation triggers when the new score content enters the DOM.&lt;/p&gt;

&lt;p&gt;And with that in place, we can now see our isolated, animated real-time updates:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DxHj_ACx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jsn398zh2u375v7vtbxh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DxHj_ACx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jsn398zh2u375v7vtbxh.gif" alt="A screen recording of a user with a web page and a terminal window open. On the page are the scores for two teams, Miami and Dallas. The user types a command in the terminal to update the home team's score to 95 and, after the command runs, the score on the web page for Miami updates to 95."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;Today we explored how to add CableReady and Stimulus onto the core Rails ActionCable package to enable real-time DOM manipulations without writing tons of JavaScript, worrying about client-side state management, or doing much outside of writing pretty standard Rails code. The complete source code for this demo application is on &lt;a href="https://github.com/DavidColby/scoreboard_ready"&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;CableReady (and StimulusReflex, which weâ€™ll explore in a future article) are mature, powerful tools that allow Rails developers to create modern, reactive applications while keeping development time and code complexity low. CableReady also plays well with most of Turbo, and can fit seamlessly into a Hotwire-powered application.&lt;/p&gt;

&lt;p&gt;Start your journey deeper into CableReady and reactive Rails applications with these resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read the &lt;a href="https://cableready.stimulusreflex.com/"&gt;CableReady documentation&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Read the &lt;a href="https://docs.stimulusreflex.com/"&gt;StimulusReflex documentation&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Read the &lt;a href="https://hotwired.dev/"&gt;Hotwire documentation&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Talk to the helpful folks on the &lt;a href="https://discord.gg/stimulus-reflex"&gt;StimulusReflex discord&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As always, thanks for reading!&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Update on My Python Journey</title>
      <author>Jonathan Cohen</author>
      <pubDate>Wed, 18 Aug 2021 23:06:33 +0000</pubDate>
      <link>https://dev.to/jdc1492/update-on-my-python-journey-3f6p</link>
      <guid>https://dev.to/jdc1492/update-on-my-python-journey-3f6p</guid>
      <description>&lt;p&gt;This entry isn't a long one. I've been steady going along with the python udemy course and came across something very small, but so helpful. One of the recent projects I've worked on was a tip calculator. The program receives the input of the price, the options to tip 10, 12 or even 15 percent and then asks how may ways would you want to split the bill. I won't go into the details of it in this post, but there is a good bit of math that goes on with this program using integers and floats. While it seems these numbers should be able to be added, that isn't the case. Attempting to mathematically combine the two data types will result in an error. &lt;/p&gt;

&lt;p&gt;So because of this, inputs that the user may put in have to be converted as the program runs to successfully get the output. I was able to successfully complete this project through the use of the type() function.  A simple but helpful function, type() gives us the information of what the data type of that piece of information may be, allowing the programmer to be able to convert the information to a more useful data type that will allow for the program to run successfully. &lt;/p&gt;

&lt;p&gt;Since learning about this function, I've been using is so much more along with the print() function. Being able to see the data type one may be working with helps so much. If you have some time, make use of it and see what you're able to learn. &lt;/p&gt;

&lt;p&gt;Happy Coding. &lt;/p&gt;

</description>
      <category>beginners</category>
      <category>python</category>
    </item>
    <item>
      <title>Awesome SwiftUI Libraries List</title>
      <author>Anton Paliakou</author>
      <pubDate>Wed, 18 Aug 2021 22:50:26 +0000</pubDate>
      <link>https://dev.to/toni777772/awesome-swiftui-libraries-list-3agc</link>
      <guid>https://dev.to/toni777772/awesome-swiftui-libraries-list-3agc</guid>
      <description>&lt;p&gt;Do you know cool SwiftUI library? Welcome to contribute!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Toni77777/awesome-swiftui-libraries"&gt;https://github.com/Toni77777/awesome-swiftui-libraries&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alert"&gt;
  &lt;/a&gt;
  Alert
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.toAlertToast-SwiftUI"&gt;AlertToast-SwiftUI&lt;/a&gt; - Create Apple-like alerts &amp;amp; toasts using SwiftUI&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#animation"&gt;
  &lt;/a&gt;
  Animation
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/amosgyamfi/swiftui-animation-library"&gt;swiftui-animations&lt;/a&gt; - SwiftUI Animation Library. Useful SwiftUI animations including Loading/progress, Looping, On-off, Enter, Exit, Fade, Spin and Background animations that you can directly implement in your next iOS application or project. The library also contains huge examples of spring animations such as Inertial Bounce, Shake, Twirl, Jelly, Jiggle, Rubber Bandâ€¦&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Arvindcs/SwiftUI-Animation"&gt;SwiftUI-Animation&lt;/a&gt; - SwiftUI Animation&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/simibac/ConfettiSwiftUI"&gt;ConfettiSwiftUI&lt;/a&gt; - SwiftUI Package for Configurable Confetti Animation&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#button"&gt;
  &lt;/a&gt;
  Button
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/exyte/FloatingButton"&gt;FloatingButton&lt;/a&gt; - Easily customizable floating button menu created with SwiftUI&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/atrinh0/buttoncraft"&gt;buttoncraft&lt;/a&gt; - Craft that perfect SwiftUI button effect&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#calendar"&gt;
  &lt;/a&gt;
  Calendar
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/RaffiKian/RKCalendar"&gt;RKCalendar&lt;/a&gt; - SwiftUI Simple Calendar / Date Picker for iOS&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ThasianX/ElegantCalendar"&gt;ElegantCalendar&lt;/a&gt; - The elegant full screen calendar missed in SwiftUI.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/yodagamaheshan/DateGrid"&gt;DateGrid&lt;/a&gt; - A customizable swiftui calendar&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#card"&gt;
  &lt;/a&gt;
  Card
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/joogps/SlideOverCard"&gt;SlideOverCard&lt;/a&gt; - A SwiftUI card view, made great for setup interactions.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dadalar/SwiftUI-CardStackView"&gt;SwiftUI-CardStackView&lt;/a&gt; - A easy-to-use SwiftUI view for Tinder like cards on iOS, macOS &amp;amp; watchOS&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/terminatorover/RGStack"&gt;RGStack&lt;/a&gt; - This UI attempts to capture the Quibi Card Stack and the associated User Interaction&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Volorf/swipeable-cards"&gt;swipeable-cards&lt;/a&gt; - Swipeable Cards with SwiftUI&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#chart"&gt;
  &lt;/a&gt;
  Chart
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/mecid/SwiftUICharts"&gt;SwiftUICharts&lt;/a&gt; - A simple line and bar charting library that supports accessibility written using SwiftUI.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/spacenation/swiftui-charts"&gt;swiftui-charts&lt;/a&gt; - SwiftUI Charts with custom styles&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/lludo/SwiftSunburstDiagram"&gt;SwiftSunburstDiagram&lt;/a&gt; - SwiftUI library to easily render diagrams given a tree of objects. Similar to ring chart, sunburst chart, multilevel pie chart.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/simonboots/SwiftUIFourierSeries"&gt;SwiftUIFourierSeries&lt;/a&gt; - A Fourier Series visualisation written in Swift/SwiftUI&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/aunnnn/RHLinePlot"&gt;RHLinePlot&lt;/a&gt; - Line plot like in Robinhood app in SwiftUI&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/romanbaitaliuk/BarChart"&gt;BarChart&lt;/a&gt; - SwiftUI Bar Chart&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/denniscm190/stock-charts"&gt;stock-charts&lt;/a&gt; - SwiftUI stock charts for iOS&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#clock"&gt;
  &lt;/a&gt;
  Clock
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/renaudjenny/SwiftClockUI"&gt;SwiftClockUI&lt;/a&gt; - SwiftUI library to display a clock. You can move the arms to change the time, change the style of the clock and customise some configurations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#collection"&gt;
  &lt;/a&gt;
  Collection
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/apptekstudios/ASCollectionView"&gt;ASCollectionView&lt;/a&gt; - A SwiftUI collection view with support for custom layouts, preloading, and more.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#color"&gt;
  &lt;/a&gt;
  Color
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/yannickl/DynamicColor"&gt;DynamicColor&lt;/a&gt; - Yet another extension to manipulate colors easily in Swift and SwiftUI&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#debug"&gt;
  &lt;/a&gt;
  Debug
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/duraidabdul/LocalConsole"&gt;LocalConsole&lt;/a&gt; - In-app console and debug tools for iOS developers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#extensions"&gt;
  &lt;/a&gt;
  Extensions
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/SwiftUIX/SwiftUIX"&gt;SwiftUIX&lt;/a&gt; - An extension to the standard SwiftUI library.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#game"&gt;
  &lt;/a&gt;
  Game
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/InvadingOctopus/octopuskit"&gt;OctopusKit&lt;/a&gt; - 2D ECS game engine in 100% Swift + SwiftUI for iOS, macOS, tvOS&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#grid"&gt;
  &lt;/a&gt;
  Grid
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/paololeonardi/WaterfallGrid"&gt;WaterfallGrid&lt;/a&gt; - A waterfall grid layout view for SwiftUI.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Q-Mobile/QGrid"&gt;QGrid&lt;/a&gt; - ðŸŽ› QGrid: The missing SwiftUI collection view.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pietropizzi/GridStack"&gt;GridStack&lt;/a&gt; - A flexible grid layout view for SwiftUI&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#image"&gt;
  &lt;/a&gt;
  Image
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/SDWebImage/SDWebImageSwiftUI"&gt;SDWebImageSwiftUI&lt;/a&gt; - SwiftUI Image loading and Animation framework powered by SDWebImage&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dmytro-anokhin/url-image"&gt;url-image&lt;/a&gt; - AsyncImage before iOS 15. Lightweight, pure SwiftUI Image view, that displays an image downloaded from URL, with auxiliary views and local cache.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/KittenYang/Longinus"&gt;Longinus&lt;/a&gt; - A pure Swift high-performance asynchronous image loading framework.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kean/NukeUI"&gt;NukeUI&lt;/a&gt; - Lazy image loading for SwiftUI&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/cmtrounce/SwURL"&gt;SwURL&lt;/a&gt; - Lightweight asynchronous image loading in SwiftUI. Fetch and display images from URLs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#list"&gt;
  &lt;/a&gt;
  List
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/crelies/AdvancedList"&gt;AdvancedList&lt;/a&gt; - Advanced List View for SwiftUI with pagination &amp;amp; different states&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Toni77777/EmptyList"&gt;EmptyList&lt;/a&gt; - EmptyList - List(SwiftUI) supports displaying Empty ListView for empty state&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/EnesKaraosman/SwipeCell"&gt;SwipeCell&lt;/a&gt; - Swipe Left2Right &amp;amp; Right2Left, pure SwiftUI implementation&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#loadingindicator"&gt;
  &lt;/a&gt;
  Loading-Indicator
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/exyte/ActivityIndicatorView"&gt;ActivityIndicatorView&lt;/a&gt; - A number of preset loading indicators created with SwiftUI&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/honkmaster/TTProgressHUD"&gt;TTProgressHUD&lt;/a&gt; - TTProgressHUD is a light weight HUD written in SwiftUI meant to display the progress of an ongoing task on iOS&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ninjaprox/LoaderUI"&gt;LoaderUI&lt;/a&gt; - NVActivityIndicatorView implemented in SwiftUI&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/JonasGessner/JGProgressHUD-SwiftUI"&gt;JGProgressHUD-SwiftUI&lt;/a&gt; - Easily show HUDs with SwiftUI! Lightweight SwiftUI wrapper for JGProgressHUD for iOS, tvOS, Catalyst&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#markdown"&gt;
  &lt;/a&gt;
  Markdown
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/dasautoooo/Parma"&gt;Parma&lt;/a&gt; - A SwiftUI view for displaying Markdown with customizable appearances.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/gonzalezreal/MarkdownUI"&gt;MarkdownUI&lt;/a&gt; - Render Markdown text in SwiftUI&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#navigation"&gt;
  &lt;/a&gt;
  Navigation
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/frzi/SwiftUIRouter"&gt;SwiftUIRouter&lt;/a&gt; - Path based routing in SwiftUI&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Bahn-X/swift-composable-navigator"&gt;Swift Composable Navigator&lt;/a&gt; - An open source library for building deep-linkable SwiftUI applications with composition, testing and ergonomics in mind&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rundfunk47/stinsen"&gt;stinsen&lt;/a&gt; - Coordinators in SwiftUI. Simple, powerful and elegant.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/matteopuc/swiftui-navigation-stack"&gt;NavigationStack&lt;/a&gt; - An alternative SwiftUI NavigationView implementing classic stack-based navigation giving also some more control on animations and programmatic navigation.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rebeloper/NavigationKit"&gt;NavigationKit&lt;/a&gt; - SwiftUI navigation done right&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/1amageek/Router"&gt;Router&lt;/a&gt; - Router is a library that assists with SwiftUI view transitions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pages"&gt;
  &lt;/a&gt;
  Pages
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/fermoya/SwiftUIPager"&gt;SwiftUIPager&lt;/a&gt; - Native Pager in SwiftUI&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/exyte/ConcentricOnboarding"&gt;ConcentricOnboarding&lt;/a&gt; - SwiftUI library for a walkthrough or onboarding flow with tap actions&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nachonavarro/Pages"&gt;Pages&lt;/a&gt; - A lightweight, paging view solution for SwiftUI&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/fredyshox/PageView"&gt;fredyshox/PageView&lt;/a&gt; - SwiftUI view enabling navigation between pages of content, imitating the behaviour of UIPageViewController for iOS and watchOS&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/xmartlabs/PagerTabStripView"&gt;PagerTabStripView&lt;/a&gt; - Elegant Pager View fully written in pure SwiftUI&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#payment"&gt;
  &lt;/a&gt;
  Payment
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/alexejn/TypeYouCard"&gt;TypeYouCard&lt;/a&gt; - SwiftUI Paycard form&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#permission"&gt;
  &lt;/a&gt;
  Permission
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/jevonmao/PermissionsSwiftUI"&gt;PermissionsSwiftUI&lt;/a&gt; - A SwiftUI package to beautifully display and handle permissions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#qrcode"&gt;
  &lt;/a&gt;
  QRCode
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/heart/CarBode-Barcode-Scanner-For-SwiftUI"&gt;CarBode&lt;/a&gt; - CarBode : Free &amp;amp; Opensource barcode scanner &amp;amp; generator for SwiftUI&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#state"&gt;
  &lt;/a&gt;
  State
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/fmo91/Pigeon"&gt;Pigeon&lt;/a&gt; - Async state management for SwiftUI&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/VergeGroup/Verge"&gt;Verge&lt;/a&gt; - Verge is a very tunable state-management engine on iOS App&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/StevenLambion/SwiftDux"&gt;SwiftDux&lt;/a&gt; - Predictable state management for SwiftUI applications.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#scroll"&gt;
  &lt;/a&gt;
  Scroll
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/nerdsupremacist/FancyScrollView"&gt;FancyScrollView&lt;/a&gt; - A SwiftUI ScrollView Designed to imitate the App Store and Apple Music ScrollViews (with or without a Parallax Header)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#shapes"&gt;
  &lt;/a&gt;
  Shapes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/spacenation/swiftui-shapes"&gt;SwiftUI Shapes&lt;/a&gt; - Collection of SwiftUI shapes&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/phimage/morphi"&gt;morphi&lt;/a&gt; - Shapes for SwiftUI&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#sheet"&gt;
  &lt;/a&gt;
  Sheet
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/weitieda/bottom-sheet"&gt;BottomSheet&lt;/a&gt; - A SwiftUI view component sliding in from bottom&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/maustinstar/swiftui-drawer"&gt;SwiftUI Drawer&lt;/a&gt; - A SwiftUI bottom-up &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nerdsupremacist/Snap"&gt;Snap&lt;/a&gt; - A customizable Snapping Drawer Ã  la Apple Maps. 100% in SwiftUI.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/LucasMucGH/BottomSheet"&gt;BottomSheet (LucasMucGH)&lt;/a&gt; - A sliding Sheet from the bottom of the Screen with 3 States build with SwiftUI.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step"&gt;
  &lt;/a&gt;
  Step
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/badrinathvm/StepperView"&gt;StepperView&lt;/a&gt; - SwiftUI iOS component for Step Indications.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#skeleton"&gt;
  &lt;/a&gt;
  Skeleton
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/CSolanaM/SkeletonUI"&gt;SkeletonUI&lt;/a&gt; - Elegant skeleton loading animation in SwiftUI and Combine.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#slider"&gt;
  &lt;/a&gt;
  Slider
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/spacenation/swiftui-sliders"&gt;Swiftui sliders&lt;/a&gt; - SwiftUI Sliders with custom styles&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#speech"&gt;
  &lt;/a&gt;
  Speech
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/Cay-Zhang/SwiftSpeech"&gt;SwiftSpeech&lt;/a&gt; - A speech recognition framework designed for SwiftUI.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#tabbar"&gt;
  &lt;/a&gt;
  TabBar
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/SimformSolutionsPvtLtd/SSCustomTabbar"&gt;SSCustomTabbar&lt;/a&gt; - Simple Animated tabbar with native control&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/10011co/FloatingTabBar"&gt;FloatingTabBar&lt;/a&gt; - Aesthetic floating tab bar&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#textfield"&gt;
  &lt;/a&gt;
  TextField
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/kishanraja/FloatingLabelTextFieldSwiftUI"&gt;FloatingLabelTextFieldSwiftUI&lt;/a&gt; - Floating Label TextField for SwiftUI. FloatingLabelTextFieldSwiftUI&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/marinofelipe/CurrencyText"&gt;CurrencyText&lt;/a&gt; - Currency text field formatter&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#toastandpopup"&gt;
  &lt;/a&gt;
  Toast-and-Popup
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/exyte/PopupView"&gt;ExytePopupView&lt;/a&gt; - Toasts and popups library written with SwiftUI&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/quanshousio/ToastUI"&gt;ToastUI&lt;/a&gt; - A simple way to show toast in SwiftUI.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/SimformSolutionsPvtLtd/SSToastMessage"&gt;SSToastMessage&lt;/a&gt; - SSToastMessage is written purely in SwiftUI. It will add toast, alert, and floating message view over the top of any view. It is intended to be simple, lightweight, and easy to use. It will be a popup with a single line of code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#unittesting"&gt;
  &lt;/a&gt;
  Unit-testing
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/nalexn/ViewInspector"&gt;ViewInspector&lt;/a&gt; - Runtime introspection and unit testing of SwiftUI views&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/wxxsw/VideoPlayer"&gt;VideoPlayer&lt;/a&gt; - A video player for SwiftUI, support for caching, preload and custom control view&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#web"&gt;
  &lt;/a&gt;
  Web
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/TokamakUI/Tokamak"&gt;Tokamak&lt;/a&gt; - SwiftUI-compatible framework for building browser apps with WebAssembly and native apps for other platforms.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/carson-katri/SwiftWebUI"&gt;SwiftWebUI&lt;/a&gt; - SwiftUI with support for WebAssembly &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Welcome to contribute SwiftUI libraries to the list!&lt;br&gt;
&lt;a href="https://github.com/Toni77777/awesome-swiftui-libraries"&gt;https://github.com/Toni77777/awesome-swiftui-libraries&lt;/a&gt;&lt;/p&gt;

</description>
      <category>swift</category>
      <category>ios</category>
      <category>swiftui</category>
      <category>github</category>
    </item>
    <item>
      <title>How to ask for help about code, and how to deal with the answers. A practical guide</title>
      <author>Felippe Regazio</author>
      <pubDate>Wed, 18 Aug 2021 22:35:34 +0000</pubDate>
      <link>https://dev.to/felipperegazio/how-to-ask-for-help-about-code-and-how-to-deal-with-the-answers-a-practical-guide-3i6o</link>
      <guid>https://dev.to/felipperegazio/how-to-ask-for-help-about-code-and-how-to-deal-with-the-answers-a-practical-guide-3i6o</guid>
      <description>&lt;h1&gt;
  &lt;a href="#how-to-ask-for-help-about-code-and-deal-with-the-answers"&gt;
  &lt;/a&gt;
  How to ask for help about code and deal with the answers
&lt;/h1&gt;

&lt;p&gt;For the rest of your life as a developer you will bump into problems that you simply DONT KNOW how to start, how to solve, and you will to discover by yourself. Its part of the game. How you handle this situation will define part of the type of professional you are and will be. the way that you will organize the problems, thing, present and attack them matters. So let's go to some important points about it:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-find-the-root-of-your-doubt"&gt;
  &lt;/a&gt;
  1. Find the root of your doubt
&lt;/h2&gt;

&lt;p&gt;Did you get the task but didn't understood the description? So it's useless to ask the Dev next to you "hey, I don't know how to do handle this, can you help me?". Even if he/she explains, you won't understand because you didn't even understood what to do, or what kind of problem is happening.&lt;/p&gt;

&lt;p&gt;It's okay not to understand the briefing, it means you have a clear reason to ask for help. But its a problem pretending to understand, trying to get things done without clear information and end up stucked.&lt;/p&gt;

&lt;p&gt;The task description said to do something in the login but you don't know "what login?", ok: ask. Missing info in description? Notify someone. You really don't understood, ask Lead, PM, PO... Trying to coding something without a clear understanding of what to do is by itself a problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-try-not-to-pass-the-ball"&gt;
  &lt;/a&gt;
  2. Try not to pass the ball
&lt;/h2&gt;

&lt;p&gt;Let's imagine that you got a task: show a new message after login. You read the task, understood the briefing, started to code, but suddenly nothing makes sense. Nothing works. This is where most beginners ask someone WHAT to do, and not HOW to do (because you even know what you dont know).&lt;/p&gt;

&lt;p&gt;Often the Dev's first move is to call a colleague and say, "I need to show a message after login but I'm not getting it, how could I do it?"&lt;/p&gt;

&lt;p&gt;This is not exactly a question, you are passing the ball. The person will basically tell you how to work. And thats ok sometimes, you can learn with it too. But if this starts to get recurrent, then it's better to follow the next steps:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-identify-your-difficulty"&gt;
  &lt;/a&gt;
  First identify your difficulty
&lt;/h3&gt;

&lt;p&gt;You can't start because you don't know which file to move? Not sure which function to use? Do you know the files but at the time of displaying the message you don't know how to do the modal? Or do you have a lib to show the message and you don't know where is the docs?&lt;/p&gt;

&lt;p&gt;These are real doubts. See that then the way to build your questions would change:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hey, I need to show a message after Login but I don't know what file or function it is in, can you show me?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I'm giving a console log here because I don't know how to do the modal, or if I should use lib, could you help me?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In other words, before declaring to someone that you have NO IDEA WHAT TO DO and need help to give baby steps, it's better to try, look at yourself and think: which part exactly am I not understanding?. Ask a question after question after another if you need to, no prob.&lt;/p&gt;

&lt;p&gt;See that I'm not saying that you can't ask someone to show you how to do something entirely. I'm telling that this shouldn't become a modus operandi because will harm your learning and the team dynamics. Try to do it first, understand your own difficulties, list them and ask for help objectively. That way you help yourself to learn, and help the team to help you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-have-the-ownership-of-your-task"&gt;
  &lt;/a&gt;
  3. Have the ownership of your task
&lt;/h2&gt;

&lt;p&gt;Let's say then that you understood the briefing, did the task, asked for help, pushed the code and tadÃ¡Ã¡Ã¡Ã¡Ã¡: A WILD BUG APPEARED.&lt;/p&gt;

&lt;p&gt;The worst thing you can do when informed of the bug is to say, "But I did it the way Juliana (or anyone else on the team) told me to do it".&lt;/p&gt;

&lt;p&gt;Bug report is not blaming. If someone informs you of a bug, you listen and solve it. Then starts all again.&lt;/p&gt;

&lt;p&gt;Sometimes you can say this unintentionally, but it's like trying to blame the other for a non-existent consequence of your own task.&lt;/p&gt;

&lt;p&gt;If you do a task, ask for help and then say "but I did it the way X-Person told me to do it", the person who helped you will probably think 10 times before helping you again. Even if nothing comes out of it. Remember: you can ask for help but the task is yours.&lt;/p&gt;

&lt;p&gt;The responsibility for bugs should be with the whole team. This is one of the effects of doing code review: other people saw the code, other people approved it. Other people are naturally involved, you don't need to be afraid of being wronged (at least in a healthy team).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-ask-for-pair-programming"&gt;
  &lt;/a&gt;
  4. Ask for Pair Programming
&lt;/h2&gt;

&lt;p&gt;Let's say that you really can't organize your head, you got the task, you have the ownership, you are motivated, but you you have no idea about how to solve it, you need to ask someone to untangle: Ask a colleague for a pair programming :)&lt;/p&gt;

&lt;p&gt;If you're totally lost, instead of sending a message or poking the other dev and asking implicitly to "explain how to do your task", ask for a pair: among other things, that's what a pair its for.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-be-honest-when-in-doubt"&gt;
  &lt;/a&gt;
  5. BE HONEST when in doubt
&lt;/h2&gt;

&lt;p&gt;Don't ask questions pretending to know more than you really do, or embarrassed. Okay to ask (if not, you are on the wrong place). You need a pair prgramming and it's lost? Ok, ask for help: "Hey, can we pair? I have no idea about how to attack this problem". Thats totally ok.&lt;/p&gt;

&lt;p&gt;If what you have is a specific doubt, be frank: Hey, I read React's useState documentation, I did what was there, I tried a few things but nothing worked, it's buggy, I don't think I understood, could you help me? Sometimes, the way you ask can make the problem easy to solve.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you have a cool team, the team will welcome you and you will all grow together, and knowing how to organize and present problems for the team is a skill that you should try to improve as much as possible.&lt;/p&gt;

&lt;p&gt;Cover image by NeONBRAND on Unsplash.&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>discuss</category>
    </item>
  </channel>
</rss>
