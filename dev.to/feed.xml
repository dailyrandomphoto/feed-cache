<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The new generation of code generator</title>
      <author>Daniel.xiao</author>
      <pubDate>Sun, 09 May 2021 11:54:10 +0000</pubDate>
      <link>https://dev.to/danieldx/the-new-generation-of-code-generator-26h1</link>
      <guid>https://dev.to/danieldx/the-new-generation-of-code-generator-26h1</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PuZ0WS4A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d8a53e83571242f0b399dfdeb0b52819%257Etplv-k3u1fbpfcp-watermark.image" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PuZ0WS4A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d8a53e83571242f0b399dfdeb0b52819%257Etplv-k3u1fbpfcp-watermark.image" alt="WX20210509-175440@2x.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#speaking-from-a-scaffold"&gt;
  &lt;/a&gt;
  Speaking from a scaffold
&lt;/h2&gt;

&lt;p&gt;Daniel: Recently I want to build a code generator that can quickly generate project codes. What recommendation does Brother Egg have?&lt;/p&gt;

&lt;p&gt;Mr. Egg: I have always used yeoman in the past, and it is an open source project that is nearly 10k stars. However, what I want to recommend to you today is not yeoman, but a new generation code generator &lt;a href="https://daniel-dx.github.io/ncgen/"&gt;&lt;code&gt;ncgen&lt;/code&gt;&lt;/a&gt;, it may seem more approachable.&lt;/p&gt;

&lt;p&gt;Daniel: I like the simple one the most. How does it work?&lt;/p&gt;

&lt;p&gt;Mr. Egg: Old rules, you say your needs, I will try to answer them one by one&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-you-need-a-project-template"&gt;
  &lt;/a&gt;
  First, you need a project template
&lt;/h3&gt;

&lt;p&gt;Daniel: I have a project template (for example: &lt;a href="https://github.com/daniel-dx/vue3-ncgen-demo.git"&gt;vue3-ncgen-demo&lt;/a&gt;), I hope all new projects come from this project template, so I only need to concentrate on maintaining this project template.&lt;/p&gt;

&lt;p&gt;Mr. Egg: OK, this is the function of the project scaffolding. Let's take a look at how &lt;code&gt;ncgen&lt;/code&gt; is processed.&lt;/p&gt;

&lt;p&gt;The first step is to install ncgen&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm i ncgen &lt;span class="nt"&gt;-g&lt;/span&gt; &lt;span class="c"&gt;# yarn global add ncgen&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The second step is to generate the configuration file &lt;code&gt;ncgen-config.js&lt;/code&gt;, which describes the logic of the code generator&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ncgen genConf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 3 Modify &lt;code&gt;main.tmplSource&lt;/code&gt; in &lt;code&gt;ncgen-config.js&lt;/code&gt; to the url of the project template.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;tmplSource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://github.com/daniel-dx/vue3-ncgen-demo.git&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try it out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ncgen ncgen-config.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://camo.githubusercontent.com/ca5a5dc46a9b4148dd97b52fb1fd6c95b5c751f75ccf59bb81015f9d3f817b7a/68747470733a2f2f70332d6a75656a696e2e62797465696d672e636f6d2f746f732d636e2d692d6b3375316662706663702f65313232353236626236663934306333386565396163663165633161623365387e74706c762d6b3375316662706663702d77617465726d61726b2e696d616765" class="article-body-image-wrapper"&gt;&lt;img src="https://camo.githubusercontent.com/ca5a5dc46a9b4148dd97b52fb1fd6c95b5c751f75ccf59bb81015f9d3f817b7a/68747470733a2f2f70332d6a75656a696e2e62797465696d672e636f6d2f746f732d636e2d692d6b3375316662706663702f65313232353236626236663934306333386565396163663165633161623365387e74706c762d6b3375316662706663702d77617465726d61726b2e696d616765" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#simple-copying-is-not-enough-modification-is-necessary"&gt;
  &lt;/a&gt;
  Simple copying is not enough, modification is necessary
&lt;/h3&gt;

&lt;p&gt;Daniel: Whoops is good. However, the currently generated project is exactly the same as the project template, but it will always have its own information that is different from the project template, such as the name of the project, the name of the author, etc. I don’t want to modify these manually every time the project is generated.&lt;/p&gt;

&lt;p&gt;Mr. Egg: OK, the request is very reasonable. Since this information can only be provided by the person who created the project, we need to collect this information through some questions, and then we can make some modifications to the generated project based on this information. We modify the &lt;code&gt;main.prompt&lt;/code&gt; and &lt;code&gt;main.updateFiles&lt;/code&gt; in &lt;code&gt;ncgen-config.js&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Example description:&lt;br&gt;&lt;br&gt;
Perform string replacement on the &lt;code&gt;package.json&lt;/code&gt; file in the generated project, the rules are as follows:&lt;br&gt;&lt;br&gt;
Replace the string &lt;code&gt;vue3-ncgen-demo&lt;/code&gt; with the project name entered by the user&lt;br&gt;&lt;br&gt;
Replace the string &lt;code&gt;Daniel.xiao&lt;/code&gt; with the author name entered by the user&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;author&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;What is the author's name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;

    &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="na"&gt;updateFiles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;package.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;answers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$answers&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue3-ncgen-demo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;answers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;projectNameObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;kebabCase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Daniel.xiao&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;answers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://camo.githubusercontent.com/389f2870fb39d3538e773c62035291a9e3d7d07585d54272ee132e6d64c1f15f/68747470733a2f2f70392d6a75656a696e2e62797465696d672e636f6d2f746f732d636e2d692d6b3375316662706663702f34346530363866656138353734653338386233393634396363346530336338367e74706c762d6b3375316662706663702d77617465726d61726b2e696d616765" class="article-body-image-wrapper"&gt;&lt;img src="https://camo.githubusercontent.com/389f2870fb39d3538e773c62035291a9e3d7d07585d54272ee132e6d64c1f15f/68747470733a2f2f70392d6a75656a696e2e62797465696d672e636f6d2f746f732d636e2d692d6b3375316662706663702f34346530363866656138353734653338386233393634396363346530336338367e74706c762d6b3375316662706663702d77617465726d61726b2e696d616765" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Daniel: Hey, I noticed that the template engine is not used here, but the string replacement is used directly&lt;/p&gt;

&lt;p&gt;Mr. Egg: Yes, this design has a lot of meaning. Using a template engine to replace files may cause the project template itself to fail to run normally, because the template engine requires placeholders, and placeholders may cause code parsing errors&lt;/p&gt;

&lt;p&gt;Daniel: Yes, in this way the project template is just an ordinary project, and there is no need to make some template placeholder transformations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-about-extra-files-please-delete"&gt;
  &lt;/a&gt;
  What about extra files? please delete
&lt;/h3&gt;

&lt;p&gt;Daniel: Then I will continue. There are some template directories and files (such as module template directories, component template files) in my project template, but I don't want to see these templates in the generated project.&lt;/p&gt;

&lt;p&gt;Mr. Egg: OK, no problem, just delete the specified files and directories. Let's modify the &lt;code&gt;main.removeFiles&lt;/code&gt; in &lt;code&gt;ncgen-config.js&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Example description:&lt;br&gt;&lt;br&gt;
Delete the &lt;code&gt;ncgen-config.js&lt;/code&gt; and &lt;code&gt;src/components/base/Template.vue&lt;/code&gt; files in the generated project&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;removeFiles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ncgen-config.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;src/components/base/Template.vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#onestop-service-automatic-installation-of-dependencies"&gt;
  &lt;/a&gt;
  One-stop service: automatic installation of dependencies
&lt;/h3&gt;

&lt;p&gt;Daniel: I just noticed that the above example will automatically install dependencies when it runs. It should be installed with &lt;code&gt;npm&lt;/code&gt;, can this support &lt;code&gt;yarn&lt;/code&gt;? If I am a non-NodeJS project, such as Python, Go, etc., can I do it?&lt;/p&gt;

&lt;p&gt;Mr. Egg: Of course! The generated &lt;code&gt;ncgen-config.js&lt;/code&gt; uses &lt;code&gt;npm i&lt;/code&gt; to install dependencies by default. See the example below. If you want to change to &lt;code&gt;yarn&lt;/code&gt;, just change &lt;code&gt;command&lt;/code&gt; to &lt;code&gt;yarn install&lt;/code&gt;. And if it is Python, Go and other languages, you only need to change &lt;code&gt;command&lt;/code&gt; to the corresponding dependency installation command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;installDependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;skip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;tips&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dependencies are being installed, it may take a few minutes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;npm i&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#finally-give-some-friendly-tips"&gt;
  &lt;/a&gt;
  Finally, give some friendly tips
&lt;/h3&gt;

&lt;p&gt;Daniel: That’s great. The project scaffolding was completed in just a few clicks. I think a friendly welcome and beautiful ending is needed in the end.&lt;/p&gt;

&lt;p&gt;Mr. Egg: Simply modify the &lt;code&gt;main.welcome&lt;/code&gt; and &lt;code&gt;main.complete&lt;/code&gt; as you wish&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;welcome&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome to use (Vue 3 + TypeScript + Vite) project generator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="na"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Congratulations, the operation is successful&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#highfrequency-use-is-not-scaffolding"&gt;
  &lt;/a&gt;
  High-frequency use is not scaffolding
&lt;/h2&gt;

&lt;p&gt;Daniel: The scaffolding is done, but it is only used when building a new project. High-frequency operations are still part of the increase in code, such as adding a functional module, adding a component, adding an API, etc.&lt;/p&gt;

&lt;p&gt;Mr. Egg: I understand what you mean. Old rules, you ask me to answer&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-code-template-exists-in-the-project-template"&gt;
  &lt;/a&gt;
  The code template exists in the project template
&lt;/h3&gt;

&lt;p&gt;Daniel: I want to add a new component to a project. I don't want to copy an existing component and then perform various operations to modify and delete the code. In fact, there is a component template in the project template&lt;/p&gt;

&lt;p&gt;Mr. Egg: OK. Let's first add a subcommand called &lt;code&gt;add-component&lt;/code&gt; in &lt;code&gt;ncgen-config.js&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Example description (assuming that the values ​​of category and name are'busi' and'demo' respectively):&lt;br&gt;&lt;br&gt;
&lt;code&gt;description&lt;/code&gt; is used to describe the function of a subcommand.&lt;br&gt;&lt;br&gt;
&lt;code&gt;api.listDirs&lt;/code&gt; This API is very useful for allowing users to choose where to insert the code.&lt;br&gt;&lt;br&gt;
The configuration of &lt;code&gt;addFilesTo&lt;/code&gt; will insert the src/components/base/Template.vue in the project template into the src/components/busi/Demo.vue file in the project.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;add-component&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Add vue component&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

      &lt;span class="na"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;list&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listDirs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;src/components/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;category&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Please select the category&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;What is the component name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The component name is required&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;],&lt;/span&gt;

      &lt;span class="na"&gt;tmplSource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://github.com/daniel-dx/vue3-ncgen-demo.git&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

      &lt;span class="na"&gt;addFilesTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;answers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$answers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;src/components/base/Template.vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`src/components/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;answers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;answers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nameObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;upperFirstCamelCase&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.vue`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://camo.githubusercontent.com/7acb96a3fdffb99386744eac7ef6f59a166eab84b784de19dd4fdab31329c8ce/68747470733a2f2f70362d6a75656a696e2e62797465696d672e636f6d2f746f732d636e2d692d6b3375316662706663702f32336332616533636637343434373735623161636537616531643834616630617e74706c762d6b3375316662706663702d77617465726d61726b2e696d616765" class="article-body-image-wrapper"&gt;&lt;img src="https://camo.githubusercontent.com/7acb96a3fdffb99386744eac7ef6f59a166eab84b784de19dd4fdab31329c8ce/68747470733a2f2f70362d6a75656a696e2e62797465696d672e636f6d2f746f732d636e2d692d6b3375316662706663702f32336332616533636637343434373735623161636537616531643834616630617e74706c762d6b3375316662706663702d77617465726d61726b2e696d616765" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-code-template-does-not-exist-in-the-project-template"&gt;
  &lt;/a&gt;
  The code template does not exist in the project template
&lt;/h3&gt;

&lt;p&gt;Daniel: Pretty. But for the existing projects, these projects are not from the project template, and I also want to add some sub-commands to generate part of the code for the project, how to do?&lt;/p&gt;

&lt;p&gt;Mr. Egg: The subcommand supports two ways to add files, one is the code template from the project template mentioned above, and the other is dynamically created by you. Both can be used at the same time. The following example demonstrates how to dynamically create a code file&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Example description (assuming that the values ​​of category and name are'busi' and'demo' respectively):&lt;br&gt;&lt;br&gt;
The configuration of &lt;code&gt;addFiles&lt;/code&gt; will create a src/components/busi/Demo.md file in the project. The content of this file is &lt;code&gt;# Demo&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;add-component&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;addFiles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;answers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$answers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`src/components/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;answers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;answers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nameObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;upperFirstCamelCase&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.md`&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`# &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;answers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nameObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;upperFirstCamelCase&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#highly-recommended-replacement-technique"&gt;
  &lt;/a&gt;
  Highly recommended replacement technique
&lt;/h3&gt;

&lt;p&gt;Daniel: Next, some file contents are modified (for example, when a page is added, the routing rules file will be automatically modified to register routes for the page), right? The operation is the same as the main command.&lt;/p&gt;

&lt;p&gt;Mr. Egg: Well savvy. A tip recommended here is to add some identification comments where you need to insert the fragment code, as shown in the &lt;strong&gt;src/App.vue&lt;/strong&gt; code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;img alt="Vue logo" src="./assets/logo.png" /&amp;gt;
  &amp;lt;HelloWorld msg="Hello Vue 3 + TypeScript + Vite" /&amp;gt;
  &amp;lt;!-- Don't touch me-place component --&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script lang="ts"&amp;gt;
import {defineComponent} from'vue'
import HelloWorld from'./components/busi/HelloWorld.vue'
// &amp;lt;!-- Don't touch me-import component --&amp;gt;
export default defineComponent({
  name:'App',
  components: {
    HelloWorld,
    // &amp;lt;!-- Don't touch me-register component --&amp;gt;
  }
})
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cooperate with &lt;code&gt;api.insertBefore&lt;/code&gt; this API to insert the specified content before the specified matching position of the file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;updateFiles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;answers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$answers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;src/App.vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertBefore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;// &amp;lt;!-- Don't touch me-import component --&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`import &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;answers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nameObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;upperFirstCamelCase&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; from'./components/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;answers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;answers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nameObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;upperFirstCamelCase&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.vue'`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;// &amp;lt;!-- Don't touch me-register component --&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;answers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nameObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;upperFirstCamelCase&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;!-- Don't touch me-place component --&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;answers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nameObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;upperFirstCamelCase&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`src/components/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;answers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;answers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nameObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;upperFirstCamelCase&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.vue`&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;options&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;answers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nameObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;upperFirstCamelCase&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Daniel: Perfect. Thank you brother egg. I am now eager to try my first code generator&lt;/p&gt;

&lt;p&gt;Mr. Egg: Welcome, looking forward to your feedback&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#written-at-the-end"&gt;
  &lt;/a&gt;
  Written at the end
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#above-complete-configuration"&gt;
  &lt;/a&gt;
  Above - complete configuration
&lt;/h3&gt;

&lt;p&gt;For the complete configuration of &lt;code&gt;ncgen-config.js&lt;/code&gt; in the example, please view: &lt;a href="https://github.com/daniel-dx/vue3-ncgen-demo/blob/master/ncgen-config.js"&gt;https://github.com/daniel-dx/vue3-ncgen-demo/blob/master/ncgen-config.js&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#below-ncgen-official-website"&gt;
  &lt;/a&gt;
  Below - ncgen official website
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://daniel-dx.github.io/ncgen/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pxO5nYoT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://daniel-dx.github.io/ncgen/logo.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Keywords: ncgen, scaffolding, generator, code generator&lt;/p&gt;

</description>
    </item>
    <item>
      <title>A Quick Dive into the Python Programming Language.</title>
      <author>Goodness Olawoore</author>
      <pubDate>Sun, 09 May 2021 11:44:35 +0000</pubDate>
      <link>https://dev.to/goodnessolawoore/a-quick-dive-into-the-python-programming-language-3cde</link>
      <guid>https://dev.to/goodnessolawoore/a-quick-dive-into-the-python-programming-language-3cde</guid>
      <description>&lt;p&gt;Python is a very popular general-purpose programming language and has some of the world's largest products built on it. Google, Netflix, Uber, Spotify, Pinterest, Reddit, and Instagram are examples of great sites that are built on the python programming language. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-philosophy"&gt;
  &lt;/a&gt;
  PYTHON PHILOSOPHY
&lt;/h2&gt;

&lt;p&gt;Python is said to be the most beginner-friendly programming language anyone could learn. This philosophy was established way long ago, and as much as I am aware of, it hasn’t been challenged with a countering opinion. &lt;/p&gt;

&lt;p&gt;While I wouldn’t say python is the easiest programming language to learn, it sure is one of the pretty easy programming languages you could pick up at any point in time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-is-an-objectoriented-programming-language"&gt;
  &lt;/a&gt;
  PYTHON IS AN OBJECT-ORIENTED PROGRAMMING LANGUAGE
&lt;/h2&gt;

&lt;p&gt;Object-Oriented Programming is a programming pattern that focuses on the concept of classes and objects. Python allows us to develop application softwares using this approach.  &lt;/p&gt;

&lt;p&gt;These objects are likened to real-world entities like cars, schools, books etc. Take for instance, an object could be a car with properties like colour, maker, model or a school with properties like classes, teachers, students, courses. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-is-a-dynamically-typed-language"&gt;
  &lt;/a&gt;
  PYTHON IS A DYNAMICALLY TYPED LANGUAGE
&lt;/h2&gt;

&lt;p&gt;Python doesn't require you to declare the type of a variable while assigning a value to it, unlike some languages where you are compelled to declare the type of a variable before assigning it a value.&lt;/p&gt;

&lt;p&gt;For example, if you are going to declare a variable that will contain a string value in C#, you need to declare the type of that variable as a string before assigning it a value, otherwise, the program will return an error.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example-below"&gt;
  &lt;/a&gt;
  Example Below:
&lt;/h4&gt;

&lt;p&gt;In C#:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;string language = "Python";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whereas in python you don't need to declare the type at all.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;language = "Python"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#python-is-a-generalpurpose-language"&gt;
  &lt;/a&gt;
  PYTHON IS A GENERAL-PURPOSE LANGUAGE
&lt;/h2&gt;

&lt;p&gt;This basically means that python could be used for a wide range of things, ranging from web application development, mobile application development, desktop application development, game development, machine learning, artificial intelligence, data science, automation etc. &lt;/p&gt;

&lt;p&gt;While Python doesn’t singularly support all these variants/platforms, it has built-in libraries and frameworks that make working on these platforms possible and seamless. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#below-are-a-few-python-frameworkslibraries-that-you-can-leverage-to-suit-your-desired-goal"&gt;
  &lt;/a&gt;
  Below are a few Python Frameworks/Libraries that you can leverage to suit your desired goal:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Web Development - Django, flask, Falcon, Web2py&lt;/li&gt;
&lt;li&gt;Data Science - Numpy, Pandas, Scrapy &lt;/li&gt;
&lt;li&gt;Mobile Development - Kivy &lt;/li&gt;
&lt;li&gt;Machine Learning and Artificial Intelligence - TensorFlow, PyTorch, Keras, Scikit-learn &lt;/li&gt;
&lt;li&gt;Desktop Development - Kivy, Tkinter, PyQT &lt;/li&gt;
&lt;li&gt;Game Development - Pygame, Pykyra, PyOpenGl, Kivy, Pyglet &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#python-is-very-beginnerfriendly"&gt;
  &lt;/a&gt;
  PYTHON IS VERY BEGINNER-FRIENDLY
&lt;/h2&gt;

&lt;p&gt;Python is written in pure English language and emphasises readability, unlike some programming languages that are somewhat naturally complex and would really take the grace of God for a beginner to understand the code that outputs "Hello World" (Hello to C++😊) &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-little-comparison"&gt;
  &lt;/a&gt;
  A LITTLE COMPARISON
&lt;/h2&gt;

&lt;p&gt;While curly brackets { } are only used to indicate the beginning and the ending of a code block in most programming languages, indentation is used instead in python.  &lt;/p&gt;

&lt;p&gt;And while indentations are mainly for styling purposes in other languages, it is a strict requirement for your code to get compiled and executed here. It basically tells the python interpreter that a series of code statements belongs to a particular block of code. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#readability"&gt;
  &lt;/a&gt;
  READABILITY
&lt;/h2&gt;

&lt;p&gt;Python programs are faster to write and much easier to read compared to other programming languages, and you can literally read a python code the way you’d read an English text. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-versions"&gt;
  &lt;/a&gt;
  PYTHON VERSIONS
&lt;/h2&gt;

&lt;p&gt;There are currently two versions of Python, which are version 2 and version 3. &lt;br&gt;
While Python version 2 passes for an older and legacy version of Python, Python version 3 is the current and actively supported version of the language. &lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#get-started-with-python"&gt;
  &lt;/a&gt;
  GET STARTED WITH PYTHON
&lt;/h1&gt;
&lt;h3&gt;
  &lt;a href="#1-integrated-development-environment-ide-"&gt;
  &lt;/a&gt;
  1. INTEGRATED DEVELOPMENT ENVIRONMENT (IDE) -
&lt;/h3&gt;

&lt;p&gt;An IDE basically provides developers with an interface to write code. There are a couple of IDEs &lt;strong&gt;(Integrated Development Environment)&lt;/strong&gt; that support the Python programming language. Anaconda, Sublime Texts, Atom, Visual Studio Code, PyCharm, Vim are good examples. &lt;/p&gt;

&lt;p&gt;Python also has a default IDLE &lt;strong&gt;(Integrated Development and Learning Environment)&lt;/strong&gt; which is automatically installed when you install python on your PC. It is an interactive window where you can type in python codes and see the result. This is very beginner-friendly and easy to use. &lt;/p&gt;

&lt;p&gt;I will be using the Visual Studio code IDE and the Python IDLE for the purpose of this article. You can  &lt;a href="https://code.visualstudio.com/download"&gt;download VS code&lt;/a&gt; if you don’t already have it, follow the instructions on the site to correctly install and get it running. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-install-python-%E2%80%AF"&gt;
  &lt;/a&gt;
  2. INSTALL PYTHON - 
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Download the latest version of python at  &lt;a href="http://www.python.org/downloads"&gt;www.python.org/downloads&lt;/a&gt;. Note that this guide is focused on the Windows Operating System.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2C1U021s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dclfepekx/image/upload/v1619549980/download_python_q6jjx1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2C1U021s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dclfepekx/image/upload/v1619549980/download_python_q6jjx1.png" alt="download VS code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To check if python is now installed, open the command prompt window on your computer, you can easily do this by pressing the &lt;strong&gt;Win + R&lt;/strong&gt; keys, this would automatically open a quick search window. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EkyoapZe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dclfepekx/image/upload/v1619550245/1._win_R_c0ukyz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EkyoapZe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dclfepekx/image/upload/v1619550245/1._win_R_c0ukyz.png" alt="Win + R"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type “cmd” in the search box and press Enter, your command prompt window will open afterwards. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VEucIMEQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dclfepekx/image/upload/v1619550245/2._command_promt_window_opens_bonk0g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VEucIMEQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dclfepekx/image/upload/v1619550245/2._command_promt_window_opens_bonk0g.png" alt="cmd"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type the word “python” or “py” in your command prompt. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Input:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#desired-result"&gt;
  &lt;/a&gt;
  Desired result:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YNNw5vdC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dclfepekx/image/upload/v1619550245/2.1._checks_if_python_is_installed_wcctfy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YNNw5vdC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dclfepekx/image/upload/v1619550245/2.1._checks_if_python_is_installed_wcctfy.png" alt="checks if python is installed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This would check if python is installed and if yes, it would return the version of python that you’re running, also the version of your system OS, plus some additional information.This is said to be the easiest way to check if Python is installed on a windows PC.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;But if you are sure that python is installed and you just want to check for the version that you’re running, you could type

&lt;code&gt;python --version&lt;/code&gt;

. This would return the version of python installed on your computer. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Input:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python --version
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#desired-result"&gt;
  &lt;/a&gt;
  Desired result:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BCLaKeyP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dclfepekx/image/upload/v1619550245/4._python_--version_rzkvyd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BCLaKeyP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dclfepekx/image/upload/v1619550245/4._python_--version_rzkvyd.png" alt="python --version"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;br&gt;
&lt;br&gt;
  &lt;code&gt;py --version&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
 would also work.&lt;/p&gt;

&lt;p&gt;Input:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;py --version
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#desired-result"&gt;
  &lt;/a&gt;
  Desired result:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vF0SyVXU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dclfepekx/image/upload/v1619550245/3._py_--version_ak6gnc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vF0SyVXU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dclfepekx/image/upload/v1619550245/3._py_--version_ak6gnc.png" alt="py --version"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;As you can see, I am running on the latest version of Python (Python 3.9).&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now that you have confirmed that python is successfully installed on your machine, I know that you are eager to write your first Python code. This can be done in three different ways: 
&amp;gt; - Open Visual Studio Code 
&amp;gt; - Switch to a python interactive environment by typing

&lt;code&gt;python&lt;/code&gt;

in your command prompt interface. 
&amp;gt; - Close the command prompt and open the built-in Interactive Development and Learning Environment (IDLE), that was installed with python by default. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s go with the 3rd option.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Head over to the folder that contains your Python installation packages. My directory looks like this, &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eVCdfDYJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dclfepekx/image/upload/v1619550245/5._run_python_application_udtf5v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eVCdfDYJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dclfepekx/image/upload/v1619550245/5._run_python_application_udtf5v.png" alt="my directory"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run the Python application. This will open a Python IDLE where you can play around with python codes. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uAwqwSEk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dclfepekx/image/upload/v1619550245/6._opens_IDLE_ytnzzy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uAwqwSEk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dclfepekx/image/upload/v1619550245/6._opens_IDLE_ytnzzy.png" alt="open IDLE"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Alternatively, you can hit the &lt;strong&gt;Win + S&lt;/strong&gt; keys and type "python" into the search box. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wvTN-2GM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dclfepekx/image/upload/v1619550246/7._win_S_ja0orc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wvTN-2GM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dclfepekx/image/upload/v1619550246/7._win_S_ja0orc.png" alt="Win + S"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on the &lt;strong&gt;IDLE (Python 3.9 64-bit)&lt;/strong&gt;. If you are running another version of python other than version 3.9 or 64-bit, you won’t see &lt;strong&gt;“Python 3.9 64-bit”&lt;/strong&gt;, you will see the exact version that you are running. &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Now that you are in your python interactive environment, you might want to type “help( )” to gain insight into the environment, available python modules etc. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Input:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;help()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#desired-result"&gt;
  &lt;/a&gt;
  Desired result:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jvaMTzgF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dclfepekx/image/upload/v1619550246/8._help_xaqqfe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jvaMTzgF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dclfepekx/image/upload/v1619550246/8._help_xaqqfe.png" alt="Help"&gt;&lt;/a&gt; &lt;br&gt;
You will see a couple of instructions like the one above. You can follow on if you wish. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-run-your-first-python-program-"&gt;
  &lt;/a&gt;
  3. RUN YOUR FIRST PYTHON PROGRAM -
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;You are about to write your first ever python code, fasten your seatbelt. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What first statement could we print if not the message that welcomes everyone to the world of programming😊.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In python, the

&lt;code&gt;print()&lt;/code&gt;

function is used to display a message to the screen. Let’s go ahead and display “Hello World”. 
- To display an “Hello World” text in Python, we type

&lt;code&gt;print(“Hello World”)&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;in C++, this same code is written as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;     
using namespace std;  

int main(){ 
    cout&amp;lt;&amp;lt;"Hello World"; 
    return 0; 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;with each line having certain functions they do. But since you already said “Yes” to python, I urge you to be focused and not be distracted. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now you can switch back to your Python IDLE. Type “print(“Hello World)” and see your first python program run before your eyes. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3K4F_yda--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dclfepekx/image/upload/v1619550245/9._print_hello_world_yotsux.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3K4F_yda--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dclfepekx/image/upload/v1619550245/9._print_hello_world_yotsux.png" alt="print hello world in the IDLE"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Did you get a result like the one above? If yes, then &lt;strong&gt;Congratulations!&lt;/strong&gt; You just successfully ran your first python program.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Note that the print( ) function is case sensitive, and

&lt;code&gt;Print()&lt;/code&gt;

will not work as

&lt;code&gt;print()&lt;/code&gt;

. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice how we didn’t use the Visual Studio Code? It’s all good, as you won't need to install it again when you want to start writing codes on an IDE. &lt;/p&gt;

&lt;p&gt;Now that you’ve written your first ever python program, go rejoicing, for you shall now be called a Python Programmer 💃🕺.&lt;/p&gt;

&lt;p&gt;I officially launched this blog last week, and I wrote about it, you can &lt;a href="https://goodnessolawoore.codes/i-am-starting-a-technical-blog"&gt;check it out here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>python</category>
      <category>pythonbeginner</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
    <item>
      <title>Build a simple Node.js RESTful API</title>
      <author>Youssef Allali</author>
      <pubDate>Sun, 09 May 2021 11:39:57 +0000</pubDate>
      <link>https://dev.to/youssefallalix/build-a-simple-node-js-restful-api-5g40</link>
      <guid>https://dev.to/youssefallalix/build-a-simple-node-js-restful-api-5g40</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#chapter-1"&gt;What is REST?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-2"&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-3"&gt;Set up the workspace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-4"&gt;Set up the database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-5"&gt;Set up the routes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-6"&gt;Set up the controller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-7"&gt;Set up the server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-8"&gt;Test the API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-9"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-10"&gt;Final words&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#what-is-rest"&gt;
  &lt;/a&gt;
  What is REST? &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;REST is an acronym for Representational State Transfer and it is a software architectural style which uses a subset of HTTP&lt;br&gt;
RESTful APIs relies on HTTP verbs to perform four operations :&lt;br&gt;
The GET (to read a resource), POST (to create and/or update a resource), and DELETE (to delete a resource)&lt;br&gt;
RESTful APIs are defined with the following aspects :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A base URI, such as &lt;a href="http://api.example.com/"&gt;http://api.example.com/&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;Standard HTTP methods (e.g., GET, POST, PUT, and DELETE);&lt;/li&gt;
&lt;li&gt;Media types, such as application/json.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this tutorial, we will learn how to create a RESTful API using Node.js.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;In order to follow along with this tutorial you will need &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;a href="https://nodejs.org/en/download"&gt;Node.js&lt;/a&gt; environnement installed on your machine;&lt;/li&gt;
&lt;li&gt;A text editor program or IDE (&lt;a href="https://code.visualstudio.com/download"&gt;VS Code&lt;/a&gt; for example);&lt;/li&gt;
&lt;li&gt;A mongoDB instance (here in this tutorial, we will be using the cloud database &lt;a href="https://www.mongodb.com/cloud/atlas"&gt;MongoDB Atals&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;An API Client such as &lt;a href="https://www.postman.com/downloads/"&gt;Postman&lt;/a&gt; to help us make HTTP requests and test our API server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To avoid running into any compatibility issues, I will list the versions of programs and tools used in this tutorial :&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tool&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;th&gt;How to check&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Node.js&lt;/td&gt;
&lt;td&gt;v14.16.1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;node -v&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MongoDB Node.js driver&lt;/td&gt;
&lt;td&gt;3.6 or later&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;express npm module&lt;/td&gt;
&lt;td&gt;^4.17.1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;npm list express&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mongoose npm module&lt;/td&gt;
&lt;td&gt;^5.12.7&lt;/td&gt;
&lt;td&gt;&lt;code&gt;npm list mongoose&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#set-up-the-workspace"&gt;
  &lt;/a&gt;
  Set up the workspace &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#start-the-project"&gt;
  &lt;/a&gt;
  Start the project
&lt;/h2&gt;

&lt;p&gt;In this tutorial, we will be creating a todo list application that will let us create, read, update and delete tasks.&lt;/p&gt;

&lt;p&gt;Before we begin, make sure you have &lt;a href="https://nodejs.org/en/download"&gt;Node.js&lt;/a&gt; installed, mongoDB Atlas instance working and &lt;a href="https://www.postman.com/downloads/"&gt;Postman&lt;/a&gt; ready for the testing.&lt;/p&gt;

&lt;p&gt;Now, open a terminal window (or CMD, on Windows) in a preferred location or use the following command to create a folder and set it as a workspace:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir ./todo-list-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd ./todo-list-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, it's time to start our application by typing the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What it basically does is create a file named &lt;code&gt;package.json&lt;/code&gt; that contains all the information about our project and its dependencies.&lt;/p&gt;

&lt;p&gt;the &lt;code&gt;-y&lt;/code&gt; parameter lets me skip filling informations about my project since I could modify these later in the &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-necessary-folders-and-files"&gt;
  &lt;/a&gt;
  Create necessary folders and files
&lt;/h2&gt;

&lt;p&gt;Now, let's create the file that will contain our server script, we'll be naming it &lt;code&gt;index.js&lt;/code&gt; since that's the default name (other conventional names can be &lt;code&gt;app.js&lt;/code&gt; or &lt;code&gt;server.js&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;In the command line, type the command that will create a new empty file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ touch ./index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's add some folders and files via the following commands:&lt;/p&gt;

&lt;p&gt;Create a folder named "api" &lt;code&gt;$ mkdir api&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create three separate folders "models", "routes", and "controllers" inside the "api" folder &lt;code&gt;$ mkdir api/controllers api/models api/routes&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create the empty files "controller.js", "routes.js" and "model.js" inside their respective folders "controller", "routes", and "model" &lt;code&gt;$ touch ./api/controllers/controller.js ./api/models/model.js ./api/routes/routes.js&lt;/code&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#set-up-the-database"&gt;
  &lt;/a&gt;
  Set up the database &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Now that we have our server ready, let's set up a database.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install mongoose module&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;mongoose will be used to manage our MongoDB Atlas instance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm install mongoose --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Define a schema&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Open the file "model.js" and type the following code and then save it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// model.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;taskSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Enter the name of the task&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;date_created&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;enum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pending&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ongoing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;completed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}],&lt;/span&gt;
    &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pending&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tasks&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;taskSchema&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above, we imported the mongoose module into our file and we created a model that defines the structure of our mongoDB collection.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#set-up-the-routes"&gt;
  &lt;/a&gt;
  Set up the routes &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;In Express, routing instructs the sever on how to respond to client request for a specific endpoint (URI) and a specific HTTP request method.&lt;/p&gt;

&lt;p&gt;To do this, open the file "routes.js" and type the following code and then save it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// routes.js&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todoList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../controllers/controller.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/tasks&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listTasks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTask&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/tasks/:taskId&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readTask&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateTask&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteTask&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above, we defined two basic routes : "/tasks" and "/tasks/:taskId" with different methods; "/tasks" has the methods "GET" and "POST", while "/tasks/:taskId" has "GET", "PUT" and "DELETE".&lt;br&gt;
As you can see, we also required the controller so each of the routes methods can call its respective handler function.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#set-up-the-controller"&gt;
  &lt;/a&gt;
  Set up the controller
&lt;/h1&gt;

&lt;p&gt;open the file "controller.js" and type the following code and then save it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// controller.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tasks&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listTasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;new_task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;new_task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readTask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;taskId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateTask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOneAndUpdate&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;taskId&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;new&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteTask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;taskId&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Task deleted&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above, we defined 5 different functions for different actions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;listTasks&lt;/code&gt; lists our tasks;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;createTask&lt;/code&gt; creates a new task;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;readTask&lt;/code&gt; reads the content of a task;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;updateTask&lt;/code&gt; updates the content of a task;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;deleteTask&lt;/code&gt; deletes a task.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these functions is exported in order to be used in our routes.&lt;/p&gt;

&lt;p&gt;Note that each of these functions uses different mongoose methods such as find, findById, save, findOneAndUpdate and deleteOne.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#set-up-the-server"&gt;
  &lt;/a&gt;
  Set up the server &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;In this section, we will be connecting our &lt;code&gt;controller.js&lt;/code&gt;, database, the created models, body parser and the routes together and at the end, we will run our server and test it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install express module&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Express will be used to create the server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm install express --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Start the server &lt;a&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Open the file "index.js" and follow the steps.&lt;/p&gt;

&lt;p&gt;Essentially, what we will be doing is&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Connect our database by adding a url to the mongoose instance connection (you can learn how to set up one by following &lt;a href="https://docs.atlas.mongodb.com/tutorial/connect-to-your-cluster/#connect-to-your-atlas-cluster"&gt;this article&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;Load the created model - task;&lt;/li&gt;
&lt;li&gt;Register our created routes in the server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, type the following code inside the file &lt;code&gt;index.js&lt;/code&gt; and save it.&lt;br&gt;
Note : Don't forget to replace the string in &lt;code&gt;connectionUrl&lt;/code&gt; variable with your Atlas connection string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./api/models/model.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;

&lt;span class="c1"&gt;// mongoose instance connection url connection&lt;/span&gt;
&lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Replace the following with your Atlas connection string                                                                                                                                        &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connectionUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mongodb+srv://&amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;clusterName&amp;gt;.mongodb.net/&amp;lt;databaseName&amp;gt;?retryWrites=true&amp;amp;w=majority&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connectionUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="na"&gt;useNewUrlParser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;useFindAndModify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;useUnifiedTopology&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;useCreateIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; 
  &lt;span class="p"&gt;});&lt;/span&gt; 

&lt;span class="c1"&gt;//import routes&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./api/routes/routes.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

&lt;span class="c1"&gt;//register the route&lt;/span&gt;
&lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`RESTful API server running on &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, back to the terminal and type &lt;code&gt;$ node ./index.js&lt;/code&gt; and if everything is fine, you'll see the message &lt;strong&gt;"RESTful API server running on 3000"&lt;/strong&gt; printed to the console.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#test-the-api"&gt;
  &lt;/a&gt;
  Test the API &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Now that everything is connected, let’s test some of our routes with the the registered methods.&lt;/p&gt;

&lt;p&gt;Launch Postman or use the &lt;a href="https://web.postman.co/home"&gt;web-based version&lt;/a&gt; (you'll need to set up an account, it's free).&lt;/p&gt;

&lt;p&gt;In Postman, we will test our routes by making requests to their respective endpoints&lt;/p&gt;

&lt;p&gt;Since there are no tasks nor tasklists in our database yet, get requests will return an empty array (&lt;code&gt;[]&lt;/code&gt;) from the server. So the first thing we can do is create a task.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-task"&gt;
  &lt;/a&gt;
  Create a task
&lt;/h2&gt;

&lt;p&gt;In order to create a new task, let's make a &lt;code&gt;POST&lt;/code&gt; request to the following &lt;code&gt;http://localhost:3000/tasks&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f9kyDKy3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t8eejpf1rv3so8yh6pk6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f9kyDKy3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t8eejpf1rv3so8yh6pk6.png" alt="Create task in Postman"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;if you can't use Postman for some reason, you can always use the command line tool "curl".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ curl --data-urlencode 'name=Do homework' http://localhost:3000/tasks
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#delete-a-task"&gt;
  &lt;/a&gt;
  Delete a task
&lt;/h2&gt;

&lt;p&gt;Now let's try to delete the task we have just created, in order to do that, let's make a &lt;code&gt;DELETE&lt;/code&gt; request to the following &lt;code&gt;http://localhost:3000/tasks/&amp;lt;taskId&amp;gt;&lt;/code&gt;&lt;br&gt;
Note that we have to replace the &lt;code&gt;:taskId&lt;/code&gt; placeholder with the task identified &lt;code&gt;_id&lt;/code&gt; we received from the last request. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ENbFQBWE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2rndv010xtp6bxq0dbp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ENbFQBWE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2rndv010xtp6bxq0dbp.png" alt="Delete task in Postman"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again, if you can't use Postman, use the command line tool "curl".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ curl -X DELETE "http://localhost/&amp;lt;taskId&amp;gt;"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Congrats! you made a functioning RESTful API&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final words &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Don't hesitate to leave any questions you may have for me in the comments. I'll be pleased to reply and subscribe for more interesting content like this one.&lt;/p&gt;

</description>
      <category>node</category>
      <category>rest</category>
      <category>api</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>Build a Simple Game to Practice Drag Clicking | Minecraft | HTML | CSS | JAVASCRIPT</title>
      <author>devko</author>
      <pubDate>Sun, 09 May 2021 11:21:21 +0000</pubDate>
      <link>https://dev.to/devko/build-a-simple-game-to-practice-drag-clicking-minecraft-html-css-javascript-448c</link>
      <guid>https://dev.to/devko/build-a-simple-game-to-practice-drag-clicking-minecraft-html-css-javascript-448c</guid>
      <description>&lt;p&gt;Drag clicking is one of the most commonly used techniques by the Minecraft gaming community.  Unlike the traditional clicking, this technique helps to get an immense amount of clicks which can lead you so far in the Minecraft game. In simple words, if you want to dominate in Minecraft PVP game mode, you need to be good at clicking with your mouse. This simple &lt;a href="https://joltfly.com/drag-click-test/"&gt;Drag Clicking Test&lt;/a&gt; allows the users to test how good they are at drag clicking and enables them to get to know about their standings. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rules-of-this-game"&gt;
  &lt;/a&gt;
  Rules of this Game
&lt;/h2&gt;

&lt;p&gt;This game is simple and easy to use there are no complex rules, to be honest. You just have to use your mouse to perform drag clicking on this game which will eventually get you results there are few limitations in this games such as:&lt;br&gt;
Users can select a time limit ranging from 1 second up to 10 seconds.&lt;br&gt;
Users have to click on the dedicated area in order to get their clicks registered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-of-this-game"&gt;
  &lt;/a&gt;
  Features of this Game
&lt;/h2&gt;

&lt;p&gt;There are plenty of features that make this game stand out one of the Core features of this game is that it is quite simple and easy to use anybody can simply use it without any hassle some of the key features are listed below:&lt;br&gt;
It shows the remaining time.&lt;br&gt;
If it shows the real-time CPS score.&lt;br&gt;
Users can opt for light and dark modes as per their comfort level. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-video-guide-to-drag-clicking"&gt;
  &lt;/a&gt;
  A Video Guide to Drag Clicking
&lt;/h3&gt;

&lt;p&gt;If you are relatively new to drag clicking or you are not that much familiar with drag clicking or simply you want to know how to perform drag clicks while aiming in a better or most efficient way you can follow &lt;a href="https://www.youtube.com/watch?v=LFM5jF5gIQI"&gt; this video link &lt;/a&gt;to a YouTube video further enhance your skills to reach the god level OR simply follow &lt;a href="https://www.youtube.com/watch?v=zzM7S9hMeJUI"&gt; this video &lt;/a&gt; to learn basic drag clicking on any mouse.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#complete-source-code-of-this-game"&gt;
  &lt;/a&gt;
  Complete Source Code of this Game
&lt;/h2&gt;

&lt;p&gt;Here is a complete source code of the drag click test game  don't just copy this game and use it as per your requirements but I will encourage you guys to take this project as a starter and amend it as per your needs and your vacation in order to excel in your programming skills. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"click"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"textDiv"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"cps"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"timeRemaining"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"clickCount"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"allTime"&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"Double click to reset"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"slider-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"time"&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"timeSlider"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"range"&lt;/span&gt; &lt;span class="na"&gt;min=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"10"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"timeSlider"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"darkTheme"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"darkTheme"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Dark Theme&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--bg-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--text-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--click-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;235&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;235&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;235&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;--shadow-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;190&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;190&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;190&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--bg-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--text-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nf"&gt;#click&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--click-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;80vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--shadow-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#click&lt;/span&gt;&lt;span class="nc"&gt;.play-again&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Click me to play again!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#click&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;-1px&lt;/span&gt; &lt;span class="m"&gt;-1px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--shadow-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#click&lt;/span&gt;&lt;span class="nd"&gt;:active::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#click&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Click Me!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;35vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;80vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#textDiv&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1.2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;20vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#clickCount&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Total Clicks: "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#cps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#cps&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;" cps"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.6em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#timeRemaining&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Time Remaining: "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#slider-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#timeSlider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#time&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;" seconds"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.single&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;" second"&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#time&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;10%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;vertical-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;middle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nf"&gt;#allTime&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"All Time: "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;




&lt;span class="c"&gt;/* Input type=range styles from range.css */&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;range&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7.1px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-appearance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;range&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;range&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;::-webkit-slider-runnable-track&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#27466b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5.4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10.8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;range&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;::-webkit-slider-thumb&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-7.1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;83&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.93&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.9px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#1812ff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;29px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-appearance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;range&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:focus::-webkit-slider-runnable-track&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2e527e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;range&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;::-moz-range-track&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#27466b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5.4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10.8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;range&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;::-moz-range-thumb&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;83&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.93&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.9px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#1812ff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;29px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;range&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;::-ms-track&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8.9px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10.8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;range&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;::-ms-fill-lower&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#203a58&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10.8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;range&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;::-ms-fill-upper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#27466b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10.8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;range&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;::-ms-thumb&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;83&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.93&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.9px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#1812ff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;29px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/*Needed to keep the Edge thumb centred*/&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;range&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:focus::-ms-fill-lower&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#27466b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;range&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:focus::-ms-fill-upper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2e527e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/*TODO: Use one of the selectors from https://stackoverflow.com/a/20541859/7077589 and figure out
how to remove the virtical space around the range input in IE*/&lt;/span&gt;
&lt;span class="k"&gt;@supports&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;-ms-ime-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Pre-Chromium Edge only styles, selector taken from hhttps://stackoverflow.com/a/32202953/7077589 */&lt;/span&gt;
  &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;range&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c"&gt;/*Edge starts the margin from the thumb, not the track as other browsers do*/&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JAVASCRIPT
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;click&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clickCountP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;clickCount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;clickCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cps&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;timeRemaining&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;timeRemaining&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;timeSlider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;timeSlider&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;timeText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;time&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;timeSlider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;oninput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;timeText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;timeSlider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;timeSlider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;timeText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;single&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timeText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;single&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;timeText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;single&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;timeSlider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;startTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;allTime&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;allTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ondblclick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;all-time&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;updateAllTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateAllTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newScore&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newScore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;all-time&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newScore&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;all-time&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;all-time&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newScore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;allTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;all-time&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;updateAllTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;showClicks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;clickCountP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;clickCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;showClicks&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;elapsed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;startTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elapsed&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;cps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;clickCount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;elapsed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;timeRemaining&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;elapsed&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animFunc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nx"&gt;cps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;clickCount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nx"&gt;timeRemaining&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nx"&gt;updateAllTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
     &lt;span class="nx"&gt;cps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Result: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;cps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nx"&gt;startTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;play-again&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;     
     &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clickHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;startTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;startTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
     &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animFunc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="nx"&gt;clickCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;play-again&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="nx"&gt;clickCount&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nx"&gt;showClicks&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mousedown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;clickHandler&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;contextmenu&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;clickHandler&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;darkTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;darkTheme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isDarkTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark-theme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;darkThemeIfy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isDarkTheme&lt;/span&gt;&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;span class="nx"&gt;darkTheme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isDarkTheme&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;darkTheme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;oninput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;darkThemeIfy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;darkThemeIfy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;--bg-color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;--text-color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;--click-color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rgb(180,180,180)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;--shadow-color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark-theme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;--bg-color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;--click-color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;--text-color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;--shadow-color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark-theme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;false&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>React Hooks Part 1 - Understanding useState and useEffect Hooks</title>
      <author>The Nerdy Dev</author>
      <pubDate>Sun, 09 May 2021 10:56:28 +0000</pubDate>
      <link>https://dev.to/thenerdydev/react-hooks-part-1-understanding-usestate-and-useeffect-hooks-1k6f</link>
      <guid>https://dev.to/thenerdydev/react-hooks-part-1-understanding-usestate-and-useeffect-hooks-1k6f</guid>
      <description>&lt;p&gt;Hey everyone 👋🏻,&lt;/p&gt;

&lt;p&gt;In this article, let us discuss about React Hooks. So this is first part of the React Hooks series where we will cover 2 React Hooks in great depth - the &lt;strong&gt;useState&lt;/strong&gt; and the &lt;strong&gt;useEffect&lt;/strong&gt; hooks. So let us first understand what actually are these React Hooks. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-react-hooks-"&gt;
  &lt;/a&gt;
  What are React Hooks ?
&lt;/h2&gt;

&lt;p&gt;React Hooks are typically JavaScript functions that let you HOOK into React State and Lifecycle methods provided by React. They let us use state and other React features without having us to write a class. React ships with a couple of built-in hooks like &lt;strong&gt;useState&lt;/strong&gt;, &lt;strong&gt;useEffect&lt;/strong&gt;, &lt;strong&gt;useContext&lt;/strong&gt;, &lt;strong&gt;useReducer&lt;/strong&gt; and more and you can even create your own custom hook which we will see in a separate article. &lt;/p&gt;

&lt;p&gt;In this article, we will go over the following React Hooks: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;useState&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;useEffect&lt;/strong&gt; &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But before that let us understand the rules that we as developers should abide by while working with React Hooks. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rules-of-hooks-"&gt;
  &lt;/a&gt;
  RULES OF HOOKS :
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Only call React Hooks in React functions&lt;/strong&gt;. That means in react component functions. You can also call
React Hooks in custom hooks that you create.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Only call React Hooks at the top level&lt;/strong&gt; -
Don't call them in nested functions.
Don't call them in any block statements.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With that out of the way, let us understand each of the above 4 hooks one by one : &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usestate"&gt;
  &lt;/a&gt;
  useState
&lt;/h2&gt;

&lt;p&gt;If you want to want to use state in a functional component, then we can leverage the &lt;strong&gt;useState&lt;/strong&gt; React Hook for that. It is quite easy to use the &lt;strong&gt;useState&lt;/strong&gt; React Hook. The very first step is to import the &lt;strong&gt;useState&lt;/strong&gt; Hook from React at the top of your component file. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Flwn_L70--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27pp9f0q317u0nh9r4r0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Flwn_L70--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27pp9f0q317u0nh9r4r0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now the &lt;em&gt;SYNTAX&lt;/em&gt; of the &lt;strong&gt;useState&lt;/strong&gt; function is something like this : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c1egsFsl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dd3d94p7tnou92b1q65.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1egsFsl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dd3d94p7tnou92b1q65.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So here we are using array destructuring to pull out the two arguments that &lt;strong&gt;useState&lt;/strong&gt; spits. First it gives us the current &lt;strong&gt;state&lt;/strong&gt; value and the second one is the &lt;strong&gt;state updating function&lt;/strong&gt; using which we can update our &lt;strong&gt;state&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let us understand the &lt;strong&gt;useState&lt;/strong&gt; hook with the help of the below example : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HUeNPeJO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oayve0uhu1vjzcbc3w4f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HUeNPeJO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oayve0uhu1vjzcbc3w4f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above example, all we have is a &lt;strong&gt;ThingsList&lt;/strong&gt; Component where we have a form using which we can add a new thing to our list of things. So here we have defined two pieces of state - one is the things where we manage our list of things and we have given it an initial value to [], second we have the thing piece of state that is used to collect the generated state from the form. So in the above example, the form element generates some piece of state and it is this state that we want to commit to our component states so that we always have the latest state snapshots. &lt;br&gt;
Also after form submission, we reset our form state back to empty quotes and our new thing is now a part of the things list. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#useeffect"&gt;
  &lt;/a&gt;
  useEffect
&lt;/h2&gt;

&lt;p&gt;To understand the &lt;strong&gt;useEffect&lt;/strong&gt; React Hook, we first need to understand about the Side Effects. &lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#what-are-side-effects-"&gt;
  &lt;/a&gt;
  What are Side Effects ?
&lt;/h1&gt;

&lt;p&gt;From our knowledge of React, we know that our React App has one main role : render the UI and react to user input to re-render the UI when it is needed. &lt;br&gt;
So React evaluates and renders JSX, manages state and props, re-evaluates the component upon changes in state and props. This is all possible because of the reactivity system of React and the features that React ships with. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#side-effects"&gt;
  &lt;/a&gt;
  Side Effects
&lt;/h2&gt;

&lt;p&gt;Side Effects are anything else that might be happening in your application. It could be some HTTP request that you make, storing something in the localStorage, setting and managing timers. &lt;br&gt;
Now the main thing to emphasize here is that these tasks (which we termed as side effects) must happen outside of the normal component evaluation and render cycle and the reason for that is that these side effects might block or delay the rendering process. &lt;/p&gt;

&lt;p&gt;So next let us see how we can handle these side effects using the &lt;strong&gt;useEffect&lt;/strong&gt; Hook.&lt;br&gt;
So the very first step is to import the &lt;strong&gt;useEffect&lt;/strong&gt; Hook at the top of your component file. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X5pgWqQ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4cmfcrkum9rg0c4lqbf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X5pgWqQ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4cmfcrkum9rg0c4lqbf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;useEffect&lt;/strong&gt; Hook is simply another built in hook. Let us see the basic structure of a &lt;strong&gt;useEffect&lt;/strong&gt; hook &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5C52L-BP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34nl11k1mr8cl7u3v6ti.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5C52L-BP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34nl11k1mr8cl7u3v6ti.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first argument to &lt;strong&gt;useEffect&lt;/strong&gt; is a function that should be executed AFTER every component evaluation if there is a change in the specified list of dependencies&lt;/p&gt;

&lt;p&gt;The second argument is the list of dependencies which are the specific dependencies of this effect - the function only runs if there is a change in these dependencies. So whenever such a dependency changes, the function that gets passed as the first argument to &lt;strong&gt;useEffect&lt;/strong&gt; Hook will re-run. Therefore in that first function you can put any side effect code and that code will then only execute when there is a change in the specified dependencies and not when the component re-renders.&lt;/p&gt;

&lt;p&gt;You should add everything that you use in the effect function as a dependency i.e all the state variables and the functions you use in there. &lt;/p&gt;

&lt;p&gt;That is of course correct, but there are a few exceptions that you should be aware of  : &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;DON'T&lt;/strong&gt; &lt;em&gt;add state updating functions to the list of dependencies because ultimately these are functions that will never change&lt;/em&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;DON'T&lt;/strong&gt; &lt;em&gt;add built-in APIs or functions like fetch, localStorage, browser APIs because they by any means are not related to the React Component Render Cycle and they also never change. So it does not make sense to put them into the list of dependencies if they are not bound to change&lt;/em&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;DON'T&lt;/strong&gt; &lt;em&gt;add variables or functions that you might have defined outside of your components because even if they change they are not going to cause a re-evaluation of your components&lt;/em&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let us see a very simple example to understand this : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UfVAetOq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gc3zbfp0759i6shi8pih.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UfVAetOq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gc3zbfp0759i6shi8pih.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example : &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;isTimerActive&lt;/strong&gt; is added as a dependency because it's in the component state that may change when the component changes (e.g because the state was updated)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;duration&lt;/strong&gt; is added as a dependency because we are receiving it as prop on our Timer component - so it may change if a parent component changes that value (causing this Timer component to re-render as well)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;setIsTimerActive&lt;/strong&gt; is NOT added as a dependency because it is a state updating function. I just mentioned a while back that state updating functions don't have to be added since it is guaranteed that these functions will never change. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aTimer&lt;/strong&gt; is NOT added as a dependency for the simple reason that it is defined outside the component and hence changing it (no matter where) wouldn't cause the component re-evaluation. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;setTimeout&lt;/strong&gt; is NOT added as a dependency because it's a built-in Browser API -it is independent from React and your components and it does not change as well. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#useeffect-for-cleanup"&gt;
  &lt;/a&gt;
  useEffect for cleanup
&lt;/h2&gt;

&lt;p&gt;Sometimes we may need an effect for performing cleanup tasks. So what we do in this case is that we return a cleanup function which React ultimately executes to perform the cleanup task (see the structure of &lt;strong&gt;useEffect&lt;/strong&gt; shown above).&lt;/p&gt;

&lt;p&gt;Now before the execution of the &lt;strong&gt;useEffect&lt;/strong&gt; function, except for the very first time when it runs, this cleanup will run. In addition, the cleanup function will also get executed when the component you're specifying the effect in unmounts from the DOM. &lt;br&gt;
So the cleanup function would run before every new side effect function execution and before the component is removed. &lt;/p&gt;

&lt;p&gt;So this is it for the very first part of React Hooks. In the next article, we will learn about other React Hooks. So stay tuned ! &lt;/p&gt;

&lt;p&gt;If you are looking to learn Web Development, I have curated a &lt;strong&gt;FREE&lt;/strong&gt; course for you on my YouTube Channel, check the below article :&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Apr 28 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;If you have spare 2 hours, then utilize them by creating these &lt;strong&gt;10 JavaScript Projects in under 2 Hours&lt;/strong&gt; &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/10-javascript-projects-in-2-hours-3p1c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;10 JavaScript Projects in 2 Hours&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Oct 26 '20 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;👉🏻 Follow me on Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;👉🏻 Check out my YouTube Channel : &lt;a href="https://youtube.com/thenerdydev"&gt;https://youtube.com/thenerdydev&lt;/a&gt; &lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Basics of Java #8</title>
      <author>Chathu Rashmini</author>
      <pubDate>Sun, 09 May 2021 10:50:29 +0000</pubDate>
      <link>https://dev.to/chathurashmini/basics-of-java-8-2if4</link>
      <guid>https://dev.to/chathurashmini/basics-of-java-8-2if4</guid>
      <description>&lt;p&gt;We are in the 8th article of this series. We are going to learn more and more facts about Java in this article as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#constants"&gt;
  &lt;/a&gt;
  Constants
&lt;/h2&gt;

&lt;p&gt;A constant is a data item where its value does not change during the execution of the program. Sometimes you may want your variables to have constant values. For example if you are handling a system related to an educational institution, the fee for a particular course is a constant. So you should not allow it to be changed during the execution of the program. To do this you have to declare the variable as follows;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="no"&gt;FEES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;150_000&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;'final' is a keyword in java which makes the program know that this value should not be changed. Try the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="no"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.14&lt;/span&gt;&lt;span class="no"&gt;F&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="no"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;4.01&lt;/span&gt;&lt;span class="no"&gt;F&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PI&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will encounter an error saying that &lt;em&gt;'cannot assign a value to final variable PI'&lt;/em&gt;. So when you declare a variable as &lt;code&gt;final&lt;/code&gt; it becomes immutable.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Usually we use Capital Letters to name constants :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#arithmetic-expressions"&gt;
  &lt;/a&gt;
  Arithmetic Expressions
&lt;/h2&gt;

&lt;p&gt;You can perform arithmetic operations like additions, subtraction, multiplication, division etc. in java as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code will add '10' and '3' and store '13' in the variable &lt;code&gt;number&lt;/code&gt;. After that another 10 is added to the same variable and stored in itself. Now its value is '23'. Likewise you can perform other arithmetic operations as well.&lt;/p&gt;

&lt;p&gt;Run the below code and see the output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may get '3.0' as the output. But you know it has to be something like 3.333... So how can you get the accurate answer?&lt;br&gt;
For that you need to tell java that not only the &lt;code&gt;div&lt;/code&gt; variable but also 10 and 3 are of type &lt;code&gt;double&lt;/code&gt;. So how can we say it? Look at the below code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you run above code it will print '3.3333333333333335' as the output. So what you have done is type casting an integer to a double. We will talk about casting in detail in future tutorials.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h3&gt;

&lt;p&gt;Check whether the operations '(double) 10 / (double) 3' and '(double)(10/3)' give the same output. If not reason why they do not.&lt;/p&gt;

&lt;p&gt;If you want to increment or decrement the value of a variable by '1' then there's an easy way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;251&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;--;&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here first &lt;code&gt;println&lt;/code&gt; line will print 251 and the second one will print '252' by adding 1 to 'x'. Now the value of 'x' is 252, so when you do &lt;code&gt;x--&lt;/code&gt; the answer is 251 because it substract 1 from '252'. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h3&gt;

&lt;p&gt;Go through the following code and guess the output before running the program. Try to understand the different between your guessing and the output if there aren't the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.company&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;251&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#order-of-operators"&gt;
  &lt;/a&gt;
  Order of Operators
&lt;/h1&gt;

&lt;p&gt;There is a precedence level given for each and every operator. According to that level the order that we have to perform a particular operation is evaluated. This is just like in Mathematics. If we are given an expression like 'y = 3+(4+6)*2' we know that the answer is 'y = 23'. That is because order of an expression is evaluated according to the rule BODMAS in math.&lt;/p&gt;

&lt;p&gt;The precedence and the associativity of operators in java is given by the table below.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Precedence&lt;/th&gt;
&lt;th&gt;Associativity&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;++ --&lt;/td&gt;
&lt;td&gt;left to right&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+ - ~ !&lt;/td&gt;
&lt;td&gt;right to left&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;* / %&lt;/td&gt;
&lt;td&gt;left to right&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+ -&lt;/td&gt;
&lt;td&gt;left to right&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&amp;lt; &amp;gt;&amp;gt; &amp;lt;&amp;lt;&amp;lt;&lt;/td&gt;
&lt;td&gt;left to right&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt; &amp;gt; &amp;lt;= &amp;gt;=&lt;/td&gt;
&lt;td&gt;left to right&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;== !=&lt;/td&gt;
&lt;td&gt;left to right&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h3&gt;

&lt;p&gt;Guess the output of the below code before running the program and evaluate the output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.company&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are eager to learn about casting and type conversion in java, you will find the next article useful :)&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>WhatsApp Clone (Backend &amp; FrontEnd)</title>
      <author>Balram Rathore</author>
      <pubDate>Sun, 09 May 2021 10:32:37 +0000</pubDate>
      <link>https://dev.to/devstack06/whatsapp-clone-backend-frontend-254b</link>
      <guid>https://dev.to/devstack06/whatsapp-clone-backend-frontend-254b</guid>
      <description>&lt;p&gt;Hi guys, I created the WhatsApp Clone using Flutter. Please check out the screenshots of the app &amp;amp; source code in my GitHub -&lt;a href="https://github.com/DevStack06/Whatsapp-Clone-Flutter"&gt;https://github.com/DevStack06/Whatsapp-Clone-Flutter&lt;/a&gt; And please do star the repo if you liked it!!&lt;/p&gt;

&lt;p&gt;You can also check the Youtube Playlist, which will cover both Front-End and Backend Development: &lt;a href="https://youtube.com/playlist?list=PLtIU0BH0pkKovuEaNsrGE_Xd5Tz3m1zeC"&gt;https://youtube.com/playlist?list=PLtIU0BH0pkKovuEaNsrGE_Xd5Tz3m1zeC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Any suggestions are warmly welcomed, and it is open source so feel free to contribute ✌️✌️✌️.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lqRC3MnB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06663si6zj6louvdksh9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lqRC3MnB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06663si6zj6louvdksh9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>node</category>
    </item>
    <item>
      <title>Mastering JavaScript Destructuring
</title>
      <author>Kinanee Samson</author>
      <pubDate>Sun, 09 May 2021 10:31:21 +0000</pubDate>
      <link>https://dev.to/kalashin1/mastering-javascript-destructuring-10mb</link>
      <guid>https://dev.to/kalashin1/mastering-javascript-destructuring-10mb</guid>
      <description>&lt;p&gt;Good day guys, in this article we are going to be talking in detail about destructuring in JavaScript. By the way, what the heck is destructuring? Destructuring is just a fancy word for used to describe the process of unpacking values from an array or object into variables. Destructuring is a cool feature of ES6 flavour of JavaScript and you might have seen this been used a lot. If you always wondered what this means or how to use it in your code then worry no more because by the end of this article, you will have gained a basic understanding of how destructuring works in JavaScript and you will be able to use it in your code, destructuring your objects and arrays like a god. If you already know a lot about destructuring then feel free to leave a comment or two that will further clarify the subject in areas I did not. Well then let's dive in.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-destructuring"&gt;
  &lt;/a&gt;
  What is Destructuring?
&lt;/h3&gt;

&lt;p&gt;Like we said earlier, destructuring is the process of unpacking values from an object or an array into distinct variables. Destructuring was introduced into JavaScript with the syntax upgrade that came with ECMA Script 6 to JavaScript and what destructuring does is to eliminate the boring and repetitive process of calling object name and then the key multiple times when we want to extract the values inside the object or in an array. Here is a clearer picture of what i mean, before Destructuring we used to extract the properties of an object or an array like this;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;johndoe@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;


&lt;span class="c1"&gt;// or &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;superman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;batman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cyborg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aquaman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;superman&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;batman&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This was the standard old way of obtaining the keys inside an object or the values stored inside an array. This method of doing things is quite fine but there is some drawbacks associated with it. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have to repeat the object name or the array name anytime we want to extract a key or value from it and this can lead to potential typos.&lt;/li&gt;
&lt;li&gt;This also takes up unnecessary lines in our code, bloating and elongating our code for no reason.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To address this, destructuring was introduced, and the rest is like magic. What would have taken up like  4 to five lines can now take only one line, keeping our code short and clean. There are two types of destructuring; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Array destructuring&lt;/li&gt;
&lt;li&gt;Object destructuring&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#array-destructuring"&gt;
  &lt;/a&gt;
  Array Destructuring
&lt;/h3&gt;

&lt;p&gt;Let us get our hands dirty with array destructuring, we can use this method to assign values to variables in our code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1, 2, 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that is it, we have successfully destructured the array above, what we would have done in like three lines of code is now done with only one, to destructure an array we simply wrap the variable we would like to hold the values that are inside the array we are destructuring in square brackets. Just like we did above. One thing to take note is that the values inside the array will be destructured into the variables based on how we arrange them when use the destructuring syntax, this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;

&lt;span class="c1"&gt;// num1 = arr[0]&lt;/span&gt;
&lt;span class="c1"&gt;// num2 = arr[1]&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1, 2, 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Incase you missed it, this way of destructring is called &lt;strong&gt;assingment destructuring&lt;/strong&gt;. In the above example we are assuming that the array will only hold 3 values, one cool thing about destructuring is that we can destructure the array to only just what we need from it and forget about the rest.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//1 , 2, 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also skip one item and go on to the next, or skip multiple item. We simply use a comma without any variable before it to skip that particular value if we are not too interested in obtaining that value from the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//1 , 2, 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also create an array from the remaining the values we did not destructure, we use the spread syntax to achieve this. It takes whatever is left of the array that we did not destructure into a new array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;

&lt;span class="c1"&gt;// puts the rest of arr into rest&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;// 1, 2, [3, 4, 5, 6, 7]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also use array destructuring to swap the values of variables, ordinary without destructuring we would need a third variable and many unnecessary lines of code, but destructuring eliminates all this problems.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1, 2&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 2, 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we have a function that accepts many parameters we can simply rewrite it to accept only one parameter which will be an array, we can then destructure the array to obtain the values we need, we can also use it when we want to extract multiple values returned from a function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// original function without destructuring&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;param3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;param4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// do something with param1, param2, param3, param4&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;param3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;param4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// using destructuring&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;param3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;param4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;param3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;param4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// dealing with functions that returns multiple values&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;returnManyStuffs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arg&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_val&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setVal&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;returnManyStuffs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What if you want to destructure something that's undefined?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#object-destructuring"&gt;
  &lt;/a&gt;
  Object Destructuring
&lt;/h3&gt;

&lt;p&gt;We can do assignment destructuring with objects much like we did with arrays&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;maths&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;creditUnit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lecturer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mr Smart&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;creditUnit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lecturer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;creditUnit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lecturer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// maths, 2, mr Smart&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One thing with object destructuring, the name of the variable should match the name of the key we are trying to destructure on the object. But sometimes that might throw an error in our code because we might already have a variable with that name, we want to destructure a key on the object but we want to call it something else.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;maths&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;creditUnit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lecturer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mr Smart&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;subjectName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;creditUnit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lecturer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;subjectName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;creditUnit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lecturer&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// maths, 2, mr Smart&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also pack the rest properties on the object into another object like we did with the array&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;maths&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;creditUnit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lecturer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mr Smart&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;materials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;textBook&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;intro to maths&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;graphBook&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;some graph&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;creditUnit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;others&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;creditUnit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;others&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// maths, 2, { lecturer: 'mr Smart', materials: { textBook: 'intro to maths', graphBook: 'some graph'}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also rewrite our function to accepts objects and destructure the object inside the function, we can also return multiple values from a function using objects and we can destructure that return value to get just what we want.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;val1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;val2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;val3&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;
    &lt;span class="c1"&gt;// do something with val1, val2, val3&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeObj&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;coding&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;job&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;makeObj&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// foo coding&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also provide default values incase we are trying to destructure something that's undefined on the object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;coding&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// john, 25, coding&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#deep-structuring"&gt;
  &lt;/a&gt;
  Deep Structuring
&lt;/h3&gt;

&lt;p&gt;You can also destructure deeply nested objects and arrays, let's see how we can destructure this big object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;club&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;liverpool&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;england&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;coach&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jurgen klopp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;stadium&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;anfield&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mersyside&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;squad&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;captain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jordan henderson&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;goalies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;becker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;adrian&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="na"&gt;stadium&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;stadiumName&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;squad&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;captain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;goalies&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;club&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;stadiumName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;captain&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// anfield, jordan henderson, ['becker', 'adrian']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it for this article, i hope you found this useful, feel free to leave a comment below and like the post. You can read more about destructuring &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"&gt;here&lt;/a&gt; or if you prefer to watch a video you can head &lt;a href="https://youtu.be/UgEaJBz3bjY"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to make your footer stay at the bottom the page.</title>
      <author>Ineza Bonté Grévy</author>
      <pubDate>Sun, 09 May 2021 10:30:28 +0000</pubDate>
      <link>https://dev.to/inezabonte/how-to-make-footer-stay-at-the-bottom-298b</link>
      <guid>https://dev.to/inezabonte/how-to-make-footer-stay-at-the-bottom-298b</guid>
      <description>&lt;p&gt;I recently met an issue with positioning a footer. After finding a solution, I decided to document it in this post.&lt;/p&gt;

&lt;p&gt;Our goal is to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make the footer stay at the bottom even when the content is not filling the page&lt;/li&gt;
&lt;li&gt;Make the footer appear last when the user scrolls to at the bottom (When we have more content)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Prerequisites:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Have basic knowledge in CSS&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#1-give-your-container-a-minheight-of-100vh"&gt;
  &lt;/a&gt;
  1. Give your container a min-height of 100vh
&lt;/h4&gt;

&lt;p&gt;The body tag which holds your content should be given a minimum height of 100vh. This will ensure that the body will always take full height of the page even when its content is not filling the page. You can apply this to the body or the container which has the footer as the last tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2-make-your-body-a-flexbox"&gt;
  &lt;/a&gt;
  2. Make your body a flexbox
&lt;/h4&gt;

&lt;p&gt;Make your body a flexbox by giving it a &lt;code&gt;display&lt;/code&gt; property with the value of &lt;code&gt;flex&lt;/code&gt; and also change its direction by using &lt;code&gt;flex-direction&lt;/code&gt; set to column&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-give-the-main-container-a-flex-value"&gt;
  &lt;/a&gt;
  3. Give the main container a flex value
&lt;/h3&gt;

&lt;p&gt;Assuming your body has a similar layout to this;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can give your main tag a &lt;code&gt;flex&lt;/code&gt; property with the value of &lt;code&gt;1&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it three simple steps :)&lt;/p&gt;

&lt;p&gt;Thank you for reading this article ♥️. Feel free to ask any questions you may have down below and I'll get back to you.&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Playing with JavaScript Objects</title>
      <author>Neha Soni</author>
      <pubDate>Sun, 09 May 2021 10:24:28 +0000</pubDate>
      <link>https://dev.to/nehasoni__/playing-with-javascript-objects-k4h</link>
      <guid>https://dev.to/nehasoni__/playing-with-javascript-objects-k4h</guid>
      <description>&lt;p&gt;Objects are the foundation of JavaScript. Everything except primitive data-types(null,undefined,numbers etc.) in JavaScript is an &lt;strong&gt;object&lt;/strong&gt;. So having a strong clench on this concept is very necessary.&lt;br&gt;
JavaScript objects include arrays, functions, constructors, and objects themselves.&lt;/p&gt;

&lt;p&gt;In this article, we are going to learn about objects.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#this-blog-post-will-cover"&gt;
  &lt;/a&gt;
  This Blog post will cover
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- What are objects?
- Properties of objects
      - Creation
      - Retrieving
      - Existence
      - Updation
      - Deletion
      - Iteration
      - Comparison
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Let's get started&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-are-objects"&gt;
  &lt;/a&gt;
  What are Objects?
&lt;/h2&gt;

&lt;p&gt;An object is a standalone entity with properties and values. The value of the property could de number, string, boolean, functions, arrays, and even another object.&lt;br&gt;
According to Mozilla developer's guide "&lt;code&gt;An object is a collection of properties, and a property is an association between a name (or key) and a value.&lt;/code&gt;" In simple terms, objects consist of some key-value pairs called Properties. These properties define objects' behavior and attributes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KyZYSxOR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619414003908/Ylm7XcwXZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KyZYSxOR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619414003908/Ylm7XcwXZ.png" alt="Screenshot (200).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above example, the &lt;strong&gt;Student&lt;/strong&gt; object has four properties describing it - ID, NAME, AGE, COURSES.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#properties-of-objects"&gt;
  &lt;/a&gt;
  Properties of objects
&lt;/h2&gt;

&lt;p&gt;In this article, we are going to play with objects by performing some operations on them:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Creation-&lt;/strong&gt; Creating an object&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Retrieving-&lt;/strong&gt; Accessing the Properties of an Object&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Existence-&lt;/strong&gt; Check whether the particular property exists or not&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Updation-&lt;/strong&gt; Updating the value of existing property&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Deletion-&lt;/strong&gt; Deleting the existing property&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Iteration-&lt;/strong&gt; Looping over an object's properties&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Comparison-&lt;/strong&gt; Comparing the two objects&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#creation"&gt;
  &lt;/a&gt;
  Creation
&lt;/h2&gt;

&lt;p&gt;In JS, there are many ways to create objects. Let us look at each of them with examples:-&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#1-using-literal-notation"&gt;
  &lt;/a&gt;
  1.) Using "literal" notation:-
&lt;/h4&gt;

&lt;p&gt;This is the simplest way of creating an object. Here the objects are created with curly brackets. An object is represented as -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const user={ };  //creating an empty object
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Empty objects are objects with no properties. You can also specify the properties while creating an object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const student = {
  ID: 5001,
  'NAME': 'Neha', // Using string quotes
  AGE: 20,
  isHosteler: true,
  COURSES: ['JAVA', 'ReactJS', 'MYSQL'],   //array
  parentDetails:{                       //nested object
      fatherName:'G.K.SONI',
  }
  message: function(){             //function 
      return `Hi ${this.NAME}, Welcome to Chitkara University!!!`
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In objects, the property names(key) are treated as strings and values can be of any type either primitive or non-primitive. When we have a function as a value to the key then this function is called methods.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-using-new-keyword"&gt;
  &lt;/a&gt;
  2.) Using new keyword
&lt;/h4&gt;

&lt;p&gt;Using this method you can first create an object using the &lt;code&gt;new&lt;/code&gt; keyword and then add the properties to it later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var user=new Object(); 
user.name="aditya",
user.age=21
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#4-using-constructor"&gt;
  &lt;/a&gt;
  4.) Using Constructor
&lt;/h4&gt;

&lt;p&gt;A constructor is a special method that is automatically called when an object is created. We can optionally pass parameters while the creation of an object using a new keyword. This method of creating an object is recommended in real-life projects because you can create as many objects as you would like by using the new keyword. Also if you need to edit or add a property, it's very easy to do it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Books = function(title, author, authNationality) {
    this.title = title;
    this.author = author;
    this.authNationality = authNationality;

    this.getDetails = function() {
        console.log(`${this.title}, by ${this.author}(${this.authNationality});
    }
}

const book1 = new Movie('The God of Small Things', 'Arundhati Roy', 'Indian');
const book2 = new Movie('The Bell Jar', 'Sylvia Plath', 'American');

console.log(book1.getDetails());
console.log(book2.getDetails());
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#retrieving"&gt;
  &lt;/a&gt;
  Retrieving
&lt;/h2&gt;

&lt;p&gt;The properties assigned to object can be retrieved or accessed by using two ways:-&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-dot-notation"&gt;
  &lt;/a&gt;
  1.) Dot Notation
&lt;/h4&gt;

&lt;p&gt;Here, the object name and property name are separated by the &lt;code&gt;.&lt;/code&gt;(dot) operator. If the property exists we get its value. If the property doesn't exist we get &lt;code&gt;undefined&lt;/code&gt;.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Example:-&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;script&amp;gt;
      const book = {
        title : 'The God of Small Things',
        author : 'Arundhati Roy',
        authNationality: 'Indian'
      }

      document.write(book.title+"&amp;lt;br/&amp;gt;");
      document.write(book.year);
    &amp;lt;/script&amp;gt;    
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using dot notation you can't use the property names that are special characters, numbers, or strings that contain spaces, these will throw a syntax error.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;obj.10='ten';
obj.first name='neha';
obj.first-name='neha;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Output&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xwKOAwwx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619421007690/cqHFgTcR3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xwKOAwwx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619421007690/cqHFgTcR3.png" alt="Screenshot (202).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-bracket-notation"&gt;
  &lt;/a&gt;
  2.) Bracket Notation
&lt;/h4&gt;

&lt;p&gt;We can also access the object by using the square brackets [].&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;script&amp;gt;
      const book = {
        title : 'The God of Small Things',
        author : 'Arundhati Roy',
        authNationality: 'Indian'
      }

      console.log(book['title']+"&amp;lt;br/&amp;gt;");
    &amp;lt;/script&amp;gt;    
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bracket notation is more expressive than dot notation because it allows a variable to specify all or part of the property name. Bracket notation also allows property names to contain characters that are forbidden in dot notation.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;obj[10]='ten';
obj[first name]='neha';
obj[first-name]='neha;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;This is valid!!!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#existence"&gt;
  &lt;/a&gt;
  Existence
&lt;/h2&gt;

&lt;p&gt;Sometimes we only want to know whether the particular property exists in an object or not and JavaScript provides you with two common ways to check this:-&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-hasownproperty-method"&gt;
  &lt;/a&gt;
  1.) hasOwnProperty() method
&lt;/h4&gt;

&lt;p&gt;JavaScript object has a special method &lt;code&gt;obj.hasOwnProperty('propName')&lt;/code&gt; that returns a boolean value indicating whether the &lt;code&gt;propName&lt;/code&gt; exists or not.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
const user = {
  name: 'neha'
};

user.hasOwnProperty('name');   // true
hero.hasOwnProperty('age');    // false
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2-in-operator"&gt;
  &lt;/a&gt;
  2.) in operator
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;in&lt;/code&gt; operator also returns true if &lt;code&gt;propName&lt;/code&gt; exists in an object.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
const user = {
  name: 'neha'
};

'name' in user;     /* true */
'age' in user;      /* false */
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#updation"&gt;
  &lt;/a&gt;
  Updation
&lt;/h2&gt;

&lt;p&gt;Updating an object property is very simple. It's just like addition. We can update the value of the property just by reassigning the value to the same key. We can use dot-notation or bracket-notation for this. &lt;br&gt;&lt;br&gt;
&lt;strong&gt;Example:-&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
  const user={
      firstName:'neha',
      lastName:'sni',
      nationality:'American'  
  }

  user.nationality='Indian';        //using dot operation
  user['lastName']='soni';        //using bracket notation  
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#deletion"&gt;
  &lt;/a&gt;
  Deletion
&lt;/h2&gt;

&lt;p&gt;Deletion is performed using the &lt;code&gt;delete&lt;/code&gt; operator. The delete operator deletes both the property and the value of the property. Again, we can use dot-notation and bracket-notation for the deletion. The &lt;code&gt;delete&lt;/code&gt; operator returns true if the property was successfully deleted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
  const user={
      firstName:'neha',
      lastName:'soni',
      nationality:'Indian'  
  }

  delete user.nationality='Indian';        /* returns true */
  delete user['lastName']='soni';        /* return true */
  delete user.age;       /* returns false because prop. doesn't exists */
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#iteration"&gt;
  &lt;/a&gt;
  Iteration
&lt;/h2&gt;

&lt;p&gt;An object is a standalone entity with properties and values. Unlike arrays, you can’t simply iterate an object. Here are a few ways to iterate through JS objects to get their keys and values:-&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-objectentries"&gt;
  &lt;/a&gt;
  1.) Object.entries()
&lt;/h4&gt;

&lt;p&gt;Object.entries() method returns a multi-dimensional array which contains an array of key-value pair of the object's properties.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
   const user = {
    name: 'neha',
    age: 20,
    courses: ['java', 'mysql']
  }
  const kp = Object.entries(animal)

 /* output
  [
    [ 'name', 'neha' ],
    [ 'age', 20 ],
    [ 'courses', ['java', 'mysql'] ] 
  ]
*/
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2-objectkeys"&gt;
  &lt;/a&gt;
  2.) Object.keys()
&lt;/h4&gt;

&lt;p&gt;This method returns the keys of an object in an array and we can now iterate on this returned array and reference the property value with the key.&lt;br&gt;&lt;strong&gt;Here’s an example:-&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
   const user = {
    name: 'neha',
    age: 20,
    courses: ['java', 'mysql']
  }
  const allProperties = Object.keys(user);
 /*
 output=&amp;gt;  [ 'name', 'age', 'courses']
 */

for (const property of allProperties) {
  const value = obj[property];
  console.log(property, value);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#3-objectvalues"&gt;
  &lt;/a&gt;
  3.) Object.values
&lt;/h4&gt;

&lt;p&gt;This method is like &lt;code&gt;object.keys&lt;/code&gt; but it returns the value of the properties in an array.&lt;br&gt;
&lt;br&gt; &lt;br&gt;
&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
   const user = {
    name: 'neha',
    age: 20,
    courses: ['java', 'mysql']
  }
  const allProperties = Object.keys(user);
 /*
 output=&amp;gt;  [ 'neha', 20, ['java', 'mysql'] ]
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#4-forin-loops"&gt;
  &lt;/a&gt;
  4.) for-in loops
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;for-in&lt;/code&gt; loop is used to iterate through an object. You get the properties one by one.&lt;br&gt; &lt;br&gt;
&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
   const user = {
    name: 'neha',
    age: 20,
    courses: ['java', 'mysql']
  }
  for (const property in obj) 
  {
    const value = obj[property]; // Read the value 
    console.log(property, value);
  }  

/*
output=&amp;gt;
name neha
age 20
courses ['java', 'mysql']
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#comparison"&gt;
  &lt;/a&gt;
  Comparison
&lt;/h2&gt;

&lt;p&gt;It is very simple to compare the primitive values in javascript. But comparing the objects is not so easy because objects are structured data. When we use &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;===&lt;/code&gt; operator, they only compare the references of the objects.&lt;br&gt;
Now, two objects can have the same key-value pairs but they can't occupy the same memory location. Let's see an example below:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const user1 = {
  name: 'neha',
}
const user2 = {
  name: 'neha',
}
user1 === user2    // =&amp;gt; false
user1 === user1    // =&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;But what about properties? How we can compare them?🤔&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
The obvious way to compare objects by content is to read the properties and compare them manually.&lt;br&gt;&lt;strong&gt;For example-&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function isUserEqual(obj1, obj2) {
  return obj1.name === obj2.name;
}

const user1 = {
  name: 'neha'
};
const user2 = {
  name: 'neha'
};
const user3 = {
  name: 'gauri'
};

isUserEqual(user1, user2); // =&amp;gt; true
isUserEqual(user1, user3); // =&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Manual comparison requires manual extraction of properties — for simple objects, that’s not a problem. But to compare bigger objects (or objects of unknown structure), the manual comparison isn’t convenient because it requires a lot of boilerplate code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this blog post, we have discussed quite a few things about objects. Here are a few exercises for your better understanding of how objects work. You can try them,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Write a JavaScript program to list the properties of a JavaScript object.&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Sample object:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var student = {
name : "David Rayy",
sclass : "VI",
rollno : 12 };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Sample Output:&lt;/strong&gt; name, class, rollno&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Write a JavaScript program to delete the rollno property from the following object.&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Sample object:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var student = {
name : "David Rayy",
sclass : "VI",
rollno : 12 }; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3. Write a function to  &lt;a href="https://stackoverflow.com/questions/1068834/object-comparison-in-javascript"&gt;deep compare&lt;/a&gt;  two objects by value. What happens when the object’s values are functions? What about symbols?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That's it for object articles — all that remains now is for you to test your skills in the object assessment. If you enjoyed learning and find it useful please do like and share so that, it reaches others as well 🤝&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading 😃
&lt;/h3&gt;

&lt;p&gt;I would ❤ to connect with you at  &lt;a href="https://twitter.com/nehasoni__"&gt;Twitter&lt;/a&gt;  |  &lt;a href="https://www.linkedin.com/in/neha-soni-70a6231b1/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/nehasoni05"&gt;GitHub&lt;/a&gt;&lt;br&gt;
Let me know in the comment section if you have any doubt or feedback.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics"&gt;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=-P04pE6zRNE"&gt;https://www.youtube.com/watch?v=-P04pE6zRNE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Top 15 JavaScript Videos with Timelines</title>
      <author>Alex-Braine</author>
      <pubDate>Sun, 09 May 2021 10:10:37 +0000</pubDate>
      <link>https://dev.to/alexbraine/top-15-javascript-videos-with-timelines-1ic2</link>
      <guid>https://dev.to/alexbraine/top-15-javascript-videos-with-timelines-1ic2</guid>
      <description>&lt;h1&gt;
  &lt;a href="#1-learn-javascript-full-course-for-beginners"&gt;
  &lt;/a&gt;
  1. Learn JavaScript - Full Course for Beginners
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4m6Di_ny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/PkZNo7MFNFg/maxresdefault.jpg" alt=""&gt;&lt;/a&gt;6,050,991 views • 118,676 likes &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=0"&gt;Introduction (1m 24s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=84"&gt;Running JavaScript (2m 59s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=263"&gt;Comment Your Code (1m 33s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=356"&gt;Data Types and Variables (5m 35s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=691"&gt;Initializing Variables with the Assignment Operator (27s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=718"&gt;Uninitialized Variables (42s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=760"&gt;Case Sensitivity in Variables (1m 25s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#numbers"&gt;
  &lt;/a&gt;
  Numbers
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=845"&gt;Add Two Numbers (29s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=874"&gt;Subtract One Number from Another (18s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=892"&gt;Multiply Two Numbers (20s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=912"&gt;Dividing Numbers (18s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=930"&gt;Increment (28s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=958"&gt;Decrement (24s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=982"&gt;Decimal Numbers (26s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1008"&gt;Multiply Two Decimals (30s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1038"&gt;Divide Decimals (15s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1053"&gt;Finding a Remainder (49s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1102"&gt;Augmented Addition (1m 1s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1162"&gt;Augmented Subtraction (56s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1218"&gt;Augmented Multiplication (33s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1251"&gt;Augmented Division (28s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#strings"&gt;
  &lt;/a&gt;
  Strings
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1279"&gt;Declare String Variables (42s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1321"&gt;Escaping Literal Quotes (1m 43s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1424"&gt;Quoting Strings with Single Quotes (1m 34s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1518"&gt;Escape Sequences (1m 28s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1606"&gt;Concatenating String with Plus Operator (1m 3s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1669"&gt;Plus Equals Operator (1m 12s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1741"&gt;Constructing Strings with Variables (1m 13s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1814"&gt;Appending Variables to Strings (57s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1871"&gt;Length of a String (50s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=1921"&gt;Bracket Notation (1m 26s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=2007"&gt;String Immutability (56s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=2063"&gt;Find the Nth Character (28s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=2091"&gt;Find the Last Character (57s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=2148"&gt;Find the Nth-to-Last Character (40s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=2188"&gt;Word Blanks (4m 16s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=11199"&gt;Template Literals (4m 4s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#arrays"&gt;
  &lt;/a&gt;
  Arrays
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=2444"&gt;Arrays (59s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=2503"&gt;Nest Arrays (50s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=2553"&gt;Access Array Data (1m 1s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=2614"&gt;Modify Array Data (1m 14s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=2688"&gt;Access Multi-Dimensional Arrays (1m 42s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=2790"&gt;push() (59s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=2849"&gt;pop() (1m 4s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=2913"&gt;shift() (50s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=2963"&gt;unshift() (1m 13s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=3036"&gt;Shopping List (1m 5s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=3101"&gt;Write Reusable with Functions (2m 1s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=3221"&gt;Arguments (2m 2s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=3343"&gt;Global Scope (3m 48s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=3571"&gt;Local Scope (1m 15s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=3646"&gt;Global vs Local Scope in Functions (1m 54s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=3760"&gt;Return a Value from a Function (1m 15s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=3835"&gt;Undefined Value returned (57s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=3892"&gt;Assignment with a Returned Value (1m 1s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=3952"&gt;Stand in Line (2m 49s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=4121"&gt;Boolean Values (43s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=6071"&gt;Returning Boolean Values from Functions (1m 9s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=6140"&gt;Return Early Pattern for Functions (1m 18s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=6218"&gt;Counting Cards (5m 33s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#operators"&gt;
  &lt;/a&gt;
  Operators
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=4311"&gt;Equality Operator (1m 27s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=4398"&gt;Strict Equality Operator (1m 25s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=4483"&gt;Comparing different values (55s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=4538"&gt;Inequality Operator (42s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=4580"&gt;Strict Inequality Operator (45s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=4625"&gt;Greater Than Operator (34s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=4659"&gt;Greater Than Or Equal To Operator (30s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=4689"&gt;Less Than Operator (35s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=4724"&gt;Less Than Or Equal To Operator (33s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=4757"&gt;And Operator (1m 24s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=4841"&gt;Or Operator (56s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#statements"&gt;
  &lt;/a&gt;
  Statements
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=4164"&gt;If Statements (2m 27s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=4897"&gt;Else Statements (50s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=4947"&gt;Else If Statements (1m 3s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=5010"&gt;Logical Order in If Else Statements (1m 15s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=5085"&gt;Chaining If Else Statements (3m 1s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=5265"&gt;Golf Code (4m 30s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=5535"&gt;Switch Statements (3m 31s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=5746"&gt;Default Option in Switch Statements (1m 37s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=5843"&gt;Identical Options in Switch Statements (1m 57s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=5960"&gt;Replacing If Else Chains with Switch (1m 51s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#objects"&gt;
  &lt;/a&gt;
  Objects
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=6551"&gt;Build Objects (1m 35s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=6646"&gt;Accessing Object Properties with Dot Notation (47s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=6693"&gt;Accessing Object Properties with Bracket Notation (1m 14s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=6767"&gt;Accessing Object Properties with Variables (47s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=6814"&gt;Updating Object Properties (56s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=6870"&gt;Add New Properties to Object (49s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=6919"&gt;Delete Properties from Object (35s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=6954"&gt;Objects for Lookups (1m 49s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=7063"&gt;Testing Objects for Properties (1m 32s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=7155"&gt;Manipulating Complex Objects (1m 45s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=7260"&gt;Nested Objects (53s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=7313"&gt;Nested Arrays (1m 13s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=7386"&gt;Record Collection (7m 9s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=9892"&gt;Prevent Object Mutation (2m 25s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=11443"&gt;Simple Fields (1m 41s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=11544"&gt;Declarative Functions (32s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#class"&gt;
  &lt;/a&gt;
  Class
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=11576"&gt;Use class Syntax to Define a Constructor Function (2m 15s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=11711"&gt;getters and setters (5m 14s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#loops"&gt;
  &lt;/a&gt;
  Loops
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=7815"&gt;While Loops (1m 20s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=7895"&gt;For Loops (2m 21s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=8036"&gt;Odd Numbers With a For Loop (1m 32s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=8128"&gt;Count Backwards With a For Loop (1m 40s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=8228"&gt;Iterate Through an Array with a For Loop (2m 35s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=8383"&gt;Nesting For Loops (3m 2s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=8565"&gt;Do...While Loops (1m 27s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=8652"&gt;Profile Lookup (4m 6s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#random"&gt;
  &lt;/a&gt;
  Random
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=8898"&gt;Random Fractions (36s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=8934"&gt;Random Whole Numbers (1m 27s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=9021"&gt;Random Whole Numbers within a Range (1m 25s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#parseint"&gt;
  &lt;/a&gt;
  parseInt
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=9106"&gt;parseInt Function (50s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=9156"&gt;parseInt Function with a Radix (53s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ternary-operator"&gt;
  &lt;/a&gt;
  Ternary Operator
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=9209"&gt;Ternary Operator (1m 28s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=9297"&gt;Multiple Ternary Operators (2m 1s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#var-vs-let"&gt;
  &lt;/a&gt;
  var vs let
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=9417"&gt;var vs let (2m 5s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=9542"&gt;var vs let scopes (2m 30s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#const"&gt;
  &lt;/a&gt;
  const
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=9692"&gt;const Keyword (2m 8s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=9820"&gt;Mutate an Array Declared with const (1m 12s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#arrow-functions"&gt;
  &lt;/a&gt;
  Arrow Functions
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=10037"&gt;Arrow Functions (1m 6s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=10103"&gt;Arrow Functions with Parameters (1m 4s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#higher-order"&gt;
  &lt;/a&gt;
  Higher Order
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=10167"&gt;Higher Order Arrow Functions (3m 37s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=10384"&gt;Higher Order Default Parameters (56s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#restspread-operators"&gt;
  &lt;/a&gt;
  Rest/Spread Operators
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=10440"&gt;Rest Operator (1m 31s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=10531"&gt;Spread Operator (1m 47s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#destructuring-assignment"&gt;
  &lt;/a&gt;
  Destructuring Assignment
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=10638"&gt;Destructuring Assignment: Objects (3m 1s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=10818"&gt;Destructuring Assignment: Nested Objects (1m 37s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=10915"&gt;Destructuring Assignment: Arrays (1m 45s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=11020"&gt;Destructuring Assignment with Rest Operator to Reassign Array (1m 25s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=11105"&gt;Destructuring Assignment to Pass an Object (1m 34s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#import-export"&gt;
  &lt;/a&gt;
  import / export
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=12025"&gt;import vs require (2m 8s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=12153"&gt;export (1m 7s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=12220"&gt;* to Import (1m 10s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=12290"&gt;export default (36s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=12326"&gt;Import a Default Export (50s)&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-javascript-tutorial-for-beginners-learn-javascript-in-1-hour"&gt;
  &lt;/a&gt;
  2. JavaScript Tutorial for Beginners: Learn JavaScript in 1 Hour
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9KwWJbIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/W6NZfCO5SIk/maxresdefault.jpg" alt=""&gt;&lt;/a&gt;4,688,241 views • 81,950 likes &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk&amp;amp;t=0"&gt;What is JavaScript (4m 41s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk&amp;amp;t=281"&gt;Setting Up the Development Environment (3m 11s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk&amp;amp;t=472"&gt;JavaScript in Browsers (3m 49s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk&amp;amp;t=701"&gt;Separation of Concerns (2m 6s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk&amp;amp;t=827"&gt;JavaScript in Node (2m 24s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk&amp;amp;t=971"&gt;Variables (5m 38s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk&amp;amp;t=1309"&gt;Constants (1m 46s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk&amp;amp;t=1415"&gt;Primitive Types (3m 12s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk&amp;amp;t=1607"&gt;Dynamic Typing (3m 19s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk&amp;amp;t=1806"&gt;Objects (5m 16s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk&amp;amp;t=2122"&gt;Arrays (4m 19s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk&amp;amp;t=2381"&gt;Functions (4m 41s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk&amp;amp;t=2662"&gt;Types of Functions (3m 54s)&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-data-structures-and-algorithms-in-javascript-full-course-for-beginners"&gt;
  &lt;/a&gt;
  3. Data Structures and Algorithms in JavaScript - Full Course for Beginners
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=t2CEgPsws3U"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IBrw9oes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/t2CEgPsws3U/maxresdefault.jpg" alt=""&gt;&lt;/a&gt;534,045 views • 12,602 likes &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=t2CEgPsws3U&amp;amp;t=21"&gt;Stacks (8m 42s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=t2CEgPsws3U&amp;amp;t=543"&gt;Sets (10m 21s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=t2CEgPsws3U&amp;amp;t=1164"&gt;Queues &amp;amp; Priority Queues (6m 39s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=t2CEgPsws3U&amp;amp;t=1563"&gt;Binary Search Tree (13m 31s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=t2CEgPsws3U&amp;amp;t=2374"&gt;Binary Search Tree: Traversal &amp;amp; Height (13m 45s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=t2CEgPsws3U&amp;amp;t=3199"&gt;Hash Tables (9m 45s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=t2CEgPsws3U&amp;amp;t=3784"&gt;Linked List (11m 55s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=t2CEgPsws3U&amp;amp;t=4499"&gt;Trie (12m 30s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=t2CEgPsws3U&amp;amp;t=5249"&gt;Heap (max and min) (14m 38s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=t2CEgPsws3U&amp;amp;t=6127"&gt;Graphs: adjacency list, adjacency matrix, incidence matrix (4m 38s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=t2CEgPsws3U&amp;amp;t=6405"&gt;Graphs: breadth-first search (6m 9s)&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-redux-tutorial-learn-redux-from-scratch"&gt;
  &lt;/a&gt;
  4. Redux Tutorial - Learn Redux from Scratch
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_emo9rFC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/poQXNp9ItL4/maxresdefault.jpg" alt=""&gt;&lt;/a&gt;386,940 views • 10,528 likes &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=0"&gt;Introduction (1m 2s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=62"&gt;What is Redux? (2m 18s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=200"&gt;Pros and Cons of Redux (5m 29s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=529"&gt;Is Redux for You? (2m 29s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=678"&gt;Setting Up the Development Environment (1m 49s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=787"&gt;Course Structure (2m 25s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=932"&gt;Function Programming (27s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=959"&gt;What is Functional Programming? (1m 26s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=1045"&gt;Functions as First-Class Citizens (3m 8s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=1233"&gt;Higher-order Functions (1m 33s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=1326"&gt;Functional Composition (3m 39s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=1545"&gt;Composing and Piping (2m 23s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=1688"&gt;Currying (6m 9s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=2057"&gt;Pure Functions (2m 51s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=2228"&gt;Immutability (4m 14s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=2482"&gt;Updating Objects (4m 34s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=2756"&gt;Updating Arrays (3m 55s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=2991"&gt;Enforcing Immutability (1m 5s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=3056"&gt;Immutable.js (3m 40s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=3276"&gt;Immer (2m 54s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=3450"&gt;Redux Intro (25s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=3475"&gt;Redux Architecture (5m 3s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=3778"&gt;Your First Redux Application (1m 45s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=3883"&gt;Designing the Store (1m 27s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=3970"&gt;Defining the Actions (3m 27s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=4177"&gt;Creating a Reducer (6m 13s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=4550"&gt;Creating the Store (1m 26s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=4636"&gt;Dispatching Actions (2m 46s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=4802"&gt;Subscribing to the Store (2m 8s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=4930"&gt;Action Types (3m 53s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=5163"&gt;Action Creators (2m 58s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=5341"&gt;Exercise (17s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=poQXNp9ItL4&amp;amp;t=5358"&gt;Solution (5m 34s)&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-javascript-higher-order-functions-amp-arrays"&gt;
  &lt;/a&gt;
  5. JavaScript Higher Order Functions &amp;amp; Arrays
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=rRgD1yVwIvE"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w9hjHmvH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/rRgD1yVwIvE/maxresdefault.jpg" alt=""&gt;&lt;/a&gt;581,307 views • 18,493 likes &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=rRgD1yVwIvE&amp;amp;t=0"&gt;Intro (3m 20s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=rRgD1yVwIvE&amp;amp;t=200"&gt;ForEach() (2m 1s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=rRgD1yVwIvE&amp;amp;t=321"&gt;Filter() (10m 19s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=rRgD1yVwIvE&amp;amp;t=940.5"&gt;Map() (5m 24s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=rRgD1yVwIvE&amp;amp;t=1265"&gt;Sort() (4m 45s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=rRgD1yVwIvE&amp;amp;t=1550"&gt;Reduce() (5m 5s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=rRgD1yVwIvE&amp;amp;t=1865"&gt;Extra (2m 35s)&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-objectoriented-programming-in-javascript-made-super-simple-mosh"&gt;
  &lt;/a&gt;
  6. Object-oriented Programming in JavaScript: Made Super Simple | Mosh
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fra2zykE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/PFmuCDHHpwk/maxresdefault.jpg" alt=""&gt;&lt;/a&gt;946,391 views • 20,701 likes &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=0"&gt;What is OOP? (1m 46s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=106"&gt;Four Pillars of OOP (7m 4s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=530"&gt;Setting Up the Development Environment (2m 17s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=667"&gt;Objects (46s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=713"&gt;Object Literals (3m 5s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=898"&gt;Factories (2m 52s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=1070"&gt;Constructors (5m 37s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=1407"&gt;Constructor Property (2m 26s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=1553"&gt;Functions are Objects (5m 16s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=1869"&gt;Value vs Reference Types (5m 51s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=2220"&gt;Adding or Removing Properties (3m 54s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=2454"&gt;Enumerating Properties (2m 51s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=2625"&gt;Abstraction (4m 3s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=2868"&gt;Private Properties and Methods (4m 7s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=3115"&gt;Getters and Setters (5m 37s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=3452"&gt;Exercise (2m 10s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk&amp;amp;t=3582"&gt;Solution (3m 6s)&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-learn-javascript-by-building-7-games"&gt;
  &lt;/a&gt;
  7. Learn JavaScript by Building 7 Games
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=lhNdUVh3qCc"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VDMXS13O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/lhNdUVh3qCc/maxresdefault.jpg" alt=""&gt;&lt;/a&gt;380,987 views • 12,601 likes &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=lhNdUVh3qCc&amp;amp;t=0"&gt;Intro (1m 55s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=lhNdUVh3qCc&amp;amp;t=119"&gt;Memory Game - Level 1 (9m 40s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=lhNdUVh3qCc&amp;amp;t=703"&gt;Whack-a-mole - level 1 (8m 4s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=lhNdUVh3qCc&amp;amp;t=1192"&gt;Connect Four - level 1 (7m 45s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=lhNdUVh3qCc&amp;amp;t=1663"&gt;Nokia 3310 Snake - level 2 (15m 27s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=lhNdUVh3qCc&amp;amp;t=2596"&gt;Space Invaders - level 2 (36m 22s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=lhNdUVh3qCc&amp;amp;t=4782"&gt;Tetris - level 3 (29m 27s)&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#8-10-javascript-projects-in-10-hours-coding-challenge"&gt;
  &lt;/a&gt;
  8. 10 JavaScript Projects in 10 Hours - Coding Challenge
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=dtKciwk_si4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6yIli3EF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/dtKciwk_si4/maxresdefault.jpg" alt=""&gt;&lt;/a&gt;744,203 views • 30,682 likes &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=dtKciwk_si4&amp;amp;t=0"&gt;Intro (1m 12s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=dtKciwk_si4&amp;amp;t=72"&gt;Countdown Timer (31m 3s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=dtKciwk_si4&amp;amp;t=1935"&gt;Quiz App (51m 5s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=dtKciwk_si4&amp;amp;t=5000"&gt;Recipe App (1h 56m 37s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=dtKciwk_si4&amp;amp;t=11997"&gt;Notes App (50m 38s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=dtKciwk_si4&amp;amp;t=15035"&gt;ToDo App (35m 39s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=dtKciwk_si4&amp;amp;t=17174"&gt;Movies App (53m 41s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=dtKciwk_si4&amp;amp;t=20395"&gt;GitHub Profiles (53m 35s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=dtKciwk_si4&amp;amp;t=23610"&gt;Drawing App (46m 10s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=dtKciwk_si4&amp;amp;t=26380"&gt;Password Generator (50m 25s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=dtKciwk_si4&amp;amp;t=29405"&gt;Weather App (1h 7m 3s)&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#9-build-15-javascript-projects-vanilla-javascript-course"&gt;
  &lt;/a&gt;
  9. Build 15 JavaScript Projects - Vanilla JavaScript Course
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vsVpyu41--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/3PHXvlpOkf4/maxresdefault.jpg" alt=""&gt;&lt;/a&gt;605,400 views • 19,254 likes &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=0"&gt;Intro (7m 1s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=421"&gt;Color Flipper (23m 24s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=1825"&gt;Counter (13m 39s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=2644"&gt;Reviews (27m 25s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=4289"&gt;Navbar (14m 52s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=5181"&gt;Sidebar (12m 42s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=5943"&gt;Modal (9m 23s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=6506"&gt;Questions (27m 59s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=8185"&gt;Menu (59m 48s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=11773"&gt;Video (16m 32s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=12765"&gt;Scroll (1h 3m 30s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=16575"&gt;Tabs (22m 38s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=17933"&gt;Countdown (57m 42s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=21395"&gt;Lorem Ipsum (21m 48s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=22703"&gt;Grocery (1h 42m 51s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=28874"&gt;Slider (22m 42s)&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#10-12hr-youtube-coding-bootcamp-2021"&gt;
  &lt;/a&gt;
  10. 12HR+ YouTube Coding Bootcamp 2021!
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oIcmNur---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/Xm4BObh4MhI/maxresdefault.jpg" alt=""&gt;&lt;/a&gt;250,238 views • 12,223 likes &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=0"&gt;Introduction (3m 34s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=214"&gt;Code Editors (2m 31s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=365"&gt;HTML Introduction (2m 17s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=502"&gt;HTML Boilerplate setup (2m 33s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=655"&gt;HTML Elements (6m 58s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=1073"&gt;Online Portfolio Project (2m 12s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=1205"&gt;Check-in (57s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=1262"&gt;CSS Introduction (2m 35s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=1417"&gt;File set up (4m 5s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=1662"&gt;Class names and Id's (3m 6s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=1848"&gt;Pop Quiz (7m 4s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=2272"&gt;Box Model (2m 4s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=2396"&gt;Colours (4m 16s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=2652"&gt;Unordered and Ordered Lists (5m 21s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=2973"&gt;Images (4m 49s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=3262"&gt;Styling classes as id's (2m 45s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=3427"&gt;The Data property (1m 53s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=3540"&gt;Flexbox (2m 45s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=3705"&gt;Pop Quiz (1m 56s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=3821"&gt;Flexbox website layout (6m 2s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=4183"&gt;Commenting out Code (3m 54s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=4417"&gt;Gradients in CSS (2m 16s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=4553"&gt;Box Shadows in CSS (1m 25s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=4638"&gt;Button Styling in CSS (8m 33s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=5151"&gt;Fonts (3m 34s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=5365"&gt;Generic Website Layout (5m 3s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=5668"&gt;making a NavBar (12m 26s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=6414"&gt;Anchor Links (3m 23s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=6617"&gt;Creating Sections (23m 33s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=8030"&gt;Forms in CSS and HTML (13m 5s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=8815"&gt;Font Awesome (5m 17s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=9132"&gt;Break points (6m 23s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=9515"&gt;Z-index (10m 49s)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=10164"&gt;Check-in (1m 43s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=10267"&gt;Introduction to JavaScript (1m 5s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=10332"&gt;JavaScript file setup (6m 27s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=10719"&gt;Variables (17m 36s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=11775"&gt;Control Flow (25s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=11800"&gt;If Statements (9m 29s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=12369"&gt;Operators (29m 30s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=14139"&gt;Fizz Buzz Exercise (5m 20s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=14459"&gt;for loops (6m 59s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=14878"&gt;Arrays (6m 44s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=15282"&gt;Objects (10m 8s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=15890"&gt;Functions (13m 1s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=16671"&gt;A Progress Exercise (10m 29s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=17300"&gt;Arrow Functions (4m 1s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=17541"&gt;While loop (3m 2s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=17723"&gt;Built-in-Objects Introduction (39s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=17762"&gt;length() (5m 27s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=18089"&gt;concat() (5m 12s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=18401"&gt;join() (5m 25s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=18726"&gt;pop() (6m 40s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=19126"&gt;shift() (3m 27s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=19333"&gt;unshift() (3m 19s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=19532"&gt;push() (10m 19s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=20151"&gt;splice() (5m 56s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=20507"&gt;forEach() (8m 38s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=21025"&gt;some() (9m 24s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=21589"&gt;map() (7m 30s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=22039"&gt;filter() (9m 47s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=22626"&gt;reduce() (5m 21s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=22947"&gt;every() (5m 58s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=23305"&gt;split() (6m 1s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=23665"&gt;Array work - Exercises to practise (43m 41s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=26286"&gt;addEventListener() (8m 3s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=26769"&gt;removeEventListener() (7m 48s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=27237"&gt;querySelector() (6m 2s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=27599"&gt;Check-in and Project suggestion (52s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=27651"&gt;Math.random() (12m 17s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=28388"&gt;Let's make a Responsive Burger NavBar (17m 4s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=29412"&gt;Date (9m 17s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=29969"&gt;setTimeout() (9m 31s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=30540"&gt;setInterval() (15m 11s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=31451"&gt;Classes in JavaScript (8m 5s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=31936"&gt;Check-in and Project suggestion (42s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=31978"&gt;Keys (8m 48s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=32506"&gt;switch case (21m 5s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=33771"&gt;sort() (2m 1s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=33892"&gt;Introduction to Algorithms (24s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=33916"&gt;includes() (2m 18s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=34054"&gt;contains() (2m 18s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=34192"&gt;createElement() (8m 30s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=34702"&gt;Check-in and Project Introduction (48m 45s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=37627"&gt;Check-in and Project suggestions (1m 9s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=37696"&gt;Introduction to HTTP (8m 39s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=38215"&gt;fetch(). GET POST PUT DELETE (30m 29s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=40044"&gt;Check-in and video suggestion (29s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=40073"&gt;Storing Projects on GitHub (8m 5s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI&amp;amp;t=40558"&gt;Where to go next (5m 46s)&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#11-javascript-pro-tips-code-this-not-that"&gt;
  &lt;/a&gt;
  11. JavaScript Pro Tips - Code This, NOT That
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Mus_vwhTCq0"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4yvHqORJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/Mus_vwhTCq0/maxresdefault.jpg" alt=""&gt;&lt;/a&gt;1,681,238 views • 78,111 likes &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Mus_vwhTCq0&amp;amp;t=0"&gt;Intro (51s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Mus_vwhTCq0&amp;amp;t=51"&gt;Debugging with console.log (1m 48s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Mus_vwhTCq0&amp;amp;t=159"&gt;Destructuring (1m 20s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Mus_vwhTCq0&amp;amp;t=239"&gt;Template literals (2m 8s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Mus_vwhTCq0&amp;amp;t=367"&gt;Spread syntax (2m 12s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Mus_vwhTCq0&amp;amp;t=499"&gt;Loops (1m 59s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Mus_vwhTCq0&amp;amp;t=618"&gt;async/await (2m 18s)&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#12-async-js-crash-course-callbacks-promises-async-await"&gt;
  &lt;/a&gt;
  12. Async JS Crash Course - Callbacks, Promises, Async Await
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PoRJizFvM7s"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oXrd1Dm6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/PoRJizFvM7s/maxresdefault.jpg" alt=""&gt;&lt;/a&gt;771,965 views • 21,236 likes &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PoRJizFvM7s&amp;amp;t=160"&gt;Pre-callback (6m 20s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PoRJizFvM7s&amp;amp;t=555"&gt;Actual callback (1m 25s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PoRJizFvM7s&amp;amp;t=665"&gt;Promise (3m 55s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PoRJizFvM7s&amp;amp;t=925"&gt;Promise.all (3m 1s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PoRJizFvM7s&amp;amp;t=1105"&gt;Fetch() (1m 35s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PoRJizFvM7s&amp;amp;t=1230"&gt;Async/Await (1m 20s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=PoRJizFvM7s&amp;amp;t=1310"&gt;Async with Fetch() (1m 40s)&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#13-es6-tutorial-learn-modern-javascript-in-1-hour"&gt;
  &lt;/a&gt;
  13. ES6 Tutorial: Learn Modern JavaScript in 1 Hour
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=NCwa_xi0Uuc"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XIzRmw5A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/NCwa_xi0Uuc/maxresdefault.jpg" alt=""&gt;&lt;/a&gt;433,798 views • 10,765 likes &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=NCwa_xi0Uuc&amp;amp;t=105"&gt;Let vs Var vs Const (3m 54s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=NCwa_xi0Uuc&amp;amp;t=339"&gt;Objects (2m 47s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=NCwa_xi0Uuc&amp;amp;t=506"&gt;The this Keyword (2m 51s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=NCwa_xi0Uuc&amp;amp;t=677"&gt;Binding this (2m 38s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=NCwa_xi0Uuc&amp;amp;t=835"&gt;Arrow Functions (4m 17s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=NCwa_xi0Uuc&amp;amp;t=1092"&gt;Arrow Functions and this (4m 17s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=NCwa_xi0Uuc&amp;amp;t=1349"&gt;Array.map Method (3m 37s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=NCwa_xi0Uuc&amp;amp;t=1566"&gt;Object Destructuring (2m 31s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=NCwa_xi0Uuc&amp;amp;t=1717"&gt;Spread Operator (4m 4s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=NCwa_xi0Uuc&amp;amp;t=1961"&gt;Classes (3m 47s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=NCwa_xi0Uuc&amp;amp;t=2188"&gt;Inheritance (4m 5s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=NCwa_xi0Uuc&amp;amp;t=2433"&gt;Modules (4m 12s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=NCwa_xi0Uuc&amp;amp;t=2685"&gt;Named and Default Exports (5m 19s)&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#14-typescript-course-for-beginners-2021-learn-typescript-from-scratch"&gt;
  &lt;/a&gt;
  14. TypeScript Course for Beginners 2021 - Learn TypeScript from Scratch!
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hd5aPdXu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/BwuLxPH8IDs/maxresdefault.jpg" alt=""&gt;&lt;/a&gt;742,660 views • 15,747 likes &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=0"&gt;Getting Started (1m 57s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=117"&gt;What is TypeScript (4m 34s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=391"&gt;Installing &amp;amp; Using TypeScript (13m 22s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=1193"&gt;The Advantages of TypeScript (3m 6s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=1379"&gt;Course Outline (4m 17s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=1636"&gt;How to Get the Most out of This Course (3m 13s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=1829"&gt;Setting Up our Development Environment (3m 7s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=2016"&gt;The Course Project Setup (7m 20s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=2456"&gt;Module Introduction (27s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=2483"&gt;Using Types (10m 20s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=3103"&gt;TypeScript Types vs JavaScript Types (4m 54s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=3397"&gt;Numbers, Strings and Booleans (5m 43s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=3740"&gt;Type Assignment and Type Inference (5m 39s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=4079"&gt;Object Types (7m 32s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=4531"&gt;Array Types (5m 30s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=4861"&gt;Tuples (6m 20s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=5241"&gt;Enums (7m 5s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=5666"&gt;The Any Type (2m 4s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=5790"&gt;Union Types (6m 31s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=6181"&gt;Literal Types (7m 54s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=6655"&gt;Type Aliases (3m 1s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=6835"&gt;Function Return Types and Void (7m 26s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=7281"&gt;Function Types (5m 34s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=7615"&gt;Function Types and Callbacks (4m 23s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=7878"&gt;The Unknown Type (3m 44s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=8102"&gt;The Never Type (4m 10s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=8352"&gt;Wrap Up (1m 52s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=8464"&gt;Module Introduction (46s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=8510"&gt;Watch Node (2m 5s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=8635"&gt;Compiling the Entire Project (3m 47s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=8862"&gt;Include and Exclude Files (6m 13s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=9235"&gt;Setting a Compilation Target (4m 4s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=9479"&gt;Understanding TypeScript Libs (5m 32s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=9811"&gt;More Options (1m 41s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=9912"&gt;Source Maps (2m 1s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=10032"&gt;Rootdir and Outdir (5m 31s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=10363"&gt;noemit on Error (2m 52s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=10535"&gt;Strict Compilation Options (11m 4s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=11199"&gt;Code Quality Options (4m 23s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=11462"&gt;Debugging with Visual Studio Code (4m 20s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs&amp;amp;t=11722"&gt;Wrap Up (1m 17s)&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#15-asynchronous-javascript-amp-event-loop-from-scratch"&gt;
  &lt;/a&gt;
  15. Asynchronous JavaScript &amp;amp; EVENT LOOP from scratch
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fu-w3GWm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/8zKuNo4ay8E/maxresdefault.jpg" alt=""&gt;&lt;/a&gt;63,543 views • 4,993 likes &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=0"&gt;Introduction (40s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=40"&gt;How JS Engine Executes the Code using Call Stack (2m 45s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=205"&gt;Main Job of the Call Stack (26s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=231"&gt;How does JavaScript perform async tasks (45s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=276"&gt;Behind the Scenes in Browser (2m 59s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=455"&gt;Web APIs in JS (4m 28s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=723"&gt;How setTimeout Works behind the scenes in Browsers (4m 6s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=969"&gt;Event Loop &amp;amp; CallBack Queue in JS (2m 50s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=1139"&gt;How Event Listeners Work in JS (4m 44s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=1423"&gt;More about Event Loop (1m 19s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=1502"&gt;Why do we need Event Loop (2m 27s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=1649"&gt;How fetch() function works (2m 57s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=1826"&gt;MicroTask Queue in JS (5m 35s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=2161"&gt;What are MicroTasks in JS? (2m 34s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=2315"&gt;Starvation of Functions in Callback Queue (1m 13s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=2388"&gt;Teaser of the Next Video (1m 5s)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;t=2453"&gt;Thank you for watching Namaste JavaScript (51s)&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#source-httpskilterongithubioalexbrainejavascript"&gt;
  &lt;/a&gt;
  Source: &lt;a href="https://kilteron.github.io/alex-braine/javascript"&gt;https://kilteron.github.io/alex-braine/javascript&lt;/a&gt;
&lt;/h5&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Solution: Construct Target Array With Multiple Sums</title>
      <author>seanpgallivan</author>
      <pubDate>Sun, 09 May 2021 09:39:57 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-construct-target-array-with-multiple-sums-24d4</link>
      <guid>https://dev.to/seanpgallivan/solution-construct-target-array-with-multiple-sums-24d4</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/construct-target-array-with-multiple-sums/discuss/1199223"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-1354-hard-construct-target-array-with-multiple-sums"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/construct-target-array-with-multiple-sums/"&gt;Leetcode Problem #1354 (&lt;em&gt;Hard&lt;/em&gt;): Construct Target Array With Multiple Sums&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given an array of integers &lt;code&gt;target&lt;/code&gt;. From a starting array, &lt;code&gt;A&lt;/code&gt; consisting of all &lt;code&gt;1&lt;/code&gt;'s, you may perform the following procedure :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; let &lt;code&gt;x&lt;/code&gt; be the sum of all elements currently in your array.&lt;/li&gt;
&lt;li&gt; choose index &lt;code&gt;i&lt;/code&gt;, such that &lt;code&gt;0 &amp;lt;= i &amp;lt; target.size&lt;/code&gt; and set the value of &lt;code&gt;A&lt;/code&gt; at index &lt;code&gt;i&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt; You may repeat this procedure as many times as needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Return &lt;code&gt;True&lt;/code&gt; if it is possible to construct the &lt;code&gt;target&lt;/code&gt; array from &lt;code&gt;A&lt;/code&gt; otherwise return &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;target = [9,3,5]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;Start with [1, 1, 1]&lt;br&gt;[1, 1, 1], sum = 3 choose index 1&lt;br&gt;[1, 3, 1], sum = 5 choose index 2&lt;br&gt;[1, 3, 5], sum = 9 choose index 0&lt;br&gt;[9, 3, 5] Done&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;target = [1,1,1,2]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;Impossible to create target array from [1,1,1,1].&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 3:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;target = [8,5]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;N == target.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= target.length &amp;lt;= 5 * 10^4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= target[i] &amp;lt;= 10^9&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;One thing we can notice right away: The sum of the elements in &lt;strong&gt;A&lt;/strong&gt; will always be larger than any single element of &lt;strong&gt;A&lt;/strong&gt;, since &lt;strong&gt;A&lt;/strong&gt; starts off with all positive numbers. Therefore, the sum will only ever go up as we iterate through the solution process. This means that we will only ever have one attempt to place a given number in its correct spot.&lt;/p&gt;

&lt;p&gt;It also means that the &lt;em&gt;last&lt;/em&gt; step will always be to settle the highest value of the target array, which means we can reconstruct the nature of &lt;strong&gt;A&lt;/strong&gt; right before the last step as well. From there, we'll have to keep dealing with the largest remaining value, on and on, working backwards until we either succeed or fail.&lt;/p&gt;

&lt;p&gt;Since we are going to have to deal with the target values in descending value order, it stands to reason that we should use a &lt;strong&gt;max priority queue&lt;/strong&gt; or &lt;strong&gt;max-heap&lt;/strong&gt; structure to keep track of the target values, especially since we don't care about the values' indices.&lt;/p&gt;

&lt;p&gt;Once we have all the &lt;strong&gt;target&lt;/strong&gt; values inserted into the priority queue (&lt;strong&gt;pq/heap&lt;/strong&gt;) and the &lt;strong&gt;sum&lt;/strong&gt; calculated, we can proceed to deal with the values in order. At each step, we should remove the max value, compute its replacement's value, then reinsert that replacement back into &lt;strong&gt;pq&lt;/strong&gt;. If, at the start of an iteration, we see that the max value in &lt;strong&gt;pq&lt;/strong&gt; is a &lt;strong&gt;1&lt;/strong&gt;, then that means that all values in &lt;strong&gt;pq&lt;/strong&gt; are &lt;strong&gt;1&lt;/strong&gt;s, and we should &lt;strong&gt;return true&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;On the other hand, if we find ourselves about to insert a number less than &lt;strong&gt;1&lt;/strong&gt; into &lt;strong&gt;pq&lt;/strong&gt;, we know we've failed and should &lt;strong&gt;return false&lt;/strong&gt;, as we will have passed the prescribed starting position.&lt;/p&gt;

&lt;p&gt;But at this point, we'll still obtain a &lt;strong&gt;TLE&lt;/strong&gt; result and will need to optimize some more. Consider the situation in which we process the max value only to find that we're about to reinsert a number that is &lt;em&gt;still&lt;/em&gt; the max value. In some edge cases, it could take thousands of iterations to fully process this value so that we can move on to another, when all that processing can be done more simply in one step.&lt;/p&gt;

&lt;p&gt;Take, for example, &lt;strong&gt;target = [3,5,33]&lt;/strong&gt;. Normally, we'd remove the &lt;strong&gt;33&lt;/strong&gt; and compute its replacement to be &lt;strong&gt;25&lt;/strong&gt;, then from &lt;strong&gt;25&lt;/strong&gt; to &lt;strong&gt;17&lt;/strong&gt;, then &lt;strong&gt;17&lt;/strong&gt; to &lt;strong&gt;9&lt;/strong&gt;, then finally &lt;strong&gt;9&lt;/strong&gt; to &lt;strong&gt;1&lt;/strong&gt;. Each time, we're removing the sum of all the remaining values (&lt;strong&gt;3 + 5 = 8&lt;/strong&gt;) from the current number. In any valid target array, as we noted at the very beginning, the max value &lt;em&gt;must&lt;/em&gt; be larger than the sum of the remaining elements, since it came from that sum plus the value that was replaced.&lt;/p&gt;

&lt;p&gt;That means that we should be able to remove the remaining sum (&lt;strong&gt;8&lt;/strong&gt;) from our current max value (&lt;strong&gt;33&lt;/strong&gt;) as many times as we possibly can, since only the remainder will bring us below that sum. This we can achieve quite easily with the &lt;strong&gt;mod operator&lt;/strong&gt; which will result in our replacement value (&lt;strong&gt;33 % 8 = 1&lt;/strong&gt;) without the need to iterate through every step.&lt;/p&gt;

&lt;p&gt;As noted recently, if we find that the max value is actually less than the remaining sum, then the array must not be valid, and we can &lt;strong&gt;return false&lt;/strong&gt;.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Implementation:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Javascript's &lt;strong&gt;MaxPriorityQueue()&lt;/strong&gt; npm is convenient, but not terribly efficient. A custom &lt;strong&gt;max-heap&lt;/strong&gt; implementation is more performant. Both options are included below.&lt;/p&gt;

&lt;p&gt;Python defaults to a &lt;strong&gt;min-heap&lt;/strong&gt;, so we can simulate a &lt;strong&gt;max-heap&lt;/strong&gt; by changing the sign on each element when it is inserted and removed from the heap.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#w-maxpriorityqueue"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ MaxPriorityQueue():&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isPossible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MaxPriorityQueue&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;front&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dequeue&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;
        &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%=&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#w-maxheap"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Max-Heap:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isPossible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[,],&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;heapify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;par&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt;
        &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;par&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;par&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;par&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt;
            &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;par&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;par&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;extract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt;
            &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;heapify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%=&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;heapify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;isPossible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;heap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;heapify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
            &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%=&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;
            &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
            &lt;span class="n"&gt;heappush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;isPossible&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Queue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PriorityQueue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;((&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;peek&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;poll&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;isPossible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;priority_queue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
    </item>
  </channel>
</rss>
