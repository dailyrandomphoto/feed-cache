<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>I got a 50$ gift from dev.to, and here it is üòç</title>
      <author>Aahnik Daw</author>
      <pubDate>Thu, 15 Apr 2021 03:15:21 +0000</pubDate>
      <link>https://dev.to/aahnik/i-got-a-50-gift-from-dev-to-and-here-it-is-ggh</link>
      <guid>https://dev.to/aahnik/i-got-a-50-gift-from-dev-to-and-here-it-is-ggh</guid>
      <description>&lt;p&gt;I did not imagine that a simple article like sending an email would perform so well. Similar tutorials are in n no. of places on the internet. But still, people loved my article.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/aahnik" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--28COnZ56--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--xJdF-Ep6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/453833/0d554f6d-073a-47e0-b356-bbdf3de4f171.jpeg" alt="aahnik image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aahnik/how-to-send-emails-with-python-simply-explained-for-beginners-hea" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to send emails with Python? Simply explained for beginners&lt;/h2&gt;
      &lt;h3&gt;Aahnik Daw „Éª Apr  7 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#python&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#email&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;This article üëÜ reached the &lt;a href="https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-4njl"&gt;top seven&lt;/a&gt; for the week, and dev.to sent me this email.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--akv92Mv_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o1m5hsezqsrazegr1ixw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--akv92Mv_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o1m5hsezqsrazegr1ixw.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am excited to have this badge,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CXqjawZi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bumr3u2l56q9zwadsbfx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CXqjawZi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bumr3u2l56q9zwadsbfx.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I thought, let me give the code back to the community. So here it is &lt;/p&gt;

&lt;p&gt;&lt;code&gt;dev-top7-acmewh&lt;/code&gt; , &lt;/p&gt;

&lt;p&gt;the first person to redeem it, gets 50$ worth of stuff from the &lt;a href="https://shop.dev.to"&gt;shop.dev.to&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have redeemed the code, please comment below, with what you bought. I would love to know. &lt;/p&gt;

&lt;p&gt;Thank you for the love.&lt;/p&gt;

&lt;p&gt;I am &lt;a href="https://github.com/aahnik"&gt;@aahnik&lt;/a&gt; on GitHub. If you are feeling bored, do check out my projects, and hit a few stars.&lt;/p&gt;

&lt;p&gt;Thank you again.&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>discuss</category>
      <category>news</category>
    </item>
    <item>
      <title>Increase Signups By 50% ( Proven Working )</title>
      <author>Frontendor Team</author>
      <pubDate>Thu, 15 Apr 2021 01:39:00 +0000</pubDate>
      <link>https://dev.to/frontendor/increase-signups-by-50-2ifi</link>
      <guid>https://dev.to/frontendor/increase-signups-by-50-2ifi</guid>
      <description>&lt;p&gt;A popup like this has helped Josh ( &lt;a href="https://twitter.com/JoshWComeau"&gt;https://twitter.com/JoshWComeau&lt;/a&gt; ) to increase his email subscribers, so he jumped &lt;strong&gt;from 1,000 to 28,000 subscribers&lt;/strong&gt; in 1 year only. üòª&lt;/p&gt;

&lt;p&gt;This popup is new and people are not used to seeing it! that's why it grabs and forces your visitors to pay attention to your offer.&lt;/p&gt;

&lt;p&gt;üëâ &lt;strong&gt;HOW IT WORKS&lt;/strong&gt; üëà&lt;/p&gt;

&lt;p&gt;While your visitor is scrolling down, your picture or illustration will show up suddenly so it grabs the attention immediately, and after 1 second it says:&lt;/p&gt;

&lt;p&gt;" Hi, there! Can I share a cool thing I‚Äôm working on with you? ".&lt;/p&gt;

&lt;p&gt;This question makes your visitor curious and will lead him to click on Yess.&lt;br&gt;
You can use the Yess as a redirect to another page, on the same page, or to open your email form.&lt;/p&gt;

&lt;p&gt;üëâ &lt;strong&gt;FEATURES&lt;/strong&gt; üëà&lt;/p&gt;

&lt;p&gt;‚úÖ It's FREE.&lt;br&gt;
‚úÖ &lt;strong&gt;Simple Tool For Quick Customization.&lt;/strong&gt;&lt;br&gt;
‚úÖ Lightweight (Won't Make Your Website Slow).&lt;br&gt;
‚úÖ Developers-friendly (Clean Code).&lt;br&gt;
‚úÖ Suitable For Non-tech People (#NoCode).&lt;br&gt;
‚úÖ Use illustrations To Attract More Users Attention.&lt;/p&gt;

&lt;p&gt;üëâ Get it now for Free: &lt;a href="https://frontendor.com/magic-popup/"&gt;https://frontendor.com/magic-popup/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Activar WebHook de Github en Discord</title>
      <author>Alexander G</author>
      <pubDate>Thu, 15 Apr 2021 01:06:08 +0000</pubDate>
      <link>https://dev.to/alexanderg/activar-webhook-de-github-en-discord-3bkp</link>
      <guid>https://dev.to/alexanderg/activar-webhook-de-github-en-discord-3bkp</guid>
      <description>&lt;p&gt;Muchas veces nosotros los desarrolladores usamos este discord,ese muy util servicio de mensajer√≠a para hacer nuestros proyectos en grupo, y por eso el d√≠a de hoy les dir√© como activar las notificaciones de todo lo que pasa en nuestro repositorio en &lt;a href="//github.com"&gt;Github&lt;/a&gt; y que lleguen al canal que queramos.&lt;/p&gt;

&lt;p&gt;Para no asustarlos les digo que no van a tener que escribir ni una solo linea de c√≥digo, es muy simple la verdad.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Importante&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Debes tener permisos de administrador en el server para poder activar los webHooks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sin mas rodeos, Comencemos&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Lo primero, nos vamos a Discord, y creamos una categor√≠a llamada alert-Github o como prefieran, lo recomendable es que configuren los permisos de la categor√≠a para que las personas no puedan escribir y luego que los canales hereden los permisos, adentro de la categor√≠a creamos un canal con cualquier nombre(preferiblemente, el nombre del proyecto), en mi caso alerta-web, tendr√≠amos algo as√≠:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Estoy en un server que cree para esta ocasi√≥n&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nDbfBz1A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yc9yj2thkj868e7b4wy1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nDbfBz1A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yc9yj2thkj868e7b4wy1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nos vamos a Ajustes del Servidor,nos metemos  en la parte de Integraciones, en la parte de integraciones encontraran lo siguiente:&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GR-P5CiN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whu3zrpfk54r3n24fjli.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GR-P5CiN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whu3zrpfk54r3n24fjli.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Luego nos vamos a la opci√≥n de Crear WebHook, luego de darle nos dir√° que tenemos un webHook, Capitan Hook, le cambiamos el nombre por el de nuestra preferencia, en mi caso, GitHub, En la parte donde dice canal nos indica en cual canal se nos enviara las notificaciones, podemos poner cualquiera, en mi caso pondr√© el canal que creamos anteriormente, alerta-web, tambi√©n nos dice que podemos ponerle una foto, si quieren p√≥nganle una, pero la foto no se vera, al final si siguen los pasos bien, ver√°n un bot con el icono de GitHub.&lt;/p&gt;

&lt;p&gt;Ahora le damos a la parte donde dice "Copiar URL de webhook" y se nos copiara en el portapapeles y Guardamos cambios. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Quedar√≠a algo as√≠&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LJdKdq_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0dopqvv5tenqnbwy74he.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LJdKdq_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0dopqvv5tenqnbwy74he.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ahora nos vamos a Github, nos ubicamos en el repositorio en el cual estamos interesados que nos lleguen las notificaciones.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Estoy en un repositorio nuevo, aunq no importa si es nuevo o viejo&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7bdcJujc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sseiz36oyqwdv5duv07q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7bdcJujc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sseiz36oyqwdv5duv07q.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nos vamos a la parte de Settings, adentro en el men√∫ de options, nos iremos a la parte de WebHooks, y les debe salir lo siguiente:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o_CubGjp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5k3tuk2ynlcvcb62473f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o_CubGjp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5k3tuk2ynlcvcb62473f.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Damos click en la parte donde dice add webhook, nos pedir√° nuestra contrase√±a, luego de ingresarla, saldr√° esto en pantalla&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ogD5__uH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aq66x3h4rvnjzvkydbgt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ogD5__uH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aq66x3h4rvnjzvkydbgt.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Y hacemos lo siguente:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;En Payload URL, ponemos la url de nuestro WebHook, la que copiamos anteriormente, pero al final, pegado de la url, ponemos esto:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/github
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;En Content type, seleccionamos: application/json&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;En donde dice: Which events would you like to trigger this webhook?, seleccionamos : Send me everything.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Quedando algo as√≠:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l4Xu3xjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9y5jgmwwv5ywhe9hknx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l4Xu3xjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9y5jgmwwv5ywhe9hknx.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Y seguidamente le damos a add webhook y ya estar√≠a listo nuestro WebHook, y gracias a  la configuraci√≥n que hicimos el webhook avisara hasta cuando alguien le de una nueva estrella.&lt;/p&gt;

&lt;p&gt;Vamos a probarlo, vamos a darle una estrella y crearemos un archivo index.html con un simple h1 o con lo que prefieras.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ya creado el archivo y habiendo ya dado la estrella&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NhEc6Bd---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp0s6vvksym2a3redh48.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NhEc6Bd---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp0s6vvksym2a3redh48.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nos vamos para Discord, entramos en el canal alerta-web o donde hayas configurado el WebHook, y nos deber√° salir lo siguiente:&lt;br&gt;
&lt;em&gt;Bueno como soy el √∫nico que ha modificado algo en el repo solo sale AlexanderG pero depende de quien modifique el repo, saldr√° su nombre de perfil de GitHub&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0m2rPkej--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hcrqxkhsvnue31hsipps.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0m2rPkej--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hcrqxkhsvnue31hsipps.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Como veras nosotros no hemos puesto ninguna imagen, pero como les hab√≠a dicho como ese es un webHook de Github sale as√≠.&lt;/p&gt;

&lt;p&gt;Y bueno eso es todo, vieron lo facil que activar las notificaciones de Github, y eso seguir√° funcionando a menos que se apague o se cambie. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Espero les haya gustado, si tienen alguna duda o pregunta solo d√©jenlas en los comentarios, Bye hasta la pr√≥xima &lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>discord</category>
      <category>github</category>
      <category>webhook</category>
    </item>
    <item>
      <title>Awesome Custom Radio Button | YouTube Like &amp; Dislike | Using Only HTML &amp; CSS </title>
      <author>Ahmad Emran</author>
      <pubDate>Thu, 15 Apr 2021 00:42:39 +0000</pubDate>
      <link>https://dev.to/ahmadbassamemran/awesome-custom-radio-button-youtube-like-dislike-using-only-html-css-42bd</link>
      <guid>https://dev.to/ahmadbassamemran/awesome-custom-radio-button-youtube-like-dislike-using-only-html-css-42bd</guid>
      <description>

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/OchM90IuQig"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/AhmadEmran?sub_confirmation=1"&gt;&lt;strong&gt;Please do not forget to subscribe in my channel:&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ahmadbassamemran/embed/xxgjmGY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>css</category>
      <category>showdev</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Programming in C++ (Part 8 Pointers)</title>
      <author>Mark Mahoney</author>
      <pubDate>Wed, 14 Apr 2021 23:03:36 +0000</pubDate>
      <link>https://dev.to/markm208/programming-in-c-part-8-pointers-3ojl</link>
      <guid>https://dev.to/markm208/programming-in-c-part-8-pointers-3ojl</guid>
      <description>&lt;p&gt;This post describes pointers in C/C++. A pointer is a variable that holds the address of another variable. Pointers are important because they allow us to use a special section of memory called the 'heap'. I discuss the different types of memory that can be used in a program (global, local, and dynamic).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cppbook/chapter8/01/playback.html"&gt;Simple pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cppbook/chapter8/02/playback.html"&gt;Pointer to an object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cppbook/chapter8/03/playback.html"&gt;Vectors of pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cppbook/chapter8/04/playback.html"&gt;Arrays are pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cppbook/chapter8/05/playback.html"&gt;Passing data to functions with pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cppbook/chapter8/06/playback.html"&gt;Comparing pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cppbook/chapter8/07/playback.html"&gt;Three types of variables- global, local, and dynamic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cppbook/chapter8/08/playback.html"&gt;Dynamic variables example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cppbook/chapter8/09/playback.html"&gt;Dangling pointers and null pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cppbook/chapter8/10/playback.html"&gt;Dynamic array of students&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#call-to-action"&gt;
  &lt;/a&gt;
  Call to Action
&lt;/h3&gt;

&lt;p&gt;Now that you have reviewed the guided code walk-throughs I ask that you write a program that will read a sequence of words from the keyboard and store them in a dynamic array of strings. Use the word 'quit' as the word that terminates the input. Print the words back to the screen in the order in which they were entered each on its own line. Do not store the same word twice.&lt;/p&gt;

&lt;p&gt;Up until now the size of an array has been determined at compile time, now that you know about pointers and about the keyword &lt;code&gt;new&lt;/code&gt;, write a program which is not restricted to selecting an upper bound at compile time for the number of words which can be read in.&lt;/p&gt;

&lt;p&gt;One way to do this is to use &lt;code&gt;new&lt;/code&gt; to create arrays of strings on the fly. Each time an array fills up, dynamically create an array which is twice as large, copy over the contents of the existing array to the new array, and continue (remember to &lt;code&gt;delete&lt;/code&gt; the original array). Start with an array of 5 elements.&lt;/p&gt;

&lt;p&gt;Here is an example of the output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Enter in some text and end with the word quit:
This lab asks you to write a program that will read a sequence of words from the keyboard and store them in a dynamic array of strings. Use the word 'quit' as the word that terminates the input. Print the words back to the screen in the order in which they were entered each on its own line. Do not store the same word twice. quit

Doubling Array from 5 to 10
Doubling Array from 10 to 20
Doubling Array from 20 to 40
Doubling Array from 40 to 80
1. This
2. lab
3. asks
4. you
5. to
6. write
7. a
8. program
9. that
10. will
11. read
12. sequence
13. of
14. words
15. from
16. the
17. keyboard
18. and
19. store
20. them
21. in
22. dynamic
23. array
24. strings.
25. Use
26. word
27. 'quit'
28. as
29. terminates
30. input.
31. Print
32. back
33. screen
34. order
35. which
36. they
37. were
38. entered
39. each
40. on
41. its
42. own
43. line.
44. Do
45. not
46. same
47. twice.
Press any key to continue . . .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#comments-and-feedback"&gt;
  &lt;/a&gt;
  Comments and Feedback
&lt;/h3&gt;

&lt;p&gt;You can find all of these code playbacks in my free 'book', &lt;a href="https://markm208.github.io/cppbook/"&gt;An Animated Introduction to Programming in C++&lt;/a&gt;. I am always looking for feedback so please feel free to comment here or to send me a message. You can follow me on twitter &lt;a href="https://twitter.com/markm208"&gt;@markm208&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Programming in C++ (Part 2 Selection)</title>
      <author>Mark Mahoney</author>
      <pubDate>Wed, 14 Apr 2021 23:02:16 +0000</pubDate>
      <link>https://dev.to/markm208/programming-in-c-part-2-selection-c42</link>
      <guid>https://dev.to/markm208/programming-in-c-part-2-selection-c42</guid>
      <description>&lt;p&gt;In this post I will discuss altering the flow of control with &lt;code&gt;if/else&lt;/code&gt; statements. These statements ask the computer to evaluate whether a condition is &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; and changes the flow of control based on the answer. Along the way I discuss another data type, &lt;code&gt;bool&lt;/code&gt;, which can hold either true or false and I show a few examples of how to use selection with &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;if/else&lt;/code&gt;, &lt;code&gt;if/else if/else&lt;/code&gt;, and &lt;code&gt;switch&lt;/code&gt; statements. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cppbook/chapter2/01/playback.html"&gt;Booleans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cppbook/chapter2/02/playback.html"&gt;Even/odd calculator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cppbook/chapter2/03/playback.html"&gt;Overtime pay with an if/else&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cppbook/chapter2/04/playback.html"&gt;Water temperature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cppbook/chapter2/05/playback.html"&gt;Switch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#call-to-action"&gt;
  &lt;/a&gt;
  Call to Action
&lt;/h3&gt;

&lt;p&gt;Now that you have reviewed the guided code walk-throughs I ask that you write a few programs:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#problem-1"&gt;
  &lt;/a&gt;
  Problem 1
&lt;/h4&gt;

&lt;p&gt;Problem 1 asks you to write a program to determine if one date comes after another. The program will ask for two sets of dates. Next, the program will determine if the first date comes before, is equal to, or comes after.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Enter in the first month: 2
Enter in the first day: 21
Enter in the first year: 2012

Enter in the second month: 2
Enter in the second day: 22
Enter in the second year: 2011

The first date comes after the second.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#problem-2"&gt;
  &lt;/a&gt;
  Problem 2
&lt;/h4&gt;

&lt;p&gt;Problem 2 asks you to write a programs that prompts the user for a date and determines if that date is valid. For example, 9/19/2017 is a valid date but these are not valid dates:&lt;/p&gt;

&lt;p&gt;4/31/2006 (only 30 days in April)&lt;br&gt;
2/29/2005 (not a leap year)&lt;br&gt;
16/1/2010 (invalid month)&lt;br&gt;
4/59/2013 (invalid day)&lt;/p&gt;

&lt;p&gt;If the date is correct print it out. If it is incorrect display an error message explaining why the date is not correct. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#problem-3"&gt;
  &lt;/a&gt;
  Problem 3
&lt;/h4&gt;

&lt;p&gt;Problem 3 asks you to write a program that will calculate change for a sales purchase. Your program should prompt for a sales price. Validate that the data entered is a number greater than 0. If the data entered is incorrect, display an error message and end the program. Next, prompt the user for the amount that the customer will pay to the cashier. Validate that this value is greater than or equal to the sales price. If it is not, display an error message and end the program.&lt;/p&gt;

&lt;p&gt;If the entry is correct, your program must calculate the amount of change to return to the user.  Next, calculate what bills and coins that the the cashier needs to return to the customer. The fewest number of paper bills and coins should be returned. You can make change in many different combinations, however, the only correct implementation is the one that returns the fewest paper bills and coins.&lt;/p&gt;

&lt;p&gt;Display the number of each of the bills and coins. Here is a sample run of the program:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Enter in a sales amount: $20.38
Enter in the amount the customer pays: $30.00

The change due back is $9.62

You should give the customer this change:
0 $100 bills
0 $50 bills
0 $20 bills
0 $10 bills
1 $5 bills
4 $1 bills
1 Half Dollars
0 Quarters
1 Dimes
0 Nickels
2 Pennies
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because of the way arithmetic works with float variables, storing the monetary values as floats may cause some problems. For example, if you had a float variable that held 1.29 to represent $1.29 and you subtracted the .05 from it (to represent giving back a nickel) you would think that you would be left with exactly 1.24. Unfortunately, the computer might store that value or it might store 1.2399999 or 1.2400001 instead of exactly 1.24. These very small inconsistencies can cause a problem calculating the number of pennies to return. Consider converting the amounts into ints to solve this problem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comments-and-feedback"&gt;
  &lt;/a&gt;
  Comments and Feedback
&lt;/h3&gt;

&lt;p&gt;You can find all of these code playbacks in my free 'book', &lt;a href="https://markm208.github.io/cppbook/"&gt;An Animated Introduction to Programming in C++&lt;/a&gt;. I am always looking for feedback so please feel free to comment here or to send me a message. You can follow me on twitter &lt;a href="https://twitter.com/markm208"&gt;@markm208&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Programming in C++ (Part 1 Variables)</title>
      <author>Mark Mahoney</author>
      <pubDate>Wed, 14 Apr 2021 23:02:06 +0000</pubDate>
      <link>https://dev.to/markm208/programming-in-c-part-1-variables-1l93</link>
      <guid>https://dev.to/markm208/programming-in-c-part-1-variables-1l93</guid>
      <description>&lt;p&gt;This 10 part series of posts will cover programming in C/C++. Through a series of code 'playbacks' I will guide you through the basics of computer programming.&lt;/p&gt;

&lt;p&gt;I will cover declaring variables, if statements, loops, arrays/vectors, functions, structured data, pointers, classes, and some basic data structures. One way to describe C++ is "C with classes". I will cover classes pretty late in this series of posts so you will be learning the C language along the way until I get to classes. The things that you will learn here will help when learning other languages too because C and C++ have been around for a long time and have had an oversized influence on other programming languages. &lt;/p&gt;

&lt;p&gt;Simply watching an experienced artist paint is not enough to say that you have learned how to become a painter. Watching an experienced artist is an important &lt;em&gt;part&lt;/em&gt; of the learning process but you can only call yourself a painter after struggling to make your own paintings first. There are lot of similarities between learning to paint and learning to program. The only way to truly learn to program is to practice!&lt;/p&gt;

&lt;p&gt;There are some great, free Integrated Development Environments (IDE) out there like visual studio and xcode. IDEs are tools that allow you to write your own programs. The simplest way to get started is to use a web-based IDE. I like &lt;a href="https://replit.com/"&gt;replit&lt;/a&gt; and I can recommend it if you are unable to install one of the other IDEs.&lt;/p&gt;

&lt;p&gt;So, let's get started. You will be asked to follow along with the programs below. Just click on the links and a code playback will load (you might want to open each one in a new tab). Then click on the comments on the left hand side of the screen or hit the play button to drive the development of the code. There are some controls in the top right hand side of the screen to make the text bigger or to switch to blog mode (which is good for small screens).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flow-of-control"&gt;
  &lt;/a&gt;
  Flow of Control
&lt;/h3&gt;

&lt;p&gt;In the following program I begin to discuss the 'flow of control' in a program by describing how to print to the screen from a program:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cppbook/chapter1/01/playback.html"&gt;Name printer program&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#variables-and-types"&gt;
  &lt;/a&gt;
  Variables and Types
&lt;/h3&gt;

&lt;p&gt;This next group of programs describes declaring variables to hold data in a program. All variables have a &lt;em&gt;type&lt;/em&gt; which specifies what can be stored in them and what operations can be performed on them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cppbook/chapter1/02/playback.html"&gt;Distance formula&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cppbook/chapter1/03/playback.html"&gt;Basic types in C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cppbook/chapter1/04/playback.html"&gt;Number types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cppbook/chapter1/05/playback.html"&gt;Characters and strings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#reading-from-the-keyboard"&gt;
  &lt;/a&gt;
  Reading from the Keyboard
&lt;/h3&gt;

&lt;p&gt;This final group of programs uses many of the concepts in the previous programs and they show you how to ask the user to enter data into a running program. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cppbook/chapter1/06/playback.html"&gt;Weekly pay calculator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cppbook/chapter1/07/playback.html"&gt;Distance formula revisited&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cppbook/chapter1/08/playback.html"&gt;Gas Mileage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#call-to-action"&gt;
  &lt;/a&gt;
  Call to Action
&lt;/h3&gt;

&lt;p&gt;Now that you have reviewed the guided code walk-throughs in this post I ask that you write a program that prompts the user for three integers- one representing an hour, one representing a minute, and one representing a second. Next, calculate the number of seconds until midnight of that day. Print the number of seconds until midnight on the screen.&lt;/p&gt;

&lt;p&gt;Then, make a second prompt for the user for a single integer that represents the number of seconds until midnight. From that value calculate the hour, minute, and second of that time. Print the number of hours, minutes, and seconds to the screen.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comments-and-feedback"&gt;
  &lt;/a&gt;
  Comments and Feedback
&lt;/h3&gt;

&lt;p&gt;You can find all of these code playbacks in my free 'book', &lt;a href="https://markm208.github.io/cppbook/"&gt;An Animated Introduction to Programming in C++&lt;/a&gt;. I am always looking for feedback so please feel free to comment here or to send me a message. You can follow me on twitter &lt;a href="https://twitter.com/markm208"&gt;@markm208&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Prank your mom dad or ANYONE with this!</title>
      <author>DLC7936_King Olly.Mp.4</author>
      <pubDate>Wed, 14 Apr 2021 22:42:31 +0000</pubDate>
      <link>https://dev.to/ho/prank-your-mom-dad-or-anyone-with-this-5901</link>
      <guid>https://dev.to/ho/prank-your-mom-dad-or-anyone-with-this-5901</guid>
      <description>&lt;p&gt;Here is the link:&lt;a href="https://geekprank.com/cracked-screen/"&gt;https://geekprank.com/cracked-screen/&lt;/a&gt; Go fullscreen and hide the mouse! And watch them react!&lt;/p&gt;

</description>
      <category>lol</category>
    </item>
    <item>
      <title>setTimeout e setInterval</title>
      <author>Fernando Junior</author>
      <pubDate>Wed, 14 Apr 2021 22:39:44 +0000</pubDate>
      <link>https://dev.to/inando85/settimeout-e-setinterval-2k08</link>
      <guid>https://dev.to/inando85/settimeout-e-setinterval-2k08</guid>
      <description>&lt;p&gt;Chegamos a mais um post da minha &lt;a href="https://dev.to/inando85/bem-vindo-de-novo-javascript-1b48"&gt;saga de estudos&lt;/a&gt; em JavaScript.&lt;/p&gt;

&lt;p&gt;No post de hoje irei falar um pouco sobre os m√©todos &lt;code&gt;setTimeout&lt;/code&gt; e &lt;code&gt;setInterval&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#settimeout"&gt;
  &lt;/a&gt;
  setTimeout
&lt;/h3&gt;

&lt;p&gt;O m√©todo &lt;code&gt;setTimeout&lt;/code&gt; √© usado para executarmos uma fun√ß√£o ap√≥s um determinado tempo, esta fun√ß√£o ser√° executada uma √∫nica vez.&lt;/p&gt;

&lt;p&gt;Este m√©todo recebe dois argumentos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1: A fun√ß√£o que ser√° executada ap√≥s o tempo informado&lt;/li&gt;
&lt;li&gt;2: O tempo que deve ser esperado para executar a fun√ß√£o do primeiro argumento, esse tempo deve ser informado em milissegundos.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Execu√ß√£o do setTimeout!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Levando em considera√ß√£o o c√≥digo de exemplo acima, ap√≥s o carregamento da p√°gina, ser√° aguardado 2 segundos para executar a fun√ß√£o, que no nosso caso √© apenas informar no console a string &lt;code&gt;Execu√ß√£o do setTimeout&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setinterval"&gt;
  &lt;/a&gt;
  setInterval
&lt;/h3&gt;

&lt;p&gt;J√° o m√©todo &lt;code&gt;setInterval&lt;/code&gt;, √© usado para ficar executando uma fun√ß√£o no intervalo de tempo que foi determinado.&lt;/p&gt;

&lt;p&gt;Este m√©todo tamb√©m recebe dois argumentos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1: A fun√ß√£o que ficar√° sendo executada&lt;/li&gt;
&lt;li&gt;2: De quanto em quanto tempo essa fun√ß√£o ser√° executada, tamb√©m em milissegundos.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Execu√ß√£o do setInterval!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Observando o c√≥digo de exemplo acima, a fun√ß√£o passada como primeiro argumento ficar√° sendo executada a cada 2 segundos, logo, a cada 2 segundos ser√° impresso no console a string &lt;code&gt;Execu√ß√£o do setInterval!&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Desta forma, esse &lt;code&gt;setInterval&lt;/code&gt; ficar√° sendo executado indefinidamente, pois n√£o foi informado um momento para que esse execu√ß√£o seja parada.&lt;/p&gt;

&lt;p&gt;Para fazermos isso, devemos usar um m√©todo chamado &lt;code&gt;clearInterval&lt;/code&gt;. Observe o c√≥digo abaixo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Execu√ß√£o do setInterval!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;

 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Como pode ser observado acima, usei o m√©todo clearInterval para parar a execu√ß√£o do c√≥digo assim que a vari√°vel counter fosse igual a 5.&lt;/p&gt;

&lt;p&gt;Com isso, a cada dois segundos ser√° impresso no console &lt;code&gt;Execu√ß√£o do setInterval&lt;/code&gt; e a vari√°vel counter ser√° incrementada, assim que essa vari√°vel atingir o valor 5, cairemos na condi√ß√£o do &lt;code&gt;if&lt;/code&gt; e com isso, o m√©todo clearInterval ser√° executado, parando a execu√ß√£o da const timer.&lt;/p&gt;

&lt;p&gt;Por hoje √© isso, espero que estejam curtindo as postagens!&lt;/p&gt;

&lt;p&gt;Vou deixar aqui abaixo o link do MDN com a documenta√ß√£o sobre &lt;a href="https://developer.mozilla.org/pt-BR/docs/Learn/JavaScript/Asynchronous/Timeouts_and_intervals#settimeout"&gt;setTimeout&lt;/a&gt; e sobre &lt;a href="https://developer.mozilla.org/pt-BR/docs/Learn/JavaScript/Asynchronous/Timeouts_and_intervals#setinterval"&gt;setInterval&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Esse foi mais um post da minha saga de estudos em JavaScript Vanilla. Espero que estejam gostando!&lt;/p&gt;

&lt;p&gt;Qualquer d√∫vida ou sugest√£o, voc√™s me encontram nas minhas redes sociais:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://linkedin.com/in/inando85"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/inando85"&gt;GIthub&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/inando85"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Top 50 TypeScript Interview Questions Explained</title>
      <author>Ryan Thelin</author>
      <pubDate>Wed, 14 Apr 2021 22:31:08 +0000</pubDate>
      <link>https://dev.to/educative/top-50-typescript-interview-questions-explained-3mpc</link>
      <guid>https://dev.to/educative/top-50-typescript-interview-questions-explained-3mpc</guid>
      <description>&lt;p&gt;TypeScript is an open-source superset of JavaScript developed by Microsoft to add additional features without breaking existing programs. TypeScript is now widely used by front-end and full-stack developers for large-scale projects due to its unique benefits like static typing and many shorthand notations.&lt;/p&gt;

&lt;p&gt;Today, we'll help you prepare for your TypeScript coding interview by covering 50 of the top TypeScript interview questions and answers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here‚Äôs what we‚Äôll cover today:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#general"&gt;General TypeScript Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#syntax"&gt;TypeScript Syntax &amp;amp; Language Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#javascript"&gt;TypeScript with JavaScript Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#advanced"&gt;Advanced TypeScript Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#more"&gt;20 More TypeScript Questions to Practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tips"&gt;Tips for preparing for TypeScript interviews&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h4&gt;&lt;b&gt; Brush up on your TypeScript the easy way. &lt;/b&gt;&lt;/h4&gt;
 

&lt;p&gt;Get the hands-on practice you need to ace the TypeScript interview. By the end, you'll know how to use advanced TypeScript in professional projects.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;a href="https://www.educative.io/path/typescript-for-front-end-developers"&gt;TypeScript for Front-End Developers&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;





&lt;h3&gt;
  &lt;a href="#1-what-are-the-main-features-of-typescript"&gt;
  &lt;/a&gt;
  1. What are the main features of TypeScript?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Cross-Platform&lt;/strong&gt;:  The TypeScript compiler can be installed on any operating system such as Windows, macOS, and Linux.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;ES6 Features&lt;/strong&gt;: TypeScript includes most features of planned ECMAScript 2015 (&lt;a href="https://www.educative.io/blog/javascript-es6-tutorial-a-complete-crash-course"&gt;ES6&lt;/a&gt;) such as Arrow functions.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Object-Oriented Language&lt;/strong&gt;: TypeScript provides all the standard &lt;a href="https://www.educative.io/blog/javascript-oop-primer"&gt;OOP&lt;/a&gt; features like classes, interfaces, and modules.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Static Type-Checking&lt;/strong&gt;: TypeScript uses static typing and helps type checking at compile time. Thus, you can find compile-time errors while writing the code without running the script.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Optional Static Typing&lt;/strong&gt;: TypeScript also allows optional static typing in case you are used to the dynamic typing of JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;DOM Manipulation&lt;/strong&gt;: You can use TypeScript to manipulate the DOM for adding or removing client-side web page elements.&lt;/li&gt;
&lt;/ul&gt;



&lt;h3&gt;
  &lt;a href="#2-what-are-the-benefits-of-using-typescript"&gt;
  &lt;/a&gt;
  2. What are the benefits of using TypeScript?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;TypeScript is &lt;strong&gt;more expressive&lt;/strong&gt;, meaning it has less syntactical clutter.&lt;/li&gt;
&lt;li&gt;Easy debugging due to &lt;strong&gt;advanced debugger&lt;/strong&gt; that focuses on catching logical errors before compile-time&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Static typing&lt;/strong&gt; makes TypeScript easier to read and more structured than JavaScript's dynamic typing.&lt;/li&gt;
&lt;li&gt;Usable &lt;strong&gt;across platforms&lt;/strong&gt;, in both client and server-side projects due to versatile transpiling.&lt;/li&gt;
&lt;/ul&gt;



&lt;h3&gt;
  &lt;a href="#3-what-are-the-builtin-data-types-of-typescript"&gt;
  &lt;/a&gt;
  3. What are the built-in data types of TypeScript?
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Number type&lt;/strong&gt;: It is used to represent number type values. All the numbers in TypeScript are stored as floating-point values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;String type&lt;/strong&gt;: It represents a sequence of characters stored as Unicode UTF-16 code. Strings are enclosed in single or double quotation marks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Boolean type&lt;/strong&gt;: a logical binary switch that holds either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let identifier: bool = Boolean value;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Null type:&lt;/strong&gt; Null represents a variable whose value is undefined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; let num: number = null;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Undefined type:&lt;/strong&gt; an undefined literal that is the starting point of all variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Void type:&lt;/strong&gt; The type assigned to methods that have no return value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;unusable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#4-what-is-the-current-stable-version-of-typescript"&gt;
  &lt;/a&gt;
  4. What is the current stable version of TypeScript?
&lt;/h3&gt;

&lt;p&gt;The current stable version is 4.2.3.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#5-what-is-an-interface-in-typescript"&gt;
  &lt;/a&gt;
  5. What is an interface in TypeScript?
&lt;/h3&gt;

&lt;p&gt;Interfaces define a contract or structure for objects that use that interface. &lt;/p&gt;

&lt;p&gt;An interface is defined with the keyword &lt;code&gt;interface&lt;/code&gt; and it can include properties and method declarations using a function or an arrow function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IEmployee&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;empCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;empName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;getSalary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// arrow function&lt;/span&gt;
    &lt;span class="nx"&gt;getManagerName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#6-what-are-modules-in-typescript"&gt;
  &lt;/a&gt;
  6. What are modules in TypeScript?
&lt;/h3&gt;

&lt;p&gt;Modules in TypeScript are a collection of related variables, functions, classes, and interfaces. &lt;/p&gt;

&lt;p&gt;You can think of modules as containers that contain everything needed to execute a task. Modules can be imported to easily share code between projects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="nx"&gt;module_name&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;xyz&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#7-how-can-you-use-typescript-for-the-backend"&gt;
  &lt;/a&gt;
  7. How can you use TypeScript for the backend?
&lt;/h3&gt;

&lt;p&gt;You can use Node.js with TypeScript to bring the benefits of TypeScript to backend work. &lt;/p&gt;

&lt;p&gt;Simply install the TypeScript compiler into your Node.js by entering the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="nx"&gt;typescript&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#8-what-are-type-assertions-in-typescript"&gt;
  &lt;/a&gt;
  8. What are Type assertions in TypeScript?
&lt;/h3&gt;

&lt;p&gt;Type assertion in TypeScript works like typecasting in other languages but without the type checking or restructuring of data possible in languages like C# and Java. Type assertion has no impact on runtime and is used purely by the compiler.&lt;/p&gt;

&lt;p&gt;Type assertion is essentially a soft version of typecasting that suggests the compiler see the variable as a certain type but does not force it into that mold if it's in a different form.&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#typescript-syntax-amp-language-basics"&gt;
  &lt;/a&gt;
  TypeScript Syntax &amp;amp; Language Basics
&lt;/h2&gt;



&lt;h3&gt;
  &lt;a href="#9-how-do-you-create-a-variable-in-typescript"&gt;
  &lt;/a&gt;
  9. How do you create a variable in TypeScript?
&lt;/h3&gt;

&lt;p&gt;You can create variables in three ways: &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, and &lt;code&gt;const&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;var&lt;/code&gt; is the old style of fiercely scoped variables. You should avoid using &lt;code&gt;var&lt;/code&gt; whenever possible because it can cause issues in larger projects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;let&lt;/code&gt; is the default way of declaring variables in TypeScript, Compared to &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt; reduces the number of compile-time errors and increases code readability.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;const&lt;/code&gt; creates a constant variable whose value cannot change. It uses the same scoping rules as &lt;code&gt;let&lt;/code&gt; and helps reduce overall program complexity.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#10-how-do-you-call-a-base-class-constructor-from-a-child-class-in-typescript"&gt;
  &lt;/a&gt;
  10. How do you call a base class constructor from a child class in TypeScript?
&lt;/h3&gt;

&lt;p&gt;You can use the &lt;code&gt;super()&lt;/code&gt; function to call the constructor of the base class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Animal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;theName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;distanceInMeters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; moved &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;distanceInMeters&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;m.`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Snake&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Animal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;distanceInMeters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Slithering...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;distanceInMeters&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#11-explain-how-to-use-typescript-mixins"&gt;
  &lt;/a&gt;
  11. Explain how to use TypeScript Mixins.
&lt;/h3&gt;

&lt;p&gt;Mixins are essentially inheritance that works in the opposite direction. Mixins allow you to build new classes by combining simpler partial class setups from previous classes.&lt;/p&gt;

&lt;p&gt;Instead of class &lt;code&gt;A&lt;/code&gt; extending class &lt;code&gt;B&lt;/code&gt; to gain its functionality, class &lt;code&gt;B&lt;/code&gt; takes from class &lt;code&gt;A&lt;/code&gt; and returns a new class with additional functionality.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#12-how-do-you-check-null-and-undefined-in-typescript"&gt;
  &lt;/a&gt;
  12. How do you check null and undefined in TypeScript?
&lt;/h3&gt;

&lt;p&gt;You can either use a juggle-check, which checks both null and undefined, and strict-check which returns true for values set to null and won't evaluate true for undefined variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//juggle&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; == null&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; === null&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; is undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#13-what-are-getterssetters-in-typescript-how-do-you-use-them"&gt;
  &lt;/a&gt;
  13. What are getters/setters in TypeScript? How do you use them?
&lt;/h3&gt;

&lt;p&gt;Getters and setters are special types of methods that help you delegate different levels of access to private variables based on the needs of the program.&lt;/p&gt;

&lt;p&gt;Getters allow you to reference a value but cannot edit it. Setters allow you to change the value of a variable but not see its current value. These are essential to achieve encapsulation.&lt;/p&gt;

&lt;p&gt;For example, a new employer may be able to &lt;code&gt;get&lt;/code&gt; the number of employees in the company but does not have permission to &lt;code&gt;set&lt;/code&gt; the number of employees.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fullNameMaxLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Employee&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;_fullName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_fullName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newName&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;newName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fullNameMaxLength&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fullName has a max length of &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;fullNameMaxLength&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_fullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;employee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bob Smith&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#14-how-do-you-allow-classes-defined-in-a-module-to-be-accessible-outside-of-a-module"&gt;
  &lt;/a&gt;
  14. How do you allow classes defined in a module to be accessible outside of a module?
&lt;/h3&gt;

&lt;p&gt;You can use the &lt;code&gt;export&lt;/code&gt; keyword to open modules up for use outside the module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="nx"&gt;Admin&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// use the export keyword in TypeScript to access the class outside&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Employee&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;alex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;alex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;alex@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// The Admin variable will allow you to access the Employee class outside the module with the help of the export keyword in TypeScript&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;nick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nick&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nick@yahoo.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#15-how-do-we-convert-string-to-a-number-using-typescript"&gt;
  &lt;/a&gt;
  15. How do we convert string to a number using Typescript?
&lt;/h3&gt;

&lt;p&gt;Similar to JavaScript, You can use the &lt;code&gt;parseInt&lt;/code&gt; or &lt;code&gt;parseFloat&lt;/code&gt; functions to convert a string to an integer or float, respectively. You can also use the unary operator &lt;code&gt;+&lt;/code&gt; to convert a string to the most fitting numeric type, "3" becomes the integer &lt;code&gt;3&lt;/code&gt; while "3.14" becomes the float &lt;code&gt;3.14&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;32&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#16-what-is-a-map-file-and-whyhow-can-you-use-it"&gt;
  &lt;/a&gt;
  16. What is a '.map' file, and why/how can you use it?
&lt;/h3&gt;

&lt;p&gt;A map file is a source map that shows how the original TypeScript code was interpreted into usable JavaScript code. They help simplify debugging because you can catch any odd compiler behavior. &lt;/p&gt;

&lt;p&gt;Debugging tools can also use these files to allow you to edit the underlying TypeScript rather than the emitted JavaScript file.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#17-what-are-classes-in-typescript-how-do-you-define-them"&gt;
  &lt;/a&gt;
  17. What are classes in TypeScript? How do you define them?
&lt;/h3&gt;

&lt;p&gt;Classes represent the shared behaviors and attributes of a group of related objects. &lt;/p&gt;

&lt;p&gt;For example, our class might be &lt;code&gt;Student&lt;/code&gt; which all have the &lt;code&gt;attendClass&lt;/code&gt; method. On the other hand, &lt;code&gt;John&lt;/code&gt; is an individual instance of type &lt;code&gt;Student&lt;/code&gt; and may have additional unique behaviors like &lt;code&gt;attendExtracurricular&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You declare classes using the keyword &lt;code&gt;class&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Student&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
    &lt;span class="nl"&gt;studCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
    &lt;span class="nl"&gt;studName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;studName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;studCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
    &lt;span class="p"&gt;}&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;h4&gt;
  &lt;a href="#keep-practicing-typescript" class="anchor"&gt;
  &lt;/a&gt;
  Keep practicing TypeScript.
&lt;/h4&gt;

&lt;p&gt;Prepare for your interview with expert lessons and 400 hands-on coding environments. Educative's text-based courses are easy to skim and focus on hirable skills to get you prepared in half the time.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;a href="https://www.educative.io/path/typescript-for-front-end-developers"&gt;TypeScript for Front-End Developers&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#typescript-with-javascript-questions"&gt;
  &lt;/a&gt;
  TypeScript with JavaScript Questions
&lt;/h2&gt;



&lt;h3&gt;
  &lt;a href="#18-how-does-typescript-relate-to-javascript"&gt;
  &lt;/a&gt;
  18. How does TypeScript relate to JavaScript?
&lt;/h3&gt;

&lt;p&gt;TypeScript is an open-source syntactic superset of JavaScript that compiles to JavaScript. All original JavaScript libraries and syntax still works but TypeScript adds additional syntax options and compiler features not found in JavaScript. &lt;/p&gt;

&lt;p&gt;TypeScript can also interface with most of the same technologies as JavaScript, such as &lt;a href="https://www.educative.io/blog/angularjs-tutorial"&gt;Angular&lt;/a&gt; and &lt;a href="https://www.educative.io/blog/what-is-jquery-javascript-library"&gt;jQuery&lt;/a&gt;.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#19-what-is-jsx-in-typescript"&gt;
  &lt;/a&gt;
  19. What is JSX in TypeScript?
&lt;/h3&gt;

&lt;p&gt;JSX is an embeddable XML-like syntax that allows you to create &lt;a href="https://www.educative.io/blog/html-beginners-tutorial-build-from-scratch"&gt;HTML&lt;/a&gt;. TypeScript supports embedding, type checking, and compiling JSX directly to JavaScript.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#20-what-are-the-jsx-modes-typescript-supports"&gt;
  &lt;/a&gt;
  20. What are the JSX modes TypeScript supports?
&lt;/h3&gt;

&lt;p&gt;TypeScript has built-in support for &lt;code&gt;preserve&lt;/code&gt;, &lt;code&gt;react&lt;/code&gt;, and &lt;code&gt;react-native&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;preserve&lt;/code&gt; keeps the JSX intact for use in a subsequent transformation.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;react&lt;/code&gt; does not go through a JSX transformation and instead emits &lt;code&gt;react.createElement&lt;/code&gt; and outputs as a &lt;code&gt;.js&lt;/code&gt; file extension.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;react-native&lt;/code&gt; combines &lt;code&gt;preserve&lt;/code&gt; and &lt;code&gt;react&lt;/code&gt; in that it maintains all JSX and outputs as a &lt;code&gt;.js&lt;/code&gt; extension.&lt;/li&gt;
&lt;/ul&gt;



&lt;h3&gt;
  &lt;a href="#21-how-do-you-compile-a-typescript-file"&gt;
  &lt;/a&gt;
  21. How do you compile a TypeScript file?
&lt;/h3&gt;

&lt;p&gt;You need to call the TypeScript compiler &lt;code&gt;tsc&lt;/code&gt; to compile a file. You'll need to have the TypeScript compiler installed, which you can do using &lt;code&gt;npm&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="nx"&gt;typescript&lt;/span&gt;
&lt;span class="nx"&gt;tsc&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TypeScript&lt;/span&gt; &lt;span class="nx"&gt;File&lt;/span&gt; &lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#22-what-scopes-are-available-in-typescript-how-does-this-compare-to-js"&gt;
  &lt;/a&gt;
  22. What scopes are available in TypeScript? How does this compare to JS?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Global Scope&lt;/strong&gt;: defined outside of any class and can be used anywhere in the program.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Function/Class Scope:&lt;/strong&gt; variables defined in a function or class can be used anywhere within that scope.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Local Scope/Code Block&lt;/strong&gt;: variables defined in the local scope can be used anywhere in that block.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advanced-typescript-questions"&gt;
  &lt;/a&gt;
  Advanced TypeScript Questions
&lt;/h2&gt;



&lt;h3&gt;
  &lt;a href="#23-what-are-arrowlambda-functions-in-typescript"&gt;
  &lt;/a&gt;
  23. What are Arrow/lambda functions in TypeScript?
&lt;/h3&gt;

&lt;p&gt;Fat arrow function is a shorthand syntax for defining function expressions of anonymous functions. It's similar to lambda functions in other languages. The arrow function lets you skip the &lt;code&gt;function&lt;/code&gt; keyword and write more concise code.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#24-explain-rest-parameters-and-the-rules-to-declare-rest-parameters"&gt;
  &lt;/a&gt;
  24. Explain Rest parameters and the rules to declare Rest parameters.
&lt;/h3&gt;

&lt;p&gt;Rest parameters allow you to pass a varied number of arguments (zero or more) to a function. This is useful when you're unsure how many parameters a function will receive. All arguments after the rest symbol &lt;code&gt;...&lt;/code&gt; will be stored in an array.&lt;br&gt;
For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Steve&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bill&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns "Hello Steve, Bill!"&lt;/span&gt;

&lt;span class="nx"&gt;Greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// returns "Hello !"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The rest parameter must be the last on parameter definition and you can only have 1 rest parameter per function.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#25-what-are-tripleslash-directives-what-are-some-of-the-tripleslash-directives"&gt;
  &lt;/a&gt;
  25. What are Triple-Slash Directives? What are some of the triple-slash directives?
&lt;/h3&gt;

&lt;p&gt;Triple-slash Directives are single-line comments that contain an XML tag to use as compiler directives. Each directive signals what to load during the compilation process. Triple-slash Directives only work at the top of their file and will be treated as normal comments anywhere else in the file.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;/// &amp;lt;reference path="..." /&amp;gt;&lt;/code&gt; is the most common directive and defines the dependency between files.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/// &amp;lt;reference types="..." /&amp;gt;&lt;/code&gt; is similar to &lt;code&gt;path&lt;/code&gt; but defines a dependency for a package.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/// &amp;lt;reference lib="..." /&amp;gt;&lt;/code&gt; allows you to explicitly include the built-in &lt;code&gt;lib&lt;/code&gt; file. &lt;/li&gt;
&lt;/ul&gt;



&lt;h3&gt;
  &lt;a href="#26-what-does-the-raw-omit-endraw-type-do"&gt;
  &lt;/a&gt;
  26. What does the &lt;code&gt;Omit&lt;/code&gt; type do?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Omit&lt;/code&gt; is a form of utility type, which facilitates common type transformations. Omit lets you construct a type by passing a current &lt;code&gt;Type&lt;/code&gt; and selecting &lt;code&gt;Keys&lt;/code&gt; to be omitted in the new type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Omit&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Keys&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;createdAt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;TodoPreview&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Omit&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#27-how-do-you-achieve-function-overloading-in-typescript"&gt;
  &lt;/a&gt;
  27. How do you achieve function overloading in TypeScript?
&lt;/h3&gt;

&lt;p&gt;To overload, a function in TypeScript, simply create two functions of the same name but have different argument/return types. Both functions must accept the same number of arguments. This is an essential part of polymorphism in TypeScript.&lt;/p&gt;

&lt;p&gt;For example, you could make an &lt;code&gt;add&lt;/code&gt; function that sums the two arguments if they're numbers and concatenates them if they're strings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Steve&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns "Hello Steve" &lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 30 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#28-how-do-you-make-all-properties-of-an-interface-optional"&gt;
  &lt;/a&gt;
  28. How do you make all properties of an interface optional?
&lt;/h3&gt;

&lt;p&gt;You can use the &lt;code&gt;partial&lt;/code&gt; mapped type to easily make all properties optional.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#29-when-should-you-use-the-unknown-keyword"&gt;
  &lt;/a&gt;
  29. When should you use the ‚Äòunknown‚Äô keyword?
&lt;/h3&gt;

&lt;p&gt;You should use &lt;code&gt;unknown&lt;/code&gt; if you don't know which type to expect upfront but want to assign it later on, and the &lt;code&gt;any&lt;/code&gt; keyword will not work.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#30-what-are-decorators-and-what-can-they-be-applied-to"&gt;
  &lt;/a&gt;
  30. What are decorators, and what can they be applied to?
&lt;/h3&gt;

&lt;p&gt;A decorator is a special kind of declaration that lets you modify classes or class members all at once by marking them with the &lt;code&gt;@&amp;lt;name&amp;gt;&lt;/code&gt; annotation. Each decorator must refer to a function that'll be evaluated at runtime. &lt;/p&gt;

&lt;p&gt;For example, the decorator &lt;code&gt;@sealed&lt;/code&gt; would correspond to the &lt;code&gt;sealed&lt;/code&gt; function. Anything marked with &lt;code&gt;@sealed&lt;/code&gt; would be used to evaluate the &lt;code&gt;sealed&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sealed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do something with 'target' ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;They can be attached to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Class declarations&lt;/li&gt;
&lt;li&gt;Methods&lt;/li&gt;
&lt;li&gt;Accessors&lt;/li&gt;
&lt;li&gt;Properties&lt;/li&gt;
&lt;li&gt;Parameters&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Decorators are not enabled by default. To enable them, you have to edit the &lt;code&gt;experimentalDecorators&lt;/code&gt; field in the compiler options from your &lt;code&gt;tsconfig.json&lt;/code&gt; file or the command line.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#20-more-typescript-questions-to-practice"&gt;
  &lt;/a&gt;
  20 More TypeScript Questions to Practice
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;31.&lt;/strong&gt; What is the default access modifier for member variables and methods in TypeScript?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;32.&lt;/strong&gt; When should you use the &lt;code&gt;declare&lt;/code&gt; keyword?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;33.&lt;/strong&gt; What are generics in TypeScript? When would you use them?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;34.&lt;/strong&gt; How and when would you use the &lt;code&gt;enum&lt;/code&gt; collection?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;35.&lt;/strong&gt; What are namespaces and why would you use them?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;36.&lt;/strong&gt; How would you implement optional parameters?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;37.&lt;/strong&gt; Name 3 differences between TypeScript and JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;38.&lt;/strong&gt; Is TypeScript a &lt;a href="https://www.educative.io/blog/what-is-functional-programming-python-js-java"&gt;functional programming&lt;/a&gt; language?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;39.&lt;/strong&gt; What TypeScript features would be beneficial for a &lt;a href="https://www.educative.io/blog/fullstack-javascript-introduction"&gt;full-stack developer&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;40.&lt;/strong&gt; What are the advantages of TypeScript Language Service (TSLS)?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;41.&lt;/strong&gt; What features does TypeScript offer to help make reusable components?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;42.&lt;/strong&gt; What is the difference between a tuple and an array in TypeScript?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;43.&lt;/strong&gt; What is the difference between internal and external modules in TypeScript?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;44.&lt;/strong&gt; What collections does TypeScript support?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;45.&lt;/strong&gt; What is the &lt;code&gt;Record&lt;/code&gt; type used for?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;46.&lt;/strong&gt; What advantages does TypeScript bring to a tech stack?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;47.&lt;/strong&gt; How do you generate a definition file using TypeScript?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;48.&lt;/strong&gt; Does TypeScript support abstract classes?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;49.&lt;/strong&gt; How can you set your TypeScript file to compile whenever there's a change?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;50.&lt;/strong&gt; What are &lt;code&gt;Ambients&lt;/code&gt; in TypeScript and when should you use them?&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tips-for-preparing-for-typescript-interviews"&gt;
  &lt;/a&gt;
  Tips for preparing for TypeScript interviews
&lt;/h2&gt;

&lt;p&gt;Preparing for interviews is always stressful, but proper preparation beforehand can help you build confidence. When preparing for your interview, remember to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get practice working with questions &lt;strong&gt;hands-on&lt;/strong&gt;, not just reading them.&lt;/li&gt;
&lt;li&gt;Break up your study material into sections and &lt;strong&gt;quiz yourself&lt;/strong&gt; after each one.&lt;/li&gt;
&lt;li&gt;Prepare for your &lt;a href="https://www.educative.io/blog/behavioral-interviews-how-to-prepare-and-ace-interview-questions"&gt;behavioral interview&lt;/a&gt;, which is equally as important as the coding portion.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To help you get more hands-on practice with TypeScript, Educative has created the &lt;a href="https://www.educative.io/path/typescript-for-front-end-developers"&gt;&lt;strong&gt;TypeScript for Front-End Developers Path&lt;/strong&gt;&lt;/a&gt;. This Path is full of our best TypeScript content from across our site. You'll revise the fundamentals, explore practical applications, and build React projects all using Educative's in-browser coding environments. &lt;/p&gt;

&lt;p&gt;By the end of the Path, you'll have the skills you need to ace your next TypeScript interview.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#continue-reading-about-typescript-and-coding-interviews"&gt;
  &lt;/a&gt;
  Continue reading about TypeScript and coding interviews
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/typescript-tutorial"&gt;TypeScript Tutorial: A step-by-step guide to learn TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/react-and-typescript"&gt;Getting started with React and TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/coding-interivew-preparation-bootcamp"&gt;3 Month Coding Interview Preparation Bootcamp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>typescript</category>
      <category>career</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Erlscripten: Transpiling Erlang to Javascript. Yes, you read it right.
</title>
      <author>omar-saadoun</author>
      <pubDate>Wed, 14 Apr 2021 22:20:41 +0000</pubDate>
      <link>https://dev.to/omarsaadoun/erlscripten-49gg</link>
      <guid>https://dev.to/omarsaadoun/erlscripten-49gg</guid>
      <description>&lt;p&gt;It is safe to say that Erlang as a language and framework is the most reliable choice out there to build highly stable applications, running the likes of Whatsapp and Discord. Now, there is a transpiler introducing concepts of Erlang to web technology, which would be near impossible to implement manually using Javascript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--raO1QVh_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wsu0eumfaucke1ni19q9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--raO1QVh_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wsu0eumfaucke1ni19q9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here at √¶ternity, we‚Äôve envisioned for a long time that running major parts of a blockchain protocol in the context of modern web frameworks would mean a huge leap for the adoption and scalability of distributed ledger technology. What if you could run an ad-hoc blockchain node in your browser, or use state channels to quickly make safe payments using your phone?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As a solid foundation had to be laid for a reliable infrastructure first, that was not conceivable as of yet. Until now.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#erlscripten-is-here"&gt;
  &lt;/a&gt;
  Erlscripten is here.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uXChxkGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqxsabamfrt7qf52x8ub.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uXChxkGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqxsabamfrt7qf52x8ub.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Erlscripten&lt;/strong&gt; (sic not Emscripten!) is a source-to-source transpiler capable of converting most Erlang codebases into semantically equivalent Purescript projects. Purescript is a strongly typed language heavily inspired by Haskell and which compiles down to Javascript. Taking Purescript as an intermediary step, Erlscripten allows you to take your existing Erlang application and easily ship it out to Javascript users ‚Äî your Erlang code can now run safely in the browser ‚Äî enabling code sharing between an Erlang backend and the frontend. It is highly interoperable with Javascript ‚Äî Javascript can easily call the transpiled code and then make use of the results ‚Äî you can easily map Erlang constructs and types to readily available JS constructs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It‚Äôs zero hassle&lt;/strong&gt; ‚Äî you point Erlscripten to an existing Rebar3 Erlang project and in result get a compatible spago project ready to be used in existing Purescript/Javascript projects. &lt;strong&gt;While at it, we transpiled the Erlang runtime (ERTS) that allows you to run arbitrary transpiled Erlang code:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/erlscripten/erlps-core"&gt;https://github.com/erlscripten/erlps-core&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#purpose"&gt;
  &lt;/a&gt;
  Purpose
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Besides bringing the components of the √¶ternity blockchain to more platforms and web frameworks, there are two novel use cases for Erlscripten:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#1-code-reuse-between-erlang-backends-and-javascript-frontends"&gt;
  &lt;/a&gt;
  1 ‚Äî Code reuse between Erlang backends and Javascript frontends;
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#2-the-creation-of-a-new-paradigm-for-developing-frontend-applications"&gt;
  &lt;/a&gt;
  2 ‚Äî The creation of a new paradigm for developing frontend applications.
&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;√¶ternity is a blockchain platform primarily written in Erlang. In the upcoming era of Hyperchains the need for code distribution between frontend and backend applications is high. Therefore we need to move some parts of √¶ternity infrastructure to the clients‚Äô side in order to provide a more reliable and decentralized system. It doesn‚Äôt make sense to rewrite our code in Javascript/Rust manually as this would require a lengthy rewrite and then the need to maintain and sync 2 codebases. The high need of interoperability between Erlang and Javascript is where Erlscripten was born. We can transpile what we need and distribute it to the browser where it‚Äôs needed. &lt;strong&gt;One side effect of Erlscripten is that it will soon be possible to write Frontend applications directly in Erlang&lt;/strong&gt; ‚Äî Erlang‚Äôs actor based programming maps really nicely to existing reactive frameworks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#similar-projects"&gt;
  &lt;/a&gt;
  Similar projects
&lt;/h3&gt;

&lt;p&gt;We‚Äôre not the first ones with the need of Erlang/Javascript interoperability &lt;/p&gt;

&lt;p&gt;‚Äî &lt;a href="https://github.com/elixirscript/elixirscript"&gt;Elixirscript&lt;/a&gt; is a Elixir to Javascript transpiler with similar goals as our project. The main downside of Elixirscript is the lack of OTP support (Erlang‚Äôs main framework for building failsafe applications) ‚Äî it works on a really small subset of the Elixir language and they need to rewrite the Elixir standard library in Javascript for it to work. In contrast we are OTP compatible ‚Äî we transpiled the real Erlang standard library from OTP and distributed it open-source: &lt;a href="https://github.com/erlscripten/erlps-stdlib"&gt;https://github.com/erlscripten/erlps-stdlib&lt;/a&gt; (&lt;br&gt;
Erlang Solutions&lt;br&gt;
).&lt;/p&gt;

&lt;p&gt;To demonstrate our point we were capable of taking the compiler of our smart contract language (&lt;a href="https://github.com/aeternity/aesophia"&gt;https://github.com/aeternity/aesophia&lt;/a&gt;) and converting it to be runnable in the browser: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/erlscripten/erlps-aesophia"&gt;https://github.com/erlscripten/erlps-aesophia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We tested the transpiled project and it works! &lt;strong&gt;Demonstrating our point that we have support for advanced OTP constructs including ETS, Erlang‚Äôs in-memory database.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Notably, &lt;a href="https://github.com/lumen/lumen"&gt;Lumen&lt;/a&gt; has similar goals to our project, after their project is done it will be much faster than Erlscripten and probably more capable ‚Äî the downside is that Lumen is in WIP phase and it will take a long time for Lumen to be ready whereas Erlscripten is now and here! Ready to be used!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#status-quo"&gt;
  &lt;/a&gt;
  Status quo
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#what-is-supported"&gt;
  &lt;/a&gt;
  What is supported
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Majority of Erlang expression&lt;/li&gt;
&lt;li&gt;Arbitrary arity functions&lt;/li&gt;
&lt;li&gt;Pattern matching&lt;/li&gt;
&lt;li&gt;Records (via tuples)&lt;/li&gt;
&lt;li&gt;Binaries&lt;/li&gt;
&lt;li&gt;Lambdas&lt;/li&gt;
&lt;li&gt;Tail recursion&lt;/li&gt;
&lt;li&gt;Exceptions&lt;/li&gt;
&lt;li&gt;Process dictionaries&lt;/li&gt;
&lt;li&gt;Code server, module loading&lt;/li&gt;
&lt;li&gt;Imports and exports&lt;/li&gt;
&lt;li&gt;Compatibility utilities&lt;/li&gt;
&lt;li&gt;Common errors (function_clause, case_clause, badarity, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#what-is-partially-supported"&gt;
  &lt;/a&gt;
  What is partially supported
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/erlscripten/erlps-stdlib/"&gt;Erlang‚Äôs standard library&lt;/a&gt; (most essential modules; lists, maps, string, etc.)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/erlscripten/erlps-core"&gt;Erlang builtins&lt;/a&gt; (the list is growing and growing!)&lt;/li&gt;
&lt;li&gt;Rebar project transpilation&lt;/li&gt;
&lt;li&gt;ETS&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#what-is-under-development"&gt;
  &lt;/a&gt;
  What is under development
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Bitstrings&lt;/li&gt;
&lt;li&gt;Leaking variable scopes&lt;/li&gt;
&lt;li&gt;Basic erlang process emulation&lt;/li&gt;
&lt;li&gt;NIFs (will be done through C to WASM compilation)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#works-on-the-purescript-compiler"&gt;
  &lt;/a&gt;
  Works on the PureScript compiler
&lt;/h3&gt;

&lt;p&gt;The original PureScript turned out not to suffice our use case perfectly. For instance, we had some issues regarding handling &lt;a href="https://en.wikipedia.org/wiki/Tail_call"&gt;tail call optimization&lt;/a&gt; which started several discussions and contributions on their GitHub:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/purescript/purescript/pull/3968"&gt;Pull Request: Trigger TCO even when there are some self references in non-tail positions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/purescript/purescript/pull/3958"&gt;Pull Request: Support TCO for functions with tail-recursive inner functions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/purescript/purescript/issues/3957"&gt;Issue: TCO does not trigger in &lt;code&gt;case&lt;/code&gt; expressions with assign guards&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/purescript/purescript/issues/3967"&gt;Proposal: Take more opportunities to trigger TCO&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of the problems have been already fixed due to our reports, but some of them haven‚Äôt been accepted as they involved some overhead on the performance in the general case. Because of this &lt;a href="https://github.com/erlscripten/purescript"&gt;we have forked the compiler&lt;/a&gt; and started adjusting it for our needs ourselves. Our works mainly involve the optimization tweaks and updating the backend to EcmaScript6 (instead of 5). For instance, we have implemented a much more aggressive tail call optimizer, increased strictness of AST traversals and completely rewritten the code generation for pattern match alternatives.&lt;/p&gt;

&lt;p&gt;During this work we have spotted some performance bugs and started working on fixing them on our own. One of our patches has already been approved and awaits merging:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/purescript/purescript/pull/4006"&gt;Fix exponential collapsing of BindingGroups&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples:
&lt;/h3&gt;

&lt;p&gt;While we are perfectly aware that neither Erlang nor PureScript are the most common sight to see, we invite you to take a look: Here are some examples of how Erlscripten transforms existing Erlang code into PureScript. The generated code is obviously larger as we need to take care of the type system (PureScript is typed while Erlang is not) and tackle some syntactic sugars. Furthermore, we need to emulate the default error handling and exceptions that are being solved much differently in Erlang in order to preserve compatibility.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#factorial"&gt;
  &lt;/a&gt;
  Factorial:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hetWk4S9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z15rglu3qfopre2khxyh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hetWk4S9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z15rglu3qfopre2khxyh.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find the code example here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/erlscripten/erlscripten/blob/main/examples/factorial.erl"&gt;https://github.com/erlscripten/erlscripten/blob/main/examples/factorial.erl&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#continuation-based-list-reversal-via-catamorphic-transformation"&gt;
  &lt;/a&gt;
  Continuation based list reversal via catamorphic transformation:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yXKCdULN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iuj7nh1q8qypdhy6j818.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yXKCdULN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iuj7nh1q8qypdhy6j818.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find the code example here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/erlscripten/erlscripten/blob/main/examples/list_reverse.erl"&gt;https://github.com/erlscripten/erlscripten/blob/main/examples/list_reverse.erl&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#run-erlang-in-the-browser"&gt;
  &lt;/a&gt;
  Run Erlang in the browser!
&lt;/h2&gt;

&lt;p&gt;Erlang to PureScript transpiler &amp;gt; &lt;a href="https://github.com/erlscripten/erlscripten"&gt;https://github.com/erlscripten/erlscripten&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Original article from : &lt;br&gt;
&lt;a href="https://blog.aeternity.com/erlscripten-92c815786987"&gt;https://blog.aeternity.com/erlscripten-92c815786987&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>erlang</category>
      <category>blockchain</category>
      <category>aeternityblockchain</category>
      <category>elixir</category>
    </item>
    <item>
      <title>Talk Notes: "Secrets of Successful Mentors" (RailsConf 2021)</title>
      <author>Sylwia Vargas</author>
      <pubDate>Wed, 14 Apr 2021 21:58:31 +0000</pubDate>
      <link>https://dev.to/sylwiavargas/talk-notes-secrets-of-successful-mentors-railsconf-2021-25h8</link>
      <guid>https://dev.to/sylwiavargas/talk-notes-secrets-of-successful-mentors-railsconf-2021-25h8</guid>
      <description>&lt;p&gt;‚ú® &lt;strong&gt;What is this post about&lt;/strong&gt;: As a part of my professional growth, I make time to watch conference talks on Ruby, Rails, JS, React, tech writing, and tech trivia. Previously, I'd just watch them but now I will take and publish notes for future reference. This talk was a part of RailsConf 2021 that I'm participating in at the time of writing. &lt;/p&gt;

&lt;p&gt;‚ú® &lt;strong&gt;Talk&lt;/strong&gt;: 'The Secrets of Successful Mentors' by &lt;a href="https://twitter.com/dougbradbury"&gt;Doug Bradbury&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;‚ú® &lt;strong&gt;Prep materials&lt;/strong&gt;: &lt;a href="https://github.com/dougbradbury/secrets-of-successful-mentors"&gt;GitHub Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚ú® &lt;strong&gt;One-paragraph summary&lt;/strong&gt;: How do the best mentors operate? What makes them so effective? In this workshop, we will explore some counter-intuitive techniques that great mentors use in helping their apprentices learn fast and achieve extraordinary results. Learn how to give just the right learning challenge and just the right time and how to give feedback in a way that will actually be heard!&lt;/p&gt;

&lt;p&gt;‚ú® &lt;strong&gt;Impression&lt;/strong&gt;: I have participated in a number of workshops and talks on mentorship and this was the best by far. I am really impressed by Doug's experience and empathy üíï&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#notes"&gt;Notes&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#successful-mentors-mentor-because-they-want-to"&gt;Successful mentors mentor because they want to&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#successful-mentors-don-t-teach-they-mentor"&gt;Successful mentors don't teach, they mentor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#successful-mentors-ask-more-qs-than-they-answer"&gt;Successful mentors ask more qs than they answer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#successful-mentors-colearn"&gt;Successful mentors co-learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#successful-mentors-follow-the-learner"&gt;Successful mentors follow the learner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#successful-mentors-replay-their-reactions"&gt;Successful mentors replay their reactions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#successful-mentors-look-for-outcomes"&gt;Successful mentors look for outcomes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#successful-mentors-individualize-the-pluralize-concepts"&gt;Successful mentors individualize, the pluralize concepts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#successful-mentors-define-clear-learning-outcomes"&gt;Successful mentors define clear learning outcomes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#successful-mentors-protect-separate-and-leave"&gt;Successful mentors protect, separate, and leave&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#read-more"&gt;Read more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Successful mentors mentor because they want to&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;It's important for you to know why you're doing this&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Successful mentors don't teach, they mentor&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;you're working with their character, not behavior; with their skills, not their knowledge (it's their responsibility to learn);&lt;/li&gt;
&lt;li&gt;deep-level learning: we are looking for synthesizing what they've learned;&lt;/li&gt;
&lt;li&gt;the person should be transformed through the time they've spent with you;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Teaching&lt;/th&gt;
&lt;th&gt;Mentoring&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Behavior&lt;/td&gt;
&lt;td&gt;character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Knowledge&lt;/td&gt;
&lt;td&gt;Skills&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Regurgitate&lt;/td&gt;
&lt;td&gt;Synthesize&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Certify&lt;/td&gt;
&lt;td&gt;Transform&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Group&lt;/td&gt;
&lt;td&gt;1-1 Relationship&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Successful mentors ask more qs than they answer&lt;/strong&gt; 

&lt;ul&gt;
&lt;li&gt;This is meant to encourage deeper learning&lt;/li&gt;
&lt;li&gt;Following &lt;a href="https://en.wikipedia.org/wiki/Socratic_method"&gt;the Socratic method&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Successful mentors co-learn&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Experts can actually make poor mentors because they don't remember what it is like to learn&lt;/li&gt;
&lt;li&gt;Learning happens in relation to what you already know by building a "scaffolding" to what you already know -- experts usually don't have these scaffoldings because they already have a whole structure&lt;/li&gt;
&lt;li&gt;the best mentor is someone near you, just ahead of you (&lt;a href="https://www.simplypsychology.org/Zone-of-Proximal-Development.html"&gt;zone of proximal development&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;expert-mentors can be a bit intimidating&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Successful mentors follow the learner&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;the Montessori method of "follow the learner": watch them, present them with the next step, next challenge&lt;/li&gt;
&lt;li&gt;what is &lt;strong&gt;F L O W&lt;/strong&gt;? It is a perfect balance between relaxation and arousal; if there's too much relaxation, you'll be bored; if there's too much arousal, you'll be anxious; both inhibit learning; ideally, you will be bouncing between a little bit of relaxation and arousal; &lt;/li&gt;
&lt;li&gt;as a mentor, it's important to find the right challenge, just a little bit more than what the person already knows;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Successful mentors replay their reactions&lt;/strong&gt; (I think that was the phrasing)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;when we receive critical feedback, our brain may just "shut down" because of the &lt;em&gt;fight-flight-freeze&lt;/em&gt; response&lt;/li&gt;
&lt;li&gt;fight, flight, freeze response narrows your focus and just emphasizes survival &lt;/li&gt;
&lt;li&gt;how we present what we have to say triggers the defensive reactions - and we usually present feedback as a judgment&lt;/li&gt;
&lt;li&gt;we want to give people the feedback but the best way to deliver it is to make it not about them but about us&lt;/li&gt;
&lt;li&gt;use phrases like: "this is how it came across to me", "this is how I saw it"&lt;/li&gt;
&lt;li&gt;if you replay your reactions, feedback becomes the start of the conversations, not their end&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;"Most feedback is much more about the person giving the feedback than the person receiving it" &lt;br&gt;
"If you don't have anything nice, say something about yourself"&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Instead of ...&lt;/th&gt;
&lt;th&gt;Try ...&lt;/th&gt;
&lt;th&gt;Because ...&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Can I give you some feedback?&lt;/td&gt;
&lt;td&gt;Here's my reaction. / Tell me about your thought process here.&lt;/td&gt;
&lt;td&gt;It causes fear, you can't say no, it may sound patronizing (are you implying I can't take feedback?)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Good job!&lt;/td&gt;
&lt;td&gt;That works for me! I liked what you did there. Tell me how you've arrived at this solution.&lt;/td&gt;
&lt;td&gt;It's not specific, not helpful. It's rooted in approval and power dynamic (who am I to tell you what is "good"?!)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Here‚Äôs what you should do.&lt;/td&gt;
&lt;td&gt;Have you considered X? / Here's what I'd do (...) - let's talk about it.&lt;/td&gt;
&lt;td&gt;It's a judgment.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;That won‚Äôt really work.&lt;/td&gt;
&lt;td&gt;-,-&lt;/td&gt;
&lt;td&gt;-,-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;You need to improve your communication skills.&lt;/td&gt;
&lt;td&gt;When you did X, I felt Y. / I'm having a hard time understanding what you're trying to say / Here's where you've lost me&lt;/td&gt;
&lt;td&gt;Not specific, it's a judgment.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;You are slow to complete your work.&lt;/td&gt;
&lt;td&gt;I feel that you... / I'm concerned that we...&lt;/td&gt;
&lt;td&gt;Feels too personal. Activates fear and worry. Closes the conversation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;You spin your wheels for too long before asking for help.&lt;/td&gt;
&lt;td&gt;Here's what works for me.&lt;/td&gt;
&lt;td&gt;If someone is not asking for help, probably it's more about the env, than the individual.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Successful mentors look for outcomes&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;what does "success" mean for this person, and in this scenario? &lt;/li&gt;
&lt;li&gt;the mentee is not a great "vessel" to fill up with our great knowledge&lt;/li&gt;
&lt;li&gt;we usually a picture of how things should be done and what excellence looks like for us but in this way, the best we can achieve is to build some poor imitation of ourselves but we want to go beyond them&lt;/li&gt;
&lt;li&gt;instead, look for "excellence outcomes", point them out to the learner, and let them figure out how they got there&lt;/li&gt;
&lt;li&gt;ask them how they achieved stuff (this feel acknowledging + helps them reflect and recreate what they did)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Successful mentors individualize, the pluralize concepts&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;there's nothing like one learning style!!!!&lt;/li&gt;
&lt;li&gt;it's a mechanism of bias and of putting folks in boxes&lt;/li&gt;
&lt;li&gt;there are multiple kinds of intelligence, for instance: verbal-linguistic, logical-mathematical, intrapersonal (self), interpersonal (others), musical, visual-spatial, bodily-kinesthetic, naturalist (taxonomy, organization), existential (why?), emotional&lt;/li&gt;
&lt;li&gt;interconnect different kinds of intelligence! &lt;/li&gt;
&lt;li&gt;help the learner develop these kinds!&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Successful mentors define clear learning outcomes&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;THIS IS SO IMPORTANT -- I've seen it first-hand when I was teaching Ruby at a bootcamp&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use specific verbs, such as&lt;/strong&gt;: Name, Memorize, Identify, Do a simple procedure, Recognize, count, define, draw, fund, label, match, quote, recall, recite, order, tell, write, imitate, List, Describe, Classify, Combine, Do algorithms, Report, discuss, illustrate, select, narrate, compute, sequence, outline, separate Analyze, Explain, Integrate, Sequence, Relate, Apply, Compare, Contrast, Argue, Criticize, Relate, Predict, conclude, summarize, review, argue, transfer, make a plan, characterize, differentiate, organize, debate, make a case, construct, review and rewrite, examine, translate, paraphrase, solve a problem Reflect, Theorize, Hypothesize, Create, Imagine, Formulate, Generate Generalize, generate, compose, invent, originate, prove from first principles, make an original case, solve from first principles&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Build the outcomes with this structure&lt;/strong&gt;: &lt;code&gt;verb + subject + context&lt;/code&gt;, for instance: "List (verb) the three rules of TDD (subject) to a group of apprentices seeing TDD for the first time. (context)", "Contrast (verb) Outside in vs Inside Out TDD (subject) in a blog post targeted at Senior Developers (context)", itd.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Successful mentors protect, separate, and leave&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;this is a reference to a Japanese concept of &lt;a href="https://en.wikipedia.org/wiki/Shuhari"&gt;Shu Ha Ri&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;shu&lt;/em&gt; (ÂÆà) "protect": you create a safe env for a person to learn where they can fail (safely) without becoming a failure&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;ha&lt;/em&gt; (Á†¥) "detach": this is where a person pushes back on the ideas and established ways&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;ri&lt;/em&gt; (Èõ¢) "leave": our hope is that the learner will become able to do more than what we can do, that they grow beyond us; there comes a point in the relationship where they leave this mentorship relationship&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#read-more"&gt;
  &lt;/a&gt;
  Read more
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Socratic_method"&gt;the Socratic method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.simplypsychology.org/Zone-of-Proximal-Development.html"&gt;zone of proximal development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.ted.com/talks/mihaly_csikszentmihalyi_flow_the_secret_to_happiness"&gt;recommended TedTalk: Flow, the secret to happiness&lt;/a&gt; by Mihaly Csikszentmihalyi&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hbr.org/2019/03/the-feedback-fallacy"&gt;recommended reading: feedback fallacy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.washingtonpost.com/news/answer-sheet/wp/2013/10/16/howard-gardner-multiple-intelligences-are-not-learning-styles"&gt;Learning Styles vs Multiple Intelligences&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>techtalks</category>
      <category>career</category>
    </item>
  </channel>
</rss>
