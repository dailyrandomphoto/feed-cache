<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>A Typewriter, but using a New HTML Tag</title>
      <author>Timothy Foster</author>
      <pubDate>Thu, 09 Sep 2021 19:55:08 +0000</pubDate>
      <link>https://dev.to/auroratide/a-typewriter-but-using-a-new-html-tag-60i</link>
      <guid>https://dev.to/auroratide/a-typewriter-but-using-a-new-html-tag-60i</guid>
      <description>&lt;p&gt;So last time, I made a &lt;a href="https://dev.to/auroratide/a-typewriter-but-with-no-html-css-or-js-1bgd"&gt;typewriter animation without HTML, CSS, nor Javascript&lt;/a&gt;. What happens if instead of using nothing, we allow ourselves to use... &lt;em&gt;everything&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/auroratide/embed/MWoJdda?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;All this is achieved with a fancy new HTML tag, &lt;code&gt;&amp;lt;typewritten-text&amp;gt;&lt;/code&gt;!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;This is a &lt;span class="nt"&gt;&amp;lt;typewritten-text&amp;gt;&amp;lt;strong&amp;gt;&lt;/span&gt;typewriter effect!&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&amp;lt;/typewritten-text&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Find out how to install and use it here:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Auroratide"&gt;
        Auroratide
      &lt;/a&gt; / &lt;a href="https://github.com/Auroratide/typewritten-text"&gt;
        typewritten-text
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-new-html-tag"&gt;
  &lt;/a&gt;
  A New HTML Tag?
&lt;/h2&gt;

&lt;p&gt;The HTML standard allows developers to define &lt;strong&gt;custom elements&lt;/strong&gt; through &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components"&gt;Web Components&lt;/a&gt;. Making a new element just requires a handful of Javascript, from there letting you define as much or as little functionality as needed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyElement&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// code for how the element looks and behaves&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-element&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MyElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;typewritten-text&lt;/code&gt; element is one such web component, designed to provide a semantic, flexible, and reusable typewriter component!&lt;/p&gt;

&lt;p&gt;Since web components are native browser technology, they are meant to work with most of our &lt;a href="https://custom-elements-everywhere.com/"&gt;beloved frameworks&lt;/a&gt; out of the box &lt;small&gt;(looking at you, &lt;em&gt;React&lt;/em&gt;...)&lt;/small&gt;. That's one of my favorite things about them!&lt;/p&gt;

&lt;p&gt;Granted, the developer experience can be... painful sometimes. This innocent little element turned out to be &lt;em&gt;much much harder&lt;/em&gt; than I originally thought in order to achieve all my goals for it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-raw-typewrittentext-endraw-element"&gt;
  &lt;/a&gt;
  The &lt;code&gt;typewritten-text&lt;/code&gt; Element
&lt;/h2&gt;

&lt;p&gt;Once Javascript enters the arena, basically anything becomes possible.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No need for monospace requirements! The inner text can be of any font or size; in fact, it can mix fonts if you want.&lt;/li&gt;
&lt;li&gt;Built-in multiline support, for if you want to type out a longer sentence or two.&lt;/li&gt;
&lt;li&gt;A very simple interface; you can basically use it like any standard HTML tag.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And of course, I put in the effort to make it as &lt;strong&gt;accessible&lt;/strong&gt; as possible.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It represents its textual content regardless of current typed state, especially useful for those using Assistive Technologies.&lt;/li&gt;
&lt;li&gt;The blinking cursor animation is disabled for people who &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion"&gt;prefer reduced motion&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;No content-shifting either! The element's size is always the size of its content.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Perhaps the most interesting feature is its &lt;strong&gt;events&lt;/strong&gt;. The element dispatches events when characters are typed or the phrase is finished. By listening to those events, you can use the magic of code to make the typewriter do any custom behaviour that's desired!&lt;/p&gt;

&lt;p&gt;For example, starting another typewritten text:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;typewritten-text:phrasetyped&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#showcasing"&gt;
  &lt;/a&gt;
  Showcasing
&lt;/h2&gt;

&lt;p&gt;Here's a couple of nifty things you can do with the &lt;code&gt;typewritten-text&lt;/code&gt; component!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#typewriter-cycle"&gt;
  &lt;/a&gt;
  Typewriter Cycle
&lt;/h3&gt;

&lt;p&gt;Using &lt;strong&gt;events&lt;/strong&gt;, it's simple to cycle through different texts to type out.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/auroratide/embed/BaZWWwQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;small&gt;The &lt;code&gt;typewritten-text&lt;/code&gt; element is designed to be very basic so it can be used in as many ways as possible, which is why the cycle effect is not built-in. A different web component could be made to encapsulate the effect, though!&lt;/small&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#character-dialog"&gt;
  &lt;/a&gt;
  Character Dialog
&lt;/h3&gt;

&lt;p&gt;Characters tend to talk with a typewriter animation also!&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Hit &lt;code&gt;Rerun&lt;/code&gt; at the bottom of the frame to see the animation again.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/auroratide/embed/rNwyYyW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#find-out-more"&gt;
  &lt;/a&gt;
  Find out more
&lt;/h2&gt;

&lt;p&gt;All information on how to install and use the &lt;code&gt;typewritten-text&lt;/code&gt; component can be found on github!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Auroratide"&gt;
        Auroratide
      &lt;/a&gt; / &lt;a href="https://github.com/Auroratide/typewritten-text"&gt;
        typewritten-text
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I may soon write a little more about the process of actually making (&lt;em&gt;and testing&lt;/em&gt;) a web component.&lt;/p&gt;

</description>
      <category>html</category>
      <category>codepen</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Sharpen your Ruby: Part 5</title>
      <author>Eric The Coder</author>
      <pubDate>Thu, 09 Sep 2021 19:53:25 +0000</pubDate>
      <link>https://dev.to/ericchapman/sharpen-your-ruby-part-5-2l8c</link>
      <guid>https://dev.to/ericchapman/sharpen-your-ruby-part-5-2l8c</guid>
      <description>&lt;p&gt;I develop in Javascript, Python, PHP, and Ruby. By far Ruby is my favorite programming language. &lt;/p&gt;

&lt;p&gt;Together let start a journey and revisit our Ruby foundations. &lt;/p&gt;

&lt;p&gt;Follow me on Twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;EricTheCoder_&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;Classic Loop&lt;/h2&gt;

&lt;p&gt;In Ruby like any other programming language we can iterate a number of fix or variable times. Here are a classic infinite loop that will execute until the program crash.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="kp"&gt;loop&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;put&lt;/span&gt; &lt;span class="s1"&gt;'Hello World'&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;While loop&lt;/h2&gt;

&lt;p&gt;It is possible loop while a condition is meet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
  &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;# Will print numbers from 0 to 99&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Loop until&lt;/h2&gt;

&lt;p&gt;It is possible loop until a condition is meet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;until&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
  &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;# Will print numbers from 0 to 9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Loop x number of times&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;# print numbers from 1 to 19&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or also&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Hello World"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Loop through each element&lt;/h2&gt;

&lt;p&gt;By far, the most use loop is the 'each' iteration&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Array of names&lt;/span&gt;
&lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Peter'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'John'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Iterate the names list&lt;/span&gt;
&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;  
   &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# or shorthand version&lt;/span&gt;
&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Break and Continue&lt;/h2&gt;

&lt;p&gt;It is possible to stop the loop before the end. It is also possible to skip one iteration and go to the next one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;  
  &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt; 
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;# Peter &lt;/span&gt;
&lt;span class="c1"&gt;# John&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The iteration will skip the puts statement if the name is equal to Mike&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;  
  &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt; 
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;# Peter&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The iteration will stop if the name is equal to Mike. &lt;/p&gt;

&lt;h1&gt;Exercise&lt;/h1&gt;

&lt;p&gt;Create a little program that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a loop with 10 iterations (from number 1 to 10)&lt;/li&gt;
&lt;li&gt;Each iteration will print only if the iteration number is even. Odd number will be skip.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Solution&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;odd?&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Number &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;That's it for today. The journey just started, stay tune for the next post very soon. (later today or tomorrow)&lt;/p&gt;

&lt;p&gt;If you have any comments or questions please do so here or send me a message on twitter. &lt;/p&gt;

&lt;p&gt;Follow me on Twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;EricTheCoder_&lt;/a&gt; &lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Best JavaScript coding projects for beginners! 👨🏻‍💻</title>
      <author>Paul Dunz</author>
      <pubDate>Thu, 09 Sep 2021 19:45:49 +0000</pubDate>
      <link>https://dev.to/pauld103/javascript-coding-projects-for-beginners-3fj0</link>
      <guid>https://dev.to/pauld103/javascript-coding-projects-for-beginners-3fj0</guid>
      <description>&lt;p&gt;If you started coding in JavaScript and want to know some awesome project ideas, to practice this language on its fullest, here are the best JavaScript coding projects for beginners!!&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#weather-app"&gt;
  &lt;/a&gt;
  Weather App
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FeOjhGSV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tvt17rziihrxeorrn21t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FeOjhGSV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tvt17rziihrxeorrn21t.png" alt="Weather App"&gt;&lt;/a&gt;&lt;br&gt;
This project will help you to learn, how to deal with API's and the JS-fetch function.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shopping-cart"&gt;
  &lt;/a&gt;
  Shopping Cart
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o9L4KGYj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cfcq7ictx3bcjd73zneu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o9L4KGYj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cfcq7ictx3bcjd73zneu.png" alt="Shopping Cart"&gt;&lt;/a&gt;&lt;br&gt;
A shopping cart teaches you how to deal with API's or databases. It allows you to deal with a lot of data. Furthermore you have the possibility to add some filters.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#portfolio-page"&gt;
  &lt;/a&gt;
  Portfolio Page
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dJK9-Dxj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fezn5rpf95zijkvndyg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dJK9-Dxj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fezn5rpf95zijkvndyg.png" alt="Portfolio Page"&gt;&lt;/a&gt;&lt;br&gt;
This project is extremely simple. You don't have to use any API's or databases for this. There is no need for any backend! Just make some kind of landing pages and add interesting information about you! For more, just add a simple contact page!&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tic-tac-toe"&gt;
  &lt;/a&gt;
  Tic Tac Toe
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KA1am3Uq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z66t5d7tt138gt6pg3o5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KA1am3Uq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z66t5d7tt138gt6pg3o5.png" alt="Tic Tac Toe"&gt;&lt;/a&gt;&lt;br&gt;
With this game, you'll get a small view into game development. Especially for games where you and your partner have to play in alternating order.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#todo-list"&gt;
  &lt;/a&gt;
  To-Do List
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bZiuOYbe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oulcwttfgt9qu6x7y7ov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bZiuOYbe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oulcwttfgt9qu6x7y7ov.png" alt="To-Do List"&gt;&lt;/a&gt;&lt;br&gt;
With this project you will go deeper into the thematic "removing and adding" elements. You will learn how to deal with "Drag and Drop" and way more!&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#digital-clock"&gt;
  &lt;/a&gt;
  Digital Clock
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JK-EPts8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bc0sxpsz7w73n2w86pv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JK-EPts8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bc0sxpsz7w73n2w86pv.png" alt="Digital Clock"&gt;&lt;/a&gt;&lt;br&gt;
The digital clock is a very basic project to get to know the built in function for time. Beside to that you'll learn some CSS skills.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-your-turn"&gt;
  &lt;/a&gt;
  It's your turn!
&lt;/h3&gt;

&lt;p&gt;Comment down below other awesome projects for beginners, that you already coded. Let me know!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>My Github Profile</title>
      <author>Tanwi Kumari</author>
      <pubDate>Thu, 09 Sep 2021 19:10:36 +0000</pubDate>
      <link>https://dev.to/tanwi2209/my-github-profile-154l</link>
      <guid>https://dev.to/tanwi2209/my-github-profile-154l</guid>
      <description>&lt;p&gt;Checkout my work here.&lt;br&gt;
&lt;a href="https://github.com/tanwi1234"&gt;https://github.com/tanwi1234&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Building a Dictionary app in React js</title>
      <author>Desi-Codes</author>
      <pubDate>Thu, 09 Sep 2021 18:48:13 +0000</pubDate>
      <link>https://dev.to/desicodes/building-a-dictionary-app-in-react-js-27mi</link>
      <guid>https://dev.to/desicodes/building-a-dictionary-app-in-react-js-27mi</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SLE3SAi5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/tyfldsi6ql9s/dictionary-app-ss_Aw7chCnr34.png%3FupdatedAt%3D1631212915008" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SLE3SAi5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/tyfldsi6ql9s/dictionary-app-ss_Aw7chCnr34.png%3FupdatedAt%3D1631212915008" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#in-this-series-we-will-build-a-dictionary-app-from-scratch-the-features-include-using-public-api-playing-the-pronunciationaudio-bookmarking-any-word-using-local-storage-to-save-it-and-navigation"&gt;
  &lt;/a&gt;
  In this series, we will build a dictionary app from scratch, the features include, using Public API, playing the pronunciation(audio), bookmarking any word (using local storage to save it) and navigation.
&lt;/h5&gt;

&lt;p&gt;It's a beginner's level React app, in order to get started you just need to know the basics of React (components, JSX, props).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dictionary-rho.vercel.app/"&gt;View live &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.desicodes.io/projects/dictionary"&gt;Learn more + Resources&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLmA3URVkjqnmwxdT6GtkfaGVQ4Wm8hnPo"&gt;Youtube Playlist&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A Guide on Transforming an Idea into a Website</title>
      <author>Sean C Davis</author>
      <pubDate>Thu, 09 Sep 2021 18:42:32 +0000</pubDate>
      <link>https://dev.to/stackbit/a-guide-on-transforming-an-idea-into-a-website-4oco</link>
      <guid>https://dev.to/stackbit/a-guide-on-transforming-an-idea-into-a-website-4oco</guid>
      <description>&lt;p&gt;At its core, Jamstack was a revolution. It took the best part of the first 25+ years of website development and combined them into a powerful pattern that is used widely today. It has created an explosion of ideas and innovations that have helped developers across the world build websites that are more performant, more secure, less expensive, easier to scale, and (most importantly) fun to build!&lt;/p&gt;

&lt;p&gt;Instead of taking you on a theoretical journey and digging into the technical nuances of the Jamstack, we're going someplace else. We'll take a more tangible journey, as we step through the entire process of building a Jamstack website, from the little light bulb in your brain all the way to a physical website that real people can visit.&lt;/p&gt;

&lt;p&gt;These are the stops we'll make along the way:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Bring the design to life&lt;/li&gt;
&lt;li&gt;Find a developer&lt;/li&gt;
&lt;li&gt;Build the site (write the code)&lt;/li&gt;
&lt;li&gt;Review and test the site&lt;/li&gt;
&lt;li&gt;Deploy, edit, and repeat, repeat, repeat&lt;/li&gt;
&lt;li&gt;Or ... do it the Stackbit way!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Buckle up. Here we go!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stop-1-design"&gt;
  &lt;/a&gt;
  Stop #1: Design
&lt;/h2&gt;

&lt;p&gt;The first stop on the Jamstack journey is design — the process of visually representing your ideas.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#from-spec-to-delivery"&gt;
  &lt;/a&gt;
  From Spec to Delivery
&lt;/h3&gt;

&lt;p&gt;The way this typically works is that you provide some form of &lt;em&gt;spec&lt;/em&gt; to a designer. The designer then takes that spec and turns it into one or more design files that show what should be built. That can include page layouts, individual components, or global patterns like colors, fonts, and typography.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#delivering-a-good-spec"&gt;
  &lt;/a&gt;
  Delivering a Good Spec
&lt;/h3&gt;

&lt;p&gt;The “spec” you provide the designer should be more then, “I need a website.” Before you bring a designer into your project, consider spending time to gather the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  A list of pages on the site, along with the purpose of each page. Bonus points if you also include content, as you'll reduce the variability of the design when it is transformed into code.&lt;/li&gt;
&lt;li&gt;  Brand assets or other visual specifications you have — logos, colors, typography, etc.&lt;/li&gt;
&lt;li&gt;  A list of websites that you really like and why you like them. The designer will want you to be happy, and the more you can tell them what you like, the higher the chance that they will deliver on your vision.&lt;/li&gt;
&lt;li&gt;  A list of competitors. Even if the designer doesn't use inspiration from your competitors' sites, it's nice for them to know where the competition stands and what it'll take to be noticed in the crowd.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The designer may ask you for more information, but this is a good start to get the conversation rolling.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#locating-the-right-designer"&gt;
  &lt;/a&gt;
  Locating the Right Designer
&lt;/h3&gt;

&lt;p&gt;If you have a designer already working with you, that's a bonus! If not, the cost and abilities of designers vary &lt;em&gt;widely&lt;/em&gt;. You could use a service like &lt;a href="https://www.fiverr.com/"&gt;Fiverr&lt;/a&gt; and have a decent-sized website designed for a few hundred dollars (USD). Or you could hire a fancy agency and spend tens of thousands of dollars.&lt;/p&gt;

&lt;p&gt;Generally speaking, cost tends to be &lt;em&gt;somewhat&lt;/em&gt; proportional to experience and the quality you're going to get back. But that doesn't mean the inexpensive designer is going to provide an awful design. This is how I usually think about it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  If I hire a designer on the cheap, I'm going to have to do more work if I want to get something worthwhile out of it. I'll have to drive the process. I'll have to deliver a super tight spec so that they give me exactly what I'm looking for.&lt;/li&gt;
&lt;li&gt;  If I hire a fancy and expensive firm, I should expect to still have to put in time and effort, but should be led through the process and be left with something truly great.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#looking-toward-development"&gt;
  &lt;/a&gt;
  Looking Toward Development
&lt;/h3&gt;

&lt;p&gt;What's interesting about this process is that while design tends to be a fraction of the cost of development, it's also largely responsible for determining the complexity of the build. Granted, a developer can spend your money in a silly way and &lt;em&gt;over-engineer&lt;/em&gt; a website for you. But, &lt;em&gt;most of the time&lt;/em&gt;, the time a developer is going to spend building your site is determined by &lt;em&gt;their specification&lt;/em&gt; — the design files.&lt;/p&gt;

&lt;p&gt;The more interactive the design, the more it's going to cost to develop. The more unique each page is from the others, the more it's going to cost to develop.&lt;/p&gt;

&lt;p&gt;You don't have to be a fortune teller. Instead, leave a little room in your budget for going back to the designer after consulting with your developer. If the developer says you can save a thousand dollars by changing a feature, maybe you'd want to spend another hundred to have the designer reimagine and simplify it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-deliverable"&gt;
  &lt;/a&gt;
  The Deliverable
&lt;/h3&gt;

&lt;p&gt;After going through the design phase, you're left with the &lt;em&gt;deliverables&lt;/em&gt; — artifacts you can pass on to the developer as their specification. &lt;a href="https://github.com/seancdavis/stackbit-jamstack-journey/tree/main/01-design"&gt;Here's an example for a simple site&lt;/a&gt; that includes just four files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://raw.githubusercontent.com/seancdavis/stackbit-jamstack-journey/main/01-design/unmute--homepage--desktop.png"&gt;Home page for large screens&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://raw.githubusercontent.com/seancdavis/stackbit-jamstack-journey/main/01-design/unmute--homepage--mobile.png"&gt;Home page for small screens&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://raw.githubusercontent.com/seancdavis/stackbit-jamstack-journey/main/01-design/unmute--content-page.png"&gt;Interior pages&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://raw.githubusercontent.com/seancdavis/stackbit-jamstack-journey/main/01-design/unmute--style-tiles.png"&gt;Style tiles&lt;/a&gt; (i.e. global style definitions)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And this is an example of what a style tiles spec might look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n8_3hyU1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/seancdavis/stackbit-jamstack-journey/main/01-design/unmute--style-tiles.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n8_3hyU1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/seancdavis/stackbit-jamstack-journey/main/01-design/unmute--style-tiles.png" alt="An example of style tiles — styles that apply to all (or most) pages on the site"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(This example is from &lt;a href="https://www.unmutedstories.com/"&gt;Unmute&lt;/a&gt;, a side project I'm involved with.)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stops-24-development"&gt;
  &lt;/a&gt;
  Stops #2-4: Development
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Toot toot!&lt;/em&gt; This train keeps on rolling. The next several steps encompass the development phase of the project. Our Jamstack train makes three stops here because there are &lt;em&gt;usually&lt;/em&gt; three steps in this process, though the amount to which you are involved in each will vary depending on the developer you hire.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-process"&gt;
  &lt;/a&gt;
  The Process
&lt;/h3&gt;

&lt;p&gt;This process itself is similar to the design process in that it goes through these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Locate &amp;amp; Estimate:&lt;/strong&gt; Developer provides estimate based on specification.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Build:&lt;/strong&gt; Developer &lt;em&gt;builds&lt;/em&gt; the site.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Review:&lt;/strong&gt; The developer delivers the code and you review to make sure it works.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#locate-a-developer"&gt;
  &lt;/a&gt;
  Locate a Developer
&lt;/h3&gt;

&lt;p&gt;You can go through much the same process as you did with design. If you have an in-house developer, great! If not, you can use a service like Fiverr and hire devs on the cheap. Or you can look to a more formal agency or dev shop to suit your needs.&lt;/p&gt;

&lt;p&gt;In this case, you don't have to build a spec for the developer. You already did that! The design files are your specification.&lt;/p&gt;

&lt;p&gt;Finding the right developer is crucial to this process, as well. And that's why I've broken out the build portion (below) as three steps. Some developers (usually those you hire on the cheap) may only complete the first step in the process. But for you to truly achieve a useful and powerful Jamstack site, you'll want someone who can take you through all three.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-build"&gt;
  &lt;/a&gt;
  The Build
&lt;/h3&gt;

&lt;p&gt;These are the steps in the process:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Static build&lt;/li&gt;
&lt;li&gt;Templatizing the code&lt;/li&gt;
&lt;li&gt;Separating content from presentation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can spend very little on web development and still get something that you can deploy out of it. Often, that means the developer only went through the first step and gave you static files. That's totally fine, but it will make adding new pages or editing existing content super difficult.&lt;/p&gt;

&lt;p&gt;The second step — &lt;em&gt;templatizing&lt;/em&gt; — aims to take the static code and turn it into modular pieces that can be reused. This process is explained in great length and technical detail &lt;a href="https://www.stackbit.com/blog/jamstack-journey-templatize-static-html/"&gt;in this guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After the code has been modularized, it can be further adjusted to extract all the content and put it in a single place, such as a content management system. This process is explained in great length &lt;a href="https://www.stackbit.com/blog/jamstack-journey-separate-content/"&gt;in this guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And the end of these three steps, you'll be left with a system that you can use to edit content without worrying about messing up the code. In fact, you ought to be able to edit the content without even &lt;em&gt;seeing&lt;/em&gt; the code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reviewing-the-site"&gt;
  &lt;/a&gt;
  Reviewing the Site
&lt;/h3&gt;

&lt;p&gt;While the review process for design was more conceptual, with development, it's up to you to actually test that the website behaves as you'd expect. In other words, you're &lt;em&gt;trying to break it&lt;/em&gt;. The developer should respond by fixing any bugs discovered within a certain timeframe.&lt;/p&gt;

&lt;p&gt;While the developer may not &lt;em&gt;deploy&lt;/em&gt; the code for you, they ought to be able to help you get it running so that you can test and send notes back to them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stop-5-deploy-amp-use"&gt;
  &lt;/a&gt;
  Stop #5: Deploy &amp;amp; Use!
&lt;/h2&gt;

&lt;p&gt;At this point you have a site that is ready to go to production, so that's the next step. I recommend using that same developer to help you through that process, but I've broken it out here because it tends to require more effort from you than the development phase of the project.&lt;/p&gt;

&lt;p&gt;Here are a few of the crucial steps in this process:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Choose a host and setup an account&lt;/li&gt;
&lt;li&gt;  Buy and/or configure a domain name&lt;/li&gt;
&lt;li&gt;  Add analytics tooling&lt;/li&gt;
&lt;li&gt;  Add SEO content&lt;/li&gt;
&lt;li&gt;  Use it!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's look at each of these briefly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hosting"&gt;
  &lt;/a&gt;
  Hosting
&lt;/h3&gt;

&lt;p&gt;The term "Jamstack" was coined by a startup called &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;. And they continue to lead the way in terms of deploying and hosting Jamstack websites. But there are other great tools out there, like &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt;, &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;, &lt;a href="https://azure.microsoft.com/en-us/services/app-service/static/"&gt;Azure Static Web Apps&lt;/a&gt;, and many more.&lt;/p&gt;

&lt;p&gt;Whatever you choose, you'll want to set up an account for yourself. Most of these services have a free (or low cost) tier that is enough to accommodate small websites.&lt;/p&gt;

&lt;p&gt;Once you have an account, you can add your developer, and they will hook it up so that the code is deployed. And then you will have a working website!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#domain"&gt;
  &lt;/a&gt;
  Domain
&lt;/h3&gt;

&lt;p&gt;You'll want a domain name for your site, otherwise you'll be left with default names from your hosting provider. If you already have one, that's great!&lt;/p&gt;

&lt;p&gt;Your developer can tell you what you need to do to point the domain to your host, and then you'll be able to use your domain name to access your new website!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#analytics"&gt;
  &lt;/a&gt;
  Analytics
&lt;/h3&gt;

&lt;p&gt;Analytics is a crucial piece of the puzzle, because you want to know who is visiting your website. Some hosting providers (like Netlify) offer what they call server-side analytics, which tend to be the most accurate, though there are limitations to them. But if you're just getting started, it's easy enough to start with &lt;a href="https://marketingplatform.google.com/about/analytics/"&gt;Google Analytics&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tell your developer you want to install Google Analytics and they can help you through that process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#seo"&gt;
  &lt;/a&gt;
  SEO
&lt;/h3&gt;

&lt;p&gt;Of all these pre-launch steps, perhaps the trickiest to deal with is SEO. Usually I'd expect a developer to prepare my site to support SEO. That means automatically generating a sitemap file and providing the ability to customize SEO meta values for any given page. (It would be worthwhile to mention this when first setting up the arrangement with the developer so that they are prepared.)&lt;/p&gt;

&lt;p&gt;You'll want to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Register your site (and sitemap) with &lt;a href="https://developers.google.com/search"&gt;Google Search Console&lt;/a&gt;. This will help provide you with analytics on where you land in search results. It'll also help Google know where your site is and what its pages are.&lt;/li&gt;
&lt;li&gt;Add custom SEO values for every page on your site, including adding an image.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you don't feel confident in this step, you can also hire an SEO expert to help you through the process. These types of consultants also have a huge price range, from Fiverr to big agency. If you're just getting started, I recommend toward the cheaper option — just have someone give you a quick audit and make the changes they suggest.&lt;/p&gt;

&lt;p&gt;(Insider secret: Mostly what these SEO pros are doing is using some expensive tool, hooking up your site, running a report, and giving you the output of that report. The funny thing is, some of the people are often less expensive than buying the tools and doing the work yourself.)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#editing"&gt;
  &lt;/a&gt;
  Editing
&lt;/h3&gt;

&lt;p&gt;When all of those last bits are in place, you should have a live site and it's time to start promoting it and keeping it up to date. Make a few changes to the content. Tell the world about it. and give yourself a pat on the back.&lt;/p&gt;

&lt;p&gt;BUT WAIT! Before we wrap this up, I want to spend a little time giving you what I think is a better way to get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stop-6-an-easier-approach"&gt;
  &lt;/a&gt;
  Stop #6: An Easier Approach
&lt;/h2&gt;

&lt;p&gt;If you're new to the world of creating websites, I think you should take a look at &lt;a href="https://www.stackbit.com/"&gt;Stackbit&lt;/a&gt;! (Of course I do, I work there and am writing on their blog.)&lt;/p&gt;

&lt;p&gt;Stackbit is a site builder that specializes in Jamstack websites.&lt;/p&gt;

&lt;p&gt;Instead of going through that entire process (the first five stops on the Jamstack journey), you could do it all yourself in much less time for much less money. After &lt;a href="https://app.stackbit.com/login"&gt;creating an account&lt;/a&gt;, Stackbit will give you a list of templates from which you can build your site. You'll then walk through the process of customizing it just for you.&lt;/p&gt;

&lt;p&gt;The catch here is that Stackbit isn't just another WordPress or Squarespace, even though it may feel like it at first. Stackbit works to be super transparent about where your code and content live. What that means is that you can start this journey on your own, without a designer or a developer, at no cost other than your time. And you'll still have access to the code and content that powers your site. Once you're up and running, if you need a little help, &lt;em&gt;that's&lt;/em&gt; when you can bring in a designer, developer, or SEO expert to make some suggestions or additions to your new site.&lt;/p&gt;

&lt;p&gt;If that sounds like a walk in the park, &lt;a href="https://app.stackbit.com/create"&gt;give it a try&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;In any case, I hope you've enjoyed your ride, and I'd love to learn more about your &lt;em&gt;Jamstack Journey&lt;/em&gt;. &lt;a href="https://twitter.com/seancdavis29"&gt;Let's chat&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>jamstack</category>
      <category>design</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What is Roblox Studio and How to Become a Roblox Developer?</title>
      <author>mattonw</author>
      <pubDate>Thu, 09 Sep 2021 18:09:41 +0000</pubDate>
      <link>https://dev.to/mattonw/what-is-roblox-studio-and-how-to-become-a-roblox-developer-3gc9</link>
      <guid>https://dev.to/mattonw/what-is-roblox-studio-and-how-to-become-a-roblox-developer-3gc9</guid>
      <description>&lt;p&gt;At this post, I will try to cover some information about Roblox, why you should use the Studio Creator and which programming languages you need to use in order to become a successful developer at this gaming creation platform. Let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-roblox"&gt;
  &lt;/a&gt;
  What is Roblox?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Roblox"&gt;Roblox &lt;/a&gt; is one of the most popular online multiplayer gaming platforms in the world. Beside only playing games, the users might create their own games. Furthermore, it was developed and published by the Roblox Corporation on September 1, 2006. This platform is compatible with various operating systems such as Windows, Android, iOS, Xbox One, macOS, Macintosh and few other. This platform has million of players and developers from different ages and different countries around the world.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#roblox-studio-overview"&gt;
  &lt;/a&gt;
  Roblox Studio Overview
&lt;/h2&gt;

&lt;p&gt;Roblox Studio is a great free game development program that can be also used on different operating systems. Further, in order to start using it, the user must register for a new Roblox account and download the Studio launcher from the official website. &lt;br&gt;
This program have a lot of great features that users might find useful. For example, there is an option for adding plugins, adding objects or even adding pre-made templates from the marketplace. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-users-create-using-the-roblox-studio"&gt;
  &lt;/a&gt;
  What Users Create using the Roblox Studio
&lt;/h3&gt;

&lt;p&gt;It is mostly used for creating games and in-game items. For example, the users create such a lot of in-game items using this platform such as clothes, hats, hair templates etc. Some of them even create their own unique &lt;a href="https://www.tornadocodes.com/roblox-hair-codes-ids/"&gt;Roblox hair codes&lt;/a&gt; and &lt;a href="https://www.tornadocodes.com/roblox-clothes-codes-outfit-ids/"&gt;Roblox outfits ids&lt;/a&gt; for their games. Each of the items has its own unique code/id which usually contains unique numbers (characters).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-become-a-roblox-developer"&gt;
  &lt;/a&gt;
  How to Become a Roblox Developer?
&lt;/h3&gt;

&lt;p&gt;The Roblox Studio is necessary along with the Lua programming language, so I can recommend you to start with mastering these two. Since it is a web-based drag-and-drop code builder, you will learn them in a very short period of time. Just try to avoid copying other games. Try to make something unique and your game can become popular with million of players overnight. There is no doubt that this platform can make you famous in a very short time. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#are-developers-geting-paid-by-roblox"&gt;
  &lt;/a&gt;
  Are developers geting paid by Roblox?
&lt;/h3&gt;

&lt;p&gt;To sum up the developers don't get paid by Roblox for creating the games. However, they earn money whenever the player purchase a different kind of virtual in-game item. This is even better, since your earnings can be unlimited and you can always create a new virtual items which will be premium and the users must pay in order to get them.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>android</category>
      <category>quide</category>
      <category>development</category>
    </item>
    <item>
      <title>VPN (Virtual Private Network) Nedir?</title>
      <author>VPN Programları</author>
      <pubDate>Thu, 09 Sep 2021 17:58:54 +0000</pubDate>
      <link>https://dev.to/vpnprogramlari/vpn-virtual-private-network-nedir-20m7</link>
      <guid>https://dev.to/vpnprogramlari/vpn-virtual-private-network-nedir-20m7</guid>
      <description>&lt;p&gt;VPN, Sanal özel ağlar olarak tanımlanır. &lt;strong&gt;Virtual Private Network&lt;/strong&gt; kelimelerinin kısaltması olarak kullanılır. Genel olarak şirketlerin şubeleri arasındaki iletişimi şifreleyerek güvenli iletişim sağlamasını amaçlamaktadır. &lt;a href="https://vpnbedava.com/vpn-nedir"&gt;VPN&lt;/a&gt;, birçok farklı protokol ve teknolojiyi bir arada kullanmaktadır. Bir bilgisayardan karşı taraftaki diğer bilgisayar arasındaki iletişim kriptolama yapılarak güvenli bir tünel kurulması sağlanır. Bu tünel içerisinden geçen veri şifrelendiği için araya giren veya girmeye çalışan kişiler yalnızca kriptolu veriyi görebileceği için güvenliğiniz sağlanmıştır. Bu kriptolama seviyesi ne kadar iyiyse gizliliğiniz de o kadar güvenli olur. Aynı zamanda tüm veri akışınızı (DNS istekleriniz de dahil olmak üzere) bu tünel içerisine aldığınız takdirde tam bir koruma sağlamış olursunuz. Virtual Private Network (Sanal Özel Ağ) teriminin kısaltılmış halidir ve en temel anlamıyla internete başka bir IP adresi üzerinden bağlanmanızı sağlayan hizmettir. Bu özel bilgisayar ağı, örneğin yerel bir ağa fiziksel erişimi bulunmayan, dışarıdaki bir kişi tarafından ağ kaynaklarına erişmekte kullanılabilir. VPN'ler, güvenilmeyen ağlara bağlanırken bağlantıyı şifrelemek ve güvenli hale getirmek için de kullanılır. Bunun yanında VPN'ler, farklı konumlarda bulunabildiğinden, sizi ülkelerin kısıtlamalarından (yasaklı web siteleri ve IP'ler gibi) da kurtarırlar. VPN'ler (Virtual Private Network) basit bir şekilde açıklamak gerekirse internete şifreli bağlantı üzerinden daha güvenli biçimde bağlanmanızı sağlarlar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#neden-vpn-kullan%C4%B1l%C4%B1r"&gt;
  &lt;/a&gt;
  Neden VPN kullanılır?
&lt;/h2&gt;

&lt;p&gt;VPN, internet bağlantınızı güvenli hale getirir ve herhangi bir siteye bağlanırken sizin bağlantınızı şifreler, kimliğinizin bulunamamasını sağlar. VPN programları gönderdiğiniz ve aldığınız tüm verileri kendisi şifrelediğinden 3. şahısların ne yaptığınızı asla görmesine izin vermeyen bir güvenlik sistemi olarakda kullanılabilir. Bu nedenledir ki şirketler ve bankalar, farklı mekânlardaki çalışanlarıyla/ofisleriyle bağlantı kurmak için VPN hizmetini kullanırlar. Böylelikle, kilometrelerce ötedeki kişilerle bile, şirket içerisinde kurdukları ağ kadar güvenli bir şekilde bağlanırlar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vpnbedava.com/vpn-nedir"&gt;https://vpnbedava.com/vpn-nedir&lt;/a&gt;&lt;/p&gt;

</description>
      <category>privacy</category>
      <category>devops</category>
      <category>vpn</category>
    </item>
    <item>
      <title>Client Side React Router (pt2: routes  &amp; parameters)</title>
      <author>Mike Talbot</author>
      <pubDate>Thu, 09 Sep 2021 17:47:12 +0000</pubDate>
      <link>https://dev.to/miketalbot/client-side-react-router-pt2-routes-1g3g</link>
      <guid>https://dev.to/miketalbot/client-side-react-router-pt2-routes-1g3g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR;
&lt;/h2&gt;

&lt;p&gt;I'm building a client side router as part of a project to create some useful Widgets for my community's blogs.  In this article we cover parsing routes and parameters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;I need a client side router so I can embed different widgets that are configured by an admin interface into my posts to get more information from my audience so I can make better content.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;p&gt;You can vote interactively in the widget below for the language you love... Click on a language and see the results for everyone who has voted so far (it updates in real time too).&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/n4dpo?initialpath=/WWn-tszlY4dvj3e-4R5Yw/embed&amp;amp;runonclick=0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And here you can click the one that you hate!!!&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/n4dpo?initialpath=/AH0gIMzPZJSiXcElIcwBr/embed&amp;amp;runonclick=0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Cool huh?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#routing"&gt;
  &lt;/a&gt;
  Routing
&lt;/h2&gt;

&lt;p&gt;In the first part of this article series we developed some basic event handling and raising so we could fake &lt;code&gt;popstate&lt;/code&gt; events.  &lt;/p&gt;

&lt;p&gt;In this part we are going to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a method to declare routes&lt;/li&gt;
&lt;li&gt;Create a component to declare routes that uses the method above&lt;/li&gt;
&lt;li&gt;Create a component to render the right route, with any parameters&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#declaring-routes"&gt;
  &lt;/a&gt;
  Declaring routes
&lt;/h3&gt;

&lt;p&gt;First off we need to make an array to store our routes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next we need to export a method to actually declare one.  We want to pass a path like &lt;code&gt;/some/route/:with/:params?search&amp;amp;sort&lt;/code&gt;, a React component to render with the route and then we'll have some options so we can order our declarative routes in case they would conflict.  I'd also like to have Routers with different purposes (like a sidebar, main content, nav etc).&lt;/p&gt;

&lt;p&gt;Example call (it's the one for the widgets above!):&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/:id/embed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;RenderMeEmbed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;register&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;priority&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;purpose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;general&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Path must be a string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Ok so now we have some parameters, it's time to split the path on the search string:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next up, I want to be able to pass the &lt;code&gt;register&lt;/code&gt; function a Component function or an instantiated component with default props.  So &lt;code&gt;register("/", Root)&lt;/code&gt; or &lt;code&gt;register("/admin", &amp;lt;Admin color="red"/&amp;gt;)&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;call&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_init&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;purpose&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;call&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="nx"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;purpose&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;call&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;call&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;So just in case there are some funny functions out there that look like objects (there are, but it's rare - I'm looking at you &lt;code&gt;React.lazy()&lt;/code&gt;!), I check whether the &lt;code&gt;call&lt;/code&gt; parameter is a function or has a special property.  You can see we then call &lt;code&gt;add&lt;/code&gt; splitting up the route on the &lt;code&gt;/&lt;/code&gt; character and the query string on the &lt;code&gt;&amp;amp;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The case of the instantiated React component makes a wrapper component that wraps the &lt;code&gt;type&lt;/code&gt; and the &lt;code&gt;props&lt;/code&gt; of the default and decorates on any additional props from the route.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;add&lt;/code&gt; itself is pretty straightforward:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inPriorityOrder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;raise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;routesChanged&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;raise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;routesChanged&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We add the route to the array, then sort the array in priority order.  We raise a "routesChanged" event so that this can happen at any time - more on that coming up.  We return a function to deregister the route so we are fully plug and play ready.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;inPriorityOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;priority&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;priority&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#route-component"&gt;
  &lt;/a&gt;
  Route Component
&lt;/h3&gt;

&lt;p&gt;So we can declare routes in the JSX we just wrap the above function:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;priority&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;purpose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;general&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;RouteContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;purpose&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;purpose&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We have added one complexity here, to enable &lt;code&gt;&amp;lt;Route/&amp;gt;&lt;/code&gt; within &lt;code&gt;&amp;lt;Route/&amp;gt;&lt;/code&gt; definitions, we create a &lt;code&gt;RouteContext&lt;/code&gt; that will be rendered by the &lt;code&gt;&amp;lt;Router/&amp;gt;&lt;/code&gt; component we write in a moment.  That means we can easily re-use components for sub routes or whatever.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;Route/&amp;gt;&lt;/code&gt; renders it's child decorated with the route parameters extracted from the &lt;code&gt;location&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#code-splitting"&gt;
  &lt;/a&gt;
  Code Splitting
&lt;/h3&gt;

&lt;p&gt;To enable code splitting we can just provide a &lt;code&gt;lazy()&lt;/code&gt; based implementation for our component:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/admin/comment/:id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;lazy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./routes/admin-comment&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Making sure to render a &lt;code&gt;&amp;lt;Suspense/&amp;gt;&lt;/code&gt; around any &lt;code&gt;&amp;lt;Router/&amp;gt;&lt;/code&gt; we use.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-router"&gt;
  &lt;/a&gt;
  The Router
&lt;/h2&gt;

&lt;p&gt;Ok so to the main event!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#windowlocation"&gt;
  &lt;/a&gt;
  window.location
&lt;/h3&gt;

&lt;p&gt;First off we need to react to the location changes. For that we will make a &lt;code&gt;useLocation&lt;/code&gt; hook.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useLocation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLocation&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;useDebouncedEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;popstate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;raise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;can-navigate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Perhaps show the message here&lt;/span&gt;
        &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pushState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;setLocation&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="mi"&gt;30&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This uses &lt;code&gt;useDebouncedEvent&lt;/code&gt; which I didn't cover last time, but it's pretty much a wrapper of a debounce function around &lt;code&gt;useEvent&lt;/code&gt;'s handler.  It's in the repo if you need it.&lt;/p&gt;

&lt;p&gt;You'll notice the cool thing here is that we raise a "can-navigate" event which allows us to not change screens if some function returns a &lt;code&gt;message&lt;/code&gt; parameter.  I use this to show a confirm box if navigating away from a screen with changes.  Note we have to push the state back on the stack, it's already gone by the time we get &lt;code&gt;popstate&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#navigate"&gt;
  &lt;/a&gt;
  navigate
&lt;/h3&gt;

&lt;p&gt;You may remember from last time that we need to fake &lt;code&gt;popstate&lt;/code&gt; messages for navigation. So we add a &lt;code&gt;navigate&lt;/code&gt; function like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pushState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;raiseWithOptions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;popstate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#router"&gt;
  &lt;/a&gt;
  Router
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;headings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h6&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h7&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;initialPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;purpose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;general&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;fallback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Fallback&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Ok so firstly that &lt;code&gt;headings&lt;/code&gt; is so when the routes change we can go hunting for the most significant header - this is for accessibility - we need to focus it.&lt;/p&gt;

&lt;p&gt;We also take a parameter to override the current location (useful in debugging and if I ever make the SSR), we also have a fallback component and a component to render the routes inside.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;pathname&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLocation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialPath&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The parsing of the location looks similar to the register function.  We use the split up &lt;code&gt;path&lt;/code&gt; in &lt;code&gt;parts&lt;/code&gt; to filter the routes, along with the &lt;code&gt;purpose&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;purpose&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;purpose&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;partMatches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; 
&lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We'll come to &lt;code&gt;partMatches&lt;/code&gt; in a moment - imagine it's saying either these strings are the same, or the route wants a parameter.  This router does not handle wildcards.&lt;/p&gt;

&lt;p&gt;If we don't have a route, render a fallback.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mergeParams&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryParams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;queryParams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next up we deal with the parameters, we'll examine &lt;code&gt;mergeParams&lt;/code&gt; momentarily.  You can see we convert the query parameters to a lookup object, and then we look them up from the route :)&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;RouteContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;component&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setFocus&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;call&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;component&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;RouteContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Rendering the component is a matter of laying down the context provider and rendering the holder component, we need this component so we can search it for a heading in a moment.  Then whichever route we got gets rendered with the parameters.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#%C2%A0partmatches"&gt;
  &lt;/a&gt;
   partMatches
&lt;/h4&gt;

&lt;p&gt;This function is all about working out whether the indexed part of the path in the route is a parameter (it starts with a ":") or it is an exact match for the part of the current location.  So it's a Higher Order Function that takes a route and then returns a function that can be sent to &lt;code&gt;.filter()&lt;/code&gt; on an array of route parts.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;partMatches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;part&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;part&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#mergeparams"&gt;
  &lt;/a&gt;
  mergeParams
&lt;/h4&gt;

&lt;p&gt;Merge params just takes the index of the current part of the path and if the route wants a parameter it decorates the current value onto and object with a key derived from the string after the ":").&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;mergeParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;part&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;part&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;part&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#setfocus-a-little-accessibility"&gt;
  &lt;/a&gt;
  setFocus - a little accessibility
&lt;/h4&gt;

&lt;p&gt;So the final thing is to handle the accessibility. When we mount a new route, we will find the first most significant header within it, and focus that.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setFocus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt;
    &lt;span class="nx"&gt;headings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;found&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;found&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's it, a declarative client side router with path and query parameters.  You can check out the whole widget code here:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/miketalbot"&gt;
        miketalbot
      &lt;/a&gt; / &lt;a href="https://github.com/miketalbot/cccc-widget"&gt;
        cccc-widget
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/n4dpo?initialpath=/19yEFb6jzzFBomM-9lZTZ/embed&amp;amp;runonclick=0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Make A Progress Bar with JavaScript</title>
      <author>Amy Oulton</author>
      <pubDate>Thu, 09 Sep 2021 17:46:29 +0000</pubDate>
      <link>https://dev.to/amyoulton/make-a-progress-bar-with-javascript-2l90</link>
      <guid>https://dev.to/amyoulton/make-a-progress-bar-with-javascript-2l90</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This tutorial was originally posted on &lt;a href="https://www.codecast.io/casts/NVlpReWd5ay7-make-a-javascript-progress-bar"&gt;CodeCast&lt;/a&gt;. There you can watch my tutorial while accessing all the live code I am writing in the video using their interactive player. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hello! We're back with another JavaScript tutorial and this time we're going to make a simple progress bar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--meMAGxmF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hvvldry0q1wvfpblzpa.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--meMAGxmF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hvvldry0q1wvfpblzpa.gif" alt="Progress Bar Gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As per always, we are going to create the structure of our app first by building out the HTML. This will look as follows:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;div class="container"&amp;gt;
   &amp;lt;div id="progress"&amp;gt;
     &amp;lt;div id="bar"&amp;gt;1%&amp;lt;/div&amp;gt;
   &amp;lt;/div&amp;gt;
   &amp;lt;button class="btn"&amp;gt;Run Bar&amp;lt;/button&amp;gt;
 &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If you're not interested in having the physical number within the progress bar, go ahead and delete the &lt;code&gt;1%&lt;/code&gt; inside the &lt;code&gt;#bar&lt;/code&gt; div, but make sure to keep the div as it is, as that is the actual progress bar.&lt;/p&gt;

&lt;p&gt;Next we go ahead and add some styles to the page, which you can find in the tutorial above! We also need to add styles to control the width of the bar, so for now we'll see the default &lt;code&gt;width&lt;/code&gt; to be &lt;code&gt;1%&lt;/code&gt;.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; #bar {
   width: 1%;
   height: 30px;
   background-color: magenta;
   color: white;
   font-weight: bold;
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The first thing we're going to do is the access the &lt;code&gt;button&lt;/code&gt; on the page and add an event to listen for any clicks.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  document.querySelector('.btn').addEventListener('click', 
  moveBar);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You can see above that we have assigned the &lt;code&gt;moveBar&lt;/code&gt; variable to be triggered when the user clicks, so now we need to go ahead and build that function out.&lt;/p&gt;

&lt;p&gt;Firstly, we will declare the function, and the assign the &lt;code&gt;bar&lt;/code&gt; variable to be the div with the &lt;code&gt;id&lt;/code&gt; of &lt;code&gt;bar&lt;/code&gt;.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  const moveBar = () =&amp;gt; {
    const bar = document.getElementById('bar');
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;From there we also need to set a standard width for our bar. Since we started it at &lt;code&gt;1%&lt;/code&gt; in our styles, we we're going to set it to the same inside of our function as follows:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; const moveBar = () =&amp;gt; {
   const bar = document.getElementById('bar');
   let width = 1;
 };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This default width can be anything you want. Many would prefer to start it at &lt;code&gt;0&lt;/code&gt; so it doesn't show up at all in the beginning, but for the sake of the tutorial I chose to start it at &lt;code&gt;1%&lt;/code&gt; so we could see it.&lt;/p&gt;

&lt;p&gt;Next, we're going to get started on controlling the progress bar. Because we want out bar to slowly load, we are going to make use of the &lt;code&gt;setInterval()&lt;/code&gt; built-in &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/setInterval"&gt;method&lt;/a&gt;.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; const moveBar = () =&amp;gt; {
   const bar = document.getElementById('bar');
   let width = 1;

   setInterval(rate, 30);
 };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Within that &lt;code&gt;setInterval()&lt;/code&gt;, you can see we're asking it to run &lt;code&gt;rate&lt;/code&gt; ever &lt;code&gt;30&lt;/code&gt; milliseconds. However, &lt;code&gt;rate&lt;/code&gt; doesn't exist yet, so lets go ahead and build that out.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  const moveBar = () =&amp;gt; {
    const bar = document.getElementById('bar');
    let width = 1;

    const rate = () =&amp;gt; {
      width++;
      bar.style.width = `${width}%`;
    };

   setInterval(rate, 30);
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;What we have done above works as follows: every time rate is wrong, it adds &lt;code&gt;1&lt;/code&gt; to width. It then access the &lt;code&gt;width&lt;/code&gt; style property, and reassigns it the new value of width. &lt;/p&gt;

&lt;p&gt;However, there is still one very crucial step we're missing. Whenever we call &lt;code&gt;setInterval()&lt;/code&gt;, it will run until we clear it. As our function is currently written, there is nothing tell the bar to stop, so even though we want the bar to stop progressing at 100%, the code doesn't know that. So let's tell it.&lt;/p&gt;

&lt;p&gt;We do this by updating the &lt;code&gt;rate&lt;/code&gt; function as follows:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  const rate = () =&amp;gt; {
    if (width &amp;gt;= 100) {
      clearInterval(interval);
    } else {
      width++;
      bar.style.width = `${width}%`;
    }
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now, once width hits 100, The interval is being cleared, stopping the width from updating and ceasing the progress bar. &lt;/p&gt;

&lt;p&gt;We don't want to reset the progress bar here because we want the view to remain &lt;code&gt;100%&lt;/code&gt; until they run the bar again. Since we have that initial, &lt;code&gt;1&lt;/code&gt; value assigned to our &lt;code&gt;width&lt;/code&gt; variable, it will reset that bar to &lt;code&gt;1%&lt;/code&gt; once the user clicks the button.&lt;/p&gt;

&lt;p&gt;So there you have it. An incredible simple progress bar. There are an endless amount of things you can do to improve this bar. You can add dynamic information so that the progress bar updates every time a promise is met during a fetch request, or do something simpler like add "pause" button. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-challenge"&gt;
  &lt;/a&gt;
  Your Challenge
&lt;/h2&gt;

&lt;p&gt;I want to see how you can improve upon this simple progress bar. Whether it's style improvements, refactoring my code, or adding additional features, &lt;a href="https://info.codecast.io/download"&gt;record a cast&lt;/a&gt; on &lt;a href="https://www.codecast.io/"&gt;CodeCast&lt;/a&gt;, then leave the URL down below. 👇🏻&lt;/p&gt;

&lt;p&gt;Happy coding! 💻&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Promise in Javascript</title>
      <author>Shahid Rizwan</author>
      <pubDate>Thu, 09 Sep 2021 17:36:53 +0000</pubDate>
      <link>https://dev.to/shaedrizwan/promise-in-javascript-56jo</link>
      <guid>https://dev.to/shaedrizwan/promise-in-javascript-56jo</guid>
      <description>&lt;p&gt;A promise is one of the most confusing concepts in javascript for someone new to Javascript. It may look quite complicated to understand at first sight, but it is quite simple and is not rocket science.&lt;/p&gt;

&lt;p&gt;Promise in javascript is similar to promise in real life, like how we promise to do a task like cleaning the room, it is a guarantee that we are going to do something in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-need-promise"&gt;
  &lt;/a&gt;
  Why do we need Promise?
&lt;/h2&gt;

&lt;p&gt;Before Promise, callback functions were used for performing asynchronous operations. Since it was confusing and had limitations in functionality, Promise was introduced in ES6. &lt;/p&gt;

&lt;p&gt;If there are multiple asynchronous operations to be done and if we try to use good-old Callbacks for them, we’ll find ourselves quickly inside a situation called Callback hell. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-simple-promise-function"&gt;
  &lt;/a&gt;
  A simple promise function
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let promise = new Promise((resolve, reject) =&amp;gt; { 
  let task_performed = true;
  if(task_performed) { 
    resolve('Success!'); 
  } else { 
    reject('Failed!'); 
  } 
}); 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#different-states-of-promise"&gt;
  &lt;/a&gt;
  Different states of Promise
&lt;/h2&gt;

&lt;p&gt;The 3 states of promise object are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Pending&lt;/li&gt;
&lt;li&gt;Resolved&lt;/li&gt;
&lt;li&gt;Rejected&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Pending:&lt;/strong&gt; It is the initial state of the Promise before Promise succeeds or fails. When we request data from the server by using a Promise, it will be in pending mode until we receive our data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resolved:&lt;/strong&gt; It is the state where a promise is fulfilled successfully. It's like when we use a promise to get data from the server, we get the resolved state when the data is successfully received.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rejected:&lt;/strong&gt; It is the state where a promise is not fulfilled due to some error.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KfoQ1wax--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ahu64bdoidbdxpto6fxi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KfoQ1wax--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ahu64bdoidbdxpto6fxi.png" alt="Promise flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The .then() method is called after a promise is resolved. We can use it to decide what to do with the resolved promise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let promise = new Promise((resolve, reject) =&amp;gt; { 
  let task_performed = true;
  if(task_performed) { 
    resolve('Success!'); 
  } else { 
    reject('Failed!'); 
  } 
}); 

promise.then((response) =&amp;gt; console.log(response))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also know that not all Promises will be resolved every time. What if the promise gets rejected? We use the .catch() method after a promise is rejected. It can be used for throwing a new error or logging the details to the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let promise = new Promise((resolve, reject) =&amp;gt; { 
  let task_performed = true;
  if(task_performed) { 
    resolve('Success!'); 
  } else { 
    reject('Failed!'); 
  } 
}); 

promise.then((response) =&amp;gt; console.log(response))
.catch((error) =&amp;gt; console.log(error))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What are some of your biggest questions about Ruby on Rails? Answer to be featured on our podcast 🎧  </title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Thu, 09 Sep 2021 16:59:51 +0000</pubDate>
      <link>https://dev.to/devteam/what-are-some-of-your-biggest-questions-about-ruby-on-rails-answer-to-be-featured-on-our-podcast-496l</link>
      <guid>https://dev.to/devteam/what-are-some-of-your-biggest-questions-about-ruby-on-rails-answer-to-be-featured-on-our-podcast-496l</guid>
      <description>&lt;p&gt;The &lt;a href="//dev.to/devdiscuss"&gt;DevDiscuss Podcast&lt;/a&gt; begins with an interview and ends with commentary from listeners — and we like to feature the &lt;em&gt;actual&lt;/em&gt; voices from our community!&lt;/p&gt;

&lt;p&gt;To inform an upcoming episode of the show, we'd like to know...&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#what-are-some-of-your-biggest-questions-about-ruby-on-rails"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What are some of your biggest questions about Ruby on Rails?&lt;/strong&gt;
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;For your chance to hear your actual comments on an upcoming episode, answer the question above by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Calling our Google Voice at +1 (929)500-1513 and leave a message 📞&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sending a voice memo to &lt;a href="mailto:pod@dev.to"&gt;pod@dev.to&lt;/a&gt; 🎙&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OR, leaving a comment here (we'll read your response aloud for you) 🗣&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please send in your recordings by Wednesday, September 15th at 1 PM, ET (5 PM UTC, 10 AM PT)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#voice-recordings-will-be-given-priority-placement"&gt;
  &lt;/a&gt;
  Voice recordings will be given priority placement 😉
&lt;/h4&gt;

&lt;p&gt;Catch up on recent episodes of the show &lt;a href="https://dev.to/devdiscuss"&gt;here&lt;/a&gt; 👀  &lt;/p&gt;

</description>
      <category>podcast</category>
      <category>discuss</category>
      <category>ruby</category>
      <category>rails</category>
    </item>
  </channel>
</rss>
