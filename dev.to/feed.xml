<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>3 Best Black Friday Deals for Online Educators, Instructors, and Course Creators in 2021</title>
      <author>javinpaul</author>
      <pubDate>Fri, 26 Nov 2021 05:39:30 +0000</pubDate>
      <link>https://dev.to/javinpaul/3-best-black-friday-deals-for-online-educators-instructors-and-course-creators-in-2021-44i9</link>
      <guid>https://dev.to/javinpaul/3-best-black-friday-deals-for-online-educators-instructors-and-course-creators-in-2021-44i9</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hello Devs, if you love teaching online or want to build another income stream, I won't say passive as it require work but if you are determined to share your knowledge by teaching and looking for best black Friday deals 2021 for online course platforms then you have come to the right place. &lt;/p&gt;

&lt;p&gt;I have been suggesting programmers and developers to create online courses to both learn and earn in 2022 for quite some time and have been recommending &lt;a href="https://try.thinkific.com/javinpaul8817-blackfriday2424"&gt;Thinkific&lt;/a&gt; and &lt;a href="https://teachable.sjv.io/c/1193463/998814/12646"&gt;Teachable&lt;/a&gt; to create their online courses and share their knowledge. &lt;/p&gt;

&lt;p&gt;A lot of you asked about discount coupons and deals to get started and that's why I am sharing the best discount offers for both Thinkific and Teachable platforms to create your online course business in 2021 -2022. &lt;/p&gt;

&lt;p&gt;In today's world, there is no better way to teach than creating courses and this pandemic has proved that e-learning is going to stay and increase in near future.&lt;/p&gt;

&lt;p&gt;But, creating a course is easier said than done, especially if you are a perfectionist. There are a lot of things involved like choosing a camera, mike, &lt;a href="https://javarevisited.blogspot.com/2020/03/top-5-websites-to-create-online-courses.html"&gt;online course hosting platforms&lt;/a&gt;, &lt;a href="https://javarevisited.blogspot.com/2019/12/how-to-create-online-courses-for-free.html"&gt;&lt;strong&gt;tools&lt;/strong&gt;&lt;/a&gt;, and buying other gear. &lt;/p&gt;

&lt;p&gt;If you want to invest in your online course creation tools and platforms then Black Friday and Cyber Monday are probably the best time to buy anything.&lt;/p&gt;

&lt;p&gt;With lots of offers flying around it's difficult to choose which one to choose and which one to let go and that's why I am creating this page where you can find the best Black Friday and Cyber Monday deals for online course creators and educators.&lt;/p&gt;

&lt;p&gt;This is my second such list, yesterday, I posted about the &lt;a href="https://dev.to/javinpaul/10-best-black-friday-cyber-monday-deals-2021-for-programmers-and-developers-2hg1"&gt;best Black Friday deals for programmers&lt;/a&gt; and my readers were very happy about it. &lt;/p&gt;

&lt;p&gt;So, I thought to put together a similar list for online course creators and educators, after all, I am also aiming to release my course as the next step after publishing my first book - &lt;a href="https://gumroad.com/l/QqjGH"&gt;Grokking the Coding Interview&lt;/a&gt;, and guess what I am going with &lt;a href="http://try.thinkific.com/javinpaul8817-blackfriday"&gt;Thinkfic&lt;/a&gt; to start my online course business.&lt;/p&gt;

&lt;p&gt;I chose Thinkific because they offer best-in-class tools, an app store, expert training, and help with creating and marketing your courses. &lt;/p&gt;

&lt;p&gt;They also run free webinars and free training from time to time to guide you through the whole process and on top of that they also have a &lt;strong&gt;&lt;a href="https://try.thinkific.com/javinpaul8817-pricing"&gt;free Thinkific plan&lt;/a&gt;&lt;/strong&gt; to create your online course for FREE which is simply best.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://try.thinkific.com/javinpaul8817-blackfriday"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LHNNn4KS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://thinkific.debunc.com/wp-content/uploads/2021/11/BF-21-social-OG-image-OFFER-LIVE.jpg" alt="Black Friday deal 2021 | Thinkific" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-best-black-friday-deals-2021-for-online-course-creators"&gt;
  &lt;/a&gt;
  3 Best Black Friday Deals 2021 for Online Course Creators
&lt;/h2&gt;

&lt;p&gt;Without wasting any more of your time, here is a list of the best Black Friday and Cyber Monday deals for online course creators and educators. These are deals that will help you significantly on your course creation journey.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-thinkific-blackfriday-deal-2021-3824-worth-of-value-for-396"&gt;
  &lt;/a&gt;
  1. &lt;a href="http://try.thinkific.com/javinpaul8817-blackfriday"&gt;Thinkific BlackFriday Deal 2021- $3824 worth of value for $396&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Thinkific is one of the most popular platforms for creating high-quality online courses. If you want to sell courses and want full control of them then you need to put them into platforms like &lt;a href="http://try.thinkific.com/javinpaul8817"&gt;Thinkific&lt;/a&gt; or Teachable and that's where this deal will help you.&lt;/p&gt;

&lt;p&gt;This deal will give you all the tools you need to create your first online course. For &lt;strong&gt;only $396,&lt;/strong&gt; you will get a limited-time bundle worth o*&lt;em&gt;ver $3824+&lt;/em&gt;*, with all the tools and training to guide you through your course creation journey.&lt;/p&gt;

&lt;p&gt;Whether you're a beginner or someone looking to take your courses to the next level, you'll jump into 2022 as a confident course creator ready to build the online education business you've been dreaming about.&lt;/p&gt;

&lt;p&gt;Here are the things you will get in this Thinkific Bundle:&lt;/p&gt;

&lt;p&gt;1. 6 months of &lt;a href="http://try.thinkific.com/javinpaul8817-omf"&gt;&lt;strong&gt;Thinkific Pro + Growth  Plan&lt;/strong&gt;&lt;/a&gt; (their most popular plan) for the price of 4. Those 2 free months will give you extra time to make sure you get started on the right foot! &lt;/p&gt;

&lt;p&gt;And, if you claim your bundle by November 26th, and you'll get $100 in Fiverr credit for your online course business. That's $100 you can use on branding, course content, marketing materials, and more&lt;/p&gt;

&lt;p&gt;2. Step-by-step 6- days training from Thinkific's lead educator, who will teach you how to choose and validate your course topic, map your learning journey and curriculum, and build an effective marketing funnel.&lt;/p&gt;

&lt;p&gt;4.  best-in-class business tools&lt;/p&gt;

&lt;p&gt;You can see, you will get access to everything you will need to create your first online course in 2022.  I mean this is seriously a great deal for anyone who wants to open their online course business in 2022 and trust me you won't get this much discount after 30th November, so hurry up.&lt;/p&gt;

&lt;p&gt;Here is the link to get this deal - &lt;strong&gt;&lt;a href="https://try.thinkific.com/javinpaul8817-blackfriday2424"&gt;Claim your Thinkific Black Friday Bundle&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://try.thinkific.com/javinpaul8817-blackfriday2424"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rfYMCXHi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-vxmsUOqo7n0/YZs4SvcnMpI/AAAAAAAAqQg/Wl7KYwTUtroPRCffN31UVFSAWc-8dl6yQCLcBGAsYHQ/w468-h300/image.png" alt="Best Thinkific Discount and Black Friday Deal 2021 2022" width="468" height="299"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#2-teachable-best-black-friday-deal-save-up-to-47"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://teachable.sjv.io/c/1193463/998814/12646"&gt;Teachable Best Black Friday Deal (save up to 47%)&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Teachable is another popular online platform and if you like Teachable this is probably the best time to buy their annual plan as you will save up to 47% or almost half of your money. With an annual Teachable plan, you can make money online by selling online courses and coaching products.&lt;/p&gt;

&lt;p&gt;If you don't know &lt;a href="https://teachable.sjv.io/c/1193463/998814/12646"&gt;Teachable&lt;/a&gt; is a knowledge commerce platform, a trusted business partner to entrepreneurs like me (and you!), and a resource for anyone looking to turn their expertise into a profit. What I love about Teachable is they remove the tricky stuff (like coding and payment processing) to make it easier than ever to share my knowledge. Features include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Unlimited video bandwidth&lt;/li&gt;
&lt;li&gt;  Unlimited students&lt;/li&gt;
&lt;li&gt;  Seamless third-party integrations&lt;/li&gt;
&lt;li&gt;  Powerful, easy-to-use page editor&lt;/li&gt;
&lt;li&gt;  Student quizzes and course completion certificates&lt;/li&gt;
&lt;li&gt;  Advanced pricing options, like subscriptions and one-time payments&lt;/li&gt;
&lt;li&gt;  Comprehensive reporting tools&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Teachable also supports &lt;a href="https://teachable.sjv.io/c/1193463/998807/12646"&gt;online coaching&lt;/a&gt;, which lets you sell and promote one-on-one coaching, schedule, and intake clients, and earn money all in one place.&lt;/p&gt;

&lt;p&gt;By joining Teachable during their Black Friday promotion, not only will you save hundreds of dollars, but you'll also join more than 100,000 other creators who have collectively earned over $500 million on the platform, teaching everything from coding to watercolor painting to foreign languages.&lt;/p&gt;

&lt;p&gt;Here is the link to get Teachable Black Friday deal - &lt;strong&gt;&lt;a href="https://teachable.sjv.io/rnLVgy"&gt;Teachable Black Friday discounts&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://teachable.sjv.io/c/1193463/998814/12646"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3qe8Xh9J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-8OKXomfZzfE/YZs90ZPo7II/AAAAAAAAqQo/cMH6Gq1z2aEriB-saj64Oxs5d4AUlh90wCLcBGAsYHQ/w554-h359/image.png" alt="Best Teachable Discount Offer Black Friday deal 2021 2022" width="554" height="359"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-podia-best-podia-deal-2021-save-up-to-60"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://www.podia.com/?via=javin"&gt;Podia&lt;/a&gt; [Best Podia Deal 2021 - Save up to 60%]
&lt;/h3&gt;

&lt;p&gt;This is another best platform to host your online courses and create your online course business in 2022. If you don't know Podia is an all-in-one digital storefront that gives you everything you need to host, market, and sell your products, like &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Supports courses, webinars, digital downloads, online communities, and more,&lt;/li&gt;
&lt;li&gt;  No third-party apps are required,&lt;/li&gt;
&lt;li&gt;  Super-friendly, 24/7 live customer support,&lt;/li&gt;
&lt;li&gt;  Affordable plans starting at just $39/mo with zero transaction fees,&lt;/li&gt;
&lt;li&gt;  Everything you need, including sales pages, file hosting, checkout, email marketing,&lt;/li&gt;
&lt;li&gt;  And so much more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Podia can replace 5+ tools for creators at a fraction of the cost!. No surprise that Podia is also running Black Friday and Cyber Monday campaigns and offering attractive discounts and offers.&lt;/p&gt;

&lt;p&gt;If you've been thinking about adding digital products to your business plan or moving your existing products to a new platform, you'll want to check out this fantastic &lt;strong&gt;&lt;a href="https://www.podia.com/black-friday-cyber-monday-2021?via=javin"&gt;Black Friday-Cyber Monday deal&lt;/a&gt;&lt;/strong&gt; from Podia.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.podia.com/black-friday-cyber-monday-2021?via=javin"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jbVBboSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/19dvw6heztyg/7bUo2M5lwRLywJcpITPZwW/0a36c81f901c7ce71a0c5b69107d9535/2.png%3Fw%3D1440%26q%3D75" alt="Podia, teachable, Thinkific Cyber Monday deals |  Podia Black Friday deal 2021" width="800" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you sign up this weekend, you'll get a 14-day free trial and lock in 10% off current plan prices -PLUS- &lt;strong&gt;you'll save 50% off your first two months&lt;/strong&gt;. That's two-and-a-half months of Podia for just $35 so you can begin setting up your store, loading products, and making your dream happen! You will also get a 10% additional discount if you use my link in this article.&lt;/p&gt;

&lt;p&gt;As a creator, selling your products helps you grow your income both now and in the future. The problem, as you well know, is many of the product platforms out there come with significant challenges---incomplete solutions that have to be hacked together, tools that require complex technical skills, or fees that take a big cut of your earnings.&lt;/p&gt;

&lt;p&gt;And that's why I love Podia. It's simple, intuitive, and easy to use. It's also affordable, with plans starting at just &lt;strong&gt;&lt;a href="https://www.podia.com/pricing/?via=javin"&gt;$39/month&lt;/a&gt;&lt;/strong&gt; and no fees of any kind.&lt;/p&gt;

&lt;p&gt;Podia is an all-in-one platform you can use to run your entire business, from hosting your website and products to collecting email addresses, sending newsletters and drips, collecting payments, running webinars, and even hosting an online community.&lt;/p&gt;

&lt;p&gt;If you're thinking about switching platforms, you don't want to miss this chance to get started. Sign up today, offer valid from 12:00am ET on Black Friday (11/26) until 11:59pm ET on Cyber Monday (11/29)&lt;/p&gt;

&lt;p&gt;Here is the link to get your discount - &lt;strong&gt;&lt;a href="https://www.podia.com/black-friday-cyber-monday-2021?via=javin"&gt;Save 50% OFF on Podia for 2 Months&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.podia.com/black-friday-cyber-monday-2021?via=javin"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XmSNO-Ew--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEiOcej3AinS_hBQybGxYBgYlxXIe0LTg_1Th-hKOcRfoiP_wPPBaqmYf7CYK_qA9cLVVGmo9KfOG6qtbwreKJnKv19UhHnvbM1XbU6MbUge0bacxfD4hcSNJO-p9d-aClr8bBCx8MDEqggvWJa3ZJIki_3Ee1SZncHl6Otebkr1AKB7KfEXPFYjhC5j%3Dw479-h250" alt="Best Podia deal 2021 2022 - 50% OFF on Black Friday Cyber Monday" width="478" height="250"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all about the &lt;strong&gt;best Black Friday Deals for Educators, Online Instructors, and Course Creators&lt;/strong&gt;. I suggest you get one of these deals to get ready for your online course next year. Creating an online course is not easy but it pays huge in long run and you also get a chance to learn and build your audience.&lt;/p&gt;

&lt;p&gt;Let me know if you have any questions about Podia, Thinkific, or Teachable --- I'm happy to help!&lt;/p&gt;

&lt;p&gt;Other** Online Courses articles** you may like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://teachable.sjv.io/c/1193463/1014938/12646"&gt;&lt;strong&gt;7 Steps To Launch Your Own Profitable Online Course&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/06/why-programmers-should-create-and-sell.html#axzz5zt6Ca1vv"&gt;Why Every Developer Should Create Online Courses &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/09/teachable-or-udemy-which-platform-is-best-online-course.html"&gt;Teachable, Thinkific, or Udemy - which is the best platform for course creators?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/12/top-5-courses-to-learn-how-to-create-online-courses.html"&gt;Top 5 Courses to learn how to create online courses&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/12/top-5-courses-to-learn-how-to-create-online-courses.html"&gt;5 Resources to Create best selling Online Courses&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/12/how-to-create-online-courses-for-free.html"&gt;Learn How to Create Online Courses in 10 minutes&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/03/top-5-websites-to-create-online-courses.html"&gt;5 Best Websites to Create and Sell your Courses&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/03/10-reasons-to-create-online-courses.html"&gt;10 Reasons to Create Online Courses as a Side hustle&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/10/the-2018-react-developer-roadmap.html"&gt;The 2021 React.js Developer RoadMap&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2017/12/top-10-pluralsight-courses-java-and-web-developers.html"&gt;Top 10 Pluralsight Courses and Certifications for Programmers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2017/12/10-things-java-programmers-should-learn.html#axzz5atl0BngO"&gt;10 Things Java Developer should learn in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://hackernoon.com/5-online-teaching-and-coaching-platforms-for-course-creators-and-bloggers-3lfj302n"&gt;5 Best Online Teaching Platform for Course Creators&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading this article so far. If you find these &lt;strong&gt;best Black Friday and Cyber Monday deals for online course creators&lt;/strong&gt;, particularly the Teachable and Thinkific black Friday deals useful then please share them with your friends and colleagues. &lt;/p&gt;

&lt;p&gt;If you have any questions or feedback or facing any problem creating online courses, selling, or doing marketing, please drop a note below, and we'll try to answer your question our best.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>news</category>
      <category>deals</category>
      <category>startup</category>
    </item>
    <item>
      <title>Interview questions for JS</title>
      <author>Junaid</author>
      <pubDate>Fri, 26 Nov 2021 05:32:10 +0000</pubDate>
      <link>https://dev.to/__junaidshah/interview-questions-for-js-4a4m</link>
      <guid>https://dev.to/__junaidshah/interview-questions-for-js-4a4m</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MH-PHnD3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8jr92rc5beq630cclcv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MH-PHnD3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8jr92rc5beq630cclcv.png" alt="Javascript Interview Questions" width="800" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascipt-is-a-great-language-and-i-believe-every-web-developer-in-todays-world-should-definitely-learn-it"&gt;
  &lt;/a&gt;
  Javascipt is a great language and i believe every web developer in todays world should definitely learn it.
&lt;/h2&gt;

&lt;p&gt;Not is it just awesome but also by just learning and understanding javascript you will be able to learn and use so many great frameworks that are buzzing in current job market &lt;br&gt;
like  &lt;strong&gt;React&lt;/strong&gt; , &lt;strong&gt;Angular&lt;/strong&gt; , &lt;strong&gt;Next JS&lt;/strong&gt;  etc.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So this is a gist of some of the questions and concepts that i have came across in my interview for some product based startups.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Basics&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Basics of javascript should be clear very much , Things like arrays , objects , variables etc should be very clear before even you think of applying at any job as a js dev.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Arrays&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Arrays are very important and since you will be using them so much in your day to day use case as being a web dev you should definitely learn all the things that can be done in js for arrays like &lt;br&gt;
     * Push&lt;br&gt;
     * pop&lt;br&gt;
     * shift&lt;br&gt;
     * unshift&lt;br&gt;
also you should learn how we iterate over arrays &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Also learn these :-&lt;br&gt;
      * Slice&lt;br&gt;
      * Splice&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Objects&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Every developer in his day to day life will definitely come across objects while working on a javascript project .&lt;br&gt;
So every interviewer expects you know the basics of Objects.&lt;/p&gt;

&lt;p&gt;Try to understand them and apply them in any of your projects.&lt;/p&gt;

&lt;p&gt;Objects will also be used while you work on things like json all that is is a big blob of object so you have to work with them .&lt;/p&gt;

&lt;p&gt;So try to understand all related topics to objects &lt;br&gt;
Things like how we add an item to an object&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to iterate through an object&lt;/li&gt;
&lt;li&gt;How can we delete an item from an object&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Try to also learn things like object.keys , object.freeze etc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;More Good Topics&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every interviewer will ask you questions related to these questions so its very necessary that you know these concepts and can explain them in detail &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Whats Execution context in js.&lt;/li&gt;
&lt;li&gt;Whats a promise and how to create one .&lt;/li&gt;
&lt;li&gt;What are callbacks &lt;/li&gt;
&lt;li&gt;whats async/await used for &lt;/li&gt;
&lt;li&gt;Difference between == and ===&lt;/li&gt;
&lt;li&gt;whats call , apply and bind .&lt;/li&gt;
&lt;li&gt;Difference between simple functions and arrow functions&lt;/li&gt;
&lt;li&gt;Whats 'this' in javascript&lt;/li&gt;
&lt;li&gt;What are closures &lt;/li&gt;
&lt;li&gt;whats memoization&lt;/li&gt;
&lt;li&gt;what is an IIFE(Immediately Invoked Function Expression).&lt;/li&gt;
&lt;li&gt;Difference between let and Var.&lt;/li&gt;
&lt;li&gt;Different stages of a promise.&lt;/li&gt;
&lt;li&gt;Difference between setTimeout and setInterval&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;There are other topics also which you should give a good go before going for the interview , not everyone will ask you these but its good to know them &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Whats prototype and prototypal inheritance&lt;/li&gt;
&lt;li&gt;what are anonymous functions&lt;/li&gt;
&lt;li&gt;Event bubbling and how do you prevent that.&lt;/li&gt;
&lt;li&gt;Whats promise.all&lt;/li&gt;
&lt;li&gt;whats a polyfill.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are many many topics in javascript that you would to know but for a fresher js or even for 1+ year of experience these are the most asked questions .&lt;br&gt;
You can also checkout the greats series by &lt;a href="https://youtu.be/pN6jk0uUrD8"&gt;Akshay Saini&lt;/a&gt; which explains all the javascript concepts in great detail.&lt;/p&gt;

&lt;p&gt;All right , i guess this will be hopefully helpful for any one out there .&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Feel free to reach out to me for any thing over email&lt;/em&gt;&lt;br&gt;
&lt;a href="https://linktr.ee/jshahcodes"&gt;junaid shah&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>career</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Make your first open-source contribution</title>
      <author>Dinesh S</author>
      <pubDate>Fri, 26 Nov 2021 03:47:04 +0000</pubDate>
      <link>https://dev.to/dineshs91/make-your-first-open-source-contribution-p5</link>
      <guid>https://dev.to/dineshs91/make-your-first-open-source-contribution-p5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#how-to-make-your-first-opensource-contribution"&gt;
  &lt;/a&gt;
  How to make your first open-source contribution?
&lt;/h2&gt;

&lt;p&gt;There are many ways you can contribute to open source and it doesn't have to be exclusive to code.&lt;/p&gt;

&lt;p&gt;You can contribute by&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Writing code&lt;/li&gt;
&lt;li&gt;Reporting bugs&lt;/li&gt;
&lt;li&gt;Reviewing pull requests&lt;/li&gt;
&lt;li&gt;Helping triage an issue&lt;/li&gt;
&lt;li&gt;Adding/Improving documentation&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#find-a-project-to-contribute-to"&gt;
  &lt;/a&gt;
  Find a project to contribute to
&lt;/h2&gt;

&lt;p&gt;If you are working on a project, check out the Github repositories of the libraries you are using. &lt;/p&gt;

&lt;p&gt;For example, if you are working on a frontend project, you can check out react-starter, Bootstrap, Tailwindcss projects.&lt;/p&gt;

&lt;p&gt;This is a sample of dependencies from &lt;code&gt;package.json&lt;/code&gt;. Most of these are open-source. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A2FOC8jq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631264461525/yiiLt567x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A2FOC8jq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631264461525/yiiLt567x.png" alt="dependencies.png" width="514" height="482"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#identifying-the-right-thing-to-contribute-to"&gt;
  &lt;/a&gt;
  Identifying the right thing to contribute to
&lt;/h2&gt;

&lt;p&gt;Identify the type of contribution you want to make. The best place is, to look at the project's issue board. Most of the projects have labels for the issues. &lt;/p&gt;

&lt;p&gt;Look for these labels "good first issue", "beginner", "documentation"&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Label type&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;good first issue&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3y66NOFk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631264711835/V751aXfxS.png" alt="Good first issue.png" width="880" height="401"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;beginner&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Pr8a7ii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631265351452/mW0puHPld.png" alt="Beginner.png" width="880" height="241"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;documentation/doc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5LL6b28o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631264989098/2sug36Ym9.png" alt="Documentation.png" width="880" height="410"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#writing-code"&gt;
  &lt;/a&gt;
  Writing code
&lt;/h2&gt;

&lt;p&gt;You can either fix an issue or implement a new feature. Add a test case if possible and appropriate documentation depending on the project.&lt;/p&gt;

&lt;p&gt;Here is a PR that I created &lt;a href="https://github.com/visionmedia/node-progress/pull/128/files"&gt;https://github.com/visionmedia/node-progress/pull/128/files&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#reporting-a-bug"&gt;
  &lt;/a&gt;
  Reporting a bug
&lt;/h2&gt;

&lt;p&gt;If you have come across a bug in any of the libraries you are using, create a new issue. Provide details like steps to reproduce, version of the library you are using, browser version, OS, etc. &lt;/p&gt;

&lt;p&gt;If a project has an issue template, follow that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tMV0GPAP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631265439160/JUXaVJ5t1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tMV0GPAP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631265439160/JUXaVJ5t1.png" alt="Issue template Helm.png" width="880" height="358"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#requesting-a-feature"&gt;
  &lt;/a&gt;
  Requesting a feature
&lt;/h2&gt;

&lt;p&gt;You can request a feature in a library by opening an issue. &lt;/p&gt;

&lt;p&gt;Here is one such feature request that I had raised. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--__GU4xCz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631265771757/cZkDPmnVx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--__GU4xCz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631265771757/cZkDPmnVx.png" alt="feature request.png" width="880" height="380"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#reviewing-pull-requests"&gt;
  &lt;/a&gt;
  Reviewing pull requests
&lt;/h2&gt;

&lt;p&gt;Don't rush into reviewing pull requests. Judge the tone of the project by reviewing past pull requests. &lt;/p&gt;

&lt;p&gt;Be humble with your feedback and don't assume authority unless you are a frequent contributor to the project.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#triage-an-issue"&gt;
  &lt;/a&gt;
  Triage an issue
&lt;/h2&gt;

&lt;p&gt;Open source projects have a lot of issues and maintainers do not usually have time to check each one of them. It would be of great help if you can help them triage an open issue. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#addingimproving-documentation"&gt;
  &lt;/a&gt;
  Adding/Improving documentation
&lt;/h2&gt;

&lt;p&gt;Look for issues with the label "Documentation". You can improve existing documentation, either by updating the content or by adding more examples.&lt;/p&gt;

&lt;p&gt;If you find a README that is unclear, create an issue and offer your help to improve it.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#project-templates-amp-coding-guidelines"&gt;
  &lt;/a&gt;
  Project templates &amp;amp; coding guidelines
&lt;/h2&gt;

&lt;p&gt;When you are contributing to a project, follow the coding practices of that project. Maintainers will be very particular about this and your PR won't be accepted. &lt;/p&gt;

&lt;p&gt;If you are reporting a bug, make sure to follow the issue template.&lt;/p&gt;

&lt;p&gt;For example, check out this contributing guide from the docker/compose project &lt;a href="https://github.com/docker/compose/blob/master/CONTRIBUTING.md"&gt;https://github.com/docker/compose/blob/master/CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#patience"&gt;
  &lt;/a&gt;
  Patience
&lt;/h2&gt;

&lt;p&gt;Remember, it is an open-source project. So don't expect your PR to be merged immediately. Wait for at least a week before you comment and ask for feedback.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#communication"&gt;
  &lt;/a&gt;
  Communication
&lt;/h2&gt;

&lt;p&gt;Once you have decided to address an issue, make sure to communicate by commenting on the issue that you want to work on it. This makes sure that no one else works on it and saves time for everyone.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IoCa0q0X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631266432080/CWLT7_BHk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IoCa0q0X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631266432080/CWLT7_BHk.png" alt="start work.png" width="880" height="112"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also create a work in progress PR and ask for feedback&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#sites-to-help-you-find-beginnerfriendly-or-easy-issues"&gt;
  &lt;/a&gt;
  Sites to help you find beginner-friendly or easy issues
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/topics/good-first-issue"&gt;https://github.com/topics/good-first-issue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MunGell/awesome-for-beginners"&gt;https://github.com/MunGell/awesome-for-beginners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://goodfirstissue.dev/"&gt;https://goodfirstissue.dev/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://up-for-grabs.net/"&gt;https://up-for-grabs.net/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://firstcontributions.github.io/"&gt;https://firstcontributions.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#dealing-with-feedback"&gt;
  &lt;/a&gt;
  Dealing with feedback
&lt;/h2&gt;

&lt;p&gt;You might not like some feedback, it's ok. It happens to all of us.  Don't take it personally. Be patient and understand that the maintainer might not be getting paid for their work.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#imposter-syndrome"&gt;
  &lt;/a&gt;
  Imposter syndrome
&lt;/h2&gt;

&lt;p&gt;Your first PR might be intimidating. Don't let that get in your way. Take this PR as an inspiration &lt;a href="https://github.com/playframework/playframework/pull/616"&gt;https://github.com/playframework/playframework/pull/616&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This was Kent C. Dodds's first contribution which fixes a typo. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RLU9UYpB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631264186145/638_82zHU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RLU9UYpB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631264186145/638_82zHU.png" alt="Kent first contribution.png" width="880" height="250"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now he is a pro contributor and he has done numerous contributions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BplsUqKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631264198657/OpmJsOsUN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BplsUqKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631264198657/OpmJsOsUN.png" alt="Kent 2021 contribution.png" width="880" height="185"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>React.js 18: An overview of its new features and updates</title>
      <author>DhiWise</author>
      <pubDate>Fri, 26 Nov 2021 03:42:05 +0000</pubDate>
      <link>https://dev.to/dhiwise/react-js-18-an-overview-of-its-new-features-and-updates-4nh1</link>
      <guid>https://dev.to/dhiwise/react-js-18-an-overview-of-its-new-features-and-updates-4nh1</guid>
      <description>&lt;p&gt;React is an open-source JavaScript UI library designed by &lt;a href="http://www.facebook.com"&gt;Facebook&lt;/a&gt;, it has gained a lot of popularity in the front-end developer community.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K4P-EtXu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2560/0%2AfBxLhsEv806GI576.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K4P-EtXu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2560/0%2AfBxLhsEv806GI576.jpg" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React 18 is shifting from alpha to beta and has some exciting features and updates for the React.js development community. All updates are primarily aimed to maintain third-party libraries by introducing out-of-the-box features and improvements.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;React 18 new features and improvements are possible thanks to the new opt-in “concurrent rendering” mechanism in React 18 that enables React to create multiple versions of the UI at the same time. Though this change is mostly behind the scenes, it will unlock new possibilities to improve the app performance. — React document&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So let’s dive into the React 18 new features and updates.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-introduction-of-new-root-api"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Introduction of new Root API&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The “root” is a pointer to the top-level data structure used by React to track a tree render. In the legacy root API &lt;strong&gt;&lt;em&gt;(ReactDOM.render)&lt;/em&gt;&lt;/strong&gt;, the root was opaque to the users as we attached it to the DOM element and is accessed using the DOM node without exposing it to the users. However, we don’t need to store the root to the DOM node.&lt;br&gt;
The legacy Root API has some issues with the running updates, for example, we need to continue passing the container into the render, even though it never changes. The addition of a new root API fixes this issue so, we no longer need to pass the container into the render.&lt;br&gt;
Also, the changes in root API allow us to remove the &lt;strong&gt;&lt;em&gt;hydrate&lt;/em&gt;&lt;/strong&gt; method and replace it with an option on the root, similarly, it changes the way render callback works. For more details refer &lt;a href="https://github.com/reactwg/react-18/discussions/5"&gt;discussion on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-improvement-in-automatic-batching"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Improvement in Automatic Batching&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Batching is nothing but grouping React multiple state updates together into a single render state to achieve better computational performance.&lt;br&gt;
In the earlier version of React, the batching was only done for React event handlers. However, in the case of any other events such as asynchronous state updates, updates inside promises, set timeouts, and native event handlers updates are not batched in React by default.&lt;br&gt;
The issue is resolved by adding automatic batching in React 18 using Root API, now all updates will be automatically batched irrespective of their origin.&lt;br&gt;
Further, you can opt out of batching using &lt;strong&gt;&lt;em&gt;ReactDOM. flushSync()&lt;/em&gt;&lt;/strong&gt;, in the cases, you need to read something immediately from the DOM once the state is changed.&lt;br&gt;
Refer &lt;a href="https://github.com/reactwg/react-18/discussions/21"&gt;to React 18 GitHub discussion&lt;/a&gt; for detailed information.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-new-start-transition-api-to-keep-your-app-responsive"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. New Start Transition API to keep your app responsive&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;One of the most significant updates of React 18 is the introduction of &lt;strong&gt;&lt;em&gt;startTransition&lt;/em&gt;&lt;/strong&gt; API that keeps your app responsive even during the large screen updates.&lt;br&gt;
Sometimes during heavy update operations, your app became unresponsive, the &lt;strong&gt;&lt;em&gt;startTransition&lt;/em&gt;&lt;/strong&gt; API can be very useful to handle such situations.&lt;br&gt;
The API allows users to control the concurrency aspect to improve user interaction. It is done by wrapping heavy updates as “&lt;strong&gt;&lt;em&gt;startTransition&lt;/em&gt;&lt;/strong&gt;” and will be interrupted only if more urgent updates are initiated. Thus it actually classifies urgent updates and slow updates.&lt;br&gt;
If the transition is interrupted by the user actions, React will throw out the stale rendering work that hasn’t yet finished and will render only the latest update. &lt;br&gt;
Refer to &lt;a href="https://github.com/reactwg/react-18/discussions/41"&gt;React 18 GitHub discussion&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-new-suspense-ssr-architectural-improvements"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. New Suspense SSR, architectural improvements&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;React 18 has added an architectural improvement to the react server-side rendering. Server-side rendering generates HTML from the react components on the server and sends it back to the client, so the client can now see the page content before the JavaScript bundle load and run.&lt;br&gt;
Well, there is a drawback of SSR,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It does not allow components to wait for data. That means before rendering HTML to the client, you must have your data ready for components on the server.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You need to load the JavaScript for all components on the client before hydrating any of them to make them interactive.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Also, you need to wait for all the components to be hydrated before interacting with them.&lt;br&gt;
The problem can be overcome using two new features of &lt;strong&gt;&lt;em&gt;suspense&lt;/em&gt;&lt;/strong&gt;, i.e. Streaming HTML and Selective hydration.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Streaming HTML on the server&lt;/strong&gt;&lt;br&gt;
With the streaming HTML, React will send the static pieces of UI components using suspense, which will decide which part of the component will take longer to load and what can be directly rendered, so the user does not need to wait to see the initial UI render.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Selective Hydration on the client&lt;/strong&gt;&lt;br&gt;
With selective hydration, components that are wrapped under suspense will not block hydration. Once the JS and content are loaded for each component it will start hydrating without blocking another component.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information refer to &lt;a href="https://github.com/reactwg/react-18/discussions/37"&gt;React 18 GitHub discussion&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;React.js 18 includes out-of-the-box improvements and new features that look impactful. It has cleared the way for new possibilities in React.js app development.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>showdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>How I use Notion while learning programming</title>
      <author>All About Ishaan</author>
      <pubDate>Fri, 26 Nov 2021 02:29:05 +0000</pubDate>
      <link>https://dev.to/allaboutishaan/how-i-use-notion-while-learning-programming-5118</link>
      <guid>https://dev.to/allaboutishaan/how-i-use-notion-while-learning-programming-5118</guid>
      <description>&lt;p&gt;Notion is pretty popular these days and I've had it for almost 2 years now. I've been experimenting ever since with several ways to utilize it to my needs. In this blog post, I will specifically explain how I use Notion for programming, especially learning to code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-notion"&gt;
  &lt;/a&gt;
  What is Notion?
&lt;/h2&gt;

&lt;p&gt;Notion is an application that provides components, such as notes, databases, kanban boards, wikis, calendars and reminders. It has almost anything that you need for project management, note taking (except a scribble feature that I wish there was one) and writing blog posts (I'm using it to write this article right now). You can get started with notion &lt;a href="https://www.notion.so/guides"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-i-use-notion"&gt;
  &lt;/a&gt;
  How I use Notion
&lt;/h1&gt;

&lt;p&gt;I use Notion while learning how to code in various ways. So let's dive into it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-snippets"&gt;
  &lt;/a&gt;
  Code Snippets
&lt;/h2&gt;

&lt;p&gt;You ever feel like there is this one thing that you keep searching how to do over and over again? You can't seem to just memorize how to do it.&lt;/p&gt;

&lt;p&gt;Notion got you!&lt;/p&gt;

&lt;p&gt;There is a code snippet feature inside notion and it has syntax for the most popular languages out there!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RZs2PxJ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631448804990/rnzPk0iCR.gif%3Fauto%3Dformat%2Ccompress%26gif-q%3D60%26format%3Dwebm" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RZs2PxJ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631448804990/rnzPk0iCR.gif%3Fauto%3Dformat%2Ccompress%26gif-q%3D60%26format%3Dwebm" alt="code.gif" width="880" height="342"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-do-you-organize-them"&gt;
  &lt;/a&gt;
  How do you organize them?
&lt;/h3&gt;

&lt;p&gt;There are various ways to organize your code snippets:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Creating pages within pages.&lt;/li&gt;
&lt;li&gt;  creating a database&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#pages-within-pages"&gt;
  &lt;/a&gt;
  Pages within Pages
&lt;/h3&gt;

&lt;p&gt;This is the way I personally organize my code snippets. I like the navigations between pages because it is like any folder navigation (with icons)&lt;/p&gt;

&lt;p&gt;it is so simple do; you just create pages with all the languages you want to add code snippets to, inside those pages you add other pages with the name of the code snippet as the title of the page.&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p0DbTOKI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631448860856/uESVI1XoQ.png%3Fauto%3Dcompress%2Cformat%26format%3Dwebp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p0DbTOKI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631448860856/uESVI1XoQ.png%3Fauto%3Dcompress%2Cformat%26format%3Dwebp" alt="image.png" width="880" height="465"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;if you click on flutter for example, you see pages with different code snippets I saved:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AEqt98a7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631448932875/IFoIROAGV.png%3Fauto%3Dcompress%2Cformat%26format%3Dwebp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AEqt98a7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631448932875/IFoIROAGV.png%3Fauto%3Dcompress%2Cformat%26format%3Dwebp" alt="image.png" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-database"&gt;
  &lt;/a&gt;
  Creating a database
&lt;/h3&gt;

&lt;p&gt;Databases are the coolest feature in notion and you can do so much stuff with it. It is more complicated than pages though.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Creating the database&lt;/p&gt;

&lt;p&gt;just type "/table" and choose "table - inline" from the options&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tXkt80e2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631449024366/gKGNOqTsy.png%3Fauto%3Dcompress%2Cformat%26format%3Dwebp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tXkt80e2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631449024366/gKGNOqTsy.png%3Fauto%3Dcompress%2Cformat%26format%3Dwebp" alt="image.png" width="875" height="497"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adding your snippets&lt;/p&gt;

&lt;p&gt;In this step you should just add your snippets in any languages you want&lt;/p&gt;

&lt;p&gt;I added some pages for the purpose of this article:&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--adiMq4ym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631449091887/zoylHhIVT.png%3Fauto%3Dcompress%2Cformat%26format%3Dwebp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--adiMq4ym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631449091887/zoylHhIVT.png%3Fauto%3Dcompress%2Cformat%26format%3Dwebp" alt="image.png" width="880" height="315"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adding Tags&lt;/p&gt;

&lt;p&gt;This is the most important part of the process, change the type of the "Tags" section of the table to "Select" and now add a tag with the language name to every page&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--70ucBfdd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631449213142/aeY1da8yP.png%3Fauto%3Dcompress%2Cformat%26format%3Dwebp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--70ucBfdd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631449213142/aeY1da8yP.png%3Fauto%3Dcompress%2Cformat%26format%3Dwebp" alt="image.png" width="880" height="313"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Filtering the database&lt;/p&gt;

&lt;p&gt;When you hover over the "Add a view" button next to the title of the list, you will see something like this:\&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z_76Pr6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631449277580/kt3ahRDdw.png%3Fauto%3Dcompress%2Cformat%26format%3Dwebp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z_76Pr6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631449277580/kt3ahRDdw.png%3Fauto%3Dcompress%2Cformat%26format%3Dwebp" alt="image.png" width="418" height="704"&gt;&lt;/a&gt;This is great because it allows us to create different versions of the same database. We will use it to make a table for every language that you can choose from, this GIF illustrates how:&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RNDXMo_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631449377792/fbg6W2pSC.gif%3Fauto%3Dformat%2Ccompress%26gif-q%3D60%26format%3Dwebm" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RNDXMo_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631449377792/fbg6W2pSC.gif%3Fauto%3Dformat%2Ccompress%26gif-q%3D60%26format%3Dwebm" alt="filtering.gif" width="" height=""&gt;&lt;/a&gt;Repeat this for all languages and you are done!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#saving-documentationresources-links"&gt;
  &lt;/a&gt;
  Saving documentation/resources links
&lt;/h2&gt;

&lt;p&gt;Sometimes I come across websites, threads and documents that I want to save, especially ones which I come across through twitter while I'm on my phone. I keep everything in one place by a notion page that has all the links in them.&lt;/p&gt;

&lt;p&gt;I use the database way of storing things for bookmarks and I keep track of which ones I read through tags. It's similar to the way I mentioned above except that the tags are "unread" and "read" only.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#taking-notes"&gt;
  &lt;/a&gt;
  Taking Notes
&lt;/h2&gt;

&lt;p&gt;When I'm going through a course or a book, I find that the best way for me to focus is through rephrasing what I hear/read and write it in my own way.&lt;/p&gt;

&lt;p&gt;I find writing through notion is the best way to do that because other software like word and google docs add space between pages and it makes it hard to style. I get annoyed when one part of the paragraph is in a page and the other part is in another page.&lt;/p&gt;

&lt;p&gt;Notion's pages are blog post like so you don't have to get distracted by irrelevant things, not to mention that the keyboard shortcuts are very easy and intuitive to use.&lt;/p&gt;

&lt;p&gt;There are a ton of notion templates for taking notes and you can create one for yourself! You can search for any type of note taking system and you will find a notion template for it (e.g. &lt;a href="https://www.notion.so/Cornell-Notes-System-895f335ed949406cba6e6a5ddca26a69"&gt;Cornell Note System&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-your-own-documentation-to-projects"&gt;
  &lt;/a&gt;
  Writing your own documentation to Projects
&lt;/h2&gt;

&lt;p&gt;I might be the black sheep here but I LOVE writing documentation. I can just look at the project I'm working on and remember why I did something and in the long run it makes you write clean and comprehensible code.&lt;/p&gt;

&lt;p&gt;Notion is great for this because just like I said in the note-taking section, writing with notion is very fast with all these shortcuts and ease of navigation.&lt;/p&gt;

&lt;p&gt;I've also seen more companies switch to notion for writing their own documentation but to be honest, It's not that much. I've seen more using it for project management.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Notion is great. It's probably my most used website/app that I used in the past 2 years. Once you get the hang of it, you get addicted to it. BTW this is in no way sponsored by Notion (I wish lol) I just genuinely love the website too much.&lt;/p&gt;

&lt;p&gt;I hope you guys enjoy reading this article as much as I enjoyed writing it! I'd love to hear your thoughts below 🥰. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>Building My First Command Line Interface (CLI) with Rust</title>
      <author>Adam Berg</author>
      <pubDate>Fri, 26 Nov 2021 00:07:11 +0000</pubDate>
      <link>https://dev.to/devtails/building-my-first-command-line-interface-cli-with-rust-84e</link>
      <guid>https://dev.to/devtails/building-my-first-command-line-interface-cli-with-rust-84e</guid>
      <description>&lt;p&gt;After telling myself over and over that today is the day I start learning rust. I finally successfully built a (very small) &lt;a href="https://github.com/adamjberg/engram-cli"&gt;cli&lt;/a&gt; for &lt;a href="https://engramhq.xyz"&gt;engram&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This post will cover some of the things I learned along the way. I mostly from a TypeScript/Node background and will make comparisons between the two where applicable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inventing-some-requirements"&gt;
  &lt;/a&gt;
  Inventing Some Requirements
&lt;/h2&gt;

&lt;p&gt;I have found that having a tangible end goal increases my odds of project completion by nearly 100%. In this case, the goal is to create a command line program that simply POSTs requests to my personal notes application engram.&lt;/p&gt;

&lt;p&gt;This is not just a learning or for fun project as I recently realized that the command line is a great place for the input of quick notes. When I’m working, I sometimes find myself investigating something in the terminal and realize that I have a thought that I’d like to follow up on later, or a I’d like to store a command I just ran so I can remember what I did later on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;Install rust with the command below found from their &lt;a href="https://www.rust-lang.org/learn/get-started"&gt;Getting started page&lt;/a&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;cargo new project-name creates a new folder called project-name with the bare minimum configuration for a rust project&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cargotoml"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Cargo.toml&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is essentially the rust equivalent of a package.json file. Lists some metadata about the project and eventually allows you to specify any dependencies to be managed by the &lt;a href="https://doc.rust-lang.org/cargo/"&gt;cargo package manager&lt;/a&gt;.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[package]
name = "rust-new-project"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at [https://doc.rust-lang.org/cargo/reference/manifest.html](https://doc.rust-lang.org/cargo/reference/manifest.html)

[dependencies]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#mainrs"&gt;
  &lt;/a&gt;
  &lt;strong&gt;main.rs&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Who doesn’t love a good Hello, world! application?&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fn main() {
  println!("Hello, world!");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#the-final-output"&gt;
  &lt;/a&gt;
  The Final Output
&lt;/h2&gt;

&lt;p&gt;I find it helpful to see the whole picture at first. I will then break down each line of code and introduce the rust concepts that are used.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#cargotoml"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Cargo.toml&lt;/strong&gt;
&lt;/h3&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Cargo.toml
[package]
name = "eg"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at [https://doc.rust-lang.org/cargo/reference/manifest.html](https://doc.rust-lang.org/cargo/reference/manifest.html)

[dependencies]
reqwest = { version = "0.11", features = ["json", "cookies"] }
tokio = { version = "1", features = ["full"] }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#mainrs"&gt;
  &lt;/a&gt;
  &lt;strong&gt;main.rs&lt;/strong&gt;
&lt;/h3&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# main.rs
use std::io;

use std::collections::HashMap;

#[tokio::main]
async fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
  let mut note = String::new();
  io::stdin().read_line(&amp;amp;mut note)?;

  let mut note_post_map = HashMap::new();
  note_post_map.insert("body", note);

  let client = reqwest::Client::new();
  let resp = client.post("https://engram.xyzdigital.com/api/notes")
    .json(&amp;amp;note_post_map)
    .send()
    .await?;

  if resp.status() != 200 {
    println!("failed to submit note");
    return Ok(());
  }

  Ok(())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#breaking-it-down-line-by-line"&gt;
  &lt;/a&gt;
  Breaking it Down Line by Line
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#get-input-from-stdin"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Get input from stdin&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;In order to submit a new note, I need to be able to accept input from the command line. This can be achieved with the std::io package.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use std::io;

...

// Initializes a new string
// the mut specifies that it is mutable (e.g. can be modified)
let mut note = String::new();

// Uses the stdin package to read a line from the input
// The &amp;amp; denotes that we are passing a reference to the note variable
// mut is required to specify that the reference can be mutated
// The ? at the end propagates the error to the outer function
// see [https://doc.rust-lang.org/book/ch09-02-recoverable-errors-with-result.html#a-shortcut-for-propagating-errors-the--operator](https://doc.rust-lang.org/book/ch09-02-recoverable-errors-with-result.html#a-shortcut-for-propagating-errors-the--operator) for more details on rust errors
io::stdin().read_line(&amp;amp;mut note)?;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Once you have added the above to the body of the main function, you will see a compiler error:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;the &lt;code&gt;?&lt;/code&gt; operator can only be used in a function that returns &lt;code&gt;Result&lt;/code&gt; or &lt;code&gt;Option&lt;/code&gt; (or another type that implements &lt;code&gt;std::ops::FromResidual&lt;/code&gt;)&lt;br&gt;
 cannot use the &lt;code&gt;?&lt;/code&gt; operator in a function that returns &lt;code&gt;()&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One option would be to simply remove the “?”. This instead throws the warning: unused std::result::Result that must be used . This is because the read_line function may fail and ignoring this error may have negative consequences for your application.&lt;/p&gt;

&lt;p&gt;In order to fix the error without a warning we must update the return type of the main function to return the special rust &lt;a href="https://doc.rust-lang.org/std/result/"&gt;Result type&lt;/a&gt;.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
  ...
  Ok(());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The “()” type is called “&lt;a href="https://doc.rust-lang.org/std/primitive.unit.html"&gt;unit&lt;/a&gt;”. And can be thought of like void in other languages.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://doc.rust-lang.org/std/boxed/index.html"&gt;Box&lt;/a&gt; is a pointer type for heap allocation. As I currently understand it, the Error that may be thrown has a dynamic size (e.g. the message passed along with the error could be variable length). Therefore the Box specifies that the Error will be some dynamically allocated memory. Without this you would see the error below:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;the size for values of type &lt;code&gt;(dyn std::error::Error + ‘static)&lt;/code&gt; cannot be known at compilation time&lt;br&gt;
 doesn’t have a size known at compile-time&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, we add an Ok(()) at the end of the main function. This fulfils the Result type with the () unit type.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#write-a-post-request-in-rust"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Write a POST Request in rust&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. Install reqwest library&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A quick search pointed me to the &lt;a href="https://docs.rs/reqwest/0.11.6/reqwest/"&gt;reqwest library&lt;/a&gt; for handling sending HTTP requests. Installing the library is accomplished by adding the following to the Cargo.toml file.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Cargo.toml
...
[dependencies]
reqwest = { version = "0.11", features = ["json", "cookies"] }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2. Create HashMap with body property&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My server expects a json object that looks like { body: "note contents" } and so we use the std::collections::HashMap library to make what is essentially a JavaScript Object.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use std::collections::HashMap;

...

let mut note_post_map = HashMap::new();
note_post_map.insert("body", note);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3. POST JSON data with reqwest&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let client = reqwest::Client::new();
let res = client.post("http://engram.xyzdigital.com/api/notes")
    .json(&amp;amp;note_post_map)
    .send()
    .await**?**;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The await keyword is new here. This works similar to async/await in JavaScript. The function will not continue until the asynchronous result from the HTTP request has returned.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Add async keyword to outer main function&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In order to support the use of await above, we need to add the async keyword to the main function&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;async fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Unfortunately, this gives the following error&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;main&lt;/code&gt; function is not allowed to be &lt;code&gt;async&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is where the &lt;a href="https://github.com/tokio-rs/tokio"&gt;tokio library&lt;/a&gt; comes in to play. We add it to the Cargo.toml under [dependencies] .&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
[dependencies]
tokio = { version = "1", features = ["full"] }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now we can add [&lt;a href="https://docs.rs/tokio/0.2.2/tokio/attr.main.html"&gt;tokio::main&lt;/a&gt;] to our main function. From this &lt;a href="https://rust-lang.github.io/async-book/08_ecosystem/00_chapter.html"&gt;page&lt;/a&gt;, it appears an async runtime is required to actually execute async code. Tokio is one of the popular libraries that provides this async runtime.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#[tokio::main]
async fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;5. Checking the Result&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if resp.status() != 200 {
  println!("failed to submit note");
  return Ok(());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Finally some code that should look pretty understandable. The response object has a status method to extract the status code of the response. For now, I simple log out that it failed an exit the program.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap Up
&lt;/h2&gt;

&lt;p&gt;I have started and stopped working with rust multiple times. Each time I stopped I noticed it was because I didn’t have a strong understanding of the syntax, which frustrated me. Writing this article has forced me to think a bit deeper about how it all works (I learned most of the terminology along the way). Hopefully something here clicks for you as well.&lt;/p&gt;

&lt;p&gt;I plan to continue writing and learning more rust and will add new posts with relevant learnings along the way. Mostly so when I look back in 3 years I can laugh at how much I didn’t really understand 😂.&lt;/p&gt;

</description>
      <category>rust</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Clean Architecture Solution Template</title>
      <author>Jamie Nordmeyer</author>
      <pubDate>Thu, 25 Nov 2021 22:55:17 +0000</pubDate>
      <link>https://dev.to/nordyj/clean-architecture-solution-template-4i6k</link>
      <guid>https://dev.to/nordyj/clean-architecture-solution-template-4i6k</guid>
      <description>&lt;p&gt;I’ve become a huge fan of the Clean Architecture pattern when working on .NET API’s. I won’t go into a ton of detail here, as there are a lot of great resources out there on the subject already, including from the person that I first learned it from, Jason Taylor. If you’re unfamiliar with this pattern, do yourself a favor and check out this presentation by Jason from the GOTO 2019 conference:&lt;/p&gt;

&lt;p&gt;But at the 10,000 foot level, an API project using the Clean Architecture pattern has 4 separate projects (along with the necessary unit testing projects):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Domain – This project is meant to hold the domain entities of the application. The classes in this project map to the data tables or records in whatever data store the application is configured to use.&lt;/li&gt;
&lt;li&gt;Application – This project contains the business logic and rules that make the application as a whole run as it’s supposed to. It directly references the Domain project, but no other projects within the solution.&lt;/li&gt;
&lt;li&gt;Infrastructure – This project contains the implementation of any logic that needs to communicate with outside entities, such as a database, the file system, other HTTP API’s, and so forth. It references the Application project to gain access to application contracts that it will then implement for accessing the aforementioned external entities.&lt;/li&gt;
&lt;li&gt;Api – This is the front-end of the application, and provides the start-up code and the API endpoint entry points.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#solution-template-nuget-package"&gt;
  &lt;/a&gt;
  Solution Template Nuget Package
&lt;/h2&gt;

&lt;p&gt;I’ve created a Nuget package called &lt;code&gt;StaticSphere.CleanArchitecture.Api&lt;/code&gt;, and published it to Nuget.org. You can install it using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet new --install StaticSphere.CleanArchitecture.Api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once installed, you can create a new solution by running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet new clean-arch &amp;lt;&amp;lt;parameters&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When executed, you’ll get a full .NET 6 ASP.NET API solution that contains the following folder structure (assuming you named to the solution HelloWorld):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;src

&lt;ul&gt;
&lt;li&gt;HelloWorld.Api&lt;/li&gt;
&lt;li&gt;HelloWorld.Application&lt;/li&gt;
&lt;li&gt;HelloWorld.Domain&lt;/li&gt;
&lt;li&gt;HelloWorld.Infrastructure&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;tests

&lt;ul&gt;
&lt;li&gt;HelloWorld.Api.Tests&lt;/li&gt;
&lt;li&gt;HelloWorld.Application.Tests&lt;/li&gt;
&lt;li&gt;HelloWorld.Infrastructure.Tests&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The projects are all .NET 6 applications with &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/nullable-references"&gt;nullable references types&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/project-sdk/msbuild-props#implicitusings"&gt;implicit usings&lt;/a&gt; enabled. The unit testing projects use &lt;a href="https://xunit.net/"&gt;Xunit&lt;/a&gt; out of the box. There are also support files such as .gitignore, .editorconfig, etc.&lt;/p&gt;

&lt;p&gt;There are parameters that can be passed to the &lt;code&gt;dotnet new&lt;/code&gt; command that alter the solution that is created:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;–includeTests – Determines if the test projects should be included or not. &lt;strong&gt;Default value: true&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;–skipRestore – If specified, skips the automatic restore of the project on create. &lt;strong&gt;Default value: false&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;–useStartup – Determines if the API project should use Startup.cs instead of the newer Minimal API style Program.cs file. &lt;strong&gt;Default value: false&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;–includeEF – If set, the created solution will include Entity Framework Core, and will be configured to use the specified provider (only these providers are currently supported)

&lt;ul&gt;
&lt;li&gt;postgres – Adds Postgres Entity Framework configuration&lt;/li&gt;
&lt;li&gt;sqlserver – Adds SQL Server Entity Framework configuration&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#open-source"&gt;
  &lt;/a&gt;
  Open Source
&lt;/h2&gt;

&lt;p&gt;The Nuget package that contains the solution template is completely free and open source, and is &lt;a href="https://opensource.org/licenses/MIT"&gt;MIT&lt;/a&gt; licensed. The Nuget package can be found &lt;a href="https://www.nuget.org/packages/StaticSphere.CleanArchitecture.Api/"&gt;here&lt;/a&gt;, and the source code for the template can be found &lt;a href="https://github.com/StaticSphere/clean-architecture-dotnet-template"&gt;here&lt;/a&gt;. If you have any suggestions, or would like to contribute to the template, please let me know!&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>c</category>
      <category>netcore</category>
      <category>aspnet</category>
    </item>
    <item>
      <title>Integrating MacOS with multiple Github or Bitbucket accounts </title>
      <author>Jeff Shomali</author>
      <pubDate>Thu, 25 Nov 2021 22:27:25 +0000</pubDate>
      <link>https://dev.to/jeffshomali/integrating-macos-with-multiple-github-or-bitbucket-accounts-1an4</link>
      <guid>https://dev.to/jeffshomali/integrating-macos-with-multiple-github-or-bitbucket-accounts-1an4</guid>
      <description>&lt;p&gt;Assume you want to use your personal Github account on your work laptop, and wanted to commit to your personal account without breaking your work repository configuration. In this tutorial I will show you how to easily manage multiple Github/Bitbucket accounts on MacOS without conflict each other. &lt;/p&gt;

&lt;p&gt;To achieve our goal we need to tell Github/Bitbucket Git's engine that we have multiple account in one computer. &lt;/p&gt;

&lt;p&gt;So bare with me to achieve our goal. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-new-ssh-key"&gt;
  &lt;/a&gt;
  Create a new SSH key
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Go to SSH directory &lt;code&gt;$ cd ~/.ssh&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Create a new SSH key &lt;code&gt;ssh-keygen -t rsa -b 4096 -C &amp;lt;your_email@example.com?&lt;/code&gt; More on &lt;a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key"&gt;Github&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#register-created-ssh-key-to-github"&gt;
  &lt;/a&gt;
  Register created SSH key to Github
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;This is very strait forward, just follow the &lt;a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account"&gt;Adding a new SSH key to your GitHub account&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#create-ssh-config"&gt;
  &lt;/a&gt;
  Create SSH Config
&lt;/h2&gt;

&lt;p&gt;To connection to multiple remote server through the SSH we can use the SSH &lt;code&gt;config&lt;/code&gt; file. I'm not going to explain what is &lt;code&gt;config&lt;/code&gt; file in this post, but if you like to learn more about that here "&lt;a href="https://linuxize.com/post/using-the-ssh-config-file/"&gt;Using the SSH Config File&lt;/a&gt;" is a cool article that I found for you. Ok less talk do more!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a config file &lt;code&gt;$ cd ~/.ssh &amp;amp;&amp;amp; touch config&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Add your SSH configuration to &lt;code&gt;config&lt;/code&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the syntax that you need to understand.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
&lt;span class="c"&gt;# Host is the remote server&lt;/span&gt;

Host hostname1
    SSH_OPTION value
    SSH_OPTION value

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our case we want to use multiple Github/Bitbucket accounts, so it will be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
&lt;span class="c"&gt;# Your Github account&lt;/span&gt;
Host github.com-&amp;lt;jeffshomali&amp;gt;
   User git
   HostName github.com
   IdentityFile ~/.ssh/&amp;lt;jeff_personal&amp;gt;  
   IdentitiesOnly &lt;span class="nb"&gt;yes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just replace the &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; with your information.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clone-your-repository"&gt;
  &lt;/a&gt;
  Clone your repository.
&lt;/h2&gt;

&lt;p&gt;Go to your Github account and clone of the repository.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open the repo in your code editor and make sure the Origin &lt;code&gt;fetch&lt;/code&gt; and &lt;code&gt;push&lt;/code&gt; urls are set with &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$ git remote -v&lt;/code&gt; if not set that up with  &lt;code&gt;$ git remote add origin https://github.com/user/repo.git&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#add-your-github-username-and-email-to-every-repo-locally"&gt;
  &lt;/a&gt;
  Add your Github username and email to every repo locally.
&lt;/h2&gt;

&lt;p&gt;To prevent the conflict between your personal repo and your work repos you need to add your information to each repo by add the username and email to local repo. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open your Git config file with &lt;code&gt;$ code .git/config&lt;/code&gt; or &lt;code&gt;$ git config --local -e&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;Add your username and email
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;user]
    name &lt;span class="o"&gt;=&lt;/span&gt; your_github_username
    email &lt;span class="o"&gt;=&lt;/span&gt; your_github_email@email.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Confirm your information has been saved and present in config file by &lt;code&gt;$ git config --local -l&lt;/code&gt; and you should see your Github/Bitbucket &lt;code&gt;user.name&lt;/code&gt; and &lt;code&gt;user.email&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Done!&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>linux</category>
      <category>productivity</category>
    </item>
    <item>
      <title>5 Actionable Steps to Land Your First Software Engineering Role</title>
      <author>Maddy</author>
      <pubDate>Thu, 25 Nov 2021 22:06:22 +0000</pubDate>
      <link>https://dev.to/maddy/5-actionable-steps-to-land-your-first-software-engineering-role-g7c</link>
      <guid>https://dev.to/maddy/5-actionable-steps-to-land-your-first-software-engineering-role-g7c</guid>
      <description>&lt;p&gt;Originally published on my &lt;a href="https://techwithmaddy.com/5-actionable-steps-to-land-your-first-software-engineering-role"&gt;blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Landing your first engineering role after getting a degree in computer science (or software engineering) is a challenging process. &lt;/p&gt;

&lt;p&gt;There are so many software engineering vacancies, but a significant majority of them are for those with at least 2+ years of experience. There are not enough junior positions on the market, so the competition for entry-level roles is high. Yet, it is still possible to land an engineering role, even without experience. &lt;/p&gt;

&lt;p&gt;The following tips are mainly dedicated to computer science or software engineering graduates looking to land their first engineering role. However, self-taught developers and boot-camp graduates can still benefit from this article.&lt;/p&gt;

&lt;p&gt;I'm going to list five actionable steps that I hope can help you land your first role. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;REFRESH COMPUTER SCIENCE FUNDAMENTALS AND UNDERSTAND HOW AGILE SOFTWARE DEVELOPMENT METHODOLOGY WORKS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f5hX5W5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637875573310/ui0wg61ih.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f5hX5W5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637875573310/ui0wg61ih.jpeg" alt="algos.jpg" width="880" height="490"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're a computer science or software engineering graduate, employers will expect you to know computer science fundamentals. &lt;br&gt;
Once you graduate, take your time to refresh computer science fundamentals. By these, I mean:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Computer programming&lt;/li&gt;
&lt;li&gt;Data Structures and Algorithms&lt;/li&gt;
&lt;li&gt;Database systems&lt;/li&gt;
&lt;li&gt;Software Engineering Principles&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A quick comment on data structures and algorithms: when I went through my job search, many companies (even small to medium, so not just the big-tech companies) used HackerRank-style coding challenges to assess candidates. &lt;/p&gt;

&lt;p&gt;I'd say to practice them if you want to increase your chances to land a role. But remember that in software engineering, we don't revert binary trees daily. 😆 I'm simply giving you practical advice. &lt;/p&gt;

&lt;p&gt;In addition, understand how agile software development methodology works. Read about the Agile manifesto, the people involved, agile ceremonies and how software is packaged from start to finish. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BUILD AT LEAST ONE STRONG PROJECT AND UPLOAD IT ON GITHUB&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uRQcqU1M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637876068527/yYaK9a2K1.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uRQcqU1M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637876068527/yYaK9a2K1.jpeg" alt="build1.jpg" width="880" height="509"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This step is crucial because if you have no experience (not even an internship or a placement), somehow, you'll need to demonstrate that you can write code. The way to do this is to build at least one strong project and upload it on Github.&lt;/p&gt;

&lt;p&gt;By "strong" project, I mean:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;A real-world project but on a smaller scale&lt;/strong&gt;: I'm a fan of management systems because all companies have a way to store data of every sort internally (either customer's data, employees' data, products, etc.). You can also choose to create a project based on the domain you're most interested in. For example, are you interested in fintech? Try to make a sample of a banking application. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;A project that uses the latest technologies&lt;/strong&gt;: this also depends on what type of engineer you would like to become (frontend, backend, or full-stack). If you're more interested in frontend engineering, building a project that uses a popular language + a popular framework is a great choice. Same for a backend engineer, but I would add APIs + a database on top. For a full-stack engineer, a combination of the two. Bonus points if you can show familiarity with containers or cloud computing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;A project that includes tests&lt;/strong&gt;: in the real world, we do write tests. So it's great to add them into your project as well, to show that you do care about testing your code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;A project mindful of code quality&lt;/strong&gt;: your code doesn't have to be perfect, mainly because you're at the stage where you've never worked in a commercial environment. However, you can still be mindful of indentation, classes, variables and methods names. Bonus points if you can show some understanding of engineering principles such as SOLID and DRY.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;A project that includes a descriptive Read.me file&lt;/strong&gt;: it's essential to include a well-descriptive Read.me because often your profile will be read by people who don't have a technical background. In your Read.me file, explain what the project is about, what problem it solves, its design, and how to run it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bonus tip: while creating a project, get to know your IDE, make the most of the keyboard shortcuts, and learn the Linux commands (at least the basic commands).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LEARN GIT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sVoxccPn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637875900990/GhbJj_2yg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sVoxccPn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637875900990/GhbJj_2yg.jpeg" alt="PR.jpg" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Git is a Version Control System widely used across the industry, so learning Git will be of great benefit. It can also happen that you interviewers ask you about Git to see if you've ever heard of it. &lt;/p&gt;

&lt;p&gt;Honestly, you don't need t take a whole course to learn Git. It's vast, and you probably won't remember everything anyway. &lt;/p&gt;

&lt;p&gt;Focus on understanding what it is, why it's used and the most common commands. I think this  &lt;a href="https://www.freecodecamp.org/news/10-important-git-commands-that-every-developer-should-know/"&gt;list&lt;/a&gt;  is helpful. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SHARPEN YOUR INTERPERSONAL SKILLS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dvz4ucOJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637875830156/CJBLaLmEW.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvz4ucOJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637875830156/CJBLaLmEW.jpeg" alt="team.jpg" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Software engineering involves a lot of interaction with technical and non-technical people. &lt;/p&gt;

&lt;p&gt;Nowadays, there is a significant emphasis on emotional intelligence, even in software engineering. &lt;/p&gt;

&lt;p&gt;Recruiters don't want to hire people who refuse to be collaborative. &lt;/p&gt;

&lt;p&gt;Employers value those who know how to work well with other people, learn how to communicate and empathize with others. &lt;/p&gt;

&lt;p&gt;For this, you can find some interesting books on how to sharpen your people skills. A great example is the &lt;a href="https://en.wikipedia.org/wiki/How_to_Win_Friends_and_Influence_People"&gt;book&lt;/a&gt; "How to Win Friends and Influence People" by Dale Carnegie. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;USE IT HIRING PLATFORMS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Ad40pVT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637876319343/1LSP5r4YB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Ad40pVT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637876319343/1LSP5r4YB.png" alt="convo.png" width="880" height="305"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead of continuously tailoring your CV for each company (a very time-consuming process!), take full advantage of IT hiring platforms. &lt;/p&gt;

&lt;p&gt;You can create your account on these platforms, and recruiters can directly message you if they're interested in your profile. &lt;/p&gt;

&lt;p&gt;You can potentially apply a "one-size-fits-all" approach through these platforms, which is great because you can dedicate more to the steps above.&lt;/p&gt;

&lt;p&gt;Some examples of IT-hiring platforms are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cord.co/"&gt;cord.co&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackajob.co/"&gt;HackAJob&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.talent.io/p/en-gb/home"&gt;talent.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I would also add to take advantage of LinkedIn and Twitter by networking and sharing your journey. However, I'm fully aware that not everyone wants to do that and prefer to "silently" land an engineering role. I know many engineers who landed their first engineering role without constantly being on LinkedIn or Twitter, so it's still doable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CONCLUSION&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To wrap up:&lt;/p&gt;

&lt;p&gt;✔️ Refresh computer science fundamentals and understand how agile software methodology works.&lt;/p&gt;

&lt;p&gt;✔️ Build at least one strong project.&lt;/p&gt;

&lt;p&gt;✔️ Learn Git.&lt;/p&gt;

&lt;p&gt;✔️ Sharpen your interpersonal skills.&lt;/p&gt;

&lt;p&gt;✔️ Use IT Hiring Platforms.&lt;/p&gt;

&lt;p&gt;I hope you've found this helpful. Let me know in the comments if you have any questions. &lt;/p&gt;

&lt;p&gt;Until next time. 👋🏾&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Adding Emacs Function for my Forem Pull Requests</title>
      <author>Jeremy Friesen</author>
      <pubDate>Thu, 25 Nov 2021 21:44:53 +0000</pubDate>
      <link>https://dev.to/devteam/adding-emacs-function-for-my-forem-pull-requests-58fc</link>
      <guid>https://dev.to/devteam/adding-emacs-function-for-my-forem-pull-requests-58fc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#automating-the-repetetive-while-also-learning-a-bit-more-about-my-editor"&gt;
  &lt;/a&gt;
  Automating the Repetetive while also Learning a Bit More about My Editor
&lt;/h2&gt;

&lt;p&gt;In &lt;time title="2021-10-04"&gt;October&lt;/time&gt; I joined Forem as the lead engineer for the content experience team. I’ve been contributing to open source software for 9 years; Hello &lt;a href="https://samvera.org"&gt;Samvera.org&lt;/a&gt;; I miss you but I promise I’m in a good place.&lt;/p&gt;

&lt;p&gt;Coming from one open source community to another, I brought with me different workflows. I favor writing verbose commit messages. I like to use that as the text for my pull requests. The benefits are that commit messages travel with the code-base. I can use &lt;code&gt;git annotate&lt;/code&gt; to help me understand the situation around a chunk of code.&lt;/p&gt;

&lt;p&gt;But, in an open source community with over 600 contributors, the commit message as pull request strategy is inadequate. We could use &lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks"&gt;git hooks&lt;/a&gt; to provide commit message templating, but that’s not enough for conversations around the pull request.&lt;/p&gt;

&lt;p&gt;Forem provides a &lt;a href="https://github.com/forem/forem/blob/main/.github/PULL_REQUEST_TEMPLATE.md"&gt;pull request template&lt;/a&gt; to guide contributors through all of the considerations that go into the pull request review and acceptance.&lt;/p&gt;

&lt;p&gt;The template provides a nice pre-amble comment to help new contributors. Then provides clear sections and instructions for a contributor to fill out:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What type of Pull Request&lt;/li&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;li&gt;Related Tasks &amp;amp; Documents&lt;/li&gt;
&lt;li&gt;QA Instructions, Screenshots, and Recordings&lt;/li&gt;
&lt;li&gt;Accessibility Concerns&lt;/li&gt;
&lt;li&gt;Added/updated Tests&lt;/li&gt;
&lt;li&gt;How will this change be communicated? (A Forem Core Team only section)&lt;/li&gt;
&lt;li&gt;Any post deployment tasks to complete&lt;/li&gt;
&lt;li&gt;A GIF that Expresses How You Feel About this Contribution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a new contributor to Forem, I love this guidance. And as I began reviewing other pull requests, I appreciated the structure even more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-current-pull-request-workflow"&gt;
  &lt;/a&gt;
  My Current Pull Request Workflow
&lt;/h2&gt;

&lt;p&gt;When I’m working on the code, I continue to write verbose commit messages. Then, when I’m ready, I push up my branch and push the button to create a pull request for the branch.&lt;/p&gt;

&lt;p&gt;By default, Github prepends the last commit message to the text of the pull request template. I focus my browser into that text area and use the &lt;a href="https://github.com/dmgerman/editWithEmacs.spoon"&gt;editWithEmacs.spoon&lt;/a&gt; to copy that text and paste it into a new Emacs buffer on my machine.&lt;/p&gt;

&lt;p&gt;In that Emacs buffer, I then go about editing the pull request text.&lt;/p&gt;

&lt;p&gt;When I’m done, I type Ctrl+c then Ctrl+c (e.g., &lt;code&gt;C-c C-c&lt;/code&gt; in Emacs parlance) to copy the text from my Emacs buffer and paste it back into the browser’s text area. &lt;a href="http://magit.vc"&gt;Magit&lt;/a&gt; and &lt;a href="http://orgmode.org"&gt;Org Mode&lt;/a&gt; use that key combination for confirmation of commands.&lt;/p&gt;

&lt;p&gt;And I submit my pull request.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automating-my-workflow"&gt;
  &lt;/a&gt;
  Automating My Workflow
&lt;/h3&gt;

&lt;p&gt;Once I started editing these pull requests in Emacs, I started to see the clean-up work that I was regularly doing before I started filling out the checkboxes. And because I was now in my text editor, I chose to write a script to do that clean-up.&lt;/p&gt;

&lt;p&gt;Without reading the elisp code, it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Removes the comment preamble&lt;/li&gt;
&lt;li&gt;It adds the last commit message as the description&lt;/li&gt;
&lt;li&gt;It tidies up the comments of two sections&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below is the lisp code to do the tidying up:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(defun jnf/forem-tidy-pull-request ()
  "Perform some quick tidying of the Forem PR template."
  (interactive)
  ;; Start from the beginning.
  (beginning-of-buffer)

  ;; The text before the first HTML/Markdown
  ;; comments is the commit message. Cut that
  ;; text...
  (search-forward "&amp;lt;!--")
  (kill-region 1 (- (point) 4))

  ;; ...and paste it inside the description
  ;; section.
  (replace-string
   "## Description\n\n"
   (concat "## Description\n\n"
           (format "%s" (car kill-ring))))

  ;; We've moved point (e.g., the cursor) so let's
  ;; jump back to the beginning of the buffer.
  (beginning-of-buffer)

  ;; Remove HTML/Markdown comments
  (replace-regexp
   "\\(\n\\)*&amp;lt;!--\\(.\\|\n\\)*--&amp;gt;\\(\n\\)*"
   "")

  ;; Clean out the comments for QA instructions;
  ;; I'll write them, but the notes are
  ;; unnecessary.
  (replace-regexp
   "QA Instructions, Screenshots, Recordings\\([^#]\\)*"
   "QA Instructions, Screenshots, Recordings\n\n")

  ;; Clean out accessibility concerns; I'll write
  ;; them, but the notes are unnecessary.
  (replace-regexp
   "UI accessibility concerns?\\([^#]\\)*"
   "UI accessibility concerns?\n\n"))

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then comes the keyboard bindings to make this easier.&lt;/p&gt;

&lt;p&gt;When copying from browser to Emacs, the &lt;code&gt;editWithEmacs.spoon&lt;/code&gt; toggles on the &lt;code&gt;hammerspoon-edit-minor-mode&lt;/code&gt; for the buffer. &lt;a href="https://github.com/dmgerman/editWithEmacs.spoon/blob/45d44f4ecbeedd0959ac07c2a41d30bd2633ddc1/hammerspoon.el#L55-L64"&gt;See the code for those details&lt;/a&gt;. The following code adds a new key binding Ctrl+c then t to the keyboard mappings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(define-key
  hammerspoon-edit-minor-map
  (kbd "C-c t")
  #'jnf/forem-tidy-pull-request)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Kind of nice. Load the content into an Emacs buffer, type Ctrl+c then t and I’m a few steps closer to completing my pull request.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-remains"&gt;
  &lt;/a&gt;
  What remains?
&lt;/h3&gt;

&lt;p&gt;I wrote a script to &lt;a href="https://github.com/ndlib/commandline-tools/blob/cd09d035cf00ff428d5a5a9f6fa986343597fa54/bin/build-pull-request-message"&gt;build a pull request message&lt;/a&gt; from commit messages. Note, at my previous employer they chose to keep using—and keep choosing to use—the branch name &lt;code&gt;master&lt;/code&gt; hence the code defaults to that.&lt;/p&gt;

&lt;p&gt;I would like to better incorprate that conceptual script into my workflow.&lt;/p&gt;

&lt;p&gt;And if I’m feeling up for the challenge, I’ll grab any Github links from the commit messages and add those to the related tasks and documents.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Since joining Forem, I’ve issued 32 pull requests. And as I started doing this task more, I started wondering, “How might I tweak my tooling to address some repetetive tasks?”&lt;/p&gt;

&lt;p&gt;I let that question linger as I wrote several pull request messages in Emacs. And then, with a bit of time, I chose to spend a bit of time writing the above script. I don’t know how many pull requests I’ll need to write to “make up” for the time spent on the script.&lt;/p&gt;

&lt;p&gt;But that is a lesser concern. I’m more concerned with getting comfortable understanding the interplay of the various systems I use and how I can mold them to assist in the tasks at hand.&lt;/p&gt;

&lt;p&gt;When I start to create a pull request, I can quickly run the clean up task so that I can then focus on writing the pull request. In other words, I automated away a “distraction” so I could stay closer to the area of focus.&lt;/p&gt;

</description>
      <category>emacs</category>
      <category>github</category>
      <category>meta</category>
      <category>documentation</category>
    </item>
    <item>
      <title>Understand React Redux from scrach on one page </title>
      <author>Serge Jabo Byusa</author>
      <pubDate>Thu, 25 Nov 2021 21:21:16 +0000</pubDate>
      <link>https://dev.to/byusa/understand-react-redux-from-scrach-on-one-page-340g</link>
      <guid>https://dev.to/byusa/understand-react-redux-from-scrach-on-one-page-340g</guid>
      <description>&lt;p&gt;Redux a popular React and React Native state management library.&lt;br&gt;
Here is all component of redux in one page&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app reactapp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;cd reactapp&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add react-redux
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add this in index.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";
import ReactDOM from "react-dom";
import "./index.css";
import App from "./App";
import reportWebVitals from "./reportWebVitals";
import { createStore } from "redux";
import allReducer from "./reducers";

//ACTION  -&amp;gt; INCREMENT (describes what you want to do!) it's a simple function

const increment = () =&amp;gt; {
    return {
        type: "INCREMENT",
    };
};

const decrement = () =&amp;gt; {
    return {
        type: "DECREMENT",
    };
};

//REDUCER -&amp;gt; (action transfer from one state to another state, it gonna modify our store)
//You can have many reducers (Auth reducer, Movielist reducer etc ...)
const counter = (state = 0, action) =&amp;gt; {
    switch (action.type) {
        case "INCREMENT":
            return state + 1;
        case "DECREMENT":
            return state - 1;
    }
};

//STORE  -&amp;gt; Globalized STATE
let store = createStore(counter);

//Display it in the console.
store.subscribe(() =&amp;gt; console.log(store.getState()));

//DISPATCH (DISPATTCH this action to the reducer)
store.dispatch(increment());
store.dispatch(decrement());
store.dispatch(increment());

ReactDOM.render(
    &amp;lt;React.StrictMode&amp;gt;
        &amp;lt;App /&amp;gt;
    &amp;lt;/React.StrictMode&amp;gt;,
    document.getElementById("root")
);

reportWebVitals();

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Testing it: check the console in inspect to see how it increments and decrements. &lt;/p&gt;

&lt;p&gt;Check this repo for more advanced way of doing it: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Byusa/learn-redux"&gt;https://github.com/Byusa/learn-redux&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This repo shows the use of redux it could be one a proper way with the store and multiple reducers their own folders.&lt;/p&gt;

&lt;p&gt;Reference: &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=CVpUuw9XSjY"&gt;https://www.youtube.com/watch?v=CVpUuw9XSjY&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>redux</category>
      <category>javascript</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>Fetch and display the latest git commit hash in your iOS apps</title>
      <author>Tarik Dahic</author>
      <pubDate>Thu, 25 Nov 2021 21:17:54 +0000</pubDate>
      <link>https://dev.to/daholino/fetch-and-display-the-latest-git-commit-hash-in-your-ios-apps-1fp2</link>
      <guid>https://dev.to/daholino/fetch-and-display-the-latest-git-commit-hash-in-your-ios-apps-1fp2</guid>
      <description>&lt;p&gt;If you want to know from what exact commit your app is built you can include the latest git commit hash to the place where you display the app version. I like to call that generated hash &lt;strong&gt;“revision”&lt;/strong&gt; or in short &lt;strong&gt;“rev”&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Displaying this can be useful when you are distributing internal versions of your apps to QA engineers and you want to know on what app version they are testing. While the changes are coming in on development branches we don’t increase version or build numbers, we follow the revision value and always know what version is in use.&lt;/p&gt;

&lt;p&gt;In this article I will explain how to fetch the latest git commit hash in Xcode and display it in the iOS app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fetching-the-latest-git-commit-hash"&gt;
  &lt;/a&gt;
  Fetching the latest git commit hash
&lt;/h2&gt;

&lt;p&gt;The procedure I will describe adds a new row to your &lt;code&gt;Info.plist&lt;/code&gt; file with specified key and sets the value to the short git commit hash.&lt;/p&gt;

&lt;p&gt;The first step is to go to your target’s &lt;strong&gt;Build phases&lt;/strong&gt; setting and add a new &lt;strong&gt;run script phase&lt;/strong&gt;. The “&lt;em&gt;Run script&lt;/em&gt;” action will be on the bottom and you need to move it above the “&lt;em&gt;Copy bundle resources&lt;/em&gt;” action.&lt;/p&gt;

&lt;p&gt;When you move it, you can paste this code for the script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;GIT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;xcrun &lt;span class="nt"&gt;-find&lt;/span&gt; git&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nv"&gt;GIT_REV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GIT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; rev-parse &lt;span class="nt"&gt;--short&lt;/span&gt; HEAD&lt;span class="sb"&gt;`&lt;/span&gt;
/usr/libexec/PlistBuddy &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"Set :REVISION &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GIT_REV&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SRCROOT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/{{path-to-your-info.plist-file}}"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the script above we rely on &lt;strong&gt;PlistBuddy&lt;/strong&gt; to set the key &lt;code&gt;REVISION&lt;/code&gt; and the value of the latest git commit hash to the app’s &lt;code&gt;Info.plist&lt;/code&gt; file. &lt;strong&gt;PlistBuddy&lt;/strong&gt; is a macOS utility that helps us to manage plist files. You can read more about it &lt;a href="https://www.manpagez.com/man/8/PlistBuddy/"&gt;here&lt;/a&gt; or you can type &lt;code&gt;/usr/libexec/PlistBuddy -h&lt;/code&gt; in your terminal to find out more of what it can do.&lt;/p&gt;

&lt;p&gt;Now, when you have run the build process, the script that we added should’ve inserted a new entry in your &lt;code&gt;Info.plist&lt;/code&gt; file and we can proceed to displaying it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#displaying-the-revision"&gt;
  &lt;/a&gt;
  Displaying the revision
&lt;/h2&gt;

&lt;p&gt;To display the revision we just need to fetch our &lt;code&gt;Info.plist&lt;/code&gt; and provide a key to read the value from it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;revision&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Bundle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;forInfoDictionaryKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"REVISION"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as?&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Objective-C we would do it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight objective_c"&gt;&lt;code&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;revision&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mainBundle&lt;/span&gt; &lt;span class="nf"&gt;objectForInfoDictionaryKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@"REVISION"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>ios</category>
      <category>git</category>
      <category>xcode</category>
    </item>
  </channel>
</rss>
