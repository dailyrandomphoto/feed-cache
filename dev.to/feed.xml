<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Memento Vivere</title>
      <author>swyx</author>
      <pubDate>Sat, 19 Jun 2021 21:47:04 +0000</pubDate>
      <link>https://dev.to/swyx/memento-vivere-5eak</link>
      <guid>https://dev.to/swyx/memento-vivere-5eak</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kYfNvmF0Bqw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúWhen you grow up you tend to get told that the world is the way it is and your life is just to live your life inside the world. Try not to bash into the walls too much. Try to have a nice family life, have fun, save a little money. That's a very limited life. Life can be much broader once you discover one simple fact: &lt;strong&gt;Everything around you that you call life was made up by people that were no smarter than you.&lt;/strong&gt; And you can change it, you can influence it‚Ä¶ Once you learn that, you'll never be the same again.‚Äù&lt;/p&gt;

&lt;p&gt;‚Äî Steve Jobs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The common reminder, "&lt;em&gt;Memento mori&lt;/em&gt;", is often interpreted as a call to withdraw our ambitions and not take pride in our achievements.&lt;/p&gt;

&lt;p&gt;I worry that this makes us too fatalistic, nihilistic, and self centered. "Nothing I do matters, so why should I bother?"&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Memento mori&lt;/em&gt; is no guide to life. Fortunately, I've found it has an opposite: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Memento vivere&lt;/strong&gt;. &lt;em&gt;Remember that you must LIVE&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The way things are is often how we think the way things will always be. But nothing could be further from the truth:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The iPhone was introduced in 2007, 14 years ago.&lt;/li&gt;
&lt;li&gt;The World Wide Web was invented in 1990, 31 years ago.&lt;/li&gt;
&lt;li&gt;The Personal Computer revolution started in 1977,  44 years ago.&lt;/li&gt;
&lt;li&gt;Richard Nixon took the US off the gold standard in 1971, meaning the current international financial system is only 50 years old.&lt;/li&gt;
&lt;li&gt;Color TV first aired in 1951, 70 years ago.&lt;/li&gt;
&lt;li&gt;Nuclear bombs were developed in 1945, 76 years ago.&lt;/li&gt;
&lt;li&gt;Automatic washing machines rolled out in the 1930s.&lt;/li&gt;
&lt;li&gt;Home radios and refrigerators were first introduced in the 1920's.&lt;/li&gt;
&lt;li&gt;Henry Ford first sold the Model T automobile in 1908.&lt;/li&gt;
&lt;li&gt;Thomas Edison started the Edison Electric Illuminating Company in 1882.&lt;/li&gt;
&lt;li&gt;Alexander Graham Bell made the first telephone call in 1876.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What are we doing today that will find its place on a list like this, 100 years from now?&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
    &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__two-pics"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f34uOJdD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E1jUwuxWEAECcAQ.jpg" alt="unknown tweet media content"&gt;
    &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--CRQre8eY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1392506710737264644/2XYRwHPB_normal.jpg" alt="Arthur G.P. üß¶üî∞ü•ë profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Arthur G.P. üß¶üî∞ü•ë
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @artisanrocky
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I feel like people do not fully understand how much life changed for our species between 1900 and 2000.&lt;br&gt;&lt;br&gt;I still struggle to comprehend it.&lt;br&gt;&lt;br&gt;These events are 66 years apart. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      01:10 AM - 17 May 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1394098022523490305" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1394098022523490305" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1394098022523490305" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


</description>
      <category>reflections</category>
    </item>
    <item>
      <title>Top 10 Programming Interview Questions</title>
      <author>Vikram Aditya</author>
      <pubDate>Sat, 19 Jun 2021 21:25:07 +0000</pubDate>
      <link>https://dev.to/thevik/top-10-programming-interview-questions-17c1</link>
      <guid>https://dev.to/thevik/top-10-programming-interview-questions-17c1</guid>
      <description>&lt;h5&gt;
  &lt;a href="#in-this-tutorial-i-have-provided-the-most-common-coding-interview-questions"&gt;
  &lt;/a&gt;
  In this Tutorial, I have Provided the Most Common Coding Interview Questions
&lt;/h5&gt;

&lt;p&gt;We are all aware that answering the most basic coding or programming interview questions determines how we perform in an interview. The interview may be for Java, C++, or a JavaScript requirement, but the basis remains the same, that is how strong we are in the foundations of programming logic.&lt;/p&gt;

&lt;p&gt;Also if our approach is prompt and subtle in an interview, the probability of selection is higher. So read on for cracking the coding interview questions.&lt;/p&gt;

&lt;p&gt;Q #1) How can you reverse a string?&lt;/p&gt;

&lt;p&gt;Q #2) How to get the matching characters in a string?&lt;/p&gt;

&lt;p&gt;Q #3) How to get the non-matching characters in a string?&lt;/p&gt;

&lt;p&gt;Q #4) How do you prove that the two strings are anagrams?&lt;/p&gt;

&lt;p&gt;Q #5) How to calculate the number of numerical digits in a string?&lt;/p&gt;

&lt;p&gt;Q #6) How to compute the first character of a string that is not repeated?&lt;/p&gt;

&lt;p&gt;Q #7) How to get the matching elements in an integer array?&lt;/p&gt;

&lt;p&gt;Q #8) Implement the insertion sort algorithm.&lt;/p&gt;

&lt;p&gt;Q #9) How to perform swapping two strings by not using a third variable?&lt;/p&gt;

&lt;p&gt;Q #10) Implement the process of reversing a linked list.&lt;/p&gt;

&lt;p&gt;Q #11) How to get the length of a linked list?&lt;/p&gt;

&lt;p&gt;Q #12) How to verify if a number is prime or not?&lt;/p&gt;

&lt;p&gt;Q #13) Compute the first five Fibonacci numbers.&lt;/p&gt;

&lt;p&gt;Q #14) How to reverse a number?&lt;/p&gt;

&lt;p&gt;Q #15) Determine the factors of a number.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#i-have-a-instagram-theme-page-related-to-programming-you-can-follow-it-if-you-want-to-"&gt;
  &lt;/a&gt;
  I have a &lt;a href="https://www.instagram.com/gecko_code/"&gt;Instagram Theme Page&lt;/a&gt; related to programming, you can follow it if you want to :)
&lt;/h5&gt;

&lt;p&gt;If this blog gets a good response then I will provide the answers of this questions ( who don't know that ) although you can always search the questions and get the answers yourself&lt;/p&gt;

&lt;p&gt;You can also tell the topic in which you want the next blog :)&lt;/p&gt;

&lt;p&gt;Yup another small blog though ;-;&lt;/p&gt;

</description>
      <category>ios</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to easily create beautiful particles animations for your website using tsParticles</title>
      <author>Matteo Bruni</author>
      <pubDate>Sat, 19 Jun 2021 21:15:48 +0000</pubDate>
      <link>https://dev.to/matteobruni/how-to-easily-create-beautiful-particles-animations-for-your-website-using-tsparticles-p36</link>
      <guid>https://dev.to/matteobruni/how-to-easily-create-beautiful-particles-animations-for-your-website-using-tsparticles-p36</guid>
      <description>&lt;h2&gt;
  &lt;a href="#how-to-add-tsparticles-in-your-website"&gt;
  &lt;/a&gt;
  How to add tsParticles in your website
&lt;/h2&gt;

&lt;p&gt;Have you seen particles effect in some websites and you want one too?&lt;/p&gt;

&lt;p&gt;Do you have particles.js installed but it have problems or it's too heavy for your users?&lt;/p&gt;

&lt;p&gt;Are you searching a new animation for your website?&lt;/p&gt;

&lt;p&gt;Well, you are in the right place. &lt;code&gt;tsParticles&lt;/code&gt; is a new library, started from the particles.js codebase, to have some particles animations in your website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.jsdelivr.com/package/npm/tsparticles"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IQZaerad--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://data.jsdelivr.com/v1/package/npm/tsparticles/badge%3Fstyle%3Drounded" alt="jsDelivr"&gt;&lt;/a&gt; &lt;a href="https://cdnjs.com/libraries/tsparticles"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QK8k0q0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/cdnjs/v/tsparticles%3Fv%3D1.29.0" alt="Cdnjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5tViNt04--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/tsparticles" alt="npm version"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ctaaxWav--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dw/tsparticles" alt="npm dls"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/matteobruni"&gt;
        matteobruni
      &lt;/a&gt; / &lt;a href="https://github.com/matteobruni/tsparticles"&gt;
        tsparticles
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      tsParticles - Easily create highly customizable particles animations and use them as animated backgrounds for your website. Ready to use components available for React, Vue.js (2.x and 3.x), Angular, Svelte, jQuery, Preact, Inferno.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://particles.js.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/58f22f0a546d5d7f34b4668dc842ac91b3a4cf9a5de72346559b7d15b13e587e/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f62616e6e6572322e706e67" alt="banner"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
tsParticles - TypeScript Particles&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;A lightweight TypeScript library for creating particles. Dependency free (*), browser ready and compatible with React, Vue, Angular, Svelte, jQuery, Preact, Inferno&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://openbase.com/js/tsparticles?utm_source=embedded&amp;amp;utm_medium=badge&amp;amp;utm_campaign=rate-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/303db015a31c411aee869f57d55a44a53cd2f5380d0de5ee8abecb337a9452a6/68747470733a2f2f6261646765732e6f70656e626173652e636f6d2f6a732f726174696e672f74737061727469636c65732e737667" alt="Rate on Openbase"&gt;&lt;/a&gt; &lt;a href="https://www.jsdelivr.com/package/npm/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8c64088d02effc095dd7386325d216ce6d6bd46513a88ed2274e0ec4e6d876cf/68747470733a2f2f646174612e6a7364656c6976722e636f6d2f76312f7061636b6167652f6e706d2f74737061727469636c65732f62616467653f7374796c653d726f756e646564" alt="jsDelivr"&gt;&lt;/a&gt; &lt;a href="https://cdnjs.com/libraries/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e9e5a7a72f7cbc65eedd0e4d7431e4d4762c472ad4a66b6648a8e74c2b6be331/68747470733a2f2f696d672e736869656c64732e696f2f63646e6a732f762f74737061727469636c6573" alt="Cdnjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e18baafcedd7efbbd13d6e2b1cf738c07ea898383c946e6e7b16400f813d70cb/68747470733a2f2f62616467652e667572792e696f2f6a732f74737061727469636c65732e737667" alt="npmjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bc16ec38506bbab6f6b729850ad28fd94a5643f1633b4356647033c3aa3fe102/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f74737061727469636c6573" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://lerna.js.org/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3bc63f921dd60bac6d91aa900ef570c928b2aa4c2124ed23647e8fe9d2232853/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d61696e7461696e6564253230776974682d6c65726e612d6363303066662e737667" alt="lerna"&gt;&lt;/a&gt; &lt;a href="https://www.codefactor.io/repository/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ce969771f1502f57861fe8ce7c787c209c50ef17c2e19f35cb1de0c960eba94a/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f6d617474656f6272756e692f74737061727469636c65732f6261646765" alt="CodeFactor"&gt;&lt;/a&gt; &lt;a href="https://www.codacy.com/manual/ar3s/tsparticles?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=matteobruni/tsparticles&amp;amp;utm_campaign=Badge_Grade" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f96d4d0dccc9c7491f3ed07af70a808b0fd4d2e4d863a1f7bb9e51e10ae526e/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6239383361616633343631613463343862316532656563636531666631643734" alt="Codacy Badge"&gt;&lt;/a&gt; &lt;a href="https://gitpod.io/#https://github.com/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/daadb4894128d1e19b72d80236f5959f1f2b47f9fe081373f3246131f0189f6c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f476974706f642d72656164792d2d746f2d2d636f64652d626c75653f6c6f676f3d676974706f64" alt="Gitpod Ready-to-Code"&gt;&lt;/a&gt; &lt;a href="https://repl.it/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/64adf1bd83058aa64f848245f74bef77cd7cc2a3f36343ac44d6d0c39cc41bc3/68747470733a2f2f7265706c2e69742f62616467652f6769746875622f6d617474656f6272756e692f74737061727469636c6573" alt="Run on Repl.it"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Do you want to use it on your website?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;This library is available on the two most popular CDNs and it's easy and ready to use, if you were using particles.js it's even easier&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You'll find the instructions &lt;a href="https://github.com/matteobruni/tsparticles/blob/main/README.md#library-installation"&gt;below&lt;/a&gt;, with all the links you need, and &lt;em&gt;don't be scared by &lt;strong&gt;TypeScript&lt;/strong&gt;, it's just the source language&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The output files are just JavaScript&lt;/strong&gt;. ü§©&lt;/p&gt;
&lt;p&gt;CDNs and &lt;code&gt;npm&lt;/code&gt; have all the sources you need in &lt;strong&gt;Javascript&lt;/strong&gt;, a bundle browser ready (tsparticles.min.js) and all files splitted for &lt;code&gt;import&lt;/code&gt; syntax.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you are still interested&lt;/strong&gt; some lines below there are some instructions for migrating from the old particles.js library.&lt;/p&gt;
&lt;h2&gt;
&lt;strong&gt;&lt;em&gt;Library installation&lt;/em&gt;&lt;/strong&gt;
&lt;/h2&gt;
&lt;h3&gt;
&lt;strong&gt;&lt;em&gt;Hosting / CDN&lt;/em&gt;&lt;/strong&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Please use this hosts or your own to&lt;/em&gt;&lt;/strong&gt;‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/matteobruni/tsparticles"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Let's start with the installation&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#cdn"&gt;
  &lt;/a&gt;
  CDN
&lt;/h4&gt;

&lt;p&gt;If you want to use a CDN to link the library, or use them to download the files here are the instructions&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#cdnjs"&gt;
  &lt;/a&gt;
  cdnjs
&lt;/h5&gt;

&lt;p&gt;Let's start with the most famous and used.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cdnjs.com/libraries/tsparticles"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1WGK_8KR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/642y2uvateqnnes28o2z.png" alt="cdnjs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;tsparticles.min.js&lt;/code&gt; file is marked as default and you can see it highlighted, you can use the right buttons to copy the url, copy all the &lt;code&gt;script&lt;/code&gt; tag or just the SRI hash.&lt;/p&gt;

&lt;p&gt;I recommend to copy the &lt;code&gt;script&lt;/code&gt; tag so you can use it safely in your website&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#jsdelivr"&gt;
  &lt;/a&gt;
  jsDelivr
&lt;/h5&gt;

&lt;p&gt;Another famous CDN is supported too and this is easy to use too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.jsdelivr.com/package/npm/tsparticles"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--an-BfI2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89yvraapj8jnxlmctupw.png" alt="jsDelivr"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just copy the script tag (I recommend the integrity check) and you're ready to include it in your page.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#npm"&gt;
  &lt;/a&gt;
  NPM
&lt;/h4&gt;

&lt;p&gt;If you are using NPM you can simply run one of these commands&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;tsparticles
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add tsparticles
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you have it ready in your &lt;code&gt;node_modules&lt;/code&gt; folder.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#wrappers"&gt;
  &lt;/a&gt;
  Wrappers
&lt;/h4&gt;

&lt;p&gt;This project have also some official wrappers for some Javascript frameworks to easily use and configure this library&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#web-components"&gt;
  &lt;/a&gt;
  Web Components
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SN1ASHd2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/web-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SN1ASHd2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/web-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c7vqJd5u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/web-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c7vqJd5u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/web-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to use tsParticles with Web Components checkout &lt;a href="https://github.com/matteobruni/tsparticles/tree/main/components/web/README.md"&gt;this README&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#jquery"&gt;
  &lt;/a&gt;
  jQuery
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6No_SpYn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/jquery-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6No_SpYn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/jquery-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KPrLGss0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/jquery-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KPrLGss0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/jquery-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to use tsParticles with jQuery checkout &lt;a href="https://github.com/matteobruni/tsparticles/tree/main/components/jquery/README.md"&gt;this README&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#vuejs-2x"&gt;
  &lt;/a&gt;
  VueJS 2.x
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E1WVrkET--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/particles.vue%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E1WVrkET--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/particles.vue%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s3hSl1Q2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/particles.vue%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s3hSl1Q2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/particles.vue%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to use tsParticles with VueJS checkout &lt;a href="https://github.com/matteobruni/tsparticles/tree/main/components/vue/README.md"&gt;this README&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#vuejs-3x"&gt;
  &lt;/a&gt;
  VueJS 3.x
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8RSZoggI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/particles.vue3%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8RSZoggI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/particles.vue3%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8mgFwz6U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/particles.vue3%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8mgFwz6U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/particles.vue3%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to use tsParticles with VueJS 3.x checkout &lt;a href="https://github.com/matteobruni/tsparticles/tree/main/components/vue3/README.md"&gt;this README&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#reactjs"&gt;
  &lt;/a&gt;
  ReactJS
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ydc1umZF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/react-tsparticles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ydc1umZF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/react-tsparticles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iXj-JZwP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/react-tsparticles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iXj-JZwP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/react-tsparticles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to use tsParticles with ReactJS checkout &lt;a href="https://github.com/matteobruni/tsparticles/tree/main/components/react/README.md"&gt;this README&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#angular-cli"&gt;
  &lt;/a&gt;
  Angular CLI
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--atY6eHTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/ng-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--atY6eHTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/ng-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0XX-YfvC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/ng-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0XX-YfvC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/ng-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to use tsParticles with Angular CLI checkout &lt;a href="https://github.com/matteobruni/tsparticles/tree/main/components/angular/README.md"&gt;this README&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#svelte"&gt;
  &lt;/a&gt;
  Svelte
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AbVqCm2H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/svelte-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AbVqCm2H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/svelte-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HaCDkzqP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/svelte-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HaCDkzqP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/svelte-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to use tsParticles with Svelte checkout &lt;a href="https://github.com/matteobruni/tsparticles/tree/main/components/svelte/README.md?version=1.29.0"&gt;this README&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#preact"&gt;
  &lt;/a&gt;
  Preact
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JK5q0Ldj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/preact-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JK5q0Ldj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/preact-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EMpXDgoL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/preact-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EMpXDgoL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/preact-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to use tsParticles with Preact checkout &lt;a href="https://github.com/matteobruni/tsparticles/tree/main/components/preact/README.md"&gt;this README&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#riotjs"&gt;
  &lt;/a&gt;
  Riot.js
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m1KTpJ9W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/riot-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m1KTpJ9W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/riot-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C2pgZ19R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/riot-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C2pgZ19R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/riot-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to use tsParticles with Riot.js checkout &lt;a href="https://github.com/matteobruni/tsparticles/tree/main/components/riot/README.md"&gt;this README&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#inferno"&gt;
  &lt;/a&gt;
  Inferno
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uEyNB1pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/inferno-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uEyNB1pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/inferno-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ym4GC9vW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/inferno-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ym4GC9vW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/inferno-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to use tsParticles with Inferno checkout &lt;a href="https://github.com/matteobruni/tsparticles/tree/main/components/inferno/README.md"&gt;this README&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#solidjs"&gt;
  &lt;/a&gt;
  Solid.js
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OyK-OFPz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/solid-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OyK-OFPz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/solid-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w2kOl607--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/solid-particles%3Fversion%3D1.29.0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w2kOl607--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/dm/solid-particles%3Fversion%3D1.29.0" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to use tsParticles with Solid.js checkout &lt;a href="https://github.com/matteobruni/tsparticles/tree/main/components/solid/README.md"&gt;this README&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h4&gt;

&lt;p&gt;First of all you need to find the &lt;code&gt;tsparticles.min.js&lt;/code&gt; downloaded with the instructions above.&lt;/p&gt;

&lt;p&gt;Once you are ready with the &lt;code&gt;script&lt;/code&gt; tag included you have two option to start using tsParticles.&lt;/p&gt;

&lt;p&gt;If you are using it with NPM, you need to import tsParticles like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;tsParticles&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tsparticles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;tsParticles&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tsparticles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// this is supported in TypeScript too&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#javascript-object"&gt;
  &lt;/a&gt;
  Javascript Object
&lt;/h5&gt;

&lt;p&gt;You can use a Javascript object containing all options like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* omitted for brevity, I'll describe the options in this series */&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;tsParticles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;element id&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//&amp;lt;element id&amp;gt; is a placeholder sample, use it without &amp;lt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#external-json-file"&gt;
  &lt;/a&gt;
  External Json File
&lt;/h5&gt;

&lt;p&gt;Otherwise you can use an external JSON file, it's easier to maintain because you need to change only this file and not your scripts that could be minified or something like that.&lt;/p&gt;

&lt;p&gt;The JSON file is loaded like this&lt;/p&gt;

&lt;p&gt;&lt;em&gt;particles.json&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// omitted for brevity, I'll describe all the options in this series&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;app.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;tsParticles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;element id&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;particles.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//&amp;lt;element id&amp;gt; is a placeholder sample, use it without &amp;lt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#particles-manager-object"&gt;
  &lt;/a&gt;
  Particles Manager object
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;load&lt;/code&gt; and &lt;code&gt;loadJSON&lt;/code&gt; methods returns a &lt;code&gt;Promise&amp;lt;Container&amp;gt;&lt;/code&gt; object, the &lt;code&gt;Container&lt;/code&gt; object is the object containing the canvas, the particles and all is needed to work.&lt;/p&gt;

&lt;p&gt;You can access it using the method &lt;code&gt;tsParticles.dom()&lt;/code&gt; which returns a &lt;code&gt;Container[]&lt;/code&gt; with all containers initialized or &lt;code&gt;tsParticles.domItem(index)&lt;/code&gt; which returns the specified &lt;code&gt;Container&lt;/code&gt; if found, &lt;code&gt;index&lt;/code&gt; is the array index, just a managed version of &lt;code&gt;tsParticles.dom()[index]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you want to unwrap the &lt;code&gt;Promise&lt;/code&gt; you can await the load methods if you are using an async function or use the &lt;code&gt;then&lt;/code&gt; method (Official API &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then"&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Let's see a sample of &lt;code&gt;then&lt;/code&gt; method:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;app.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;tsParticles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;element id&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* omitted for brevity */&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// container is ready to be used&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The container object is really useful if you want to make particles more interactive or customizable.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#properties"&gt;
  &lt;/a&gt;
  Properties
&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;actualOptions&lt;/code&gt;: The current options loaded in the object, some changes to this object can be effective only after a &lt;code&gt;refresh()&lt;/code&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#methods"&gt;
  &lt;/a&gt;
  Methods
&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;play(force)&lt;/code&gt;: Starts the animations or resume from &lt;code&gt;pause&lt;/code&gt;, &lt;code&gt;force&lt;/code&gt; is an optional boolean parameter to force the animation. This method doesn't allocate resources, just plays the animations.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pause()&lt;/code&gt;: Pauses the animations. This method doesn't clean any resource, just pauses the animations.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;start()&lt;/code&gt;: Starts the container, reallocates all the resources freed by &lt;code&gt;stop&lt;/code&gt;. Can't start after &lt;code&gt;destroy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;stop()&lt;/code&gt;: Stops the container, frees unneeded resources.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;destroy()&lt;/code&gt;: Destroys the container and invalidates it. The container will be unusable after this, any method called on it can return an error.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;refresh()&lt;/code&gt;: This methods is a shorthand of &lt;code&gt;stop&lt;/code&gt;/&lt;code&gt;start&lt;/code&gt; cycle. This method is good to reload options changed by code.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;exportImage(callback, type, quality)&lt;/code&gt;: Exports the current canvas image, &lt;code&gt;background&lt;/code&gt; property of &lt;code&gt;options&lt;/code&gt; won't be rendered because it's css related. The &lt;code&gt;callback&lt;/code&gt; is a function that handles the exported image, &lt;code&gt;type&lt;/code&gt; is the image type you want to export and &lt;code&gt;quality&lt;/code&gt; the quality of the image, these two parameters are optional.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;exportConfiguration()&lt;/code&gt;: Exports the current configuration using &lt;code&gt;options&lt;/code&gt; property returning a JSON string representing the &lt;code&gt;options&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;draw()&lt;/code&gt;: Draws a single frame of animation, if you want to handle it yourself just &lt;code&gt;pause&lt;/code&gt; the container and call &lt;code&gt;draw&lt;/code&gt; when you need it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;getAnimationStatus()&lt;/code&gt;: Returns a boolean with the animation status, &lt;code&gt;true&lt;/code&gt; is playing, &lt;code&gt;false&lt;/code&gt; is paused&lt;/p&gt;

&lt;p&gt;&lt;code&gt;addClickHandler(callback)&lt;/code&gt;: Adds a click event handler for this particles container. The callback must accept 2 parameters: (the mouse event and the clicked particles array, all the particles that are in the click position will be there)&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>javascript</category>
      <category>html</category>
      <category>typescript</category>
    </item>
    <item>
      <title>How to learn to code FAST!</title>
      <author>Vikram Aditya</author>
      <pubDate>Sat, 19 Jun 2021 20:39:25 +0000</pubDate>
      <link>https://dev.to/thevik/how-to-learn-to-code-fast-3o9j</link>
      <guid>https://dev.to/thevik/how-to-learn-to-code-fast-3o9j</guid>
      <description>&lt;p&gt;Hello my gorgeous friends on the internet, hope you are doing very good, and fancy today, in today's blog, I want to give you the number one tip, that's not a dirty joke, Okay, I'm gonna give you the number one tip that I follow to become a better developer and increase our skills.&lt;/p&gt;

&lt;p&gt;So lets just get in the blog,&lt;/p&gt;

&lt;p&gt;The number one tip is to create project and stumped you in tutorials. That's the number one tip that you should follow. Whenever you're learning anything development related, whether that be Python, or JavaScript, or development or game development or whatever. That's the number one tip is not to follow tutorials as much as you might think. And to actually start building out the things that you want. And again, this is like so obvious that you might everybody might be like, yeah, mobile, obviously, you want this for building out your tanks. But it's actually a very fine line here. And a lot of people fall into this trap. And you never really realize that, wait, I actually done more tutorials. And I've done projects. And this happened to me a bunch of times, and it's still hard habit to break.&lt;/p&gt;

&lt;p&gt;If you don't actually put that thing that you learned to the test. Well, it's not going to work out, right. And school, that's probably one of the biggest problems is that you learn everything in memory, you do the test, you get the good score, and then you never use it again. And you're gonna forget. So the number one tip is, again, I'm not saying that don't do tutorials, because tutorials are a great resource to get the basics down. But I'm saying don't fall into that rabbit hole of just doing tutorials because you feel like you're not good enough to start your own project. So my philosophy has always been to start from the basics, just learn from the beginning and just get a good grasp of how that technology works. And how you can put together something super simple. And after that, like literally have to concentrate and take deep breaths, yoga breaths, and be like, Okay, I'm done with the tutorial. That's it.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#i-have-a-instagram-theme-page-related-to-programming-you-can-follow-it-if-you-want-to-"&gt;
  &lt;/a&gt;
  I have a &lt;a href="https://www.instagram.com/gecko_code/"&gt;Instagram Theme Page&lt;/a&gt; related to programming, you can follow it if you want to :)
&lt;/h5&gt;

&lt;p&gt;So yeah that's all I got for today, yup its my first blog and pretty small but hope you liked it and learned something :D&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>productivity</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Introduction to threading and multiprocessing: Concurrency &amp; Parallelism in Python
</title>
      <author>Adarsh Punj</author>
      <pubDate>Sat, 19 Jun 2021 20:24:31 +0000</pubDate>
      <link>https://dev.to/adarshpunj/introduction-to-threading-and-multiprocessing-concurrency-parallelism-in-python-48o</link>
      <guid>https://dev.to/adarshpunj/introduction-to-threading-and-multiprocessing-concurrency-parallelism-in-python-48o</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Most of us have come across terms like multithreading, parallel processing, multiprocessing, concurrency, etc., though each of these terms has its own meaning. In a broader sense, we need these because we want to avoid some kind of latency (or have an illusion of doing so) in the execution of regular programs.&lt;/p&gt;

&lt;p&gt;To do this, we try to write code that doesn‚Äôt necessarily runs in order (non-sequential) and all this boils down to two different concepts ‚Äî concurrency and parallelism.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#concurrency"&gt;
  &lt;/a&gt;
  Concurrency
&lt;/h2&gt;

&lt;p&gt;I came across concurrency when I was trying to download ~5000 images from the web. I had collected image URLs from Flickr, and these images had to be passed on to a team doing annotation (labelling).&lt;/p&gt;

&lt;p&gt;This is how a sequential program to download images would look like:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests

def download_image(URL, filename):
    image = requests.get(URL)

    with open(f'{filename}.png','wb') as f:
        f.write(image.content)


flickr_URLs = [
    'https://live.staticflickr.com/6022/5941812700_0f634b136e_b.jpg',
    'https://live.staticflickr.com/3379/3492581209_485d2bfafc_b.jpg',
    'https://live.staticflickr.com/7309/27729662905_e896a3f604_b.jpg',
    'https://live.staticflickr.com/8479/8238430093_eb19b654e0_b.jpg',
    'https://live.staticflickr.com/5064/5618934898_659bc060cd_b.jpg',
    'https://live.staticflickr.com/3885/14877957549_ccb7e55494_b.jpg',
    'https://live.staticflickr.com/5473/11720191564_76f3f56f12_b.jpg',
    'https://live.staticflickr.com/2837/13546560344_835fc79871_b.jpg',
    'https://live.staticflickr.com/140/389494506_55bcdc3664_b.jpg',
    'https://live.staticflickr.com/5597/15253681909_0cc91c77d5_b.jpg',
    'https://live.staticflickr.com/1552/24085836504_3d850f03e7_b.jpg',
    'https://live.staticflickr.com/7787/26655921703_ee95e3be8e_b.jpg',
    'https://live.staticflickr.com/423/32290997650_416303457b_b.jpg',
    'https://live.staticflickr.com/4580/37683207504_053315d23f_b.jpg',
    'https://live.staticflickr.com/3225/2454495359_92828d8542_b.jpg',
    'https://live.staticflickr.com/7018/6640810853_22634c6667_b.jpg',
    'https://live.staticflickr.com/7681/17285538029_363c8760ea_b.jpg',
    'https://live.staticflickr.com/7630/16622584999_0654c8d564_b.jpg',
    'https://live.staticflickr.com/6160/6207543047_da2c66c2f6_b.jpg',
    'https://live.staticflickr.com/2921/14251116921_a97d7a46ce_b.jpg'
]

for url in flickr_URLs:
    filename = url.split(‚Äò/')[-1]
    download_image(url, filename)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;It does the job but we spent most of the time waiting for the source URLs to respond. When we scale this program to 5,000 images this ‚Äúwait time‚Äù becomes humongous.&lt;/p&gt;

&lt;p&gt;The above program sends a request to a URL, waits until the image loads (gets response from server), writes it to disk, and only then sends a new request until the list exhausts.&lt;/p&gt;

&lt;p&gt;However, rather than waiting for the first URL to load, shouldn‚Äôt we send a new request in the meantime? Once we receive some response from a previously sent request, we can write the corresponding image to the disk. By doing this we are not letting the latency block our main program.&lt;/p&gt;

&lt;p&gt;We can achieve this by starting a new ‚Äúthread‚Äù, along with the main thread using built-in Python module called &lt;code&gt;threading&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here‚Äôs how you create a thread:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;thread = threading.Thread(download_image, args=[url, filename])
thread.start()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mFxdMmfQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.pythongasm.com/static/src/007/creating-threads.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mFxdMmfQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.pythongasm.com/static/src/007/creating-threads.png" alt="creating-threads"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So that‚Äôs one thread. You need to create many threads, so let‚Äôs loop over. Here‚Äôs what‚Äôs the threaded version of this program would look like:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import threading
import requests

def download_image(URL, filename):
    ...

flickr_URLs = [...]

threads = []
for url in flickr_URLs:
    filename = url.split('/')[-1]
    thread = threading.Thread(target=download_image, args=[url, filename])
    thread.start()
    threads.append(thread)

for thread in threads:
    thread.join()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We call &lt;code&gt;.join()&lt;/code&gt; on a thread to join it to the main thread ‚Äî telling Python to wait for a thread to terminate before moving further down in the file.&lt;/p&gt;

&lt;p&gt;In this program, we created 20 threads. But how many threads are too many? If we have 5,000 URLs, should we start 5000 threads?&lt;/p&gt;

&lt;p&gt;First of all, you should know that you can start multiple threads but they won‚Äôt be running simultaneously. It‚Äôs just that while one thread is waiting for some I/O operation, another one starts working in the meantime. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O68AOFpb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.pythongasm.com/static/src/007/columnstwoinone.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O68AOFpb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.pythongasm.com/static/src/007/columnstwoinone.gif" alt="juggler"&gt;&lt;/a&gt; &lt;em&gt;It might look like the juggler is juggling two balls but in reality, at any given point he only has one ball in his hand. Source: Library of Juggling&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Since your OS continuously switches thread to thread, deciding which one should run at a given time, managing hundreds of threads will eat up a big chunk of resources.&lt;/p&gt;

&lt;p&gt;So a simple workaround is this:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MAX_THREADS = 10
threads = []
for url in flickr_URLs:
    if len(threads)&amp;gt;MAX_THREADS:
        for thread in threads:
            thread.join()

        threads = []

    filename = url.split('/')[-1]   
    thread = threading.Thread(target=download_image, args=[url, filename])
    thread.start()
    threads.append(thread)

for thread in threads:
    thread.join()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We‚Äôre only starting &lt;code&gt;MAX_THREADS&lt;/code&gt; at once, waiting for them to terminate (we're doing that by calling&lt;code&gt;.join()&lt;/code&gt;), and then starting the next &lt;code&gt;MAX_THREADS&lt;/code&gt; threads.&lt;/p&gt;

&lt;p&gt;However, there‚Äôs a modern way of doing this which we will see later in this article.&lt;/p&gt;

&lt;p&gt;Some implementations of Python like PyPy, IronPython can run multiple threads simultaneously but this isn‚Äôt the case with the default implementation, that‚Äôs CPython.&lt;/p&gt;

&lt;p&gt;Notice how we didn‚Äôt need CPU power to speed up this task of downloading images. These are I/O bound tasks ‚Äî it‚Äôs like cooking food, for example. ‚Ä®If you‚Äôre preparing a dish, and at some point you need to preheat your microwave oven, you won‚Äôt be looking for more manpower to speed up your cooking. You‚Äôre better off utilising the preheating time into‚Ä¶maybe chopping down some veggies.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kqyY0G0o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.pythongasm.com/static/src/007/concurrency-python-example.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kqyY0G0o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.pythongasm.com/static/src/007/concurrency-python-example.gif" alt="concurrency-python"&gt;&lt;/a&gt; &lt;em&gt;Python cutting down veggies while the oven finishes up preheating&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That‚Äôs concurrency. But what if a task is bottlenecked by the CPU, rather than networking and IO? That brings us to parallelism.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#parallelism"&gt;
  &lt;/a&gt;
  Parallelism
&lt;/h2&gt;

&lt;p&gt;Now suppose you‚Äôre done with cooking, and it‚Äôs time to do the dishes. Can you apply the concept of concurrency here? Pick the knife and start cleaning it, switch over to the bowl you used for pouring milk, start washing it, and then move on to the plates, then back to the knife you were washing some time ago.&lt;/p&gt;

&lt;p&gt;At best, it won‚Äôt make any difference to the execution time of this task. And in most of the cases, doing this will make the process slower as you are taking some time in switching back and forth to different utensils (yes, multithreading can also slow down tasks).&lt;/p&gt;

&lt;p&gt;If you‚Äôre looking to expedite this task, you need manpower. Some friend who washes the bowl while you cleanse knives and forks ‚Äî more friends, the better.&lt;/p&gt;

&lt;p&gt;This is how a CPU heavy task looks like, where you can use multiple CPU cores to speed up the task. Let‚Äôs try to apply this using Python.&lt;/p&gt;

&lt;p&gt;We‚Äôre trying to find out product of prime numbers upto a number n using a function &lt;code&gt;productOfPrimes&lt;/code&gt;, such that &lt;code&gt;productOfPrimes(10) -&amp;gt; 210&lt;/code&gt; (product of 2, 3, 5, 7)&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import time

def productOfPrimes(n):

    ALL_PRIMES_UPTO_N = []

    for i in range(2, n):

        PRIME = True
        for j in range(2, int(i/2)+1):
            if i%j==0:
                PRIME = False
                break

        if PRIME:
            ALL_PRIMES_UPTO_N.append(i)


    print(f"{len(ALL_PRIMES_UPTO_N)} PRIME NUMBERS FOUND")

    product = 1
    for prime in ALL_PRIMES_UPTO_N:
        product = product*prime

    return product

init_time = time.time()
LIMITS = [50328,22756,39371,44832]

for lim in LIMITS: 
    productOfPrimes(lim)

fin_time = time.time()
print(f"TIME TAKEN: {fin_time-init_time}")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Nested loops, lots of division ‚Äî pretty heavy on the CPU. The execution took ~10 seconds on 1.1 GHz quad core Intel i5 processor. However, out of 4 cores, we just used one.&lt;/p&gt;

&lt;p&gt;To manage multiple cores and processes, we use this module called &lt;code&gt;multiprocessing&lt;/code&gt; in python.&lt;/p&gt;

&lt;p&gt;Let‚Äôs see if multiprocessing improves this result. Syntactically, it‚Äôs quite similar to how we started threads:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import multiprocessing

def productOfPrimes():
    ‚Ä¶

if __name__ == "__main__":  
    processes = []
    LIMITS = [50328,22756,39371,44832] 

    for lim in LIMITS:
        process = multiprocessing.Process(target=productOfPrimes, args=[lim])
        process.start()
        processes.append(process)

    for process in processes:
        process.join()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This does the same thing in a little over 4 seconds. &lt;code&gt;productOfPrimes&lt;/code&gt; was simulatenously executed on multiple cores available in the CPU.&lt;/p&gt;

&lt;p&gt;Now let's talk a bit about numbers. How many processes can a quad-core CPU can execute simultaneously? Shouldn't it be only 4? Yes, but that doesn't mean the OS can't hold more than 4 processes in memory. There's a difference in executing processes and just holding them in memory.&lt;/p&gt;

&lt;p&gt;Run this bash command to see the number of processes running on your system:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ps -e | wc -l
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;So if you start 20 processes from Python, it won't throw an error saying you don't have enough cores. The OS will just manage these 20 processes over whatever cores are available.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pool-of-threads-and-processes"&gt;
  &lt;/a&gt;
  Pool of Threads and Processes
&lt;/h2&gt;

&lt;p&gt;We‚Äôve seen how we can implement the concepts of concurrency and parallelism using threading and multiprocessing modules. However, we‚Äôve a sexier, more Pythonic way of doing this using the concurrent.futures module (ships with Python).&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import concurrent.futures

def download_image(URL, filename):
    ...

flickr_URLs = [...]
with concurrent.futures.ThreadPoolExecutor() as executor:
    results = executor.map(download_image, flickr_URLs)

for result in results:
        print(result)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We can do something similar using &lt;code&gt;ProcessPoolExecutor&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import concurrent.futures

def productOfPrimes(n):
    ...

LIMITS = [...]

if __name__ == "__main__": 
    with concurrent.futures.ProcessPoolExecutor() as executor:
        results = executor.map(productOfPrimes, LIMITS)

for result in results:
    print(result)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XCyanxkx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.pythongasm.com/static/src/007/concurrent.futures-python.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XCyanxkx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.pythongasm.com/static/src/007/concurrent.futures-python.png" alt="concurrent.futures"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#threads-processes-os"&gt;
  &lt;/a&gt;
  Threads, Processes, OS
&lt;/h2&gt;

&lt;p&gt;Technically, threads run inside a process. When we create 4 threads, they share the same process, thus the same memory, and a lot of other OS level stuff (process control block, address space, etc.). The same is not true for processes. Each process has memory space of its own and run independently.&lt;/p&gt;

&lt;p&gt;On the other hand, processes can run simultaneously ‚Äî unlike in multithreading where the OS just keeps switching over and over to manage latency inside the same process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We‚Äôve seen how we can implement concurrency and parallelism in Python which are fundamentally very different, and have use cases of their own. There are more things to talk about like problems with threading, GIL, asynchronicity, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-readings-and-attributions"&gt;
  &lt;/a&gt;
  Further Readings and Attributions
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://stackoverflow.com/q/5201852/10065556"&gt;What is a "thread" (really)?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://stackoverflow.com/q/1050222/10065556"&gt;What is the difference between concurrency and parallelism?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://zetcode.com/python/multiprocessing/"&gt;Python multiprocessing&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>datascience</category>
      <category>linux</category>
    </item>
    <item>
      <title>How to fetch data from REST APIs in Flutter? üíª</title>
      <author>umang-sinha</author>
      <pubDate>Sat, 19 Jun 2021 20:06:08 +0000</pubDate>
      <link>https://dev.to/umangsinha/fetch-data-from-rest-apis-in-flutter-2ec6</link>
      <guid>https://dev.to/umangsinha/fetch-data-from-rest-apis-in-flutter-2ec6</guid>
      <description>&lt;p&gt;I remember being stuck with REST APIs when I was new to Flutter and programming in general. As a beginner I didn't know where to find the solutions to my problem. I was often advised to read the official documentation but those docs always looked very intimidating to me as a complete beginner. That is when I stumbled upon this beautiful community of people on the internet that are always ready to help out. After having gained so much I guess it's time to give back to this gorgeous community and that is why I am writing my first ever blog post ü§©&lt;/p&gt;

&lt;p&gt;In this article, we'll try to fetch some dummy data from a REST API hosted by  &lt;a href="https://reqres.in/"&gt;Reqres.in&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we begin, add the following code into the &lt;code&gt;main.dart&lt;/code&gt; file of your flutter app:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sfx125Qq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/85pkq5magj2c4emgmgb2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sfx125Qq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/85pkq5magj2c4emgmgb2.png" alt="code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After you are done with this, your app should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ygEJ4_QA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lb64cyi6qg68jvv8xqzp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ygEJ4_QA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lb64cyi6qg68jvv8xqzp.jpg" alt="Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we can make our first HTTP request we need to install some packages. You can now head over to &lt;a href="https://pub.dev/"&gt;pub.dev&lt;/a&gt; and search for 'http'. The package that we are looking for is &lt;a href="https://pub.dev/packages/http/install"&gt;this.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to install this package you can follow the below mentioned steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run the following command in your terminal:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ flutter pub add http
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;After you have done this your IDE will run the &lt;code&gt;flutter pub get&lt;/code&gt; command. In case it doesn't, you can manually do it by typing it into your terminal.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;http&lt;/code&gt; package has now been installed. In order to access it, we can import it as a library by adding the following line of code to the top of our &lt;code&gt;main.dart&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import 'package:http/http.dart' as http;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that everything is setup, we can start accessing the &lt;code&gt;http&lt;/code&gt; library and use it to send HTTP requests to the REST API. Let's get coding! üöÄ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/unQ3IJU2RG7DO/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/unQ3IJU2RG7DO/giphy.gif" alt="typing cat gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our next step would be to create a function that will fetch the data from the REST API and print it to the console. In order to keep things simple, let us name the function &lt;code&gt;getData()&lt;/code&gt; which is exactly what it does - it gets data! This function will be an asynchronous function and will have the return type of &lt;code&gt;Future&amp;lt;String&amp;gt;&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Wait what? What the heck is Future? Shouldn't the return type be just &lt;code&gt;String&lt;/code&gt;?&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1QN0jdNO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xex2oyyrs4scl11uvw8x.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1QN0jdNO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xex2oyyrs4scl11uvw8x.jpg" alt="confused guy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Does that look weird to you? Don't worry! ü§ù I felt the same when I saw it for the first time. Let us try to understand it:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Future&amp;lt;String&amp;gt;&lt;/code&gt; can be thought of as a promise token that doesn't have any data right now but promises to provide a String in the future. A Future can have two possible states: &lt;em&gt;Uncompleted&lt;/em&gt; and &lt;em&gt;Complete&lt;/em&gt;. The Future is in the &lt;em&gt;Uncompleted&lt;/em&gt; state when it doesn't yet have the data that it promised to provide.&lt;/p&gt;

&lt;p&gt;Inside the function, let us declare a &lt;code&gt;final&lt;/code&gt; variable that stores the URL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;final url = Uri.parse('https://reqres.in/api/users?page=2');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We now a send an HTTP request to the REST API with the help of the &lt;code&gt;get()&lt;/code&gt; method that the &lt;code&gt;http&lt;/code&gt; package offers and store it in a variable called &lt;code&gt;response&lt;/code&gt;. This response will be of the type &lt;code&gt;http.Response&lt;/code&gt;. We also specify in the header of our request that we want to receive a response in the JSON format.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var response = await http.get(
      url,
      headers: {
        'Accept' : 'application/json'
      });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now print the response body to the console!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print(response.body);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;getData&lt;/code&gt; function should finally look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xh_yxVL6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0l8qesaoo1w4dzbnyfdu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xh_yxVL6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0l8qesaoo1w4dzbnyfdu.png" alt="code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There you go! We should now be able to receive data from the REST API and print it to the console. Just pass the &lt;code&gt;getData&lt;/code&gt; function to the onPressed listener of the button and reload your app.&lt;/p&gt;

&lt;p&gt;Now press the button on your app and voila! ü•≥ Your console will print out some data from the REST API like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fD5RLii5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txi2vhxjfl0xq8kyhtt6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fD5RLii5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txi2vhxjfl0xq8kyhtt6.jpg" alt="console"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>restapi</category>
      <category>http</category>
    </item>
    <item>
      <title>Creating a Kanban Board with HTML, CSS &amp; JavaScript</title>
      <author>karthikdevarticles</author>
      <pubDate>Sat, 19 Jun 2021 19:42:29 +0000</pubDate>
      <link>https://dev.to/karthikdevarticles/creating-a-kanban-board-with-html-css-javascript-13id</link>
      <guid>https://dev.to/karthikdevarticles/creating-a-kanban-board-with-html-css-javascript-13id</guid>
      <description>&lt;p&gt;In this article, we are building a Kanban Board with plain HTML, CSS &amp;amp; JavaScript. This article aims to show, how the modern UX designs and functionality can also be achieved with much simpler elements of HTML, CSS &amp;amp; JavaScript. This is where it all started right!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-kanban-board-why-use-it"&gt;
  &lt;/a&gt;
  What is Kanban Board? Why use it?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1shnITRn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623562666113/a0FKPp0Jz.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1shnITRn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623562666113/a0FKPp0Jz.jpeg" alt="eden-constantino-OXmym9cuaEY-unsplash.jpg"&gt;&lt;/a&gt;&lt;br&gt;
Kanban is a project management tool, used by many software development teams, working with agile processes.&lt;/p&gt;

&lt;p&gt;It was designed to help visualize work, reduce work in progress tasks and maximize efficiency of teams.&lt;/p&gt;

&lt;p&gt;Kanban uses visual cards, columns and continuous improvement ideology to help teams achieve goals.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Kanban" is the Japanese word for "visual signal." If you work in services or technology, your work is often times invisible and intangible. A kanban board helps make your work visible so you can show it to others and keep everyone on the same page.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#lets-start"&gt;
  &lt;/a&gt;
  Let's Start
&lt;/h2&gt;

&lt;p&gt;Kanban Board, which we are going to build, should eventually look like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jH05zIz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623524751921/ClJcCiJYl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jH05zIz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623524751921/ClJcCiJYl.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And we must be able to move tasks like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--swJGAihM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623561475526/yHCmNDftp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--swJGAihM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623561475526/yHCmNDftp.gif" alt="task-move-action.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Initial Folder Structure&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ux6p1bUD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623514903992/cdycMFMuW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ux6p1bUD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623514903992/cdycMFMuW.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;HTML (HyperText Markup Language) is the most basic building block of the Web. It defines the meaning and structure of web content.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#iteration-1"&gt;
  &lt;/a&gt;
  Iteration 1
&lt;/h3&gt;

&lt;p&gt;Initial HTML Boilerplate &amp;amp; Skeleton for &lt;code&gt;kanban.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Kanban Board&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div class="container"&amp;gt;
        &amp;lt;div class="kanban-heading"&amp;gt;
            &amp;lt;strong class="kanban-heading-text"&amp;gt;Kanban Board&amp;lt;/strong&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="kanban-board"&amp;gt;
            &amp;lt;div id="todo"&amp;gt;To Do&amp;lt;/div&amp;gt;
            &amp;lt;div id="inprogress"&amp;gt;In Progress&amp;lt;/div&amp;gt;
            &amp;lt;div id="done"&amp;gt;Done&amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mb48SqK_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623515894669/R52T1RZsT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mb48SqK_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623515894669/R52T1RZsT.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#iteration-2"&gt;
  &lt;/a&gt;
  Iteration 2
&lt;/h4&gt;

&lt;p&gt;Adding properties to HTML for working better with CSS later. Which means CSS can identify HTML better with these properties.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;kanban.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;body&amp;gt;
    &amp;lt;div class="container"&amp;gt;
        &amp;lt;div class="kanban-heading"&amp;gt;
            &amp;lt;strong class="kanban-heading-text"&amp;gt;Kanban Board&amp;lt;/strong&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="kanban-board"&amp;gt;
            &amp;lt;div class="kanban-block" id="todo"&amp;gt;
                &amp;lt;strong&amp;gt;To Do&amp;lt;/strong&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="kanban-block" id="inprogress"&amp;gt;
                &amp;lt;strong&amp;gt;In Progress&amp;lt;/strong&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="kanban-block" id="done"&amp;gt;
                &amp;lt;strong&amp;gt;Done&amp;lt;/strong&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--29Ip-bDL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623525654918/8Y-IF-Dmx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--29Ip-bDL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623525654918/8Y-IF-Dmx.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Cascading Style Sheets is used to format &amp;amp; style, layout of a page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#iteration-3"&gt;
  &lt;/a&gt;
  Iteration 3
&lt;/h4&gt;

&lt;p&gt;Link CSS to &lt;code&gt;kanban.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;head&amp;gt;
    &amp;lt;link rel="stylesheet" href="./kanban.css"&amp;gt;
    &amp;lt;title&amp;gt;Kanban Board&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#iteration-4"&gt;
  &lt;/a&gt;
  Iteration 4
&lt;/h4&gt;

&lt;p&gt;Adding CSS to &lt;code&gt;kanban.css&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#container-amp-head"&gt;
  &lt;/a&gt;
  Container &amp;amp; Head
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container {
  width: 70%;
  min-width: 50%;
  margin: auto;
  display: flex;
  flex-direction: column;
}

.kanban-heading {
  display: flex;
  flex-direction: row;
  justify-content: center;
  font-family: sans-serif;
}

.kanban-heading-text {
  font-size: 1.8rem;
  background-color: tomato;
  padding: 0.8rem 1.7rem;
  border-radius: 0.5rem;
  margin: 1rem;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9GKdkmQY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623526564942/uo4yBYh9J.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9GKdkmQY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623526564942/uo4yBYh9J.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#board-sections"&gt;
  &lt;/a&gt;
  Board sections
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.kanban-board {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  font-family: sans-serif;
}

.kanban-block {
  padding: 0.6rem;
  width: 30.5%;
  min-width: 14rem;
  min-height: 4.5rem;
  border-radius: 0.3rem;
}

#todo {
  background-color: #fec6d1;
}

#inprogress {
  background-color: #ffaf00;
}

#done {
  background-color: #018b01;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eeriP_BQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623526824539/VOZArVdRW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eeriP_BQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623526824539/VOZArVdRW.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#body"&gt;
  &lt;/a&gt;
  Body
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body {
  background-color: black;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qKLwT_1Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623527026916/wTE6CAqc_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qKLwT_1Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623527026916/wTE6CAqc_.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As we see now, output is much better after adding the magic of CSS to it.&lt;/p&gt;

&lt;p&gt;Let's now complete the remaining part of adding sample tasks and it's styling to the Kanban Board&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#iteration-5"&gt;
  &lt;/a&gt;
  Iteration 5
&lt;/h4&gt;

&lt;p&gt;Adding sample tasks to "To Do" section&lt;br&gt;
&lt;code&gt;kanban.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="kanban-block" id="todo"&amp;gt;
    &amp;lt;strong&amp;gt;To Do&amp;lt;/strong&amp;gt;
    &amp;lt;div class="task-button-block"&amp;gt;
        &amp;lt;button id="task-button"&amp;gt;Create new task&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="task" id="task1"&amp;gt;
        &amp;lt;span&amp;gt;Task 1&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="task" id="task2"&amp;gt;
        &amp;lt;span&amp;gt;Task 2&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="task" id="task3"&amp;gt;
        &amp;lt;span&amp;gt;Task 3&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="task" id="task4"&amp;gt;
        &amp;lt;span&amp;gt;Task 4&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="task" id="task5"&amp;gt;
        &amp;lt;span&amp;gt;Task 5&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="task" id="task6"&amp;gt;
        &amp;lt;span&amp;gt;Task 6&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#iteration-6"&gt;
  &lt;/a&gt;
  Iteration 6
&lt;/h4&gt;

&lt;p&gt;Adding styles for sample tasks to &lt;code&gt;kanban.css&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.task {
  background-color: white;
  margin: 0.2rem 0rem 0.3rem 0rem;
  border: 0.1rem solid black;
  border-radius: 0.2rem;
  padding: 0.5rem 0.2rem 0.5rem 2rem;
}

#task-button {
  margin: 0.2rem 0rem 0.1rem 0rem;
  background-color: white;
  border-radius: 0.2rem;
  width: 100%;
  border: 0.25rem solid black;
  padding: 0.5rem 2.7rem;
  border-radius: 0.3rem;
  font-size: 1rem;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O68jhg8h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623528043289/U9u4BqrpR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O68jhg8h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623528043289/U9u4BqrpR.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As we can see, with a structured HTML &amp;amp; CSS it only gets better&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  Javascript
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;JavaScript is a scripting or programming language that allows you to implement complex features on web pages&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Time for some actions.&lt;/p&gt;

&lt;p&gt;In our Kanban Board, I want to drap and drop my tasks from "To Do" to "In Progress" and "In Progress" to "Done" Status.&lt;/p&gt;

&lt;p&gt;For this I am going to use the HTML Drag &amp;amp; Drop API,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;HTML Drag and Drop interfaces enable applications to use drag-and-drop features in browsers. The user may select draggable elements with a mouse, drag those elements to a droppable element, and drop them by releasing the mouse button.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let me show you all code &amp;amp; deduce it step by step.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;link rel="stylesheet" href="./kanban.css"&amp;gt;
    &amp;lt;title&amp;gt;Kanban Board&amp;lt;/title&amp;gt;
    &amp;lt;script&amp;gt;
        function drag(ev) {
            ev.dataTransfer.setData("text", ev.target.id);
        }

        function allowDrop(ev) {
            ev.preventDefault();
        }

        function drop(ev) {
            ev.preventDefault();
            var data = ev.dataTransfer.getData("text");
            ev.target.appendChild(document.getElementById(data));
        }
    &amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div class="container"&amp;gt;
        &amp;lt;div class="kanban-heading"&amp;gt;
            &amp;lt;strong class="kanban-heading-text"&amp;gt;Kanban Board&amp;lt;/strong&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="kanban-board"&amp;gt;
            &amp;lt;div class="kanban-block" id="todo" ondrop="drop(event)" ondragover="allowDrop(event)"&amp;gt;
                &amp;lt;strong&amp;gt;To Do&amp;lt;/strong&amp;gt;
                &amp;lt;div class="task-button-block"&amp;gt;
                    &amp;lt;button id="task-button"&amp;gt;Create new task&amp;lt;/span&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div class="task" id="task1" draggable="true" ondragstart="drag(event)"&amp;gt;
                    &amp;lt;span&amp;gt;Task 1&amp;lt;/span&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div class="task" id="task2" draggable="true" ondragstart="drag(event)"&amp;gt;
                    &amp;lt;span&amp;gt;Task 2&amp;lt;/span&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div class="task" id="task3" draggable="true" ondragstart="drag(event)"&amp;gt;
                    &amp;lt;span&amp;gt;Task 3&amp;lt;/span&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div class="task" id="task4" draggable="true" ondragstart="drag(event)"&amp;gt;
                    &amp;lt;span&amp;gt;Task 4&amp;lt;/span&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div class="task" id="task5" draggable="true" ondragstart="drag(event)"&amp;gt;
                    &amp;lt;span&amp;gt;Task 5&amp;lt;/span&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div class="task" id="task6" draggable="true" ondragstart="drag(event)"&amp;gt;
                    &amp;lt;span&amp;gt;Task 6&amp;lt;/span&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="kanban-block" id="inprogress" ondrop="drop(event)" ondragover="allowDrop(event)"&amp;gt;
                &amp;lt;strong&amp;gt;In Progress&amp;lt;/strong&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="kanban-block" id="done" ondrop="drop(event)" ondragover="allowDrop(event)"&amp;gt;
                &amp;lt;strong&amp;gt;Done&amp;lt;/strong&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Using &lt;code&gt;draggable="true"&lt;/code&gt; property, we are identifying, what is draggable element&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;ondragstart="drag(event)"&lt;/code&gt;, we are mentioning what method to use, when the element is dragged.&lt;/li&gt;
&lt;li&gt;With following function call, we are defining what data needs to be dragged, in our case it's the HTML element.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function drag(ev) {
        ev.dataTransfer.setData("text", ev.target.id);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;ondrop="drop(event)"&lt;/code&gt; specifies when data is dropped, a drop event occurs and we call &lt;code&gt;drop&lt;/code&gt; method&lt;/li&gt;
&lt;li&gt;This function sets data to target element
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function drop(ev) {
        ev.preventDefault();
        var data = ev.dataTransfer.getData("text");
        ev.target.appendChild(document.getElementById(data));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--swJGAihM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623561475526/yHCmNDftp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--swJGAihM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623561475526/yHCmNDftp.gif" alt="task-move-action.gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#additional-features-added"&gt;
  &lt;/a&gt;
  Additional Features added
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Creating a new Task&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q4QIE4Pj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623569884195/hB-44tO0f.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q4QIE4Pj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623569884195/hB-44tO0f.gif" alt="additional features fast.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Features Todo&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Adding State to store information&lt;/li&gt;
&lt;li&gt;Editing existing task information&lt;/li&gt;
&lt;li&gt;Create tasks to other states(In Progress, Done)&lt;/li&gt;
&lt;li&gt;Many more...&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Track further changes of code here -  &lt;a href="https://codepen.io/karthikdevarticles/pen/PopxPwO"&gt;Kanban Board&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#well-is-this-solution-perfect"&gt;
  &lt;/a&gt;
  Well, is this solution perfect?
&lt;/h2&gt;

&lt;p&gt;No it isn't&lt;/p&gt;

&lt;p&gt;I am getting some side effects like this Haha!&lt;/p&gt;

&lt;p&gt;But definitely, worth learning as a starter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f-jZjBVa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623561984537/LY4yUW7KI.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f-jZjBVa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623561984537/LY4yUW7KI.gif" alt="side-effects.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me know, how this issue can be resolved.&lt;/p&gt;

&lt;p&gt;Thanks for reading through this starter. This completes my first article.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>ux</category>
      <category>react</category>
    </item>
    <item>
      <title>Email Analysis Using Python 3 (Part I)</title>
      <author>Ogheneyoma Okobiah</author>
      <pubDate>Sat, 19 Jun 2021 19:34:19 +0000</pubDate>
      <link>https://dev.to/yomdroid/email-analysis-using-python-3-part-i-275e</link>
      <guid>https://dev.to/yomdroid/email-analysis-using-python-3-part-i-275e</guid>
      <description>&lt;p&gt;There is a lot of data out there, mostly unstructured. Emails are a great source of communication data as such there is no limit to what we can harness from it.&lt;br&gt;
At the end of this tutorial you would be able to get email data for insights.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Python 3&lt;/li&gt;
&lt;li&gt;Pandas&lt;/li&gt;
&lt;li&gt;Matplotlib&lt;/li&gt;
&lt;li&gt;Seaborn&lt;/li&gt;
&lt;li&gt;Wordcloud&lt;/li&gt;
&lt;li&gt;A gmail account&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#getting-the-data"&gt;
  &lt;/a&gt;
  Getting The Data
&lt;/h2&gt;

&lt;p&gt;There are several ways to go achieve the aim of this article; find below, how I did mine.&lt;/p&gt;

&lt;p&gt;Here a Gmail account is being used; for the imaplib script to work I made the following changes to my account; enabled IMAP and turned on less secured apps.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First, open Gmail, click on the &lt;strong&gt;settings&lt;/strong&gt; ‚öôÔ∏è icon and click See all settings to enable IMAP.&lt;/li&gt;
&lt;li&gt;On the next page, click on the &lt;strong&gt;Forwarding and POP/IMAP&lt;/strong&gt; tab.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;IMAP Access&lt;/strong&gt; section, select &lt;strong&gt;Enable IMAP&lt;/strong&gt;. Then click &lt;strong&gt;Save changes&lt;/strong&gt;. If you need more help, kindly visit this &lt;a href="https://support.google.com/mail/answer/7126229?hl"&gt;Gmail help page&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To turn on less secured apps, navigate to your Google dashboard by clicking on your account avatar in the upper right-hand corner of your screen and then click &lt;strong&gt;My Account&lt;/strong&gt; or navigate to myaccount.google.com.&lt;/li&gt;
&lt;li&gt;Then choose &lt;strong&gt;Sign-in &amp;amp; security&lt;/strong&gt;, scroll down until you see the option Allow less secure apps, and turn the access on.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you still can‚Äôt log in after doing the above, kindly visit here for official Google &lt;a href="https://support.google.com/mail/answer/7126229?visit_id=637574811006268631-897992682&amp;amp;rd=2#cantsignin&amp;amp;zippy=%2Ci-cant-sign-in-to-my-email-client"&gt;help support&lt;/a&gt;. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-1-importing-the-required-libraries-to-get-the-email-data"&gt;
  &lt;/a&gt;
  Step 1: Importing the required libraries to get the email data
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;imaplib is an Internet Message Access Protocol (IMAP) library&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;email is a python library that parses, handles and generates email messages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;getpass is a python library that contains utilities to get password or current username&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pandas is a python library for data manipulation and analysis.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import imaplib
import email
import getpass
import pandas as pd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#step-2-gaining-access-to-the-email-address"&gt;
  &lt;/a&gt;
  Step 2: Gaining access to the email address
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;username&lt;/em&gt; is the email address. &lt;/li&gt;
&lt;li&gt;
&lt;em&gt;password&lt;/em&gt; is the password to the email address when prompted. [If you don't want to use the getpass package, you can enter your password as a string.]&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;mail&lt;/em&gt; is the email server we're going to connect to and it varies, for this tutorial we're using gmail.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;mail.login&lt;/em&gt; logs into the server using the provided credentials.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;username =  input("Enter the email address: ")
password = getpass.getpass("Enter password: ")
mail = imaplib.IMAP4_SSL('imap.gmail.com')
mail.login(username, password)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#step-3-specifying-the-mailbox-to-get-data-from"&gt;
  &lt;/a&gt;
  Step 3: Specifying the mailbox to get data from.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;mail.list()&lt;/code&gt; is a method that gives a list of the mailboxes - i.e inbox, draft and so on in the email address.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mail.select()&lt;/code&gt; is a method that takes an argument of the mailbox you want to get data from.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print(mail.list())
mail.select("inbox")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#step-4-searching-and-fetching-the-data"&gt;
  &lt;/a&gt;
  Step 4: Searching and Fetching the data
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Line 1:&lt;/strong&gt; mail.uid() is a method whose first argument is the command you want to execute, in this case the command is "search". The rest of the arguments are used for the search. (Search gives from oldest to recent)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Line 1:&lt;/strong&gt; result is an exit code of the command while numbers is a list that contains an object of type byte.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Line 2:&lt;/strong&gt; is a list of every section in numbers.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Line 3:&lt;/strong&gt; is a list of decoded bytes&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Line 4:&lt;/strong&gt; is a slice of the recent 100 items (recall that search orders it from oldest to recent). &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Line 5:&lt;/strong&gt; the command we want to execute is "fetch" and store it in messages. We're fetching the subject of the messages in this case.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;result, numbers = mail.uid('search', None, "ALL")
uids = numbers[0].split()
uids = [id.decode("utf-8") for id in uids ]
uids = uids[-1:-101:-1]
result, messages = mail.uid('fetch', ','.join(uids), '(BODY[HEADER.FIELDS (SUBJECT FROM DATE)])')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#step-5-preparing-the-data-to-be-exported"&gt;
  &lt;/a&gt;
  Step 5: Preparing the data to be exported
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Line 1-3:&lt;/strong&gt; empty lists for the data we specified in messages.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Line 4:&lt;/strong&gt; looping through the content of the message we fetched. Using a step of two because it returned a tuple of two items.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Line 5:&lt;/strong&gt; parsing the bytes email to message object.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Line 6-11:&lt;/strong&gt; msg is in bytes, in order to use it it had to be decoded to a format we can read.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Line 12:&lt;/strong&gt; adding the dates to date_list.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Line 13-15:&lt;/strong&gt; getting the sender detail, it's in the format "Sender name"  hence the split and replace methods are used to get only the "Sender name".&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Line 16-19:&lt;/strong&gt; converting the objects in date_list to datetime objects, because the time has it's UTC format attached, a new list was created and the UTC format was sliced off from each object in the list.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Line 20-22:&lt;/strong&gt; checking the length of created lists, because arrays have to be the same length.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Line 23-25:&lt;/strong&gt; converting the lists to a dictionary and then a pandas dataframe, viewing it and saving it for download.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;date_list = []
from_list = [] 
subject_text = []
for i, message in messages[::2]:
    msg = email.message_from_bytes(message)
    decode = email.header.decode_header(msg['Subject'])[0]
    if isinstance(decode[0],bytes):
        decoded = decode[0].decode()
        subject_text.append(decoded)
    else:
        subject_text.append(decode[0])
    date_list.append(msg.get('date'))
    fromlist = msg.get('From')
    fromlist = fromlist.split("&amp;lt;")[0].replace('"', '')
    from_list1.append(fromlist)
date_list = pd.to_datetime(date_list)
date_list1 = []
for item in date_list:
    date_list1.append(item.isoformat(' ')[:-6])
print(len(subject_text))
print(len(from_list))
print(len(date_list1))
df = pd.DataFrame(data={'Date':date_list1, 'Sender':from_list, 'Subject':subject_text})
print(df.head())
df.to_csv('inbox_email.csv',index=False)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#visualisation"&gt;
  &lt;/a&gt;
  Visualisation
&lt;/h2&gt;

&lt;p&gt;Now that we have a the email data in CSV format, we can read the data using pandas, and visualise it.&lt;br&gt;
There are several Python data visualisation libraries, but here I used Wordcloud, Matplotlib and Seaborn. I wanted to see an infographic on the most used words in the subjects of my emails and here is how I did it.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-1-reading-and-viewing-the-csv"&gt;
  &lt;/a&gt;
  Step 1: Reading and viewing the CSV
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UMCvr8tX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1590503891198/tEDPANCq-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UMCvr8tX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1590503891198/tEDPANCq-.png" alt="read.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-2-getting-statistical-data"&gt;
  &lt;/a&gt;
  Step 2: Getting statistical data
&lt;/h3&gt;

&lt;p&gt;I used the the describe method to get the statistical data, unique values and all to get insight on the what's in the data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XuquJag4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1590503684511/0UnaE1iPk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XuquJag4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1590503684511/0UnaE1iPk.png" alt="describee.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-3-creating-new-variables"&gt;
  &lt;/a&gt;
  Step 3: Creating new variables
&lt;/h3&gt;

&lt;p&gt;I created two variables; Time and SinceMid. SinceMid is the number of hours after midnight.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;(Note: The time can be removed from the date column completely)&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from datetime import datetime
FMT = '%H:%M:%S'
emails['Time'] = emails['Date'].apply(lambda x: datetime.strptime(x, '%Y-%m-%-d%H:%M:%S').strftime(FMT))
emails['SinceMid'] = emails['Time'].apply(lambda x: (datetime.strptime(x, FMT) - datetime.strptime("00:00:00", FMT)).seconds) / 60 / 60
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RTAj21F4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1590539232938/4AdcGk2Uf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RTAj21F4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1590539232938/4AdcGk2Uf.png" alt="time.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-4-the-plots"&gt;
  &lt;/a&gt;
  Step 4: The plots
&lt;/h3&gt;

&lt;p&gt;I created a wordcloud image of the most used words in the subjects of my mails. In this example there are no stopwords, stopwords are usually filtered out as most times they're not informative.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from wordcloud import WordCloud
import matplotlib.pyplot as plt


# Create a list of words
text = ""
for item in emails["Subject"]:
    if isinstance(item,str):
        text += " " + item
    text.replace("'", "")
    text.replace(",","")
    text.replace('"','')


# Create the wordcloud object
wordcloud = WordCloud(width=800, height=800, background_color="white")

# Display the generated image:
wordcloud.generate(text)
plt.figure(figsize=(8,8))
plt.imshow(wordcloud, interpolation="bilinear")
plt.axis("off")
plt.margins(x=0, y=0)
plt.title("Most Used Subject Words", fontsize=20,ha="center", pad=20)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here's the output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hxOxHSec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1590540248193/cRq4Dar2T.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hxOxHSec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1590540248193/cRq4Dar2T.png" alt="download.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I created a histogram of the hours after midnight using seaborn.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import seaborn as sns
sns.distplot(emails["SinceMid"],bins=20)
plt.title("Hours since midnight")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here is the histogram:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4BGebDTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1590540894969/IU6EtxMoC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4BGebDTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1590540894969/IU6EtxMoC.png" alt="download_.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can check out &lt;a href="https://python-graph-gallery.com/"&gt;python gallery&lt;/a&gt; for more possible visualisations.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I had fun writing this, I hope you did too while reading it. This goes without saying, I encountered ERRORS while doing this [some of them I had never seen before]. When you get error messages, a good starting point is using the print statement to get insight and then googling the error message. &lt;br&gt;
The Part II will also be published on this blog, it would focus on getting the body of the mail and not the subject as this one.&lt;/p&gt;

&lt;p&gt;The full code can be found below:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Yomdroid"&gt;
        Yomdroid
      &lt;/a&gt; / &lt;a href="https://github.com/Yomdroid/email_analysis"&gt;
        email_analysis
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Email data analysis
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
email_analysis&lt;/h1&gt;
&lt;p&gt;Email data analysis&lt;/p&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Yomdroid/email_analysis"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Thank you for reading up to this point.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Disclaimer: I encourage you to experiment outside what's written here, if you encounter bugs and you feel like getting me involved [after Googling], send me a DM on  &lt;a href="https://twitter.com/yomdroid"&gt;Twitter&lt;/a&gt; I'd be happy to learn something new. Thank you in anticipation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;References/Credits&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.ibm.com/tutorials/pattern-analysis-of-emails-using-python/"&gt;An IBM tutorial on pattern email analysis using python 2&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4_SSL"&gt;IMAPLib Documentation&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.python.org/3/library/email.html"&gt;Email package Documentation&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>Interpolation search algorithm </title>
      <author>Aya Bouchiha</author>
      <pubDate>Sat, 19 Jun 2021 19:23:46 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/interpolation-search-algorithm-6nf</link>
      <guid>https://dev.to/ayabouchiha/interpolation-search-algorithm-6nf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#definition-of-interpolation-search"&gt;
  &lt;/a&gt;
  definition of interpolation search
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The Interpolation Search is an improvement over Binary Search for instances, where the values in a sorted array are uniformly distributed. Binary Search always goes to the middle element to check. On the other hand, interpolation search may go to different locations according to the value of the key being searched. For example, if the value of the key is closer to the last element, interpolation search is likely to start search toward the end side.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.google.com/amp/s/www.geeksforgeeks.org/interpolation-search/amp/"&gt;&lt;em&gt;www.geeksforgeeks.org&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#space-complexity"&gt;
  &lt;/a&gt;
  Space complexity
&lt;/h2&gt;

&lt;p&gt;The space complexity of interpolation search is O(1)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#time-complexity-of-interpolation-search"&gt;
  &lt;/a&gt;
  Time complexity of interpolation search
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Best case&lt;/th&gt;
&lt;th&gt;Average case&lt;/th&gt;
&lt;th&gt;Worst case&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;td&gt;O(log2(log2 n))&lt;/td&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#formula-of-interpolation-search"&gt;
  &lt;/a&gt;
  Formula of interpolation search
&lt;/h2&gt;

&lt;p&gt;the formula of interpolation search is:&lt;br&gt;
&lt;code&gt;pos = low + ((x ‚Äì A[low]) * (high ‚Äì low) // (A[high] ‚Äì A[low]))&lt;/code&gt;&lt;br&gt;
if you asked like me how we got this formula checkout this amazing &lt;a href="https://medium.com/@smellycode/demystifying-interpolation-formula-for-interpolation-search-211780c43269"&gt;article&lt;/a&gt; by &lt;em&gt;Hitesh Kumar&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#algorithm-of-interpolation-search"&gt;
  &lt;/a&gt;
  Algorithm of interpolation search
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;calculating the pos using the formula above&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;array[pos] == wantedElement&lt;/code&gt;: return pos&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;array[pos] &amp;gt; wantedElement&lt;/code&gt; : &lt;code&gt;high = pos - 1&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;array[pos] &amp;lt; wantedElement&lt;/code&gt; : &lt;code&gt;low = pos + 1&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;stay repeating until the &lt;code&gt;array[pos] == wantedElement&lt;/code&gt; or the sub-array reduces to zero.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#implementation-of-interpolation-search-using-python"&gt;
  &lt;/a&gt;
  Implementation of interpolation search using python
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;InterpolationSearchAlgorithm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wantedItem&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sortedItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
        =&amp;gt; Algorithm Name: Interpolation search
        =&amp;gt; Algorithm Type: search algorithms
        =&amp;gt; Time Complexity: 
            [best case]     =&amp;gt; O(1)
            [average case]  =&amp;gt; O(log2(log2 n))
            [worst case]    =&amp;gt; O(n)
        =&amp;gt; Space Complexity =&amp;gt; O(1)
        =&amp;gt; Algorithm
            [1] =&amp;gt;  calculating the pos using the formula above
            [2] =&amp;gt;  if `array[pos] == wantedElement`: return pos
            [3] =&amp;gt;  if `array[pos] &amp;gt; wantedElement` : `high = pos - 1`
            [4] =&amp;gt;  if `array[pos] &amp;lt; wantedElement` : `low = pos + 1`
            [5] =&amp;gt;  stay repeating until the `array[pos] == wantedElement` or the sub-array reduces to zero.
        =&amp;gt; params
            (wantedItem) =&amp;gt; int
            (sortedItems) =&amp;gt; sorted list and equally distributed.
        =&amp;gt; Returns 
            (index) if the wanted item exists in the sortedItems
            (False) if the wanted item doesn't exist 
    """&lt;/span&gt;
    &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; 
    &lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sortedItems&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;sortedItems&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;wantedItem&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;sortedItems&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;wantedItem&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# formula of interpolation sort
&lt;/span&gt;        &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sortedItems&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;sortedItems&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wantedItem&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;sortedItems&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sortedItems&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;wantedItem&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# if it match return his index (pos)
&lt;/span&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;sortedItems&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;wantedItem&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# if A[pos] is smaller than wantedItem
&lt;/span&gt;            &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# if A[pos] is larger than wantedItem
&lt;/span&gt;            &lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#references-and-useful-resources"&gt;
  &lt;/a&gt;
  References and useful resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.techiedelight.com/interpolation-search/"&gt;https://www.techiedelight.com/interpolation-search/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@smellycode/demystifying-interpolation-formula-for-interpolation-search-211780c43269"&gt;https://medium.com/@smellycode/demystifying-interpolation-formula-for-interpolation-search-211780c43269&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/interpolation-search/"&gt;https://www.geeksforgeeks.org/interpolation-search/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=-MPTAD4z0gY"&gt;https://www.youtube.com/watch?v=-MPTAD4z0gY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://en.wikipedia.org/wiki/Interpolation_search#:~:text=Interpolation%20search%20is%20an%20algorithm,by%20W.%20W.%20Peterson%20in%201957."&gt;https://en.wikipedia.org/wiki/Interpolation_search#:~:text=Interpolation%20search%20is%20an%20algorithm,by%20W.%20W.%20Peterson%20in%201957.&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;#day_7&lt;br&gt;
Have a great day!&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>beginners</category>
      <category>computerscience</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Javascript Variable Assignments</title>
      <author>Oscar Pacheco Ortiz</author>
      <pubDate>Sat, 19 Jun 2021 19:14:18 +0000</pubDate>
      <link>https://dev.to/cleveroscar/javascript-variable-assignments-1275</link>
      <guid>https://dev.to/cleveroscar/javascript-variable-assignments-1275</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;If you wanna get a bit more in depth on the differences between the ways of declaring variables with  &lt;strong&gt;var&lt;/strong&gt;, &lt;strong&gt;let&lt;/strong&gt;, and &lt;strong&gt;const&lt;/strong&gt;, then this is the article for you. We will be learn about scoping, features, and other important things we should really know about when declaring variables for our data. Let's take a step back and freshen up our javascript variable knowledge.&lt;/p&gt;

&lt;p&gt;In javascript we are allowed to store &lt;em&gt;data&lt;/em&gt; values / types in what we know as &lt;em&gt;variable_names&lt;/em&gt; or in technical terms &lt;em&gt;identifiers&lt;/em&gt;. It's easier for the developer to work with data when we give it a name and can pass it any where in our code simply by using its variable name. When we want to declare a variable we have the options to choose from three keywords &lt;em&gt;var&lt;/em&gt;, &lt;em&gt;let&lt;/em&gt;, or &lt;em&gt;const&lt;/em&gt;. Each have there pros and cons on when to be used but it really comes down to it on how your data will work. We will dig a bit more in depth on each of these keywords to understand what the differences are and when to use the proper declarations. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#declaring-variables-with-var"&gt;
  &lt;/a&gt;
  Declaring variables with var
&lt;/h2&gt;

&lt;p&gt;Before we were introduced into ES6 (modern javascript) there was only one way to declare variables and that was with the &lt;code&gt;var&lt;/code&gt; keyword, also there was no other way to declare constants either. But luckily for us the &lt;em&gt;syntax&lt;/em&gt; for declaring variables are all alike. Even though they have the same &lt;em&gt;syntax&lt;/em&gt; they have important differences.&lt;/p&gt;

&lt;p&gt;Variables when declared with &lt;code&gt;var&lt;/code&gt; do not have a block scope, instead they are &lt;code&gt;body&lt;/code&gt; scoped. If we were to take &lt;em&gt;MDN&lt;/em&gt;'s definition. &lt;/p&gt;

&lt;p&gt;MDN : "The scope of a variable declared with var is its current execution context and closures thereof, which is either the enclosing function and functions declared within it, or, for variables declared outside any function, global."&lt;/p&gt;

&lt;p&gt;Meaning no matter how deep nested the variables are, if they are declared inside a function they stay within the scope of that function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var x = 'xyz';
var name = 'oscar';
var age = 25;
var data = [];

// can be declared in a single line statement too
var name = 'oscar', age = 25, data = [];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you do decided to declare a variable outside a function, globals declared with &lt;code&gt;var&lt;/code&gt; are implemented as properties to the &lt;code&gt;globalObject&lt;/code&gt;. You can go inside your dev tools and access the console, while on the console declare a variable globally and access it with the &lt;code&gt;globalThis&lt;/code&gt; object like so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var x = 2; // global variable

function greet(str) {
   const name = str; // body scoped variable

   return "Hello" + name
}

console.log(globalThis.x); // output 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's strange to say that you can have duplicates variable names when declared with &lt;code&gt;var&lt;/code&gt; and won't trigger any errors even in &lt;em&gt;strict mode&lt;/em&gt;.   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#declaring-variables-with-let"&gt;
  &lt;/a&gt;
  Declaring variables with let
&lt;/h2&gt;

&lt;p&gt;In modern &lt;em&gt;javascript&lt;/em&gt; we declare variables with the &lt;code&gt;let&lt;/code&gt; keyword, which has a block-scope, it does not create properties of the &lt;code&gt;globalObject&lt;/code&gt; when declared globally. &lt;/p&gt;

&lt;p&gt;For example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let name = 'oscar';
let i = 0;
let o; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you don't assign any value to your declared &lt;code&gt;let&lt;/code&gt; variable, it will still be declared but will be &lt;code&gt;undefined&lt;/code&gt;. Meaning the variable exists but has no &lt;code&gt;value&lt;/code&gt;. You can also declare multiple variables with a single &lt;code&gt;let&lt;/code&gt; statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let a = 0,b = 12,c = 4;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The main difference between &lt;code&gt;var&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; is the power of &lt;code&gt;scope&lt;/code&gt;. Here is an example of seeing them both in action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var x = 'global';
let y = 'global';

console.log(this.x); // "global"
console.log(this.y); // undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;let&lt;/code&gt; variables on the other hand are allowed to have their values changed unlike our other keyword &lt;code&gt;const&lt;/code&gt; which will give us an &lt;em&gt;error&lt;/em&gt; if we tried to change it's when already declared. So if you know that your data is going to be dynamic, you can save your from future bugs that sometimes are very hard to spot because of the way we declared our variables. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#declaring-variables-with-const"&gt;
  &lt;/a&gt;
  Declaring variables with const
&lt;/h2&gt;

&lt;p&gt;It's important to not that the major difference when declaring with &lt;code&gt;const&lt;/code&gt; is that the values can not be changed once they have been declared, can not be re-assigned, otherwise it will throw a &lt;code&gt;TypeError&lt;/code&gt;. But just like the &lt;code&gt;let&lt;/code&gt; keyword, when declared globally it will not become a property of the &lt;code&gt;window&lt;/code&gt; object unlike &lt;code&gt;var&lt;/code&gt; variables. But it is &lt;em&gt;required&lt;/em&gt; to initialize the when its declared, cause again you can not re-assign or change data of a &lt;code&gt;const&lt;/code&gt; in the future, which makes sense on why you need to initialize it right away.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const name = 'oscar';
const age = 25;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;In one approach, we use const only for values that must not change. In the other, we use const for any value that does not happen to change. I prefer the former approach in my own code.&lt;br&gt;&lt;br&gt;
David Flanagan &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope by the end of this article you managed to learn how to create and understood what is going on in every line of code. It is very important to understand how your code fully works, not only does it help you become a better developer but can also help you use the tools you are working with more efficient.&lt;/p&gt;

&lt;p&gt;These articles are mostly intended for personal use on becoming a better programmer, writer, and grow my programming skills. Feel free to drop any feedback or corrections that you believe that should be made to help me and others. Thank you for your time for sticking this far! &lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Free Cloud File Storage - Firebase Basics Series - Part 8 </title>
      <author>Areeb ur Rub</author>
      <pubDate>Sat, 19 Jun 2021 18:28:01 +0000</pubDate>
      <link>https://dev.to/areeburrub/free-cloud-file-storage-firebase-basics-series-part-8-5an2</link>
      <guid>https://dev.to/areeburrub/free-cloud-file-storage-firebase-basics-series-part-8-5an2</guid>
      <description>&lt;p&gt;My previous post told you about firestore and how we will use it for our new project which will take users photo and create a post with it.&lt;/p&gt;

&lt;p&gt;In this post we will be implementing the cloud file storage  to store user photos and finally will host it on firebase hosting.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I will not be discussing how to add data to firestore or how user-auth is working check previous posts for that&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-post"&gt;
  &lt;/a&gt;
  Creating a post
&lt;/h2&gt;

&lt;p&gt;We can add a POPUP where user  can upload image and then can post it, the popup will have a file input, progress bar, preview display and submit button.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0XFOUD0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twv781sovkaft45cnmn7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0XFOUD0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twv781sovkaft45cnmn7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getting-files-from-user"&gt;
  &lt;/a&gt;
  Getting files from user
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Skip this part if you are familiar with files in javascript&lt;/em&gt;&lt;br&gt;
Give id to the an input file element and also create a img element where preview will be show then get them in our javascript&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uploadPhoto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;photo-input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;preview&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;preview&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, we will add an onchange event which will change the preview image you can use this snippet in various projects.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;uploadPhoto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onchange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;upPhoto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;upPhoto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastIndexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ext&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gif&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;ext&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;ext&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jpeg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;ext&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jpg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
     &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FileReader&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="nx"&gt;preview&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readAsDataURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#uploading-files-to-cloud-storage"&gt;
  &lt;/a&gt;
  Uploading files to cloud storage
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#adding-firebase-cloud-storage-script"&gt;
  &lt;/a&gt;
  Adding firebase cloud storage script
&lt;/h3&gt;

&lt;p&gt;like every other Library we have to add storage also you can get it from the docs &lt;a href="https://firebase.google.com/docs/web/setup#expandable-8"&gt;firebas-docs&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://www.gstatic.com/firebasejs/8.6.8/firebase-storage.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After getting the library initialize firebase storage&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#location-of-files"&gt;
  &lt;/a&gt;
  Location of files
&lt;/h3&gt;

&lt;p&gt;To upload any file we have to first decide a location where it will be stored and here also it is called reference,&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fileRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FolderName/NewFolder/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;png&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#uploading-a-file"&gt;
  &lt;/a&gt;
  Uploading a file
&lt;/h3&gt;

&lt;p&gt;once reference is set then we can  put our files to that reference,&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;uploadPhoto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="c1"&gt;//get the first file from the input file dom&lt;/span&gt;

&lt;span class="nx"&gt;fileRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Upload&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#uploading-files-in-our-project"&gt;
  &lt;/a&gt;
  Uploading files in our project
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pxKFLmzO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6fyxuvlky1jbln76chd6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pxKFLmzO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6fyxuvlky1jbln76chd6.gif" alt="firebase storage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the upload button click We are uploading the file to the storage.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;uploadBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onclick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;upPhoto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fileRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;posts/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;makeid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;fileRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To  avoid same file name I am using makeid function to generate random id, I got this snippet &lt;a href="https://stackoverflow.com/questions/1349404/generate-random-string-characters-in-javascript"&gt;here&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;makeid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;           &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;characters&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;charactersLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;characters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;characters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; 
 &lt;span class="nx"&gt;charactersLength&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#what-next"&gt;
  &lt;/a&gt;
  What Next:
&lt;/h2&gt;

&lt;p&gt;For Now we are able to upload files in next post we will see how we can get files from cloud storage and how to update the progress bar.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#follow-me"&gt;
  &lt;/a&gt;
  Follow me:
&lt;/h3&gt;


&lt;div class="ltag__user ltag__user__id__417828"&gt;
  
    .ltag__user__id__417828 .follow-action-button {
      background-color: #000000 !important;
      color: #ffffff !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/areeburrub" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jNgdxQJ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7krZbAtB--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/417828/2ba4e761-d6cf-4aaf-8e1a-0c3e46af5be0.jpg" alt="areeburrub image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/areeburrub"&gt;Areeb ur Rub&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/areeburrub"&gt;18 | coding since 2016 | Arduino | Python | JavaScript | HTML/CSS | Love learn making things&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;br&gt;
&lt;/blockquote&gt;

</description>
      <category>firebase</category>
      <category>tutorial</category>
      <category>coding</category>
    </item>
    <item>
      <title>ESLint: What, Why, When, How</title>
      <author>Shivam Gupta</author>
      <pubDate>Sat, 19 Jun 2021 18:26:41 +0000</pubDate>
      <link>https://dev.to/shivambmgupta/eslint-what-why-when-how-5f1d</link>
      <guid>https://dev.to/shivambmgupta/eslint-what-why-when-how-5f1d</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-eslint"&gt;
  &lt;/a&gt;
  What is ESLint?
&lt;/h2&gt;

&lt;p&gt;ESLint is an open-source Javascript linting utility originally created by Nicholas C. Zakas in June 2013. It is frequently used to find problematic patterns or code that doesn‚Äôt adhere to certain style guidelines. ESLint is written using Node.js to provide a fast runtime environment and easy installation via npm.&lt;br&gt;
With ESLint you can impose the coding standard using a certain set of standalone rules. Yes, you can turn those rules on and off. These rules are completely pluggable.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-use-eslint"&gt;
  &lt;/a&gt;
  Why use ESLint?
&lt;/h2&gt;

&lt;p&gt;JavaScript, being a dynamic and loosely-typed language, is especially prone to developer error. ESLint lets you put guidelines over coding standard and helps you to minimize those errors. The main reason for imposing those guide is because every developer has her style of writing (like naming conventions/tabs/single or double quotes for a string). And, with different styling techniques, your codebase may look weird, more error-prone and vulnerable. Especially when you‚Äôre dealing with Javascript this could cause pitfalls you‚Äôd never want to deal with.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#when-to-use-it"&gt;
  &lt;/a&gt;
  When to use it?
&lt;/h2&gt;

&lt;p&gt;Honestly, I prefer to use it no matter the project size or the team. But you should consider having it for any medium to large-scaled non-trivial Javascript/Typescript project or/and you‚Äôve got quite a team of developers to deal with. In either case, you have to impose common, standard coding practice/guidelines.&lt;br&gt;
Linting tools like ESLint allow developers to discover problems with their JavaScript code without executing it. One of the main the reason for ESLint was created was to allow developers to create their own linting rules. You can use ESLint in any application that runs on Javascript/Typescript:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;React/React Native&lt;/li&gt;
&lt;li&gt;Angular&lt;/li&gt;
&lt;li&gt;Node.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#how-to-use-it"&gt;
  &lt;/a&gt;
  How to use it?
&lt;/h2&gt;

&lt;p&gt;Enough talk, eh? Here‚Äôs how you can install it.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#install-it"&gt;
  &lt;/a&gt;
  Install it
&lt;/h3&gt;

&lt;p&gt;Prerequisites: Node.js &lt;code&gt;(^10.12.0, or &amp;gt;=12.0.0)&lt;/code&gt;&lt;br&gt;
You can install ESLint using &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm install eslint --save-dev
# or
$ yarn add eslint --dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: It is also possible to install ESLint globally rather than locally (using &lt;code&gt;npm install eslint --global&lt;/code&gt;). However, this is NOT recommended, and any plugins or shareable configs that you use must be installed locally in either case.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#initialize-it"&gt;
  &lt;/a&gt;
  Initialize it
&lt;/h3&gt;

&lt;p&gt;After installing it, initialize it with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npx eslint --init
# or
$ yarn run eslint --init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: &lt;code&gt;‚Äî init&lt;/code&gt; assumes you have a package.json file already. If you don‚Äôt, make sure to run npm init or yarn init beforehand.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configure-it"&gt;
  &lt;/a&gt;
  Configure it
&lt;/h3&gt;

&lt;p&gt;The moment you‚Äôre done with the installation and initialization you‚Äôll have a .eslintrc.{js,yml,json} file in your directory. In it, you‚Äôll see some rules configured like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "rules": {
        "semi": ["error", "always"],
        "quotes": ["error", "double"]
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#use-it"&gt;
  &lt;/a&gt;
  Use it
&lt;/h3&gt;

&lt;p&gt;If you‚Äôre here that means you‚Äôve successfully configured the ESLint. Here‚Äôs how you can use it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npx elinst &amp;lt;your file&amp;gt;.js
# or 
$ npx eslint &amp;lt;folder containing js files&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also add lint in yourpackage.json file (if not already added)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"scripts": {
  ...
  "lint": "eslint .",
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#congrats"&gt;
  &lt;/a&gt;
  Congrats!
&lt;/h2&gt;

&lt;p&gt;You‚Äôve successfully made your codebase look a lot cleaner and better than ever in just a few steps.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>reactnative</category>
      <category>node</category>
    </item>
  </channel>
</rss>
