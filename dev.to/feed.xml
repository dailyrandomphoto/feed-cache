<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Build a Vacation Rental Site with Amplify Studio</title>
      <author>Ali Spittel</author>
      <pubDate>Tue, 14 Dec 2021 15:12:12 +0000</pubDate>
      <link>https://dev.to/aspittel/build-a-vacation-rental-site-with-amplify-studio-1n10</link>
      <guid>https://dev.to/aspittel/build-a-vacation-rental-site-with-amplify-studio-1n10</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-amplify-studio"&gt;
  &lt;/a&gt;
  What is Amplify Studio?
&lt;/h2&gt;

&lt;p&gt;One of the most exciting projects I've worked on in my career, AWS Amplify Studio, just launched at Re:Invent. With Amplify Studio you can quickly go from a designer’s vision to a full stack, cloud connected app that scales with your needs. You can create components in &lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt;, import them into Amplify Studio, and then connect them to your AWS-backed data models. Then, Studio can export your UI components to human-readable React code that you can extend yourself. Let's go step by step through how you would build an app with Amplify Studio.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/7MKVCmNKT1c"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-data-model"&gt;
  &lt;/a&gt;
  Create a Data Model
&lt;/h2&gt;

&lt;p&gt;Head to the &lt;a href="https://sandbox.amplifyapp.com/getting-started"&gt;Amplify Sandbox&lt;/a&gt;. Once there, change the dropdown after &lt;strong&gt;Build a&lt;/strong&gt; to "Blank", then click &lt;strong&gt;Get Started&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wrPRMeqK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/sandbox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wrPRMeqK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/sandbox.png" alt="Amplify Sandbox" width="880" height="484"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the &lt;strong&gt;Data Modeling&lt;/strong&gt; page, add a "Rental" model with the fields "name", "image", "price" (an integer), and "location".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6mkITXFq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/rental-model.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6mkITXFq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/rental-model.png" alt="Rental model fields" width="880" height="702"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then click the "Deploy to AWS" button on the upper right of the page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you're new to Amplify's data modeling, you can check out &lt;a href="https://welearncode.com/intro-amplify-admin-ui/"&gt;this tutorial&lt;/a&gt; to learn more!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploy-to-aws"&gt;
  &lt;/a&gt;
  Deploy to AWS
&lt;/h2&gt;

&lt;p&gt;On the deployment page, choose whether or not you have an AWS account (create one if you don't have one yet!) and then choose an app name and deployment region.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-data-in-the-data-manager"&gt;
  &lt;/a&gt;
  Create Data in the Data Manager
&lt;/h2&gt;

&lt;p&gt;Once your app finishes deploying, click the &lt;strong&gt;Launch Studio&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ScS_iJeV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/launch-studio.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ScS_iJeV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/launch-studio.png" alt="Launch Studio button" width="880" height="249"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, head to the &lt;code&gt;content&lt;/code&gt; tab on the left side. This gives you an admin panel where you can perform full CRUD actions for your models -- create a few rental properties! Click &lt;strong&gt;Create rental&lt;/strong&gt; then use the form to create new entries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j6v2P1ki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/new-instances.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j6v2P1ki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/new-instances.png" alt="New rental instances" width="880" height="135"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amplify-figma-file"&gt;
  &lt;/a&gt;
  Amplify Figma File
&lt;/h2&gt;

&lt;p&gt;If you go back to the home page for studio, you'll see an option on the Amplify Studio home page to "Accelerate UI development" - click the &lt;strong&gt;Build UI&lt;/strong&gt; button underneath. On the UI Library home page, there will be a &lt;strong&gt;Get started&lt;/strong&gt; button that once clicked asks you for a link to your Figma file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xdRMxjmm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/ui-library-home-page.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xdRMxjmm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/ui-library-home-page.png" alt="accelerate UI development with Amplify" width="880" height="486"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amplify launched a &lt;a href="https://www.figma.com/community/file/1047600760128127424"&gt;UI Kit&lt;/a&gt; on Figma. You can duplicate this file and then make any modifications that you want and create your own components! Do this in the &lt;code&gt;components&lt;/code&gt; Figma page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bUZjN0O7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/figma-components.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bUZjN0O7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/figma-components.png" alt="All components in Figma" width="880" height="460"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll modify the appearance of &lt;code&gt;CardA&lt;/code&gt; to round the corners, bold some text, and remove the background color.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xclUPvwj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/cardA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xclUPvwj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/cardA.png" alt="CardA with modifications" width="736" height="962"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This UI kit correlates with the &lt;a href="https://ui.docs.amplify.aws/"&gt;Amplify UI Components&lt;/a&gt;, which Studio will be using under the hood when it generates your Figma components to React.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#import-figma-to-studio"&gt;
  &lt;/a&gt;
  Import Figma to Studio
&lt;/h2&gt;

&lt;p&gt;Speaking of, let's import our Figma components into Studio. Copy your Figma file's URL and paste it into Studio. Then click "Continue". Your components will be loaded into Studio.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wk7pUG0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/figma-sync.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wk7pUG0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/figma-sync.png" alt="sync to Figma" width="880" height="700"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From there, you can accept or reject your components, and you can view their variants. I'll go ahead and "Accept all".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#link-data"&gt;
  &lt;/a&gt;
  Link Data
&lt;/h2&gt;

&lt;p&gt;Now, I've created a data model and UI components. I now need to link my data to the UI. I'll choose my &lt;code&gt;CardA&lt;/code&gt; component and then click &lt;strong&gt;Configure&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NTUzsCkN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/component-preview.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NTUzsCkN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/component-preview.png" alt="" width="880" height="516"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, create a prop using the component properties form. Choose a name and then use the dropdown to find the model you created! This will pass the data from that model to the component.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rkVY-7hc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/component-props.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rkVY-7hc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/component-props.png" alt="" width="586" height="790"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From there, select the elements you would like to populate with your data and choose the attribute you'd like to use. I'll click the "image" which right now is a placeholder, then I'll set the &lt;code&gt;src&lt;/code&gt; prop to &lt;code&gt;rental.image&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ED_xt16c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/src-rental-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ED_xt16c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/src-rental-image.png" alt="" width="608" height="520"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the spot that currently says "Classic Long Sleeve T-Shirt", set the label to &lt;code&gt;rental.name&lt;/code&gt;. Finally, for the price, I'll set what currently says $99 to the price from my data model. I'll also concatenate that with a "$" and "/night".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TYXShZ5d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/concat.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TYXShZ5d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/concat.png" alt="" width="600" height="402"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, my component renders my live data!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xeN6-ebf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/data-filled.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xeN6-ebf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/data-filled.png" alt="" width="760" height="1060"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-collection"&gt;
  &lt;/a&gt;
  Create a Collection
&lt;/h2&gt;

&lt;p&gt;I want to display all my rentals, instead of just one. So, I'll create a collection from my component. Click "Create Collection" on the right side of the page. Then choose a name for your collection, I'll go with &lt;code&gt;RentalCollection&lt;/code&gt;. Once on the collection page, you can choose whether your cards render in a grid or list, the number of columns, padding between, and the direction of the collection.&lt;/p&gt;

&lt;p&gt;I'll create a grid, then switch to four columns and add 4px in between each one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mCL3LCyz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/collection.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mCL3LCyz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/collection.png" alt="" width="880" height="625"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also modify the data set that goes into the collection. You can sort the items, or add a filter by clicking "View/Edit" next to "Data set".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Eo537slh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/change-dataset.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eo537slh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/change-dataset.png" alt="" width="880" height="394"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pull-to-studio"&gt;
  &lt;/a&gt;
  Pull to Studio
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;If you're new to React, check out &lt;a href="https://welearncode.com/beginners-guide-react-2020/"&gt;this tutorial&lt;/a&gt; before continuing!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now we have components created with data bound to them, let's use those components in an app! I'll create a React app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npx create-react-app amplify-studio-tutorial
$ cd amplify-studio-tutorial
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, I'll install the Amplify JavaScript libraries and React components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm i aws-amplify @aws-amplify/ui-react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, I'll run the Amplify pull command to run code generation in my app. You can find the &lt;code&gt;amplify pull&lt;/code&gt; command specific to your app by clicking "local setup instructions" in Studio.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i_YXIscX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/local-setup.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i_YXIscX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/local-setup.png" alt="" width="880" height="175"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run this command in your React app, and you'll see quite a few files generated including &lt;code&gt;/src/ui-components&lt;/code&gt; -- this contains all of your React components! You can open them up and see what's inside.&lt;/p&gt;

&lt;p&gt;Now, let's set our app up. First, in your &lt;code&gt;index.js&lt;/code&gt; file, configure amplify by pasting in these three lines of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import config from './aws-exports'
import Amplify from 'aws-amplify'

Amplify.configure(config)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These will tie your frontend to your Amplify-created backend.&lt;/p&gt;

&lt;p&gt;Now, head to your App.js, and clear out the existing &lt;code&gt;return ()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Import the &lt;code&gt;AmplifyProvider&lt;/code&gt; component, and the Amplify CSS file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { AmplifyProvider } from '@aws-amplify/ui-react'
import '@aws-amplify/ui-react/styles.css'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, add the &lt;code&gt;AmplifyProvider&lt;/code&gt; at the top level of your &lt;code&gt;return&lt;/code&gt;. This will provide styling to all of its child components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function App () {
  return (
    &amp;lt;AmplifyProvider&amp;gt;
    &amp;lt;/AmplifyProvider&amp;gt;
  )
}

export default App
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's render our &lt;code&gt;RentalCollection&lt;/code&gt;! First, import it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { RentalCollection } from './ui-components'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, add it to the render:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function App () {
  return (
    &amp;lt;AmplifyProvider&amp;gt;
+ &amp;lt;RentalCollection /&amp;gt;
    &amp;lt;/AmplifyProvider&amp;gt;
  )
}

export default App
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run your React server and check out your page, you'll have your rentals collection!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fGJBrkgq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/rentals.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fGJBrkgq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/rentals.png" alt="" width="880" height="733"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amplify doesn't load a font in for you automatically, so you'll probably want to add your own. For example, you could add &lt;code&gt;Inter&lt;/code&gt; to your &lt;code&gt;App.css&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@import url('https://fonts.googleapis.com/css2?family=Inter:slnt,wght@-10..0,100..900&amp;amp;display=swap');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-a-prop"&gt;
  &lt;/a&gt;
  Use a Prop
&lt;/h2&gt;

&lt;p&gt;You can customize these React components in your own code. First, you can use props in order to modify your components. If you wanted to make your grid of rentals into a list, for example, you could pass the prop &lt;code&gt;type="list"&lt;/code&gt; to your &lt;code&gt;RentalCollection&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;RentalCollection type="list" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find a list of all props in the &lt;a href="https://ui.docs.amplify.aws/components"&gt;Amplify UI docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-an-override"&gt;
  &lt;/a&gt;
  Use an Override
&lt;/h2&gt;

&lt;p&gt;Sometimes, you'll want to modify child components instead of the top level one. You can use overrides in order to do so!&lt;/p&gt;

&lt;p&gt;Right now, the images are kind of wonky due to my styling in Figma. Let's change the object-fit to cover for the image via overrides to fix that.&lt;/p&gt;

&lt;p&gt;Open up the code for the &lt;code&gt;RentalCollection&lt;/code&gt; component. Inside each of its child components, you'll notice a line of code like this: &lt;code&gt;{...getOverrideProps(overrides, "Collection.CardA[0]")}&lt;/code&gt;. The second value is a key you can use to specify which component you want to add an override to.&lt;/p&gt;

&lt;p&gt;In this case we'll add the following to our &lt;code&gt;RentalCollection&lt;/code&gt; instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;RentalCollection
 type='list' overrides={{
   'Collection.CardA[0]': {
   }
 }}
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will add overrides to the CardA component. In this case, though, we want to override the &lt;code&gt;Image&lt;/code&gt; component inside of &lt;code&gt;CardA&lt;/code&gt;. Open up the code for that component, and you'll see similar overrides for each of its child components.&lt;/p&gt;

&lt;p&gt;We'll pass a second override object to the CardA override. Then we'll set the key to the override key for our Image. Then we'll set the objectFit prop to &lt;code&gt;cover&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;RentalCollection
 type='list' overrides={{
   'Collection.CardA[0]': {
       overrides: {
        'Flex.Image[0]': { objectFit: 'cover' }
       }
    }
 }}
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use this to add almost any customization you need to your components!&lt;/p&gt;

&lt;p&gt;Note that if you re-run &lt;code&gt;amplify pull&lt;/code&gt; your components will regenerate. Because of this, you won't want to modify the components in the &lt;code&gt;ui-components&lt;/code&gt; directory directly. If you decided you wanted to modify the code in a component file, you could drag it out of that directory and it would no longer get overwritten by &lt;code&gt;amplify pull&lt;/code&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#theming"&gt;
  &lt;/a&gt;
  Theming
&lt;/h2&gt;

&lt;p&gt;You may want to add a theme to your UI components so that they match your brand. You can do this via a JavaScript object, CSS variables, or through the &lt;a href="https://www.figma.com/community/plugin/1040722185526429545/AWS-Amplify-Theme-Editor"&gt;Amplify Theme Editor Figma Plugin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Install the plugin, then choose it from the Figma plugin dropdown.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J3eqZ9hI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/figma-plugin.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J3eqZ9hI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/figma-plugin.png" alt="" width="880" height="1008"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll be prompted to enter your app's Amplify Studio URL, and then to sign into your app. In order to get your sign in, you can create a user within the AWS Amplify Console for your app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--82gCY1JL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/invite-users.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--82gCY1JL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/invite-users.png" alt="" width="880" height="262"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: make sure to reset your new user's password before using it to log into the Figma Plugin!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can then change any of the colors for your app, change your brand colors, and any of the components' colors. You can apply them to the Figma file and to your Studio app. Once you sync with Studio, the next time you run &lt;code&gt;amplify pull&lt;/code&gt;, you'll have a theme object that you can pass as a prop to &lt;code&gt;AmplifyProvider&lt;/code&gt; which will apply your theme to your app!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ui.docs.amplify.aws/theming"&gt;Learn more about theming in the docs.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#update-from-figma"&gt;
  &lt;/a&gt;
  Update from Figma
&lt;/h2&gt;

&lt;p&gt;If at any point you want to update a component, you can do so within Figma and then click "Sync with Figma" in Studio. Then, you'll be able to observe your changes compared to what you have now, and either accept or reject your changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-the-rest-of-the-amplify-ecosystem"&gt;
  &lt;/a&gt;
  Use the rest of the Amplify Ecosystem
&lt;/h2&gt;

&lt;p&gt;You can use the whole Amplify ecosystem with an app that you create with Amplify Studio. You can add frontend hosting, additional backend resources like authentication, storage, and serverless functions, and then extend your project outside of what Amplify natively offers with CDK.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I can't wait for you to build your own app with Amplify Studio out. If you have any feedback, please leave a &lt;a href="https://github.com/aws-amplify/amplify-adminui"&gt;GitHub issue&lt;/a&gt; or join our &lt;a href="https://discord.gg/amplify"&gt;Discord Community&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>aws</category>
    </item>
    <item>
      <title>Building an EIP-1559 Gas Tracker</title>
      <author>Rounak Banik</author>
      <pubDate>Tue, 14 Dec 2021 15:07:00 +0000</pubDate>
      <link>https://dev.to/rounakbanik/building-an-eip-1559-gas-tracker-4p7k</link>
      <guid>https://dev.to/rounakbanik/building-an-eip-1559-gas-tracker-4p7k</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hbsx6NEG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i67qt8spaxe6rpwoq0ij.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hbsx6NEG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i67qt8spaxe6rpwoq0ij.png" alt="EIP-1559 Image" width="678" height="381"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;The London Hard Fork in August 2021 brought about one of the biggest upgrades that the Ethereum network has ever witnessed. The fork implemented EIP-1559; a gas pricing mechanism that is touted to be superior to the blind auction model. It also introduced fundamental changes in the monetary policy of Ether (ETH), making it a deflationary currency at least in the short term.&lt;/p&gt;

&lt;p&gt;In this tutorial, we will build a gas tracker that tracks the two new components of gas fees in EIP-1559 as well as other statistics (such as block volume) for the latest 20 blocks. By doing so, we will achieve two important goals:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A deeper understanding of how EIP-1559 works under the hood and what improvements it brings to the table.&lt;/li&gt;
&lt;li&gt;A fully functional gas tracker app that retrieves the latest block volumes and gas fees, broken down by base and priority fee.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In order to do this, we will use Alchemy, the Alchemy web3.js library, Node, and React. Don't worry if some of these words sound alien to you, we will cover them in detail!&lt;/p&gt;

&lt;p&gt;This tutorial does assume that you have a basic understanding of how gas and gas prices work on Ethereum though. A preliminary understanding of EIP-1559 is also helpful but not required. In case you need a primer, I strongly suggest going through this &lt;a href="https://blog.alchemy.com/blog/eip-1559"&gt;excellent article on Alchemy's blog&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-quick-recap-of-eip1559"&gt;
  &lt;/a&gt;
  A Quick Recap of EIP-1559
&lt;/h2&gt;

&lt;p&gt;EIP-1559 brought about the following changes in the gas pricing mechanism of Ethereum.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The blind auction gas fee has now been replaced by two component fees: a base free and a priority fee (or miner's tip).&lt;/li&gt;
&lt;li&gt;The base fee is determined automatically by the network. It can increases up to 12.5% if the previous block was full and decrease by up to 12.5% if the previous block was empty.&lt;/li&gt;
&lt;li&gt;The miner's tip is determined by the user and can be tuned based on the urgency of the transaction.&lt;/li&gt;
&lt;li&gt;The upper limit of block sizes has doubled to 30 million gas. This has been done to accomodate sudden spikes in traffic. The expectation, though, is that the average block volume will be 50%.&lt;/li&gt;
&lt;li&gt;The base fee is burned by the network to prevent miners from artificially flooding blocks. Miners, however, get to pocket the tip.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will be able to see how this works in real time with the gas tracker that we build. We will be building this project in two parts: in the first part, we will write a node script that will track transaction fee history in real time. In the second part, we will create a React app leveraging this script to build our final tracker.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-1-the-transaction-fee-history-script"&gt;
  &lt;/a&gt;
  Part 1: The Transaction Fee History script
&lt;/h2&gt;

&lt;p&gt;In this section, we will write a script (in node) that will allow us to get the gas fee history of the latest 20 blocks on the Ethereum network.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-0-install-node-and-npm"&gt;
  &lt;/a&gt;
  Step 0: Install node and npm
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b_xOY6jp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7x90udj6afkoznubg4g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b_xOY6jp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7x90udj6afkoznubg4g.png" alt="Node and npm" width="880" height="343"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure you have node and npm installed on your local computer (at least v14 or higher). You can download it &lt;a href="https://nodejs.org/en/download/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-create-an-alchemy-account"&gt;
  &lt;/a&gt;
  Step 1: Create an Alchemy account
&lt;/h3&gt;

&lt;p&gt;In order to get the latest gas fee history of blocks, we will have to connect to and communicate with the Ethereum network. Alchemy is a blockchain developer platform that allows us to do this without having to spin up our own nodes.&lt;/p&gt;

&lt;p&gt;You can create an Alchemy account for free &lt;a href="https://alchemy.com/?a=d7d81950c0"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-create-an-alchemy-app-and-api-key"&gt;
  &lt;/a&gt;
  Step 2: Create an Alchemy App (and API key)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3clAfN46--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkti0yseb1wp47ypwkfj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3clAfN46--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkti0yseb1wp47ypwkfj.png" alt="Alchemy Dashboard" width="880" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create an app on the &lt;a href="https://dashboard.alchemyapi.io/"&gt;Alchemy dashboard&lt;/a&gt;. Set the chain to &lt;strong&gt;Ethereum&lt;/strong&gt; and the network to &lt;strong&gt;Mainnet&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PSXlKgFD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vi9cxwhj1rv58un9d0z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PSXlKgFD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vi9cxwhj1rv58un9d0z.png" alt="App Key Page" width="880" height="335"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, visit your app's page and click on &lt;strong&gt;View Key&lt;/strong&gt;. This will open a popup with the HTTP and Websocket URLs of your app. For this tutorial, we will be using the websocket URL.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-create-node-project-and-install-dependencies"&gt;
  &lt;/a&gt;
  Step 3: Create node project and install dependencies
&lt;/h3&gt;

&lt;p&gt;We are now in a good position to start writing our node script. Let's create an empty repository and install dependencies. For this script, we will be requiring the &lt;a href="https://docs.alchemy.com/alchemy/documentation/alchemy-web3"&gt;Alchemy web3.js library&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On your Terminal (or Command Prompt), run the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; mkdir gas-tracker-script &amp;amp;&amp;amp; cd gas-tracker-script
&amp;gt; npm init -y
&amp;gt; npm install --save @alch/alchemy-web3
&amp;gt; touch main.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should create a repository named &lt;code&gt;gas-tracker-script&lt;/code&gt; that holds all the files and dependencies we need. Open this repo in you favorite code editor. We will be writing all our code in the &lt;code&gt;main.js&lt;/code&gt; file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-create-a-web3-client-instance-using-alchemy"&gt;
  &lt;/a&gt;
  Step 4: Create a web3 client instance using Alchemy
&lt;/h3&gt;

&lt;p&gt;Creating a client instance with Alchemy web3 is incredibly simple. &lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;main.js&lt;/code&gt; file, add the following lines of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { createAlchemyWeb3 } = require("@alch/alchemy-web3");

// Using WebSockets
const web3 = createAlchemyWeb3(
    "wss://eth-mainnet.alchemyapi.io/v2/&amp;lt;--API KEY--&amp;gt;",
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to replace the placeholder above with the websocket URL of your app. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-get-fee-history-of-the-last-20-blocks"&gt;
  &lt;/a&gt;
  Step 5: Get fee history of the last 20 blocks
&lt;/h3&gt;

&lt;p&gt;We want to get the gas fees history of the last 10 blocks. Data we're interested in includes the base fee, range of priority fees, block volume, and block number.&lt;/p&gt;

&lt;p&gt;Fortunately for us, Alchemy has a very convenient &lt;a href="https://docs.alchemy.com/alchemy/apis/ethereum/eth_feehistory"&gt;eth_feeHistory&lt;/a&gt; that returns all the aforementioned data automatically.&lt;/p&gt;

&lt;p&gt;All we need to specify is the newest block we want data for, the total number of blocks to look at, and the percentile ranges for priority fees.&lt;/p&gt;

&lt;p&gt;We are interested in the latest 20 blocks and the 25th, 50th, and 75th percentile of priority fees.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;web3.eth.getFeeHistory(20, "latest", [25, 50, 75]).then(console.log)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running this script (using &lt;code&gt;node main.js&lt;/code&gt;) should fetch you the data you're looking for. Here is some data I received after requesting for 5 blocks worth of data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1bhctkFU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecjl22k207rxyglsva6c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1bhctkFU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecjl22k207rxyglsva6c.png" alt="Terminal output" width="591" height="362"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-6-format-output"&gt;
  &lt;/a&gt;
  Step 6: Format output
&lt;/h3&gt;

&lt;p&gt;The output we received in step 5 is correct but is not very readable. The fees are expressed in hexadecimals and the data structure makes it difficult to figure out which data corresponds to which block.&lt;/p&gt;

&lt;p&gt;Let's write a small function that transforms the raw data into a list of dictionaries where each dictionary will contain data on a particular block. The function also converts all hexadecimal gas values denominated in wei to decimals denominated in Gwei.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const formatOutput = (data, numBlocks) =&amp;gt; {

    let blocks = []
    for (let i = 0; i &amp;lt; numBlocks; i++) {
        blocks.push({
            blockNumber: Number(data.oldestBlock) + i,
            reward: data.reward[i].map(r =&amp;gt; Math.round(Number(r) / 10 ** 9)),
            baseFeePerGas: Math.round(Number(data.baseFeePerGas[i]) / 10 ** 9),
            gasUsedRatio: data.gasUsedRatio[i],
        })
    }
    return blocks;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, let's use this function is callback of &lt;code&gt;feeHistory&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const numBlocks = 5;

web3.eth.getFeeHistory(numBlocks, "latest", [25, 50, 75]).then((data) =&amp;gt; {
    const blocks = formatOutput(data, numBlocks);
    console.log(blocks);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running this version of the script should yield output in the following format:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FHWsFshc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73nbc2qlku9kwfresskp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FHWsFshc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73nbc2qlku9kwfresskp.png" alt="Terminal output" width="470" height="481"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-7-subscribe-to-latest-block-headers"&gt;
  &lt;/a&gt;
  Step 7: Subscribe to latest block headers
&lt;/h3&gt;

&lt;p&gt;A new block gets added to the Ethereum blockchain approximately every 15 seconds. Therefore, we would ideally want to subscribe to the event of blocks being added and update our transaction history such that it always shows data for the latest 20 blocks.&lt;/p&gt;

&lt;p&gt;Let's nest the &lt;code&gt;getFeeHistory&lt;/code&gt; functionality within a subscription event callback.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let subscription = web3.eth.subscribe('newBlockHeaders');

subscription.on("data", () =&amp;gt; {
    web3.eth.getFeeHistory(numBlocks, "latest", [25, 50, 75]).then((data) =&amp;gt; {
        const blocks = formatOutput(data, numBlocks);
        console.log(blocks);
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the &lt;code&gt;main.js&lt;/code&gt; script now will output the freshest batch of data every 15 seconds or so. If you've come this far, congratulations! You now have a fully functional gas tracker.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-2-the-gas-tracker-react-app"&gt;
  &lt;/a&gt;
  Part 2: The Gas Tracker React App
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EfkdRTQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obgf0x9giq33nam1x4ui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EfkdRTQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obgf0x9giq33nam1x4ui.png" alt="React" width="880" height="481"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the previous section, we wrote a script that retrieved the fee history of the last 20 blocks every time a new block was added to the Ethereum mainnet.&lt;/p&gt;

&lt;p&gt;In this section, we will build a small React app that transports this data from our terminal to the browser. In addition to fee transaction history, we will also display the average gas fees and block volumes over the last 20 blocks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-initialize-react-project-and-install-dependencies"&gt;
  &lt;/a&gt;
  Step 1: Initialize React project and install dependencies
&lt;/h3&gt;

&lt;p&gt;Run the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; npx create-react-app gas-tracker-frontend
&amp;gt; cd gas-tracker-frontend
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should create a sample React project. Apart from the react dependencies, we will also need to install the Alchemy web3 library from the previous section.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; npm install --save @alch/alchemy-web3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-populate-the-appjs-file"&gt;
  &lt;/a&gt;
  Step 2: Populate the App.js file
&lt;/h3&gt;

&lt;p&gt;All our logic will reside in the &lt;code&gt;App.js&lt;/code&gt; file. Copy the following contents into the aforementioned file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import './App.css';
import { useEffect, useState } from 'react';
import { createAlchemyWeb3 } from '@alch/alchemy-web3';

const NUM_BLOCKS = 20;

function App() {

  const [blockHistory, setBlockHistory] = useState(null);
  const [avgGas, setAvgGas] = useState(null);
  const [avgBlockVolume, setAvgBlockVolume] = useState(null);

  const formatOutput = (data) =&amp;gt; {

    let avgGasFee = 0;
    let avgFill = 0;
    let blocks = [];

    for (let i = 0; i &amp;lt; NUM_BLOCKS; i++) {

      avgGasFee = avgGasFee + Number(data.reward[i][1]) + Number(data.baseFeePerGas[i])
      avgFill = avgFill + Math.round(data.gasUsedRatio[i] * 100);

      blocks.push({
        blockNumber: Number(data.oldestBlock) + i,
        reward: data.reward[i].map(r =&amp;gt; Math.round(Number(r) / 10 ** 9)),
        baseFeePerGas: Math.round(Number(data.baseFeePerGas[i]) / 10 ** 9),
        gasUsedRatio: Math.round(data.gasUsedRatio[i] * 100),
      })
    }

    avgGasFee = avgGasFee / NUM_BLOCKS;
    avgGasFee = Math.round(avgGasFee / 10 ** 9)

    avgFill = avgFill / NUM_BLOCKS;
    return [blocks, avgGasFee, avgFill];
  }

  useEffect(() =&amp;gt; {

    const web3 = createAlchemyWeb3(
      "wss://eth-mainnet.alchemyapi.io/v2/&amp;lt;--API KEY--&amp;gt;",
    );

    let subscription = web3.eth.subscribe('newBlockHeaders');

    subscription.on('data', () =&amp;gt; {
      web3.eth.getFeeHistory(NUM_BLOCKS, "latest", [25, 50, 75]).then((feeHistory) =&amp;gt; {
        const [blocks, avgGasFee, avgFill] = formatOutput(feeHistory, NUM_BLOCKS);
        setBlockHistory(blocks);
        setAvgGas(avgGasFee);
        setAvgBlockVolume(avgFill);
      });
    });

    return () =&amp;gt; {
      web3.eth.clearSubscriptions();
    }
  }, [])


  return (
    &amp;lt;div className='main-container'&amp;gt;
      &amp;lt;h1&amp;gt;EIP-1559 Gas Tracker&amp;lt;/h1&amp;gt;
      {!blockHistory &amp;amp;&amp;amp; &amp;lt;p&amp;gt;Data is loading...&amp;lt;/p&amp;gt;}
      {avgGas &amp;amp;&amp;amp; avgBlockVolume &amp;amp;&amp;amp; &amp;lt;h3&amp;gt;
        &amp;lt;span className='gas'&amp;gt;{avgGas} Gwei&amp;lt;/span&amp;gt; | &amp;lt;span className='vol'&amp;gt;{avgBlockVolume}% Volume&amp;lt;/span&amp;gt;
      &amp;lt;/h3&amp;gt;}
      {blockHistory &amp;amp;&amp;amp; &amp;lt;table&amp;gt;
        &amp;lt;thead&amp;gt;
          &amp;lt;tr&amp;gt;
            &amp;lt;th&amp;gt;Block Number&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;Base Fee&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;Reward (25%)&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;Reward (50%)&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;Reward (75%)&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;Gas Used&amp;lt;/th&amp;gt;
          &amp;lt;/tr&amp;gt;
        &amp;lt;/thead&amp;gt;
        &amp;lt;tbody&amp;gt;
          {blockHistory.map(block =&amp;gt; {
            return (
              &amp;lt;tr key={block.blockNumber}&amp;gt;
                &amp;lt;td&amp;gt;{block.blockNumber}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;{block.baseFeePerGas}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;{block.reward[0]}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;{block.reward[1]}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;{block.reward[2]}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;{block.gasUsedRatio}%&amp;lt;/td&amp;gt;
              &amp;lt;/tr&amp;gt;
            )
          })}
        &amp;lt;/tbody&amp;gt;
      &amp;lt;/table&amp;gt;}
    &amp;lt;/div&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since this isn't a React course, we are not doing to dive deep into the React-specific bits. But you should be able to observe that all that we're doing is retrieving fee history like we did in our script and outputting it in the form of an HTML table.&lt;/p&gt;

&lt;p&gt;The only additional logic we employ is computing average gas price and average block volumes over 20 blocks which is a trivial task to perform.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optional-step-3-add-some-styles"&gt;
  &lt;/a&gt;
  (Optional) Step 3: Add some styles
&lt;/h3&gt;

&lt;p&gt;You can add some basic styles in the &lt;code&gt;App.css&lt;/code&gt; file as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.main-container {
    text-align: center;
}

table {
    border-collapse: collapse;
    margin: 20px auto;
    box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);
}

thead {
    background: linear-gradient(267.45deg,#05d5ff -34.23%,#53f 99.39%);
    color: white;
    padding: 10px;
}

th {
    font-size: 18px;
    padding: 15px;

}

tbody &amp;gt; tr {
    border-top: 1px solid #ccc; 
    border-bottom: 1px solid #ccc;
    margin: 0px;
    padding: 15px;
}

td {
    padding: 6px;
}

.gas {
    color: #4299E1;
}

.vol {
    color: #4C51BF;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4-deploy-app-to-localhost"&gt;
  &lt;/a&gt;
  Step 4: Deploy app to localhost
&lt;/h3&gt;

&lt;p&gt;We're all done. Watch your app in all its glory by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is what the app should look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eN8W2VVe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/by05a6u5lyeozgyertje.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eN8W2VVe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/by05a6u5lyeozgyertje.png" alt="Gas Tracker" width="880" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! You've built a fully functional gas tracker app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#analysis"&gt;
  &lt;/a&gt;
  Analysis
&lt;/h2&gt;

&lt;p&gt;Let's take a step back and analyze the data above. Here are a few things we can observe which are a direct result of the EIP-1559 implementation.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The base fee does not fluctuate wildly from block to block. In fact, the maximum it increases or decreases is by 12.5%.&lt;/li&gt;
&lt;li&gt;The priority fee, in most cases, is a small percentage of the total fee.&lt;/li&gt;
&lt;li&gt;Block volumes tend to fluctuate but the average block volumes hover around 50%.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The data does seem to suggest that gas fees in this model is much more predictable. Since everyone pays the same base fee and the priority fee, in most cases, is a small percentage of total fee, most transactions don't end up overpaying for gas. Therefore, this small sample of data suggests that EIP-1559 has succeeded in what it set out to achieve: more predictable gas prices, and less overpayment in gas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We've covered a lot of ground in this article. By building an EIP-1559 gas tracker from scratch, I hope you were able to grasp and appreciate the improvement it brings to transacting on Ethereum.&lt;/p&gt;

&lt;p&gt;I also hope that you've gotten a decent grasp on how to use Alchemy, its APIs, and the web3.js library. We've barely scratched the surface with respect to its capabilities and offerings. I strongly suggest you dig more into &lt;a href="https://docs.alchemy.com/alchemy/"&gt;their documentation&lt;/a&gt; if and when you set out to build your next great dapp.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>javascript</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What is AWS S3 Intelligent-Tiering?</title>
      <author>Vijay Patel</author>
      <pubDate>Tue, 14 Dec 2021 15:03:18 +0000</pubDate>
      <link>https://dev.to/easyawslearn/what-is-aws-s3-intelligent-tiering-2opn</link>
      <guid>https://dev.to/easyawslearn/what-is-aws-s3-intelligent-tiering-2opn</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-aws-s3-intelligenttiering"&gt;
  &lt;/a&gt;
  What is AWS S3 Intelligent-Tiering
&lt;/h2&gt;

&lt;p&gt;S3 Intelligent-Tiering is an Amazon S3 storage class that analyzes an AWS user's stored data and automatically moves it between storage tiers based on usage frequency. It is designed to optimize storage costs for data with irregular or unknown access patterns.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Here is a full Demonstration video on AWS S3 Intelligent-Tiering👇&lt;/code&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=KYqgBIIuilo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TQadks0A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4m0c8q5lfc5z3mlc806j.png" alt="Image description" width="480" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#s3-intelligenttiering-features"&gt;
  &lt;/a&gt;
  S3 Intelligent-Tiering features
&lt;/h2&gt;

&lt;p&gt;A user can access S3 Intelligent-Tiering through the AWS Management Console, command-line interface, or S3 API. He or she can select this storage class when data is uploaded to S3, or move existing data into this class from another class. Lifecycle rules can also be established to transition data to another storage class, such as Amazon S3 Glacier, after a designated period.&lt;br&gt;
The service monitors and predicts user behavior to determine the tier in which it will store data. Those predictions are the output of machine learning algorithms AWS built to analyze data traffic patterns across the trillions of objects stored in S3.&lt;br&gt;
S3 Intelligent-Tiering is one of several S3 storage options designed around accessibility demands. S3 Intelligent-Tiering is not recommended for a user who knows data access patterns well.&lt;/p&gt;




&lt;p&gt;▬▬▬▬▬▬ WANT TO LEARN MORE? ▬▬▬▬▬▬&lt;br&gt;
Full Terraform tutorial ► &lt;a href="https://bit.ly/2GwK8V2"&gt;https://bit.ly/2GwK8V2&lt;/a&gt;&lt;br&gt;
DevOps Tools, like Ansible ► &lt;a href="https://bit.ly/3iASHuP"&gt;https://bit.ly/3iASHuP&lt;/a&gt;&lt;br&gt;
Docker Tutorial ► &lt;a href="https://bit.ly/3iAT9Jx"&gt;https://bit.ly/3iAT9Jx&lt;/a&gt;&lt;br&gt;
AWS Tutorial ► &lt;a href="https://bit.ly/3iAT9Jx"&gt;https://bit.ly/3iAT9Jx&lt;/a&gt;&lt;br&gt;
GCP Tutorial ► &lt;a href="https://bit.ly/3mwh412"&gt;https://bit.ly/3mwh412&lt;/a&gt;&lt;br&gt;
Jenkins Tutorials ► &lt;a href="https://bit.ly/3iHnfv4"&gt;https://bit.ly/3iHnfv4&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>s3</category>
      <category>awss3</category>
      <category>cloudcomputing</category>
    </item>
    <item>
      <title>What is AWS RDS (Relational Database Services)</title>
      <author>Vijay Patel</author>
      <pubDate>Tue, 14 Dec 2021 14:58:00 +0000</pubDate>
      <link>https://dev.to/easyawslearn/what-is-aws-rds-relational-database-services-702</link>
      <guid>https://dev.to/easyawslearn/what-is-aws-rds-relational-database-services-702</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-aws"&gt;
  &lt;/a&gt;
  What is AWS?
&lt;/h2&gt;

&lt;p&gt;Amazon Web Services (AWS) is the world’s most comprehensive and broadly adopted cloud platform, offering over 200 fully-featured services from data centers globally. Millions of customers—including the fastest-growing startups, largest enterprises, and leading government agencies—are using AWS to lower costs, become more agile, and innovate faster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-amazon-rds"&gt;
  &lt;/a&gt;
  What is Amazon RDS?
&lt;/h2&gt;

&lt;p&gt;Amazon Relational Database Service (RDS) is a managed SQL database service provided by Amazon Web Services (AWS). Amazon RDS supports an array of database engines to store and organize data. It also helps with relational database management tasks, such as data migration, backup, recovery, and patching.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Here is a full dedicated video on AWS RDS (Relational Database Services)👇👇&lt;/code&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=EO8BZ2Vjw90"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7zt7Kwjx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47jmhuqtil02sc2rv82d.png" alt="Image description" width="640" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazon RDS facilitates the deployment and maintenance of relational databases in the cloud. A cloud administrator uses Amazon RDS to set up, operate, manage and scale a relational instance of a cloud database. Amazon RDS is not itself a database; it is a service used to manage relational databases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-benefits-of-aws-rds"&gt;
  &lt;/a&gt;
  What are the benefits of AWS RDS?
&lt;/h2&gt;

&lt;p&gt;The main benefit of Amazon RDS is that it helps organizations deal with the complexity of managing large relational databases. Other benefits include the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ease of use. Admins don't need to learn specific database management tools. They also can manage multiple database instances using the management console. RDS is compatible with database engines that users may already be familiar with, such as MySQL and Oracle And it automates manual backup and recovery processes.&lt;/li&gt;
&lt;li&gt;Cost-effectiveness. According to AWS, customers only pay for what they use. Also, the time spent maintaining instances is reduced, because maintenance tasks, such as backups and patching, are automated.&lt;/li&gt;
&lt;li&gt;The use of read replicas routes read-heavy traffic away from the main database instance, reducing the workload on that one instance.&lt;/li&gt;
&lt;li&gt;RDS splits up compute and storage so admins can scale them independently.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;▬▬▬▬▬▬ WANT TO LEARN MORE? ▬▬▬▬▬▬&lt;br&gt;
Full Terraform tutorial ► &lt;a href="https://bit.ly/2GwK8V2"&gt;https://bit.ly/2GwK8V2&lt;/a&gt;&lt;br&gt;
DevOps Tools, like Ansible ► &lt;a href="https://bit.ly/3iASHuP"&gt;https://bit.ly/3iASHuP&lt;/a&gt;&lt;br&gt;
Docker Tutorial ► &lt;a href="https://bit.ly/3iAT9Jx"&gt;https://bit.ly/3iAT9Jx&lt;/a&gt;&lt;br&gt;
AWS Tutorial ► &lt;a href="https://bit.ly/3iAT9Jx"&gt;https://bit.ly/3iAT9Jx&lt;/a&gt;&lt;br&gt;
GCP Tutorial ► &lt;a href="https://bit.ly/3mwh412"&gt;https://bit.ly/3mwh412&lt;/a&gt;&lt;br&gt;
Jenkins Tutorials ► &lt;a href="https://bit.ly/3iHnfv4"&gt;https://bit.ly/3iHnfv4&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>rds</category>
      <category>awsrds</category>
      <category>cloudcomputing</category>
    </item>
    <item>
      <title>Python IDE Comparison</title>
      <author>images.cv</author>
      <pubDate>Tue, 14 Dec 2021 14:47:59 +0000</pubDate>
      <link>https://dev.to/imagescv/python-ide-comparison-4n40</link>
      <guid>https://dev.to/imagescv/python-ide-comparison-4n40</guid>
      <description>&lt;p&gt;&lt;strong&gt;Python is one of the most popular programming languages in the world. There are many reasons why it is so popular, but its popularity can also make it difficult to choose which IDE you should be using. In this blog post, we will compare some of the top Python IDEs on the market and help you decide which one best suits your needs!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt; is a great IDE that focuses on Python and web development. Its user interface has been optimized for quick navigation, so you get the most out of your experience without wasting time. One unique feature of PyCharm is its huge collection of over 11 thousand third-party plugins called "JetBrains" which can be used to extend functionality or add new tools to help with development efforts. This makes it a very powerful tool in terms of customization options!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is the best part about PyCharm?&lt;/strong&gt;&lt;br&gt;
Its price tag - unlimited use during open-source projects comes free when using any JetBrains product!! The only downside would have to be the initial learning curve required before becoming proficient in usage, but once you're there you will be in love!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.pydev.org/"&gt;Eclipse&lt;/a&gt; is a very popular IDE that's been around for a while and has a large community of developers using it. It offers great integration with other tools and languages, making it an attractive option if you are working on projects that involve multiple programming languages or technologies. One downside to Eclipse is that its interface can be quite complex - which may make it difficult for beginners to get started. However, with a bit of time invested in learning how to use it effectively, Eclipse can become an incredibly powerful tool!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://atom.io/"&gt;Atom&lt;/a&gt; is a newer editor released by Github in 2015. It bills itself as "hackable to the core" because nearly every part of the editor is customizable through plugins or themes. This makes it perfect for those who love to tinker with their tools and build them exactly how they want. It's also incredibly lightweight, so it won't slow down your machine like some of the other heavyweight IDEs on this list!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The downside?&lt;/strong&gt;&lt;br&gt;
Atom is very new - which means that many users aren't familiar with its ins-and-outs just yet. This can lead to a bit of confusion for beginners who are looking for an IDE that will help guide them through the development process instead of requiring time investment in learning how to use it effectively.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://visualstudio.microsoft.com/"&gt;Visual Studio&lt;/a&gt; is a Microsoft product that has been around for a long time. It's an IDE primarily aimed at developers who work with Microsoft technologies, but it does offer some support for Python development as well. One of the best features of Visual Studio is its huge ecosystem - there are tons of extensions and plugins available to help you customize your experience and make sure that you're productive no matter what project you're working on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.spyder-ide.org/"&gt;Spyder&lt;/a&gt; is a lightweight IDE designed specifically for scientific development. It is a great option if you're developing in Python for science and engineering purposes, but it's not going to be helpful when working on general-purpose projects or web applications - so keep that in mind before committing!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;One of the best things about Spyder?&lt;/strong&gt;&lt;br&gt;
There are no price tags associated with this IDE - all features included in its base form come free without any add-ons or optional purchases required. If you're looking for an editor that can handle your specific needs at zero cost then this may be the way to go!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;After reviewing some of the most popular IDEs available today we have found &lt;a href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt; as our top pick! This tool provides a powerful environment, tons of customization options, and an excellent learning curve for beginners. If you are looking to get started with Python development today, PyCharm should be your first stop!&lt;/p&gt;




&lt;p&gt;&lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; provide you with an easy way to build image datasets.&lt;br&gt;
15K+ categories to choose from&lt;br&gt;
Consistent folders structure for easy parsing&lt;br&gt;
Advanced tools for dataset pre-processing: image format, data split, image size and data augmentation.&lt;/p&gt;

&lt;p&gt;👉Visit &lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; to learn more&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>A Tale of Two Vues - Tips for Developing VueJS Libraries</title>
      <author>Luka Skukan</author>
      <pubDate>Tue, 14 Dec 2021 14:32:07 +0000</pubDate>
      <link>https://dev.to/superbet/a-tale-of-two-vues-tips-for-developing-vuejs-libraries-4m5o</link>
      <guid>https://dev.to/superbet/a-tale-of-two-vues-tips-for-developing-vuejs-libraries-4m5o</guid>
      <description>&lt;p&gt;A few weeks ago, I ran into an interesting problem. At &lt;a href="https://superbet.engineering/"&gt;Superbet&lt;/a&gt;, we were attempting to extract some &lt;a href="https://vuejs.org/"&gt;VueJS&lt;/a&gt; reactive code into a separate utility library, using &lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt;. I thought I knew what was waiting for us, and expected it to be a quick and simple thing. I was gravely mistaken. Vue &lt;a href="https://vuejs.org/v2/guide/reactivity.html"&gt;reactivity&lt;/a&gt; broke, and investigating what happened was no easy task. However, it also involved a process of discovery that was interesting enough to write about!&lt;/p&gt;

&lt;p&gt;In this article, I'd like to introduce a development process for external libraries that rely on Vue as a &lt;em&gt;&lt;a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json#peerdependencies"&gt;peer dependency&lt;/a&gt;&lt;/em&gt;, warn you about the potential pitfalls, and share how it applies to other JavaScript ecosystems as well (such as &lt;a href="https://reactjs.org/"&gt;ReactJS&lt;/a&gt;). I'll take you through the experiences we've had step by step, share the difficulties we've encountered, and help you avoid them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-we-thought-would-work"&gt;
  &lt;/a&gt;
  What We Thought Would Work
&lt;/h2&gt;

&lt;p&gt;The task itself sounded simple enough - extract a number of utilities that make use of a &lt;a href="https://vuejs.org/v2/api/#Vue-observable"&gt;Vue observable&lt;/a&gt; into a separate library, to be used across multiple Vue projects. We knew that we did not want to include the &lt;code&gt;vue&lt;/code&gt; dependency into the library bundle itself, nor did we want it to be installed when you add the library. Doing this would increase the bundle size for no good reason, and could even lead to dependency version conflicts!&lt;/p&gt;

&lt;p&gt;We attempted to resolve this by marking &lt;code&gt;vue&lt;/code&gt; as a &lt;code&gt;peerDependency&lt;/code&gt;. This is a type of dependency, specified in &lt;code&gt;package.json&lt;/code&gt; under &lt;code&gt;peerDependencies&lt;/code&gt;, that marks a special type of dependency that, at the same time, &lt;em&gt;are&lt;/em&gt; and &lt;em&gt;are not&lt;/em&gt; dependencies for the project. You can think of them simply as dependencies that are &lt;strong&gt;expected&lt;/strong&gt; to be there when you're using the library, in the project that uses the library. The syntax is the same as for &lt;code&gt;dependencies&lt;/code&gt; and &lt;code&gt;devDependencies&lt;/code&gt; but, unlike those two, it needs to be added by manually modifying the &lt;code&gt;package.json&lt;/code&gt; file. The specified &lt;a href="https://github.com/npm/node-semver#versions"&gt;version range&lt;/a&gt; will signal which versions of that dependency are &lt;em&gt;compatible&lt;/em&gt; with your library.&lt;/p&gt;

&lt;p&gt;This pattern is essential for library development, especially when the code contained in the library is meant to be a plugin or an extension based on some behaviour provided by a core library. It avoids having the same dependency installed multiple times, or even with multiple versions, while still using version ranges to ensure compatibility. For example, a library that defined a Vue plugin that depends on Vuex being present might have the peer dependencies specified like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"peerDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"vue"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.6.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"vuex"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;=3.5.1 &amp;lt;3.6.2"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, to develop and unit test your changes locally, you might still need to be able to import those dependencies, since there is no codebase to provide them for you. You can do this in one of three ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If you are using &lt;code&gt;npm&lt;/code&gt; versions 1, 2, or 7+, this will be done for you automatically! 🎉&lt;/li&gt;
&lt;li&gt;Otherwise, you can use a library such as &lt;a href="https://www.npmjs.com/package/npm-install-peers"&gt;&lt;code&gt;npm-install-peers&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Or, even better, just add it as a &lt;code&gt;devDependency&lt;/code&gt;!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Were this a simple JavaScript project without a build step, this would have been enough! If the code using this library as a dependency had these same dependencies in the correct versions, the library would make use of them instead of installing a separate version. If, instead, it did not have them, or had the wrong version, an error would be emitted during &lt;code&gt;npm install&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fixing-the-build-process"&gt;
  &lt;/a&gt;
  Fixing the Build Process
&lt;/h2&gt;

&lt;p&gt;As you might have guessed, specifying it as a peer dependency was not sufficient! I hinted at this before - the build process was not considering the fact it was specified as a peer dependency, only that it was being imported into our codebase. This led to a &lt;em&gt;separate&lt;/em&gt; instance of Vue being bundled with the library, and it was the root cause of my problems: &lt;strong&gt;two Vue instances&lt;/strong&gt; and their observables are not mutually reactive. Not only did we double-bundle it and increase the package size, Vue (much like React) relies on there being a single instance of the library to work properly!&lt;/p&gt;

&lt;p&gt;Luckily, the fix for that is straightforward enough - we just needed to tell the build tool to exclude those dependencies from the bundle. With &lt;a href="https://webpack.js.org/"&gt;Webpack&lt;/a&gt;, you can specify the &lt;a href="https://webpack.js.org/configuration/externals/"&gt;&lt;code&gt;externals&lt;/code&gt;&lt;/a&gt; field like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;externals&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;vue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://rollupjs.org/guide/en/"&gt;Rollup&lt;/a&gt; has a similar mechanism for specifying external dependencies, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="na"&gt;external&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alternatively, if you want Rollup to take care of those pesky peer dependencies for you, you can install a plugin for that. One such example is &lt;a href="https://www.npmjs.com/package/rollup-plugin-peer-deps-external"&gt;&lt;code&gt;rollup-plugins-peer-deps-external&lt;/code&gt;&lt;/a&gt;. Add it to your project using your favourite package manager:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-D&lt;/span&gt; rollup-plugin-peer-deps-external
&lt;span class="c"&gt;# OR&lt;/span&gt;
yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; rollup-plugin-peer-deps-external
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that's done, modify your rollup configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;external&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rollup-plugin-peer-deps-external&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;external&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="c1"&gt;// preferably goes first&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After building and publishing the library, everything will work as expected! You can even go into the built files and check that the dependency (Vue, in our case) is not bundled! However, we would not consider publishing a new version of a library without testing it locally first, and this is where things got complicated once more...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-troubles"&gt;
  &lt;/a&gt;
  Testing Troubles
&lt;/h2&gt;

&lt;p&gt;For most use cases, there is a simple and reliable flow for testing libraries without publishing them: we can use &lt;a href="https://docs.npmjs.com/cli/v8/commands/npm-link"&gt;&lt;code&gt;npm-link&lt;/code&gt;&lt;/a&gt; to connect a local version of a library, without having to update it on the &lt;a href="https://www.npmjs.com/"&gt;npm registry&lt;/a&gt;. The flow would be as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# In your library folder&lt;/span&gt;
npm run build &lt;span class="c"&gt;# or equivalent&lt;/span&gt;
npm &lt;span class="nb"&gt;link&lt;/span&gt; &lt;span class="c"&gt;# for my-awesome-library&lt;/span&gt;

&lt;span class="c"&gt;# In the folder of the app that uses the library&lt;/span&gt;
npm &lt;span class="nb"&gt;link &lt;/span&gt;my-awesome-library

&lt;span class="c"&gt;## --------------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;## Alternatively, a single command to run from the app folder&lt;/span&gt;
npm &lt;span class="nb"&gt;link&lt;/span&gt; ../path-to/my-awesome-library
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it! When you build or run your project, it will be making use of the updated local artefacts, through the magic of &lt;a href="https://en.wikipedia.org/wiki/Symbolic_link"&gt;symlinks&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;That is to say, that would be it, unless you happen to be using peer dependencies and happen to be relying on a single instance of some object to exist in code, as happens to be the case with both VueJS and React. In this case, though the code would work fine if it were built and published, it will not resolve correctly with &lt;code&gt;npm-link&lt;/code&gt;. There are a number of ways around it, some based on &lt;code&gt;yarn&lt;/code&gt;, others specific to Webpack, or resolved by using &lt;a href="https://lerna.js.org/"&gt;Lerna&lt;/a&gt;. However, there are two fairly generic ways of handling it, as well.&lt;/p&gt;

&lt;p&gt;The first is simpler, but more fragile. If the shared dependency is a single library, and the dependency graph is relatively simple, you can use &lt;code&gt;npm-link&lt;/code&gt; to ensure they resolve to the same version of the dependency is resolved as the peer dependency, by running the following in your library folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# from my-awesome-library&lt;/span&gt;
npm &lt;span class="nb"&gt;link&lt;/span&gt; ../path-to/my-app/node_modules/vue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This works well enough for such a simple use case, but can be a pain to manage, and gets more complicated as the dependency graph gets messier. There is another, more robust way. Once you've set up your &lt;code&gt;peerDependencies&lt;/code&gt; and your build system, and ensured that the built assets do not actually bundle the dependency, you can create a package locally, as a &lt;a href="https://whatis.techtarget.com/definition/tarball-tar-archive"&gt;tarball&lt;/a&gt;, and install it directly. This is essentially the same process as building and publishing the library, only using your computer as the repository. What you will need to do is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# in the library folder&lt;/span&gt;
npm run build &lt;span class="c"&gt;# or equivalent&lt;/span&gt;
npm pack

&lt;span class="c"&gt;# in the app directory&lt;/span&gt;
npm i &lt;span class="nt"&gt;--save&lt;/span&gt; ../path-to/my-awesome-lib/my-awesome-lib-1.2.3.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that is all there is to it! The dependency will be installed from the tarball, and you can now build or run your application and make sure everything works correctly.&lt;/p&gt;

&lt;p&gt;⚠️ &lt;strong&gt;NOTE:&lt;/strong&gt; This updates your &lt;code&gt;package.json&lt;/code&gt; file in the application folder. Make sure you don't accidentally keep that change after you're done testing! The same goes for the tarball created in the library folder.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#putting-it-all-together"&gt;
  &lt;/a&gt;
  Putting it All Together
&lt;/h2&gt;

&lt;p&gt;Now you know all the essentials to start developing your own extensions and libraries that are based on Vue! To briefly recap what we need to know:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What are peer dependencies and how they are different than regular dependencies&lt;/li&gt;
&lt;li&gt;What updates need to be done to your build system (if applicable) to avoid bundling the library twice&lt;/li&gt;
&lt;li&gt;How to avoid the common &lt;code&gt;npm-link&lt;/code&gt; pitfall&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And that's all there is to it!&lt;/p&gt;

&lt;p&gt;As an additional note, this rabbit hole goes much deeper than just Vue. As mentioned before, React also shares this issue. If you've been developing your own &lt;a href="https://reactjs.org/docs/hooks-custom.html"&gt;React hooks library&lt;/a&gt;, for example, you might have run into the now-legendary &lt;strong&gt;&lt;a href="https://reactjs.org/warnings/invalid-hook-call-warning.html"&gt;Hooks can only be called inside the body of a function component&lt;/a&gt;&lt;/strong&gt;, which is caused by the same core problem. You are definitely encouraged to share your own stories of similar issues in the comments, and propose other solutions to this problem that were not addressed by the article!&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How TO - Responsive Top Navigation</title>
      <author>Harshit Khaladkar</author>
      <pubDate>Tue, 14 Dec 2021 14:31:27 +0000</pubDate>
      <link>https://dev.to/harshitkhaladk1/how-to-responsive-top-navigation-3p81</link>
      <guid>https://dev.to/harshitkhaladk1/how-to-responsive-top-navigation-3p81</guid>
      <description>&lt;p&gt;&lt;u&gt;&lt;/u&gt;&lt;/p&gt;
&lt;h2&gt;Learn how to create a responsive top navigation menu with CSS and JavaScript.&lt;h2&gt;

&lt;/h2&gt;
&lt;/h2&gt;
&lt;p&gt;Responsive Navigation Bar&lt;br&gt;
Resize the browser window to see how the responsive navigation menu works:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hCTMhtgz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2aq6y1e9hs7ymhmxfa7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hCTMhtgz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2aq6y1e9hs7ymhmxfa7.jpg" alt='A pie chart showing 40% responded "Yes", 50% responded "No" and 10% responded "Not sure"' width="880" height="769"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EmxbkbZ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8mrugav5obowx8zo97tr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EmxbkbZ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8mrugav5obowx8zo97tr.jpg" alt=' A pie chart showing 40% responded "Yes", 50% responded "No" and 10% responded "Not sure"' width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create A Responsive Topnav&lt;/p&gt;

&lt;p&gt;Step 1)&lt;strong&gt; Add HTML&lt;/strong&gt;:&lt;br&gt;
Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- Load an icon library to show a hamburger menu (bars) on small screens --&amp;gt;
&amp;lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"&amp;gt;

&amp;lt;div class="topnav" id="myTopnav"&amp;gt;
  &amp;lt;a href="#home" class="active"&amp;gt;Home&amp;lt;/a&amp;gt;
  &amp;lt;a href="#news"&amp;gt;News&amp;lt;/a&amp;gt;
  &amp;lt;a href="#contact"&amp;gt;Contact&amp;lt;/a&amp;gt;
  &amp;lt;a href="#about"&amp;gt;About&amp;lt;/a&amp;gt;
  &amp;lt;a href="javascript:void(0);" class="icon" onclick="myFunction()"&amp;gt;
    &amp;lt;i class="fa fa-bars"&amp;gt;&amp;lt;/i&amp;gt;
  &amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PWNHmCbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94mrrngr8zzbwsi7yi6w.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PWNHmCbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94mrrngr8zzbwsi7yi6w.jpg" alt=' A pie chart showing 40% responded "Yes", 50% responded "No" and 10% responded "Not sure"' width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The link with class="icon" is used to open and close the topnav on small screens.&lt;/p&gt;

&lt;p&gt;Step 2) &lt;strong&gt; Add CSS &lt;/strong&gt; ;&lt;br&gt;
Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* Add a black background color to the top navigation */
.topnav {
  background-color: #333;
  overflow: hidden;
}

/* Style the links inside the navigation bar */
.topnav a {
  float: left;
  display: block;
  color: #f2f2f2;
  text-align: center;
  padding: 14px 16px;
  text-decoration: none;
  font-size: 17px;
}

/* Change the color of links on hover */
.topnav a:hover {
  background-color: #ddd;
  color: black;
}

/* Add an active class to highlight the current page */
.topnav a.active {
  background-color: #04AA6D;
  color: white;
}

/* Hide the link that should open and close the topnav on small screens */
.topnav .icon {
  display: none;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mOVw-_05--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/en7wjzmk31jeg5bhtb0q.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mOVw-_05--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/en7wjzmk31jeg5bhtb0q.jpg" alt=' A pie chart showing 40% responded "Yes", 50% responded "No" and 10% responded "Not sure"' width="880" height="769"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt; &lt;br&gt;
Add media queries&lt;br&gt;
&lt;/strong&gt; :&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* When the screen is less than 600 pixels wide, hide all links, except for the first one ("Home"). Show the link that contains should open and close the topnav (.icon) */
@media screen and (max-width: 600px) {
  .topnav a:not(:first-child) {display: none;}
  .topnav a.icon {
    float: right;
    display: block;
  }
}

/* The "responsive" class is added to the topnav with JavaScript when the user clicks on the icon. This class makes the topnav look good on small screens (display the links vertically instead of horizontally) */
@media screen and (max-width: 600px) {
  .topnav.responsive {position: relative;}
  .topnav.responsive a.icon {
    position: absolute;
    right: 0;
    top: 0;
  }
  .topnav.responsive a {
    float: none;
    display: block;
    text-align: left;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 3) &lt;strong&gt; Add JavaScript&lt;/strong&gt; :&lt;br&gt;
Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* Toggle between adding and removing the "responsive" class to topnav when the user clicks on the icon */
function myFunction() {
  var x = document.getElementById("myTopnav");
  if (x.className === "topnav") {
    x.className += " responsive";
  } else {
    x.className = "topnav";
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sa5t_efk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t9wde6oflfg3zjyy8y1d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sa5t_efk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t9wde6oflfg3zjyy8y1d.jpg" alt=' A pie chart showing 40% responded "Yes", 50% responded "No" and 10% responded "Not sure"' width="880" height="601"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here the &lt;a href="%20https://jddp1t.mimo.run/index.html"&gt; Output&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hopefully, the tutorial above has helped you a lot to learn how to make a Menu Bar &lt;br&gt;
  If you like my post, please like the article &lt;br&gt;
Follow me 👇&lt;br&gt;
&lt;a href="https://twitter.com/HarshitKhaladk1"&gt; &lt;u&gt;&lt;strong&gt;Twitter&lt;/strong&gt;&lt;/u&gt; &lt;/a&gt; &lt;br&gt;&lt;br&gt;
   &lt;a href="https://www.quora.com/profile/Harshit-Khaladkar"&gt; &lt;u&gt;&lt;strong&gt;Quora&lt;/strong&gt;&lt;/u&gt;&lt;/a&gt; &lt;br&gt;&lt;br&gt;
  &lt;a href="https://www.duolingo.com/ph.UJ4Srn"&gt; &lt;u&gt;&lt;strong&gt;Duolingo&lt;/strong&gt;&lt;/u&gt; &lt;br&gt;
  &lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>html</category>
      <category>programming</category>
    </item>
    <item>
      <title>Custom Video Player</title>
      <author>Enes Kılıç</author>
      <pubDate>Tue, 14 Dec 2021 14:28:48 +0000</pubDate>
      <link>https://dev.to/enesskilic/custom-video-player-4n51</link>
      <guid>https://dev.to/enesskilic/custom-video-player-4n51</guid>
      <description>&lt;p&gt;How to create Custom Video Player with Javascript. You can add other features with the following source code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/enesskilic/javascript-projects"&gt;Source Code&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--riilVN49--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d8njlouu0et38r3igpil.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--riilVN49--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d8njlouu0et38r3igpil.png" alt="Preview" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Understanding of text-emphasis CSS property</title>
      <author>Preethi</author>
      <pubDate>Tue, 14 Dec 2021 14:12:48 +0000</pubDate>
      <link>https://dev.to/preethi_dev/understanding-of-text-emphasis-css-property-57op</link>
      <guid>https://dev.to/preethi_dev/understanding-of-text-emphasis-css-property-57op</guid>
      <description>&lt;p&gt;Hey Gang, Again happy to see you in &lt;b&gt;Secret CSS Property Series&lt;/b&gt;. You may not be heared about &lt;code&gt;text-emphasis&lt;/code&gt; css property, since it's under used in this world. But, it's quite interesting. So, can't wait and get this show on the road🎉.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;text-emphasis&lt;/code&gt; css property, as the name itself define apply emphasis mark to the text. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kNww1Kx3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abnp4psnye8njyc37dwg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kNww1Kx3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abnp4psnye8njyc37dwg.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Getting curious to learn right. Then dive into the syntax following below. (&lt;code&gt;text-emphasis&lt;/code&gt; is a shorthand property for &lt;code&gt;text-emphasis-style&lt;/code&gt; and &lt;code&gt;text-emphasis-color&lt;/code&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;text-emphasis&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;'text-emphasis-style'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;'text-emphasis-color'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: we can't combine &lt;code&gt;text-emphasis-position&lt;/code&gt; property in &lt;code&gt;text-emphasis&lt;/code&gt; shorthand property&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before diving to shorthand property, we need to get a clear idea about &lt;code&gt;text-emphasis-style&lt;/code&gt; and what kind of styles are available to make our text incredible.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;text-emphasis-style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;filled&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;text-emphasis-style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;open&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;text-emphasis-style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;dot&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;text-emphasis-style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;circle&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;text-emphasis-style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;double-circle&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;text-emphasis-style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;triangle&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;text-emphasis-style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;sesame&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;text-emphasis-style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;string&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* text-emphasis-style: '*' */&lt;/span&gt;
&lt;span class="nt"&gt;text-emphasis-style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;none&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;text-emphasis-color&lt;/code&gt; CSS property sets the color of emphasis marks.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: If no color is present, it set &lt;code&gt;currentcolor&lt;/code&gt; as default value&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Initial value */&lt;/span&gt;
&lt;span class="nt"&gt;text-emphasis-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;currentcolor&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c"&gt;/* &amp;lt;color&amp;gt; */&lt;/span&gt;
&lt;span class="nt"&gt;text-emphasis-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#555&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;text-emphasis-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;blue&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;text-emphasis-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;rgba&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;90&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;200&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;160&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;8&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;text-emphasis-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;transparent&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wow still with me, you have much more patience to learn new thing. For you, I will give you a live demo for &lt;code&gt;text-emphasis&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/preethi-dev/embed/dyVNRVZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Hope you uncomplicate this property by codepen demo. Greetings from my side🌹, Finally you learned a brand new concepts and consequently, I will explain one bonus info.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;text-emphasis-position&lt;/code&gt; CSS property sets where emphasis marks are drawn and some tow values are required to work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;text-emphasis-position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;under&lt;/span&gt; &lt;span class="nt"&gt;right&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;text-emphasis-position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;under&lt;/span&gt; &lt;span class="nt"&gt;left&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;text-emphasis-position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;over&lt;/span&gt; &lt;span class="nt"&gt;right&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;text-emphasis-position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;over&lt;/span&gt; &lt;span class="nt"&gt;left&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Values seems little bit weird right. Don't worry gang, it's not as much as tough like you think. There are only four values: &lt;code&gt;over&lt;/code&gt;, &lt;code&gt;under&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;over&lt;/b&gt;- Draws marks over the text in horizontal writing mode.&lt;br&gt;
&lt;b&gt;under&lt;/b&gt;- Draws marks under the text in horizontal writing mode.&lt;br&gt;
&lt;b&gt;right&lt;/b&gt;- Draws marks to the right of the text in vertical writing mode.&lt;br&gt;
&lt;b&gt;left&lt;/b&gt;- Draws marks to the left of the text in vertical writing mode.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: &lt;b&gt;The preferred position of emphasis marks depends on the language&lt;/b&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In Japanese for example, the preferred position is &lt;code&gt;over right&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--04VcSqKn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnnac3zfbq7qavjv9n3n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--04VcSqKn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnnac3zfbq7qavjv9n3n.png" alt="Image description" width="416" height="78"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Chinese, on the other hand, the preferred position is &lt;code&gt;under right&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KIrxFGXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/er4y9rb6ziym1j1nucfx.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KIrxFGXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/er4y9rb6ziym1j1nucfx.gif" alt="Image description" width="133" height="28"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hey, Blog went to Internationalization concept and quite unexpected. however, Prepare your designs for different languages and writing modes because the World Wide Web is available to everyone in the world. &lt;/p&gt;

&lt;p&gt;Such a little long blog. If you love this blog and feel like getting a new thing today, Then drop a comment and give me a cute heart❤ because it's really lot to me. Thanks for reading!!&lt;/p&gt;

&lt;p&gt;See you on next series👋🏻👋🏻.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>todayilearned</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What is a hash rate and what is its role in mining</title>
      <author>martin tyeman</author>
      <pubDate>Tue, 14 Dec 2021 14:07:57 +0000</pubDate>
      <link>https://dev.to/martintyeman/what-is-a-hash-rate-and-what-is-its-role-in-mining-43k8</link>
      <guid>https://dev.to/martintyeman/what-is-a-hash-rate-and-what-is-its-role-in-mining-43k8</guid>
      <description>&lt;p&gt;New technologies bring new names and terms to market. It is one of the newest technologies available in the Chinese blockchain and cryptocurrency market. The world of cryptocurrency is full of unknown terms. In this article, we want to get acquainted with one of the most important terms in this world. The word hash is one of the most widely used and common terms in this environment. In the following, we intend to get a better view of the Chinese block by answering the question of what is a hash rate.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-hash-rate-criteria-for-measuring-minor-devices"&gt;
  &lt;/a&gt;
  What is the hash rate? Criteria for measuring minor devices
&lt;/h2&gt;

&lt;p&gt;Hash rate or hash power is a measure of the performance of a minor device. In addition to buying and selling different types of digital currencies, many people are also engaged in mining in various types of digital currency exchanges. We need a miner device for mining. A miner device is a device that solves complex network equations. In fact, it is difficult to solve difficult equations for any network activity such as financial transfers. Some people called miners solve these equations with the help of advanced devices. Any miner who can solve the equation sooner will be rewarded from the grid. Therefore, miners are always looking for the most powerful devices for mining. This is where the importance of hash rate comes into play.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hashing-mining-is-getting-harder-day-by-day"&gt;
  &lt;/a&gt;
  Hashing, mining is getting harder day by day
&lt;/h2&gt;

&lt;p&gt;So far we are familiar with the definition of HashRate. The hash rate is not a fixed number. In fact, due to the extraction time of the blocks, the hash rate also increases. In other words, if the hash rate is constant, many people can solve all the equations in the network in a very short time. But the architecture of most digital currencies, especially bitcoin, is designed in such a way that it takes more time to solve the equations each time. Here the hash function shows itself more. In other words, higher hash power makes it more difficult to extract bitcoins and similar currencies. It is interesting to know that like the possibility of digital currency calculator that has made it possible to calculate the conversion of currencies to each other, some sites have made it possible to calculate the economics of mining based on hash at the moment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-is-hash-rate-measured-and-what-is-its-unit"&gt;
  &lt;/a&gt;
  How is hash rate measured and what is its unit?
&lt;/h2&gt;

&lt;p&gt;The hash rate is calculated and measured by a unit called (hash per second). The hash rate can also be divided into larger or smaller units. You can see the hash rate units below:&lt;/p&gt;

&lt;p&gt;1 KH / s or thousand hashes per second; Equivalent to one kilogram per second&lt;br&gt;
1 MH / s or one million hashes per second; Equivalent to one megahertz per second&lt;br&gt;
1 GH / s or one billion hashes per second; Equivalent to one gigabyte per second&lt;br&gt;
1 TH / s or one trillion hashes per second; Equivalent to one per second&lt;br&gt;
1 PH / s or one quadrillion hashes per second; Equivalent to one pt per second&lt;br&gt;
1 EH / s or one quintillion hashes per second; Equivalent to one exhalation per second&lt;br&gt;
Hash rate, reward and difficulty of extraction, mining profitability trio&lt;br&gt;
When we go to mining, we come across a triangular triangle. Hash rate, miners' reward and difficulty level are three interrelated factors. In other words, as the hash rate increases, so does the degree of difficulty. In this situation, the miners compete fiercely to solve the equations. As a result, it becomes more difficult to receive rewards. This is true of all Chinese blocks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-hash-the-most-important-criterion-for-buying-a-mining-device"&gt;
  &lt;/a&gt;
  Is hash the most important criterion for buying a mining device?
&lt;/h2&gt;

&lt;p&gt;Hash is just one of the many key factors in the profitability of the mining industry. In addition to hash power, power consumption and device price are also important factors in mining profitability. In the bitcoin mining industry, for example, the more hashes a device has, the more likely it is to solve the equation. We suggest that you refer to the Lightcoin purchase page before continuing the article and to get acquainted with digital currencies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-3-devices-with-high-hash-rate-for-mining"&gt;
  &lt;/a&gt;
  Introducing 3 devices with high hash rate for mining
&lt;/h2&gt;

&lt;p&gt;After getting acquainted with mining and hash rate correction, we have a look at the most famous mining devices. Of course, as we mentioned, hash rate is not just a good criterion for choosing a mining device. But it can help those interested in the mining industry to choose the right device. The choice of mining device also depends on the type of mining currency. In other words, some devices are built solely to extract bitcoin or atrium. Just as you can not convert it into another currency when buying Tetra. Devices designed to extract a type of china block cannot be modified.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-bitcoin-main-miner-s17-plus-flag-bearer-of-bit-main"&gt;
  &lt;/a&gt;
  1- Bitcoin Main Miner S17 Plus, flag bearer of Bit main
&lt;/h3&gt;

&lt;p&gt;The Main Ant Meyer S17 is considered to be the flagship of Bitcoin. With this in mind, it is clear that the manufacturer has laid the foundation stone for this device. BitMine EntS 17 Plus has a power equal to 73 terraces. Of course, power consumption above 2920 watts along with the price of $ 2600 has made this device one of the most expensive devices on the market.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-innosilicon-t3-plus-the-hope-of-the-mining-industry"&gt;
  &lt;/a&gt;
  2- Innosilicon T3 Plus, the hope of the mining industry
&lt;/h3&gt;

&lt;p&gt;The well-known company Innosilicon has marked the line with all its competitors by offering the Innosilicon T3 Plus device. Specifications such as 53-watt power along with 2100 watts of power consumption have put this device on the shopping list of many of the world's major miners.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-watts-miner-m20s-an-attractive-product-from-an-emerging-company"&gt;
  &lt;/a&gt;
  3- Watts Miner M20S, an attractive product from an emerging company
&lt;/h3&gt;

&lt;p&gt;MicroBT does not have a long life in the mining industry. The company's M20 Miner with 68-horsepower power along with low weight and relatively low price of $ 1890 shows the company's high determination to expand its market. This device can be used more for personal miners.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hash-rate-the-mysterious-world-and-the-secret-of-mining"&gt;
  &lt;/a&gt;
  Hash rate, the mysterious world and the secret of mining
&lt;/h2&gt;

&lt;p&gt;In this article, we tried to get acquainted with the world of mining in the form of what is a hash rate question. The term hash rate is more commonly used in the mining industry. The world of mining has become a world full of mysteries due to the complexity of equations, the variability of rewards. Of course, this fascinating world is not for everyone. In other words, entering this field is suitable for those who are fully acquainted with technical issues and the world of cryptocurrency. The market for buying and selling digital currencies is a more appropriate and sensible way to operate and invest.&lt;/p&gt;

</description>
      <category>blockchain</category>
    </item>
    <item>
      <title>34 Tips for Professional JavaScript Developers</title>
      <author>Michael Mangialardi</author>
      <pubDate>Tue, 14 Dec 2021 14:06:42 +0000</pubDate>
      <link>https://dev.to/michaelmangial1/34-tips-for-professional-javascript-developers-37la</link>
      <guid>https://dev.to/michaelmangial1/34-tips-for-professional-javascript-developers-37la</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-this-article-all-about"&gt;
  &lt;/a&gt;
  What is this article all about?
&lt;/h2&gt;

&lt;p&gt;It might be easier to begin by saying what it's &lt;em&gt;not&lt;/em&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;This is &lt;strong&gt;not an enumeration of tips and tricks to land your first job&lt;/strong&gt; (there is already plenty of stuff on that topic).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is &lt;strong&gt;not a list of professional "networking" skills&lt;/strong&gt; (I find that stuff boring, no offense).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is &lt;strong&gt;not an aggregation of purely technical advice&lt;/strong&gt; (because the role of a JavaScript developer is not purely technical).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Rather, I want to dish out practical advice for what to do when you've already landed your first gig.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In short, I want you to be feel motivated, driven, and confident in &lt;strong&gt;answering the simple question of "what's next?"&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-journey"&gt;
  &lt;/a&gt;
  The Journey
&lt;/h2&gt;

&lt;p&gt;Specifically, I want to provide an answer to that important question beginning at the start of a new job, and then work our way from there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-disclaimer"&gt;
  &lt;/a&gt;
  A Disclaimer
&lt;/h2&gt;

&lt;p&gt;JavaScript is a broad enterprise, and there are so many different niches (and therefore positions) that one may find themself in.&lt;/p&gt;

&lt;p&gt;I cannot possibly cover practical advice at that scale. Therefore, I will assume a specific scenario.&lt;/p&gt;

&lt;p&gt;Even if said scenario does not describe your situation, I still hope the advice can be practical and helpful in a general sense.&lt;/p&gt;

&lt;p&gt;I'll leave it to the reader to adopt and mold the advice to their specific circumstances.&lt;/p&gt;

&lt;p&gt;With that aside, let's end this introduction and get started already.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ok-i-got-my-first-jobnow-what"&gt;
  &lt;/a&gt;
  Ok, I got my first job...now what?
&lt;/h2&gt;

&lt;p&gt;You're now a JavaScript developer writing code for a web application product.&lt;/p&gt;

&lt;p&gt;You work with a group of developers, some more frontend-focused and some more backend-focused.&lt;/p&gt;

&lt;p&gt;You have a software developer manager that you check in with once a week.&lt;/p&gt;

&lt;p&gt;There's also a product team composed of a Product Manager, UI/UX Designer, and a Technical Product Manager.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-1"&gt;
  &lt;/a&gt;
  Tip #1
&lt;/h3&gt;

&lt;p&gt;You were hired for a reason. Remember that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-2"&gt;
  &lt;/a&gt;
  Tip #2
&lt;/h3&gt;

&lt;p&gt;You don't impress peers with your technical skills.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-3"&gt;
  &lt;/a&gt;
  Tip #3
&lt;/h3&gt;

&lt;p&gt;Make your first career milestone being able to complete assigned work with minimal help (but initiate asking questions until you get there).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-4"&gt;
  &lt;/a&gt;
  Tip #4
&lt;/h3&gt;

&lt;p&gt;Read PRs of more experienced PRs and learn from them (even if you weren't assigned to do the review).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-5"&gt;
  &lt;/a&gt;
  Tip #5
&lt;/h3&gt;

&lt;p&gt;Be yourself. A personable teammate is a very attractive quality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-6"&gt;
  &lt;/a&gt;
  Tip #6
&lt;/h3&gt;

&lt;p&gt;Expect long code review feedback cycles. That's normal in this stage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alright-i-can-complete-tasks-with-minimal-helpwhats-next"&gt;
  &lt;/a&gt;
  Alright, I can complete tasks with minimal help...what's next?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#tip-7"&gt;
  &lt;/a&gt;
  Tip #7
&lt;/h3&gt;

&lt;p&gt;Make it your next milestone to complete assigned work with better efficiency.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-8"&gt;
  &lt;/a&gt;
  Tip #8
&lt;/h3&gt;

&lt;p&gt;Improve efficiency by paying attention to common points made when others review your code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-9"&gt;
  &lt;/a&gt;
  Tip #9
&lt;/h3&gt;

&lt;p&gt;Improve efficiency by targeting and resolving bottlenecks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-10"&gt;
  &lt;/a&gt;
  Tip #10
&lt;/h3&gt;

&lt;p&gt;Remember that, in part, improving efficiency just takes experience (which takes time).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alright-i-can-complete-tasks-with-improved-efficientnow-i-should-"&gt;
  &lt;/a&gt;
  Alright, I can complete tasks with improved efficient...now I should ____?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#tip-11"&gt;
  &lt;/a&gt;
  Tip #11
&lt;/h3&gt;

&lt;p&gt;Make it your next milestone to improve the quality of your code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-12"&gt;
  &lt;/a&gt;
  Tip #12
&lt;/h3&gt;

&lt;p&gt;Get very good at providing thorough code reviews.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-13"&gt;
  &lt;/a&gt;
  Tip #13
&lt;/h3&gt;

&lt;p&gt;Always take time refactor your code after you get it working, &lt;a href="https://www.michaelmang.dev/blog/how-to-help-someone-else-review-your-code"&gt;making your code easy to review&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-14"&gt;
  &lt;/a&gt;
  Tip #14
&lt;/h3&gt;

&lt;p&gt;Write &lt;a href="https://gist.github.com/wojteklu/73c6914cc446146b8b533c0988cf8d29"&gt;clean code&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-15"&gt;
  &lt;/a&gt;
  Tip #15
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.michaelmang.dev/blog/use-the-source-luke"&gt;Get comfortable with reading open source code&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-16"&gt;
  &lt;/a&gt;
  Tip #16
&lt;/h3&gt;

&lt;p&gt;Imitate patterns found in open source code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-17"&gt;
  &lt;/a&gt;
  Tip #17
&lt;/h3&gt;

&lt;p&gt;Imitate patterns found in your codebase.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-18"&gt;
  &lt;/a&gt;
  Tip #18
&lt;/h3&gt;

&lt;p&gt;Do pair code reviews.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#im-writing-cleaner-code-so-i-should-focus-on-next"&gt;
  &lt;/a&gt;
  I'm writing cleaner code so I should focus on ____ next?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#tip-19"&gt;
  &lt;/a&gt;
  Tip #19
&lt;/h3&gt;

&lt;p&gt;Make it your next milestone to help improve the team's efficiency and culture.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-20"&gt;
  &lt;/a&gt;
  Tip #20
&lt;/h3&gt;

&lt;p&gt;Initiate meetings to help developers focus on professional development (I've always liked the format of doing a &lt;a href="https://www.michaelmang.dev/blog/code-show-and-tell"&gt;show-and-tell where developers can shared a recent thing they've learned&lt;/a&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-21"&gt;
  &lt;/a&gt;
  Tip #21
&lt;/h3&gt;

&lt;p&gt;Observe and address bottlenecks in the review and deployment process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-22"&gt;
  &lt;/a&gt;
  Tip #22
&lt;/h3&gt;

&lt;p&gt;Observe and address recurring bottlenecks in project planning and execution.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-24"&gt;
  &lt;/a&gt;
  Tip #24
&lt;/h3&gt;

&lt;p&gt;Initiate suggestions for better coding patterns and technologies.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-24"&gt;
  &lt;/a&gt;
  Tip #24
&lt;/h3&gt;

&lt;p&gt;Initiate trying &lt;a href="https://www.michaelmang.dev/blog/how-to-energize-your-developer-experience-with-a-powerlifting-technique"&gt;different ways of thinking and working&lt;/a&gt; (i.e. pair on all code reviews for one project).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-25"&gt;
  &lt;/a&gt;
  Tip #25
&lt;/h3&gt;

&lt;p&gt;Aim for initiating one technology improvement and alternative way of working for each project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-26"&gt;
  &lt;/a&gt;
  Tip #26
&lt;/h3&gt;

&lt;p&gt;Observe and address needs for greater emphasis on career development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-27"&gt;
  &lt;/a&gt;
  Tip #27
&lt;/h3&gt;

&lt;p&gt;Observe and address needs for greater ways to motivate developers besides completing a project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-28"&gt;
  &lt;/a&gt;
  Tip #28
&lt;/h3&gt;

&lt;p&gt;Observe and address needs for greater ways to have fun as a team.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#im-clearly-becoming-a-tech-leader-i-also-should-"&gt;
  &lt;/a&gt;
  I'm clearly becoming a tech leader, I also should ____?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#tip-29"&gt;
  &lt;/a&gt;
  Tip #29
&lt;/h3&gt;

&lt;p&gt;Make &lt;a href="https://dev.to/michaelmangial1/3-not-so-obvious-ways-to-stand-out-on-a-product-team-as-a-developer-2d20"&gt;providing input during product meetings&lt;/a&gt; as high a priority in your role as writing code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-30"&gt;
  &lt;/a&gt;
  Tip #30
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.michaelmang.dev/blog/the-developers-content-model"&gt;Share your learnings with a broader audience using a developer's content model&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-31"&gt;
  &lt;/a&gt;
  Tip #31
&lt;/h3&gt;

&lt;p&gt;Focus on a niche interest/skill in your realm of development and get really good at it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-32"&gt;
  &lt;/a&gt;
  Tip #32
&lt;/h3&gt;

&lt;p&gt;Work on side projects that sharpen your niche skill.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-33"&gt;
  &lt;/a&gt;
  Tip #33
&lt;/h3&gt;

&lt;p&gt;Stay up to date with latest trends in the industry (via Twitter, &lt;a href="https://click.convertkit-mail4.com/5qu696q3o8h7h4xwpkf6/3ohphduqzrmk5lhr/aHR0cHM6Ly9ieXRlcy5kZXY_eD00Nzg2Njg5MjM="&gt;Bytes&lt;/a&gt;, Dev.to, newsletters, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip-34"&gt;
  &lt;/a&gt;
  Tip #34
&lt;/h3&gt;

&lt;p&gt;Outwork everyone.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>career</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Making a rain animation with WebGL shaders in Three.js.</title>
      <author>NordicBeaver</author>
      <pubDate>Tue, 14 Dec 2021 13:46:39 +0000</pubDate>
      <link>https://dev.to/nordicbeaver/making-rain-animation-with-webgl-shaders-in-threejs-4ic5</link>
      <guid>https://dev.to/nordicbeaver/making-rain-animation-with-webgl-shaders-in-threejs-4ic5</guid>
      <description>&lt;p&gt;I made a small shader that resembles rain on a window. You can try it &lt;a href="https://rain-shader.nordicbeaver.io/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Check out the full code here:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/NordicBeaver"&gt;
        NordicBeaver
      &lt;/a&gt; / &lt;a href="https://github.com/NordicBeaver/rain-shader"&gt;
        rain-shader
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;The most interesting part is the fragment shader, where the magic happens. I tried to add some comments, so it's easier to read.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight glsl"&gt;&lt;code&gt;&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="kt"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;uvInterpolator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;uniform&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;u_time&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;uniform&lt;/span&gt; &lt;span class="kt"&gt;sampler2D&lt;/span&gt; &lt;span class="n"&gt;u_texture&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Generate a random float from a single input and seed.&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nf"&gt;Random11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputValue&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;345&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;456&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Generate a random float from a 2d input and seed.&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nf"&gt;Random21&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;vec2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;456&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Generate drops as distortions, that can be applied to UV coordinates&lt;/span&gt;
&lt;span class="kt"&gt;vec2&lt;/span&gt; &lt;span class="nf"&gt;Drops&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;uv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Randmply move everything&lt;/span&gt;
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;shiftY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Random11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;uv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;shiftY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Split UV spac into cells. Each cell will contain a drop.&lt;/span&gt;
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;cellsResolution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;uv&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;cellsResolution&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Move each row randomly.&lt;/span&gt;
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;rowIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;shiftX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Random11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rowIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;uv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;shiftX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kt"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;cellIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;cellUv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kt"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;cellCenter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;vec2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;distanceFromCenter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cellUv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cellCenter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// We don't want to show every drop. So randomly remove some of them.&lt;/span&gt;
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;isDropShown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Random21&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cellIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;14244&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;324&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="c1"&gt;// Decrease each drop intensity with time. Then make it appear again.&lt;/span&gt;
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;dropIntensity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;fract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u_time&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Random21&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cellIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;32132&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;432&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;dropIntensity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dropIntensity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dropIntensity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dropIntensity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dropIntensity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dropIntensity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;dropIntensity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dropIntensity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// We only need results from inside a specefec radius of a drop.&lt;/span&gt;
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;isInsideDrop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;distanceFromCenter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kt"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;vecToCenter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cellCenter&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;cellUv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Drop value is a vector to the center that increases with distance form it.&lt;/span&gt;
  &lt;span class="kt"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;dropValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vecToCenter&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;distanceFromCenter&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;distanceFromCenter&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kt"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;drop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dropValue&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;isInsideDrop&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;isDropShown&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dropIntensity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;uv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uvInterpolator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Run the Drop function 10 times to create seemingly random pattern.&lt;/span&gt;
  &lt;span class="kt"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;drops&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;vec2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;drops&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;Drops&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42424&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;12313&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;432&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Distort UV.&lt;/span&gt;
  &lt;span class="n"&gt;uv&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;drops&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Sample the texture after distorting the UV space.&lt;/span&gt;
  &lt;span class="kt"&gt;vec4&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;texture2D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u_texture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nb"&gt;gl_FragColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, all I do is generate drops at random positions. For every pixel around the drop I then calculate how much I need to distort the background. And then I apply the distortion to the UV space and sample the texture with the updated coordinates.&lt;/p&gt;

&lt;p&gt;It's way easier to explain visually, so I made a video of the whole process of making this.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Rl3clbrsI40"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>threejs</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
