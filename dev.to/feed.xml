<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>A better way to learn coding online</title>
      <author>ùôπùöäùöúùöòùöó ùôªùöéùöòùö† üë®üèª‚Äçüíª</author>
      <pubDate>Thu, 23 Sep 2021 23:06:55 +0000</pubDate>
      <link>https://dev.to/jasonleowsg/a-better-way-to-learn-coding-online-4kep</link>
      <guid>https://dev.to/jasonleowsg/a-better-way-to-learn-coding-online-4kep</guid>
      <description>&lt;p&gt;I‚Äôd been taking online tutorial courses on &lt;a href="https://vueschool.io/"&gt;Vue School&lt;/a&gt;, to learn the fundamentals of Vue.js and Nuxt. As I go through it, I realised there‚Äôs a few things I fell into doing along the way that helps with my learning. There‚Äôs a certain structure that helped me learned 10x better. This is as much a note to self as it is for others who might be trying to pick up coding via online classes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Build your semantic tree&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Read through the whole course first, without watching the videos. Get a sense of what‚Äôs being covered, even if I don‚Äôt quite understand the technical terms yet. This helps build up a rough semantic tree where I can hang the more specific bits later on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Watch the entire video first ‚Äì no coding yet&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At the start of each video tutorial, watch through the entire video once, without typing any code. I didn‚Äôt used to do this, and would jump right in into coding as the tutorial progressed, starting and stopping the video so that my typing can catch up. That broke the flow and didn‚Äôt aid my understanding of why I‚Äôm typing the stuff I‚Äôm typing. Better to watch it through beforehand, so that I understand the starting and ending points better, what we‚Äôre trying to achieve, and the coding would make more sense as I type. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Watch &amp;amp; type, blow-by-blow ‚Äì no copy-paste&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Next, type as the tutor explains and types on the video. Yes, do not download or copy-paste the code provided in the class materials. This forces you to type out character by character, and to start getting used to the syntax. This also make you start to look out for idiosyncrasies of the syntax, like forgetting commas or semi-colons. I used to pre-download the code, and without the blow-by-blow typing, it hindered my learning more than helped.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Inline code comments are your class notes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Leave comments in the code as you type along. The tutor will share why he‚Äôs typing certain things, what this method/directives are for, how the syntax works. Try to type it above each line of code, as much as possible, especially the parts which are new and unfamiliar. The commentary will serve as your class notes. It also helps you break out of a monkey-see-monkey-do mode of blinding copy-typing away, let‚Äôs you take a step back to reflect on what you just did. It‚Äôs slow yes‚Äîa ten minute tutorial can take an hour maybe‚Äîbut it ensures quality learning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Google to reduce ‚Äòleakiness‚Äô&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Along the way, he‚Äôs going to gloss over something or do something which you didn‚Äôt understand, or questions pop up in your head. Feel free to stop and go google it to understand more first before proceeding. That way, your knowledge will be less ‚Äòleaky‚Äô. But sometimes it gets annoying because googling mid-way through the tutorial might mean you get distracted and wander too deep into the internet rabbit hole, potentially spending even more time on the tutorial, breaking your momentum. When that happens, I try to quickly google a question and leave the tab there for further learning after I‚Äôm done with the tutorial.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Make it public and share&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finish the tutorial and save your code in a separate file, so that you can see the progress from one stage to another. I like to code them on Codepen, so that it‚Äôs public and shareable ‚Äìnot just for showing off, but also to send it to mentors to ask for help or ask them to comment on what your code quality.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Any other tips to learn better?&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;Follow my daily writings on &lt;a href="https://golifelog.com/goals/30"&gt;Lifelog&lt;/a&gt;, where I write about learning to code, goals, productivity, indie hacking and tech for good.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>decodingcoding</category>
    </item>
    <item>
      <title>7 UI Design Fundamentals for Developers</title>
      <author>vansh bhardwaj</author>
      <pubDate>Thu, 23 Sep 2021 23:01:13 +0000</pubDate>
      <link>https://dev.to/vansh__bhardwaj/7-ui-design-fundamentals-for-developers-57hg</link>
      <guid>https://dev.to/vansh__bhardwaj/7-ui-design-fundamentals-for-developers-57hg</guid>
      <description>&lt;p&gt;Hello everyone, my name is Vansh and I'm a frontend developer. A lot of people have asked me this question,"Do I need to learn design to be Front end developer?"&lt;/p&gt;

&lt;p&gt;Before I answer this question first you need to understand that many companies do have in-house UX/UI designers, who will do the designing part and build mockups while you can concentrate on the development part. It's our task to give life to mockups, to make them interactive. &lt;/p&gt;

&lt;p&gt;But what if you don't have a designer or you're building some side project for yourself,  and when you have one, they're not always available because they have a lot of work or maybe if some mockups are missing.&lt;br&gt;
So you cannot always be dependent on a designer to make minor changes to the design as well.&lt;br&gt;
And you having a design sense is of considerable value for you and your team.&lt;/p&gt;

&lt;p&gt;See I'm not saying you need to be a designer nor we are here to replace them. &lt;br&gt;
But it wouldn't hurt for you to pick up some designing skills as well.&lt;br&gt;
And it definitely helps to have a creative eye and develop knowledge esthetics.&lt;/p&gt;

&lt;p&gt;So in this blog post, I'm going to share how you can build interfaces/apps that look good by just following these 7 UI fundamentals.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's Jump in!&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;White space&lt;/li&gt;
&lt;li&gt;Color&lt;/li&gt;
&lt;li&gt;Contrast&lt;/li&gt;
&lt;li&gt;Scale&lt;/li&gt;
&lt;li&gt;Alignment&lt;/li&gt;
&lt;li&gt;Typography&lt;/li&gt;
&lt;li&gt;Visual Hierarchy&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#1-white-space"&gt;
  &lt;/a&gt;
  1. White Space
&lt;/h3&gt;

&lt;p&gt;The first UI fundamental we are going to discuss is the white space.&lt;/p&gt;

&lt;p&gt;White space is the empty space between the elements in your UI.&lt;br&gt;
it's just a void of space but that gives your UI a structure.&lt;/p&gt;

&lt;p&gt;let's look at an example&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KC8AWxtv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632435665300/xAYev0Pcy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KC8AWxtv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632435665300/xAYev0Pcy.png" alt="whispa.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;we can see the right side container is much more readable and looks good from the left container.&lt;/p&gt;

&lt;p&gt;By using just 3 CSS properties, padding, margin and line-height, you can significantly improve the appearance of your text.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-alignment"&gt;
  &lt;/a&gt;
  2. Alignment
&lt;/h3&gt;

&lt;p&gt;Alignment is the process of ensuring that every element is positioned correctly in relation to other elements.&lt;/p&gt;

&lt;p&gt;Visual alignment is one of the foundations of design, we humans prefer visually aligned objects.&lt;/p&gt;

&lt;p&gt;First, let's look at this UI&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lB_Xk8_t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632436196898/WGRZB8kno.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lB_Xk8_t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632436196898/WGRZB8kno.png" alt="ali1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can see here are 4 elements, logo, headline, text and button,&lt;br&gt;
and they all seem to be off a little bit in terms of their alignment.&lt;/p&gt;

&lt;p&gt;Again, with just 3 properties: margin, transform and text-align we can solve this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H8vUxyIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632436210916/Ry7xUF9vj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H8vUxyIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632436210916/Ry7xUF9vj.png" alt="ali2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;we can see now it looks much better because everything is aligned properly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-contrast"&gt;
  &lt;/a&gt;
  3. Contrast
&lt;/h3&gt;

&lt;p&gt;Contrast is defined as being in a 'strikingly' different state from something else.&lt;br&gt;
While building UIs we should keep in mind if users can clearly see and distinguish all the necessary details on the screen or page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8FaT8tMx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632436227298/maLJdQ1KE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FaT8tMx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632436227298/maLJdQ1KE.png" alt="contra1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Look at the first image where there is a grey subheading and grey text on a button, we can see there is hardly any contrast from the background, it's hard to read text, especially on the button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qdDnhSM---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632436240454/w8g6eVcxD8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qdDnhSM---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632436240454/w8g6eVcxD8.png" alt="contra2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now if we increase the contrast, using a darker color for text and white on top of the button, we can see it's much more readable.&lt;/p&gt;

&lt;p&gt;Lack of readability can be a serious reason why users are not retained even with attractive products.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-scale"&gt;
  &lt;/a&gt;
  4. Scale
&lt;/h3&gt;

&lt;p&gt;Scale is the size of elements that must be carefully considered. Leveraging the scale of different elements, you can greatly improve a design.&lt;/p&gt;

&lt;p&gt;Let's look at this example, we can work on the scale on this UI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2UrA2d1o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632437165369/ZGAau0uOC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2UrA2d1o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632437165369/ZGAau0uOC.png" alt="scale1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First of all, cards are too small for this given layout. Also, there isn't much difference between headline and subheadline beneath it. Also, we can increase the size of the Hex color code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h_ShZwHd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632436412252/h85kFOytc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h_ShZwHd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632436412252/h85kFOytc.png" alt="Screenshot_2021-09-24_01-27-28.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In our second UI, our cards look much more filled out and better with the space around them, we also increased the size of the heading and subheading and it looks much better than the previous.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-typography"&gt;
  &lt;/a&gt;
  5. Typography
&lt;/h3&gt;

&lt;p&gt;Typography isn't just the font but it is the art that involves arranging a typeface in various combinations of font, size, and spacing. &lt;/p&gt;

&lt;p&gt;Typography requires the understanding of other fundamentals, along with a few other considerations like how to effectively choose fonts, their size, spacing and a few more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b3r470sK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632436427126/MseYVWrpZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b3r470sK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632436427126/MseYVWrpZ.png" alt="typo1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we look at our first UI, we can see there's a lot going wrong in terms of typography. First, there are 3 fonts used which are unnecessary. second, we are not really sure where to look at or which text is really important so we need to fix the scale as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dVIqlaNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632436438111/BTJ0i9qZa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dVIqlaNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632436438111/BTJ0i9qZa.png" alt="typo2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In our second UI, we are sticking to just 1 font family, increased the font size of headings and decreased the size of cite that is 'John Doe' which is not really important and now it looks so much better.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-color"&gt;
  &lt;/a&gt;
  6. Color
&lt;/h3&gt;

&lt;p&gt;Color is the first UI design fundamental that shapes the user's experience.&lt;br&gt;
If you go to any website or app before you're able to process and even read anything your eyes are exposed to the colors, so color in terms of UI design is extremely important.&lt;/p&gt;

&lt;p&gt;Different colors can have different meanings like green for instance can be associated with growth and wealth, red with loss or warmth, black for elegance and luxury and so on and so forth. &lt;/p&gt;

&lt;p&gt;Before building UI be aware of your target audience for this particular app and what you need to project eliciting emotions&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KQm6EpA1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632436452688/4z8GAn3Sx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KQm6EpA1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632436452688/4z8GAn3Sx.png" alt="color.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another thing you should focus is on avoiding a bunch of colors in your UI design. Too many color destroy the quality of UI. Also, avoid colors that don't work well with each other and don't complement each other well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-visual-hierarchy"&gt;
  &lt;/a&gt;
  7. Visual Hierarchy
&lt;/h3&gt;

&lt;p&gt;Every element on a user interface has a level of importance. Some elements are more important than others. Visual hierarchy is how you establish this importance. The way we do it is by utilizing the above UI fundamentals that we have discussed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UwLxYIpc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632436473342/w1L7kshFB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UwLxYIpc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632436473342/w1L7kshFB.png" alt="vishe.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we look at this UI, this lacks visual hierarchy as we are not really sure where to look at first and our call-to-action button lacks enough contract as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aL6S-JO_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632436484166/Eqk4-CSAs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aL6S-JO_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632436484166/Eqk4-CSAs.png" alt="vihei2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fixing this by scaling our heading and making call-to-action stand out, we have improved the visual hierarchy&lt;br&gt;
Looks better than before? Right?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  conclusion
&lt;/h3&gt;

&lt;p&gt;There isn't one UI fundamental that is more important than the other.&lt;br&gt;
They are all equally important in order to get the design right. If the design is lacking in one of these areas, it's really easy to notice that something is not quite right with the quality of the design.&lt;br&gt;
So be sure to think about all these fundamentals the next time you need to build a user interface.&lt;/p&gt;

&lt;p&gt;Good luck&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/vansh__bhardwaj"&gt;Twitter&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/vansh1999"&gt;GitHub&lt;/a&gt; &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>design</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>Announcing the First Wave of XRPL Grants</title>
      <author>Elliot Lee</author>
      <pubDate>Thu, 23 Sep 2021 22:52:34 +0000</pubDate>
      <link>https://dev.to/ripplexdev/announcing-the-first-wave-of-xrpl-grants-1hf9</link>
      <guid>https://dev.to/ripplexdev/announcing-the-first-wave-of-xrpl-grants-1hf9</guid>
      <description>&lt;p&gt;We‚Äôre excited to announce the inaugural awardees of &lt;a href="https://xrplgrants.org/"&gt;XRPL Grants&lt;/a&gt;, presented by RippleX with XRPL Labs as a technical advisor. The XRPL Grants Program provides funding to independent developers building a variety of self-selected projects that leverage the XRP Ledger‚Äôs open-source technology and further accelerate the Internet of Value. The program welcomes applications from any project that builds on the &lt;a href="http://xrpl.org"&gt;XRP Ledger&lt;/a&gt; (XRPL) and involves some technical development.&lt;/p&gt;

&lt;p&gt;For the first wave of the XRPL Grants Program, we invited applicants to apply with any open-source project built on the XRPL and particularly encouraged projects focused on the development of non-fungible tokens (NFTs). &lt;/p&gt;

&lt;p&gt;In this wave, more than 100 grant proposals were submitted, and from this incredible batch of applicants, 25 grantees have been awarded nearly $2 million in total value. Among the grantees are individual developers and teams from more than 10 countries around the world. We're also proud to award three grants to applicants from within Ripple‚Äôs &lt;a href="https://ubri.ripple.com"&gt;University Blockchain Research Initiative&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Inaugural grantee projects tackle a wide range of problems and opportunities, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The development of NFTs for multiple industries (retail, art, music, sports, digital advertising and carbon capture)&lt;/li&gt;
&lt;li&gt;Learning tools and platforms to build on and interact with the XRPL&lt;/li&gt;
&lt;li&gt;Data visualization tools&lt;/li&gt;
&lt;li&gt;Payment and security solutions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can learn more about the Wave 1 grantees on the &lt;a href="http://www.xrplgrants.org/grantees"&gt;XRPL Grantees page&lt;/a&gt;, at XRPL-related events‚Äîincluding &lt;a href="https://apexdevsummit.com/"&gt;Apex: The XRPL Developer Summit&lt;/a&gt;‚Äîand on the &lt;a href="http://twitch.tv/ripplexdev"&gt;RippleXDev Twitch channel&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The XRP Ledger is an open platform, and it is not necessary to apply for a grant in order to build on the XRPL. However, information regarding the application window for the next round of grants will be posted on &lt;a href="https://xrplgrants.org/"&gt;XRPLGrants.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;üéâ &lt;a href="http://www.xrplgrants.org/grantees"&gt;XRPL Grants - Wave 1 Awardees&lt;/a&gt; üéâ&lt;/p&gt;

&lt;p&gt;Let us know if you have any questions or thoughts in the comments right here!&lt;/p&gt;

</description>
      <category>xrplgrants</category>
      <category>xrpl</category>
      <category>blockchain</category>
      <category>opensource</category>
    </item>
    <item>
      <title>What skills do career indie developers not learn (vs those employed mostly on teams)</title>
      <author>Ben Halpern</author>
      <pubDate>Thu, 23 Sep 2021 22:32:45 +0000</pubDate>
      <link>https://dev.to/ben/what-skills-do-career-indie-developers-not-learn-vs-those-employed-mostly-on-teams-485j</link>
      <guid>https://dev.to/ben/what-skills-do-career-indie-developers-not-learn-vs-those-employed-mostly-on-teams-485j</guid>
      <description>&lt;p&gt;Looking forward to the discussion.&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>career</category>
    </item>
    <item>
      <title>How to glitch video in the age of web</title>
      <author>Jakub Kopa≈Ñko</author>
      <pubDate>Thu, 23 Sep 2021 22:19:11 +0000</pubDate>
      <link>https://dev.to/pcktm/how-to-glitch-video-files-in-the-age-of-web-6a8</link>
      <guid>https://dev.to/pcktm/how-to-glitch-video-files-in-the-age-of-web-6a8</guid>
      <description>&lt;p&gt;&lt;em&gt;The tool described in this post is available at &lt;a href="https://ezglitch.kopanko.com/?mtm_campaign=dev.to"&gt;ezglitch.kopanko.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For years I've been interested in datamoshing and glitch art, but mainly for the computer aspect of it, like, you know, you edit some parts of the file, and it plays differently? How cool is that, right?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3qiteTNM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a71xhpf9u48m2kidroet.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3qiteTNM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a71xhpf9u48m2kidroet.gif" alt="one of the resulting videos"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But if you wanted to get into glitching, there's an obvious barrier! Most tutorials rely on old and buggy software or require you to download countless environments and tools onto your computer! Some people argue that if you don't do it with buggy software, it ain't &lt;em&gt;glitch&lt;/em&gt;-art at all!&lt;/p&gt;

&lt;p&gt;In the past, I have had made my own tools to break files for me, like &lt;a href="https://github.com/pcktm/glitchbox-cli"&gt;glitchbox&lt;/a&gt;, which was basically a JavaScript interface to &lt;a href="https://ffglitch.org/"&gt;ffglitch&lt;/a&gt; (back when it had none), always trying to make things as easy as possible for the end-user.&lt;/p&gt;

&lt;p&gt;So, one evening, I sat down and set on rewriting my go-to AVI glitching tool, &lt;a href="https://github.com/itsKaspar/tomato"&gt;tomato&lt;/a&gt; for the web. Let me start by explaining how the AVI file is actually constructed. AVI files consist of three basic parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hdrl buffer - a header of sorts that contains data on the total amount of frames, width, and height of the video, and so on.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;movi buffer&lt;/strong&gt; - this is the part we actually care about as it contains raw frame data.&lt;/li&gt;
&lt;li&gt;idx1 buffer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, the frames in the movi buffer are arranged as they will be played by the player. I-frames (stills) start with the string &lt;code&gt;01wb&lt;/code&gt; and b-frames (motion) with &lt;code&gt;00dc&lt;/code&gt;. They end just before the following such tag or just before the &lt;code&gt;idx1&lt;/code&gt; buffer tag.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OFIuvKM---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e48ban3j37k6ajcp4afn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OFIuvKM---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e48ban3j37k6ajcp4afn.png" alt="actual data illustrated"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the fun part - if we rearrange or copy those frames around, the player will play them right as it sees them. We don't need to know the exact structure of the frame, its DCT coefficients, or some other complicated technical stuff - we just need to be able to move bytes around! Fortunately for us, that is entirely possible in modern browsers!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arrayBuffer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;moviBuffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;moviMarkerPos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;idx1MarkerPos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have the entire &lt;code&gt;movi&lt;/code&gt; buffer, we need to construct a frame table. We use some &lt;a href="https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string-search_algorithm"&gt;string-search algorithm&lt;/a&gt; to find all occurrences of &lt;code&gt;00dc&lt;/code&gt; or &lt;code&gt;01wb&lt;/code&gt; in the buffer - that marks the beginning of every frame.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// this is just "00dc" in hexadecimal&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mh"&gt;0x30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x63&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;indices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BoyerMoore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;findIndexes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;moviBuffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bframes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;indices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;video&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;}});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We do the same thing to I-frames, combine the two, and sort them based on their index. Then, we need to get each frame's byte size (which will come in very handy in a moment):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;moviBuffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;byteLength&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This has been a pretty linear and dull process so far, but now we get to have some genuine fun - we get to come up with a function to mess with the frames! Let's do the simplest thing and just reverse the whole array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;final&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;final&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will, obviously, make the video play backward, but since the frames encoding motion do not take this into account we effectively flipped the motion vectors inside them, which in turn leads to a very odd effect in playback. Keep in mind the frames are still valid, and their data hasn't changed - just their order inside the file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9K1j_IOq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmluuyb0mzn6m7pbqpml.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9K1j_IOq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmluuyb0mzn6m7pbqpml.png" alt="illustration of frame order inside the movi tag"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OK, so that's it? Well, not yet. We still need to reconstruct the new movi buffer from the frame table and combine it with hdrl and idx1 buffers. How do we approach it? &lt;/p&gt;

&lt;p&gt;The best way to do it is to get the final size of the movi buffer and allocate that much memory beforehand so that we don't ever have to resize our &lt;code&gt;Uint8Array&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;expectedMoviSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;final&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;expectedMoviSize&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="nx"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wait, why &lt;code&gt;expectedMoviSize = 4&lt;/code&gt;? Well, now we initialize the TypedArray with the final size and set the first 4 bytes to the &lt;code&gt;movi&lt;/code&gt; tag itself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;finalMovi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expectedMoviSize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;finalMovi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mh"&gt;0x6D&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x6F&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x76&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x69&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the final stretch - for every frame in the frame table, we read the data from the original file and write it at the correct offset in the final movi tag. We advance the head by the frame bytesize so that the frames are written sequentially.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// guess why we start at 4&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;frame&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;final&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;moviBuffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;finalMovi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now all there's left is to recombine it with the original &lt;code&gt;hdrl&lt;/code&gt; and &lt;code&gt;idx1&lt;/code&gt; and we're done!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hdrlBuffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;byteLength&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;finalMovi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;byteLength&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;idx1Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;byteLength&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hdrlBuffer&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;finalMovi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;moviMarkerPos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;idx1Buffer&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;hdrlBuffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;byteLength&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;finalMovi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;byteLength&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it, we can now save the complete modified file and enjoy the result we got!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fqXtBn83--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdpxyh8kucrofsltio7y.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fqXtBn83--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdpxyh8kucrofsltio7y.gif" alt="Resulting video"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again, you can find the complete tool &lt;a href="https://ezglitch.kopanko.com/?mtm_campaign=dev.to"&gt;here&lt;/a&gt;.&lt;br&gt;
Thanks for reading, glitch on ‚ú®! &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>showdev</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Top 5 AWS Blogs to Follow</title>
      <author>Daniel Dominguez</author>
      <pubDate>Thu, 23 Sep 2021 21:00:56 +0000</pubDate>
      <link>https://dev.to/dominguezdaniel/top-5-aws-blogs-to-follow-326h</link>
      <guid>https://dev.to/dominguezdaniel/top-5-aws-blogs-to-follow-326h</guid>
      <description>&lt;p&gt;According to search and social metrics from &lt;a href="https://hackernoon.com/top-15-aws-blogs-and-websites-to-follow-in-2019-qb273whk"&gt;Hackernoon&lt;/a&gt;, these are the TOP 5 AWS Blogs and Websites actively working to educate, inspire, and empower their readers with frequent updates and high-quality information:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. AWS Blog&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon Web Services offers reliable, scalable, and inexpensive cloud computing services. Follow this blog to get the latest news and information on AWS.&lt;br&gt;
Frequency: about 3 posts per week.&lt;br&gt;
Since: Nov 2004&lt;br&gt;
Visit: &lt;a href="https://aws.amazon.com/blogs/"&gt;aws.amazon.com/blogs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Whizlabs Blog | Amazon Web Services&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Whizlabs is the pioneer among the online certification training providers over the world. Follow this blog for AWS certifications‚Äô preparation guides, resources, latest updates, technical topics, up-to-date study &amp;amp; practice material, and get connected with the experts.&lt;br&gt;
Frequency: about 1 post per week.&lt;br&gt;
Since: Aug 2000&lt;br&gt;
Visit: &lt;a href="https://www.whizlabs.com/blog/aws-certifications/"&gt;whizlabs.com/blog/aws-certifications&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. N2WS | EC2 AWS Disaster Recovery Blog&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;N2W Software is CPM (Cloud Protection Manager), enterprise-class EC2 Backup and Disaster Recovery software. Follow this blog which is a complete guide to EC2 AWS Disaster Recovery solutions.&lt;br&gt;
Frequency: about 2 posts per week.&lt;br&gt;
Since: Jan 2013&lt;br&gt;
Visit: &lt;a href="https://n2ws.com/blog"&gt;n2ws.com/blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. AWSInsider&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Follow this blog to get how-to, tips, tricks and more hands-on advice for working with Amazon Web Services (AWS).&lt;br&gt;
Frequency: about 1 post per week.&lt;br&gt;
Since: Aug 2014&lt;br&gt;
Visit: &lt;a href="https://awsinsider.net/Home.aspx"&gt;awsinsider.net&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. A Cloud Guru&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cloud Guru is a sourced collection of cloud computing and serverless articles. Follow this blog to get articles on AWS cloud.&lt;br&gt;
Frequency: about 2 posts per month.&lt;br&gt;
Since: Oct 2015&lt;br&gt;
Visit: &lt;a href="https://acloudguru.com/blog"&gt;acloudguru.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;--&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What do you think? is there any other blog or website that you would recommend to read for AWS? Let me know in the comments!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>blogs</category>
    </item>
    <item>
      <title>Cryptourism.io White Paper is officially release</title>
      <author>Cryptourism.io</author>
      <pubDate>Thu, 23 Sep 2021 20:54:06 +0000</pubDate>
      <link>https://dev.to/cryptourism/cryptourism-io-white-paper-is-officially-release-26k0</link>
      <guid>https://dev.to/cryptourism/cryptourism-io-white-paper-is-officially-release-26k0</guid>
      <description>&lt;p&gt;On September 1, 2021, Cryptourism officially released a White Paper so that the project can better understand how it works and the profit making process in this ecosystem.&lt;/p&gt;

&lt;p&gt;A white paper is an informational document usually issued by a company organization to promote or highlight the features of a solution, product, or service that it offers or plans to offer.&lt;br&gt;
Cryptourism.io brings the most of the blockchain and the CTR token empower the offer of exceptional customer care and become the industry leader of luxury rural tourism in Portugal. Invest in a legally approved business with annual profit share, amazing discounts, VIP clubs and free nights when you stake over 10k CTR during 6 months. CTR Token completely verifiable in the Binance Smart Chain.&lt;br&gt;
So, what information will the Cryptourism White Paper have? Check out the white paper in our website &lt;a href="https://cryptourism.io/"&gt;https://cryptourism.io/&lt;/a&gt;&lt;br&gt;
At the end of June 2021, Cryptourism ecosystem successfully raised $75k in capital on the Private Pre-Sale Round.&lt;br&gt;
Currently, the developers of Cryptourism are busy preparing for a series of big events coming up including the Pre Sale round, the start of the First Construction Phase, CTR token listing in exchanges and CMC websites.&lt;br&gt;
Tourism should be comfortable, cost-effective, and most importantly, enjoyable. While fees, booking irregularities, bad reviews, and long lines may be symptomatic of the current travel environment, blockchain is challenging this status quo with a host of new services designed to modernize and streamline the tour experience.&lt;br&gt;
Thanks to the formation of more equitable ecosystems constructed to reduce the presence of intermediaries, travelers and service providers can build more mutually fulfilling relationships that contribute to better overall value.&lt;br&gt;
What Is Cryptourism?&lt;br&gt;
A Decentralized Tourism Investment Offering the power of exceptional customer care to become the industry leader of luxury rural tourism. Invest in a legally approved business with annual profit share backed by Blockchain using CTR Token completely verifiable.&lt;br&gt;
Crypto tourism is a form of tourism that caters to cryptocurrency enthusiasts by offering a packaged travel tours that can either be paid for with digital currency or offer facilities or classes about cryptocurrency as part of the tour.&lt;br&gt;
Using CTR Token and other cryptocurrencies can make it easier to pay for trips and avoid high ATM fees, currency conversion fees, and protect against monetary theft while abroad.&lt;br&gt;
Crypto tourism is a special kind of tourism dedicated to travel programming that caters to crypto enthusiasts and investors, and often, both.&lt;br&gt;
If you have any questions, please contact the 24/7 support team via Cryptourism communication channels at cryptourism.io&lt;/p&gt;

</description>
      <category>bitcoin</category>
      <category>crypto</category>
      <category>ico</category>
      <category>tourism</category>
    </item>
    <item>
      <title>Test-driven Development: c√≥digos limpos e prontos para implementa√ß√£o!</title>
      <author>agatha-vieira</author>
      <pubDate>Thu, 23 Sep 2021 20:49:26 +0000</pubDate>
      <link>https://dev.to/fireworkweb/test-driven-development-codigos-limpos-e-prontos-para-implementacao-4e09</link>
      <guid>https://dev.to/fireworkweb/test-driven-development-codigos-limpos-e-prontos-para-implementacao-4e09</guid>
      <description>&lt;p&gt;A sigla TDD significa Test-driven Development, ou Desenvolvimento dirigido/orientado a testes. S√£o v√°rias as tecnologias e processos para testar os componentes de uma solu√ß√£o de software corretamente, alguns visam testar a integra√ß√£o entre esses componentes, enquanto outros visam testar cada componente de maneira isolada. O TDD √© uma dessas metodologias que auxiliam a aplicar testes no nosso c√≥digo de forma mais granular.&lt;/p&gt;

&lt;p&gt;Descoberto ou criado em 2003 pelo kent Beck, o pai do XP ( Extreme Programming), o TDD se baseia essencialmente em testes unit√°rios, ou seja, que testam a menor unidade de uma aplica√ß√£o, o que normalmente, nas linguagens estruturadas orientadas a objetos funcionais, s√£o os m√©todos ou as fun√ß√µes. &lt;/p&gt;

&lt;p&gt;A premissa principal quando a gente vai implementar o TDD, √© escrever o teste antes do c√≥digo. Isso mesmo, escrever o teste antes mesmo do c√≥digo existir! Pode parecer estranho e alguns desenvolvedores podem considerar o TDD uma perda de tempo, por√©m o Test-driven Development traz diversas vantagens, a primeira delas √© que voc√™ desenvolve facilmente um c√≥digo limpo. &lt;/p&gt;

&lt;p&gt;Segundo Robert Martin, mais conhecido como Uncle Bob, um dos 17 signat√°rios originais do Manifesto √Ågil em 2001 e autor do livro Clean Code, quando voc√™ desenvolve um teste antes de desenvolver um c√≥digo, voc√™ desenvolve um c√≥digo f√°cil de ser testado e consequentemente, desenvolve um c√≥digo muito mais limpo. A raz√£o disso √© que: seguindo o TDD voc√™ reduz naturalmente os acoplamentos da sua aplica√ß√£o. &lt;/p&gt;

&lt;p&gt;ENTENDA DO PROCESSO DE TEST-DRIVEN DEVELOPMENT &lt;/p&gt;

&lt;p&gt;Pra ficar mais f√°cil entender, veja como funciona a implementa√ß√£o. O processo do Test-driven Development se baseia na repeti√ß√£o de um ciclo de desenvolvimento e testes em 3 fases: fase vermelha, verde e refatora√ß√£o. &lt;/p&gt;

&lt;p&gt;Na fase vermelha, voc√™ escrever√° um teste unit√°rio que ao ser executado ir√° falhar pois o c√≥digo em si ainda n√£o existe. &lt;br&gt;
Depois, na fase verde, voc√™ deve  implementar um c√≥digo que seja suficiente para passar no teste unit√°rio rec√©m escrito.&lt;br&gt;
Na terceira fase, voc√™ faz a refatora√ß√£o do c√≥digo, melhorando a leitura, eliminando redund√¢ncias e adotando boas pr√°ticas.&lt;br&gt;
Assim fica mais f√°cil entender como o ciclo do TDD nos ajuda a projetar um c√≥digo mais limpo e nos motiva a sempre limpar nosso c√≥digo. Afinal, estamos atrelados a este ciclo de testes e refatora√ß√£o.&lt;/p&gt;

&lt;p&gt;Segundo Uncle Bob, voc√™ estar√° sempre alternando entre escrever seus testes e escrever seus c√≥digos, portanto estar√° constantemente testando de forma r√°pida e tudo sempre estar√° funcionando. No final, como seu c√≥digo est√° sendo desenvolvido e orientado a testes, voc√™ reduz os bugs e o seu tempo gasto em debug. Al√©m disso, o TDD √© uma forma de documentar como cada parte do sistema funciona de uma forma clara para que outros programadores interpretem facilmente. &lt;/p&gt;

&lt;p&gt;Uncle Bob ainda diz que, al√©m de todas as outras vantagens, a real raz√£o para se implementar o TDD, √© que assim que seu c√≥digo passa por esse ciclo de desenvolvimento e teste, ele estar√° pronto para implementa√ß√£o. &lt;/p&gt;

&lt;p&gt;MANUAL DO DEV ‚Äì TDD&lt;/p&gt;

&lt;p&gt;Confira este conte√∫do em v√≠deo no Manual do Dev com a desenvolvedora Julia Reche: &lt;a href="https://youtu.be/1JVvRWFBXS8"&gt;https://youtu.be/1JVvRWFBXS8&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-que-achou-do-artigo-conta-para-gente-nos-coment%C3%A1rios"&gt;
  &lt;/a&gt;
  O que achou do artigo? Conta para gente nos coment√°rios!
&lt;/h2&gt;

&lt;p&gt;Aprenda mais nos nossos canais digitais!&lt;br&gt;
Site: &lt;a href="https://fireworkweb.com.br"&gt;https://fireworkweb.com.br&lt;/a&gt;&lt;br&gt;
Youtube:&lt;a href="https://bit.ly/2GwqNU1"&gt;https://bit.ly/2GwqNU1&lt;/a&gt;&lt;br&gt;
Insta: @fireworkweb&lt;br&gt;
Face: @fireworkweb&lt;br&gt;
Linkedin: Firework Web &amp;amp; Mobile&lt;/p&gt;

</description>
      <category>braziliandevs</category>
      <category>basics</category>
      <category>tdd</category>
    </item>
    <item>
      <title>Monorepo using Lerna, Conventional commits, and Github packages</title>
      <author>Xavier Canchal</author>
      <pubDate>Thu, 23 Sep 2021 20:22:35 +0000</pubDate>
      <link>https://dev.to/xaviercanchal/monorepo-using-lerna-conventional-commits-and-github-packages-4m8m</link>
      <guid>https://dev.to/xaviercanchal/monorepo-using-lerna-conventional-commits-and-github-packages-4m8m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Some &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript"&gt;Javascript&lt;/a&gt; and &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt; knowledge and a &lt;a href="https://github.com/"&gt;Github&lt;/a&gt; account. Also, &lt;a href="https://nodejs.org/es/"&gt;NodeJS&lt;/a&gt; has to be installed on your computer. If you don‚Äôt have it installed already I recommend doing it using a version manager such as &lt;a href="https://github.com/nvm-sh/nvm"&gt;nvm&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  Context
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#monorepo"&gt;
  &lt;/a&gt;
  Monorepo
&lt;/h3&gt;

&lt;p&gt;A monorepo (mono = single, repo = repository) is an approach for managing multiple software projects inside the same repository, often called packages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lerna"&gt;
  &lt;/a&gt;
  Lerna
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/lerna/lerna"&gt;Lerna&lt;/a&gt; is a tool for managing JavaScript projects with multiple packages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conventional-commits"&gt;
  &lt;/a&gt;
  Conventional commits
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;Conventional commits&lt;/a&gt; are a convention built on top of commits that consist of a set of rules to follow when writing commit messages. To specify the nature of the changed code, a set of instructions that conform to the &lt;a href="https://semver.org/"&gt;SemVer&lt;/a&gt; (Semantic Versioning) specification must be followed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#github-packages"&gt;
  &lt;/a&gt;
  Github packages
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/features/packages"&gt;Github packages&lt;/a&gt; is the package registry of Github. It allows developers to store software packages for some of the most used package registries (Npm, Docker, Maven‚Ä¶). In our case, we'll use the npm one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-we-going-to-build"&gt;
  &lt;/a&gt;
  What are we going to build?
&lt;/h2&gt;

&lt;p&gt;We will create a monorepo that will contain two projects (packages). After making changes to any of the projects, we will commit them following the conventional commits specification.&lt;/p&gt;

&lt;p&gt;After making some changes to any of them, we will use Lerna in conjunction with conventional commits to analyze the commit history to determine which packages have changed, the level of affectation of these changes, and determine the versions that have to be bumped and published to the registry.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#handson"&gt;
  &lt;/a&gt;
  Hands-on
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-the%C2%A0monorepo"&gt;
  &lt;/a&gt;
  Setting up the¬†monorepo
&lt;/h3&gt;

&lt;p&gt;The very first thing to do is to create a new Github repository. I will call it &lt;code&gt;monorepo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P73mhd4R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z532o08znnjhlqcrp1nd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P73mhd4R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z532o08znnjhlqcrp1nd.png" alt="Github repository creation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clone the repository, navigate to the root folder, and execute the following command to initialize the npm project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, install Lerna as a dependency and execute the command to initialize the Lerna project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; lerna

&lt;span class="nv"&gt;$ &lt;/span&gt;lerna init &lt;span class="nt"&gt;--independent&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following &lt;a href="https://github.com/lerna/lerna#lernajson"&gt;lerna.json&lt;/a&gt; file will be generated. This file is used to configure the different options supported by Lerna. The --independent flag is important because we want that each package in the repo is versioned independently instead of having a single version for all the packages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"packages"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"packages/*"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;lt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;folder&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;packages&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;will&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;located&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"independent"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;lt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;versioning&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;strategy&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to avoid publishing the &lt;code&gt;node_modules&lt;/code&gt; folder to the repository, create a¬†&lt;code&gt;.gitignore&lt;/code&gt; file with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node_modules
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our project structure should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/
  .gitignore &amp;lt;-- avoid publish certain files to the repository
  package.json &amp;lt;-- Lerna installed in the root dependencies
  lerna.json &amp;lt;-- Lerna configuration file
  packages/ &amp;lt;-- folder where the packages will be located
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's publish these initial changes to the repository following the conventional commits specification (notice that we're using &lt;code&gt;feat&lt;/code&gt; as the commit type and &lt;code&gt;root&lt;/code&gt; as the scope). Later, in the &lt;code&gt;scope&lt;/code&gt;, we'll set the name of the affected package but since the current changes are global, we just want to use a name like &lt;code&gt;root&lt;/code&gt; or any other one that you prefer to categorize them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"feat(root): adds npm, lerna and packages"&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-the-packages"&gt;
  &lt;/a&gt;
  Creating the packages
&lt;/h3&gt;

&lt;p&gt;We will create the following two packages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;date-logic&lt;/code&gt;: It will export a function that returns the current date.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;date-renderer&lt;/code&gt;: It will use the &lt;code&gt;date-logic&lt;/code&gt; to print the current date to the console.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#package-1-datelogic"&gt;
  &lt;/a&gt;
  Package 1 (date-logic)
&lt;/h3&gt;

&lt;p&gt;Create a new folder named &lt;code&gt;date-logic&lt;/code&gt; inside the &lt;code&gt;packages&lt;/code&gt; folder, navigate to it, and execute &lt;code&gt;npm i&lt;/code&gt; to generate its own &lt;code&gt;package.json&lt;/code&gt; file. After that, apply  the following changes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add an &lt;a href="https://docs.npmjs.com/cli/v7/using-npm/scope"&gt;npm scope&lt;/a&gt; to the &lt;code&gt;name&lt;/code&gt; attribute to indicate who's the owner of the package. In my case, &lt;code&gt;@xcanchal&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add the &lt;code&gt;repository&lt;/code&gt; attribute, with the URL to the Github repository.&lt;/li&gt;
&lt;li&gt;Add the &lt;code&gt;publishConfig.registry&lt;/code&gt; attribute pointing to the Github Packages registry. This specifies the npm registry where the packages will be published.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;code&gt;package.json&lt;/code&gt; should look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"@xcanchal/date-logic"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;lt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;package-name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"A package that returns the current date"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"repository"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://github.com/xcanchal/monorepo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;lt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;repo&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"publishConfig"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;lt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;publish&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;config&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="nl"&gt;"@xcanchal:registry"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://npm.pkg.github.com/xcanchal"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Error: no test specified&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp;&amp;amp; exit 1"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Xavier Canchal"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ISC"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we'll implement a very simple script for the &lt;code&gt;date-logic&lt;/code&gt; package. Create a new &lt;code&gt;index.js&lt;/code&gt; file with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's push the changes to the repo (remember that we have to follow the conventional commits specification). Since the changes made imply adding a new feature to the &lt;code&gt;date-logic&lt;/code&gt;package, we will use the &lt;code&gt;feat&lt;/code&gt; type of commit and the &lt;code&gt;date-logic&lt;/code&gt; scope:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"feat(date-logic): creates package"&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will now publish the very first version of the package to the Github Packages npm registry, so we can install it in the second package that we'll implement later (the &lt;code&gt;date-renderer&lt;/code&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#authentication-in-github-packages-and-npm"&gt;
  &lt;/a&gt;
  Authentication in Github Packages and npm
&lt;/h3&gt;

&lt;p&gt;Before being able to publish packages, we have to set up a Github Personal Access Token and modify the¬†&lt;code&gt;.npmrc&lt;/code&gt; config file to be able to authenticate when executing &lt;code&gt;publish&lt;/code&gt; or &lt;code&gt;install&lt;/code&gt; commands.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to your "Github &amp;gt; Settings &amp;gt; Developer settings &amp;gt; Personal access tokens" and click "Generate new token". Once in the form, set a descriptive name and check the &lt;em&gt;write:packages&lt;/em&gt;,(&lt;em&gt;read:packages&lt;/em&gt; implicit) and &lt;em&gt;delete:packages&lt;/em&gt; permissions:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---DajPxKP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mqykkm1j1e9t4v57k0wk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---DajPxKP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mqykkm1j1e9t4v57k0wk.png" alt="Personal access token form"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can learn more about Github packages authentication in the &lt;a href="https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-npm-registry#authenticating-to-github-packages"&gt;docs&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add the following lines to the &lt;code&gt;.npmrc&lt;/code&gt; file, which is an &lt;a href="https://docs.npmjs.com/cli/v7/configuring-npm/npmrc"&gt;configuration file for npm&lt;/a&gt;:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;@xcanchal:registry&lt;span class="o"&gt;=&lt;/span&gt;https://npm.pkg.github.com/xcanchal
always-auth&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
//npm.pkg.github.com/:_authToken&lt;span class="o"&gt;={&lt;/span&gt;YOUR_GITHUB_TOKEN&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we can publish the very first version of our &lt;code&gt;date-logic&lt;/code&gt; package. To do so, execute the following command from the package folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm publish
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We‚Äôll see the following output (notice that the version &lt;code&gt;1.0.0&lt;/code&gt; has been published):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm notice 
npm notice üì¶  @xcanchal/date-logic@1.0.0
npm notice &lt;span class="o"&gt;===&lt;/span&gt; Tarball Contents &lt;span class="o"&gt;===&lt;/span&gt; 
npm notice 61B  index.js    
npm notice 400B package.json
npm notice &lt;span class="o"&gt;===&lt;/span&gt; Tarball Details &lt;span class="o"&gt;===&lt;/span&gt; 
npm notice name:          @xcanchal/date-logic                    
npm notice version:       1.0.0                                   
npm notice filename:      @xcanchal/date-logic-1.0.0.tgz          
npm notice package size:  397 B                                   
npm notice unpacked size: 461 B                                   
npm notice shasum:        4e48d9d684539e0125bf41a44ae90d6c6fc4b7df
npm notice integrity:     sha512-DowuECiLPHd55[...]/LV5T/2pFqucQ&lt;span class="o"&gt;==&lt;/span&gt;
npm notice total files:   2                                       
npm notice 
+ @xcanchal/date-logic@1.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let‚Äôs check how this looks in Github. Open a browser and navigate to your Github repository. There, you can see published packages on the bottom-right of the page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZfGMet4h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oc6shzrzvy171xg6ylcs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZfGMet4h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oc6shzrzvy171xg6ylcs.png" alt="Github repository page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By clicking on the package name you will be redirected to the package details page. There, some information such as the installation instructions, versions published, or download activity is available.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cBJL9X_P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vf9g9ea3nybhb7bdkq61.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cBJL9X_P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vf9g9ea3nybhb7bdkq61.png" alt="Github package page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#package-2-daterenderer"&gt;
  &lt;/a&gt;
  Package 2 (date-renderer)
&lt;/h3&gt;

&lt;p&gt;Now, let‚Äôs implement our second package, the &lt;code&gt;date-renderer&lt;/code&gt;. Create a new &lt;code&gt;date-renderer&lt;/code&gt; inside the &lt;code&gt;packages&lt;/code&gt; folder and repeat the same steps that we did for the &lt;code&gt;date-logic&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;Then, install the &lt;code&gt;date-logic&lt;/code&gt; package as a dependency (remember, the &lt;code&gt;date-renderer&lt;/code&gt; will use the date-logic to print the value to the console).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; @xcanchal/date-logic
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great, we have installed a package of our Github packages registry! After that, we will create a new &lt;code&gt;index.js&lt;/code&gt; file and add the following code, which is a simple script that imports the &lt;code&gt;date-logic&lt;/code&gt; package and executes the function exported there to print the date to the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getDate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@xcanchal/date-logic&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Date: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can test it to check that it works correctly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;node index.js

// -&amp;gt; Date: Wed Sep 22 2021 22:50:51 GMT+0200 &lt;span class="o"&gt;(&lt;/span&gt;Central European Summer Time&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our project structure now should look like this (this is how a typical Lerna project looks like):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/
  package.json
  lerna.json
  packages/
    date-logic/
      index.js
      package.json
    date-renderer/
      index.js
      package.json &amp;lt;-- date-logic installed as a dependency
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let‚Äôs publish the &lt;code&gt;date-renderer&lt;/code&gt; package to the Github Packages registry too by running &lt;code&gt;npm publish&lt;/code&gt; from the package folder.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#modifying-packages"&gt;
  &lt;/a&gt;
  Modifying packages
&lt;/h3&gt;

&lt;p&gt;Let‚Äôs make some changes to our packages. Modify the code in the &lt;code&gt;index.js&lt;/code&gt; file of the &lt;code&gt;date-logic&lt;/code&gt; package to render the date formatted according to a given a locale and some options:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;locale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en-US&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;weekday&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;long&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numeric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;month&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;long&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;day&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numeric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLocaleDateString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before pushing these changes we have to determine the commit type since it will impact the consumers that use our package. Since we have changed the return type of the function from a &lt;code&gt;Date&lt;/code&gt; object to a &lt;code&gt;String&lt;/code&gt;, we may consider this as a breaking change. In order to specify it using conventional commits, the body of the footer has to be multi-line and the footer line must start with ‚ÄúBREAKING CHANGE:‚Äù&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"feat(date-logic): returns localized date string
BREAKING CHANGE: changes the return type of the getDate function"&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#leveraging-the-power-of-lerna"&gt;
  &lt;/a&gt;
  Leveraging the power of Lerna
&lt;/h3&gt;

&lt;p&gt;Execute &lt;code&gt;git log&lt;/code&gt; to see the three different commits that we have made up until now (from newest to oldest):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;commit 7decbab3aab121c2235e3fa8fd79fe30ad4350c4 &lt;span class="o"&gt;(&lt;/span&gt;HEAD -&amp;gt; main, origin/main, origin/HEAD&lt;span class="o"&gt;)&lt;/span&gt;
Author: Xavier Canchal &amp;lt;xaviercanchal@userzoom.com&amp;gt;
Date:   Thu Sep 23 13:45:02 2021 +0200

  feat&lt;span class="o"&gt;(&lt;/span&gt;date-logic&lt;span class="o"&gt;)&lt;/span&gt;: returns localized &lt;span class="nb"&gt;date &lt;/span&gt;string

  BREAKING CHANGE: changes the &lt;span class="k"&gt;return &lt;/span&gt;&lt;span class="nb"&gt;type &lt;/span&gt;of the getDate &lt;span class="k"&gt;function

&lt;/span&gt;commit d2497bbb357d41b0f4ed81e9a5f1af45b38e5fce
Author: Xavier Canchal &amp;lt;xaviercanchal@userzoom.com&amp;gt;
Date:   Thu Sep 23 12:48:59 2021 +0200

  feat&lt;span class="o"&gt;(&lt;/span&gt;date-renderer&lt;span class="o"&gt;)&lt;/span&gt;: creates package

commit 857efc7057941c254f97d7cf2d49b4f8eae3b196
Author: Xavier Canchal &amp;lt;xaviercanchal@userzoom.com&amp;gt;
Date:   Thu Sep 23 09:48:02 2021 +0200

  feat&lt;span class="o"&gt;(&lt;/span&gt;date-logic&lt;span class="o"&gt;)&lt;/span&gt;: creates package
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we will use Lerna to analyze the conventional commits history to detect which packages have changed and the level of affectation of those changes to determine the appropriate version to be published.&lt;/p&gt;

&lt;p&gt;From the root folder, execute the following command (notice the &lt;code&gt;--conventional-commits&lt;/code&gt; flag).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;lerna version &lt;span class="nt"&gt;--conventional-commits&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some logs will appear and Lerna will ask for confirmation in a prompt, showing the packages that will be versioned:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;...]

Changes:
 - @xcanchal/date-logic: 1.0.0 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 2.0.0

? Are you sure you want to create these versions? &lt;span class="o"&gt;(&lt;/span&gt;ynH&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we confirm by pressing the &lt;code&gt;y&lt;/code&gt; key, Lerna will update the &lt;code&gt;version&lt;/code&gt; attribute in the &lt;code&gt;date-logic&lt;/code&gt;‚Äòs &lt;code&gt;package.json&lt;/code&gt; and will push a tag to Github. See the output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;lerna info execute Skipping releases
lerna info git Pushing tags...
lerna success version finished
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we visit the tags page of our Github repo, we can see the created tag:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Vti32Xj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6la847hlg3dtdtgpd2mk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Vti32Xj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6la847hlg3dtdtgpd2mk.png" alt="Github repository tags"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But there's more! Lerna also generated a particular &lt;code&gt;CHANGELOG.md&lt;/code&gt; for the &lt;code&gt;date-logic&lt;/code&gt; package with all the changes history. Pretty neat, right?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mcXhPOQ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jn747fskfjnztlpry8oe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mcXhPOQ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jn747fskfjnztlpry8oe.png" alt="Package changelog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We still haven‚Äôt published this new version &lt;code&gt;2.0.0&lt;/code&gt;. To do it we‚Äôll use another Lerna command: &lt;code&gt;lerna publish&lt;/code&gt; with the &lt;code&gt;from-git&lt;/code&gt; argument. This argument tells Lerna to decide which versions have to be published by looking at the Git tags, which are used as a source of truth.&lt;/p&gt;

&lt;p&gt;But first, we have to extend the Lerna configuration by adding the registry URL under the &lt;code&gt;commands.publish.registry&lt;/code&gt; attribute in our &lt;code&gt;lerna.json&lt;/code&gt; file, which now looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"packages"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"packages/*"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"independent"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"publish"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"registry"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://npm.pkg.github.com/xcanchal"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Commit and publish the Lerna configuration change:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"feat(root): adds publish registry to lerna config"&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And execute the Lerna publish command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;lerna publish from-git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which will also prompt, like in the &lt;code&gt;version&lt;/code&gt; stage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;...]

Found 1 package to publish:
 - @xcanchal/date-logic &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 2.0.0

? Are you sure you want to publish these packages? &lt;span class="o"&gt;(&lt;/span&gt;ynH&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We confirm and we get the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;...]

Successfully published:
 - @xcanchal/date-logic@2.0.0
lerna success published 1 package
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let‚Äôs visit our repository packages page and see how our package now has two different versions published:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4tJbYQBt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbs5nm4n40w6vgpbkxkp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4tJbYQBt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbs5nm4n40w6vgpbkxkp.png" alt="Github package page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can use the new version of the &lt;code&gt;date-logic&lt;/code&gt; package in the &lt;code&gt;date-renderer&lt;/code&gt;. Update the &lt;code&gt;date-renderer&lt;/code&gt;'s &lt;code&gt;package.json&lt;/code&gt; to target from the version &lt;code&gt;2.0.0&lt;/code&gt; and up and execute &lt;code&gt;npm install&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@xcanchal/date-logic"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.0.0"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Navigate to the &lt;code&gt;date-renderer&lt;/code&gt; package folder and execute node &lt;code&gt;index.js&lt;/code&gt; to see the updated result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;node index.js
// -&amp;gt; Date: Thursday, September 23, 2021
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that‚Äôs it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;What have we covered in this article?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Conventional commits specification.&lt;/li&gt;
&lt;li&gt;Using Github packages as an npm registry.&lt;/li&gt;
&lt;li&gt;Configuring authentication in Github packages and npm.&lt;/li&gt;
&lt;li&gt;Using Lerna in conjunction with conventional commits to version and publish packages, and get a nice CHANGELOG.md file as a bonus.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#will-be-covered-in-an-upcoming-article"&gt;
  &lt;/a&gt;
  (Will be covered in an upcoming article)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Setting up a commit syntax checker (e.g. commitlint) to avoid human mistakes that could impact the versioning due to wrong commit history.&lt;/li&gt;
&lt;li&gt;Automate the package versioning and publication workflow when pushing new code to the repository using Github actions.&lt;/li&gt;
&lt;li&gt;Publish different types of versions: beta versions when pushing to development and final versions when pushing to master as part of the previous Github action. See Lerna‚Äôs --conventional-prerelease and --conventional-graduate flags.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#have-you-ever-used-a-monorepo-for-managing-packages-did-you-use-lerna-or-any-other-tool-dont-hesitate-to-leave-some-feedback"&gt;
  &lt;/a&gt;
  Have you ever used a monorepo for managing packages? Did you use Lerna or any other tool? Don‚Äôt hesitate to leave some feedback!
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h4&gt;

</description>
      <category>lerna</category>
      <category>githubpackages</category>
      <category>npm</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Why Docker is eating your disk space</title>
      <author>Juhana Jauhiainen</author>
      <pubDate>Thu, 23 Sep 2021 20:08:11 +0000</pubDate>
      <link>https://dev.to/juhanakristian/why-docker-is-eating-your-disk-space-1g69</link>
      <guid>https://dev.to/juhanakristian/why-docker-is-eating-your-disk-space-1g69</guid>
      <description>&lt;p&gt;I learned recently, in less than ideal circumstances, that Docker doesn't do &lt;strong&gt;any&lt;/strong&gt; log rotation by default üò±&lt;/p&gt;

&lt;p&gt;So if you're running your application in production with Docker and using Docker's default &lt;a href="https://docs.docker.com/config/containers/logging/configure/"&gt;logging driver&lt;/a&gt; you might be awakened some night at 3 AM to fix a service outage when you can barely think straight. üòÖ&lt;/p&gt;

&lt;p&gt;The default logging driver is &lt;code&gt;json-file&lt;/code&gt; which caches the container logs as JSON. In practice, this means Docker is writing all the container &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; to a JSON file located in the host systems &lt;code&gt;/var/lib/docker/containers&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;You can find out the locations and sizes of these log files with &lt;code&gt;docker inspect&lt;/code&gt;. You might need to run this with &lt;code&gt;sudo&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;du&lt;/span&gt; &lt;span class="nt"&gt;-h&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;docker inspect &lt;span class="nt"&gt;--format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'{{.LogPath}}'&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;docker ps &lt;span class="nt"&gt;-qa&lt;/span&gt;&lt;span class="si"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you need to delete logs of a container before continuing, you can use &lt;code&gt;echo&lt;/code&gt; to overwrite them as empty. This might require stopping the containers first.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;docker inspect &lt;span class="nt"&gt;--format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'{{.LogPath}}'&lt;/span&gt; container_name&lt;span class="si"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#changing-the-default-logging-driver"&gt;
  &lt;/a&gt;
  Changing the default logging driver
&lt;/h3&gt;

&lt;p&gt;You can change the default logging driver by adding a configuration for it in &lt;code&gt;/etc/docker/daemon.json&lt;/code&gt;. Docker supports multiple logging drivers but the simplest solution to our disk gorging logs problem is to use the &lt;code&gt;local&lt;/code&gt; driver. The official Docker documentation explicitly &lt;a href="https://docs.docker.com/config/containers/logging/configure/"&gt;refers to using it&lt;/a&gt; to prevent disk-exhaustion.&lt;/p&gt;

&lt;p&gt;Let's create a basic config for &lt;code&gt;local&lt;/code&gt; logging driver.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"log-driver"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"local"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"log-opts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"max-size"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"100m"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"max-file"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"3"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are defining the logging driver with &lt;code&gt;log-driver&lt;/code&gt; and setting the maximum size of a log file before it is &lt;strong&gt;rolled&lt;/strong&gt;. This means, when the file reaches 100 megabytes, a new file is created and the old one is archived. &lt;code&gt;max-file&lt;/code&gt; is here set to "3", so at any point in time there will be only three log files stored. When the third file reaches 100 megabytes, a new file is created and the oldest log file is deleted.&lt;/p&gt;

&lt;p&gt;Next, we need to reload the config for the Docker daemon. The Docker documentation suggests we can use &lt;code&gt;SIGHUP&lt;/code&gt; &lt;a href="https://www.man7.org/linux/man-pages/man7/signal.7.html"&gt;signal&lt;/a&gt; to reload the configuration. Unfortunately, this &lt;a href="https://stackoverflow.com/a/51206053/11849122"&gt;doesn't work on all configuration options&lt;/a&gt; with logging driver being one of them.&lt;/p&gt;

&lt;p&gt;This means we will have to restart the Docker daemon to reload the config. The command for restarting the daemon depends on the system it's running on. On Linux systems using [systemd] docker daemon can be restarted using the &lt;code&gt;service&lt;/code&gt; command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;service docker restart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if we check the logging driver currently in use with &lt;a href="https://docs.docker.com/engine/reference/commandline/info/"&gt;info&lt;/a&gt;, it should print &lt;code&gt;local&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker info &lt;span class="nt"&gt;--format&lt;/span&gt; &lt;span class="s1"&gt;'{{.LoggingDriver}}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have changed the default logging driver but if we have &lt;strong&gt;running containers&lt;/strong&gt; this is &lt;strong&gt;not&lt;/strong&gt; enough. The configuration change will only affect &lt;strong&gt;new&lt;/strong&gt; containers. This means we will have to recreate all our existing containers. Depending on your setup you can do this using &lt;code&gt;docker-compose&lt;/code&gt; or by running &lt;code&gt;docker build&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nt"&gt;--force-recreate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;If you're using docker-compose and get an warning &lt;strong&gt;WARNING: no logs are available with the 'local' log driver&lt;/strong&gt; when you're trying to read logs from a container, it means you're running an older version of docker-compose which doesn't support &lt;strong&gt;local&lt;/strong&gt; logging driver. Try &lt;a href="https://docs.docker.com/compose/install/"&gt;upgrading&lt;/a&gt; your docker-compose&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
&lt;br&gt;
  &lt;a href="#further-reading"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  Further reading&lt;br&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.docker.com/config/containers/logging/configure/"&gt;Docker logging drivers&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.docker.com/config/containers/logging/local/"&gt;Configuring local driver&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@filmlav?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Fernando Lavin&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/disk?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>docker</category>
      <category>linux</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Choosing Between AWS Lambda and Docker</title>
      <author>Francesco Ciulla</author>
      <pubDate>Thu, 23 Sep 2021 19:10:05 +0000</pubDate>
      <link>https://dev.to/tinystacks/choosing-between-aws-lambda-and-docker-2e6k</link>
      <guid>https://dev.to/tinystacks/choosing-between-aws-lambda-and-docker-2e6k</guid>
      <description>&lt;p&gt;Article by Jay Allen&lt;/p&gt;

&lt;p&gt;One of the great things about AWS is the vast array of features available to software developers. Sadly, one of the most confusing things about AWS is...the vast array of features available to developers!&lt;/p&gt;

&lt;p&gt;AWS provides multiple methods for deploying applications into the cloud. Two of these methods - AWS Lambda and Docker - have grown rapidly in popularity over the past several years. In this article, we compare the benefits of each and discuss when you might want to choose one over the other. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#aws-lambda"&gt;
  &lt;/a&gt;
  AWS Lambda
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda&lt;/a&gt;  is a "serverless" service that enables running code in the cloud. With Lambda, application developers can package code written &lt;a href="https://aws.amazon.com/lambda/faqs/"&gt;in a variety of programming languages&lt;/a&gt;  - including Java, Go, C#, Python, Powershell, Node.js, and Ruby - into a callable function that complies with their language's Lambda interface. They can then upload these Lambda functions to their AWS accounts, where they can be executed from anywhere over the Internet. &lt;/p&gt;

&lt;p&gt;The word "serverless" is a bit of a misnomer here; obviously, AWS didn't find some magical way to run code without compute capacity! "Serverless" here means that the compute power used to run this code doesn't run in your AWS account. Rather, it's executed on one of a series of computing clusters run by AWS itself. This frees development teams up to focus on the business logic of their application rather than on managing compute capacity. &lt;/p&gt;

&lt;p&gt;Lambda functions  &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-invocation.html"&gt;can be called, or &lt;em&gt;invoked&lt;/em&gt;&lt;/a&gt;, through a variety of methods. One of the most common is by connecting your Lambda functions to AWS API Gateway, which exposes them as REST API calls. Lambda functions can also be used  &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventsourcemapping.html"&gt;to implement customization and back-end processing logic for a large number of AWS services&lt;/a&gt;, including Amazon DynamoDB, Amazon Kinesis, and Amazon Simple Queue Service, among others. Lambda functions may also execute as scheduled tasks, and can even be executed directly from the AWS Command Line Interface (CLI) and the AWS Console. &lt;/p&gt;

&lt;p&gt;AWS Lambda can be thought of as the original serverless technology on AWS. It wasn't the first serverless technology on the block.  &lt;a href="https://dashbird.io/blog/origin-of-serverless/"&gt;That honor may go to Google' App Engine&lt;/a&gt;, which has been doing its thing since 2008. (Lambda, first released in 2015, is comparatively a youngin'.) But it helped inspire a boom in the serverless technology industry that continues to this day. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#docker"&gt;
  &lt;/a&gt;
  Docker
&lt;/h1&gt;

&lt;p&gt;In the bad ol' days of software deployment, developers threw their code onto clusters of production servers that might all have wildly different configurations. A web application might work for one user and then fail for a second user if the server to which the request was routed lacked a certain shared library or configuration setting. &lt;/p&gt;

&lt;p&gt;Docker was created specifically to resolve this nightmare scenario. A Docker container is a unit of software that contains everything - code, dependent libraries, and configuration files - that an application requires to run. The container is then deployed to and run on a virtual machine. &lt;/p&gt;

&lt;p&gt;The utility of Docker containers lies in their "run once, run anywhere" nature. Once you test a Docker container and verify that it functions as expected, that same container will run on any system to which you deploy it. &lt;/p&gt;

&lt;p&gt;Unlike Lambda, Docker isn't inherently "serverless". Docker is best thought of as a packaging and deployment mechanism. There are multiple ways on AWS to run a Docker container, including: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://aws.amazon.com/ecs/"&gt;Elastic Container Service&lt;/a&gt;. ECS is AWS's scalable, enterprise-grade solution for running Docker containers. Containers can be deployed either on an Amazon EC2 cluster hosted in your AWS account or using Fargate, AWS's serverless container deployment solution. (For more, check out my recent article on  &lt;a href="https://blog.tinystacks.com/ecs-serverless-or-not-fargate-vs-ec2-clusters"&gt;using EC2 clusters vs. Fargate for your Docker deployments&lt;/a&gt;.)&lt;/li&gt;
&lt;li&gt; &lt;a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_docker.html"&gt;Elastic Beanstalk&lt;/a&gt;.  AWS's "all-in-one" deployment technology will run your Docker container on a Docker-enabled EC2 instance. &lt;/li&gt;
&lt;li&gt; &lt;a href="https://aws.amazon.com/blogs/aws/new-for-aws-lambda-container-image-support/"&gt;As an AWS Lambda Function&lt;/a&gt; . Here's where things get &lt;em&gt;really&lt;/em&gt; confusing! Yes, you can implement code in a Docker container and expose it via a Lambda function. I'll talk a little about who you might want to do this below. &lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#microservices-served-two-ways"&gt;
  &lt;/a&gt;
  Microservices, Served Two Ways
&lt;/h1&gt;

&lt;p&gt;Both AWS Lambda and Docker containers are solid choices for deploying microservices architectures on AWS: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lambda functions map handily to REST API endpoints. You can use Lambda functions in conjunction with AWS API Gateway to quickly build out a REST API complete with advanced features such as user authentication and API throttling. &lt;/li&gt;
&lt;li&gt;Docker makes it easy to implement REST APIs using your favorite REST API framework - such as Node.js, Flask, Django, and many others. Because a Docker container is a deployable unit, you can easily partition your REST APIs into logical units and manage them through separate CI/CD pipelines.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#lambda-vs-docker-who-wins"&gt;
  &lt;/a&gt;
  Lambda vs. Docker: Who Wins?
&lt;/h1&gt;

&lt;p&gt;But this raises the perennial question: Which one is &lt;em&gt;better&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The first thing to point out is that this isn't necessarily an either/or question.&lt;/strong&gt; Both Lambda and Docker are powerful technologies that development teams may choose to combine within a single project. For example, you may decide to implement your microservice as a series of Docker containers, and then use Amazon Simple Queue Service in conjunction with AWS Lambda functions to implement a loosely coupled communications framework between services. &lt;/p&gt;

&lt;p&gt;But let's set that aside for now and focus on a narrower question: Which technology should you choose &lt;strong&gt;when implementing a microservices architecture&lt;/strong&gt;? &lt;/p&gt;

&lt;p&gt;As with most things in the world of the Cloud, there's no clear-cut answer here. But let's look at a few factors you should consider when making this decision for your own project. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation-languages"&gt;
  &lt;/a&gt;
  Implementation Languages
&lt;/h2&gt;

&lt;p&gt;When it comes to choice of programming languages and frameworks, Docker is the clear winner. AWS Lambda's support for programming languages is limited to the languages for which it defines an integration API. Docker, meanwhile, can host any language or framework that can run on a Dockerized Linux or Windows operating system. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#portability"&gt;
  &lt;/a&gt;
  Portability
&lt;/h2&gt;

&lt;p&gt;The language and framework issue leads me to another issue: &lt;strong&gt;cloud lock-in&lt;/strong&gt;. AWS Lambda isn't an industry standard - it's AWS's proprietary serverless tech. If you need to move to a new cloud provider (Azure, GCP) for any reason, your code may require significant rework to function on the new provider's equivalent serverless solution.  &lt;/p&gt;

&lt;p&gt;By contrast, Docker is pretty much a &lt;em&gt;de facto&lt;/em&gt; standard. A Docker container that works on AWS's ECS will also run on  &lt;a href="https://azure.microsoft.com/en-us/services/app-service/containers/"&gt;Azure App Service&lt;/a&gt;, &lt;a href="https://cloud.google.com/run"&gt;Google Cloud Run&lt;/a&gt;, and  &lt;a href="https://kubernetes.io/"&gt;Kubernetes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you still want to leverage Lambda but are concerned about portability, I'd recommend  &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/best-practices.html"&gt;following AWS's recommendations around Lambda code design&lt;/a&gt;. You can easily separate your function's execution logic out from the Lambda execution environment. This reduces your dependency on Lambda and makes your code more portable. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scaling"&gt;
  &lt;/a&gt;
  Scaling
&lt;/h2&gt;

&lt;p&gt;If your microservice could potentially be called hundreds of thousands of millions of times a day (or even &lt;em&gt;hour&lt;/em&gt;), you'll want to ensure it can scale automatically to meet user demand. Fortunately, both AWS Lambda and Docker offer plenty of options to create a highly scalable microservice. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-scaling.html"&gt;AWS Lambda creates an instance of your function to serve traffic to users&lt;/a&gt; . As that instance reaches capacity, Lambda will automatically create new instances of your function to meet demand. Lambda can "burst" from between 500 up to 3,000 instances per region to handle sudden traffix influxes, and can then scale up to 500 new instances every minute. &lt;/p&gt;

&lt;p&gt;AWS also provides multiple options for scaling Docker containers. Containers deployed using Fargate, AWS's serverless container deployment solution,  &lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/ecs-fargate-service-auto-scaling/"&gt;can be configured to scale out based on Amazon CloudWatch alarms&lt;/a&gt;. If you're deploying Docker containers to an EC2 cluster in your AWS account, you can even  &lt;a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-auto-scaling.html"&gt;scale out the size of your cluster&lt;/a&gt; .&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#execution-speeds"&gt;
  &lt;/a&gt;
  Execution Speeds
&lt;/h2&gt;

&lt;p&gt;In general, both AWS Lambda and Docker containers can be configured to provide the performance required by most applications. &lt;/p&gt;

&lt;p&gt;However, I'd be remiss if I didn't note &lt;strong&gt;the infamous Lambda cold start issue&lt;/strong&gt;. Remember above how I said that Lambda will create a new instance of your function when it needs to scale out. This process requires time: the Lambda function code has to be downloaded to an EC2 instance in AWS's Lambda server farm, and the execution environment and its associated dependencies also take time to load and start. This is known as a &lt;strong&gt;cold start&lt;/strong&gt;. It has a particularly hard impact on Java and .NET applications, both of which have weighty runtime environments. &lt;/p&gt;

&lt;p&gt;Fortunately, as Mike Roberts at Symphonia points out,  &lt;a href="https://blog.symphonia.io/posts/2020-06-30_analyzing_cold_start_latency_of_aws_lambda"&gt;cold start isn't an issue for high-demand applications&lt;/a&gt;. It only becomes a factor in low-execution environments - e.g., when using a Lambda function as a callback from another AWS service, such as CodePipeline. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#application-dependencies"&gt;
  &lt;/a&gt;
  Application Dependencies
&lt;/h2&gt;

&lt;p&gt;When it comes to dependency management - libraries that your application depends upon - Docker is king. As I discussed earlier, a Docker container is a self-contained package containing everything your application needs to run. &lt;/p&gt;

&lt;p&gt;It's also possible to ship dependencies with your AWS Lambda functions as part of the function's ZIP file. However, things get complicated when you need to package OS-native dependencies. Furthermore, Lambda packages max out at 250MB, which can be an issue when packaging large dependency frameworks. &lt;/p&gt;

&lt;p&gt;Fortunately, AWS Lambda's support for Docker containers means you can get the best of both worlds. By implementing your functions as Docker containers, you can package any dependency your application requires and ensure it always runs as intended. Docker containers on AWS Lambda can be up to 10GB in size, which is plenty of space for the vast majority of applications. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#longrunning-tasks"&gt;
  &lt;/a&gt;
  Long-Running Tasks
&lt;/h2&gt;

&lt;p&gt;If your code is doing some sort of batch processing - processing DynamoDB events, filtering an Amazon Kinesis stream, generating large images, etc. - you'll need to concern yourself with execution times. Lambda functions can only run for up to 15 minutes before the service will time out. By contrast, Docker containers have no built-in limitations on workload runtimes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deployment-and-management"&gt;
  &lt;/a&gt;
  Deployment and Management
&lt;/h2&gt;

&lt;p&gt;As I mentioned earlier, Docker provides a simple and easy-to-understand deployment model that enables packaging a single microservice into a single Docker container. This is where AWS Lambda has often been at a disadvantage: since Lambda is a function-based service, it's proven more challenging to manage an entire service or application as a collection of interconnected Lambda functions. &lt;/p&gt;

&lt;p&gt;Fortunately, new tools have come out over the past several years to address exactly this problem.  &lt;a href="https://aws.amazon.com/serverless/sam/"&gt;AWS's Serverless Application Model (SAM)&lt;/a&gt;  enables developers to design, develop, and deploy entire serverless apps directly onto AWS using Lambda and CloudFormation. Other tools, such as the open-source project  &lt;a href="https://www.serverless.com/"&gt;Serverless&lt;/a&gt;, aim to create similar zero-infrastructure deployment experiences for serverless applications on AWS and other cloud providers. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cost"&gt;
  &lt;/a&gt;
  Cost
&lt;/h2&gt;

&lt;p&gt;In general, a "serverless" solution is going to cost you more than a non-serverless solution. We at TinyStacks discovered this recently  &lt;a href="https://blog.tinystacks.com/ecs-serverless-or-not-fargate-vs-ec2-clusters"&gt;when we moved all of our container workloads from Fargate to our own ECS EC2 clusters&lt;/a&gt;, resulting in a cost savings of 40%. &lt;/p&gt;

&lt;p&gt;While we haven't done any direct cost comparisons with AWS Lambda, evidence from others suggests that it's one of the least cost-effective solutions going. An analysis this year by Eoin Shanaghy and Steef-Jan Wiggers on InfoQ  &lt;a href="https://www.infoq.com/articles/aws-lambda-price-change/"&gt;found that running a workload on AWS Lambda can cost up to 7.5 times more&lt;/a&gt;  than running the same workload on AWS Fargate with spot capacity. Given that we manage to run our workloads at a 40% discount on EC2 clusters compared to AWS Fargate, this shows you just how pricey Lambda really is.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#our-recommendation"&gt;
  &lt;/a&gt;
  Our Recommendation
&lt;/h1&gt;

&lt;p&gt;For large-scale microservice workloads, we've found that running Docker containers on our own tightly managed EC2 cluster using ECS to be the ideal solution. &lt;/p&gt;

&lt;p&gt;You may get good mileage from using Lambda selectively for smaller-scale workloads. However, we would recommend implementing your code in Docker containers wherever possible - even when Lambda is your preferred deployment mechanism. Docker containers not only port well across cloud providers but can also be used with numerous AWS services. This makes it easy to change your deployment and hosting strategy in response to your company's changing needs. &lt;/p&gt;

</description>
      <category>aws</category>
      <category>docker</category>
      <category>devops</category>
      <category>programming</category>
    </item>
    <item>
      <title>Product developers‚Äô guide to getting started with AI ‚Äî Part 2: Surfing through dataframes</title>
      <author>Mage</author>
      <pubDate>Thu, 23 Sep 2021 19:05:44 +0000</pubDate>
      <link>https://dev.to/mage_ai/product-developers-guide-to-getting-started-with-ai-part-2-surfing-through-dataframes-c7d</link>
      <guid>https://dev.to/mage_ai/product-developers-guide-to-getting-started-with-ai-part-2-surfing-through-dataframes-c7d</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;Surfing through data is a quick and simple way to put all relevant information on the top. To go from a searching experience to a surfing experience, all it takes is a strong filtering, sorting, and grouping procedure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Before we begin&lt;/li&gt;
&lt;li&gt;Filtering dataframes&lt;/li&gt;
&lt;li&gt;Conditions&lt;/li&gt;
&lt;li&gt;Grouping dataframes&lt;/li&gt;
&lt;li&gt;Sorting dataframes&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In the past, people had to use the &lt;a href="https://www.britannica.com/science/Dewey-Decimal-Classification"&gt;Dewey Decimal System&lt;/a&gt; in order to discover new information to answer questions and perform research. It was a tedious and monotonous process that required you to pick a topic, then look through each in an unchanging order. Following the Dewey Decimal System, the search results for a person looking for answers on ‚ÄúHow to cook‚Äù is the exact same for another, even when they are looking for a different answer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8eHULzwy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/icmz4t94o1hhq31ilcqo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8eHULzwy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/icmz4t94o1hhq31ilcqo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;(Source: Reddit)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Nowadays, when people have a question or want to learn, they surf the web to find an answer. You found this article and clicked it probably because it has the answers to what you‚Äôre looking for. Search engines visit sites that collect tons of data and employ techniques to decide which piece of data goes on top.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G8TtzhHU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogtwb3vxm8chpnd7mpc2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G8TtzhHU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogtwb3vxm8chpnd7mpc2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To surf through a dataframe follow these 3 steps: filter, order, and group. This transforms your user experience from searching to surfing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-we-begin"&gt;
  &lt;/a&gt;
  Before we begin
&lt;/h2&gt;

&lt;p&gt;In this guide, we‚Äôll be using the &lt;a href="https://github.com/pandas-dev/pandas/tree/master/doc/data/titanic.csv"&gt;Titanic dataset&lt;/a&gt; along with &lt;a href="https://colab.research.google.com/"&gt;Google Collab&lt;/a&gt;. We‚Äôll import the dataset, look at the metadata to find the best filters, then slice groups of data down in order to cleanly surf. If you need a refresher on anything mentioned above, please refer back to &lt;a href="https://m.mage.ai/product-developers-guide-to-getting-started-with-ai-part-1-introduction-to-dataframes-481c305d189"&gt;part 1&lt;/a&gt; to learn how to set up the environment and view metadata.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d8TjOpJ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44uf05i5ix895qechttv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d8TjOpJ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44uf05i5ix895qechttv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#filtering-dataframes"&gt;
  &lt;/a&gt;
  Filtering Dataframes
&lt;/h2&gt;

&lt;p&gt;Back on the Titanic, everyone is boarding the ship and you find a ticket on the floor. But it doesn‚Äôt say anything else about the name of the person on it. From the writing you can see the 1st 4 digits, 3734, with the remaining being too dirty to figure out. Being the good samaritan that you are, you tell the staff and begin your search for the owner.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EgbTnWja--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x16art4jvcrdqroh8u3m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EgbTnWja--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x16art4jvcrdqroh8u3m.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs examine entries of the dataframe for the ticket and the name.&lt;/p&gt;

&lt;p&gt;To select specifically two columns we can use what we learned in part 1 with loc and iloc, or we may use items. In Pandas, the filter method takes in the items method in order to display columns. For the case of the Ticket, we want to display the ‚ÄòName‚Äô and ‚ÄòTicket‚Äô Column. If you are unfamiliar with this, refer back to &lt;a href="https://m.mage.ai/product-developers-guide-to-getting-started-with-ai-part-1-introduction-to-dataframes-481c305d189"&gt;part 1&lt;/a&gt; and use info to find the metadata.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tCxq_RYP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/488rehh5igyo3dhot3z8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tCxq_RYP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/488rehh5igyo3dhot3z8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When comparing strings a great filter to use is contains. In this case we check if the ticket number contains 3734.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5OHZJvk8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5akap3vhxbvnuau53gk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5OHZJvk8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5akap3vhxbvnuau53gk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We see that the owner is a young man named William Henry Allen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--86NJk5vS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rx927bar6n1rvv7pwd4b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--86NJk5vS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rx927bar6n1rvv7pwd4b.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great job! We found him, but he looks lost. We chat with William, and he has a request for us. He got separated at the checkpoint and needs help locating his business partners. He forgot their names, but recalls that they‚Äôre a group of 4 middle-aged men embarking in group Q.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JiWuLz7e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6emml6v6fxy16es7fjqg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JiWuLz7e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6emml6v6fxy16es7fjqg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have a new problem, but unlike the ticket, this time all we know is that we‚Äôre searching for middle-aged men in group Q. None of these values are unique so we can‚Äôt only filter. We‚Äôll need to start expanding our search repertoire with conditionals.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conditions"&gt;
  &lt;/a&gt;
  Conditions
&lt;/h2&gt;

&lt;p&gt;Similar to other programming languages, Pandas supports filtering with conditional operators. There are 2 types of operators we will be focusing on, relational and logical. In Pandas, to apply a condition to a dataframe, the syntax is df[(‚Äúconditions‚Äù)].&lt;/p&gt;

&lt;p&gt;The relational operators are &amp;gt; (greater than), &amp;gt;= (greater than or equal to), &amp;lt; (less than), &amp;lt;= (less than or equal to) , == (equals), != (not equals) and are used to search through a dataframe by comparing all values in a column with a fixed value. Then, to compare multiple columns we chain the conditionals of relational operators together with logical operators &amp;amp; (and), | (or) , ~ (not).&lt;/p&gt;

&lt;p&gt;To find all middle-aged men in group Q, let‚Äôs break it down into 2 parts. The 1st part is to capture all the people in group Q. We can use a single relational operator on the embarked column, df[‚ÄòEmbarked] == ‚ÄòQ‚Äô. For the males, df[‚ÄòSex‚Äô] == ‚Äòmale‚Äô. Alternatively, we can use ‚Äúnot‚Äù to invert it as df[‚ÄòSex ~== ‚Äòfemale‚Äô. Finally we chain the conditionals together using &amp;amp; (AND) to get all males in group Q.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ar5MWf4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uh6vh79s9st193jluhfc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ar5MWf4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uh6vh79s9st193jluhfc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Additionally, use these (see info) boolean operators to compare dataframes.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#grouping-dataframes"&gt;
  &lt;/a&gt;
  Grouping Dataframes
&lt;/h2&gt;

&lt;p&gt;The data is reduced. We begin analysis on how many are in our search space that match what we‚Äôre looking for. In this case we‚Äôre searching for the right age range.&lt;/p&gt;

&lt;p&gt;Groupby is useful to get the count of how many values match, and from there we can begin slicing the data with head. Start by breaking down the ages into 3 groups, adolescent to adulthood, middle-aged, and senior. Then define rules for the 3 groups. The ranges will be 0‚Äì31, 32‚Äì55, and 56+ respectively. We know that age must be defined, so we clear up all empty age values. The ‚Äò[‚Äò is inclusive and ‚Äò(‚Äò is exclusive.&lt;/p&gt;

&lt;p&gt;Create a range of bins and pass it as a parameter for groupby. Use groupby to find the rows of middle-aged and extract.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6BZIGTns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lhwot9csocq5jpqwoht0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6BZIGTns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lhwot9csocq5jpqwoht0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Cut down the data into chunks of 0‚Äì31, 32‚Äì55, and 56+&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sorting-dataframes"&gt;
  &lt;/a&gt;
  Sorting Dataframes
&lt;/h2&gt;

&lt;p&gt;The 4 fellows we are looking for are in the middle of the dataframe. We sort it in order and slice specifically starting from 9 to 13 (9+4) to find only the middle-aged men in group Q.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BWX7Tqw9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4o4m2ky9gtzit7iwj1h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BWX7Tqw9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4o4m2ky9gtzit7iwj1h.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There we have it! We‚Äôve reduced the search space from 891 passengers aboard the ship all the way down to 4. Inspecting the dataframe, we see that there are 4 possible people.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P5sSh6EX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7a565f7jcvvwh9eljfl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P5sSh6EX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7a565f7jcvvwh9eljfl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Mr. Patrick Dooley, Mr. John Bourke, Mr. James Farrell, and Dr. William Edward Minahan&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;William should be able to reunite with his partners now. Just in time as the foghorn blows and the ship begins to sail off. Stay tuned for what happens to the Titanic as it embarks across the sea. We‚Äôll take a deeper look, in part 3, ‚ÄúTerraforming Dataframes‚Äù.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VrDwDryL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fm286y69x9url19l7ls.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VrDwDryL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fm286y69x9url19l7ls.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;(Source: dearworldlovehistory.com)&lt;/em&gt;&lt;/p&gt;

</description>
      <category>ai</category>
      <category>artificialintelligence</category>
      <category>dataframes</category>
      <category>deved</category>
    </item>
  </channel>
</rss>
