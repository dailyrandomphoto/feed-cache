<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What's the programming language to learn first?</title>
      <author>Vik 📈</author>
      <pubDate>Fri, 19 Nov 2021 07:01:37 +0000</pubDate>
      <link>https://dev.to/heyvik/whats-the-programming-language-to-learn-first-3ifo</link>
      <guid>https://dev.to/heyvik/whats-the-programming-language-to-learn-first-3ifo</guid>
      <description>&lt;p&gt;First of all, there is no BEST programming language to learn first. It always depend on what you want to do with that language, still, whether you want to choose programming as a hobby, as a career you have to first choose which programming language you have to learn.&lt;/p&gt;

&lt;p&gt;In this blog I will give you some options, so you can decide which programming language you could learn as your first programming language.&lt;/p&gt;

&lt;p&gt;Following me on twitter helps me a lot &lt;a href="https://twitter.com/vikstack"&gt;Follow Now&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h4&gt;

&lt;p&gt;Being one of the most popular language out there. It is used in a variety of websites including Gmail, Spotify, Facebook, and Instagram and many more. It can communicate with HTML and CSS. It is a must have when adding interactivity to websites.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#why-choose-javascript"&gt;
  &lt;/a&gt;
  Why choose JavaScript?
&lt;/h5&gt;

&lt;p&gt;If you want to try out frontend development, or even backend, you can choose JavaScript.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python
&lt;/h4&gt;

&lt;p&gt;This is also incredibly famous. Python reads like English and is easy to understand for someone who is just starting to code. Python is ideal to do web development, graphic user interfaces (GUIs), and software development. Python is often thought of as a slow language that requires more testing and is not as practical for developing mobile apps as other languages.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#why-choose-python"&gt;
  &lt;/a&gt;
  Why choose Python?
&lt;/h5&gt;

&lt;p&gt;If you’re looking for something easy, python can be a choice for you.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#c"&gt;
  &lt;/a&gt;
  C
&lt;/h4&gt;

&lt;p&gt;While C is one of the more difficult languages to learn, it’s still an excellent first language pick up because almost all programming languages are implemented in it. This means that once you learn C, it’ll be simple to learn more languages like C++ and C#.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#why-choose-c"&gt;
  &lt;/a&gt;
  Why choose c#?
&lt;/h5&gt;

&lt;p&gt;If you want a solid foundation to make you a master developer, C is a solid choice for you.&lt;/p&gt;

&lt;p&gt;Here was 3 of the most famous and preferred language to use. While Python and JavaScript are for beginners and C is kinda hard to learn. &lt;/p&gt;

&lt;p&gt;Thanks for reading till here. Cheers &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>discuss</category>
    </item>
    <item>
      <title>How to Test Your NGINX Configuration Before Screwing it Up</title>
      <author>Ravgeet Dhillon</author>
      <pubDate>Fri, 19 Nov 2021 06:22:51 +0000</pubDate>
      <link>https://dev.to/ravgeetdhillon/how-to-test-your-nginx-configuration-before-screwing-it-up-2571</link>
      <guid>https://dev.to/ravgeetdhillon/how-to-test-your-nginx-configuration-before-screwing-it-up-2571</guid>
      <description>&lt;p&gt;A little invalid change to your Nginx configuration can bring down your entire server. Before performing changes to the Nginx configuration, it is a safe idea to test the changes and then reload the server.&lt;/p&gt;

&lt;p&gt;In this tutorial, you'll learn to get started ensuring you never take production down again!&lt;/p&gt;

&lt;p&gt;Read the full blog on &lt;a href="https://adamtheautomator.com/nginx-test-config/"&gt;Adam The Automator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading 💜&lt;/p&gt;




&lt;p&gt;I publish a &lt;a href="https://www.ravsam.in/newsletter/"&gt;monthly newsletter&lt;/a&gt; in which I share personal stories, things that I am working on, what is happening in the world of tech, and some interesting dev-related posts which I across while surfing on the web.&lt;/p&gt;

&lt;p&gt;Connect with me through &lt;a href="https://twitter.com/ravgeetdhillon"&gt;Twitter&lt;/a&gt; • &lt;a href="https://linkedin.com/in/ravgeetdhillon"&gt;LinkedIn&lt;/a&gt; • &lt;a href="https://github.com/ravgeetdhillon"&gt;Github&lt;/a&gt; or send me an &lt;a href="//mailto:ravgeetdhillon@gmail.com"&gt;Email&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;— &lt;a href="https://www.ravgeet.in/"&gt;Ravgeet&lt;/a&gt;, &lt;em&gt;Full Stack Developer and Technical Content Writer&lt;/em&gt;&lt;/p&gt;

</description>
      <category>nginx</category>
      <category>server</category>
      <category>backend</category>
    </item>
    <item>
      <title>React router V6: Some of the new changes</title>
      <author>Gabriel Bittencourt</author>
      <pubDate>Fri, 19 Nov 2021 04:11:54 +0000</pubDate>
      <link>https://dev.to/gabrlcj/react-router-v6-some-of-the-new-changes-181m</link>
      <guid>https://dev.to/gabrlcj/react-router-v6-some-of-the-new-changes-181m</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---dvPKy6Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AID7KJ8DuspcjB343" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---dvPKy6Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AID7KJ8DuspcjB343" alt="ReactRouter" width="880" height="440"&gt;&lt;/a&gt;&lt;br&gt;
So not too long ago the library React Router has updated to version 6 and with that it came with some interesting changes that I notice and see people talking about, so I'm gonna describe some of them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you want to upgrade the version from 5 to 6 you can by seeing this link &lt;a href="https://reactrouter.com/docs/en/v6/upgrading/v5"&gt;Upgrading React Router V5 to V6&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#first-what-is-react-router"&gt;
  &lt;/a&gt;
  First what is React Router?
&lt;/h3&gt;

&lt;p&gt;React Router is a package for routing in React.js, as the documentation said &lt;em&gt;"React Router is a fully-featured client and server-side routing library for React, a JavaScript library for building user interfaces. React Router runs anywhere React runs; on the web, on the server with node.js, and on React Native."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So now that we know the basics of it, let's talk about some new changes it had.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#replacing-switch-component-with-routes"&gt;
  &lt;/a&gt;
  Replacing Switch component with Routes
&lt;/h3&gt;

&lt;p&gt;If you have ever used React Router you know that we need to wrap our routes into this Switch component that makes sure that only one of these routes is loaded at the same time, instead of all matching routes. Something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/about"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AboutPage&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;exact&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/profile"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ProfilePage&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/profile/:id"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ProfileUserPage&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now with V6 we changed the name from Switch to Routes and now the Routes component has a new prop called element, where you pass the component it needs to render inside this component and be like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/about"&lt;/span&gt; &lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AboutPage&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;exact&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/profile"&lt;/span&gt; &lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ProfilePage&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/profile/:id"&lt;/span&gt; &lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ProfileUserPage&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#internal-changes-amp-path-evaluation-no-more-needed-exact-prop"&gt;
  &lt;/a&gt;
  Internal changes &amp;amp; path evaluation (no more needed exact prop)
&lt;/h3&gt;

&lt;p&gt;So with this new version some internal changes were made and the evaluation that React Router does for these paths and then picking a route to load changed. For V5 we needed to put the exact prop on the component to go for that specific route we want, like this in the Profile path below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/about"&lt;/span&gt; &lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AboutPage&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;exact&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/profile"&lt;/span&gt; &lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ProfilePage&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/profile/:id"&lt;/span&gt; &lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ProfileUserPage&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we not put that exact prop it will render the path that starts with that path we pass and that's not what we wanted, now with V6 we don't need this prop anymore because React Router will always look for the exact path we pass, being like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/about"&lt;/span&gt; &lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AboutPage&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/profile"&lt;/span&gt; &lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ProfilePage&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/profile/:id"&lt;/span&gt; &lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ProfileUserPage&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's talk about the Link component that we have, that still is on V6&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#navlink-activeclassname-prop-does-not-exists-anymore"&gt;
  &lt;/a&gt;
  NavLink activeClassName prop does not exists anymore
&lt;/h3&gt;

&lt;p&gt;With that prop you could pass a class for that specific Link to be modified with some CSS to show that it's became active, like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NavLink&lt;/span&gt; &lt;span class="na"&gt;activeClassName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"active"&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/about"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NavLink&lt;/span&gt; &lt;span class="na"&gt;activeClassName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"active"&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/profile"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With V6 you have to manually do that and you can by passing a function to the className prop we have on React, like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NavLink&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;navData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;navData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isActive&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/about"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NavLink&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;navData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;navData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isActive&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/profile"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the React Router provides you the navData argument and it's an object and inside has the isActive property that will be true if the route is active in that moment&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-useparams-hook"&gt;
  &lt;/a&gt;
  The useParams hook
&lt;/h3&gt;

&lt;p&gt;This hook from V5 has not changed from V6, you can still use it the same way, passing parameters to match a specific URL you're trying to match.&lt;/p&gt;

&lt;p&gt;Well these are some of the changes React Router had, if you wanna see more of these changes you can see this video from Academind where he talks about it &lt;a href="https://www.youtube.com/watch?v=zEQiNFAwDGo&amp;amp;t=326s&amp;amp;ab_channel=Academind"&gt;Here&lt;/a&gt; or by reading the documentation &lt;a href="https://reactrouter.com/"&gt;Here&lt;/a&gt;. I see you next time, thanks!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to Contribute to Codecademy Docs</title>
      <author>Brandon Dusch</author>
      <pubDate>Fri, 19 Nov 2021 03:34:10 +0000</pubDate>
      <link>https://dev.to/dusch4593/how-to-contribute-to-codecademy-docs-1a77</link>
      <guid>https://dev.to/dusch4593/how-to-contribute-to-codecademy-docs-1a77</guid>
      <description>&lt;p&gt;Hello, #DEVCommunity! My name is Brandon and I'm a Content Contributor from the Free Team at &lt;a href="https://www.codecademy.com/"&gt;Codecademy&lt;/a&gt;. For the past few months, we've collaborated in a company-wide effort and delved into the world of &lt;a href="https://en.wikipedia.org/wiki/User-generated_content"&gt;user-generated content (UGC)&lt;/a&gt; as it relates to code documentation. This post talks about that product, &lt;a href="https://www.codecademy.com/resources/docs"&gt;Codecademy Docs&lt;/a&gt; and how to contribute! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-docs"&gt;
  &lt;/a&gt;
  What is Docs?
&lt;/h3&gt;

&lt;p&gt;Codecademy Docs is a free, open-contribution resource that has an ever-growing collection of entries spanning many languages and frameworks, including: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;SQL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Currently, more than 650 entries have been submitted and edited by learners from across the world... and counting! Docs was also recently added on &lt;a href="https://www.producthunt.com/posts/codecademy-docs"&gt;Product Hunt&lt;/a&gt; and has already amassed over 150 upvotes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h3&gt;

&lt;p&gt;Docs is built by the community and maintained by Codecademy. Every time a new/edited entry goes live, all the contributors involved are credited on the "Contributors" list for that entry.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#docs-github-repo"&gt;
  &lt;/a&gt;
  Docs Github repo
&lt;/h4&gt;

&lt;p&gt;All of the changes to Docs are housed in &lt;a href="https://github.com/Codecademy/docs"&gt;the &lt;strong&gt;Codecademy/docs&lt;/strong&gt; repo&lt;/a&gt; on GitHub. &lt;/p&gt;

&lt;p&gt;The "Pull requests" tab contains any open PRs pertaining to Docs entries.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#answering-an-issue"&gt;
  &lt;/a&gt;
  Answering an issue
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://github.com/Codecademy/docs/issues"&gt;Issues&lt;/a&gt; are ideally created by Docs maintainers in the "Issues" tab to request new entries, edits, or bug fixes. However, this is the place where many contributors go to pick a subject that is appealing and create entries about them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Ave5c1X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1asaiikwc2vcz5wnhtzy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Ave5c1X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1asaiikwc2vcz5wnhtzy.png" alt="Screenshot of issues tab for Codecademy Docs repository on GitHub." width="880" height="426"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you see an issue that you'd like to work on, select it and leave a comment on the thread. Someone from our team will reach out!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-new-entry"&gt;
  &lt;/a&gt;
  Creating a new entry
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#1-fork-the-docs-repo-and-clone-locally"&gt;
  &lt;/a&gt;
  1. Fork the Docs repo and clone locally
&lt;/h4&gt;

&lt;p&gt;To mitigate any conflicts when merging changes, we recommend that you fork the &lt;strong&gt;Codecademy/docs&lt;/strong&gt; repo. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pOigHo74--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucvdgc5us7ujvp1cwii7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pOigHo74--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucvdgc5us7ujvp1cwii7.png" alt='Screenshot of "Watch", "Star", and "Fork" options on Codecademy Docs repository.' width="858" height="92"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From your forked Docs repo (or your &lt;em&gt;remote repo&lt;/em&gt;), you can then clone it onto your local machine using the repo URL (I usually go with the HTTPS one). This will create your &lt;em&gt;local repo&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/github_username/docs.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before working on any new changes, always make sure sure that your forked &lt;code&gt;main&lt;/code&gt; branch is even with the original &lt;code&gt;Codecademy/docs:main&lt;/code&gt; branch. You do this by clicking "Fetch Upstream" -&amp;gt; "Fetch and Merge" on your remote repo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZMWOrdIq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbwghq1eqfiiutq070es.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZMWOrdIq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbwghq1eqfiiutq070es.png" alt='Screenshot of remote forked repository and green "Fetch and Merge" button' width="880" height="279"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, &lt;code&gt;pull&lt;/code&gt; those changes down to your local repo (make sure you're on your &lt;code&gt;main&lt;/code&gt; branch):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout main
git pull
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2-create-and-switch-into-separate-branch"&gt;
  &lt;/a&gt;
  2. Create and switch into separate branch
&lt;/h4&gt;

&lt;p&gt;Another important part of contributing to the Docs repo is to &lt;strong&gt;never&lt;/strong&gt; push changes from your forked repo's &lt;code&gt;main&lt;/code&gt; branch. This is because reviewers and maintainers may want to test your changes on their own forks. However, they can't do this if the name of the branch they're pulling from is also called &lt;code&gt;main&lt;/code&gt;. Therefore, do the following, always create and switch into a separate branch before editing files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout -b separate-branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#3-editsave-files"&gt;
  &lt;/a&gt;
  3. Edit/save file(s)
&lt;/h4&gt;

&lt;p&gt;In this step, go ahead and make all the necessary changes to all related files. Then save them afterwards.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-run-raw-add-endraw-raw-commit-endraw-then-raw-push-endraw-to-separate-branch"&gt;
  &lt;/a&gt;
  4. Run &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;commit&lt;/code&gt;, then &lt;code&gt;push&lt;/code&gt; to separate branch
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; I run &lt;code&gt;git status&lt;/code&gt; before following this step just to see which files are staged vs. unstaged for commit. &lt;/p&gt;

&lt;p&gt;When finished making changes, we can add (or stage) the files for commit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add &amp;lt;space-separated list of files here&amp;gt;
git commit -m "brief summary of changes."
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This next part is crucial: we're gonna &lt;code&gt;push&lt;/code&gt; the changes up to the branch we created in the last step.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push origin separate-branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will cause a remote-equivalent of the branch to be created on GitHub and, by extension, trigger a prompt to create a new pull request. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HyzoOPs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oj8d9g3l6ngc247ai613.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HyzoOPs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oj8d9g3l6ngc247ai613.png" alt="Screenshot of remote, forked Codecademy Docs repository with pull request prompt." width="880" height="282"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;origin&lt;/code&gt; remote is the connection between your local repo and the remote repo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote -v
origin  https://github.com/github_username/docs.git (fetch)
origin  https://github.com/github_username/docs.git (push)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#editing-an-existing-entry"&gt;
  &lt;/a&gt;
  Editing an existing entry
&lt;/h3&gt;

&lt;p&gt;There are two distinct methods for editing an existing Docs entry:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By following the same steps listed in the previous section.&lt;/li&gt;
&lt;li&gt;By editing the file and committing the changes directly on GitHub.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the second method, a great place to start is from a live entry on the Docs site.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bAM_ItUO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a9kcczg7ky2a3gtl2m35.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bAM_ItUO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a9kcczg7ky2a3gtl2m35.png" alt='Screenshot of a live Codecademy Docs entry showcasing the "Edit this page on GitHub" link' width="880" height="545"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Near the top-right corner of the page for any Docs entry is a link to the equivalent file on the Docs repo, ready for editing!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---EMCrJaH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xmdjedtk3pphz1hktffh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---EMCrJaH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xmdjedtk3pphz1hktffh.png" alt="Screenshot of TypeScript generics entry file in edit-mode" width="880" height="395"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After making changes, scroll down near the bottom to find a prompt for committing the changes and submitting a pull request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rdVvp_RC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73exx84qlgib36so7ny7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rdVvp_RC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73exx84qlgib36so7ny7.png" alt="Screenshot of TypeScript entry in edit-mode with commit prompt" width="880" height="315"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Inside this prompt, you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Give the commit a specific name and description.&lt;/li&gt;
&lt;li&gt;Custom-name the separate branch that will be auto-created by the prompt.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#handling-bugs-and-errors"&gt;
  &lt;/a&gt;
  Handling bugs and errors
&lt;/h3&gt;

&lt;p&gt;For bugs and errors, your options include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reporting it by filling out &lt;a href="https://github.com/Codecademy/docs/issues/new?assignees=Name+here&amp;amp;labels=bug&amp;amp;template=bug_reports.yml&amp;amp;title=%5BBug%2FError%5D+Subject+%3A+Entry+Name"&gt;this issue form&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Follow the steps outlined earlier in the "Editing an existing entry" section.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;At this point, you will have committed/pushed your changes and submitted a pull request to be reviewed by either me or one of my colleagues. After we've approved and merged the changes, congratulations! You've just made your first contribution on Codecademy Docs!&lt;/p&gt;

&lt;p&gt;I hope this post was help to anyone interested in building the next best documentation resource. I'm excited to have helped build this project and I hope you'll come and help us build it more!&lt;/p&gt;

&lt;p&gt;To hear any updates with Docs, go to #codecademydocs on Twitter. And please feel free to leave us any feedback about Docs &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSeqwAiV8C2EjXciqTvPFI-ABxkh9iyy7HL-hnr69GrRW99MiA/viewform"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>firstpost</category>
      <category>codecademy</category>
      <category>github</category>
      <category>markdown</category>
    </item>
    <item>
      <title>Redux Toolkit React Counter App</title>
      <author>Ravi Sharma</author>
      <pubDate>Fri, 19 Nov 2021 03:15:45 +0000</pubDate>
      <link>https://dev.to/ravics09/redux-toolkit-react-counter-app-nmm</link>
      <guid>https://dev.to/ravics09/redux-toolkit-react-counter-app-nmm</guid>
      <description>&lt;p&gt;Hi, I'm Ravi. I'm an JavaScript Developer by profession and a Youtuber also, subscribe my channel &lt;a href="https://www.youtube.com/channel/UC9MmyicGIveu0AId8OFAOmQ"&gt;JavaScript Centric&lt;/a&gt; If you are one of the lover of JavaScript.&lt;/p&gt;

&lt;p&gt;In this post I will share the basic example of a Counter App implemented using react and redux toolkit.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-use-redux-toolkit"&gt;
  &lt;/a&gt;
  Why use Redux Toolkit? 🤷‍♂️
&lt;/h1&gt;

&lt;p&gt;Redux toolkit includes all the functions or "tools", you want for a Redux application. At the end of the day, less code and faster setups of Redux in every scenario.&lt;/p&gt;

&lt;p&gt;Here's what the Official docs said :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;These tools should be beneficial to all Redux users. Whether you're a brand new Redux user setting up your first project, or an experienced user who wants to simplify an existing application, Redux Toolkit can help you make your Redux code better.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#create-a-react-app"&gt;
  &lt;/a&gt;
  Create a react app
&lt;/h1&gt;

&lt;p&gt;Create-react-app gives you a basic React app so don't have to setup React yourself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app readuxtoolkit_app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to add react-redux and Redux Toolkit to this app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save react-redux @reduxjs/toolkit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can install react-bootstrap also:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save react-bootstrap
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#folder-structure"&gt;
  &lt;/a&gt;
  Folder Structure
&lt;/h1&gt;

&lt;p&gt;We will be following this folder structure. Create two folders app and features inside src folder. Inside app folder create file store.js and inside features folder create two other folders coin and counter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1DUG-rLb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/elpna4fvttjjoq6h2ssi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1DUG-rLb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/elpna4fvttjjoq6h2ssi.png" alt="Basic React , Redux Toolkit Directory Structure" width="595" height="1415"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#steps-to-follow"&gt;
  &lt;/a&gt;
  Steps To Follow
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Create a Redux Store&lt;/li&gt;
&lt;li&gt;Provide the Redux Store to React Main App.js&lt;/li&gt;
&lt;li&gt;Create a Redux State Slice&lt;/li&gt;
&lt;li&gt;Add Slice Reducers to the Store&lt;/li&gt;
&lt;li&gt;Use Redux State and Actions in React Component&lt;/li&gt;
&lt;li&gt;To use redux state in other component use useSelector hook from react-redux&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1.First Step is to configure our Store, now this is where you'll see the magic of redux toolkit! Now your redux store src/app/store.js will contains&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { configureStore } from '@reduxjs/toolkit';

export const store = configureStore({
  reducer: {

  },
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here configureStore({}) wraps createStore to provide simplified configuration options and good defaults. It can automatically combine your slice reducers, adds whatever Redux middleware you supply, includes redux-thunk by default, and enables use of the Redux DevTools Extension.&lt;/p&gt;

&lt;p&gt;2.Now we need to connect our store to our app or just wrap it with Redux. Import store.js and Provider from react-redux into src/index.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { store } from "./app/store";
import { Provider } from "react-redux";

ReactDOM.render(
    &amp;lt;React.StrictMode&amp;gt;
        &amp;lt;Provider store={store}&amp;gt;
            &amp;lt;App /&amp;gt;
        &amp;lt;/Provider&amp;gt;
    &amp;lt;/React.StrictMode&amp;gt;,
    document.getElementById("root")
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now start your application with npm start and open up Redux DevTools, you should see @@INIT. Congrats you have setup Redux with React!! 🥳️&lt;/p&gt;

&lt;p&gt;3.Third Step is to create a counterSlice.js file inside features/counter folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { createSlice } from '@reduxjs/toolkit'

const initialStateValues = {
  coin: 0,
}

export const counterSlice = createSlice({
  name: 'counter',
  initialState: initialStateValues,
  reducers: {
    increment: (state) =&amp;gt; {
      state.coin += 1
    },
    decrement: (state) =&amp;gt; {
      state.coin -= 1
    },
    incrementByAmount: (state, action) =&amp;gt; {
      state.coin += action.payload
    },
    decrementByAmount: (state, action) =&amp;gt; {
      state.coin -=action.payload
    }
  },
})

// Action creators are generated for each case reducer function
export const { increment, decrement, incrementByAmount, decrementByAmount } = counterSlice.actions

export default counterSlice.reducer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically createSlice accepts an object of reducer functions, a slice name( in our case slice name is 'counter') and an initialState(here initialStateValues that contains coin) and automatically generates a slice reducer with corresponding action creators and action types.&lt;/p&gt;

&lt;p&gt;4.Fourth Step is to Add Slice Reducers to the Store. So update store.js will look like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { configureStore } from '@reduxjs/toolkit';
import counterReducer from './../features/counter/counterSlice';

export const store = configureStore({
  reducer: {
      counter: counterReducer
  },
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case if you are using other reduces than you have to use combineReducers from redux as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { configureStore } from "@reduxjs/toolkit";
import counterReducer1 from "./../features/counter/counterSlice1";
import counterReducer2 from "./../features/counter/counterSlice2";

import { combineReducers } from "redux";

const reducer = combineReducers({
  // put all your reducers here!
  counterReducer1,
  counterReducer2,
});

export const store = configureStore({
  reducer,
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;5.To use actions in other component we have to use useDispatch() provided by "react-redux" and used to dispatch our actions like&lt;br&gt;&lt;br&gt;
&lt;code&gt;const dispatch = useDispatch();&lt;/code&gt;&lt;br&gt;
now call dispatch action by passing action name inside it.&lt;br&gt;
In features/counter/Counter.js we are using different actions like (increment, decrement, incrementByAmount, decrementByAmount).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useDispatch } from "react-redux";
import {
  increment,
  decrement,
  incrementByAmount,
  decrementByAmount,
} from "./counterSlice";
import Button from 'react-bootstrap/Button';
import 'bootstrap/dist/css/bootstrap.min.css';

const Counter = () =&amp;gt; {
  const dispatch = useDispatch();
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;hr /&amp;gt;
      &amp;lt;Button
        aria-label="Increment value"
        onClick={() =&amp;gt; {
          dispatch(increment());
        }}
        variant="success"
        className="mx-2"
      &amp;gt;
        Increase
      &amp;lt;/Button&amp;gt;

      &amp;lt;Button
        className="button"
        aria-label="Decrement value"
        onClick={() =&amp;gt; {
          dispatch(decrement());
        }}
        variant="danger"
        className="mx-2"
      &amp;gt;
        Decrease
      &amp;lt;/Button&amp;gt;

      &amp;lt;Button
        className="button"
        aria-label="Decrement value"
        onClick={() =&amp;gt; {
          dispatch(incrementByAmount(10));
        }}
        variant="success"
        className="mx-2"
      &amp;gt;
        IncrementBy 10
      &amp;lt;/Button&amp;gt;

      &amp;lt;Button
        className="button"
        aria-label="Decrement value"
        onClick={() =&amp;gt; {
          dispatch(decrementByAmount(10));
        }}
        variant="danger"
        className="mx-2"
      &amp;gt;
        DecrementBy 10
      &amp;lt;/Button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};
export default Counter;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;6.To use redux state in other component use useSelector hook from react-redux like in features/coin/Coin.js.&lt;/p&gt;

&lt;p&gt;Remember the name of our reducer we imported in counterSlice.js, that's the name we have to use when using the useSelector() hook. &lt;/p&gt;

&lt;p&gt;It receives our state in arguments and then we can extract every other variable in our state with the help of destructuring like below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {useSelector} from 'react-redux';
const Coin = () =&amp;gt; {
  const {coin} = useSelector((state)=&amp;gt;state.counter);
  return (
    &amp;lt;div style={{paddingTop: '200px'}}&amp;gt;
      &amp;lt;b&amp;gt;&amp;lt;big className="value"&amp;gt;Coins: {coin}&amp;lt;/big&amp;gt;&amp;lt;/b&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};

export default Coin;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now in your Terminal, to start your React app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#congrats-you-made-it-%EF%B8%8F"&gt;
  &lt;/a&gt;
  Congrats you made it! 🥳️
&lt;/h1&gt;

&lt;p&gt;You have setup React and Redux Toolkit! There are obviously many complex use cases of Redux which I will cover in the upcoming post. &lt;/p&gt;

&lt;p&gt;Subscribe to my youtube channel: &lt;a href="https://www.youtube.com/channel/UC9MmyicGIveu0AId8OFAOmQ"&gt;JavaScript Centric&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like ❤️ and Share 🙏🏻 if you found this post helpful.&lt;/p&gt;

</description>
      <category>redux</category>
      <category>react</category>
      <category>reactnative</category>
      <category>reduxtoolkit</category>
    </item>
    <item>
      <title>Derive Insights from AWS Lake House | AWS White Paper Summary</title>
      <author>Adit Modi</author>
      <pubDate>Fri, 19 Nov 2021 02:19:33 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/derive-insights-from-aws-lake-house-aws-white-paper-summary-2p2m</link>
      <guid>https://dev.to/awsmenacommunity/derive-insights-from-aws-lake-house-aws-white-paper-summary-2p2m</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Organizations collect and analyze increasing amounts of data to make better decisions as quickly as changes occur. Traditional on-premises solutions for data storage, data management, and analytics can no longer keep pace. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Data siloes that aren’t built to work well together make it difficult to consolidate data to perform comprehensive and efficient analytics. This limits an organization’s agility, ability to derive more insights and value from its data, and capability to adopt more sophisticated analytics tools and processes as its needs evolve.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Organizations often build data warehouse and data lake solutions in isolation from each other, each having its own separate data ingestion, storage, management, and governance layers. These disjointed efforts to build separate data warehouse and data lake ecosystems often end up creating data and processing silos, data integration complexity, excessive data movement, and data consistency issues. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;These can lead to delays and increased cost of data-driven decisions, and prevent the deeper insights that come when you analyze all your relevant data together.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#what-is-a-lake-house-architecture"&gt;
  &lt;/a&gt;
  What is a Lake House architecture?
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Many organizations are moving their data from various silos into a data lake, where they have a single place to apply machine learning and analytics. The vast majority of data lakes are built on Amazon Simple Storage Service (Amazon S3). At the same time,&lt;br&gt;
customers are leveraging purpose-built analytics stores that are optimized for specific use cases. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Customers want the freedom to move data between their centralized data lakes and the surrounding purpose-built analytics stores in a seamless, secure, and compliant way, to get insights with speed and agility. We call this modern approach to analytics Lake House architecture.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v6-iLi9m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqw9zpy40v9erwblp9rj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v6-iLi9m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqw9zpy40v9erwblp9rj.png" alt="Image description" width="388" height="337"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lake House architecture is an evolution from data warehouse and data lake-based solutions. The following table lists this evolution from data and performance characteristics. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nSJ4ZPEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9try9vtjab1rsxucib2h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nSJ4ZPEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9try9vtjab1rsxucib2h.png" alt="Image description" width="542" height="291"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-use-aws-for-lake-house-analytics"&gt;
  &lt;/a&gt;
  Why use AWS for Lake House analytics?
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Customers build databases, data warehouses, and data lake solutions in isolation from each other, each having its own separate data ingestion, storage, management, and governance layers. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;These disjointed efforts to build separate data stores often end up creating data silos, data integration complexities, excessive data movement, and data consistency issues. These issues prevent customers from getting deeper insights. To overcome these issues and easily move data around, AWS introduced a Lake House&lt;br&gt;
approach.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS provides a broad platform of managed services to help you build, secure, and seamlessly scale end-to-end data analytics applications quickly by using a Lake House approach. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is no hardware to procure, no infrastructure to maintain and scale—only what you need to collect, store, process, and analyze your data. AWS offers analytical solutions specifically designed to handle this growing amount of data and provide insight into your business.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#aws-purposebuilt-analytics-services"&gt;
  &lt;/a&gt;
  AWS purpose-built analytics services
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AWS gives you the broadest and deepest portfolio of purpose-built analytics services, including Amazon Athena, Amazon EMR, Amazon Elasticsearch Service, Amazon Kinesis, and Amazon Redshift for your unique analytics use cases. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;These services are all designed to be the best, which means you never have to compromise on performance, scale, or cost when using them.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yv-1DgwI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lem67q2u51sincgat6no.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yv-1DgwI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lem67q2u51sincgat6no.png" alt="Image description" width="697" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scalable-data-lakes"&gt;
  &lt;/a&gt;
  Scalable data lakes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Tens of thousands of customers run their data lakes on AWS. Setting up and managing data lakes today involves a lot of manual and time-consuming tasks. AWS Lake Formation automates these tasks so you can build and secure your data lake in days instead of months.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For your data lake storage, Amazon S3 is the best place to build a data lake because it has:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unmatched 99.999999999% of durability and 99.99% availability.&lt;/li&gt;
&lt;li&gt;The best security, compliance, and audit capabilities with object level audit logging and access control.&lt;/li&gt;
&lt;li&gt;The most flexibility with five storage tiers.&lt;/li&gt;
&lt;li&gt;The lowest cost with pricing that starts at less than $1 per TB per month.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;S3 gives you robust capabilities to manage access, cost, replication, and data protection.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g9TttSWU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rlsbzohusfyyujrmjwiu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g9TttSWU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rlsbzohusfyyujrmjwiu.png" alt="Image description" width="559" height="304"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#performance-and-costeffectiveness"&gt;
  &lt;/a&gt;
  Performance and cost-effectiveness
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In addition to industry-leading price performance for analytics services, S3 intelligent tiering saves you up to 70% on storage cost for data stored in your data lake.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon EC2 provides access to an industry-leading choice of over 200 instance types, up to 100 billions of bits per second (Gbps) network bandwidth, and the ability to choose between on-demand, reserved, and spot instances. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With Amazon Redshift RA3 instances with managed storage, you can choose the number of nodes based on your performance requirements, and pay only for the managed storage that you use. Advanced Query Accelerator (AQUA) is an analytics query accelerator for Amazon Redshift that uses custom-designed hardware to speed up queries that scan large datasets.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#seamless-data-movement"&gt;
  &lt;/a&gt;
  Seamless data movement
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;As the data in your data lakes and purpose-built data stores continues to grow, you need to be able to easily move a portion of that data from one data store to another. AWS enables you to combine, move, and replicate data across multiple data stores and
your data lake.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M2dH6hr4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y0s9rnq0v88ukepjz3c1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M2dH6hr4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y0s9rnq0v88ukepjz3c1.png" alt="Image description" width="627" height="279"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#centralized-governance"&gt;
  &lt;/a&gt;
  Centralized governance
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;One of the most important pieces of a modern analytics architecture is the ability for customers to authorize, manage, and audit access to data. This can be challenging, because managing security, access control, and audit trails across all of the data stores in your organization is complex, time-consuming, and error-prone. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With capabilities like centralized access control and policies, and column-level filtering of data, no other analytics provider gives you the governance capability to manage access to all of your data across your data lake and your purpose-built data stores from a single place.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With capabilities like centralized access control and policies combined with column and row-level filtering, AWS gives you the fine-grained access control and governance to manage access to data across a data lake and purpose-built data stores from a single point of control.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#lake-house-architecture-on-aws"&gt;
  &lt;/a&gt;
  Lake House architecture on AWS
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;As data in data lakes, data warehouses, and purpose-built stores continues to grow, it becomes harder to move all this data around. We call this data gravity. To make decisions with speed and agility, you need to be able to use a central data lake and a&lt;br&gt;
ring of purpose-built data services around that data lake. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You also need to acknowledge data gravity by easily moving the data you need between these data stores in a secure and governed way. AWS calls this modern approach to analytics the Lake House&lt;br&gt;
Architecture.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#analytics-patterns-using-a-lake-house-approach-on-aws"&gt;
  &lt;/a&gt;
  Analytics patterns using a Lake House approach on AWS
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Many organizations are moving all their data from various silos into a single location, often called a data lake, to perform analytics and ML. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;These same companies also store data in purpose-built data stores for the performance, scale, and cost advantages they provide for specific use cases.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lake House architecture on AWS provides a strategic vision of how multiple AWS data and analytics services can be combined into a multi-purpose data processing and analytics environment. There are the three analytics patterns you can derive insights from by using a Lake House approach on AWS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inside-out data movement&lt;/li&gt;
&lt;li&gt;Outside-in data movement&lt;/li&gt;
&lt;li&gt;Data movement around the perimeter&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#derive-insights-with-insideout-data-movement"&gt;
  &lt;/a&gt;
  Derive insights with inside-out data movement
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;To get the most from your data lakes and these purpose-built stores, you need to move data between these systems easily. For example, clickstream data from web applications can be collected directly in a data lake and a portion of that data can be
moved out to a data warehouse for daily reporting. We think of this concept as insideout data movement.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--666pQD59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ewq8i9c3ky79tqjl0jn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--666pQD59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ewq8i9c3ky79tqjl0jn.png" alt="Image description" width="336" height="274"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#derive-real-time-eventbased-visualization-insights-from-your-lake-house-with-amazon-redshift-and-amazon-quicksight"&gt;
  &lt;/a&gt;
  Derive real time event-based visualization insights from your Lake house with Amazon Redshift and Amazon QuickSight
&lt;/h3&gt;

&lt;p&gt;The following diagram illustrates the Lake House inside-out data movement with Amazon Redshift and Amazon QuickSight to perform data visualization insights.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x9iggSYn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eetcz0225kjwo54fcpz6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x9iggSYn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eetcz0225kjwo54fcpz6.jpg" alt="Image description" width="683" height="270"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#derive-personacentric-insights-from-your-lake-house-with-aws-glue-databrew-amazon-athena-amazon-redshift-and-amazon-quicksight"&gt;
  &lt;/a&gt;
  Derive persona-centric insights from your Lake House with AWS Glue DataBrew, Amazon Athena, Amazon Redshift, and Amazon QuickSight
&lt;/h3&gt;

&lt;p&gt;The following diagram illustrates the Lake House inside-out data movement with AWS Glue DataBrew, Amazon Athena, Amazon Redshift, and Amazon QuickSight to perform persona-centric data analytics&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--43IpzBm3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptlte7njbuz44asxkwzh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--43IpzBm3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptlte7njbuz44asxkwzh.gif" alt="Image description" width="639" height="308"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#derive-insights-with-outsidein-data-movement"&gt;
  &lt;/a&gt;
  Derive insights with outside-in data movement
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You can also move data in the other direction: from the outside-in. For example, you can copy query results for sales of products in a given Region from your data warehouse into your data lake, to run product recommendation algorithms against a larger data set using machine learning. Think of this concept as outside-in data
movement.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W2uZDwCl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3ubzeb9v25ucgw0jr8r.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W2uZDwCl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3ubzeb9v25ucgw0jr8r.jpg" alt="Image description" width="306" height="241"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#derive-insights-from-amazon-dynamodb-data-for-realtime-prediction-with-amazon-sagemaker"&gt;
  &lt;/a&gt;
  Derive insights from Amazon DynamoDB data for real-time prediction with Amazon SageMaker
&lt;/h3&gt;

&lt;p&gt;The following diagram illustrates the Lake House outside-in data movement with DynamoDB data to derive personalized recommendations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zqtCfglR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8jlcoguem03uxf2ltk7s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zqtCfglR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8jlcoguem03uxf2ltk7s.jpg" alt="Image description" width="570" height="79"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#derive-insights-from-amazon-aurora-data-with-apache-hudi-aws-glue-aws-dms-and-amazon-redshift"&gt;
  &lt;/a&gt;
  Derive insights from Amazon Aurora data with Apache Hudi, AWS Glue, AWS DMS, and Amazon Redshift
&lt;/h3&gt;

&lt;p&gt;The following diagram illustrates the Lake House outside-in data movement with Amazon Aurora Postgres-changed data to derive analytics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xjw5_LLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2d8c49b6vgjn1lw04h5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xjw5_LLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2d8c49b6vgjn1lw04h5.jpg" alt="Image description" width="576" height="222"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#derive-insights-with-moving-data-around-the-perimeter"&gt;
  &lt;/a&gt;
  Derive insights with moving data around the perimeter
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In other situations, you want to move data from one purpose-built data store to another: data movement around-the-perimeter. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For example, you may copy the product catalog data stored in your database to your search service to make it easier to look through your product catalog and offload the search queries from the database. We think of this concept as data movement around the perimeter.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DEkWJYxL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yyubyhn09kqbkvtacej4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DEkWJYxL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yyubyhn09kqbkvtacej4.gif" alt="Image description" width="291" height="258"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#derive-insights-from-your-data-lake-data-warehouse-and-operational-databases"&gt;
  &lt;/a&gt;
  Derive insights from your data lake, data warehouse and operational databases
&lt;/h3&gt;

&lt;p&gt;The following diagram illustrates the “moving the data around the perimeter” Lake House approach with S3, Amazon Redshift, Amazon Aurora PostgreSQL, and Amazon EMR to derive analytics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---upfA3pN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lzlsubh4l8tv4j1nuh6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---upfA3pN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lzlsubh4l8tv4j1nuh6.gif" alt="Image description" width="627" height="347"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#derive-insights-from-your-data-lake-data-warehouse-and-purposebuilt-analytics-stores-by-using-glue-elastic-views"&gt;
  &lt;/a&gt;
  Derive insights from your data lake, data warehouse, and purpose-built analytics stores by using Glue Elastic Views
&lt;/h3&gt;

&lt;p&gt;The following diagram illustrates the “moving the data around the perimeter” Lake House approach with AWS Glue Elastic Views to derive insights.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jr9do65m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32y8rt5kn2zbr3u46dm6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jr9do65m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32y8rt5kn2zbr3u46dm6.gif" alt="Image description" width="568" height="229"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#key-benefits"&gt;
  &lt;/a&gt;
  Key benefits
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Lake House architecture on AWS provides the following key benefits:

&lt;ul&gt;
&lt;li&gt;Unified analytics across operational, data warehouse, and data lake&lt;/li&gt;
&lt;li&gt;Democratizes machine learning with SQL, no ETL needed&lt;/li&gt;
&lt;li&gt;Empowers all personas — use best-fit analytics services&lt;/li&gt;
&lt;li&gt;Security, compliance, and audit capabilities across the data lake&lt;/li&gt;
&lt;li&gt;Cost-effective, durable storage with global replication capabilities&lt;/li&gt;
&lt;li&gt;A comprehensive set of integrated tools enables every user equally&lt;/li&gt;
&lt;li&gt;Centralized management of fine-grained permissions empowers security officers&lt;/li&gt;
&lt;li&gt;Simplified ingestion and cleaning enables data engineers to build faster&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;A Lake House architecture, built on a portfolio of purpose-built services, helps you quickly get insight from all your data to all your users. It enables you to build for the future so you can easily add new analytic approaches and technologies as they become
available.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://d1.awsstatic.com/whitepapers/derive-insights-from-aws-lake-house.pdf?did=wp_card&amp;amp;trk=wp_card"&gt;Original paper&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>datascience</category>
      <category>cloud</category>
      <category>beginners</category>
    </item>
    <item>
      <title>November 18th, 2021: What did you learn this week?</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Fri, 19 Nov 2021 01:29:17 +0000</pubDate>
      <link>https://dev.to/nickytonline/november-18th-2021-what-did-you-learn-this-week-1cjb</link>
      <guid>https://dev.to/nickytonline/november-18th-2021-what-did-you-learn-this-week-1cjb</guid>
      <description>&lt;p&gt;It's that time of the week again. So wonderful devs, what did you learn this week? It could be programming tips, career advice etc.&lt;/p&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/1xpm1nTQiRL96Di3Q6/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/1xpm1nTQiRL96Di3Q6/giphy.gif" alt="A picture it a dog waving their paw with the caption “Learning, cool at school or at home”" width="480" height="270"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;Feel free to comment with what you learnt and/or reference your TIL post to give it some more exposure.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__5305"&gt;
  
    .ltag__tag__id__5305 .follow-action-button{
      background-color: #ffedc9 !important;
      color: #820000 !important;
      border-color: #ffedc9 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/todayilearned" class="ltag__tag__link"&gt;todayilearned&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        Summarize a concept that is new to you.
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>weeklylearn</category>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>Is there a suitable equivalent to `Function.caller` in modern JS?</title>
      <author>Calin Baenen</author>
      <pubDate>Fri, 19 Nov 2021 01:20:19 +0000</pubDate>
      <link>https://dev.to/baenencalin/is-there-a-suitable-equivalent-to-functioncaller-in-js-1kn7</link>
      <guid>https://dev.to/baenencalin/is-there-a-suitable-equivalent-to-functioncaller-in-js-1kn7</guid>
      <description>&lt;p&gt;So, as MDN (Mozilla Developer Network) says, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller"&gt;&lt;code&gt;Function.caller&lt;/code&gt;&lt;/a&gt; is not only deprecated, but removed from the Relevant Web Standards.&lt;br&gt;
But, this isn't good for me, as I want to know what function is calling a function I have.&lt;br&gt;&lt;br&gt;
I have a set of private variables, and I only want "friend functions" to see those variables without having to return every function from another function. (Also because these private variables are user-defined, and thus can't be predicted, or written in advance.)&lt;/p&gt;

&lt;p&gt;So, I was wondering, does modern JS provide anything similar to &lt;code&gt;Function.caller&lt;/code&gt;?&lt;/p&gt;



&lt;center&gt;&lt;h1&gt;Thanks!&lt;br&gt;Cheers!&lt;/h1&gt;&lt;/center&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>help</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Guide to model training: Part 3 — Estimating your missing data</title>
      <author>Mage</author>
      <pubDate>Fri, 19 Nov 2021 00:59:11 +0000</pubDate>
      <link>https://dev.to/mage_ai/guide-to-model-training-part-3-estimating-your-missing-data-5h90</link>
      <guid>https://dev.to/mage_ai/guide-to-model-training-part-3-estimating-your-missing-data-5h90</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;Oftentimes when collecting consumer data, there are times when you’re unable to retrieve all the data. Instead of having a lack of data ruin your results, you’ll want to “guestimate” what the data should be.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Recap&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Before we begin&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What does impute mean?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3 ways to impute&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Impute in Pandas&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next step&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;p&gt;In the &lt;a href="https://www.mage.ai/blog/scaling-numerical-data"&gt;last section&lt;/a&gt;, we completed scaling categorical and numerical data so that all of our data is scaled properly. The higher ups want a list of past customers to target for our sales campaign, so we’re given new data that shows the history of how past customers interacted with our past 4 promotional emails.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_c383C2J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vy4daji5k05bk2z325fb.png" alt="Image description" width="574" height="300"&gt;&lt;em&gt;Big sales are coming soon!&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Using the new data, our goal is to build a model for the remarketing campaign. There’s just one small problem. Code embedded in the marketing campaign email contained bugs, leaving us unable to identify what actions the people who clicked the email took. The bug occurs every 5 emails, but was patched by the 2nd wave of emails. In this section, we’ll go over imputing, a technique used to fill in unknown results.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nm_GTjU---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/elot5gyuy1r5dggj8l06.png" alt="Image description" width="164" height="164"&gt;&lt;em&gt;Bugs poke holes in my data (Source: &lt;a href="https://assets.website-files.com/577717ef3dcedd7133bc0ac5/58b95ce05d75b92f63032310_silverfish-damage.jpg"&gt;Pest Control&lt;/a&gt;)&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#before-we-begin"&gt;
  &lt;/a&gt;
  Before we begin
&lt;/h2&gt;

&lt;p&gt;This guide will use the &lt;a href="https://app.box.com/s/ktd1t87fl925hjxkzsclp1343eq822f1"&gt;big_data&lt;/a&gt; dataset along with the new, &lt;a href="https://app.box.com/s/ybntbd8uibb2fzo61ljy1960bxpntozq"&gt;promo&lt;/a&gt; dataset. It is recommended to read our guide on transforming data, using &lt;a href="https://www.mage.ai/blog/surfing-through-dataframes"&gt;filters&lt;/a&gt;, and &lt;a href="https://www.mage.ai/blog/product-developers-guide-to-getting-started-with-ai-pt3-terraforming-dataframes"&gt;groups&lt;/a&gt;, to understand this section. Additionally, start reading from &lt;a href="https://www.mage.ai/blog/qualitative-data"&gt;part 1&lt;/a&gt;, to understand all the different data types we’ll be working with and how we got to this point.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-impute-mean"&gt;
  &lt;/a&gt;
  What does impute mean?
&lt;/h2&gt;

&lt;p&gt;Impute is a technique used to fill in the missing information when given a dataset. When you impute, you use existing data to create references to missing data. Through imputing, data scientists are able to repair or patch parts of the data to give back its meaning. The quality of the data depends on how you handle imputing the data. The more complex a method is, the better the results. I’ll be showing 3 methods that are straightforward and easy for beginners, but do note that there are more out there that utilize other forms of AI, such as deep learning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-ways-to-impute"&gt;
  &lt;/a&gt;
  3 ways to impute
&lt;/h2&gt;

&lt;p&gt;To get started, let’s think about what kind of references we can use in the data. The simplest and the most common method is by filling in the missing value with the value with the most occurences. Another method is by computing the average and storing the value there. Finally, the 3rd utilizes a mix of both methods, it checks the closest values to the term, then averages it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mean-average-value"&gt;
  &lt;/a&gt;
  Mean average value
&lt;/h3&gt;

&lt;p&gt;Similarly, for mean average inputting, we calculate the average value out of all values in a column and then change the null values with the average value. Note that since this is an average, it will only work for numerical data and not categorical data, as categories are a classifier and not a count. In the case of a categorical variable, use a different method.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7FkzCvYY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gj0zan1qy685pe05wvl7.png" alt="Image description" width="460" height="283"&gt;&lt;em&gt;Take the sum and divide by the total (Source: &lt;a href="https://getcalc.com/formula/math/average.png"&gt;getcalc&lt;/a&gt;)&lt;/em&gt;
&lt;/center&gt;
&lt;h3&gt;
  &lt;a href="#most-frequent-value"&gt;
  &lt;/a&gt;
  Most frequent value
&lt;/h3&gt;

&lt;p&gt;To calculate the most frequent value, first we search for the value that appears the most. Then we find all occurrences of the value and replace it with the most common value. A downside to this approach is that, since the value that is most common is used, it tends to skew data by adding bias towards the majority.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ADF-YjbD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62kvv9kfychzwjdpg0u8.png" alt="Image description" width="880" height="462"&gt;&lt;em&gt;The hand of bias tips the scales (Source: Global Government Forum)&lt;/em&gt;
&lt;/center&gt;
&lt;h3&gt;
  &lt;a href="#knearest-neighbors"&gt;
  &lt;/a&gt;
  K-Nearest Neighbors
&lt;/h3&gt;

&lt;p&gt;K-Nearest Neighbors (KNN) is an algorithm that computes the closest “k” values in the graph. In imputation we’ll utilize this algorithm to determine a more accurate method that combines the best of both prior methods. Similar to taking the average, it takes into account portions of the dataset, but it only compares values nearby, resulting in less bias and more accuracy. Instead of repeating the most frequent value, it takes into consideration the other values, and constructs a graph to visit each neighborhood, or set of data points. However, since it is a brute force method that visits every value, it takes a long amount of time to run as the datasets grow larger.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1dDLU7Zw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nzis3rsfuxveow3lvi2.gif" alt="Image description" width="525" height="393"&gt;&lt;em&gt;KNN graph (Source: &lt;a href="https://towardsdatascience.com/6-different-ways-to-compensate-for-missing-values-data-imputation-with-examples-6022d9ca0779"&gt;Towards Data Science&lt;/a&gt;)&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#impute-in-pandas"&gt;
  &lt;/a&gt;
  Impute in Pandas
&lt;/h2&gt;

&lt;p&gt;First, we identify what type of data the promotional data we’re imputing is. By the looks of it, the value represents whether a user accepted the email campaign. In this case it’s a categorical variable, which represents the categories of “did accept” and “didn’t accept”.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3q221jpW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9l3sf9yrmlo74okp1bgq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3q221jpW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9l3sf9yrmlo74okp1bgq.png" alt="Image description" width="574" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a result, we cannot apply the mean average method and will use the most frequent value and K-nearest-neighbors to impute the &lt;strong&gt;AcceptedCmp1&lt;/strong&gt; in the promo dataset. Most frequent and mean average can be calculated using a &lt;a href="https://scikit-learn.org/stable/modules/generated/sklearn.impute.SimpleImputer.html#sklearn.impute.SimpleImputer"&gt;SimpleImputer&lt;/a&gt;, but we’ll be using Pandas to show the basic steps taken.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#most-frequent"&gt;
  &lt;/a&gt;
  Most frequent
&lt;/h3&gt;

&lt;p&gt;Using Pandas, along with grouping the values into True, False, and None, we can find the most frequently used of the 1s and 0s then set the NaN values to be equal. First, to find the count, we group the data to be 0 or 1 and take the count using &lt;strong&gt;size&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0_BwMT81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xd3f3zlmf2g77zouuc7u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0_BwMT81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xd3f3zlmf2g77zouuc7u.png" alt="Image description" width="540" height="178"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we’ll use fillna to replace the values with 0. Previously, NaN couldn’t be an integer, so we also convert the float back to int, since true/false values should be 0 or 1.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I4Wu01Do--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8xj765j0ktpmxupt2arz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I4Wu01Do--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8xj765j0ktpmxupt2arz.png" alt="Image description" width="574" height="22"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Taking a look at the output, we now have this as our final dataset.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--48dnfFIA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pii3hjan93c2bkumw2lw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--48dnfFIA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pii3hjan93c2bkumw2lw.png" alt="Image description" width="574" height="415"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The breakdown can be found again by grouping and taking the &lt;strong&gt;size&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XM6Ub0ys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yzul464r4cugmmp1xfm2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XM6Ub0ys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yzul464r4cugmmp1xfm2.png" alt="Image description" width="540" height="185"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#knearest-neighbors"&gt;
  &lt;/a&gt;
  K-Nearest Neighbors
&lt;/h3&gt;

&lt;p&gt;The algorithm of K-Nearest Neighbors is more complex and it visits each and every point. In this case, we’ll leverage the &lt;strong&gt;KNNImputer&lt;/strong&gt; function from SciKit Learn.&lt;/p&gt;

&lt;p&gt;Start by importing the functions we’ll be using, then select a value for “k”. This will determine the depth of the graph, and larger values will increase the time.&lt;/p&gt;

&lt;p&gt;Since there are 2240 rows, we’ll pick a k value of 3 which is the floor of log(2240). I chose this arbitrarily by taking the log, since the function grows exponentially. Please note there may be better ways to determine the k value, which is better learned through trial and error.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U_hsMB8B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uf6zoxrb5flc6dz8qyys.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U_hsMB8B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uf6zoxrb5flc6dz8qyys.png" alt="Image description" width="543" height="93"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we can take our imputer, and apply it to our promo dataframe.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L-DW3SPW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5skku9nv1pq81mfpvbir.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L-DW3SPW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5skku9nv1pq81mfpvbir.png" alt="Image description" width="574" height="21"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WBAejgtw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbf88pr0u5czddrbl6x9.png" alt="Image description" width="574" height="233"&gt;&lt;em&gt;Upon inspection, we notice that some values aren’t exactly 1 or 0, but are in between.&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;We’ll take an extra step to round off, so “maybe” values become strictly “yes” or “no”.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w-K6hqcD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bk7st2zytgufk47d361v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w-K6hqcD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bk7st2zytgufk47d361v.png" alt="Image description" width="574" height="173"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-step"&gt;
  &lt;/a&gt;
  Next Step
&lt;/h2&gt;

&lt;p&gt;KNN was able to give more accurate results, but this doesn’t mean that the choices were correct. With such a big difference between accepted or not, using the most frequent value can save time compared to using the KNN. On the other hand, when you value accuracy and are dealing with smaller datasets or have a lot of time, KNNs will pick values in the middle of actual and frequent. Now that we’ve prepared all our data, we are now ready to begin training models. In the next series, we’ll look at how to train machine learning models for our remarketing use case. We’ll go deeper into what a model means, metrics, and answer the big question, which users should be part of the remarketing campaign?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zRYnrM5W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xgrsf0vyepuh2an0bxvn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zRYnrM5W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xgrsf0vyepuh2an0bxvn.png" alt="Image description" width="574" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>deved</category>
      <category>machinelearning</category>
      <category>modeltraining</category>
      <category>mage</category>
    </item>
    <item>
      <title>Digital Poetry Driven by JavaScript.</title>
      <author>Jedidiah Gabriel</author>
      <pubDate>Thu, 18 Nov 2021 23:22:36 +0000</pubDate>
      <link>https://dev.to/jedstroke/digital-poetry-driven-by-javascript-1jo9</link>
      <guid>https://dev.to/jedstroke/digital-poetry-driven-by-javascript-1jo9</guid>
      <description>&lt;p&gt;Hi Devs, lemme start by saying this is not a tutorial. It is my first post to the community, and I want to share with y'all my love for poetry and web development 🧔&lt;/p&gt;

&lt;p&gt;I have always nurtured the idea of mixed media back before I thought of coding or even before I knew the word "montage" so I kept the madness from my peers. I used to be always between ear buds getting inspired by Jon Bellion's songs, and down to his art covers. I wondered how I would come about the fusion of different art forms in one piece driven by user interaction in form of poetry.&lt;/p&gt;

&lt;p&gt;Then, I started learning JavaScript and never thought the web could be the easiest source to channel my idea. To cut the whole long sad story short—I had to be moonstricken and heartbroken (it took time &amp;amp; some factors) to realize my browser could bundle my media mania. &lt;/p&gt;

&lt;p&gt;Everything I did along the lines of trying to figure out my sh*t made me a memorable couplet. And here are a couple of couplets: &lt;a href="https://jedshock.com/poetry/19.10.2020/"&gt;First poem for a girl&lt;/a&gt; and the &lt;a href="https://jedshock.com/poetry/30.10.2021/"&gt;second&lt;/a&gt;. I may not have written the best poem for a glorious presentation, but I achieved my dreams.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>poetry</category>
      <category>digitalpoetry</category>
    </item>
    <item>
      <title>Loops, Array Methods, and Recursion</title>
      <author>Justin Morgan</author>
      <pubDate>Thu, 18 Nov 2021 23:22:01 +0000</pubDate>
      <link>https://dev.to/justin_m_morgan/loops-array-methods-and-recursion-45ng</link>
      <guid>https://dev.to/justin_m_morgan/loops-array-methods-and-recursion-45ng</guid>
      <description>&lt;p&gt;"Loops" are an extremely powerful abstraction in computing and &lt;code&gt;for&lt;/code&gt; loops are often the entry point for most programmers into the topic. This level of abstraction is very primitive and can lead to writing quite inelegant, indirect, and often error prone code. There are several other versions of the loop as well as more specialized approaches to tackling the same category of problems. &lt;/p&gt;

&lt;p&gt;We'll start with the explanation of what a loop, as an abstraction, offers programmers. Then we'll discuss how "looping" manifests in Javascript. Finally we'll discuss how we can tackle the same problems with functional-programming strategies: array-methods/functions and recursion.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-looping"&gt;
  &lt;/a&gt;
  What is "Looping"?
&lt;/h2&gt;

&lt;p&gt;If we imagine our computer as a machine executing our code, a series of "operations", we immediately see the benefits of a machine reliably and reproducably performing mechanical work. For example, we can think of the summation of 1,000,000 figures from an accounting record. If we consider how we would describe this process doing it by hand, we may say something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- for summing a list of 1,000,000 things, 
    - we have a starting value of 0, 
    - take the items one at a time, 
    - each step add the taken item to our starting value, then use that as our next starting value
    - start with the first item in the list
    - stop when there are no more items in the list
    - finally, examine the updated starting value (the "sum")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From this description, we can distill the basic concepts of looping: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a notion of a "set" which we want to perform a repeated operation upon,&lt;/li&gt;
&lt;li&gt;an initial state,&lt;/li&gt;
&lt;li&gt;how we are going to traverse the set,&lt;/li&gt;
&lt;li&gt;an operation defined that we want to perform repeatedly,&lt;/li&gt;
&lt;li&gt;a starting condition,&lt;/li&gt;
&lt;li&gt;an ending condition, and&lt;/li&gt;
&lt;li&gt;a final operation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not coincidentally, I described the pattern for what is generally considered the most primative type of loop: the &lt;code&gt;for&lt;/code&gt; loop. So let's start with an examination of this loop as our launching point.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-of-loops"&gt;
  &lt;/a&gt;
  Types of Loops
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#for-loops"&gt;
  &lt;/a&gt;
  For Loops
&lt;/h3&gt;

&lt;p&gt;A &lt;code&gt;for&lt;/code&gt; loop, at least conceptually, is the building block of most other loops. It satisfies all the qualities of looping described above. In Javascript, it has the form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;starting_condition&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ending_condition&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;how_to_progress_after_each_step&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;work_to_do_at_each_step&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While this annotation doesn't directly map to the above described qualities of looping, actual implementations make it more apparent that it does in fact correspond. Let us consider summing a list of 1 million numbers, stored in an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;forSum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array_of_numbers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array_of_numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;array_of_numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here it is more apparent that each quality of a loop is addressed. Our set (&lt;code&gt;array_of_numbers&lt;/code&gt;), operation to perform repeatedly (&lt;code&gt;+=&lt;/code&gt;), initial state (&lt;code&gt;sum = 0&lt;/code&gt;), starting condition (&lt;code&gt;let i = 0&lt;/code&gt; or "start with the starting index of the array"), ending condition (&lt;code&gt;i &amp;lt; array_of_numbers.length&lt;/code&gt; or "until the index is one less than the length of the array"), and a final operation (&lt;code&gt;return&lt;/code&gt;).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Another important quality of "looping" is the ability to stop midway through the process and to skip certain steps. These concepts are embodied in Javascript with the keywords &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;break&lt;/code&gt; we can abort the remaining steps, essentially overriding the ending condition. This is often referred to as &lt;code&gt;short-circuiting&lt;/code&gt;. The purpose of this is to both improve efficiency--by not requiring the procedure to run a bunch of extra times--and to avoid the need for including "by-pass" code (code which essentially does nothing just to reach the completed state).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Continue&lt;/code&gt; allows for an immediate jump to the end of the block of code contained within the loop. This too allows for avoiding certain types of "useless" code.&lt;/p&gt;

&lt;p&gt;Take this contrived example of summing the natural numbers from 1 to some unknown number, discarding all numbers that are multiples of 2 or 3, stopping once the sum reaches a certain target. We want to return the sum that exceeds the supplied target as well as the list of numbers that make up that sum. We don't know how many numbers that will take, so we will make our ending condition "while our current number is less than Infinity".&lt;/p&gt;


&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;takeNonMultiplesOfTwoOrThreeUntilSumIs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;
      &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;This can be accomplished in other manners, but the inclusion of these keywords can often avoid extra code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using the &lt;code&gt;for&lt;/code&gt; loops as an initial point of reference, we can consider variations that fix one or more of the above "knobs" and give us more particularlized behaviour. This is done for convenience and it should be noted that each of the other loops can be implemented with a &lt;code&gt;for&lt;/code&gt; loop. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#while-loops"&gt;
  &lt;/a&gt;
  While Loops
&lt;/h3&gt;

&lt;p&gt;A &lt;code&gt;while&lt;/code&gt; loop appears a lot more streamlined, but its obvious applications are fairly specific. A &lt;code&gt;while&lt;/code&gt; loop reduces the number of parameters from three (starting condition, ending condition, traversal instruction) down to 1 (ending condition). It disguises the other two parameters: the ending condition is established by monitoring a value outside the loop definition, and the traversal logic is (often) contained within the loop's block:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;whileSum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While certain circumstances benefit from this format, it does require special care not to create an "infinite loop". This is because there are a limited set of Javascript values which are &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy"&gt;falsey&lt;/a&gt;. Because the end condition &lt;em&gt;cannot&lt;/em&gt; be set in terms of a parameter of the loop, it is easy to make a mistake here.&lt;/p&gt;

&lt;p&gt;As with the &lt;code&gt;for&lt;/code&gt; loop, &lt;code&gt;break&lt;/code&gt; can be used to short-circuit the entire loop and &lt;code&gt;continue&lt;/code&gt; can be used to short-circuit the current iteration.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dowhile-loops"&gt;
  &lt;/a&gt;
  Do-While Loops
&lt;/h3&gt;

&lt;p&gt;Very similar to a while loop, the &lt;code&gt;do-while&lt;/code&gt; loop runs its execution block (the &lt;code&gt;do&lt;/code&gt; block) &lt;em&gt;before&lt;/em&gt; checking the &lt;code&gt;while&lt;/code&gt;/end condition. The syntax includes a &lt;code&gt;do&lt;/code&gt; block followed by a &lt;code&gt;while&lt;/code&gt; statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doWhileSum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Number of items left to sum: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;No items to sum&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#forof-loops"&gt;
  &lt;/a&gt;
  For-Of Loops
&lt;/h3&gt;

&lt;p&gt;A relatively recent addition to Javascript is the &lt;code&gt;for...of&lt;/code&gt; loop, which iterates over all of the &lt;strong&gt;values&lt;/strong&gt; in an iterable object (objects or arrays alike) (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_statement"&gt;MDN docs here&lt;/a&gt;). &lt;/p&gt;

&lt;p&gt;A &lt;code&gt;for...of&lt;/code&gt; solution could look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;forOfSum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#forin-loops"&gt;
  &lt;/a&gt;
  For-In Loops
&lt;/h3&gt;

&lt;p&gt;There is also a &lt;code&gt;for...in&lt;/code&gt; loop which iterates over &lt;strong&gt;keys&lt;/strong&gt; and includes some you may not expect.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The for...in statement iterates over all enumerable properties of an object that are keyed by strings (ignoring ones keyed by Symbols), including inherited enumerable properties.&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;Given that for...in is built for iterating object properties, not recommended for use with arrays, and options like Array.prototype.forEach() and for...of exist, what might be the use of for...in at all?&lt;/p&gt;

&lt;p&gt;It may be most practically used for debugging purposes, being an easy way to check the properties of an object (by outputting to the console or otherwise). Although arrays are often more practical for storing data, in situations where a key-value pair is preferred for working with data (with properties acting as the "key"), there may be instances where you want to check if any of those keys hold a particular value.&lt;/p&gt;

&lt;p&gt;(&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...in_statement"&gt;Source - MDN docs&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A contrived example would be to filter out values in an array that are at indices that are divisible by 2 or 3:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;forInSum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note that in a &lt;code&gt;for-in&lt;/code&gt; loop, we are working with keys of an object (or indices of an array in this simple example). In order to work with the values, we need to take the additional step of reading the value with the given object-key of the current iteration of the loop.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#loops-final-thoughts"&gt;
  &lt;/a&gt;
  Loops: Final Thoughts
&lt;/h3&gt;

&lt;p&gt;Loops work on sets of data, be it an array, an object, strings, or one of the more exotic new objects. Definitionally, a set can be of any size including a single item or an empty set. An example of a loop operating on an empty set is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The loop is not tied to the data that it works upon, it merely describes an algorithm for repeatedly computing. While operating on sets in this way feels very flexible, it can be very error prone to consistently reimplement common patterns of object access. Therefore, it is very useful to consider using well established access patterns that exist, as we will consider next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#from-loops-to-array-methodsfunctions"&gt;
  &lt;/a&gt;
  From Loops to Array Methods/Functions
&lt;/h2&gt;

&lt;p&gt;When introducing the concept of a loop, we described that a loop works on a "set". In Javascript, this translates to mean an &lt;code&gt;iterable object&lt;/code&gt; which includes most commonly objects, arrays, and strings.&lt;/p&gt;

&lt;p&gt;If we focus our thinking to arrays for a moment, we can consider another class of solutions as an alternative to loops. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Before concluding that limiting our discussion to arrays is a significant limitation, consider that objects, strings, and other objects each have methods which will convert the object to an array (ex. &lt;code&gt;Object.values&lt;/code&gt;, &lt;code&gt;String.prototype.split&lt;/code&gt;, etc).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When  traversing an array, we can often use array methods to complete those tasks more explicitly than a loop will permit. Loops are relatively low level operations that require us to implement much of the logic ourselves. Many array methods define a clear intent for common operations and they can be chained together using the "dot" syntax. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;someArray&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;omittedFilterFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;omittedMapFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;omittedForEachFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are performing some "side-effect" with each value in an array, there is &lt;code&gt;forEach&lt;/code&gt;. If you are transforming each value, there is &lt;code&gt;map&lt;/code&gt;. If you are conditionally rejecting values, there is &lt;code&gt;filter&lt;/code&gt;. If you are "accumulating" values, there is &lt;code&gt;reduce&lt;/code&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Accumulation can take many forms, but basically it means that you are starting with some value (commonly call the &lt;code&gt;accumulator&lt;/code&gt;) and then using each element in the array to update the accumulator. You can find the documentation for these methods on the MDN site:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"&gt;forEach&lt;/a&gt;, &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"&gt;map&lt;/a&gt;, &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"&gt;filter&lt;/a&gt;, and &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce"&gt;reduce&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are several other built in array methods to consider, but these are the most common ones to consider. Additionally, their relationship to one another should provide insight into the "declarative" advantage over loops. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reduce"&gt;
  &lt;/a&gt;
  Reduce
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Array.prototype.reduce&lt;/code&gt; is the &lt;code&gt;for&lt;/code&gt; loop of array methods. It is the least declarative type of array iteration method and can be used to implement every other built-in array iteration method. In short, &lt;code&gt;reduce&lt;/code&gt; iterates over an entire array, allowing for custom logic for copying and/or transforming of the original array's items into a new array (also known as the "accumulator").&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;reduce&lt;/code&gt; method takes a callback which is called once for each value in the array and an initial value for your &lt;code&gt;accumulator&lt;/code&gt;. This callback's signature is &lt;code&gt;(accumulator, currentValue, currentIndex, originalArray) =&amp;gt; accumulator&lt;/code&gt; (provide only as many parameters as you require, generally &lt;code&gt;(accumulator, currentValue)&lt;/code&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you're unfamiliar with this pattern of "variable" function arguments, I have written an article on &lt;a href="https://dev.to/justin_m_morgan/a-deeper-dive-into-function-arity-with-a-focus-on-javascript-ae"&gt;function arity in Javascript&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The value from &lt;code&gt;accumulator&lt;/code&gt; is then passed as the first argument on the next iteration. It is easy to accidentally not return a value from your callback, especially when using an array function.&lt;/p&gt;

&lt;p&gt;For example, if we want to implement a &lt;a href="https://en.wikipedia.org/wiki/Fizz_buzz"&gt;FizzBuzz&lt;/a&gt; function for an arbitrary array of numbers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrayToBeFizzBuzzed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
  &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Array must have assigned value to map&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isFactorOf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;testNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FizzBuzzReduce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;startingAccumulator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isFactorOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FizzBuzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isFactorOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isFactorOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;startingAccumulator&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or if instead we wanted to filter out those values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FizzBuzzFilterReduce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;startingAccumulator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;isFactorOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;isFactorOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;isFactorOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;accumulator&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;startingAccumulator&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The basic idea here is that we are traversing the array and conditionally transforming the items in it (in the first case) and conditionally appending it to the accumulator (in the second case). Whether the item is transformed or not, a new copy of the accumulator is returned from the callback function to be used for the next iteration (with the next item in the array).&lt;/p&gt;

&lt;p&gt;Rewriting our summation above using &lt;code&gt;reduce&lt;/code&gt; would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reduceSum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#map"&gt;
  &lt;/a&gt;
  Map
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Map&lt;/code&gt; particularizes &lt;code&gt;reduce&lt;/code&gt; by handling the copying of the transformed value into the accumulator in a default manner. Whatever value is returned from the transformation function is appended to the accumulator. So the above example could be rewritten as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FizzBuzzMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
  &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isFactorOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FizzBuzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isFactorOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isFactorOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can therefore think of &lt;code&gt;map&lt;/code&gt; as the following particularization of &lt;code&gt;reduce&lt;/code&gt; (written as a plain function, not a prototype method):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;transformer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;transformer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#filter"&gt;
  &lt;/a&gt;
  Filter
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Filter&lt;/code&gt; particularizes &lt;code&gt;reduce&lt;/code&gt; by handling the conditional copying of the item into the accumulator in a default manner. Unlike &lt;code&gt;map&lt;/code&gt;, the value being iterated over is left unchanged in the resulting array. Rather, the &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Truthy"&gt;truthiness&lt;/a&gt; of the value determines whether the value is copied to the accumulator or rejected (and the accumulator being passed on unchanged). So the above example could be rewritten as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FizzBuzzFilter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
  &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isFactorOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;isFactorOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;isFactorOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can therefore think of &lt;code&gt;filter&lt;/code&gt; as the following particularization of &lt;code&gt;reduce&lt;/code&gt; (written as a plain function, not a prototype method):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// A predicate function must have a unary function signature&lt;/span&gt;
&lt;span class="c1"&gt;// and should be interpretted as returning a truthy or falsy value&lt;/span&gt;
&lt;span class="c1"&gt;// ex. const isOdd = num =&amp;gt; num % 2&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;predicateFn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;predicateFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;accumulator&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#foreach"&gt;
  &lt;/a&gt;
  forEach
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Array.prototype.forEach&lt;/code&gt; is an array method which iterates over each element in an array but returns &lt;code&gt;undefined&lt;/code&gt;. It is useful for performing side-effects on items in an array. It therefore cannot be chained onto by other array methods. It is most similar to &lt;code&gt;map&lt;/code&gt;, though the return value of the callback function is not useful.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FizzBuzzLogger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
  &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isFactorOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FizzBuzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isFactorOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isFactorOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#and-beyond"&gt;
  &lt;/a&gt;
  And Beyond!
&lt;/h3&gt;

&lt;p&gt;From this starting point, we can survey array methods that are further particularizations. The [MDN Docs] list several very useful ones (&lt;code&gt;.every&lt;/code&gt;, &lt;code&gt;.some&lt;/code&gt;, &lt;code&gt;.reverse&lt;/code&gt;), some more infrequently used by my experience (&lt;code&gt;.lastIndexOf&lt;/code&gt;). &lt;/p&gt;

&lt;p&gt;If this approach interests you, you can dive even deeper by surveying the various array functions available in popular utility libraries suchs &lt;a href="https://lodash.com"&gt;Lodash&lt;/a&gt; and (for even more extreme examples) &lt;a href="https://ramdajs.com"&gt;Ramda&lt;/a&gt;. These libraries include composable functions (not array prototype methods) that are extremely useful once you get familiar with them. &lt;/p&gt;

&lt;p&gt;One such function that I am sad is not a prototype method is &lt;code&gt;zip&lt;/code&gt;. &lt;code&gt;Zip&lt;/code&gt; takes two or more arrays and combines them into new items, one element from each array and halting at the point of the shortest array. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// [["a", 1, 10], ["b", 2, 20], ["c", 3, 30]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The above uses the version of zip from Lodash (which allows more than two arrays to be zipped together--Ramda is limited to two arrays).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These sorts of specialized array methods can be implemented using &lt;code&gt;reduce&lt;/code&gt; but it requires a non-trivial amount of work (not to mention edge cases that need to be considered). It is therefore wise to turn to a well tested utility library if you wish to code in this style.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recursion"&gt;
  &lt;/a&gt;
  Recursion
&lt;/h2&gt;

&lt;p&gt;Another approach to replacing loops is to use &lt;code&gt;recursion&lt;/code&gt; (the repeated call of the same function by itself). The approach is requires knowing that your function can call itself from within its own definition. This could happen infinitely if you don't provide a stopping condition (similar to the stopping condition of a loop). &lt;/p&gt;

&lt;p&gt;As an example, we could code our &lt;code&gt;FizzBuzz&lt;/code&gt; function as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;recurFB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;accumulator&lt;/span&gt; 
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isFactorOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;recFB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FizzBuzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isFactorOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;recFB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isFactorOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;recFB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;recFB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunatly, recursion has some limitations in Javascript. Chiefly, the current implementation in all major browsers and Node versions do not do what is known as &lt;code&gt;tail-call optimization&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;When a function executes, it creates an execution context which establishes an alotment of memory for variables within the execution block of the function. Each call of a function creates such an execution scope, and so recursive function calls create a new execution context for each recursive call. As you may imagine, the more recursive calls, the more memory alotted. And at a certain point, this &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Too_much_recursion"&gt;can lead to the runtime crashing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The problem is that a function which calls itself in its body doesn't "finish" at that point and so its allocated system resources are not released. You may think to yourself "that's silly, the work is done". If you refer to the example implementation of a recursive &lt;code&gt;FizzBuzz&lt;/code&gt;, you will see that there really isn't any work left &lt;em&gt;except&lt;/em&gt; to recursively call itself. This is not always true but in this example I have defined the function in a way that is &lt;code&gt;tail-call optimized&lt;/code&gt;. This means that all of the work of the function is completed &lt;em&gt;but for&lt;/em&gt; a final call to execution of the function. &lt;/p&gt;

&lt;p&gt;You can imagine that &lt;em&gt;in theory&lt;/em&gt;, if the runtime could detect this, it could execute the recursive call in a separate context (not nested within the parent function) and release the resources allocated to the parent caller. This is known as &lt;code&gt;tail-call optimization&lt;/code&gt; and many languages do this. &lt;a href="https://javascript.plainenglish.io/tail-calls-in-javascript-will-there-be-a-comeback-63ac3a0523a5"&gt;Node even implemented it for a few versions but then removed it.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So is there a workaround? Yes, but arguably it makes the whole exercise look a lot more like a loop. One solution I've hear referred to as a &lt;a href="https://blog.logrocket.com/using-trampolines-to-manage-large-recursive-loops-in-javascript-d8c9db095ae3/"&gt;recursive "trampoline"&lt;/a&gt;. That is, the recursive call isn't truly a recursive call but rather a plain function call whereby the parent simply orchestrates the accumulation of each &lt;em&gt;successive&lt;/em&gt; calls to the quasi-recursive function. Let's consider our above example.&lt;/p&gt;

&lt;p&gt;First, we have to implement a &lt;code&gt;trampoline&lt;/code&gt; utility function. This function is general enough that it can be used for all recursive functions that follow the trampline-pattern. The recursive function must then be modified slightly, returning an anonymous function which will, upon execution, call the next iteration with the appropriate arguments (stored in the anonymous function's closure scope).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;trampoline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;recurFB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;accumulator&lt;/span&gt; 
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isFactorOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;recFB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FizzBuzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isFactorOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;recFB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isFactorOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;recFB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;recFB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Notice that each iteration returns a function expression &lt;/span&gt;
&lt;span class="c1"&gt;// rather than immediately executing &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we return a function from each pseudo-recursive call. In the &lt;code&gt;trampoline&lt;/code&gt; function, we test whether the return value is a function and if so, execute it in a new context (freeing the resources from the prior call to be garbage collected). Finally we return the non-function value at the terminal case of our recursion.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But what if your "final" value is a function itself, just not the same function? 🧐&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While recursion can be useful and elegant in many cases, it needs to be noted that this limitation exists in Javacript. Many times the context will not practically conflict with this limit but if your solution needs to be general then it is probably wise to prepare your function to avoid this limitation (either by using a loop or expressing your recursion as a trampoline-style function).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Loops and the array methods/functions described above both tackle the same category of problems. But is one interchangable for the other? Can we simply prefer one approach and disregard the other? In short, loops are the abstraction over even lower-level computing operations that we don't contend with in Javascript. And loops are the building blocks in which the array-functions are constructed. Knowing these array-functions gives us access to convenience and "cleaner code" when it is appropriate, while loops give us flexibility and optimization when it is required. &lt;/p&gt;

&lt;p&gt;One such occassion where we cannot simply choose an array method is when our "set" is indeterminate. For example, above we provided an example where we looped from 1 to Infinity in order to sum values to a certain target. Because you cannot create an array from 1 to Infinity, a loop would be a simple solution to this problem while an array method would not. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;While an array from 1 to Infinity is not possible, it should be noted that the problem as stated doesn't strictly require a computation across values from 1 to Infinity, but rather from 1 to an indeterminate end value. A &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators"&gt;generator function&lt;/a&gt; which iterates by one is an available tool that could be used to accomplish this challenge but requiring more language features not discussed in this article.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is sometimes pointed out that one characteristic of Javascript loops excels over (built-in) array-methods: performance. While this may prove to be a true problem in your usage case, it is important that you verify that this is the source of your issue through measurement before hastily optimizing for this stated-purpose. The tradeoff is "noisier" code which is more difficult to maintain and less pleasant to work with. &lt;/p&gt;

&lt;p&gt;If performance turns out to be a true problem, you can also count on the fact that the utility libraries which provide these functions (such as &lt;a href="https://lodash.com"&gt;Lodash&lt;/a&gt; and &lt;a href="https://ramdajs.com"&gt;Ramda&lt;/a&gt;) avoid such criticism. These libraries implement their functions as abstractions over loops with performance optimizations in mind.&lt;/p&gt;

&lt;p&gt;Another apparent shortcoming of these array functions is the inability or inflexibility of short-ciruiting (as is available with the &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; keywords in a loop). It is true that this is not available in the built in array-methods, such as &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, and &lt;code&gt;reduce&lt;/code&gt;. The consequence of this is that these methods will traverse the entire array, and we may need to add "bypass" code in order to get the intended behaviour. &lt;/p&gt;

&lt;p&gt;For example, say that we want to accumulate a list of names in an array of people, but want to stop if the number of results exceeds some value. Two possible options:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;findSomeWithName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
  &lt;span class="nx"&gt;people&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;findSomeWithName2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
  &lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In both cases, we traverse the entire array, even if we reach our "end condition" very early. &lt;/p&gt;

&lt;p&gt;This criticism has a performance aspect and a readability/maintainability aspect. While the performance aspect is something to measure and is discussed above, the second concern isn't easily avoidable using the built in array-methods. &lt;/p&gt;

&lt;p&gt;Luckily, by adopting one of the mentioned utility libraries, this too is mostly a non-issue. As has been discussed in other parts of this article, these array-functions are abstractions that can take many forms. These common access patterns result in very particularized array-functions. For example, in &lt;code&gt;Ramda&lt;/code&gt; there are &lt;code&gt;reduceWhile&lt;/code&gt;, &lt;code&gt;takeWhile&lt;/code&gt;, &lt;code&gt;dropWhile&lt;/code&gt; variants that allow for tailored logic that halts upon a given condition. &lt;/p&gt;

&lt;p&gt;Rewriting the above could look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hasName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lessThanLimit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;findSomeWithName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
  &lt;span class="nx"&gt;reduceWhile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lessThanLimit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;hasName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If the style of this code looks like Greek to you, you may be interested in my article on &lt;a href="https://dev.to/justin_m_morgan/point-free-style-in-javascript-43o9"&gt;Point-Free Style Programming&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Abstractions for other types of short-circuiting behaviours can be implemented, derived from combinations of other functions, or will perhaps be included in these popular libraries. Whether you want to go down that path is a matter of preference. Just recognize that this "short-circuiting" behaviour is not an inherent limitation of using array-methods. &lt;/p&gt;

&lt;p&gt;Similarly, recursion can tackle the same category of problems as loops and array-functions but (at least in Javascript) suffer from memory-limitations that can crash your program and still require implementing logic manually (unlike using a utility library, such as Lodash or Ramda).&lt;/p&gt;

&lt;p&gt;By becoming comfortable in all three approaches to working with collections, Javascript allows you to have a hybrid approach to any given problem that fits your (or your team's) preferred style of coding.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>functional</category>
    </item>
    <item>
      <title>Absolute Beginner's Guide to Deploy ML model with Flask (Part-1)</title>
      <author>Afroza Nowshin</author>
      <pubDate>Thu, 18 Nov 2021 23:10:05 +0000</pubDate>
      <link>https://dev.to/afrozansenjuti/absolute-beginners-guide-to-deploy-ml-model-with-flask-part-1-deo</link>
      <guid>https://dev.to/afrozansenjuti/absolute-beginners-guide-to-deploy-ml-model-with-flask-part-1-deo</guid>
      <description>&lt;p&gt;Data Science Kitty is so happily purring because she can now predict heart disease with her model (&lt;a href="https://dev.to/orthymarjan/beginners-journey-in-machine-learning-3ei9?fbclid=IwAR02yqZ8RVT13XW1-MP66RJiNKMnHvOyhw8Dvgu2AcWPuq1kzqnjByjEc0s"&gt;https://dev.to/orthymarjan/beginners-journey-in-machine-learning-3ei9?fbclid=IwAR02yqZ8RVT13XW1-MP66RJiNKMnHvOyhw8Dvgu2AcWPuq1kzqnjByjEc0s&lt;/a&gt;). She now wishes to use the model for a website where hoomans will give input and after submitting the data will receive a prediction. This means that the model has to be incorporated with an interactive medium; hoomans will give their inputs on a form and the model will give the prediction based on the form data. But how?&lt;/p&gt;

&lt;p&gt;Kitty remembers that her friend ML engineer doge is an expert at bonking everything. Doge promised kitty, “I’ll teach you how to deploy your model.” The Data science kitty is confused now. “What is deploy, doge?” &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7YKgNLEp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unkzn4hp73arae3g6hxe.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7YKgNLEp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unkzn4hp73arae3g6hxe.jpg" alt="Confused" width="880" height="753"&gt;&lt;/a&gt;&lt;br&gt;
Doge drew a diagram for explaining the basics:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1_i40zAI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fpqngq431q1ogrdjbvk6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1_i40zAI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fpqngq431q1ogrdjbvk6.png" alt="Process" width="681" height="211"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step1-installing-virtual-environment-and-flask"&gt;
  &lt;/a&gt;
  Step-1: Installing virtual environment and Flask
&lt;/h2&gt;

&lt;p&gt;The first and foremost thing to do for any type of Python development is to set up a virtual environment where you will manage all the tools and dependencies within a Python version of your choice. Python comes with &lt;a href="https://docs.python.org/3/library/venv.html#module-venv"&gt;venv&lt;/a&gt; module to manage virtual environments. You can either use this or opt for Python Virtual Environment or pyenv which you can install from the links below - &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/pyenv/pyenv"&gt;https://github.com/pyenv/pyenv&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pyenv/pyenv-virtualenv"&gt;https://github.com/pyenv/pyenv-virtualenv&lt;/a&gt; - This plugin makes managing multiple Python virtual environments on Unix like systems so much easier.
You can use &lt;a href="https://docs.conda.io/en/latest/"&gt;Conda&lt;/a&gt; as well for setting up your virtual environment.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After setting up a virtual environment, you can install Flask from the &lt;a href="https://flask.palletsprojects.com/en/2.0.x/installation/"&gt;official document&lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step2-load-the-model"&gt;
  &lt;/a&gt;
  Step-2: Load the model
&lt;/h2&gt;

&lt;p&gt;Kitty has the model for predicting heart disease as a joblib file. You need to ensure that your model file’s Python version is the same as that of Flask’s version. There are two approaches to ensure the same Python version:&lt;/p&gt;

&lt;p&gt;If you have run your entire machine learning project in Colab then just run the below command in a Colab cell, and install this particular version of Python Virtual environment for the Flask project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;!python --version

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can create your model and extract the joblib file from the Jupyter notebook. That way, your model file and Flask project will remain within the same Python version. &lt;br&gt;
This solves kitty’s issue of matching the python versions of joblib and the system that doge is making for her. Inside project directory, at first create afile named app.py and write the following line of codes to start with the Flask skeleton:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
from flask import Flask

app = Flask(__name__)

@app.route("/")
def hello_world():
    return "&amp;lt;p&amp;gt;Hello, World!&amp;lt;/p&amp;gt;"

if __name__ == "__main__":
    app.run()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run the following command, you can see on &lt;a href="http://localhost:5000/"&gt;http://localhost:5000/&lt;/a&gt; that there is a webpage with the text “Hello, World!”&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
python app.py

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For clarity, doge put the joblib file inside a folder called “resource”. To load the model in our app, we will import the load function and save the model in variable named pipeline.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from joblib import load 
pipeline = load("resource/diseaseprediction.joblib")

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can return an html page with our app function. All we have to do is to write&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def hello_world():
    return render_template('home.html')

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Import the function render_template with Flask and you are good to go till now. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step3-write-a-template-for-input"&gt;
  &lt;/a&gt;
  Step-3: Write a template for input
&lt;/h2&gt;

&lt;p&gt;This is the most bonking, I mean the most boring part of the whole process. We wrote render_template(‘home.html’) but there is no html to render. In a Flask project, you need to create a directory named “templates” which will have all the web pages. For this project, we will require just the home page. We have &lt;a href="https://www.w3schools.com/"&gt;W3Schools&lt;/a&gt; to get this basic layout done. &lt;/p&gt;

&lt;p&gt;The user input will be the feature columns of Kitty’s model, which means there are 13 fields in the form. I checked the value type of each input and based on that, the code for the form will be like the following -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1"&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;h2 style="text-align:center"&amp;gt;Do I have heart disease?&amp;lt;/h2&amp;gt;

&amp;lt;p style="text-align:center"&amp;gt;Fill out this form and check!&amp;lt;/p&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;form&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;label for="age"&amp;gt;Age&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;input type="text" id="age" name="age" placeholder="Your Age" required&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;label for="sex"&amp;gt;Sex&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;input type="radio" id="sex" name="sex" value="1"&amp;gt;
                &amp;lt;label for="sex"&amp;gt;Male&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;input type="radio" id="sex" name="sex" value="0" required&amp;gt;
                &amp;lt;label for="sex"&amp;gt;Female&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;label for="cp"&amp;gt;Chest Pain Type&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;select id="cp" name="cp" required&amp;gt;
                    &amp;lt;option value="0"&amp;gt;None&amp;lt;/option&amp;gt;
                    &amp;lt;option value="1"&amp;gt;Mild&amp;lt;/option&amp;gt;
                    &amp;lt;option value="2"&amp;gt;Medium&amp;lt;/option&amp;gt;
                    &amp;lt;option value="3"&amp;gt;Severe&amp;lt;/option&amp;gt;
                &amp;lt;/select&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;label for="rbp"&amp;gt;Resting Blood Pressure&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;input type="text" id="trestbps" name="trestbps" placeholder="Your bp in mm Hg" required&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;label for="chol"&amp;gt;Cholesterol&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;input type="text" id="chol" name="chol" placeholder="Your serum cholestoral in mg/dl" required&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;label for="fbs"&amp;gt;Fasting Blood Sugar&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;input type="radio" id="fbs" name="fbs" value="1" required&amp;gt;
                &amp;lt;label for="fbs"&amp;gt;Diabetic&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;input type="radio" id="fbs" name="fbs" value="0"&amp;gt;
                &amp;lt;label for="fbs"&amp;gt;Non diabatic&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;div
                &amp;lt;label for="restecg"&amp;gt;Resting Electrocardiographic Results&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div
                &amp;lt;select id="restecg" name="restecg" required&amp;gt;
                    &amp;lt;option value="0"&amp;gt;None&amp;lt;/option&amp;gt;
                    &amp;lt;option value="1"&amp;gt;Medium&amp;lt;/option&amp;gt;
                    &amp;lt;option value="2"&amp;gt;Severe&amp;lt;/option&amp;gt;
                &amp;lt;/select&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;label for="thalach"&amp;gt;Maximum Heart Rate Achieved&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div
                &amp;lt;input type="text" id="thalach" name="thalach" placeholder="Your maximum achieved heart rate" required&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div
            &amp;lt;div&amp;gt;
                &amp;lt;label for="exang"&amp;gt;Exercise Induced Angina&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;input type="radio" id="exang" name="exang" value="1"&amp;gt;
                &amp;lt;label for="exang"&amp;gt;Yes&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;input type="radio" id="exang" name="exang" value="0" required&amp;gt;
                &amp;lt;label for="exang"&amp;gt;No&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;label for="oldpeak"&amp;gt;OldPeak (floating point value)&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;input type="text" id="oldpeak" name="oldpeak"
                       placeholder="ST depression induced by exercise relative to rest" required&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;label for="slope"&amp;gt;The Slope of the Peak Exercise ST Segment&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;select id="slope" name="slope" required&amp;gt;
                    &amp;lt;option value="0"&amp;gt;None&amp;lt;/option&amp;gt;
                    &amp;lt;option value="1"&amp;gt;Medium&amp;lt;/option&amp;gt;
                    &amp;lt;option value="2"&amp;gt;Severe&amp;lt;/option&amp;gt;
                &amp;lt;/select&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;label for="ca"&amp;gt;Number of Major Vessels (0-3)&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;select id="ca" name="ca" required&amp;gt;
                    &amp;lt;option value="0"&amp;gt;0&amp;lt;/option&amp;gt;
                    &amp;lt;option value="1"&amp;gt;1&amp;lt;/option&amp;gt;
                    &amp;lt;option value="2"&amp;gt;2&amp;lt;/option&amp;gt;
                    &amp;lt;option value="3"&amp;gt;3&amp;lt;/option&amp;gt;
                &amp;lt;/select&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;label for="thal"&amp;gt;Thal: 3 = normal; 6 = fixed defect; 7 = reversable defect&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;select id="thal" name="thal" required&amp;gt;
                    &amp;lt;option value="0"&amp;gt;0&amp;lt;/option&amp;gt;
                    &amp;lt;option value="1"&amp;gt;1&amp;lt;/option&amp;gt;
                    &amp;lt;option value="2"&amp;gt;2&amp;lt;/option&amp;gt;
                    &amp;lt;option value="3"&amp;gt;3&amp;lt;/option&amp;gt;
                    &amp;lt;option value="4"&amp;gt;4&amp;lt;/option&amp;gt;
                    &amp;lt;option value="5"&amp;gt;5&amp;lt;/option&amp;gt;
                    &amp;lt;option value="6"&amp;gt;6&amp;lt;/option&amp;gt;
                    &amp;lt;option value="7"&amp;gt;7&amp;lt;/option&amp;gt;
                &amp;lt;/select&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;div&amp;gt;
            &amp;lt;button type="submit"&amp;gt;Submit Data&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/form&amp;gt;

&amp;lt;/div&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output of this html file looks like this - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lNbe6nyj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u71m803fdufmxquh3gw6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lNbe6nyj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u71m803fdufmxquh3gw6.png" alt="html" width="880" height="433"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It looks too plain because we didn’t do the styling. It’s also tiring I know. Doge wants to keep the template basic, so she searched for a form template in W3School. Without this website, learning html and CSS would be no hard for doge. Form template link - &lt;a href="https://www.w3schools.com/howto/tryit.asp?filename=tryhow_css_contact_form"&gt;https://www.w3schools.com/howto/tryit.asp?filename=tryhow_css_contact_form&lt;/a&gt;. As our target is to deploy the model, we need to make sure that all 13 data are posted to this form, extracted and used as the input to the model that we loaded earlier. Do the following two tasks to ensure that:&lt;/p&gt;

&lt;p&gt;In the “form” tag, set the destination of where the data will be posted. As this is a single page web application, the form action attribute is the address of where this application is running, that is &lt;a href="http://localhost:5000/"&gt;http://localhost:5000/&lt;/a&gt;, and the method attribute is of type post.&lt;br&gt;
Input to the model is a data frame; therefore you have to match every data to their designated column. If you set the id, name and for attribute to the original data frame column name and set the value attribute (only the tags that require a value attribute such as a selection tag) to the finite intended value of the column, the form will be able to generate an object of the type immutablemultidict, which is a Flask form object. We will process this object in the following section, but for now, let me explain with just one code snippet.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--upFUGBYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0fmxn47orkbxppziv8i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--upFUGBYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0fmxn47orkbxppziv8i.png" alt="cp" width="452" height="221"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The ‘cp’ column in the dataset can take values 0,1,2 or 3, which I mapped for textual values; in the website, we can see this and not what the value attributes contain. After incorporating all the CSS classes and sources for styling the html looked like the following. We are almost there, yems!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1"&amp;gt;
    &amp;lt;link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css"&amp;gt;
    &amp;lt;style&amp;gt;
        * {
            box-sizing: border-box;
        }

        input[type=text], select, textarea {
            width: 100%;
            padding: 12px;
            border: 1px solid #ccc;
            border-radius: 4px;
            resize: vertical;
        }

        label {
            padding: 12px 12px 12px 0;
            display: inline-block;
        }

        input[type=submit]:hover {
            background-color: #45a049;
        }

        .container {
            border-radius: 5px;
            background-color: #f2f2f2;
            padding: 20px;
        }

        .col-25 {
            float: left;
            width: 25%;
            margin-top: 6px;
        }

        .col-75 {
            float: left;
            width: 75%;
            margin-top: 6px;
        }

        /* Clear floats after the columns */
        .row:after {
            content: "";
            display: table;
            clear: both;
        }

        .center {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 200px;
        }

        /* Responsive layout - when the screen is less than 600px wide, make the two columns stack on top of each other instead of next to each other */
        @media screen and (max-width: 600px) {
            .col-25, .col-75, input[type=submit] {
                width: 100%;
                margin-top: 0;
            }
        }
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;h2 style="text-align:center"&amp;gt;Do I have heart disease?&amp;lt;/h2&amp;gt;

&amp;lt;p style="text-align:center"&amp;gt;Fill out this form and check!&amp;lt;/p&amp;gt;
&amp;lt;div class="container"&amp;gt;
    &amp;lt;form action="http://localhost:5000/" method="post"&amp;gt;
        &amp;lt;div class="row"&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;label for="age"&amp;gt;Age&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-75"&amp;gt;
                &amp;lt;input type="text" id="age" name="age" placeholder="Your Age" required&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="row"&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;label for="sex"&amp;gt;Sex&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;input type="radio" id="sex" name="sex" value="1"&amp;gt;
                &amp;lt;label for="sex"&amp;gt;Male&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;input type="radio" id="sex" name="sex" value="0" required&amp;gt;
                &amp;lt;label for="sex"&amp;gt;Female&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="row"&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;label for="cp"&amp;gt;Chest Pain Type&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-75"&amp;gt;
                &amp;lt;select id="cp" name="cp" required&amp;gt;
                    &amp;lt;option value="0"&amp;gt;None&amp;lt;/option&amp;gt;
                    &amp;lt;option value="1"&amp;gt;Mild&amp;lt;/option&amp;gt;
                    &amp;lt;option value="2"&amp;gt;Medium&amp;lt;/option&amp;gt;
                    &amp;lt;option value="3"&amp;gt;Severe&amp;lt;/option&amp;gt;
                &amp;lt;/select&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="row"&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;label for="rbp"&amp;gt;Resting Blood Pressure&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-75"&amp;gt;
                &amp;lt;input type="text" id="trestbps" name="trestbps" placeholder="Your bp in mm Hg" required&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="row"&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;label for="chol"&amp;gt;Cholesterol&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-75"&amp;gt;
                &amp;lt;input type="text" id="chol" name="chol" placeholder="Your serum cholestoral in mg/dl" required&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="row"&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;label for="fbs"&amp;gt;Fasting Blood Sugar&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;input type="radio" id="fbs" name="fbs" value="1" required&amp;gt;
                &amp;lt;label for="fbs"&amp;gt;Diabetic&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;input type="radio" id="fbs" name="fbs" value="0"&amp;gt;
                &amp;lt;label for="fbs"&amp;gt;Non diabatic&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="row"&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;label for="restecg"&amp;gt;Resting Electrocardiographic Results&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-75"&amp;gt;
                &amp;lt;select id="restecg" name="restecg" required&amp;gt;
                    &amp;lt;option value="0"&amp;gt;None&amp;lt;/option&amp;gt;
                    &amp;lt;option value="1"&amp;gt;Medium&amp;lt;/option&amp;gt;
                    &amp;lt;option value="2"&amp;gt;Severe&amp;lt;/option&amp;gt;
                &amp;lt;/select&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="row"&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;label for="thalach"&amp;gt;Maximum Heart Rate Achieved&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-75"&amp;gt;
                &amp;lt;input type="text" id="thalach" name="thalach" placeholder="Your maximum achieved heart rate" required&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="row"&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;label for="exang"&amp;gt;Exercise Induced Angina&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;input type="radio" id="exang" name="exang" value="1"&amp;gt;
                &amp;lt;label for="exang"&amp;gt;Yes&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;input type="radio" id="exang" name="exang" value="0" required&amp;gt;
                &amp;lt;label for="exang"&amp;gt;No&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="row"&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;label for="oldpeak"&amp;gt;OldPeak (floating point value)&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-75"&amp;gt;
                &amp;lt;input type="text" id="oldpeak" name="oldpeak"
                       placeholder="ST depression induced by exercise relative to rest" required&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="row"&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;label for="slope"&amp;gt;The Slope of the Peak Exercise ST Segment&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-75"&amp;gt;
                &amp;lt;select id="slope" name="slope" required&amp;gt;
                    &amp;lt;option value="0"&amp;gt;None&amp;lt;/option&amp;gt;
                    &amp;lt;option value="1"&amp;gt;Medium&amp;lt;/option&amp;gt;
                    &amp;lt;option value="2"&amp;gt;Severe&amp;lt;/option&amp;gt;
                &amp;lt;/select&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="row"&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;label for="ca"&amp;gt;Number of Major Vessels (0-3)&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-75"&amp;gt;
                &amp;lt;select id="ca" name="ca" required&amp;gt;
                    &amp;lt;option value="0"&amp;gt;0&amp;lt;/option&amp;gt;
                    &amp;lt;option value="1"&amp;gt;1&amp;lt;/option&amp;gt;
                    &amp;lt;option value="2"&amp;gt;2&amp;lt;/option&amp;gt;
                    &amp;lt;option value="3"&amp;gt;3&amp;lt;/option&amp;gt;
                &amp;lt;/select&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="row"&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;label for="thal"&amp;gt;Thal: 3 = normal; 6 = fixed defect; 7 = reversable defect&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-75"&amp;gt;
                &amp;lt;select id="thal" name="thal" required&amp;gt;
                    &amp;lt;option value="0"&amp;gt;0&amp;lt;/option&amp;gt;
                    &amp;lt;option value="1"&amp;gt;1&amp;lt;/option&amp;gt;
                    &amp;lt;option value="2"&amp;gt;2&amp;lt;/option&amp;gt;
                    &amp;lt;option value="3"&amp;gt;3&amp;lt;/option&amp;gt;
                    &amp;lt;option value="4"&amp;gt;4&amp;lt;/option&amp;gt;
                    &amp;lt;option value="5"&amp;gt;5&amp;lt;/option&amp;gt;
                    &amp;lt;option value="6"&amp;gt;6&amp;lt;/option&amp;gt;
                    &amp;lt;option value="7"&amp;gt;7&amp;lt;/option&amp;gt;
                &amp;lt;/select&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;div class="center"&amp;gt;
            &amp;lt;button class="w3-button w3-green" type="submit"&amp;gt;Submit Data&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/form&amp;gt;

&amp;lt;/div&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It looks a bit fancy now too. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2pb8g_2p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w79avmhf72xano8vy7nu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2pb8g_2p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w79avmhf72xano8vy7nu.png" alt="website" width="880" height="734"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step4-process-the-input"&gt;
  &lt;/a&gt;
  Step-4: Process the input
&lt;/h2&gt;

&lt;p&gt;We have collected the form data. We have to feed this form into the model so that it can predict. Let us write a function for that. At first, we will check the type of object that form creates after we hit the submit button. &lt;strong&gt;Pro-tip, while coding in python and javascript, pass the object through the built-in “type” function. This will yield the type of object that you are going to deal with.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@app.route('/', methods=['GET', 'POST'])
def inputForm():
    print("type", type(request.form))
# type ImmutableMultiDict

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can transform this object into a dictionary, and transform it again into a pandas data frame. This dataframe is the input to the model. We will save the output in a variable named “prediction”. &lt;/p&gt;

&lt;p&gt;The whole function will look like something like the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
import pandas as pd

@app.route('/', methods=['GET', 'POST'])
def inputForm():
    print("type", type(request.form.to_dict(flat=False))) #changing to a dictionary
    print("checking form", request.form.to_dict()) #dictionary to datframe
    data = request.form.to_dict() 
    df = pd.DataFrame(data, index=[0]) 
    print("prediction", pipeline.predict(df)) 
    if pipeline.predict(df) == [1]: 
    prediction = "You are in risk of heart disease" 
    elif pipeline.predict(df) == [0]: 
    prediction = "You don't have risk of heart disease" 
    else: prediction = "Can't predict anything" 
    return render_template('home.html', prediction = prediction, show_predictions_modal = True )

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step5-show-the-prediction"&gt;
  &lt;/a&gt;
  Step-5: Show the prediction
&lt;/h2&gt;

&lt;p&gt;“We have the prediction but how to show that now?” Kitty asked Doge. Doge assured her that she has got it covered. “In our html we will incorporate a modal that will pop after we hit the submit button, said Doge.”&lt;/p&gt;

&lt;p&gt;We will pop the modal first. Doge is getting impatient, so she headed to W3schools again (&lt;a href="https://www.w3schools.com/w3css/tryit.asp?filename=tryw3css_modal2"&gt;https://www.w3schools.com/w3css/tryit.asp?filename=tryw3css_modal2&lt;/a&gt;) and created this modal named “See Result”. &lt;/p&gt;

&lt;p&gt;The button action of this modal is to show the prediction variable that we are returning from app.py file. We also set a flag inside the render_template function. When the prediction is done, we will conditionally render the modal. After hitting the submit button, we will get to see the modal. Click that and you can see the prediction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
{% if show_predictions_modal %}
        &amp;lt;div class="center"&amp;gt;
            &amp;lt;button onclick="document.getElementById('id01').style.display='block'" class="w3-button w3-black"
                    type="submit"&amp;gt;See
                Result
            &amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div id="id01" class="w3-modal"&amp;gt;
            &amp;lt;div class="w3-modal-content"&amp;gt;
                &amp;lt;div class="w3-container"&amp;gt;
                        &amp;lt;span onclick="document.getElementById('id01').style.display='none'"
                              class="w3-button w3-display-topright"&amp;gt;&amp;amp;times;&amp;lt;/span&amp;gt;
                    &amp;lt;div class="w3-container"&amp;gt;
                        &amp;lt;p style="text-align:center"&amp;gt;{{ prediction }}&amp;lt;/p&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    {% endif %}


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PIbngmZe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vu2g1nz5u39ymkkdmx5n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PIbngmZe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vu2g1nz5u39ymkkdmx5n.png" alt="modal" width="880" height="387"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L9k7JXgQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xito8d1e3m735owzbhid.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L9k7JXgQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xito8d1e3m735owzbhid.png" alt="modal result" width="880" height="428"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The entire project is uploaded in my GitHub repository on the branch Project_HeartDiseasPrediction, where you can see the entire html code as I didn’t write the incorporated version in the end - &lt;a href="https://github.com/Afroza2/Production-Based-ML-portfolio/tree/Project_HeartDiseasePrediction"&gt;https://github.com/Afroza2/Production-Based-ML-portfolio/tree/Project_HeartDiseasePrediction&lt;/a&gt;. The dataframe that you passed as the argument of the prediction function can now be created from user input and the output will be shown in the modal. For Part-2, I am planning to write on how to host this entire project as a Heroku application so that you can access the project online. Till then, bonk!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>python</category>
    </item>
  </channel>
</rss>
