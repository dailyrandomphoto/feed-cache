<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What is SEO: A Beginner's Guide to SEO</title>
      <author>Aman Chourasia</author>
      <pubDate>Mon, 19 Jul 2021 17:32:57 +0000</pubDate>
      <link>https://dev.to/amanchourasia/what-is-seo-24d9</link>
      <guid>https://dev.to/amanchourasia/what-is-seo-24d9</guid>
      <description>&lt;p&gt;The full form of SEO is Search Engine Optimization and it is a technique with the help of which we rank our posts in the top position on the first page of any search engine. &lt;/p&gt;

&lt;p&gt;All bloggers' goal is to get the first position in search engines like Google and bring more and more traffic to their blog.&lt;/p&gt;

&lt;p&gt;When you start Blogging we must have heard about SEO.&lt;/p&gt;

&lt;p&gt;Any new blogger does not understand this and just spends more and more time writing blog designs and posts.&lt;/p&gt;

&lt;p&gt;But after some time, despite working so hard, when the visitors of the page on the blog is zero, then the desire to know also arises in their minds that what is this search engine optimization, why is it necessary and how?&lt;/p&gt;

&lt;p&gt;You understand that just as there are crores of stars in the sky, in the same way, there are crores of websites on the internet.&lt;/p&gt;

&lt;p&gt;People only know or recognize the website which is famous by the brand name or which the search engine keeps above in the result page. You would also like that whatever page you have on your blog should make it to the first place of Google.&lt;/p&gt;

&lt;p&gt;That is why let us know what SEO means.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-seo"&gt;
  &lt;/a&gt;
  What is SEO?
&lt;/h2&gt;

&lt;p&gt;The full form of SEO is Search Engine Optimization. This is a way in which we can rank our posts in search engines.&lt;/p&gt;

&lt;p&gt;This is a technique using which we optimize the post written on our blog so that it ranks in the top position on the first page of search engines like Google, Bing, Yahoo...&lt;/p&gt;

&lt;p&gt;You are reading this post because it has reached you only because of SEO. So now be sure that you are at the right place.&lt;/p&gt;

&lt;p&gt;I will give you all the information about this technique. By which you will get every information that will answer every question related to SEO that you are looking for.&lt;/p&gt;

&lt;p&gt;In the beginning, a new blogger does not have any idea about this.&lt;/p&gt;

&lt;p&gt;But gradually the new blogger comes to know the importance of this word and also understands that there is no benefit in blogging without search engine optimization.&lt;/p&gt;

&lt;p&gt;If a blogger is not aware of this, then that blogger's blog will simply be lost on the internet and will not reach the people.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For example&lt;/strong&gt;, let's say that there are many stars in the sky, but we recognize the ones that give more light or are closer to us.&lt;/p&gt;

&lt;p&gt;If we know optimization well then we can make our blog or website 1 No. Rank on position. If we do not do Search Engine Optimization, we will not see our website or blog anywhere on the result page of the Search Engine.&lt;/p&gt;

&lt;p&gt;Let us understand it with the help of an example. Suppose I want to get information about Pen from Google, then I will search "What is Pen"  Now Google will show all the articles related to the word Pen in the search result.&lt;/p&gt;

&lt;p&gt;In this, we will see many different websites that have written posts about Pen. So as we are served the desired website, we will simply go to a website and look for the information required.&lt;/p&gt;

&lt;p&gt;If we do not get satisfaction from the information in it, then we can see the other posts related to it to find our desired answer.&lt;/p&gt;

&lt;p&gt;The search engine optimization of the blog which is at number 1 in this search result is the strongest, only then it is ranking at No 1. position. There are chances of getting more traffic by staying ranked in the first position.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://www.amanchourasia.in/2021/06/what-is-seo.html"&gt;What is SEO: A Beginner's Guide to SEO&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Read More:&lt;/em&gt; &lt;a href="https://www.amanchourasia.in/2021/06/what-is-seo.html"&gt;https://www.amanchourasia.in/2021/06/what-is-seo.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>seo</category>
      <category>blog</category>
    </item>
    <item>
      <title>Script para abrir webcam com Python utilizando OpenCV</title>
      <author>Maria Eduarda de Azevedo Silva</author>
      <pubDate>Mon, 19 Jul 2021 17:07:49 +0000</pubDate>
      <link>https://dev.to/opendevufcg/script-para-abrir-webcam-com-python-utilizando-opencv-f26</link>
      <guid>https://dev.to/opendevufcg/script-para-abrir-webcam-com-python-utilizando-opencv-f26</guid>
      <description>&lt;p&gt;Já pensou em desenvolver algum projetinho que precisa de uma captura de imagem em tempo real, mas não sabe por onde começar? Nesse post vamos trazer uma solução simples de como fazer um script utilizando &lt;strong&gt;Python3&lt;/strong&gt; e &lt;strong&gt;OpenCV&lt;/strong&gt; para abrir a sua webcam!&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HwFlR4XF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/5ee541edd1960466e4f30bd90a3d0590/tenor.gif%3Fitemid%3D3780800" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HwFlR4XF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/5ee541edd1960466e4f30bd90a3d0590/tenor.gif%3Fitemid%3D3780800"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#um-pouco-sobre-a-biblioteca-opencv"&gt;
  &lt;/a&gt;
  Um pouco sobre a biblioteca OpenCV
&lt;/h2&gt;

&lt;p&gt;A &lt;a href="https://opencv.org/"&gt;&lt;strong&gt;OpenCV&lt;/strong&gt;&lt;/a&gt; é uma biblioteca de código aberto desenvolvida pela Intel nos anos 2000, inicialmente nas linguagens C e C++, com o objetivo de melhorar o aparato disponível para o desenvolvimento de aplicações, assim como nos estudos e pesquisas na área de &lt;a href="https://pt.wikipedia.org/wiki/Vis%C3%A3o_computacional"&gt;&lt;strong&gt;Visão Computacional&lt;/strong&gt;&lt;/a&gt;. Hoje em dia ela ainda é referência e se tornou multiplataforma e multilinguagem, isto é, podemos utilizá-la em aplicações nos mais diversos sistemas operacionais e linguagens de programação.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#opencv-python-perfei%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  OpenCV + Python == "PERFEIÇÃO"
&lt;/h2&gt;

&lt;p&gt;O OpenCV não foi apenas desenvolvido para melhorar a experiência em questão de otimização das técnicas e dos algoritmos de processamento de imagem, mas também para fácil utilização da biblioteca pelos interessados. &lt;br&gt;
Quando unimos isso ao Python temos um ambiente perfeito para explorar a criatividade utilizando imagens: biblioteca simples e linguagem de sintaxe simples!&lt;br&gt;
Quer provas? Continua lendo este post!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#instalando-o-opencv-na-sua-m%C3%A1quina"&gt;
  &lt;/a&gt;
  Instalando o OpenCV na sua máquina
&lt;/h2&gt;

&lt;p&gt;Para iniciar, precisaremos instalar o OpenCV na nossa máquina. Para isso, você pode instalar o pacote via pip com o comando abaixo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install opencv-python
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ou&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip3 install opencv-python
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Lembrando que é sempre bom considerar a criação de um &lt;strong&gt;ambiente virtual&lt;/strong&gt; para seus projetos! Assim, caso você queira compartilhar e receber contribuições, irá ajudar bastante na configuração local do projeto na máquina do contribuidor, além de evitar que alguns erros se tornem incapazes de serem resolvidos. Caso não saiba como fazê-lo, consulte este &lt;a href="https://docs.python.org/pt-br/3/library/venv.html"&gt;link&lt;/a&gt; da documentação do Python para saber mais. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#m%C3%A3o-na-massa"&gt;
  &lt;/a&gt;
  Mão na massa!
&lt;/h2&gt;

&lt;p&gt;Com o OpenCV instalado na máquina podemos partir para o código! Crie um arquivo .py, abra o editor de sua preferência e vamos começar!&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--10r4muTg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/3ccc0e15cbf9bee22c30701649065643/tenor.gif%3Fitemid%3D3393582" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--10r4muTg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/3ccc0e15cbf9bee22c30701649065643/tenor.gif%3Fitemid%3D3393582"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Antes de tudo, vamos importar a nossa biblioteca:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cv2&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Com o pacote devidamente importado, poderemos partir para a captura da imagem pela webcam do seu computador!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#abrindo-a-webcam-com-c%C3%B3digo"&gt;
  &lt;/a&gt;
  Abrindo a webcam com código!
&lt;/h3&gt;

&lt;p&gt;Abrir a webcam com um script Python é mais fácil do que você imagina! Vamos utilizar OpenCV para capturar imagens em tempo real.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#passo-1"&gt;
  &lt;/a&gt;
  Passo 1:
&lt;/h4&gt;

&lt;p&gt;O primeiro passo é instanciar um objeto &lt;a href="https://docs.opencv.org/master/dd/d43/tutorial_py_video_display.html"&gt;&lt;strong&gt;VideoCapture&lt;/strong&gt;&lt;/a&gt;. Essa classe do OpenCV é responsável por realizar a captura de frames em um vídeo, o qual passamos o caminho como parâmetro na criação do objeto. No caso da leitura da webcam, precisamos passar o seu ID de referência (se você usa um laptop, o ID da sua câmera primária é 0):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VideoCapture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#passo-2"&gt;
  &lt;/a&gt;
  Passo 2:
&lt;/h4&gt;

&lt;p&gt;Para iniciar o segundo passo, é importante que você entenda &lt;strong&gt;o que é um vídeo&lt;/strong&gt;. De uma forma bem genérica, &lt;strong&gt;um vídeo é uma sucessão de imagens que imprimem uma sensação de movimento&lt;/strong&gt;. A cada uma dessas imagens damos o nome de &lt;strong&gt;quadros (ou frames)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Fazendo o paralelo disso com lógica de programação, &lt;strong&gt;qual a estrututa que utilizamos para fazer uma repetição sucessiva de alguma coisa?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eRC_OFV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/7ffd2774603c1aac0d09704ec29d1255/tenor.gif%3Fitemid%3D11731609" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eRC_OFV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/7ffd2774603c1aac0d09704ec29d1255/tenor.gif%3Fitemid%3D11731609"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Se você respondeu &lt;strong&gt;laço&lt;/strong&gt;, está mais que correto! Mas, qual laço escolher, &lt;strong&gt;for&lt;/strong&gt; ou &lt;strong&gt;while&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G9W819YY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/d727553135e15b67eaee12ad00b4e213/tenor.gif%3Fitemid%3D7528656" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G9W819YY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/d727553135e15b67eaee12ad00b4e213/tenor.gif%3Fitemid%3D7528656"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Vamos pensar: estamos fazendo uma captura de vídeo em &lt;strong&gt;tempo real&lt;/strong&gt; com a nossa webcam, então &lt;strong&gt;não sabemos quando a captura irá parar&lt;/strong&gt;, desse modo &lt;strong&gt;enquanto estiver rodando nosso script eu capturo um frame novo&lt;/strong&gt;. Matamos a charada e vamos de &lt;strong&gt;loop while&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Passando essa ideia para Python, temos algo do tipo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;rodando&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;rodando&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Captura um frame
&lt;/span&gt;    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#passo-3"&gt;
  &lt;/a&gt;
  Passo 3:
&lt;/h4&gt;

&lt;p&gt;Agora podemos partir para todo o código dentro do loop!&lt;/p&gt;

&lt;p&gt;Para fazer a captura do frame da vez, usaremos o método &lt;strong&gt;read()&lt;/strong&gt; no nosso objeto &lt;strong&gt;VideoCapture&lt;/strong&gt;. Esse método retorna uma tupla com dois valores: um booleano referente ao &lt;strong&gt;status de captura&lt;/strong&gt; e o próprio &lt;strong&gt;frame no formato de um array NumPy&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;O valor do &lt;strong&gt;status&lt;/strong&gt; é muito útil para quando estamos &lt;strong&gt;lendo um vídeo passado por um caminho&lt;/strong&gt;, visto que, quando chegamos no último frame do mesmo, o próximo não poderá ser capturado, o retorno desse valor será False e poderemos parar a execução do loop sem o lançamento de uma exceção. Além disso, pode haver algum problema na captura da webcam e isso ser indicado por esse retorno, por isso, vamos utilizá-lo. &lt;/p&gt;

&lt;p&gt;Já o &lt;strong&gt;frame&lt;/strong&gt; é essencial, já que é o que mais nos interessa! A &lt;strong&gt;imagem retornada&lt;/strong&gt; será o alvo dos &lt;strong&gt;processamentos&lt;/strong&gt; feitos durante a iteração do loop e também será jogada na saída.&lt;/p&gt;

&lt;p&gt;Faremos isso da seguinte forma, dissociando os valores retornados em duas variáveis:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#...
&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;rodando&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#passo-4"&gt;
  &lt;/a&gt;
  Passo 4:
&lt;/h4&gt;

&lt;p&gt;Chegou o momento de falarmos das &lt;strong&gt;condições de parada&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zOXDIySM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/4e765a33c88071c8c321f3ce5e12ff8d/tenor.gif%3Fitemid%3D14191522" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zOXDIySM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/4e765a33c88071c8c321f3ce5e12ff8d/tenor.gif%3Fitemid%3D14191522"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Queremos parar a captura em &lt;strong&gt;dois casos&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Em casos de erro &lt;/li&gt;
&lt;li&gt;Caso eu apenas queira parar de executar o script&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Vamos unir essas duas condições de parada em apenas uma condição:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#...
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;waitKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xff&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'q'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;rodando&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z_jzzMaq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/86f3b65249fbaca12e142281558c06ac/tenor.gif%3Fitemid%3D4486363" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z_jzzMaq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/86f3b65249fbaca12e142281558c06ac/tenor.gif%3Fitemid%3D4486363"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Parece estranho, mas não é difícil de entender. O que estamos querendo dizer é basicamente "&lt;strong&gt;se deu algo errado na captura da imagem ou o usuário apertou a tecla 'q', então pare o script!&lt;/strong&gt;".&lt;/p&gt;

&lt;p&gt;A função &lt;a href="https://docs.opencv.org/master/d7/dfc/group__highgui.html#ga5628525ad33f52eab17feebcfba38bd7"&gt;&lt;strong&gt;cv.waitKey(1)&lt;/strong&gt;&lt;/a&gt; espera que um evento de tecla acionada aconteça e, caso ocorra, ela retorna o valor da tecla pressionada segundo o padrão UTF-8. Para comparar se a tecla pressionada foi a 'q', combinamos o retorno dessa função com a constante hexadecimal &lt;strong&gt;0xff&lt;/strong&gt; e utilizamos a função padrão de python &lt;strong&gt;ord('q')&lt;/strong&gt;, que retorna o valor de uma string passada como parâmetro em UTF-8.&lt;/p&gt;

&lt;p&gt;Caso &lt;strong&gt;ao menos uma dessas condições seja satisfeita&lt;/strong&gt;, a nossa variável &lt;strong&gt;rodando&lt;/strong&gt; passa a receber &lt;strong&gt;False&lt;/strong&gt; e na próxima iteração há a &lt;strong&gt;parada do loop&lt;/strong&gt;. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#passo-5"&gt;
  &lt;/a&gt;
  Passo 5:
&lt;/h4&gt;

&lt;p&gt;Nesse estágio já temos o objeto que captura nossa imagem da webcam, a imagem capturada devidamente lida e também uma condição de parada do nosso loop. Só nos resta uma coisa: &lt;strong&gt;jogar essa imagem na saída&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t4i52zXJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.tenor.com/images/55bf09e811c9fb48f27afcdb5dfe295b/tenor.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t4i52zXJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.tenor.com/images/55bf09e811c9fb48f27afcdb5dfe295b/tenor.gif"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Para isso utilizaremos a função &lt;strong&gt;cv.imshow()&lt;/strong&gt; do OpenCV. Essa função cria recebe dois parâmetros: uma string referente ao &lt;strong&gt;nome da janela&lt;/strong&gt; e o array que se refere a &lt;strong&gt;imagem&lt;/strong&gt; que queremos mostrar. Temos tudo que precisamos!&lt;/p&gt;

&lt;p&gt;Para finalmente enxergarmos a captura em tempo real, escrevemos a seguinte linha dentro do loop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#...
&lt;/span&gt;    &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Camera"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#finalmente-o-script"&gt;
  &lt;/a&gt;
  Finalmente, o script!
&lt;/h2&gt;

&lt;p&gt;Tudo isso resulta em um script de &lt;strong&gt;apenas 8 linhas&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7-5dSBU_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.tenor.com/images/774f034a3348256ebc3032b8c166d15f/tenor.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7-5dSBU_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.tenor.com/images/774f034a3348256ebc3032b8c166d15f/tenor.gif"&gt;&lt;/a&gt;
&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cv2&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt; 

&lt;span class="n"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VideoCapture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rodando&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;rodando&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;waitKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xff&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'q'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;rodando&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Camera"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Com isso temos tudo que você precisa para capturar imagens em tempo real utilizando um &lt;strong&gt;script simples em Python junto com OpenCV&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;E o que fazer com esse script?&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--50IngGUR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/b200fc13a785faf7d8589748b1794b27/tenor.gif%3Fitemid%3D13895777" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--50IngGUR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/b200fc13a785faf7d8589748b1794b27/tenor.gif%3Fitemid%3D13895777"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Existem várias possibilidades de aproveitar essa base, que vão desde &lt;strong&gt;detectores&lt;/strong&gt; até registros de imagens para alguma &lt;strong&gt;aplicação ou sistema feito em Python&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Muito obrigada por ter lido até o fim! Se esse post te inspirou a criar alguma coisa, não se esquece de postar nas tuas redes e me marcar, que eu quero ver ~e quem sabe eu volte aqui com mais coisas legais para fazer com OpenCV~!&lt;/p&gt;

&lt;p&gt;Minhas redes:&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/MariaEduardaDeAzevedo/"&gt;LinkedIn: Maria Eduarda de Azevedo Silva&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/ddt_azevedo"&gt;Twitter: @ddt_azevedo&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/MariaEduardaDeAzevedo"&gt;GitHub: MariaEduardaDeAzevedo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ptbr</category>
      <category>opencv</category>
      <category>python</category>
      <category>visaocomputacional</category>
    </item>
    <item>
      <title>To-do list with Observer Pattern</title>
      <author>Usman Suleiman</author>
      <pubDate>Mon, 19 Jul 2021 17:06:25 +0000</pubDate>
      <link>https://dev.to/devusman/to-do-list-with-observer-pattern-1cl7</link>
      <guid>https://dev.to/devusman/to-do-list-with-observer-pattern-1cl7</guid>
      <description>&lt;p&gt;In this post, we'll be learning about the Observer Pattern by creating a simple To-do application.&lt;/p&gt;

&lt;p&gt;In a nutshell, the Observer Pattern is similar to Twitter's &lt;em&gt;Followers&lt;/em&gt; feature. When you post a tweet, all your followers get notified, and they decide whether to read your tweet or not. We can say our &lt;em&gt;Followers&lt;/em&gt; are observing our tweets.&lt;/p&gt;

&lt;p&gt;The Observer Pattern has only two components. The &lt;em&gt;Subject&lt;/em&gt; and the &lt;em&gt;Observers&lt;/em&gt;. The &lt;em&gt;Observers&lt;/em&gt; only want to know when we update the &lt;em&gt;Subject&lt;/em&gt;. They don't care when it happens.&lt;/p&gt;

&lt;p&gt;Going back to our Twitter analogy, our Tweet is the Subject, while our Followers are the Observers.&lt;/p&gt;

&lt;p&gt;So, how does it relate to our Todo list application? We'll uncover the answer while we build the app, but first, we need to know the features of our app.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We want to be able to add a unique to-do to our list&lt;/li&gt;
&lt;li&gt;We want to be able to remove a to-do from our list&lt;/li&gt;
&lt;li&gt;We want to persist our list on page reload&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's create the HTML of our Todo app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Observer Pattern&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Add&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;// We'll add all our code here&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this HTML, we have an unordered list element which will hold our todo items, a form element to add a todo item to our list, and finally a &lt;code&gt;script&lt;/code&gt; element to hold our JavaScript code.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Subject&lt;/em&gt; will be our todo items. So we create an array list to store our todos.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt; &lt;span class="c1"&gt;// Subject&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we create a list of Observers. (Functions that will make use of the list).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt; &lt;span class="c1"&gt;// Subject&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;observers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we implement the add todo functionality. Each todo needs to be uniquely identified, so assign each item with an ID.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;form&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Clear text input&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#introducing-our-first-observer"&gt;
  &lt;/a&gt;
  Introducing our first observer
&lt;/h2&gt;

&lt;p&gt;When you try running the app, you'll notice nothing is being displayed on screen. That's because we haven't hooked up our &lt;code&gt;todos&lt;/code&gt; array to our HTML unordered list element.&lt;/p&gt;

&lt;p&gt;Our HTML &lt;code&gt;ul&lt;/code&gt; element is interested in our &lt;code&gt;todos&lt;/code&gt; array. It wants to observe our array list so that it can display it on the screen. So it wants to be an Observer. Let's implement a function that will display our list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;displayTodos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ul&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ul&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we register this function as an &lt;em&gt;Observer&lt;/em&gt; by adding it to our list of &lt;code&gt;observers&lt;/code&gt;. To do that we create a helper function to &lt;code&gt;register&lt;/code&gt; new observers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;registerObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// The observers array is basically an array of functions&lt;/span&gt;
    &lt;span class="nx"&gt;observers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;registerObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;displayTodos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Despite registering as an observer, nothing is being displayed. That's because our &lt;code&gt;todos&lt;/code&gt; array hasn't notified the observers.&lt;br&gt;
We create a &lt;code&gt;notifyObservers&lt;/code&gt; function that will loop through our &lt;code&gt;observers&lt;/code&gt; array and call each &lt;code&gt;observer&lt;/code&gt; function to know an update has happened.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;notifyObservers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;observers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we call the &lt;code&gt;notifyObservers&lt;/code&gt; function whenever we change the &lt;em&gt;Subject&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;notifyObservers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Add this line&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, run the app in your browser and see your todos being added to the list.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#congratulations-on-your-first-bug"&gt;
  &lt;/a&gt;
  Congratulations on your first bug 🥳
&lt;/h2&gt;

&lt;p&gt;You've probably noticed that our list doubles every time we add a new item. We can fix that by clearing it first.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Inside the displayTodos function&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;displayTodos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ul&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ul&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Add this line&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have "add" functionality working, it's time to remove todos. First, we add a remove &lt;code&gt;button&lt;/code&gt; to every &lt;code&gt;li&lt;/code&gt; element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;displayTodos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ul&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ul&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// Add these lines&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Remove&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we create a &lt;code&gt;removeTodo&lt;/code&gt; function that will handle removing to-dos by their ID.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;removeTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;notifyObservers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we attach a &lt;code&gt;click&lt;/code&gt; event listener to the remove button, that will call the &lt;code&gt;removeTodo&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Inside the displayTodos function&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Remove&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Attach an event listener here&lt;/span&gt;
&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;removeTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#introducing-the-second-observer"&gt;
  &lt;/a&gt;
  Introducing the second observer
&lt;/h2&gt;

&lt;p&gt;The final step is to save our list in local storage and load it when we reload the page. We want our local storage to be an observer, and save the list whenever it is notified.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;persistData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;saved-todos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;registerObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;persistData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we load the saved todos on page load.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loadTodos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;notifyObservers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;load&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;savedTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;saved-todos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;savedTodos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;loadTodos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;savedTodos&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-clean-code"&gt;
  &lt;/a&gt;
  The Clean Code
&lt;/h2&gt;

&lt;p&gt;Our code is working. It meets the minimum requirements, but it's not elegant. If you follow closely, you'll notice there are 2 kinds of code. Those that manipulate the unordered list element and those that manipulate the &lt;code&gt;todos&lt;/code&gt; array list. We are mixing UI logic and State logic, which is an attribute of a messy code.&lt;/p&gt;

&lt;p&gt;Let us start by wrapping our state logic in a function and exposing the &lt;code&gt;register&lt;/code&gt;, &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, and &lt;code&gt;load&lt;/code&gt; functions as methods to an object. This is called &lt;em&gt;Abstraction&lt;/em&gt;.&lt;br&gt;
Our &lt;code&gt;todos&lt;/code&gt; array is no longer visible to the UI logic code. So we create the &lt;code&gt;getTodos&lt;/code&gt; method for accessing the &lt;code&gt;todos&lt;/code&gt;. This is called &lt;em&gt;Encapsulation&lt;/em&gt;. The art of hiding internal state and exposing it via a method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createSubject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;observers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;registerObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;observers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;notifyObservers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;observers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;notifyObservers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;removeTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;notifyObservers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loadTodos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;notifyObservers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;registerObserver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;removeTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;loadTodos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we use the &lt;code&gt;createSubject&lt;/code&gt; to create a todos subject.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSubject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;displayTodos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ul&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ul&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Remove&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;displayTodos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerObserver&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;saved-todos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;load&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;savedTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;saved-todos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;savedTodos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadTodos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;savedTodos&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;form&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;createSubject&lt;/code&gt; function adheres to the Observer Pattern design. We subscribe to the todos by registering as observers. What about if we no longer want to be notified?&lt;br&gt;
It's quite simple. We can return a function in the &lt;code&gt;registerObserver&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;registerObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;observers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;observers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;observers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;currentObserver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we can save the return value after registering and call it later to unregister.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;unregisterDisplayTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;displayTodos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// later when we want to unregister&lt;/span&gt;
&lt;span class="nx"&gt;unregisterDisplayTodos&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// displayTodos will no longer be notified&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#fin"&gt;
  &lt;/a&gt;
  FIN
&lt;/h2&gt;

&lt;p&gt;Redux is a popular JavaScript library that uses the &lt;em&gt;Observer Pattern&lt;/em&gt;. In the next post, we'll demystify redux by creating our own small redux library.&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>iOS App Review on iPhone: Resume Builder - Professionals on App Store Connect</title>
      <author>Orestis Pantazos</author>
      <pubDate>Mon, 19 Jul 2021 17:05:33 +0000</pubDate>
      <link>https://dev.to/orestispantazos/ios-app-review-on-iphone-resume-builder-professionals-on-app-store-connect-1oji</link>
      <guid>https://dev.to/orestispantazos/ios-app-review-on-iphone-resume-builder-professionals-on-app-store-connect-1oji</guid>
      <description>&lt;p&gt;App Store Connect: &lt;br&gt;
&lt;a href="https://apps.apple.com/gr/app/resume-builder-professionals/id1569380836"&gt;https://apps.apple.com/gr/app/resume-builder-professionals/id1569380836&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;YouTube Video: &lt;br&gt;
&lt;a href="https://youtu.be/089SGaIYFOw"&gt;https://youtu.be/089SGaIYFOw&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;iOS App Review on #iPhone: Resume Builder - Professionals on App Store Connect&lt;/p&gt;

&lt;p&gt;The Resume Builder for #LinkedIn users is an iOS mobile application that offers a great user experience for building your ideal template to earn your job of your preference.&lt;/p&gt;

&lt;p&gt;LinkedIn has a lot of jobs worldwide, but it is needed to upload a great material including in your #CV with no time.&lt;/p&gt;

&lt;p&gt;Your job-hunting is already started on LinkedIn. Good luck!&lt;/p&gt;

&lt;p&gt;Resume Builder - Professionals is the next social network for professionals that like LinkedIn networks and groups. Build your professional network based on Resume Builder, connect with anyone, and use your professional profile as an online resume with Apple Sign-In, Google Sign-In, Microsoft Sign-In and GitHub for developer professionals.&lt;/p&gt;

&lt;p&gt;JOB SEARCH&lt;/p&gt;

&lt;p&gt;• Search and apply to millions of job openings including your responsive resume&lt;br&gt;
• Upload and easily submit your resume to jobs that fit on LinkedIn jobs&lt;br&gt;
• Save searches and create alerts to be the first to know about new job openings and worldwide events&lt;/p&gt;

&lt;p&gt;The Resume Builder - Professionals app has a low cost to use and download.&lt;/p&gt;




&lt;p&gt;There are no additional subscriptions or premium plans. Find a job, create your business, find and hire the new talented persons worldwide with a really low cost on 4.99 $ all over the world.&lt;/p&gt;

&lt;p&gt;Privacy Policy: &lt;a href="https://opendevops.dev/"&gt;https://opendevops.dev/&lt;/a&gt;&lt;br&gt;
Terms of Service: &lt;a href="https://opendevops.dev/"&gt;https://opendevops.dev/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ios</category>
      <category>ipad</category>
      <category>swift</category>
      <category>appstore</category>
    </item>
    <item>
      <title>tmux choose-tree</title>
      <author>Waylon Walker</author>
      <pubDate>Mon, 19 Jul 2021 16:55:50 +0000</pubDate>
      <link>https://dev.to/waylonwalker/tmux-choose-tree-13pj</link>
      <guid>https://dev.to/waylonwalker/tmux-choose-tree-13pj</guid>
      <description>&lt;p&gt;Choose tree is a powerful tmux utility that provides a graphical interface to&lt;br&gt;
preview all sessions, windows, and panes, move between them kill them, move&lt;br&gt;
them and much more.&lt;/p&gt;

&lt;p&gt;The default keybinding&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bind-key &lt;span class="nt"&gt;-T&lt;/span&gt; prefix s choose-tree &lt;span class="nt"&gt;-s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;my preferred keybinding to open sessions and windows collapsed and Zoomed in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bind-key &lt;span class="nt"&gt;-T&lt;/span&gt; prefix s choose-tree &lt;span class="nt"&gt;-s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the man page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;choose-tree &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;-GNrswZ&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;-F&lt;/span&gt; format] &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;-f&lt;/span&gt; filter] &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;-K&lt;/span&gt; key-format] &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;-O&lt;/span&gt; sort-order] &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;-t&lt;/span&gt; target-pane] &lt;span class="o"&gt;[&lt;/span&gt;template]
        Put a pane into tree mode, where a session, window or pane may be chosen interactively from a tree.  Each session, window or pane is shown on
        one line.  A shortcut key is shown on the left &lt;span class="k"&gt;in &lt;/span&gt;brackets allowing &lt;span class="k"&gt;for &lt;/span&gt;immediate choice, or the tree may be navigated and an item chosen or
        otherwise manipulated using the keys below.  &lt;span class="nt"&gt;-s&lt;/span&gt; starts with sessions collapsed and &lt;span class="nt"&gt;-w&lt;/span&gt; with windows collapsed.  &lt;span class="nt"&gt;-Z&lt;/span&gt; zooms the pane.  The follow‐
        ing keys may be used &lt;span class="k"&gt;in &lt;/span&gt;tree mode:

            Key    Function
            Enter  Choose selected item
            Up     Select previous item
            Down   Select next item
            +      Expand selected item
            -      Collapse selected item
            M-+    Expand all items
            M--    Collapse all items
            x      Kill selected item
            X      Kill tagged items
            &amp;lt;      Scroll list of previews left
            &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;      Scroll list of previews right
            C-s    Search by name
            m      Set the marked pane
            M      Clear the marked pane
            n      Repeat last search
            t      Toggle &lt;span class="k"&gt;if &lt;/span&gt;item is tagged
            T      Tag no items
            C-t    Tag all items
            :      Run a &lt;span class="nb"&gt;command &lt;/span&gt;&lt;span class="k"&gt;for &lt;/span&gt;each tagged item
            f      Enter a format to filter items
            H      Jump to the starting pane
            O      Change &lt;span class="nb"&gt;sort &lt;/span&gt;field
            r      Reverse &lt;span class="nb"&gt;sort &lt;/span&gt;order
            v      Toggle preview
            q      Exit mode

        After a session, window or pane is chosen, ‘%%’ is replaced by the target &lt;span class="k"&gt;in &lt;/span&gt;template and the result executed as a command.  If template is
        not given, &lt;span class="s2"&gt;"switch-client -t '%%'"&lt;/span&gt; is used.

        &lt;span class="nt"&gt;-O&lt;/span&gt; specifies the initial &lt;span class="nb"&gt;sort &lt;/span&gt;field: one of ‘index’, ‘name’, or ‘time’.  &lt;span class="nt"&gt;-r&lt;/span&gt; reverses the &lt;span class="nb"&gt;sort &lt;/span&gt;order.  &lt;span class="nt"&gt;-f&lt;/span&gt; specifies an initial filter: the fil‐
        ter is a format - &lt;span class="k"&gt;if &lt;/span&gt;it evaluates to zero, the item &lt;span class="k"&gt;in &lt;/span&gt;the list is not shown, otherwise it is shown.  If a filter would lead to an empty list,
        it is ignored.  &lt;span class="nt"&gt;-F&lt;/span&gt; specifies the format &lt;span class="k"&gt;for &lt;/span&gt;each item &lt;span class="k"&gt;in &lt;/span&gt;the tree and &lt;span class="nt"&gt;-K&lt;/span&gt; a format &lt;span class="k"&gt;for &lt;/span&gt;each shortcut key&lt;span class="p"&gt;;&lt;/span&gt; both are evaluated once &lt;span class="k"&gt;for &lt;/span&gt;each
        line.  &lt;span class="nt"&gt;-N&lt;/span&gt; starts without the preview.  &lt;span class="nt"&gt;-G&lt;/span&gt; includes all sessions &lt;span class="k"&gt;in &lt;/span&gt;any session &lt;span class="nb"&gt;groups &lt;/span&gt;&lt;span class="k"&gt;in &lt;/span&gt;the tree rather than only the first.  This &lt;span class="nb"&gt;command
        &lt;/span&gt;works only &lt;span class="k"&gt;if &lt;/span&gt;at least one client is attached.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://waylonwalker.com/tmux-nav-2021/"&gt;https://waylonwalker.com/tmux-nav-2021/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;for more information on how I navigate tmux, check out this full post&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>techtalks</category>
      <category>tmux</category>
      <category>linux</category>
    </item>
    <item>
      <title>A Cloud Migration Questionnaire</title>
      <author>Chirag Modi</author>
      <pubDate>Mon, 19 Jul 2021 16:53:13 +0000</pubDate>
      <link>https://dev.to/chiragdm/a-cloud-migration-questionnaire-17ng</link>
      <guid>https://dev.to/chiragdm/a-cloud-migration-questionnaire-17ng</guid>
      <description>&lt;p&gt;The questions you must ask your customers before migrating their on-premise workload to AWS Cloud.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://betterprogramming.pub/a-cloud-migration-questionnaire-for-solution-architects-dec7ffcf063e?source=friends_link&amp;amp;sk=accffce9d79a29769a908036b90f9845"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kbPYz9pp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5cxy6ft4fd59xlkg9e01.png" alt="Cloud Migration Questionnaire. Image by author"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://betterprogramming.pub/a-cloud-migration-questionnaire-for-solution-architects-dec7ffcf063e#28dc"&gt;Why do you want to migrate to the cloud?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://betterprogramming.pub/a-cloud-migration-questionnaire-for-solution-architects-dec7ffcf063e#06f8"&gt;How many code changes can you afford as part of migration?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://betterprogramming.pub/a-cloud-migration-questionnaire-for-solution-architects-dec7ffcf063e#edbe"&gt;What type of database are you using?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://betterprogramming.pub/a-cloud-migration-questionnaire-for-solution-architects-dec7ffcf063e#fe49"&gt;What type of load balancers are you using?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://betterprogramming.pub/a-cloud-migration-questionnaire-for-solution-architects-dec7ffcf063e#69e0"&gt;What application servers and versions are you using?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://betterprogramming.pub/a-cloud-migration-questionnaire-for-solution-architects-dec7ffcf063e#f325"&gt;What operating system are you using?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://betterprogramming.pub/a-cloud-migration-questionnaire-for-solution-architects-dec7ffcf063e#f6b2"&gt;Is your application public facing?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://betterprogramming.pub/a-cloud-migration-questionnaire-for-solution-architects-dec7ffcf063e#6e29"&gt;Is your application stateful or stateless?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://betterprogramming.pub/a-cloud-migration-questionnaire-for-solution-architects-dec7ffcf063e#afeb"&gt;Is your application containerized?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://betterprogramming.pub/a-cloud-migration-questionnaire-for-solution-architects-dec7ffcf063e#63e2"&gt;What are the current resource requirements of the servers?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://betterprogramming.pub/a-cloud-migration-questionnaire-for-solution-architects-dec7ffcf063e#86c2"&gt;How is your workload variation?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://betterprogramming.pub/a-cloud-migration-questionnaire-for-solution-architects-dec7ffcf063e#0b9e"&gt;What are your logging and monitoring requirements?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://betterprogramming.pub/a-cloud-migration-questionnaire-for-solution-architects-dec7ffcf063e#ecab"&gt;What is your current backup strategy?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take a look at a detailed &lt;a href="https://betterprogramming.pub/a-cloud-migration-questionnaire-for-solution-architects-dec7ffcf063e?source=friends_link&amp;amp;sk=accffce9d79a29769a908036b90f9845"&gt;post&lt;/a&gt; to know why these questions are important and how it helps to lay the foundation for future design solutions and plan migrations better.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>migration</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Software Engineering Principle — Coupling &amp; Cohesion</title>
      <author>Mohammad Quanit</author>
      <pubDate>Mon, 19 Jul 2021 16:44:32 +0000</pubDate>
      <link>https://dev.to/mquanit/software-engineering-principle-coupling-cohesion-1mma</link>
      <guid>https://dev.to/mquanit/software-engineering-principle-coupling-cohesion-1mma</guid>
      <description>&lt;p&gt;Hi engineers and peers, In this article, I’ll be discussing one of the core software engineering principles, that every software engineer should know or at least be aware of it. As we engineers are supposed to grow in our careers, we have to upgrade our skills whether it’s practical or theoretical.&lt;/p&gt;

&lt;p&gt;So from this article, I am starting to share some software engineering principles &amp;amp; design patterns for writing better and clean code with best practices. This is the first one of this series, in which I’ll be discussing the importance of coupling &amp;amp; cohesion in software. But before moving into the main topic, we should know what is &lt;strong&gt;modularization&lt;/strong&gt; so we can grasp the concept of coupling easily.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Modularization:&lt;/strong&gt; is a process of breaking software into multiple small modules, where each module works independently. The main advantage of modularization is that it is easy to understand the software, it becomes reusable, and can be tested easily.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;b&gt;What is Coupling in Software engineering?&lt;/b&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Coupling:&lt;/strong&gt; in software engineering is the inter-dependency or degree of relationship between multiple modules/packages/components. Coupling is also called Inter-Module Binding.&lt;/p&gt;

&lt;p&gt;Multiple modules/packages/components that are &lt;strong&gt;highly coupled&lt;/strong&gt; are strongly dependent on each other.&lt;/p&gt;

&lt;p&gt;Multiple modules/packages/components that are &lt;strong&gt;loosely coupled&lt;/strong&gt; are not or somehow dependent on each other.&lt;/p&gt;

&lt;p&gt;Good software is always loosely coupled so it is considered as best practice to make your modules/packages/components loosely coupled or interdependent so that they can be tested and managed to maintain easily. The more number of calls between the modules increases the more it’ll prone to errors. For low coupled classes, changing something major in one class should not affect the other. High coupling would make it difficult to change and maintain your code&lt;/p&gt;

&lt;p&gt;Below is the image for visualization of coupling&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FK14BvAQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93r5hudaf5cbs9szffue.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FK14BvAQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93r5hudaf5cbs9szffue.png" alt="Coupling cohesion visuals"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#types-of-coupling"&gt;
  &lt;/a&gt;
  Types of Coupling
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Data Coupling:&lt;/strong&gt; When modules shared primitive data between them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Stamp Coupling:&lt;/strong&gt; When modules shared composite or structural data between them and It must be a non-global data structure. for example, Passing object or structure variable in react components.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Control Coupling:&lt;/strong&gt; When data from one module is used to direct the structure of instruction execution in another.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;External Coupling:&lt;/strong&gt; When two modules shared externally imposed data type that is external to the software like communication protocols, device interfaces.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Common Coupling:&lt;/strong&gt; When two modules shared the same global data &amp;amp; dependent on them, like state management in JavaScript frameworks.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Content Coupling:&lt;/strong&gt; When two modules shared code and can modify the data of another module, which is the worst coupling and should be avoided.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So now you get the idea of Coupling in software engineering, there is another concept that is used with coupling known as cohesion.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;b&gt;What is Cohesion in Software engineering?&lt;/b&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Cohesion refers to what module can do, internally. It is also called &lt;strong&gt;Intra-Module&lt;/strong&gt; binding as it measures the strength of relationship of functionalities inside a module/package/component. Cohesion should always be high means that a module/package/component is focused on what it should be doing, i.e. only methods relating to the intention of the class.&lt;/p&gt;

&lt;p&gt;Example of low cohesion:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-------------------
|Add To Cart module|
-------------------
| login()              |
| selectProduct()      |
| getShippingDetails() |
| PrintReceipt()       |
------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example of high cohesion&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;---------------------------------
| Add To Cart module      |
---------------------------------
| selectProduct()         |
| getShippingDetails()    |
| calculatePrice()  |     |
---------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, you see that login function is not relatable to add to cart module, that is low cohesion which is considered as bad in software engineering.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#types-of-coupling"&gt;
  &lt;/a&gt;
  Types of Coupling
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Functional Cohesion:&lt;/strong&gt; The execution of the task related to the problem is the only concern from all the elements inside the module.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Sequential Cohesion:&lt;/strong&gt; The output of an element is the input of other element in a module i.e., data flow between the parts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Communicational Cohesion:&lt;/strong&gt; Multiple elements in a module operate on same input data and produce same output data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Procedural Cohesion:&lt;/strong&gt; The activities in module are related by sequence, otherwise they are not related.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Coincidental Cohesion:&lt;/strong&gt; The activities with meaningless relationship with one another are contributed by the elements in the module.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;So always keep that in mind that :&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Good Software has always low coupling with high cohesion&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>codequality</category>
      <category>architecture</category>
      <category>design</category>
      <category>softwareengineering</category>
    </item>
    <item>
      <title>Azure Nibble - How to get TcpPing on Linux Azure App Service</title>
      <author>Marcel.L</author>
      <pubDate>Mon, 19 Jul 2021 16:34:17 +0000</pubDate>
      <link>https://dev.to/pwd9000/azure-nibble-how-to-get-tcpping-on-linux-azure-app-service-2dap</link>
      <guid>https://dev.to/pwd9000/azure-nibble-how-to-get-tcpping-on-linux-azure-app-service-2dap</guid>
      <description>&lt;h2&gt;
  &lt;a href="#ping-vs-tcpping"&gt;
  &lt;/a&gt;
  Ping vs. TcpPing?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Ping&lt;/strong&gt; is a computer network administration software utility used to test the reachability of a host on an Internet Protocol (IP) network using Internet Control Message Protocol (ICMP).&lt;/p&gt;

&lt;p&gt;There can be instances where a remote host, has blocked ICMP traffic, which in turn means we cannot test/check to connectivity to the remote host. In this kind of a situation, what you can do to check the host's presence is to telnet to a known port or to try making a TCP connection to the host.&lt;/p&gt;

&lt;p&gt;This is where &lt;strong&gt;tcpping&lt;/strong&gt; comes in and is a TCP oriented &lt;strong&gt;ping&lt;/strong&gt; alternative. It is used to test the reachability of a service on a host using TCP/IP and measure the time it takes to connect to the specified port. It is a very useful tool to help with diagnosing network related issues on Azure App Service.&lt;/p&gt;

&lt;p&gt;Windows based app services in Azure automatically have &lt;strong&gt;tcpping&lt;/strong&gt; enabled, however this valuable tool is missing on linux based app services, so in todays tutorial we will look at how we can get and run &lt;strong&gt;tcpping&lt;/strong&gt; on linux based app services.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Go to your app service Kudu site: &lt;strong&gt;https://[sitename].scm.azurewebsites.net/webssh/host&lt;/strong&gt; to establish a SSH web session. Or use the azure portal to navigate to the kudu site as follow:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LL4Wuj-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-Nibble-TcpPing-Linux-Appsvc/assets/aznav.png" alt="aznav"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IU5IivaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-Nibble-TcpPing-Linux-Appsvc/assets/kudu2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IU5IivaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-Nibble-TcpPing-Linux-Appsvc/assets/kudu2.png" alt="kudu2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;apt-get install tcptraceroute&lt;/code&gt; (&lt;strong&gt;Required:&lt;/strong&gt; if not already present)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;apt-get install bc&lt;/code&gt; (&lt;strong&gt;Required:&lt;/strong&gt; if minimal Linux Runtime used, e.g. docker)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd /usr/bin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wget http://www.vdberg.org/~richard/tcpping&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chmod 755 tcpping&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How to use
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;tcpping [-d] [-c] [-r sec] [-x count] ipaddress [port]&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[-d]: print timestamp before each result.&lt;/li&gt;
&lt;li&gt;[-c]: use columned output for easy parsing.&lt;/li&gt;
&lt;li&gt;[-r]: interval in seconds between consecutive probes (1 second by default).&lt;/li&gt;
&lt;li&gt;[-x]: repeat n times (unlimited by default).&lt;/li&gt;
&lt;li&gt;[port]: target port (80 by default).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dwMaTpBk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-Nibble-TcpPing-Linux-Appsvc/assets/tcpping1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dwMaTpBk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-Nibble-TcpPing-Linux-Appsvc/assets/tcpping1.png" alt="tcpping1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you have enjoyed this post and have learned something new. ❤️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#author"&gt;
  &lt;/a&gt;
  &lt;em&gt;Author&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Marcel.L - &lt;a href="mailto:pwd9000@hotmail.co.uk"&gt;pwd9000@hotmail.co.uk&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>azure</category>
      <category>productivity</category>
      <category>learning</category>
    </item>
    <item>
      <title>Your Product Shouldn't Be an App</title>
      <author>Zack Sheppard</author>
      <pubDate>Mon, 19 Jul 2021 15:48:57 +0000</pubDate>
      <link>https://dev.to/zackdotcomputer/your-product-shouldn-t-be-an-app-447k</link>
      <guid>https://dev.to/zackdotcomputer/your-product-shouldn-t-be-an-app-447k</guid>
      <description>&lt;p&gt;Recently, I've run into a few big ideas that make me feel like it's 2010 all over again. In the worst way. They remind me that back in the heady days of 2010, we were &lt;em&gt;fools&lt;/em&gt; for apps.&lt;/p&gt;

&lt;p&gt;Need to know what song is playing on the radio right now? App! Are new-hires lost in your office and you want to give them a map? Enterprise app! Need to order a sandwich from the independent deli on the corner? Whitelabel app!&lt;/p&gt;

&lt;p&gt;Ultimately these all fail the core test of making a product: they have identified a real need but fail to fulfill it better than the competition.&lt;/p&gt;

&lt;p&gt;What do I mean by that? Well, let's look at our examples: if I want to know what's on the radio right now, does it make more sense for me to open an app and see it or should I just &lt;strong&gt;turn on the radio?&lt;/strong&gt; If I need to help new-hires orient themselves in my office, should I hire someone to make a map app, get an enterprise distribution certificate for the app store, and debug issues people have installing that app, or should I &lt;strong&gt;draw a map and give them a photocopy?&lt;/strong&gt; If I want to order a sandwich from the deli, do I install their one-off app, make an account, and place an order or do I just &lt;strong&gt;walk down the street?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In all of these cases, the competition isn't another app, it's a better way of solving the problem. Even though the wild crappy-app days of the 20-teens are behind us, this lesson still holds true when we think about designing products today.&lt;/p&gt;

&lt;p&gt;What's wonderful about this is that you can usually find a way to achieve your goals far quicker and cheaper than by building a full app. Here are some alternatives you need to consider before you dive into the world of designing and developing a full-fledged app:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-infoproducts"&gt;
  &lt;/a&gt;
  1. Info-products
&lt;/h2&gt;

&lt;p&gt;If the goal of your app is to communicate something to your users, the first question to ask yourself is whether that could be better accomplished by written words or videos. Simplifying your product to an info-product like this has two big advantages. First, larger media platforms like  &lt;a href="https://substack.com"&gt;Substack&lt;/a&gt;,  &lt;a href="https://www.skillshare.com/teach"&gt;Skillshare&lt;/a&gt;,  &lt;a href="https://teachable.com"&gt;Teachable&lt;/a&gt;,  &lt;a href="https://gumroad.com"&gt;Gumroad&lt;/a&gt;, or even Youtube are almost guaranteed to reach a larger market than a purpose-built app or site. Second, you can often communicate your ideas and make a sellable product in drastically less time than if you were trying to capture those same ideas in the framework of an app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-communities"&gt;
  &lt;/a&gt;
  2. Communities
&lt;/h2&gt;

&lt;p&gt;If your app is trying to bring people together but not necessarily to form a market, you might be better off hosting a private Discord or building a community site on top of a platform like  &lt;a href="https://circle.so"&gt;Circle&lt;/a&gt;,  &lt;a href="https://tribe.so"&gt;Tribe&lt;/a&gt;, or Dev.to's own &lt;a href="https://www.forem.com"&gt;Forem&lt;/a&gt;. Communities especially are an interesting opportunity when added on top of info-products, as they give you the chance to keep your customers engaged with you between releases of new content.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-webapps"&gt;
  &lt;/a&gt;
  3. Webapps
&lt;/h2&gt;

&lt;p&gt;While still &lt;em&gt;kind of&lt;/em&gt; an app, web apps are much easier to build, maintain, and distribute to users than a native app (especially given the wealth of  &lt;a href="https://www.nocode.tech/category/web-app-builders"&gt;Nocode tools&lt;/a&gt; for building them). Let me stress this point, the simplicity and speed of launching a website makes the stress of launching a true native app feel like hiking Everest. Web based apps can also make much more sense depending on the context you expect your users to be in when they need whatever solution you provide. If you think a user is going to be at work on their computer, for example, it makes more sense for your product to be a website rather than an app that will require they switch contexts to use it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-nontech-products"&gt;
  &lt;/a&gt;
  4. Non-tech Products
&lt;/h2&gt;

&lt;p&gt;Finally, does your product need to be a tech product at all? Let's take a hypothetical product of "&lt;a href="https://kern.al/idea/covid-safe-office-bonding?new_idea=true"&gt;COVID-friendly activities for office bonding&lt;/a&gt;" for example. For version one, you could jump straight to building this as a productized digital app experience that can lead customers on group tours or scavenger hunts. But, you will be able to execute more quickly, get more feedback, and generate revenue immediately if you instead take the old-school route and lead your first few experiences personally. Once you have run a couple sessions, you'll have money in the bank and a much better sense for the pacing and content that leads to a good experience, and from there you'll be in a much stronger position to think about app-ifying your product.&lt;/p&gt;

&lt;p&gt;And therein lies the last, most important lesson here. Choosing not to app-ify your product from day one doesn't mean you'll &lt;strong&gt;never&lt;/strong&gt; turn it into an app or other digital product. Rather, this is about developing your product intelligently. If you jump straight to an app without validating your guesses about what will solve your users' problems most effectively, it's likely you'll build the wrong thing and wind up wasting all that effort. The App Store is already littered with the abandoned corpses of apps that failed to learn this lesson, don't be another one of them.&lt;/p&gt;

</description>
      <category>startup</category>
      <category>mobile</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How To Deploy Python Scrapy Spiders for Free on Cloud</title>
      <author>Jerry Ng</author>
      <pubDate>Mon, 19 Jul 2021 15:25:28 +0000</pubDate>
      <link>https://dev.to/jerrynsh/how-to-deploy-python-scrapy-spiders-for-free-on-cloud-3l83</link>
      <guid>https://dev.to/jerrynsh/how-to-deploy-python-scrapy-spiders-for-free-on-cloud-3l83</guid>
      <description>&lt;p&gt;Running &lt;em&gt;&lt;a href="https://github.com/scrapy/scrapy"&gt;Scrapy&lt;/a&gt;&lt;/em&gt; spiders in your local machine can be very convenient during the early stage of development. But, we would eventually need to deploy and run our spiders in the cloud periodically.&lt;/p&gt;

&lt;p&gt;In search of &lt;strong&gt;free&lt;/strong&gt; options for running periodic crawling jobs, I have come across a few options available in the market such as &lt;em&gt;&lt;a href="https://docs.scrapy.org/en/latest/topics/deploy.html#deploy-scrapy-cloud"&gt;Zyte Scrapy Cloud&lt;/a&gt;&lt;/em&gt; where you can easily deploy, run and scale your web crawlers.&lt;/p&gt;

&lt;p&gt;However, if you intend to multiple spiders &lt;a href="https://support.zyte.com/support/solutions/articles/22000200419-scheduling-periodic-jobs"&gt;periodically&lt;/a&gt;, you would have to start paying.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#goal"&gt;
  &lt;/a&gt;
  Goal
&lt;/h2&gt;

&lt;p&gt;By the end of this article, you should be able to deploy your &lt;em&gt;Scrapy&lt;/em&gt; project and schedule a periodic job to crawl data from your target site for &lt;strong&gt;free&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Note that this &lt;strong&gt;might&lt;/strong&gt; &lt;strong&gt;not be an ideal solution for large-scale&lt;/strong&gt; crawler applications where you would need to manage hundreds of spiders.&lt;/p&gt;

&lt;p&gt;In that case, using paid service to scale and manage your spiders (with &lt;a href="https://docs.scrapy.org/en/latest/topics/practices.html#distributed-crawls"&gt;distributed crawling&lt;/a&gt;) should be part of your considerations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite
&lt;/h2&gt;

&lt;p&gt;To follow, I would expect you to have your &lt;em&gt;Scrapy&lt;/em&gt; project ready to be deployed and running &lt;code&gt;scrapy crawl examplespider&lt;/code&gt; command should work.&lt;/p&gt;

&lt;p&gt;Your project root directory should contain either one of these — &lt;code&gt;requirements.txt&lt;/code&gt;, &lt;code&gt;Pipfile&lt;/code&gt; or &lt;code&gt;setup.py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If none of these files is present in your app’s root directory, the Python buildpack will fail to identify your application correctly. (source)&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#enters-heroku"&gt;
  &lt;/a&gt;
  Enters Heroku
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zq3WTjLY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hj1nd4cecgfflgjpe5t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zq3WTjLY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hj1nd4cecgfflgjpe5t.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Heroku is a container-based cloud Platform as a Service (PaaS)&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-heroku-account-registration"&gt;
  &lt;/a&gt;
  1. Heroku account registration
&lt;/h3&gt;

&lt;p&gt;First, you would need to register an account with &lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt;&lt;em&gt;,&lt;/em&gt; it’s free!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-installing-heroku-cli"&gt;
  &lt;/a&gt;
  2. Installing Heroku CLI
&lt;/h3&gt;

&lt;p&gt;After your account registration, let’s use &lt;a href="https://devcenter.heroku.com/articles/heroku-cli"&gt;Heroku CLI&lt;/a&gt; to create and manage our project. You may check out the installation steps for other OS &lt;a href="https://devcenter.heroku.com/articles/heroku-cli#download-and-install"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# For macOS:&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;brew tap heroku/brew &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; brew &lt;span class="nb"&gt;install &lt;/span&gt;heroku
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-login"&gt;
  &lt;/a&gt;
  3. Login
&lt;/h3&gt;

&lt;p&gt;To log in using Heroku’s CLI, simply &lt;code&gt;cd&lt;/code&gt; to your project folder and run &lt;code&gt;heroku login&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;heroku: Press any key to open up the browser to login or q to &lt;span class="nb"&gt;exit&lt;/span&gt;:

Opening browser to https://cli-auth.heroku.com/auth/cli/browser/xxxx-xxxx-xxxx-xxxx-xxxx?requestor&lt;span class="o"&gt;=&lt;/span&gt;xxxx.xxxx.xxxxLogging &lt;span class="k"&gt;in&lt;/span&gt;... &lt;span class="k"&gt;done
&lt;/span&gt;Logged &lt;span class="k"&gt;in &lt;/span&gt;asjerry@example.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-git"&gt;
  &lt;/a&gt;
  4. Git
&lt;/h3&gt;

&lt;p&gt;At this stage, you should already have set up your project with &lt;code&gt;git init&lt;/code&gt; and &lt;code&gt;git commit&lt;/code&gt; etc. &lt;/p&gt;

&lt;p&gt;The next steps are to turn your project into a git repository and push it to Heroku.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# i. To create a Heroku application:&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;heroku apps:create scrapy_example_project

&lt;span class="c"&gt;# ii. Add a remote to your local repository:&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;heroku git:remote &lt;span class="nt"&gt;-a&lt;/span&gt; scrapy_example_project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we’re done here, let’s open up our Heroku &lt;a href="https://dashboard.heroku.com/apps"&gt;dashboard&lt;/a&gt; page for your newly created Heroku application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optional-setup-free-tier-managed-postgresql-service-on-heroku"&gt;
  &lt;/a&gt;
  Optional: Setup free tier managed PostgreSQL service on Heroku
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;You would only need this step if your Scrapy project has a pipeline that stores scraped items in a PostgreSQL database. Take note that the free tier only has a limit of 10,000 rows at the time of writing this.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IWjg_D-X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i00y5tr6jphunobskm2a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IWjg_D-X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i00y5tr6jphunobskm2a.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Select Application → ‘Resources’ tab → Find ‘Heroku Postgres’ → Select your plan &amp;amp; ‘Submit Order Form’&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This step is fairly simple, simply go to the ‘Resources’ tab on your Heroku dashboard and look for ‘&lt;a href="https://www.heroku.com/postgres"&gt;Heroku Postgres&lt;/a&gt;’, select the free tier (or whichever you deem fit).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vDLLcyRs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vq9xh1drkt5rjpfp05wi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vDLLcyRs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vq9xh1drkt5rjpfp05wi.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Select ‘View Credentials’&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To look for your database credentials, simply click on your ‘Heroku Postgres’ add-on → select ‘Settings’ → ‘View Credentials’&lt;/p&gt;

&lt;p&gt;Finally, configure your &lt;em&gt;Scrapy&lt;/em&gt; project’s connection to your database accordingly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# settings.py&lt;/span&gt;
&lt;span class="c"&gt;# This is just an example, you might be using a different variable name&lt;/span&gt;

DATABASE_CONNECTION_STRING &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'{drivername}://{user}:{password}@{host}:{port}/{db_name}'&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nv"&gt;drivername&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'postgresql'&lt;/span&gt;,
    &lt;span class="nv"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;os.environ.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'PG_USERNAME'&lt;/span&gt;, &lt;span class="s1"&gt;'postgres'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    &lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;os.environ.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'PG_PASSWORD'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    &lt;span class="nv"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;os.environ.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'PG_HOST'&lt;/span&gt;, &lt;span class="s1"&gt;'localhost'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    &lt;span class="nv"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;os.environ.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'PG_PORT'&lt;/span&gt;, &lt;span class="s1"&gt;'5432'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    &lt;span class="nv"&gt;db_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;os.environ.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'PG_DATABASE'&lt;/span&gt;, &lt;span class="s1"&gt;'burplist'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Or alternatively:&lt;/span&gt;
DATABASE_CONNECTION_STRING &lt;span class="o"&gt;=&lt;/span&gt; ‘postgres://xxxx:xxxx@ec2-xx-xxx-xxx-xx.compute-1.amazonaws.com:5432/xxxxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-end-results"&gt;
  &lt;/a&gt;
  5. End Results
&lt;/h3&gt;

&lt;p&gt;By the end of this, if you were to visit your Heroku dashboard activity feed, you should see your application there where the latest activity says that your app has been deployed.&lt;/p&gt;

&lt;p&gt;If you try to run &lt;code&gt;heroku run scrapy crawl examplespider&lt;/code&gt; on your local terminal, you should see that it will attempt to run the crawler on your Heroku server.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#heroku-scheduler"&gt;
  &lt;/a&gt;
  Heroku Scheduler
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;This section of the article shows you how you can run your crawlers/spiders periodically.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Though Heroku offers several different schedulers that could run your application periodically, I personally prefer ‘&lt;a href="https://devcenter.heroku.com/articles/scheduler"&gt;Heroku Scheduler&lt;/a&gt;’ as it has a free tier and it is super simple to use.&lt;/p&gt;

&lt;p&gt;To use the free tier of this add-on, Heroku requires you to &lt;strong&gt;add a payment method&lt;/strong&gt; to your account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IT53gvrp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7trz36dle94pt6flbc4k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IT53gvrp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7trz36dle94pt6flbc4k.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Select Application → ‘Resources’ tab → Find ‘Heroku Scheduler → Select your plan &amp;amp; ‘Submit Order Form’&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-configuration"&gt;
  &lt;/a&gt;
  1. Configuration
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1oOW6n2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v21opkafo091jz8s6y2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1oOW6n2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v21opkafo091jz8s6y2.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;This is how the ‘Add Job’ screen would look like&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Inside your newly added ‘Heroku Scheduler’ add-on, simply select ‘Add Job’ on the top right corner and you should see the screen as shown in the picture beside.&lt;/p&gt;

&lt;p&gt;To run the &lt;code&gt;scrapy crawl examplespider&lt;/code&gt; command periodically, simply select a time interval and save job.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-how-do-i-run-all-my-spiders-in-one-single-command"&gt;
  &lt;/a&gt;
  2. How do I run all my spiders in one single command?
&lt;/h3&gt;

&lt;p&gt;Locally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;scrapy list | xargs &lt;span class="nt"&gt;-n&lt;/span&gt; 1 scrapy crawl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On &lt;em&gt;Heroku&lt;/em&gt; from your local terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku run scrapy list | xargs &lt;span class="nt"&gt;-n&lt;/span&gt; 1 heroku run scrapy crawl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-how-do-i-schedule-a-weekly-monthly-job"&gt;
  &lt;/a&gt;
  3. How do I schedule a weekly, monthly job?
&lt;/h3&gt;

&lt;p&gt;Simply configure our ‘Heroku Scheduler’ to run a bash script &lt;strong&gt;every day&lt;/strong&gt; at a time where the bash script checks if today is the day of the week before running your actual &lt;code&gt;scrapy crawl examplespider&lt;/code&gt; commands.&lt;/p&gt;

&lt;p&gt;Example bash script. E.g.: run &lt;code&gt;bash task.sh weekly 3&lt;/code&gt; to run on every Wednesday&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c"&gt;# Currently Heroku Scheduler only supports scheduling at every 10min/hour/day interval&lt;/span&gt;
&lt;span class="c"&gt;# Reference: https://dashboard.heroku.com/apps/burplist/scheduler&lt;/span&gt;

&lt;span class="c"&gt;# To run every Monday&lt;/span&gt;
&lt;span class="c"&gt;# ./task.sh weekly 1&lt;/span&gt;

&lt;span class="c"&gt;# To run now&lt;/span&gt;
&lt;span class="c"&gt;# ./task.sh&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"weekly"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Frequency: &amp;lt;Weekly&amp;gt; | Day of the week: &amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt; +%u&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
        &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Starting 🕷 to get data from the 🕸..."&lt;/span&gt;
        scrapy list | xargs &lt;span class="nt"&gt;-n&lt;/span&gt; 1 scrapy crawl
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Finished running all 🕷."&lt;/span&gt;
    &lt;span class="k"&gt;fi
else
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Frequency: &amp;lt;Now&amp;gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Starting 🕷 to get data from the 🕸..."&lt;/span&gt;
    scrapy list | xargs &lt;span class="nt"&gt;-n&lt;/span&gt; 1 scrapy crawl
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Finished running all 🕷."&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3OhJP7Tm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fl7wrx3dxnh6m8rtau5a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3OhJP7Tm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fl7wrx3dxnh6m8rtau5a.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Done!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;To wrap things up, I have found a lot of success in deploying and running my spiders periodically with this method. The only downside here is the free tier version of ‘Heroku Postgres’ which only supports up to 10,000 database rows.&lt;/p&gt;

&lt;p&gt;In this case, we can easily opt-in for the paid version of it and scale our database accordingly based on our demand. On a side note, we could also easily swap out our &lt;em&gt;Scrapy&lt;/em&gt; project’s database instance to use another cloud RDS solution such as &lt;a href="https://aws.amazon.com/rds/"&gt;Amazon RDS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On top of these, you can also easily opt-in for other available Heroku &lt;a href="https://devcenter.heroku.com/categories/add-ons"&gt;add-ons&lt;/a&gt; for logging and monitoring purposes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#another-free-alternative-method"&gt;
  &lt;/a&gt;
  Another Free Alternative Method
&lt;/h2&gt;

&lt;p&gt;While I am aware that we could use &lt;em&gt;&lt;a href="https://github.com/scrapy/scrapyd"&gt;Scrapyd&lt;/a&gt;&lt;/em&gt; to host your spiders and actually send requests, alongside with &lt;em&gt;&lt;a href="https://github.com/my8100/scrapydweb/"&gt;ScrapydWeb&lt;/a&gt;&lt;/em&gt;, I personally prefer to keep my scraper deployment simple, quick, and free.&lt;/p&gt;

&lt;p&gt;Thank you for reading and take care!&lt;/p&gt;

</description>
      <category>python</category>
      <category>heroku</category>
      <category>cloud</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Smart Pointers in Rust: What, why and how?</title>
      <author>Roger Torres (he/him/ele)</author>
      <pubDate>Mon, 19 Jul 2021 15:25:22 +0000</pubDate>
      <link>https://dev.to/rogertorres/smart-pointers-in-rust-what-why-and-how-oma</link>
      <guid>https://dev.to/rogertorres/smart-pointers-in-rust-what-why-and-how-oma</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; I will cover some of Rust's smart pointers: &lt;code&gt;Box&lt;/code&gt;, &lt;code&gt;Cell&lt;/code&gt;, &lt;code&gt;RefCell&lt;/code&gt;, &lt;code&gt;Rc&lt;/code&gt;, &lt;code&gt;Arc&lt;/code&gt;, &lt;code&gt;RwLock&lt;/code&gt; and &lt;code&gt;Mutex&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It seems pretty obvious that smart pointers are pointers that are... &lt;em&gt;smart&lt;/em&gt;. But &lt;strong&gt;what&lt;/strong&gt; exactly does this "smart" means? &lt;strong&gt;When&lt;/strong&gt; should we use them? &lt;strong&gt;How&lt;/strong&gt; do they work? &lt;/p&gt;

&lt;p&gt;These are the questions I will begin to answer here. And that is it: &lt;em&gt;the beginning of an answer&lt;/em&gt;, nothing more. I expect that this article will give you a "background of understanding" (something like "familiarity" with the concept) that will help you accommodate a real understanding of the topic, which will come from reading the official documentation and, of course, practice.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If you are already familiar with it, you may use this text as a list of relevant reading. Look for the "useful links" at the beginning of each section.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Index:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#box"&gt;Box&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cell"&gt;Cell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#refcell"&gt;RefCell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rc"&gt;Rc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#arc"&gt;Arc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rwlock"&gt;RwLock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mutex"&gt;Mutex&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#smart-points-in-general"&gt;
  &lt;/a&gt;
  Smart points in general
&lt;/h2&gt;

&lt;p&gt;As explained in &lt;a href="https://doc.rust-lang.org/book/ch15-00-smart-pointers.html"&gt;&lt;em&gt;The Book&lt;/em&gt;&lt;/a&gt;, pointers are variables containing an address that "points at" some other data. The usual pointer in Rust is the reference (&lt;code&gt;&amp;amp;&lt;/code&gt;). Smart pointers are pointers that "have additional metadata and capabilities", e.g., they may count how many times the value was borrowed, provide methods to manage read and write locks, etc.&lt;/p&gt;

&lt;p&gt;Technically speaking, &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;Vec&lt;/code&gt; are also smart pointers, but I will not cover them here as they are quite common and are usually thought of as types rather than pointers.&lt;/p&gt;

&lt;p&gt;~I will spare myself of mentioning how to create a pointer, as all of them have the same method: &lt;code&gt;new()&lt;/code&gt;.~&lt;/p&gt;

&lt;p&gt;Also note that, from this list, only &lt;code&gt;Arc&lt;/code&gt;, &lt;code&gt;RwLock&lt;/code&gt;, and &lt;code&gt;Mutex&lt;/code&gt; are thread-safe.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#boxlttgt"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Box&amp;lt;T&amp;gt;
&lt;/h2&gt;

&lt;p&gt;Useful links: &lt;a href="https://doc.rust-lang.org/book/ch15-01-box.html"&gt;The Book&lt;/a&gt;; &lt;a href="https://doc.rust-lang.org/std/boxed/struct.Box.html"&gt;Documentation&lt;/a&gt;; &lt;a href="https://doc.rust-lang.org/rust-by-example/std/box.html"&gt;Box, stack and heap&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; allows you to store &lt;code&gt;T&lt;/code&gt; on the heap. So, if you have, say, a &lt;code&gt;u64&lt;/code&gt; that would be stored on the stack, &lt;code&gt;Box&amp;lt;u64&amp;gt;&lt;/code&gt; will store it on the heap.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are not comfortable with the concepts of stack and heap, read &lt;a href="https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html?highlight=stack#the-stack-and-the-heap"&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h3&gt;

&lt;p&gt;Values stored on the stack cannot grow, as Rust needs to know its size at compile time. The best example of how this may affect your programming that I know is in &lt;a href="https://doc.rust-lang.org/book/ch15-01-box.html?highlight=recursion#enabling-recursive-types-with-boxes"&gt;&lt;em&gt;The Book&lt;/em&gt;&lt;/a&gt;: &lt;strong&gt;recursion&lt;/strong&gt;. Consider the code below (and its comments).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// This does not compile. The List contains itself,  &lt;/span&gt;
&lt;span class="c"&gt;// being recursive and therefore having an infinite size.&lt;/span&gt;
&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
   &lt;span class="nf"&gt;Cons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
   &lt;span class="nb"&gt;Nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;// This does compile because the size of a pointer&lt;/span&gt;
&lt;span class="c"&gt;// does not change according to the size of the pointed value.&lt;/span&gt;
&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
   &lt;span class="nf"&gt;Cons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
   &lt;span class="nb"&gt;Nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Be sure to read &lt;a href="https://doc.rust-lang.org/book/ch15-01-box.html?highlight=recursion#enabling-recursive-types-with-boxes"&gt;this section on &lt;em&gt;The Book's&lt;/em&gt;&lt;/a&gt; to understand the details.&lt;/p&gt;

&lt;p&gt;On a more general note, &lt;code&gt;Box&lt;/code&gt; is useful when your value is too big to be kept on the stack or when you need to &lt;a href="https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html"&gt;own&lt;/a&gt; it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How?
&lt;/h3&gt;

&lt;p&gt;To get the value &lt;code&gt;T&lt;/code&gt; inside &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; you just have to deref it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;boxed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;boxed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#celllttgt"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Cell&amp;lt;T&amp;gt;
&lt;/h2&gt;

&lt;p&gt;Useful links: &lt;a href="https://doc.rust-lang.org/std/cell/"&gt;Module documentation&lt;/a&gt;; &lt;a href="https://doc.rust-lang.org/std/boxed/struct.Box.html"&gt;Pointer documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; gives a shared reference to &lt;code&gt;T&lt;/code&gt; while allowing you to change &lt;code&gt;T&lt;/code&gt;.  This is one of the  "shareable mutable containers" provided by the module &lt;a href="https://doc.rust-lang.org/std/cell/"&gt;&lt;code&gt;std::cell&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h3&gt;

&lt;p&gt;In Rust, shared references are immutable. This guarantees that when you access the inner value you are not getting something different than expected, as well as assure that you are not trying to access the value after it was freed (which is a big chunk of those &lt;a href="https://www.zdnet.com/article/chrome-70-of-all-security-bugs-are-memory-safety-issues/"&gt;70% of security bugs that are memory safety issues&lt;/a&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How?
&lt;/h3&gt;

&lt;p&gt;What &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; does is provide functions that control our access to &lt;code&gt;T&lt;/code&gt;. You can find them all &lt;a href="https://doc.rust-lang.org/std/cell/struct.Cell.html"&gt;here&lt;/a&gt;, but for our explanation we just need two: &lt;code&gt;get()&lt;/code&gt; and &lt;code&gt;set()&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Basically, &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; allows you to freely change &lt;code&gt;T&lt;/code&gt; with &lt;code&gt;T.set()&lt;/code&gt; because when you use &lt;code&gt;T.get()&lt;/code&gt;, you retrieve &lt;a href="https://doc.rust-lang.org/std/marker/trait.Copy.html"&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt; of &lt;code&gt;T&lt;/code&gt;, not a reference. That way, even if you change &lt;code&gt;T&lt;/code&gt;, the copied value you got with &lt;code&gt;get()&lt;/code&gt; will remain the same, and if you destroy &lt;code&gt;T&lt;/code&gt;, no pointer will dangle.&lt;/p&gt;

&lt;p&gt;One last note is that &lt;code&gt;T&lt;/code&gt; has to implement &lt;code&gt;Copy&lt;/code&gt; as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Cell&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Cell&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;eleven&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="nf"&gt;.get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="nf"&gt;.set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;twelve&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="nf"&gt;.get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eleven&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;twelve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#refcelllttgt"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;RefCell&amp;lt;T&amp;gt;
&lt;/h2&gt;

&lt;p&gt;Useful links: &lt;a href="https://doc.rust-lang.org/book/ch15-05-interior-mutability.html"&gt;The Book&lt;/a&gt;; &lt;a href="https://doc.rust-lang.org/std/cell/struct.RefCell.html"&gt;Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; also gives shared reference to &lt;code&gt;T&lt;/code&gt;, but while &lt;code&gt;Cell&lt;/code&gt; is statically checked (Rust checks it at compile time), &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; is dynamically checked (Rust checks it at run time).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h3&gt;

&lt;p&gt;Because &lt;code&gt;Cell&lt;/code&gt; operates with copies, you should restrict yourself to using small values with it, which means that you need references once again, which leads us back to the problem that &lt;code&gt;Cell&lt;/code&gt; solved. &lt;/p&gt;

&lt;p&gt;The way &lt;code&gt;RefCell&lt;/code&gt; deals with it is by keeping track of who is reading and who writing  &lt;code&gt;T&lt;/code&gt;. That's why &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; is dynamically checked: because &lt;strong&gt;you&lt;/strong&gt; are going to code this check. But fear not, Rust will still make sure you don't mess up at compile time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; has methods that borrow either a mutable or immutable reference to  &lt;code&gt;T&lt;/code&gt;; methods that will not allow you to do so if this action would be unsafe. As with &lt;code&gt;Cell&lt;/code&gt;, there are several methods in &lt;code&gt;RefCell&lt;/code&gt;, but these two are enough to illustrate the concept: &lt;code&gt;borrow()&lt;/code&gt;, which gets an immutable reference; and &lt;code&gt;borrow_mut()&lt;/code&gt;, which gets a mutable reference. The logic used by &lt;code&gt;RefCell&lt;/code&gt; goes something like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If there is &lt;strong&gt;no reference&lt;/strong&gt; (either mutable or immutable) to &lt;code&gt;T&lt;/code&gt;, you may get either a mutable or immutable reference to it;&lt;/li&gt;
&lt;li&gt;If there is already a &lt;strong&gt;mutable reference&lt;/strong&gt; to &lt;code&gt;T&lt;/code&gt;, you may get nothing and got to wait until this reference is dropped;&lt;/li&gt;
&lt;li&gt;If there are one or more &lt;strong&gt;immutable references&lt;/strong&gt; to &lt;code&gt;T&lt;/code&gt;, you may get an immutable reference to it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, there is no way to get both mutable and immutable references to &lt;code&gt;T&lt;/code&gt; at the same time.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Remember:&lt;/strong&gt; this is &lt;strong&gt;not&lt;/strong&gt; thread-safe. When I say "no way", I am talking about a single thread.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another way to think about is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Mutable&lt;/strong&gt; references are &lt;strong&gt;shared&lt;/strong&gt; references;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Immutable&lt;/strong&gt; references are &lt;strong&gt;exclusive&lt;/strong&gt; references.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is worth to say that the functions mentioned above have variants that do not panic, but returns &lt;code&gt;Result&lt;/code&gt; instead: &lt;code&gt;try_borrow()&lt;/code&gt; and &lt;code&gt;try_borrow_mut()&lt;/code&gt;;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;RefCell&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;RefCell&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="nf"&gt;.borrow&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c"&gt;// You may borrow as immutable as many times as you want,...&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="nf"&gt;.try_borrow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.is_ok&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="c"&gt;// ...but cannot borrow as mutable because &lt;/span&gt;
    &lt;span class="c"&gt;// it is already borrowed as immutable.&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="nf"&gt;.try_borrow_mut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.is_err&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="c"&gt;// After the first borrow as mutable...&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="nf"&gt;.borrow_mut&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c"&gt;// ...you cannot borrow in any way.&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="nf"&gt;.try_borrow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.is_err&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="nf"&gt;.try_borrow_mut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.is_err&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#rclttgt"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Rc&amp;lt;T&amp;gt;
&lt;/h2&gt;

&lt;p&gt;Useful links: &lt;a href="https://doc.rust-lang.org/book/ch15-04-rc.html"&gt;The Book&lt;/a&gt;; &lt;a href="https://doc.rust-lang.org/std/rc/index.html"&gt;Module documentation&lt;/a&gt;; &lt;a href="https://doc.rust-lang.org/std/rc/struct.Rc.html"&gt;Pointer documentation&lt;/a&gt;; &lt;a href="https://doc.rust-lang.org/rust-by-example/std/rc.html"&gt;Rust by example&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What?
&lt;/h3&gt;

&lt;p&gt;I will quote the documentation on this one:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The type &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; provides shared ownership of a value of type &lt;code&gt;T&lt;/code&gt;, allocated on the heap. Invoking &lt;a href="https://doc.rust-lang.org/std/clone/trait.Clone.html#tymethod.clone"&gt;&lt;code&gt;clone&lt;/code&gt;&lt;/a&gt; on &lt;code&gt;Rc&lt;/code&gt; produces a new pointer to the same allocation on the heap. When the last &lt;code&gt;Rc&lt;/code&gt; pointer to a given allocation is destroyed, the value stored in that allocation (often referred to as “inner value”) is also dropped.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, like a &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; allocates &lt;code&gt;T&lt;/code&gt; on the heap. The difference is that cloning &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; will give you another &lt;code&gt;T&lt;/code&gt; inside another &lt;code&gt;Box&lt;/code&gt; while cloning &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; gives you another &lt;code&gt;Rc&lt;/code&gt; to the &lt;strong&gt;same&lt;/strong&gt; &lt;code&gt;T&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another important remark is that we don't have interior mutability in &lt;code&gt;Rc&lt;/code&gt; as we had in &lt;code&gt;Cell&lt;/code&gt; or &lt;code&gt;RefCell&lt;/code&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h3&gt;

&lt;p&gt;You want to have shared access to some value (without making copies of it), but you want to let it go once it is no longer used, i.e., when there is no reference to it.&lt;/p&gt;

&lt;p&gt;As there is no interior mutability in &lt;code&gt;Rc&lt;/code&gt;, it is common to use it alongside &lt;code&gt;Cell&lt;/code&gt; or &lt;code&gt;RefCell&lt;/code&gt;, for example, &lt;code&gt;Rc&amp;lt;Cell&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How?
&lt;/h3&gt;

&lt;p&gt;With &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt;, you are using the &lt;code&gt;clone()&lt;/code&gt; method. Behind the scene, it will count the number of references you have and, when it goes to zero, it drops &lt;code&gt;T&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;rc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;Rc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Rc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="c"&gt;// After borrwing as immutable...&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c"&gt;// ...you can no longer borrow as mutable,...&lt;/span&gt;
    &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Rc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get_mut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c"&gt;// ...but can still borrow as immutable.&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c"&gt;// Here we have 3 pointer ("c", "_first" and "_second").&lt;/span&gt;
    &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Rc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;strong_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// After we drop the last two, we remain only with "c" itself.&lt;/span&gt;
&lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Rc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;strong_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c"&gt;// And now we can borrow it as mutable.&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Rc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get_mut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#arclttgt"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Arc&amp;lt;T&amp;gt;
&lt;/h2&gt;

&lt;p&gt;Useful links: &lt;a href="https://doc.rust-lang.org/std/sync/struct.Arc.html"&gt;Documentation&lt;/a&gt;; &lt;a href="https://doc.rust-lang.org/rust-by-example/std/arc.html"&gt;Rust by example&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Arc&lt;/code&gt; is the thread-safe version of &lt;code&gt;Rc&lt;/code&gt;, as its counter is managed through atomic operations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h3&gt;

&lt;p&gt;I think the reason why you would use &lt;code&gt;Arc&lt;/code&gt; instead of &lt;code&gt;Rc&lt;/code&gt; is clear (thread-safety), so the pertinent question becomes: why not just use &lt;code&gt;Arc&lt;/code&gt; &lt;em&gt;every&lt;/em&gt; time? The answer is that these extra controls provided by &lt;code&gt;Arc&lt;/code&gt; come with an overhead cost. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How?
&lt;/h3&gt;

&lt;p&gt;Just like &lt;code&gt;Rc&lt;/code&gt;,  with &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt; you will be using &lt;code&gt;clone()&lt;/code&gt; to get a pointer to the same value &lt;code&gt;T&lt;/code&gt;, which will be destroyed once the last pointer is dropped.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c"&gt;// You could not do this with "Rc"&lt;/span&gt;
    &lt;span class="nn"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;"Value: {:?} / Active pointers: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;strong_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#rwlocklttgt"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;RwLock&amp;lt;T&amp;gt;
&lt;/h2&gt;

&lt;p&gt;Useful link: &lt;a href="https://doc.rust-lang.org/std/sync/struct.RwLock.html"&gt;Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;RwLock&lt;/code&gt; is also provided by the &lt;a href="https://docs.rs/parking_lot/0.10.2/parking_lot/type.RwLock.html"&gt;&lt;code&gt;parking_lot&lt;/code&gt;&lt;/a&gt; crate.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What?
&lt;/h3&gt;

&lt;p&gt;As a reader-writer lock, &lt;code&gt;RwLock&amp;lt;T&amp;gt;&lt;/code&gt; will only give access to &lt;code&gt;T&lt;/code&gt; once you are holding one of the locks: &lt;code&gt;read&lt;/code&gt; or &lt;code&gt;write&lt;/code&gt;, which are given following these rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;To read&lt;/strong&gt;: If you want a lock to read, you may get it as long as &lt;em&gt;no writer&lt;/em&gt; is holding the lock; otherwise, you have to wait until it gets dropped;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;To write&lt;/strong&gt;: If you want a lock to write, you may get as long as &lt;em&gt;no one&lt;/em&gt;, reader or writer, is holding the lock; otherwise, you have to wait until it gets dropped;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;RwLock&lt;/code&gt; allows you to read and write the same data from multiple threads. Different from &lt;code&gt;Mutex&lt;/code&gt; (see below), it distinguishes the kind of lock, so you may have several &lt;code&gt;read&lt;/code&gt; locks as far as you do not have any &lt;code&gt;write&lt;/code&gt; lock.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How?
&lt;/h3&gt;

&lt;p&gt;When you want to read a &lt;code&gt;RwLock&lt;/code&gt;, you got to use the function &lt;code&gt;read()&lt;/code&gt;—or &lt;code&gt;try_read()&lt;/code&gt;—that will return a &lt;code&gt;LockResult&lt;/code&gt; that contains a &lt;code&gt;RwLockReadGuard&lt;/code&gt;. If it is successful, you will be able to access the value inside &lt;code&gt;RwLockReadGuard&lt;/code&gt; by using deref. If a writer is holding the lock, the thread will be blocked until it can take hold of the lock. &lt;/p&gt;

&lt;p&gt;Something similar happens when you try to use &lt;code&gt;write()&lt;/code&gt;—or &lt;code&gt;try_write()&lt;/code&gt;. The difference is that it will not only wait for a writer holding the lock, but for any reader holding the lock as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;RwLock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;RwLock&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;r1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="nf"&gt;.read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c"&gt;// You may pile as many read locks as you want.&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="nf"&gt;.try_read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.is_ok&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="c"&gt;// But you cannot write.&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="nf"&gt;.try_write&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.is_err&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="c"&gt;// Note that if you use "write()" instead of "try_write()"&lt;/span&gt;
    &lt;span class="c"&gt;// it will wait until all the other locks are release&lt;/span&gt;
    &lt;span class="c"&gt;// (in this case, never).&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="c"&gt;// If you grab the write lock, you may easily change it&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="nf"&gt;.write&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If some thread holding the lock panics, further attempts to get the loc will return a &lt;a href="https://doc.rust-lang.org/std/sync/struct.PoisonError.html"&gt;&lt;code&gt;PoisonError&lt;/code&gt;&lt;/a&gt;, which means that from then on every attempt to read &lt;code&gt;RwLock&lt;/code&gt; will return the same &lt;code&gt;PoisonError&lt;/code&gt;. You may recover from a poisoned &lt;code&gt;RwLock&lt;/code&gt; using &lt;code&gt;into_inner()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RwLock&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;RwLock&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;c_lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c_lock&lt;/span&gt;&lt;span class="nf"&gt;.write&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nd"&gt;panic!&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c"&gt;// the lock gets poisoned&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="nf"&gt;.join&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="nf"&gt;.read&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nf"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;poisoned&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;poisoned&lt;/span&gt;&lt;span class="nf"&gt;.into_inner&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c"&gt;// It will be 12 because it was recovered from the poisoned lock&lt;/span&gt;
&lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#mutexlttgt"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Mutex&amp;lt;T&amp;gt;
&lt;/h2&gt;

&lt;p&gt;Useful links: &lt;a href="https://doc.rust-lang.org/book/ch16-03-shared-state.html"&gt;The Book&lt;/a&gt;; &lt;a href="https://doc.rust-lang.org/std/sync/struct.Mutex.html"&gt;Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Mutex&lt;/code&gt; is also provided by the &lt;a href="https://docs.rs/parking_lot/0.10.0/parking_lot/type.Mutex.html"&gt;&lt;code&gt;parking_lot&lt;/code&gt;&lt;/a&gt; crate.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Mutex&lt;/code&gt; is similar to &lt;code&gt;RwLock&lt;/code&gt;, but it only allows one lock-holder, does not matter if it is a reader or a writer. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h3&gt;

&lt;p&gt;One reason to prefer &lt;code&gt;Mutex&lt;/code&gt; over &lt;code&gt;RwLock&lt;/code&gt; is that &lt;code&gt;RwLock&lt;/code&gt;  may lead to writer starvation (when the readers pile on and the writer never gets a chance to take the lock, waiting forever), something the does not happen with &lt;code&gt;Mutex&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;Of course, we are diving into deeper seas here, so the real-life choice falls on more advanced considerations, such as how many readers you expect at the same time, how the operating system implements the locks, and so on...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Mutex&lt;/code&gt; and &lt;code&gt;RwLock&lt;/code&gt; work in a similar fashion, the difference is that because &lt;code&gt;Mutex&lt;/code&gt; does not differentiate between readers and writers, you just use &lt;code&gt;lock()&lt;/code&gt; or &lt;code&gt;try_lock&lt;/code&gt; to get the &lt;code&gt;MutexGuard&lt;/code&gt;. The poisoning logic also happens here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Mutex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;guard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Mutex&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;guard&lt;/span&gt;&lt;span class="nf"&gt;.lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c"&gt;// It does not matter if you are locking the Mutex to read or write,&lt;/span&gt;
&lt;span class="c"&gt;// you can only lock it once.&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guard&lt;/span&gt;&lt;span class="nf"&gt;.try_lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.is_err&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="c"&gt;// You may change it just like you did with RwLock&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can deal with poisoned &lt;code&gt;Mutex&lt;/code&gt; in the same way as you deal with poisoned &lt;code&gt;RwLock&lt;/code&gt;.&lt;/p&gt;




&lt;p&gt;Thank you for reading! :)&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>rust</category>
      <category>programming</category>
      <category>learning</category>
    </item>
    <item>
      <title>The techniques to help simplify CSS</title>
      <author>Stas Melnikov</author>
      <pubDate>Mon, 19 Jul 2021 15:00:10 +0000</pubDate>
      <link>https://dev.to/melnik909/the-techniques-to-help-simplify-css-39gj</link>
      <guid>https://dev.to/melnik909/the-techniques-to-help-simplify-css-39gj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#mobile-first-without-overrides"&gt;
  &lt;/a&gt;
  Mobile First without overrides
&lt;/h2&gt;

&lt;p&gt;There is the mobile first approach dictates we should create interfaces from small (such as cell phones, watch, etc) to large devices (desktop, tv, etc). &lt;/p&gt;

&lt;p&gt;So developers use the min-width media feature. As a result, they'll get a lot of overrides. For example, I add paddings with overriding. &lt;/p&gt;

&lt;p&gt;I think it will become not readable when you have a lot of code. So I propose to save the idea of the mobile first approach but think about ranges of devices and add styles only when they're needed using the min-width and max-width features. &lt;/p&gt;

&lt;p&gt;For example, I use different paddings but the ranges help to avoid overrides.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;481px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt; &lt;span class="m"&gt;2.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;961px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt; &lt;span class="m"&gt;3.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;you can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;480px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;481px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;960px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt; &lt;span class="m"&gt;2.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;961px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt; &lt;span class="m"&gt;3.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-shorthands-as-needed"&gt;
  &lt;/a&gt;
  Using shorthands as needed
&lt;/h2&gt;

&lt;p&gt;Usually, developers like to use the CSS shorthand syntax. Yes, it will work. But you don't think shorthand always defines values for a few properties. For example, the background sets the value for 10 properties! &lt;/p&gt;

&lt;p&gt;Thus that will lead to overrides of properties and difficult maintaining in the future. So just don't use the shorthand syntax, if you aren't sure that is really needed. For example, just use the background-color property to change the element's background color.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;tomato&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;you can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;tomato&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#margin-and-padding-without-0-values"&gt;
  &lt;/a&gt;
  margin and padding without 0 values
&lt;/h2&gt;

&lt;p&gt;A lot of time there is the practice of using the margin and padding shorthand that leads to complication of code maintaining in the future. The problem is people set 0 value when it doesn't need. For example, if they have to set top and bottom margins to 1rem they'll write padding: 1rem 0;&lt;/p&gt;

&lt;p&gt;In this case, the 0 value will lead to you have to override it in the future. And do that every time. So you will go to overrides hell. &lt;/p&gt;

&lt;p&gt;As a solution, I recommend using margin and padding shorthand only when you have to set values for all sides. And if you have to set value for specific sides use single margin-* and padding-* properties.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;you can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;&lt;br&gt;
If you like this post, please, &lt;a href="//twitter.com/intent/tweet?text=Stas%20Melnikov%20(%40melnik909)%20shared%20The%20techniques%20to%20help%20simplify%20CSS%20on%20%40ThePracticalDev%20Let%27s%20go%20to%20read%20it%20dev.to/melnik909/the-techniques-to-help-simplify-css-39gj"&gt;share it on Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm always open to any opportunities to share knowledge about CSS and HTML with you. So I can:&lt;br&gt;
🖐 answer any of your questions about CSS and HTML (&lt;em&gt;free&lt;/em&gt;)&lt;br&gt;
💻 make written code review of your projects (&lt;em&gt;paid&lt;/em&gt;)&lt;br&gt;
👨‍🎓 tell about what you should learn (&lt;em&gt;paid&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Just chat me on &lt;a href="mailto:melnik909@ya.ru"&gt;melnik909@ya.ru&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also you can say thank you:&lt;br&gt;
👘 Buy a shirt, stickers, or other goods for frontenders: &lt;a href="https://www.redbubble.com/shop/ap/79109127"&gt;https://www.redbubble.com/shop/ap/79109127&lt;/a&gt;&lt;br&gt;
🥇 Support my work: &lt;a href="https://www.patreon.com/melnik909"&gt;https://www.patreon.com/melnik909&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow me:&lt;br&gt;
🦜 Twitter: &lt;a href="https://twitter.com/melnik909"&gt;https://twitter.com/melnik909&lt;/a&gt;&lt;br&gt;
🦉 Facebook: &lt;a href="https://www.facebook.com/melnik909/"&gt;https://www.facebook.com/melnik909/&lt;/a&gt;&lt;br&gt;
🐞 Instagram: &lt;a href="https://www.instagram.com/s.melnik909/"&gt;https://www.instagram.com/s.melnik909/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.S.&lt;/strong&gt; This post was written with the support of my sponsors: Ashlea Gable, Ben Rinehart, Sergio Kagiema, Jesse Willard, Tanya Ten.&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
