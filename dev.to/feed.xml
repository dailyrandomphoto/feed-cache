<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Essential Keyboard Shortcuts For Developers</title>
      <author>Amy Oulton</author>
      <pubDate>Thu, 18 Nov 2021 00:23:59 +0000</pubDate>
      <link>https://dev.to/amyoulton/essential-keyboard-shortcuts-for-developers-plc</link>
      <guid>https://dev.to/amyoulton/essential-keyboard-shortcuts-for-developers-plc</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post was originally written by me for &lt;a href="//codecast.io"&gt;CodeCast&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We previously made a &lt;a href="https://info.codecast.io/blog/our-favourite-keyboard-shortcuts-for-everyone"&gt;post&lt;/a&gt; about all of our favourite keyboard shortcuts that can help everyone make their daily workflow easier. Now we want to give the developers our favourite shortcuts to make working with your code a breeze. &lt;/p&gt;

&lt;p&gt;We're big fans of &lt;a href="https://info.codecast.io/blog/our-top-10-visual-studio-code-extensions"&gt;Visual Studio Code&lt;/a&gt; at CodeCast, so I can only say for sure that some of these work on there, but working on virtual code editors, I have had most of them work for me with no issue. So, without further ado, let's get started listing some of our favourite keyboard shortcuts for developers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Start/End of Line&lt;/strong&gt;: This is one I am positive is universal and isn’t tied to any program. I use this everywhere, but it's especially helpful when coding. If you want to quickly move your cursor from where it’s currently positioned to the start or end of the current line, hit &lt;strong&gt;Command + →/←&lt;/strong&gt; (Mac) or &lt;strong&gt;Home/End&lt;/strong&gt; (Windows). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n7yFr7uL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sj49g7akoiojmri1glsi.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n7yFr7uL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sj49g7akoiojmri1glsi.gif" alt="Start of Line Gif" width="880" height="294"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Find Next Match&lt;/strong&gt;: To find the next instance of a word in your code, you can easily highlight the world and hit &lt;strong&gt;Command + D&lt;/strong&gt; (Mac) or &lt;strong&gt;Ctrl + D&lt;/strong&gt; (Windows). You can continue hitting this until you have every instance you want selected highlighted. From here, you can simply type to change it at every place in your code. This is very helpful when trying to change variable names, for example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1JZUjnp2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jaq22enlu1wqyesyo130.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1JZUjnp2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jaq22enlu1wqyesyo130.gif" alt="Find Next Match Gif" width="880" height="294"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note how I skipped the 3rd instance of puppy!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;An additional note to this: if you wish to skip over one of the instances when that specific instance is selected, hit &lt;strong&gt;Command + K (Mac)&lt;/strong&gt; or &lt;strong&gt;Ctrl + K&lt;/strong&gt; (Windows). Then continue hitting &lt;strong&gt;Command + D&lt;/strong&gt; (or Ctrl, respectively) and you will go on to select the next instance while skipping over the previous one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Select All Matches&lt;/strong&gt;: If you want to select all the instances of something in a file, hit &lt;strong&gt;Command + Shift + L&lt;/strong&gt; (Mac) or &lt;strong&gt;Ctrl + Shift + L&lt;/strong&gt;, and it will immediately select all instances of it for you! This makes refactoring a breeze. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q2wmwUUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6dv39g2irg9mg9qwj0ew.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q2wmwUUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6dv39g2irg9mg9qwj0ew.gif" alt="Select All Matches Gif" width="864" height="367"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Duplicate Code&lt;/strong&gt;: If you have a piece of boilerplate code you want to easily copy, you can highlight the entire block of code (or if its a single line, make sure the cursor is on the line you wish to copy) then hit &lt;strong&gt;Command + Shift + Up/Down&lt;/strong&gt; (Mac) or &lt;strong&gt;Shift + Alt + Up/Down&lt;/strong&gt; (Windows) to copy the code below it, or above it respectively. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bKZliECv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2vor8xdwrjl025y88nk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bKZliECv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2vor8xdwrjl025y88nk.gif" alt="Duplicate Code Gif" width="864" height="330"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Move Code&lt;/strong&gt;: Well you copied the code, but you don’t really want it there. Or you realized this whole function should actually be above where it is now. Easily fixed. Highlight the chunk (or just place the cursor on the specific line for single lines) and hold down &lt;strong&gt;Option&lt;/strong&gt; (Mac) or &lt;strong&gt;Alt&lt;/strong&gt; (Windows) and move it up or down with the &lt;strong&gt;arrow keys&lt;/strong&gt;! Easy peasy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kDQR-Kon--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yora9ng1jti0dy729psb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kDQR-Kon--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yora9ng1jti0dy729psb.gif" alt="Move Code Gif" width="864" height="330"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Indent Code&lt;/strong&gt;: Ever wanted to easily move an entire chunk of code a few indents in without doing it line by line? Just highlight the desired code, then hit &lt;strong&gt;Command + [&lt;/strong&gt;  or &lt;strong&gt;]&lt;/strong&gt; (Mac) or &lt;strong&gt;Ctrl + [&lt;/strong&gt; or &lt;strong&gt;]&lt;/strong&gt; (Windows). &lt;strong&gt;]&lt;/strong&gt; will move it to the right, and &lt;strong&gt;[&lt;/strong&gt; will move it to the left. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--80Cx6W3v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bbc2joyz7moq3d8i52h0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--80Cx6W3v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bbc2joyz7moq3d8i52h0.gif" alt="Indent Code Gif" width="880" height="335"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Multiple Cursors&lt;/strong&gt;: If you want to insert text in multiple spots in your code, simply hold down &lt;strong&gt;Option&lt;/strong&gt; (Mac) or &lt;strong&gt;Alt&lt;/strong&gt; (Windows) and &lt;strong&gt;click&lt;/strong&gt; in the spot you want to add an additional cursor. Once you have all the places selected, you can type and add content to add the spots at once. To clear the multiple cursors, just click off anywhere.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vFC3POk6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3smmi8alxepv2h93ljj4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vFC3POk6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3smmi8alxepv2h93ljj4.gif" alt="Multiple Cursors" width="880" height="335"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Add Cursor Above/Below&lt;/strong&gt;: Similar to the above shortcut, this one allows you to simply add another cursor to the line above it or below it as the same placement (or the beginning of the line if there is no content on the line). For this, just hit &lt;strong&gt;Command + Option + Up/Down&lt;/strong&gt; (Mac) or &lt;strong&gt;Ctrl + Alt + Up/Down&lt;/strong&gt; (Windows).‍&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gwvk4tP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whf8hjfsxo85dtl18nst.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gwvk4tP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whf8hjfsxo85dtl18nst.gif" alt="Add Cursor Gif" width="880" height="335"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Switch Between Apps&lt;/strong&gt;: You can hit &lt;strong&gt;Command + Tab&lt;/strong&gt; (Mac) or &lt;strong&gt;Alt + Tab&lt;/strong&gt; (Windows) and hold down &lt;strong&gt;Command&lt;/strong&gt; (or &lt;strong&gt;Alt&lt;/strong&gt; respectively) to see a list of all the open apps on your computer. Continue hitting the tab key to navigate to the one you want to switch to. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X4A5EdIz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wq9qtcdde3z03v887ebg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X4A5EdIz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wq9qtcdde3z03v887ebg.gif" alt="Switch Apps Gif" width="640" height="267"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another option is using gestures if you’re working with a trackpad on a Mac, and swiping between apps when they’re full screen! This is my default method. Just check your gesture settings!&lt;/p&gt;

&lt;p&gt;That’s a lot of information, but getting a good grasp on some of these will make writing and formatting your code a breeze. If you also use Visual Studio Code, they have a complete list of all their available shortcuts for both &lt;a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf?W"&gt;Mac&lt;/a&gt; and &lt;a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf"&gt;Windows&lt;/a&gt;. Happy coding!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Learn how to use Git and GitHub in a team like a pro</title>
      <author>Damian Demasi</author>
      <pubDate>Wed, 17 Nov 2021 22:55:55 +0000</pubDate>
      <link>https://dev.to/colocodes/learn-how-to-use-git-and-github-in-a-team-like-a-pro-2dk7</link>
      <guid>https://dev.to/colocodes/learn-how-to-use-git-and-github-in-a-team-like-a-pro-2dk7</guid>
      <description>&lt;p&gt;In this tutorial, you will learn how to work in a team with a central repository on GitHub. You will work on issues, commits, pull requests, code reviews, and more.&lt;/p&gt;

&lt;p&gt;I don't consider myself an expert on Git, but I have learned a lot about it in my first month working as a software developer. This tutorial is the result of my effort in telling you how Git is used in professional environments. Bear in mind that there is not just a single way of using Git, so this is just one approach, and it may differ from what you see in your professional career.&lt;/p&gt;

&lt;p&gt;A good read to start working with Git workflows is the &lt;a href="https://www.atlassian.com/git/tutorials/comparing-workflows"&gt;Comparing Workflows&lt;/a&gt; tutorial by Atlassian.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-project"&gt;
  &lt;/a&gt;
  The project
&lt;/h2&gt;

&lt;p&gt;Harry and Hermione had the great idea of building a SaaS app to allow people to build their own potions online and share them with the rest of the world. They named it &lt;strong&gt;Potionfy&lt;/strong&gt;, and this will be their first start-up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/BttC0fsMuGXVS/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/BttC0fsMuGXVS/giphy.gif" width="500" height="209"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;They decided to use GitHub as the central repository in which all their work was going to be stored, and they chose React and Ruby on Rails as the app technology stack.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-team"&gt;
  &lt;/a&gt;
  The team
&lt;/h2&gt;

&lt;p&gt;Potionfy will be bootstrapped by Harry and Hermione themselves by using their savings. They will work in the garage of their home and they expect to have an MVP ready in 4 weeks.&lt;/p&gt;

&lt;p&gt;Let's see how they will work together in building the SaaS product and the obstacles they will have to overcome in doing so.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initial-setup"&gt;
  &lt;/a&gt;
  Initial set-up
&lt;/h2&gt;

&lt;p&gt;This project will use two fictional team members, let's call them Harry and Hermione, with two separate GitHub accounts, so you may want to start creating two accounts on GitHub for this.&lt;/p&gt;

&lt;p&gt;Bonus: in order to simplify things, if you have a Gmail account you can use your Gmail address with a plus and a string after the first part of it, and all email communications will be centralised in one account, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my_email_address+harry@gmail.com
my_email_address+hermione@gmail.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More on this &lt;a href="https://support.google.com/a/users/answer/9308648?hl=en"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-create-two-different-github-accounts"&gt;
  &lt;/a&gt;
  Step 1: create two different GitHub accounts
&lt;/h3&gt;

&lt;p&gt;In order to follow along with this tutorial, you'll need two different GitHub accounts. I chose to create two, but you can just use your own and create another one. Here is how my set-up looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0KWBSM-d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o8n5im9orxfgn5cf19ch.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0KWBSM-d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o8n5im9orxfgn5cf19ch.png" alt="Harry and Hermione GitHub accounts" width="880" height="449"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-local-development-environment"&gt;
  &lt;/a&gt;
  Step 2: local development environment
&lt;/h3&gt;

&lt;p&gt;We are going to use a local development environment and set up Git on it. I decided to use a virtual machine running Linux, but you can use your own environment (I just want to avoid any kind of configuration problem with Git).&lt;/p&gt;

&lt;p&gt;We have to make sure Git is installed in our system:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git --version
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command should return the version of Git that is installed in our system. In my case, my virtual Ubuntu didn't have it installed, so I ran:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3-team-work-considerations"&gt;
  &lt;/a&gt;
  Step 3: team work considerations
&lt;/h3&gt;

&lt;p&gt;Harry will be the one working locally in our development environment, and Hermione will choose to work directly on GitHub by using an online VSCode (more on this later).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-on-the-project"&gt;
  &lt;/a&gt;
  Working on the project
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#step-1-creating-the-repository-and-building-the-team-for-free"&gt;
  &lt;/a&gt;
  Step 1: Creating the repository and building the team (for free)
&lt;/h3&gt;

&lt;p&gt;Hermione is the leader of the team, as she is more experienced in coding, so she has decided to create a new repository to host the code for the SaaS product. To create the repository, she simply used the GitHub web interface and clicked on the &lt;code&gt;Repositories&lt;/code&gt; tab, and then on the &lt;code&gt;New&lt;/code&gt; button. She named the repository is &lt;code&gt;potionfy&lt;/code&gt; and she added a short description and a &lt;code&gt;Readme.md&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LUaWWJCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92a2v6z1asks9og4pows.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LUaWWJCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92a2v6z1asks9og4pows.png" alt="Potionfy repository" width="855" height="927"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the repository was created, she invited Harry to work on it. To do so, she clicked on the &lt;code&gt;Settings&lt;/code&gt; tab in the &lt;code&gt;potionfy&lt;/code&gt; repository, then in the &lt;code&gt;Manage access&lt;/code&gt; option, and finally in the &lt;code&gt;Add people&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9IHzmCc5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3veijbtrpirpxpx5qivl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9IHzmCc5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3veijbtrpirpxpx5qivl.png" alt="Add people to the repository" width="852" height="872"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By entering Harry's GitHub username (or email address) in the pop-up window and clicking on the &lt;code&gt;Add Harry(...) to this repository&lt;/code&gt;, she managed to send the invitation to Harry.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6fCI6cGj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6o5mdaunh0wnbwil28c4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6fCI6cGj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6o5mdaunh0wnbwil28c4.png" alt="Inviting Harry" width="493" height="345"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A couple of seconds later, Harry received the invitation to his email:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wlCPpeAx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82utres034fp4hmpvkta.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wlCPpeAx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82utres034fp4hmpvkta.png" alt="Invitation email" width="603" height="726"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;He accepter it, and by doing so, both team members were ready to start working on their project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In case the invitation link does not work (as in my case), Harry needs to go to Hermione GitHub profile, click on the &lt;code&gt;potionfy&lt;/code&gt; repository, and accept the invitation there:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AyQFG-0p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71u7wj0v3cicwnpinbhw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AyQFG-0p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71u7wj0v3cicwnpinbhw.png" alt="Accepting invitation (part 1)" width="880" height="603"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yFsIhZZK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4d69vm27g19jo6kcvbv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yFsIhZZK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4d69vm27g19jo6kcvbv.png" alt="Accepting invitation (part 2)" width="880" height="603"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-creating-a-file"&gt;
  &lt;/a&gt;
  Step 2: creating a file
&lt;/h3&gt;

&lt;p&gt;Hermione started the project by creating the initial file the Potionfy SaaS product will use: &lt;code&gt;index.html&lt;/code&gt;. In order to do so, she created the file using the GitHub web interface by positioning herself in the repository and clicking on the &lt;code&gt;Add file&lt;/code&gt; &amp;gt; &lt;code&gt;Create new file&lt;/code&gt; buttons.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2IB9FqrZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2gdlz27zm8k8cpziv7be.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2IB9FqrZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2gdlz27zm8k8cpziv7be.png" alt="Image description" width="852" height="602"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then she added the name of the file, its content, and a meaningful commit message. After clicking on the &lt;code&gt;Commit new file&lt;/code&gt; button, the file was created on the repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2iZsdaMm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/si7jxizohz7adle8rtr0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2iZsdaMm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/si7jxizohz7adle8rtr0.png" alt="Creating a file" width="852" height="1296"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-creating-an-issue-and-working-on-it"&gt;
  &lt;/a&gt;
  Step 3: creating an issue and working on it
&lt;/h3&gt;

&lt;p&gt;Hermione needs to move on to work on the marketing related to  Potionfy launch, so she told Harry to add a simple landing message to the &lt;code&gt;index.html&lt;/code&gt; file. So, she proceeded to create an &lt;strong&gt;issue&lt;/strong&gt; in the repository by clicking on the &lt;code&gt;Issues&lt;/code&gt; tab and clicking on the &lt;code&gt;New issue&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uQ8yNFqz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rasnvg01wtaxt35p4oa8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uQ8yNFqz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rasnvg01wtaxt35p4oa8.png" alt="New issue" width="852" height="620"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rGZmODep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgf8tpr35i1dbzpnno2l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rGZmODep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgf8tpr35i1dbzpnno2l.png" alt="New issue description" width="852" height="727"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the issue was created, Harry took a look at it (also by going to the &lt;code&gt;issues&lt;/code&gt; tab in the Potionfy repository) and let Hermione know that he will be working on it by leaving a comment and assigning the issue to himself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--irhINinD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6n6z1xfed0iy71y3nkpa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--irhINinD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6n6z1xfed0iy71y3nkpa.png" alt="Issue assignment" width="852" height="1063"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By working with this dynamic, the team will know who is working on what.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-setting-up-the-local-development-environment"&gt;
  &lt;/a&gt;
  Step 4: setting up the local development environment
&lt;/h3&gt;

&lt;p&gt;In order to work on the project's &lt;code&gt;index.html&lt;/code&gt; file, Harry chose to work locally, so he needed to clone the &lt;code&gt;potionfy&lt;/code&gt; repository in his development environment (the Linux virtual machine).&lt;/p&gt;

&lt;p&gt;The first thing he had to do was set up the SSH keys to work with GitHub. He followed GitHub's &lt;a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent"&gt;Generating a new SSH key and adding it to the ssh-agent&lt;/a&gt; tutorial to do so. He then added the key to his GitHub account, following the &lt;a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account"&gt;Adding a new SSH key to your GitHub account&lt;/a&gt; tutorial.&lt;/p&gt;

&lt;p&gt;Then, Harry opened Hermione repository on GitHub and copied &lt;br&gt;
the link to clone it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PeoQFJOw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vj9me394xsugdav4wouh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PeoQFJOw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vj9me394xsugdav4wouh.png" alt="Cloning repository" width="852" height="631"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now in his local development environment, he created a new directory in which all his work would be centralised:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir ~/development
$ cd ~/development
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, he cloned the repository by typing &lt;code&gt;git clone&lt;/code&gt; and pasting the code he just copied from GitHub (which is the &lt;em&gt;address&lt;/em&gt; of the repository):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git clone git@github.com:Hermione-Colo-Codes/potionfy.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this way, he now has a local copy of the repository and he is ready to start working on it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ll
total 12
drwxrwxr-x  3 parallels parallels 4096 Nov 17 07:34 ./
drwxr-xr-x 23 parallels parallels 4096 Nov 17 07:33 ../
drwxrwxr-x  3 parallels parallels 4096 Nov 17 07:34 potionfy/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#github-flow"&gt;
  &lt;/a&gt;
  GitHub flow
&lt;/h3&gt;

&lt;p&gt;In order to work on a repository, this is the workflow GitHub recommends:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a branch&lt;/li&gt;
&lt;li&gt;Make changes&lt;/li&gt;
&lt;li&gt;Create a pull request&lt;/li&gt;
&lt;li&gt;Address review comments&lt;/li&gt;
&lt;li&gt;Merge your pull request&lt;/li&gt;
&lt;li&gt;Delete your branch&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more information about this, you can read &lt;a href="https://docs.github.com/en/get-started/quickstart/github-flow"&gt;this document&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-1-branching"&gt;
  &lt;/a&gt;
  Step 1: branching
&lt;/h4&gt;

&lt;p&gt;As it is a good practice not to work on the master branch directly, Harry created a new branch related to the issue on which he will be working. He chose to do this on the GitHub repository, but he could have done the same in his local environment using Git commands.&lt;/p&gt;

&lt;p&gt;He chose a meaningful name and prefixed the name with the number of the related issue (which is &lt;code&gt;1&lt;/code&gt;, in this case).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jnp448GF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6yne1wb24kctulcw654.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jnp448GF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6yne1wb24kctulcw654.png" alt="Creating a branch" width="852" height="602"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More information about how to create a branch on GitHub can be &lt;a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-and-deleting-branches-within-your-repository"&gt;found here&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-2-working-on-the-branch-locally"&gt;
  &lt;/a&gt;
  Step 2: working on the branch locally
&lt;/h4&gt;

&lt;p&gt;After the branch was created, Harry started working on it. &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#step-21-raw-git-pull-endraw-"&gt;
  &lt;/a&gt;
  Step 2.1: &lt;code&gt;git pull&lt;/code&gt;
&lt;/h5&gt;

&lt;p&gt;The first thing he did was a &lt;code&gt;pull&lt;/code&gt; of the whole repository so he could see the branch in his local development environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~/development/potionfy&lt;span class="nv"&gt;$ &lt;/span&gt;git pull
Warning: Permanently added the ECDSA host key &lt;span class="k"&gt;for &lt;/span&gt;IP address &lt;span class="s1"&gt;'13.237.44.5'&lt;/span&gt; to the list of known hosts.
From github.com:Hermione-Colo-Codes/potionfy
 &lt;span class="k"&gt;*&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;new branch]      1-add-landing-message -&amp;gt; origin/1-add-landing-message
Already up to date.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#step-22-raw-git-checkout-endraw-"&gt;
  &lt;/a&gt;
  Step 2.2: &lt;code&gt;git checkout&lt;/code&gt;
&lt;/h5&gt;

&lt;p&gt;With the new branch in his environment, he switched to it by using the &lt;code&gt;git checkout &amp;lt;name_of_branch&amp;gt;&lt;/code&gt; command. After doing so, he ensured he was working in the correct branch with the &lt;code&gt;git branch&lt;/code&gt; command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~/development/potionfy&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout 1-add-landing-message 
Branch &lt;span class="s1"&gt;'1-add-landing-message'&lt;/span&gt; &lt;span class="nb"&gt;set &lt;/span&gt;up to track remote branch &lt;span class="s1"&gt;'1-add-landing-message'&lt;/span&gt; from &lt;span class="s1"&gt;'origin'&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
Switched to a new branch &lt;span class="s1"&gt;'1-add-landing-message'&lt;/span&gt;

~/development/potionfy&lt;span class="nv"&gt;$ &lt;/span&gt;git branch
&lt;span class="k"&gt;*&lt;/span&gt; 1-add-landing-message
  main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#step-23-solve-the-issue"&gt;
  &lt;/a&gt;
  Step 2.3: solve the issue
&lt;/h5&gt;

&lt;p&gt;Harry started working on solving the issue. In order to do so, he opened the &lt;code&gt;index.html&lt;/code&gt; file and added a &lt;code&gt;h1&lt;/code&gt; header to it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8gT-5rLW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1rhinjvy8z4ouozekolm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8gT-5rLW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1rhinjvy8z4ouozekolm.png" alt="Making changes to the file" width="880" height="489"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the changes were made, he saw how Git reacted to this change.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~/development/potionfy&lt;span class="nv"&gt;$ &lt;/span&gt;git status
On branch 1-add-landing-message
Your branch is up to &lt;span class="nb"&gt;date &lt;/span&gt;with &lt;span class="s1"&gt;'origin/1-add-landing-message'&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;

Changes not staged &lt;span class="k"&gt;for &lt;/span&gt;commit:
  &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;"git add &amp;lt;file&amp;gt;..."&lt;/span&gt; to update what will be committed&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;"git restore &amp;lt;file&amp;gt;..."&lt;/span&gt; to discard changes &lt;span class="k"&gt;in &lt;/span&gt;working directory&lt;span class="o"&gt;)&lt;/span&gt;
    modified:   index.html

no changes added to commit &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;"git add"&lt;/span&gt; and/or &lt;span class="s2"&gt;"git commit -a"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
parallels@parallels-Parallels-Virtual-Platform:~/development/potionfy&lt;span class="nv"&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;He then added the file to the staging area with the &lt;code&gt;git add&lt;/code&gt; command and committed the change with the &lt;code&gt;git commit&lt;/code&gt; command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~/development/potionfy&lt;span class="nv"&gt;$ &lt;/span&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;

~/development/potionfy&lt;span class="nv"&gt;$ &lt;/span&gt;git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Add landing message. #1"&lt;/span&gt;

~/development/potionfy&lt;span class="nv"&gt;$ &lt;/span&gt;git status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note how the commit message also includes the id of the issue, which in this case is &lt;code&gt;#1&lt;/code&gt;.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#step-24-push-to-repository"&gt;
  &lt;/a&gt;
  Step 2.4: push to repository
&lt;/h5&gt;

&lt;p&gt;The next step Harry needs to do is to push the changes to the repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~/development/potionfy&lt;span class="nv"&gt;$ &lt;/span&gt;git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cybptRf3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spgnh14xpr1wnqlis2k3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cybptRf3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spgnh14xpr1wnqlis2k3.png" alt="Pushing changes" width="880" height="739"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#step-25-create-a-pull-request"&gt;
  &lt;/a&gt;
  Step 2.5: create a pull request
&lt;/h5&gt;

&lt;p&gt;Harry then clicked on the &lt;code&gt;Compare and pull request&lt;/code&gt; button in the GitHub repository (making sure his branch was selected in the branch left drop-down menu).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RXN2Yco7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nsmrf4fbqloojq41tk0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RXN2Yco7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nsmrf4fbqloojq41tk0.png" alt="Pull request" width="880" height="912"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This pull request will be analysed by Hermione and she will decide if it can be merged to the master branch or not. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-2"&gt;
  &lt;/a&gt;
  Part 2
&lt;/h2&gt;

&lt;p&gt;As this tutorial is becoming huge, I have divided it into two parts. In the next part we are going to see how Hermione reviews Harry's code and deals with the pull request, so stay tuned!&lt;/p&gt;




&lt;p&gt;🗞️ &lt;strong&gt;NEWSLETTER -&lt;/strong&gt; &lt;em&gt;If you want to hear about my latest articles and interesting software development content, &lt;a href="https://chipper-designer-8106.ck.page/1a819bffe8"&gt;subscribe to my newsletter&lt;/a&gt;. &lt;strong&gt;I will be giving away a Udemy course among my newsletter subscribers&lt;/strong&gt; if we go over 100 during the month of November 2021!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;🐦 &lt;strong&gt;TWITTER -&lt;/strong&gt; &lt;em&gt;Follow me on &lt;a href="https://twitter.com/DamianDemasi"&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to Quickly Improve Your Infrastructure as Code</title>
      <author>Marcin Wyszynski</author>
      <pubDate>Wed, 17 Nov 2021 22:40:00 +0000</pubDate>
      <link>https://dev.to/spacelift/how-to-quickly-improve-your-infrastructure-as-code-3b1o</link>
      <guid>https://dev.to/spacelift/how-to-quickly-improve-your-infrastructure-as-code-3b1o</guid>
      <description>&lt;p&gt;The introduction of &lt;a href="https://spacelift.io/blog/infrastructure-as-code"&gt;Infrastructure as Code&lt;/a&gt; or IaC has transformed the way you can provision and deploy high-performance cloud-based IT infrastructures.&lt;/p&gt;

&lt;p&gt;IaC tools, such as &lt;a href="https://spacelift.io/blog/what-is-terraform"&gt;Terraform&lt;/a&gt;, have been integrated into DevOps toolchains, saving DevOps IaC teams from the excessive manual effort.&lt;/p&gt;

&lt;p&gt;While these tools undoubtedly help accelerate building IT infrastructures, their limitations can impact DevOps’ ability to optimize and improve control of their IaC processes supporting future business needs.&lt;/p&gt;

&lt;p&gt;In this article, you’ll learn about IT infrastructure limitations that IaC DevOps teams deal with on a daily basis and how &lt;a href="https://spacelift.io/"&gt;Spacelift&lt;/a&gt; is able to get past them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-workflow"&gt;
  &lt;/a&gt;
  1) Workflow
&lt;/h1&gt;

&lt;p&gt;One of the most frequent challenges while using more generic IaC tools is the &lt;strong&gt;non-intuitive workflow&lt;/strong&gt; driven by its reliance on pull requests. Some solutions offer multiple workspaces, but the result can be fragile and nondeterministic. &lt;/p&gt;

&lt;p&gt;Since there’s no concept of mapping projects to branches or tags, anyone commenting on an approved pull request can deploy arbitrary code to production, even if the approval was meant for a short-lived experimental environment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spacelift does not depend on pull requests.&lt;/strong&gt; It is mostly driven by push and tag events, so building a sophisticated Git flow is much easier. Spacelift reports the outcome of its jobs as commit status checks, allowing you to block merging the code on a failing Spacelift check.&lt;/p&gt;

&lt;p&gt;Triggering a run can be customized using &lt;a href="https://docs.spacelift.io/concepts/policy/git-push-policy"&gt;Git push policies&lt;/a&gt;. Thanks to that, Spacelift can provide the same level of comfort and security to teams using one project per repository and those using mono repo with hundreds of interdependent projects. You can read more about our approach to VCS integration &lt;a href="https://docs.spacelift.io/integrations/source-control/github#tracked-branches"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-access-control"&gt;
  &lt;/a&gt;
  2) Access Control
&lt;/h1&gt;

&lt;p&gt;The majority of generic tools don’t offer access control models but rely on comments on pull requests to drive infrastructure deployments. While it is usually fine when a single repository drives a single Terraform project, it becomes a huge liability for more complex scenarios.&lt;/p&gt;

&lt;p&gt;Spacelift ships with a sophisticated mechanism &lt;strong&gt;allowing administrators to declare&lt;/strong&gt; &lt;a href="https://docs.spacelift.io/concepts/policy/login-policy"&gt;who can log in&lt;/a&gt; (and under what circumstances) and what their &lt;a href="https://docs.spacelift.io/concepts/policy/stack-access-policy"&gt;level of access&lt;/a&gt; to each of the managed projects should be. Even our &lt;a href="https://docs.spacelift.io/integrations/slack"&gt;Slack integration&lt;/a&gt; can be subject to policy controls, allowing an admin to grant access to a project &lt;a href="https://docs.spacelift.io/integrations/slack#managing-access-to-stacks-with-policies"&gt;based on Slack-specific data&lt;/a&gt; (think team, channel, user, etc.).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-policy-framework"&gt;
  &lt;/a&gt;
  3) Policy Framework
&lt;/h1&gt;

&lt;p&gt;One thing that’s not in scope for most IaC solutions is the way to ensure that your infrastructure is compliant with industry best practices and your company policies.&lt;/p&gt;

&lt;p&gt;Spacelift puts &lt;strong&gt;policy-as-code&lt;/strong&gt; in the center of its value proposition and builds a consistent, &lt;a href="https://docs.spacelift.io/concepts/policy"&gt;robust policy framework&lt;/a&gt; on top of &lt;a href="https://www.openpolicyagent.org/"&gt;Open Policy Agent&lt;/a&gt;. Apart from providing a comprehensive automated change review and ensuring compliance of your &lt;a href="https://docs.spacelift.io/concepts/policy/terraform-plan-policy"&gt;Terraform changes&lt;/a&gt;, Spacelift uses the same approach to allow you to declare rules around the &lt;a href="https://docs.spacelift.io/concepts/policy/login-policy"&gt;account&lt;/a&gt; and &lt;a href="https://docs.spacelift.io/concepts/policy/stack-access-policy"&gt;project access&lt;/a&gt;, &lt;a href="https://docs.spacelift.io/concepts/policy/git-push-policy"&gt;handling push notifications&lt;/a&gt;, &lt;a href="https://docs.spacelift.io/concepts/policy/run-initialization-policy"&gt;starting runs&lt;/a&gt; and &lt;a href="https://docs.spacelift.io/concepts/policy/task-run-policy"&gt;triggering tasks&lt;/a&gt;, and creating &lt;a href="https://docs.spacelift.io/concepts/policy/trigger-policy"&gt;relationships between projects&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-complex-workflows"&gt;
  &lt;/a&gt;
  4) Complex Workflows
&lt;/h1&gt;

&lt;p&gt;Handling interdependencies between projects has always been Terraform’s Achilles’ heel. The usual approach to this problem is adding another layer of abstraction in the form of a Terraform wrapper like &lt;a href="https://terragrunt.gruntwork.io/"&gt;Terragrunt&lt;/a&gt;. But it’s only a partial solution as it breaks the problem into smaller chunks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.spacelift.io/concepts/policy/trigger-policy"&gt;Spacelift’s trigger policies&lt;/a&gt; on the other hand provide a smart, &lt;strong&gt;declarative automation layer&lt;/strong&gt; on top of vanilla Terraform. They allow you to plug into state changes of individual projects and declare dependencies that should be resolved, following the changes that have just been applied. Read more &lt;a href="https://docs.spacelift.io/concepts/policy/trigger-policy"&gt;here&lt;/a&gt; to discover other exciting possibilities.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-private-module-registry"&gt;
  &lt;/a&gt;
  5) Private Module Registry
&lt;/h1&gt;

&lt;p&gt;Another problem to solve externally when using some of the generic tools is authoring and maintaining reusable &lt;a href="https://spacelift.io/blog/what-are-terraform-modules-and-how-do-they-work"&gt;Terraform modules&lt;/a&gt; for your organization. Terraform is flexible in allowing modules to come from &lt;a href="https://www.terraform.io/docs/language/modules/sources.html"&gt;various sources&lt;/a&gt;, but ensuring confidential access, as well as testing and versioning, are left to you, the user.&lt;/p&gt;

&lt;p&gt;Until now, the golden standard in that regard has been the &lt;a href="https://www.terraform.io/docs/cloud/registry/index.html"&gt;private module registry from HashiCorp&lt;/a&gt;. But Spacelift offers much more. Far from being just a glorified package manager, Spacelift adds a &lt;a href="https://docs.spacelift.io/vendors/terraform/module-registry"&gt;full CI solution for Terraform modules&lt;/a&gt;, out of the box and free of charge. You can thus ensure that your private modules are healthy before you distribute them to the rest of your organization.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-effortless-setup-and-customization"&gt;
  &lt;/a&gt;
  6) Effortless Setup and Customization
&lt;/h1&gt;

&lt;p&gt;If you manage a single or a handful of rarely changing projects, it’s likely that you just set your IaC up once and forget about it. But in a more dynamic environment, where microservices come and go, new environments proliferate and new product teams require their own Terraform workspaces. The need to configure it each and every time become a major nuisance, putting a lot of pressure on your DevOps team.&lt;/p&gt;

&lt;p&gt;Enter Spacelift. In Spacelift, much of the &lt;strong&gt;configuration can be handled by the project owners&lt;/strong&gt; themselves—you can add Terraform and/or &lt;a href="https://docs.spacelift.io/concepts/configuration/environment"&gt;environment variables&lt;/a&gt; and mount files (even inject Terraform code!) programmatically or through the GUI without the need for administrative privileges or changing the central server configuration. For administrators, adding new projects requires minimal hassle since there’s no need to set up webhooks or change any YAML. And it can all be done programmatically using Terraform.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-programmatic-configuration"&gt;
  &lt;/a&gt;
  7) Programmatic Configuration
&lt;/h1&gt;

&lt;p&gt;What comes as a pleasant surprise to users of generic CI tools, Spacelift entities such as stacks, contexts, modules or policies can be managed in a declarative way using your favorite infra-as-code tool (this rule applies also to their configuration). Yes, that’s right—&lt;a href="https://docs.spacelift.io/vendors/terraform/terraform-provider"&gt;Spacelift offers a Terraform provider&lt;/a&gt; that allows you to &lt;strong&gt;programmatically manage the lifecycle of its own resources&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Administrative stacks get credential-less access to the subset of our &lt;a href="https://docs.spacelift.io/integrations/api"&gt;GraphQL API&lt;/a&gt; that does not involve managing the actual infrastructure. For more sophisticated use cases, Spacelift allows you to generate API keys that are subject to the same access controls as normal users are, allowing you to create single-purpose tokens for restricted use by your internal scripts.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#8-drift-detection"&gt;
  &lt;/a&gt;
  8) Drift Detection
&lt;/h1&gt;

&lt;p&gt;Generic IaC platforms do not provide any mechanisms to detect if your infrastructure is undergoing drift. Drift is a condition that represents the difference between the desired and the actual state of the infrastructure managed by your tool of choice – &lt;a href="https://www.terraform.io/"&gt;Terraform&lt;/a&gt;, &lt;a href="https://www.pulumi.com/"&gt;Pulumi&lt;/a&gt;, &lt;a href="https://aws.amazon.com/cloudformation/"&gt;CloudFormation&lt;/a&gt; or another. Drift can be caused by either or a combination of changes directly introduced by external actors – either humans or machines (scripts) or via the dependency of your resources on external data sources. In any case, drift is not good.&lt;/p&gt;

&lt;p&gt;Spacelift has got you covered here. You can configure periodic &lt;a href="https://docs.spacelift.io/concepts/stack/drift-detection"&gt;drift detection&lt;/a&gt; to &lt;strong&gt;notify you whenever drift happens&lt;/strong&gt;, and take immediate action. You can even go a step further with optional automatic &lt;a href="https://docs.spacelift.io/concepts/stack/drift-detection#to-reconcile-or-not-to-reconcile"&gt;reconciliation&lt;/a&gt;, ensuring your infrastructure always resembles your Terraform configuration.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#9-resource-visualization"&gt;
  &lt;/a&gt;
  9) Resource Visualization
&lt;/h1&gt;

&lt;p&gt;General-purpose CI/CD platforms provide little to no insight into resource utilization from either a real-time or historical perspective. Which resources are over-or underutilized? &lt;/p&gt;

&lt;p&gt;Developers need to be able to intimately understand the material they’re working with. With regards to infra-as-code, the most important part of this story is understanding the managed resources in-depth. Both from the current perspective and through being able to put each resource in its historical context.&lt;/p&gt;

&lt;p&gt;The resources view in Spacelift gives you &lt;strong&gt;greater visibility into each and every resource&lt;/strong&gt;. With this deep insight into resources, DevOps are able to gain an understanding of the lifecycle of each resource managed by Spacelift and document it, regardless of the technology used — &lt;a href="https://www.terraform.io/"&gt;Terraform&lt;/a&gt;, &lt;a href="https://github.com/gruntwork-io/terragrunt"&gt;Terragrunt&lt;/a&gt;, &lt;a href="//pulumi.com"&gt;Pulumi&lt;/a&gt;, or &lt;a href="https://aws.amazon.com/cloudformation/"&gt;CloudFormation&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creature-comforts"&gt;
  &lt;/a&gt;
  Creature Comforts
&lt;/h1&gt;

&lt;p&gt;Last but not least, Spacelift puts an emphasis on great user experience, offering a myriad of creature comforts. &lt;a href="https://docs.spacelift.io/concepts/configuration/context"&gt;Contexts&lt;/a&gt; for example allow you to attach entire collections of configuration to individual stacks and modules. &lt;a href="https://docs.spacelift.io/concepts/run/task"&gt;Tasks&lt;/a&gt; provide a powerful audited way of running one-off administrative commands on an initialized Terraform environment – subject to &lt;a href="https://docs.spacelift.io/concepts/run/task"&gt;their own policy constraints&lt;/a&gt;. &lt;a href="https://docs.spacelift.io/concepts/stack#stack-locking"&gt;Stack locking&lt;/a&gt; allows a single individual to take exclusive control over a stack to ensure that nobody is able to modify its state while crucial changes are being made. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-spacelift"&gt;
  &lt;/a&gt;
  Why Spacelift
&lt;/h1&gt;

&lt;p&gt;Spacelift is an innovative and sophisticated SaaS product for Infrastructure as Code which helps IaC DevOps develop and deploy new infrastructures or changes quickly and with confidence.&lt;/p&gt;

&lt;p&gt;Spacelift offers a unique set of IaC management capabilities:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;a more intuitive, &lt;a href="https://docs.spacelift.io/concepts/policy/git-push-policy"&gt;versatile&lt;/a&gt; and &lt;a href="https://docs.spacelift.io/concepts/run#run-state-machine"&gt;robust&lt;/a&gt; workflow&lt;/li&gt;
&lt;li&gt;extremely granular access controls on &lt;a href="https://docs.spacelift.io/concepts/policy/login-policy"&gt;account&lt;/a&gt; and &lt;a href="https://docs.spacelift.io/concepts/policy/stack-access-policy"&gt;project level&lt;/a&gt; that work well with &lt;a href="https://docs.spacelift.io/integrations/single-sign-on"&gt;an identity provider of your choice&lt;/a&gt; (SSO);&lt;/li&gt;
&lt;li&gt;an &lt;a href="https://docs.spacelift.io/concepts/policy/terraform-plan-policy"&gt;automated code review&lt;/a&gt; and &lt;a href="https://docs.spacelift.io/concepts/policy/task-run-policy"&gt;threat detection&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;the ability to &lt;a href="https://docs.spacelift.io/concepts/policy/trigger-policy"&gt;declare complex workflows&lt;/a&gt; between projects across multiple repositories&lt;/li&gt;
&lt;li&gt;a &lt;a href="https://docs.spacelift.io/concepts/modules"&gt;built-in private module registry&lt;/a&gt; with a full CI system for modules&lt;/li&gt;
&lt;li&gt;effortless setup and customization with &lt;a href="https://docs.spacelift.io/concepts/configuration/environment"&gt;per-project environment management&lt;/a&gt; and &lt;a href="https://docs.spacelift.io/integrations/docker"&gt;Docker integration&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.spacelift.io/integrations/terraform-provider"&gt;programmatic configuration&lt;/a&gt; using Terraform;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.spacelift.io/concepts/stack/drift-detection"&gt;drift detection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.spacelift.io/concepts/resources"&gt;resource visualization&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;… and a myriad of creature comforts like &lt;a href="https://docs.spacelift.io/concepts/configuration/context"&gt;contexts&lt;/a&gt;, &lt;a href="https://docs.spacelift.io/concepts/run/task"&gt;tasks&lt;/a&gt; or &lt;a href="https://docs.spacelift.io/concepts/stack#stack-locking"&gt;stack locking&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#key-points"&gt;
  &lt;/a&gt;
  Key Points
&lt;/h1&gt;

&lt;p&gt;There are many ways of working with Terraform. Each way is different in terms of complexity and offers a different set of features. It is important to keep in mind that choosing one way or another should be based on business and technical requirements. Most often, there is no point in implementing an in-house solution as the cost and effort of building and maintaining it may exceed its potential benefits. It is much easier and more efficient to leverage platforms such as &lt;a href="https://spacelift.io/product"&gt;Spacelift&lt;/a&gt; to provide these features for you instead. You can &lt;a href="https://spacelift.io/free-trial"&gt;try Spacelift for free&lt;/a&gt; or &lt;a href="https://spacelift.io/schedule-demo"&gt;book a demo&lt;/a&gt; with one of our engineers. &lt;/p&gt;

</description>
      <category>devops</category>
      <category>iac</category>
      <category>cicd</category>
      <category>terraform</category>
    </item>
    <item>
      <title>Day 12 of #100daysofcode: Learning and Meetings</title>
      <author>Ryan Whelchel</author>
      <pubDate>Wed, 17 Nov 2021 22:26:04 +0000</pubDate>
      <link>https://dev.to/rydwhelchel/day-12-of-100daysofcode-learning-and-meetings-2cm0</link>
      <guid>https://dev.to/rydwhelchel/day-12-of-100daysofcode-learning-and-meetings-2cm0</guid>
      <description>&lt;p&gt;Between meetings today, I learned about Django and continued my journey to a Javascript certificate from FreeCodeCamp.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;I started today with working on FreeCodeCamp tutorials for about an hour. I then had to prepare for a couple meetings I had today. Between meetings, I learned about Django and some of key differences between Django and Flask.&lt;/p&gt;

&lt;p&gt;At the surface level, it seems like Django is ideal for quickly getting a small project off the ground, while Flask is better and more flexible in larger projects.&lt;/p&gt;

&lt;p&gt;I will discuss Django more after I learn more about it. I am still considering building my next app in Django instead of Flask, if only to learn it.&lt;/p&gt;

&lt;p&gt;I also spent some time on the artist app today. I made a mistake with some git commands and, long story short, I ditched a week's worth of changes. &lt;/p&gt;

&lt;p&gt;A little disheartening, but I was considering trying a different tact for constructing the main page, so I'm not too upset about it. &lt;/p&gt;

&lt;p&gt;A clean slate, a new approach!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tomorrow"&gt;
  &lt;/a&gt;
  Tomorrow
&lt;/h2&gt;

&lt;p&gt;I am going to spend some time tomorrow planning the final approach for the artist app. I have already designed most of the elements using React bootstrap, it's really only the structure of the page that I will be focusing on. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-im-struggling-on"&gt;
  &lt;/a&gt;
  What I'm Struggling on
&lt;/h2&gt;

&lt;p&gt;Complicated state management between components. I still haven't quite nailed it down.&lt;/p&gt;

&lt;p&gt;That's all for today! Thanks for following, if you have any suggestions, please leave them in the comments below!&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>react</category>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Welcome Thread - v151</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 17 Nov 2021 22:24:15 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v151-5dm</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v151-5dm</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/Y8ocCgwtdj29O/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Y8ocCgwtdj29O/giphy.gif" alt="Stefan from SNL waving hello" width="444" height="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. 👋 &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>Executing Shell Commands In Laravel</title>
      <author>Bertug Korucu</author>
      <pubDate>Wed, 17 Nov 2021 21:45:20 +0000</pubDate>
      <link>https://dev.to/kodeas/executing-shell-commands-in-laravel-1098</link>
      <guid>https://dev.to/kodeas/executing-shell-commands-in-laravel-1098</guid>
      <description>&lt;p&gt;Both &lt;code&gt;shell_exec()&lt;/code&gt; and &lt;code&gt;exec()&lt;/code&gt; do the job - until they don't. &lt;/p&gt;

&lt;p&gt;If your command crash for some reason, you won't know -  &lt;strong&gt;&lt;code&gt;shell_exec()&lt;/code&gt; and &lt;code&gt;exec()&lt;/code&gt; don't throw Exceptions.&lt;/strong&gt; They just fail silently. 😱&lt;/p&gt;

&lt;p&gt;So, here is my solution to encounter this problem:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use Symfony\Component\Process\Process;

class ShellCommand
{
    public static function execute($cmd): string
    {
        $process = Process::fromShellCommandline($cmd);

        $processOutput = '';

        $captureOutput = function ($type, $line) use (&amp;amp;$processOutput) {
            $processOutput .= $line;
        };

        $process-&amp;gt;setTimeout(null)
            -&amp;gt;run($captureOutput);

        if ($process-&amp;gt;getExitCode()) {
            $exception = new ShellCommandFailedException($cmd . " - " . $processOutput);
            report($exception);

            throw $exception;
        }

        return $processOutput;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;It utilises Symfony's Process (which comes out of the box to Laravel).&lt;/em&gt; ✨&lt;/p&gt;

&lt;p&gt;With this way, I can throw a custom exception, log the command and the output to investigate, report it to my logs to investigate, etc.&lt;/p&gt;

&lt;p&gt;No more failing silently 😇&lt;/p&gt;

&lt;p&gt;Hope you like this little piece! If you do, please give it a ❤️&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
    </item>
    <item>
      <title>Hawk project</title>
      <author>Paulo Medeiros</author>
      <pubDate>Wed, 17 Nov 2021 21:35:55 +0000</pubDate>
      <link>https://dev.to/medpaf/hawk-project-1c59</link>
      <guid>https://dev.to/medpaf/hawk-project-1c59</guid>
      <description>&lt;p&gt;Hawk is a network and pentest utility that I developed so that I could perform different kinds of task using the same suite, instead of jumping from one tool to another.&lt;br&gt;
Currently, this script can perform a good variety of tasks such as ifconfig, ping, traceroute, port scans (including SYN, TCP, UDP, ACK, comprehensive scan, host discovery (scan for up devices on a local network), MAC address detection (get MAC address of a host IP on a local network), banner grabbing, DNS checks (with geolocation information), WHOIS, subdomain enumeration, vulnerability reconnaissance, packet sniffing, MAC spoofing, IP spoofing, SYN flooding, deauth attack and brute-force attack (beta).&lt;br&gt;
Other features are still being implemented. Future implementations may include WAF detection, DNS enumeration, traffic analysis, XSS vulnerability scanner, ARP cache poisoning, DNS cache poisoning, MAC flooding, ping of death, network disassociation attack (not deauth attack), OSINT, exploits, some automated tasks and others.&lt;br&gt;
If you want to become a contributor, make a pull request or issue.&lt;br&gt;
Waiting for your feedback. Kudos&lt;br&gt;
Link to the repository: &lt;a href="https://github.com/medpaf/hawk"&gt;https://github.com/medpaf/hawk&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>🤔 False, true, "Falsy" &amp; "Truthy" 👀</title>
      <author>Luís Von Muller</author>
      <pubDate>Wed, 17 Nov 2021 21:07:39 +0000</pubDate>
      <link>https://dev.to/luisvonmuller/false-true-falsy-truthy-47n9</link>
      <guid>https://dev.to/luisvonmuller/false-true-falsy-truthy-47n9</guid>
      <description>&lt;h1&gt;
  &lt;a href="#false-true-falsy-amp-truthy"&gt;
  &lt;/a&gt;
  🤔 False, true, "Falsy" &amp;amp; "Truthy" 👀
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#entendendo-um-pouco-do-contexto-geral"&gt;
  &lt;/a&gt;
  ⚙️ Entendendo um pouco do contexto Geral.
&lt;/h2&gt;

&lt;p&gt;Na computação temos um Tipo chamado: "Booleano". O que é: Booleano? &lt;/p&gt;

&lt;p&gt;Aqui estamos falando tipo primitivo do TypeScript: "Boolean". (⊙.☉)7&lt;/p&gt;

&lt;p&gt;Ser do tipo (Booleano) significa que algum valor, isto é, alguma variável, constante ou qualquer coisa que possuí em si um valor desse &lt;strong&gt;tipo&lt;/strong&gt; pode ser: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Verdadeiro&lt;/strong&gt; (Isto é, &lt;em&gt;true&lt;/em&gt;) 👍&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Falso&lt;/strong&gt; (Isto é, &lt;em&gt;false&lt;/em&gt;) 👎&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O nome "Booleano" (&lt;em&gt;Boolean&lt;/em&gt; em &lt;strong&gt;TypeScript&lt;/strong&gt;) faz uma homenagem ao Matemático &amp;amp; Filósofo &lt;strong&gt;George Boole&lt;/strong&gt;, ele "construiu" a base algébrica necessária para a criação Lógica Algébrica que podemos usar para: Operações lógicas &lt;strong&gt;(em booleanos)&lt;/strong&gt; como &lt;a href="https://pt.wikipedia.org/wiki/Conjun%C3%A7%C3%A3o_l%C3%B3gica"&gt;conjunção&lt;/a&gt; (&lt;strong&gt;||&lt;/strong&gt;), &lt;a href="https://pt.wikipedia.org/wiki/Disjun%C3%A7%C3%A3o_l%C3%B3gica"&gt;disjunção&lt;/a&gt; &lt;strong&gt;(&amp;amp;&amp;amp;)&lt;/strong&gt;, &lt;a href="https://pt.wikipedia.org/wiki/Disjun%C3%A7%C3%A3o_exclusiva"&gt;disjunção exclusiva&lt;/a&gt; (&lt;strong&gt;(p &amp;amp;&amp;amp; !q) || (!p &amp;amp;&amp;amp; q)&lt;/strong&gt;), &lt;a href="https://pt.wikipedia.org/wiki/Equival%C3%AAncia_l%C3%B3gica"&gt;equivalência lógica&lt;/a&gt; (&lt;strong&gt;==&lt;/strong&gt;) e &lt;a href="https://pt.wikipedia.org/wiki/Nega%C3%A7%C3%A3o"&gt;negação&lt;/a&gt; &lt;strong&gt;(!)&lt;/strong&gt;, que correspondem a algumas das operações da &lt;a href="https://pt.wikipedia.org/wiki/%C3%81lgebra_booleana"&gt;álgebra booliana&lt;/a&gt; (É a parte da do conceito da &lt;strong&gt;Matemática Discreta&lt;/strong&gt;). &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fornecendo-um-exemplo-b%C3%A1sico-%D4%85%E2%89%96%E2%89%96%D4%85"&gt;
  &lt;/a&gt;
  Fornecendo um exemplo básico ԅ(≖‿≖ԅ):
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/** Vamos iniciar uma constante "Booleana" verdadeira */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;constanteVerdadeira&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cm"&gt;/** Vamos iniciar uma constante "Booleana" falsa através da inversão do seu valor boleano com o operador "!" */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;constanteFalsa&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;constanteVerdadeira&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;constanteFalsa&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;constanteVerdadeira&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ambas as constantes são verdadeiras. ヽ(´▽`)/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;constanteFalsa&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;constanteVerdadeira&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ao menos uma das constantes são falsas ( ಠ ʖ̯ ಠ )&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nenhuma constante é verdadeira (҂◡_◡)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#thinking-por-que-existe-falsy-ou-truthy"&gt;
  &lt;/a&gt;
  🤔 Por que existe: "Falsy" ou "Truthy"?
&lt;/h2&gt;

&lt;p&gt;Na &lt;a href="https://pt.wikipedia.org/wiki/L%C3%B3gica"&gt;lógica&lt;/a&gt;, afirmações &lt;strong&gt;diferentes&lt;/strong&gt; são &lt;strong&gt;logicamente equivalentes&lt;/strong&gt; se tiverem o mesmo conteúdo lógico. Isto é, se elas tiverem o mesmo &lt;a href="https://pt.wikipedia.org/wiki/Valor_de_verdade"&gt;valor de verdade&lt;/a&gt; em todos os modelos. Também conhecido por "Tautologia", isto é, algo que é correspondente em termos lógicos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thumbsdown-o-que-%C3%A9-o-falsy-ou-err%C3%B4neofalse%C3%A1veis-"&gt;
  &lt;/a&gt;
  👎 O que é o "Falsy" ou _Errôneo/_Falseáveis ? 
&lt;/h2&gt;

&lt;p&gt;*&lt;em&gt;**&lt;/em&gt;➡️ &lt;em&gt;Falsy&lt;/em&gt;&lt;em&gt;&lt;/em&gt; é um *"&lt;strong&gt;_&lt;/strong&gt;pseudo tipo*&lt;em&gt;_&lt;/em&gt;&lt;em&gt;"  **logicamente equivalente ao **Valor Primitivo  *&lt;/em&gt;&lt;strong&gt;false&lt;/strong&gt; para o &lt;strong&gt;JavaSript.&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#os-valores-que-seriam-aceitos-como-false-seriam"&gt;
  &lt;/a&gt;
  Os valores que seriam aceitos como &lt;strong&gt;false&lt;/strong&gt; seriam: 
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;0&lt;/strong&gt; - (O valor numérico Zero).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;0n&lt;/strong&gt; - (Um inteiro de GIGANTE cujo valor numérico é zero - um &lt;em&gt;&lt;strong&gt;bigInt&lt;/strong&gt;&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;null&lt;/strong&gt; - (O tipo primitivo &lt;strong&gt;Nulo&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;undefined&lt;/strong&gt; - (Algo que não possui valor atribuído, isto é, &lt;strong&gt;indefinido&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;NaN&lt;/strong&gt; (&lt;em&gt;&lt;strong&gt;Not-a-Number&lt;/strong&gt;&lt;/em&gt;** -** algo que não é um número &lt;strong&gt;pertencente&lt;/strong&gt; ao conjuntos dos reais)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;"" ou '' ** (Uma cadeia de **caracteres vazia&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#segue-a-prova-do-supracitado-%E2%98%9E%EF%BE%9F%E3%83%AE%EF%BE%9F%E2%98%9E"&gt;
  &lt;/a&gt;
  Segue a  prova do supracitado (☞ﾟヮﾟ)☞ 
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inteiroDeValorNumericoZero&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;floatDeValorNumericoZero&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inteiroGrandeComValorNumericoZero&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;bigint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;BigInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nulo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;indefinido&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;naoNumero&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;NaN&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//Sim, o tipo de NaN é "numero" ¯\_(ツ)_/¯&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cadeiaDeCaracteresVazia&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;valoresInexatos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;inteiroDeValorNumericoZero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;floatDeValorNumericoZero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;inteiroGrandeComValorNumericoZero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;nulo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;indefinido&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;naoNumero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;cadeiaDeCaracteresVazia&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;valoresInexatos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;valor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;valor&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Verídico&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Errôneo/Falseáveis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#o-que-%C3%A9-truthy-ou-ver%C3%ADdico"&gt;
  &lt;/a&gt;
   O que é "Truthy" ou Verídico? 
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Truthy&lt;/strong&gt; é um &lt;strong&gt;"&lt;/strong&gt;&lt;em&gt;&lt;strong&gt;pseudo tipo&lt;/strong&gt;&lt;/em&gt;&lt;strong&gt;"  *&lt;em&gt;logicamente equivalente ao **Valor Primitivo  *&lt;/em&gt;&lt;/strong&gt;true*&lt;em&gt; para o &lt;/em&gt;&lt;em&gt;JavaSript.&lt;/em&gt;*&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#os-valores-que-seriam-aceitos-como-true-seriam"&gt;
  &lt;/a&gt;
  Os valores que seriam aceitos como &lt;strong&gt;true&lt;/strong&gt; seriam: 
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;'0'&lt;/strong&gt; ou &lt;strong&gt;"0"&lt;/strong&gt; - (Uma &lt;strong&gt;cadeia de caracteres&lt;/strong&gt; com o Valor numérico &lt;strong&gt;zero&lt;/strong&gt; dentro dela).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;'false'&lt;/strong&gt; ou &lt;strong&gt;"false"&lt;/strong&gt; (...) - (Uma cadeira de caracteres com a palavra &lt;em&gt;&lt;strong&gt;"false"&lt;/strong&gt;).&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;[]&lt;/strong&gt;_ - &lt;em&gt;(Um** vetor &lt;strong&gt;(&lt;/strong&gt;"**_array&lt;/em&gt;&lt;strong&gt;" **vazio), isto é,&lt;/strong&gt; **sem elementos presentes dentro dele)&lt;/li&gt;
&lt;li&gt;{} - (Um &lt;strong&gt;objeto&lt;/strong&gt; sem nenhuma propriedade.)&lt;/li&gt;
&lt;li&gt;()=&amp;gt;{} - (Uma definição de função anônima ou não.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#segue-a-prova-do-supracitado-%E2%98%9E%EF%BE%9F%E3%83%AE%EF%BE%9F%E2%98%9E"&gt;
  &lt;/a&gt;
  Segue a  prova do supracitado (☞ﾟヮﾟ)☞ 
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cadeiaDeCaracteresComZero&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cadeiaDeCarcteresComAPalavraFalse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;false&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vetorVazio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;funcaoNomeada&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//vazia&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;valoresVeridicos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;cadeiaDeCaracteresComZero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;cadeiaDeCarcteresComAPalavraFalse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;vetorVazio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;funcaoNomeada&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;valoresVeridicos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;valor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;valor&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Verídico&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Errôneo/Falseado&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>Angular: Slice and *ngIf for Conditional Ellipsis / Tooltip on Data</title>
      <author>Ria Pacheco</author>
      <pubDate>Wed, 17 Nov 2021 21:02:15 +0000</pubDate>
      <link>https://dev.to/riapacheco/angular-slice-and-ngif-for-conditional-ellipsis-tooltip-on-data-2d4h</link>
      <guid>https://dev.to/riapacheco/angular-slice-and-ngif-for-conditional-ellipsis-tooltip-on-data-2d4h</guid>
      <description>&lt;h3&gt;
  &lt;a href="#problem-conditional-ellipsis-without-css"&gt;
  &lt;/a&gt;
  Problem: Conditional Ellipsis without CSS
&lt;/h3&gt;

&lt;p&gt;I want to add an ellipsis to data that's brought in from a service without having to use CSS' &lt;code&gt;text-overflow: ellipsis&lt;/code&gt; feature, since it's unreliable and could break overtime if not monitored during refactoring.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#using-raw-slice-pipe-endraw-"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;Slice Pipe&lt;/code&gt;
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#determine-character-max-overflow-limit"&gt;
  &lt;/a&gt;
  Determine character max overflow limit
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Determine max overflow by number of characters (instead of max-width)&lt;/li&gt;
&lt;li&gt;Example: max overflow characters 20 (inclusive, aka 20 or more)&lt;/li&gt;
&lt;li&gt;I use &lt;code&gt;slice&lt;/code&gt; pipe where you add the &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; of the slice to the interpolated string
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!--Template--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;*ngFor=&lt;/span&gt;&lt;span class="s"&gt;"let item of items"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  {{ item.name | slice: 0 : 20 }}
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#add-ellipsis-as-conditional-raw-span-endraw-"&gt;
  &lt;/a&gt;
  Add ellipsis as conditional &lt;code&gt;span&lt;/code&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Conditional span is based on data's &lt;code&gt;length&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!--Template--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;*ngFor=&lt;/span&gt;&lt;span class="s"&gt;"let item of items"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  {{ item.name | slice:0:20 }}&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"item.name.length &amp;gt;= 20"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#if-problems-with-string-vs-object"&gt;
  &lt;/a&gt;
  If Problems with String vs. Object
&lt;/h4&gt;

&lt;p&gt;Sometimes typescript or certain db packages make this harder by making it so &lt;code&gt;strings&lt;/code&gt; are but &lt;em&gt;aren't&lt;/em&gt; considered strings. Solve this programmatically, by saving a new &lt;code&gt;boolean&lt;/code&gt; value, when the data is either stored or updated:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Component&lt;/span&gt;
&lt;span class="nx"&gt;onSave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Iitem&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;maxChar&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thus, can then apply in template as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!--Template--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"item.maxChar == true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#show-tooltip-conditionally"&gt;
  &lt;/a&gt;
  Show Tooltip Conditionally
&lt;/h1&gt;

&lt;p&gt;I want the tooltip to appear when this &lt;code&gt;maxChar&lt;/code&gt; is true; but to remove itself from the DOM when no longer hovering over the item.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!--Template--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt;
  &lt;span class="na"&gt;*ngFor=&lt;/span&gt;&lt;span class="s"&gt;"let item of items"&lt;/span&gt;
  &lt;span class="na"&gt;(mouseover)=&lt;/span&gt;&lt;span class="s"&gt;"(item.name.length &amp;gt;= 20) ? onHover($event, item.name) : ''"&lt;/span&gt;
  &lt;span class="na"&gt;(mouseout)=&lt;/span&gt;&lt;span class="s"&gt;"showsTooltip ? (showsTooltip = !showsTooltip) : ''"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  {{ item.name | slice:0:20 }}&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"item.name.length &amp;gt;= 20"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!--Tooltip--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
  &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"showsTooltip"&lt;/span&gt;
  &lt;span class="na"&gt;[style.top]=&lt;/span&gt;&lt;span class="s"&gt;"tooltipTopY"&lt;/span&gt;
  &lt;span class="na"&gt;[style.left]=&lt;/span&gt;&lt;span class="s"&gt;"tooltipLeftX"&lt;/span&gt;
  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tooltip"&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  {{ tooltipText }}
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#component"&gt;
  &lt;/a&gt;
  Component
&lt;/h3&gt;

&lt;p&gt;Catches coordinates of event and binds them&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SomeComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Properties&lt;/span&gt;
  &lt;span class="nx"&gt;showsTooltip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// show or not&lt;/span&gt;
  &lt;span class="nx"&gt;tooltipText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// text to be binded&lt;/span&gt;
  &lt;span class="nx"&gt;tooltipTopY&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;tooltipLeftX&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Methods&lt;/span&gt;
  &lt;span class="nx"&gt;onHover&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;itemName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tooltipText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;itemName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showsTooltip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tooltipTopY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tooltipLeftX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientX&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>angular</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Abstract Syntax Trees: They're Actually Used Everywhere -- But What Are They?</title>
      <author>aruna-x</author>
      <pubDate>Wed, 17 Nov 2021 21:02:00 +0000</pubDate>
      <link>https://dev.to/aruna/abstract-syntax-trees-theyre-used-everywhere-but-what-are-they-jh6</link>
      <guid>https://dev.to/aruna/abstract-syntax-trees-theyre-used-everywhere-but-what-are-they-jh6</guid>
      <description>&lt;p&gt;Isn't it wonderful how &lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt; grays out obsolete lines of code? &lt;em&gt;Oops, my return statement is on line 3. Line 4 won't run...&lt;/em&gt; But I haven't called the function yet. So how in the world does VS Code know which lines of code won't be used in the future, when the code finally does run?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tApNn2G6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n37rbnd7xpc7iyf3kcxx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tApNn2G6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n37rbnd7xpc7iyf3kcxx.png" alt="Code snippet of a function in VS Code with line 4 grayed out" width="556" height="225"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we have a conditional statement, VS Code accurately evaluates the potential for us to hit the code outside of it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--duocNN_X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nmqkgsugr8stdumtd9v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--duocNN_X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nmqkgsugr8stdumtd9v.png" alt="Code snippet showing that VS Code knows that an if statement with an unknown conditional might not run" width="592" height="314"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bool&lt;/code&gt; could turn out to be false after all. But if we change the condition to &lt;code&gt;true&lt;/code&gt; VS Code knows we will &lt;em&gt;always&lt;/em&gt; run that block and (if there is an inevitable return inside) never reach the final line:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TdGq6zDU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czrc9sgdf3ibbmgz9pxl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TdGq6zDU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czrc9sgdf3ibbmgz9pxl.png" alt="Code snippet showing that VS Code knows that an if statement with a true conditional will always run" width="586" height="315"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's almost as if VS Code has the ability to understand the &lt;em&gt;semantics&lt;/em&gt; of code. But under the hood VS Code uses &lt;strong&gt;code&lt;/strong&gt; to do this! How?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enter-abstract-syntax-trees-asts"&gt;
  &lt;/a&gt;
  Enter: Abstract Syntax Trees (ASTs)
&lt;/h2&gt;

&lt;p&gt;An AST is a data structure that encodes abstract information about a piece of code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RV5yTobJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99b0l2z3twokjltcegwa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RV5yTobJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99b0l2z3twokjltcegwa.png" alt="an AST object of the above code" width="880" height="485"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This one is specifically for the above sample code declaring &lt;code&gt;function foo(bool)&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;An AST is a "tree", which is a kind of graph. And a graph is a very useful type of data structure, ubiquitous in software engineering. In order to understand ASTs we have to understand graphs. &lt;em&gt;(You can also skip ahead to learn more about &lt;a href="#ASTs"&gt;ASTs&lt;/a&gt; or look at these tools to &lt;a href="#tools"&gt;make and use an AST&lt;/a&gt; yourself.)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-graphs-work"&gt;
  &lt;/a&gt;
  How Do Graphs Work?
&lt;/h2&gt;

&lt;p&gt;Graphs consist of "nodes" and "edges", and can be represented by (often nested) objects or arrays. A graph can mix objects and arrays as well, nesting one kind within the other to whatever degree of complexity.&lt;/p&gt;

&lt;p&gt;Each node and edge can contain information. You can travel from one node to another via the edge between them. Edges have direction as well. Here's a simple graph connecting node A to node B:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JJochMQz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmek3jl2ome6q4u6di4w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JJochMQz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmek3jl2ome6q4u6di4w.png" alt="Simple graph showing A to B" width="734" height="274"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At a very basic level, if you were to write this in Javascript, it could look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ ["A", ["B"] ], [ "B", [] ] ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{ 
   A: { value: data_set1, children: ["B"] }, 
   B: { value: data_set2, children: [] }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can flip the direction&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1bJ9WlaY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8h2ybtaok1zyly9arp8g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1bJ9WlaY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8h2ybtaok1zyly9arp8g.png" alt="Simple graph showing B to A" width="724" height="256"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Resulting in code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ ["A", [] ], [ "B", ["A"] ] ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{ 
   A: { value: data_set1, children: [] }, 
   B: { value: data_set2, children: ["A"] }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you can make the edge bidirectional, usually represented with a plain line with no arrows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VCVfI_0J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyfw9nvrc10ygznonowq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VCVfI_0J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyfw9nvrc10ygznonowq.png" alt="Simple graph showing a bidirectional relationship between A and B" width="718" height="230"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With code that does something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ ["A", ["B"] ], [ "B", ["A"] ] ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{ 
   A: { value: data_set1, children: ["B"] }, 
   B: { value: data_set2, children: ["A"] }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are simple examples, and in practice graphs can encode large amounts of data. Google displays search results with the help of a &lt;a href="https://en.wikipedia.org/wiki/PageRank"&gt;page rank&lt;/a&gt; graph, for example. This is a simplified representation of one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aaWSE34i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9hqfj7k3f4cw6dt6x3u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aaWSE34i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9hqfj7k3f4cw6dt6x3u.png" alt="Simplified rank graph example" width="880" height="710"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Graphs can also have certain constraints. We can say: "The graph will start with exactly one node and every node except the first will have exactly one parent. Nodes can have multiple children though."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7FK5rZZi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4gzvq8vsglgz9d5yw0q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7FK5rZZi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4gzvq8vsglgz9d5yw0q.png" alt="image of a tree data structure" width="880" height="1003"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is an example of one kind of tree. In general, a tree branches out. Every node after the first (root node) has exactly one parent. Trees are hierarchical and do not contain loops. &lt;em&gt;(Graphs can have loops, and do not necessarily have a root node.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But for now we'll focus on trees. Because when we build an AST, we take abstract syntactical data from code and encode it into a tree.&lt;br&gt;
&lt;span id="ASTs"&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#ast-design-standards-amp-traversal-functions"&gt;
  &lt;/a&gt;
  AST Design Standards &amp;amp; Traversal Functions
&lt;/h2&gt;

&lt;p&gt;Because ASTs are often used in the process of compiling code (which happens &lt;em&gt;all&lt;/em&gt; the time - every time you try to run &lt;em&gt;any&lt;/em&gt; code), AST design standards are fairly robust. Compilers (and interpreters) essentially take the code we write (in Javascript, Python, Ruby, or C++) and turn it into machine-language instructions that a computer's CPU can run.&lt;/p&gt;

&lt;p&gt;AST design standards include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;variables (and their declaration locations in the source code) must be preserved&lt;/li&gt;
&lt;li&gt;the order in which statements get executed is well defined and preserved&lt;/li&gt;
&lt;li&gt;in the case of binary operations, left and right positioning is preserved&lt;/li&gt;
&lt;li&gt;identifiers and their values are stored&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It should be possible to &lt;em&gt;unparse&lt;/em&gt; an AST object into something very similar to its original code, using a code generator. And the resulting code should definitely &lt;em&gt;function&lt;/em&gt; exactly the same as the original code.&lt;/p&gt;

&lt;p&gt;For example, using an AST like this ...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BMHJLBzd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqij99vqzf9ww5193cks.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BMHJLBzd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqij99vqzf9ww5193cks.png" alt="representation of generalized AST as graph showing the kinds of information each node and edge contain" width="880" height="993"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We could rebuild code that would look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function euclid(a,b) {
   while (b !== 0) {
      if (a &amp;gt; b) { a = a - b; } 
      else { b = b - a; }
   } 
   return a;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we can take a piece of code, turn it into an AST, and eventually turn that back into code. But wait ... there's more: The function we use to step through the AST (called an AST traversal function) is intelligent enough to make sense of the semantic encodings and help us do useful things with that information. &lt;/p&gt;

&lt;p&gt;We can use an AST traversal function to walk along the structure to discover "dead branches" (pieces of code that will never run), syntax errors (e.g. missing curly braces), or untyped variables (as in TypeScript).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tree-shaking-amp-more"&gt;
  &lt;/a&gt;
  Tree Shaking &amp;amp; More
&lt;/h2&gt;

&lt;p&gt;Tree shaking refers to dead-code elimination in Javascript. In order to tree shake, we would combine the use of an AST and an AST traversal function to find which "branches" of code are "dead". This is how VS Code grays out unused lines of code. Tree shaking then eliminates those unused lines of code, for a cleaner, leaner code base.&lt;/p&gt;

&lt;p&gt;When a code base is sufficiently large, dead-code elimination is necessary. Dead ends become dead weight, potentially causing worse performance if the product is shipped and bloated code in much need of pruning. &lt;em&gt;(Amusingly, that's not a pun. That's what they call it! I came across many articles on tree pruning in writing this post though.)&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;There's incentive on both ends, as &lt;em&gt;wet&lt;/em&gt; code is more confusing for developers as well.&lt;/p&gt;

&lt;p&gt;The same traversal function can find and flag errors (e.g. missing close bracket, or missing function name) in code editors. It can also, interestingly, help us inject our own code into a given chunk of code according to preset rules if we wanted. (More about this in the follow up below.)&lt;br&gt;
&lt;span id="tools"&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tools-to-make-and-use-an-ast"&gt;
  &lt;/a&gt;
  Tools To Make And Use An AST
&lt;/h2&gt;

&lt;p&gt;Create an AST: &lt;a href="https://esprima.org/"&gt;Esprima&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Traverse that AST and replace or inject code: &lt;a href="https://github.com/estools/estraverse"&gt;Extraverse&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unparse the modified AST back into Javascript: &lt;a href="https://github.com/estools/escodegen"&gt;Escodegen&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#asts-vs-cpts"&gt;
  &lt;/a&gt;
  ASTs vs CPTs
&lt;/h2&gt;

&lt;p&gt;I mentioned earlier that ASTs are used in the process of compiling or interpreting. There is an alternative: Concrete Parse Tree. Unlike ASTs, CPTs include much more granular (potentially unnecessary) information. ASTs can omit some syntactic information like grouping parentheses, because of the way in which the structure of an AST already encodes that information. &lt;/p&gt;

&lt;p&gt;CSTs are much bigger than ASTs. But the tradeoff is that they can aid in more &lt;em&gt;efficient&lt;/em&gt; compiling. In practice, both are used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-up"&gt;
  &lt;/a&gt;
  Follow Up
&lt;/h2&gt;

&lt;p&gt;My fascination with ASTs was inspired by an app I'm working on: a Big O (time complexity) calculator.&lt;/p&gt;

&lt;p&gt;In my research on Big O approximation, I found that most tools calculate the &lt;strong&gt;amount of time&lt;/strong&gt; a machine takes to run a function on different sized data sets. They use the resulting amounts of time to determine whether the rate of growth of time is sublinear, linear, exponential, etc.&lt;/p&gt;

&lt;p&gt;I hope to create a tool that will count the &lt;strong&gt;number of actions&lt;/strong&gt; taken (rather than the amount of time for a specific machine), so that for any snippet of code I can point to the most costly lines and indicate how many times they ran. This can help students learn Big O with a more concrete understanding of what's happening with their code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-halting-problem"&gt;
  &lt;/a&gt;
  The Halting Problem
&lt;/h3&gt;

&lt;p&gt;Slightly outside the scope of this article, but cool enough to include: In 1936, Alan Turing (pictured at age 16, below) proved that it is impossible to write code that can examine another piece of code and its input, and tell whether or not it will ever terminate. This is called the &lt;a href="https://en.wikipedia.org/wiki/Halting_problem"&gt;halting problem&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uf47Y9jO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ve3gu6l2mnpib5gsobex.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uf47Y9jO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ve3gu6l2mnpib5gsobex.png" alt="Alan Turing, age 16" width="880" height="753"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this reason, code entered into the Big O calculator can run too long in an infinite loop, and lock up a user's computer. I plan to bake in a fail-safe for that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#well-see-whats-possible"&gt;
  &lt;/a&gt;
  We'll See What's Possible
&lt;/h3&gt;

&lt;p&gt;I'd eventually like to expand the project into a more comprehensive teaching tool. For now, I've scoped the project to the calculator to see if it's viable.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>vscode</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title> 🇧🇷 Guia de Estilos para TypeScript 🎨</title>
      <author>Luís Von Muller</author>
      <pubDate>Wed, 17 Nov 2021 20:58:22 +0000</pubDate>
      <link>https://dev.to/luisvonmuller/guia-de-estilos-para-typescript-2ahb</link>
      <guid>https://dev.to/luisvonmuller/guia-de-estilos-para-typescript-2ahb</guid>
      <description>&lt;p&gt;🔥 Este é um &lt;strong&gt;Guia não oficial&lt;/strong&gt; e você pode opinar através do repositório de GitHub para juntos chegarmos a melhor definição do Ideal! &lt;strong&gt;Vamos colaborar? 💪&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#navega%C3%A7%C3%A3o-por-t%C3%B3pico-facilitada"&gt;
  &lt;/a&gt;
  👉 Navegação por tópico facilitada!
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="//./#variaveis-e-funcoes"&gt;⭐️ Variáveis &amp;amp; Funções&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//./#class"&gt;📦 Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//./#interfaces"&gt;🔌 Interfaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//./#tipos"&gt;🌟 Tipos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//./#namespaces"&gt;😳 Namespaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//./#enum"&gt;🔢 Enum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="//./#null-vs-undefined"&gt;📭 null vs  😱 undefined&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="//./#formatacao"&gt;📑 Formatação&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//./#sobre-aspas..."&gt;🤔 Aspas simples vs Aspas Duplas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="//./#ponto-and-virgula"&gt;⚙️ Uso de ponto e vírgula ao final de linhas &lt;strong&gt;" ; "&lt;/strong&gt;&lt;/a&gt;****&lt;/li&gt;
&lt;li&gt;&lt;a href="//./#sugestao-para-boa-nomeacao-de-arquivos."&gt;📂 Uma sugestão para uma boa nomeação de Arquivos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//./#tipo-ou-interface"&gt;🤨 Tipo vs Interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//./#anotacao-do-tipo-array"&gt;👯‍♀️ Anotação de Tipos para Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//./#comparadores-e"&gt;⚠️ Comparadores, "==" vs "==="&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#%EF%B8%8F%E2%80%8B-vari%C3%A1veis-e-fun%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  ⭐️​ Variáveis e Funções:
&lt;/h2&gt;

&lt;p&gt;Use &lt;em&gt;&lt;strong&gt;camelCase&lt;/strong&gt;&lt;/em&gt; para nomear variáveis e funções&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#m%C3%A1-nomenclatura"&gt;
  &lt;/a&gt;
   Má nomenclatura 🚫
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;FulanoVariavel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Aqui está errado.. ( ఠ ͟ʖ ఠ )&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CiclanoFuncao&lt;/span&gt;&lt;span class="p"&gt;(){}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#boa-nomenclatura-%E2%80%8B"&gt;
  &lt;/a&gt;
  Boa nomenclatura ✅​ 
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fulanoVariavel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Aqui está daora! (✿◠‿◠)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ciclanoFuncao&lt;/span&gt;&lt;span class="p"&gt;(){}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#class"&gt;
  &lt;/a&gt;
  📦 Class
&lt;/h2&gt;

&lt;p&gt;Use &lt;em&gt;&lt;strong&gt;PascalCase&lt;/strong&gt;&lt;/em&gt; para nomear suas classes! (Ou use programação funcional 👀)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#m%C3%A1-nomenclatura"&gt;
  &lt;/a&gt;
   Má nomenclatura 🚫
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;fulano&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#boa-nomenclatura-%E2%80%8B"&gt;
  &lt;/a&gt;
  Boa nomenclatura ✅​ 
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Fulano&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use &lt;em&gt;&lt;strong&gt;camelCase&lt;/strong&gt;&lt;/em&gt; para as propriedades e métodos de suas classes! 🔥&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#m%C3%A1-nomenclatura"&gt;
  &lt;/a&gt;
  Má nomenclatura 🚫
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;fulano&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;DeTal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nx"&gt;Ciclano&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#boa-nomenclatura-%E2%80%8B"&gt;
  &lt;/a&gt;
  Boa nomenclatura ✅​ 
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Fulano&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;deTal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nx"&gt;ciclano&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#%E2%80%8B-interfaces"&gt;
  &lt;/a&gt;
  🔌​ Interfaces:
&lt;/h2&gt;

&lt;p&gt;Use &lt;em&gt;&lt;strong&gt;PascalCase&lt;/strong&gt;&lt;/em&gt; para nomear a Interface ⚙️&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;em&gt;&lt;strong&gt;camelCase&lt;/strong&gt;&lt;/em&gt; para nomear seus membros 🥰&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Não use o Prefixo "I", exemplo: IfuncaoFulano... 😡 &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#m%C3%A1-nomenclatura"&gt;
  &lt;/a&gt;
   Má nomenclatura 🚫
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IFulano&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nl"&gt;DeTal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#boa-nomenclatura-%E2%80%8B"&gt;
  &lt;/a&gt;
  Boa nomenclatura ✅​ 
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Fulano&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nl"&gt;deTal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tipos"&gt;
  &lt;/a&gt;
  🌟 Tipos 
&lt;/h2&gt;

&lt;p&gt;Use &lt;em&gt;&lt;strong&gt;PascalCase&lt;/strong&gt;&lt;/em&gt; para nomear o seu Tipo ⚙️&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;em&gt;&lt;strong&gt;camelCase&lt;/strong&gt;&lt;/em&gt; para nomear as propriedades do seu tipo! 🥰&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#m%C3%A1-nomenclatura"&gt;
  &lt;/a&gt;
   Má nomenclatura 🚫
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;fulano&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;DeTal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#boa-nomenclatura-%E2%80%8B"&gt;
  &lt;/a&gt;
  Boa nomenclatura ✅​ 
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Fulano&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;deTal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#namespaces"&gt;
  &lt;/a&gt;
  😳 Namespaces 
&lt;/h2&gt;

&lt;p&gt;Use*&lt;em&gt;&lt;code&gt;PascalCase&lt;/code&gt;&lt;/em&gt;*&lt;code&gt;para nomear os "Namespaces" - ⭐️ Padrão do time do TS.&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#m%C3%A1-nomenclatura"&gt;
  &lt;/a&gt;
  Má nomenclatura 🚫
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;fulanoDeTal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#boa-nomenclatura-%E2%80%8B"&gt;
  &lt;/a&gt;
  Boa nomenclatura ✅​ 
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;FulanoDeTal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#enum"&gt;
  &lt;/a&gt;
  🔢 Enum 
&lt;/h2&gt;

&lt;p&gt;Use_&lt;strong&gt;&lt;code&gt;PascalCase&lt;/code&gt;&lt;/strong&gt;_&lt;code&gt;para nomear os Enums.&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;em&gt;&lt;strong&gt;&lt;code&gt;PascalCase&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt;&lt;code&gt;para nomear seus subtipos/valores.&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#m%C3%A1-nomenclatura"&gt;
  &lt;/a&gt;
  Má nomenclatura 🚫
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;enum&lt;/span&gt; &lt;span class="nx"&gt;jogodoBicho&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;avestruz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;borboleta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;cachorro&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Não há endosso do Jogo do Bicho. Apenas é algo contextual que todo Brasileiro entenderia.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#boa-nomenclatura-%E2%80%8B"&gt;
  &lt;/a&gt;
  Boa nomenclatura ✅​ 
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;enum&lt;/span&gt; &lt;span class="nx"&gt;JogoDoBicho&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Avestruz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;Borboleta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;Cachorro&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Não há endosso do Jogo do Bicho. Apenas é algo contextual que todo Brasileiro entenderia.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#null-vs-undefined"&gt;
  &lt;/a&gt;
  😅 Null vs Undefined 👀
&lt;/h2&gt;

&lt;p&gt;Tente não usar nenhum deles para indisponibilidade explícita! ⭐️&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#mal-caso-de-uso"&gt;
  &lt;/a&gt;
  Mal caso de uso 🚫
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pontos&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#bom-caso-de-uso-%E2%80%8B"&gt;
  &lt;/a&gt;
  Bom caso de uso  ✅​ 
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pontos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;777&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;//  &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Em suma: Precisa informar que uma propriedade é pode ser "indefinida"? Use o operador "?" antecedendo o seu tipo! 🥰&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#retorno-de-fun%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  👉 Retorno de funções? 🤔
&lt;/h3&gt;

&lt;p&gt;Mal caso de uso 🚫&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bom caso de uso  ✅​ &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Por quê? Sugiro você consultar a página Sobre False, True, Truthy &amp;amp; Falsy. 🥰&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E2%80%8B-callbacks"&gt;
  &lt;/a&gt;
  🤨​ Callbacks?
&lt;/h3&gt;

&lt;p&gt;Use &lt;em&gt;&lt;strong&gt;null&lt;/strong&gt;&lt;/em&gt; quando for parte da API ou de sua convenção usar. &lt;/p&gt;

&lt;p&gt;É quase em um consenso em Node.js, por exemplo: &lt;strong&gt;&lt;code&gt;error&lt;/code&gt;&lt;/strong&gt; é &lt;strong&gt;&lt;code&gt;null&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;em chamadas do&lt;/code&gt; &lt;em&gt;&lt;strong&gt;NodeBack.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Mal caso de uso 🚫&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;callbackDeAlgo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bom caso de uso  ✅​ &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;callbackDeAlgo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#e-como-verificar-isso-a%C3%AD"&gt;
  &lt;/a&gt;
  E como verificar isso aí? 😅
&lt;/h3&gt;

&lt;p&gt;Cheque por  "Truthy" em objetos sendo &lt;strong&gt;null&lt;/strong&gt; ou &lt;strong&gt;undefined&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Mal caso de uso 🚫&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// e se for undefined? &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bom caso de uso  ✅​ &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// é Válido tanto para undefined quanto para o null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#um-exemplo-um-pouco-mais-completo-sobre-verifica%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  👉 Um exemplo um pouco mais completo sobre verificação 🔥
&lt;/h3&gt;

&lt;p&gt;Use "==" null ou "!=" null. Não use "===" ou "!==" para checar por null ou undefined quando querendo verificar tipos primitivos porque funciona apenas nos tipos primitivos supracitados e não para valores "Falseáveis", como por exemplo: 0, false, etc. &lt;/p&gt;

&lt;p&gt;Mal caso de uso 🚫&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Não garante que seja apenas nullo. Pode ser um valor Falseável.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bom caso de uso  ✅​ &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Garante que é um valor de tipo primitivo (ou seja, null ou undefined mas não falsy).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#formata%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  📑 Formatação
&lt;/h2&gt;

&lt;p&gt;O Compilador do &lt;em&gt;&lt;strong&gt;TypeScript&lt;/strong&gt;&lt;/em&gt; já fornece um bom serviço de formatação estrutural, o que já é bom o suficiente para diminuir o esforço mental do desenvolvedor (ou do time). Todavia, você também pode usar o &lt;strong&gt;tsfmt&lt;/strong&gt; no terminal (linha de comando para formatar seu código) - e também está disponível como plugin para várias &lt;strong&gt;IDES (vscode, etc).&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;👉 Só um exemplo que eu acho pertinente, ou melhor, uma boa prática:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fulano&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ciclano&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No caso, usamos um espaço depois da definição do tipo... &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
let variavel:(espaço)tipo(espaço)=(espaço)valor(ponto e virgula)
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#sobre-aspas"&gt;
  &lt;/a&gt;
  💬 Sobre Aspas...
&lt;/h2&gt;

&lt;p&gt;Prefira usar aspas simples (single quotes) ao invés de aspas duplas.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Times grandes que usam JS/TS o fazem. É uma convenção quasae que de mercado, também é o sugerido pelo time do "Prettier".
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;nomeDoSujeito&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Luís Von Müller&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Todavia, muita vezes em inglês precisamos usar o a single quote para conjugar um verbo: "I'm"&lt;/p&gt;

&lt;p&gt;Se a aspas simples não lhe cabe. Use então "`" &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Faça o uso do string template do JS ao invés de concatenar variáveis strings através var + "..."  + var2.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;typescript&lt;br&gt;
let nomeDoSujeito: string = 'Luís Von Müller';&lt;br&gt;
console.log(&lt;/code&gt;Quem escreveu? ${nomeDoSujeito}&lt;code&gt;)&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Sobre outras coisas como usar "tabs" ou espaço. O sugerido para JS é 2 espaços (e muitas companias como Facebook, Airbnb, google seguem esse padrão. Mas o time do TS usa 4 e o do VScode também 😅. Isso é variável e de gosto muito mais pessoal ou convenção própria e do teu time 🥰&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Mas eu uso tabs configuradas como 4 espaços)&lt;/em&gt; 🤗&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E2%80%8B-ponto-amp-v%C3%ADrgula"&gt;
  &lt;/a&gt;
  ⚙️​ Ponto &amp;amp; Vírgula;
&lt;/h2&gt;

&lt;p&gt;Use o ponto e vírgula, por quê? &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pontos e vírgulas explícitos ajudam os identadores (tsfmt/prettier) a identificar e "estruturar" seu código. &lt;/li&gt;
&lt;li&gt;A falta de ponto e vírgula pode ser incômodo para novos desenvolvedores em TS. Já que a maioria das linguagens o implementa. (Houve um debate sobre como isso pode ser "incomodo" para novos desenvolvedores e outros. &lt;a href="https://github.com/tc39/ecma262/pull/1062"&gt;https://github.com/tc39/ecma262/pull/1062&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Empresas grandes usam em suas implementações, ex: Google/Angular - Facebook/React - Microsoft/VScode...&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%97%82-sugest%C3%A3o-para-boa-nomea%C3%A7%C3%A3o-de-arquivos"&gt;
  &lt;/a&gt;
  🗂 Sugestão para boa nomeação de arquivos.
&lt;/h2&gt;

&lt;p&gt;Essa aqui é uma baita de uma discussão, depende muito do que ambiente você está e se você está seguindo o padrão de nomeação de um framework, ex: React para Componentes. Mas no geral o que a maioria dos times usa é o seguinte: &lt;/p&gt;

&lt;p&gt;Use &lt;em&gt;&lt;strong&gt;camelCase para nomear seus arquivos, exemplo:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;utils.ts&lt;/li&gt;
&lt;li&gt;helpersDaora.ts&lt;/li&gt;
&lt;li&gt;mapeamentoEndPointsDaApi.ts&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#%E2%80%8B-tipo-ou-interface"&gt;
  &lt;/a&gt;
  🤨​ Tipo ou Interface?
&lt;/h2&gt;

&lt;p&gt;Tipos devem ser usados para definir, adivinha? Tipos. Ou seja, se você tem uma função, ela retorna um valor. E esse valor possui um tipo. Mas essa função, também recebe algo. E esse algo, também são valores, ou seja, também podem ser tipos. Mas a "meta" ideia é que interface forneça uma interface 😅.  Eu acho que esse exemplo clarifica...&lt;/p&gt;

&lt;p&gt;Quando usar qual?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tipos: Precisa de União ou Interseção de tipos (e provavelmente você vai preferir Tipos também se quiser implementar alguns tipos de mapeamentos Genéricos de objetos).&lt;/li&gt;
&lt;li&gt;Interfaces: quando você precisa dizer que algo "implements" ou "extends", como por exemplo uma classe, para receber argumentos em uma função, ou até mesmo para quando você tá querendo criar alguma função extremamente composta bem maneira 👏. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;😅 Ou do jeito que você se sentir mais confortável e seguro para a implementação que está fazendo! 👀&lt;/p&gt;

&lt;p&gt;Aqui em baixo, eu poderia definir a função de outra maneira, optei por essa.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`typescript&lt;br&gt;
/** Definimos a interface (ou contrato) de uso da função */&lt;br&gt;
interface DizerOi {&lt;br&gt;
    nome: string;&lt;br&gt;
    sobrenome?: string;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;/**  Definimos que o tipo de retorno da função como uma Array de Strings */&lt;br&gt;
type DisseOi = string[];&lt;/p&gt;

&lt;p&gt;/** Vamos dizer oi 10x! e retornar um array! */&lt;br&gt;
const dizerOi = ({nome, sobrenome}: DizerOi): DisseOi =&amp;gt; {&lt;br&gt;
    return [...Array(10).keys()].map((key) =&amp;gt; {&lt;br&gt;
        return &lt;code&gt;Olá ${nome} ${sobrenome ?? ''}&lt;/code&gt;;&lt;br&gt;
    })&lt;br&gt;
} &lt;/p&gt;

&lt;p&gt;console.log(dizerOi({nome: 'Luís'}));&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#anota%C3%A7%C3%A3o-do-tipo-array"&gt;
  &lt;/a&gt;
  👯‍♀️ Anotação do tipo Array 👯‍♂️
&lt;/h2&gt;

&lt;p&gt;Use tipo[] ao invés de Array&amp;lt;tipo&amp;gt;&lt;/p&gt;

&lt;p&gt;Mal caso de uso 🚫&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;typescript&lt;br&gt;
let variosNumeros: Array&amp;lt;number&amp;gt; = [1,2,3,4,5,6,7];&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#bom-caso-de-uso-%E2%80%8B"&gt;
  &lt;/a&gt;
  Bom caso de uso  ✅​ 
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;typescript&lt;br&gt;
let variosNumeros: number[] = [1,2,3,4,5,6,7];&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E2%80%8B-comparadores-e-"&gt;
  &lt;/a&gt;
  ⚠️​ Comparadores "===" e "=="
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#%E2%80%8B-relaxa-amigo-voc%C3%AA-t%C3%A1-usando-typescript-pode-usar-tranquilamente"&gt;
  &lt;/a&gt;
  😴​  Relaxa amigo! Você tá usando TypeScript. Pode usar "===" tranquilamente!
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#obrigado-por-ler-at%C3%A9-aqui"&gt;
  &lt;/a&gt;
  🥰 Obrigado por ler até aqui!
&lt;/h3&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>typescript</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>Hacktoberfest 2021: through the eyes of a beginner</title>
      <author>aisha</author>
      <pubDate>Wed, 17 Nov 2021 20:41:11 +0000</pubDate>
      <link>https://dev.to/wasp_x/hacktoberfest-2021-through-the-eyes-of-a-beginner-16n4</link>
      <guid>https://dev.to/wasp_x/hacktoberfest-2021-through-the-eyes-of-a-beginner-16n4</guid>
      <description>&lt;p&gt;&lt;strong&gt;Hacktoberfest&lt;/strong&gt; is a month-long celebration of open source software run by DigitalOcean. It's a great opportunity for both beginners and professionals to get started with open-source contribution.&lt;/p&gt;

&lt;p&gt;I feel extremely proud to have successfully completed Hacktoberfest 2021 with a total of 5 merged pull requests on GitHub under my belt. This was also my first time contributing to open-source and it was an amazing experience. In this article, I'll be briefly talking my personal journey throughout Hacktoberfest, how to make your first contribution and also some do's and don'ts for beginners who want to start with open-source.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hacktoberfest-through-the-eyes-of-a-beginner"&gt;
  &lt;/a&gt;
  Hacktoberfest through the eyes of a beginner
&lt;/h2&gt;

&lt;p&gt;Believe me when I say this, I had absolutely no knowledge about open-source or even GitHub before participating in Hacktoberfest. And my techstack consisted of only HTML/CSS and a little bit of JavaScript. I think it's safe to say that it was all a little overwhelming for a complete beginner like me.&lt;br&gt;
But with the guidance of the coordinators and the Hacktoberfest mentors and my peers, I was able to make my first contribution successfully.&lt;br&gt;
The requirements to complete Hacktoberfest is to submit a minimum of 4 valid pull requests in the month of October. If all pull requests get approved by maintainer and are merged into the repository, you will be eligible to receive the swag kit!&lt;br&gt;
I'd fixed 3 syntax errors and re-designed 2 contact forms as part of my contributions this year which is a total of 5 valid pr's and as promised, my limited edition t-shirt is on its way!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dos-and-donts-while-making-your-first-contribution"&gt;
  &lt;/a&gt;
  Do's and Don'ts while making your first contribution
&lt;/h2&gt;

&lt;p&gt;Contributing to open-source can be confusing as a beginner. I personally made a lot of mistakes during Hacktoberfest 2021 even after doing so much research. Guess some things can only be learned from experience haha.&lt;br&gt;
Here is a list of some do's don'ts which might be helpful to future contributors:&lt;/p&gt;

&lt;ul&gt;DO's
&lt;li&gt; Search for good and active repositories. Look for issues to fix or add your own section of code.
&lt;/li&gt;
&lt;li&gt; Always go through the ReadMe file. Maintainers often explain the process of contribution to their repo in their readme.md file.
&lt;/li&gt;
&lt;li&gt; Search for repositories with the &lt;code&gt;Hacktoberfest-accepted&lt;/code&gt; tag. Henceforth, you can look for repositories labelled with &lt;code&gt;good-first-issue&lt;/code&gt; for some beginner-friendly projects to contribute to.
&lt;/li&gt;
&lt;li&gt;** Do not limit yourself to only 4 pull requests, and try to make as many contributions as you can **
&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;DON'TS
&lt;li&gt; Do not make contributions to repositories instructing to add simple one-line commits. These repositories often get rejected.
&lt;/li&gt;
&lt;li&gt; Do not make contributions to repositories accepting basic Data Structure codes. This goes against the rules of Hacktoberfest and your pull request will be marked invalid.
&lt;/li&gt;
&lt;li&gt; **Keep track of your profile on the official Hacktoberfest website. It's good practice to be updated about your progress.** 
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that was all about my experience in contributing to open-source as a complete beginner. Feel free to reach out if you want to discuss more Hactoberfest or open-source, I love to interact with more developers. &lt;br&gt;
You can also find me on &lt;a href="https://twitter.com/wasp_404"&gt;Twitter&lt;/a&gt;&lt;br&gt;
&lt;em&gt;See you at Hacktoberfest next year!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>opensource</category>
      <category>github</category>
    </item>
  </channel>
</rss>
