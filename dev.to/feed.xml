<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Day 30/30 : Responsive Profile Cards Using HTML and CSS</title>
      <author>Somanath Goudar</author>
      <pubDate>Fri, 18 Jun 2021 12:04:05 +0000</pubDate>
      <link>https://dev.to/somanathgoudar/day-30-30-responsive-profile-cards-using-html-and-css-2lbb</link>
      <guid>https://dev.to/somanathgoudar/day-30-30-responsive-profile-cards-using-html-and-css-2lbb</guid>
      <description>&lt;p&gt;Welcome to Day 30 of this &lt;a href="https://dev.to/somanathgoudar/30dayschallenge-30-days-extreme-html-css-challenge-50k1"&gt;Challenge&lt;/a&gt;. This is what I created today. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;➜ Here is the Demo :&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7tYyM-D9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://1.bp.blogspot.com/-6wq3UTzi1DM/YKon_vd7fmI/AAAAAAAAAJU/so2GsR0P1F48jQRzZewTOZcvcSqhxMFhgCLcBGAsYHQ/s16000/p30.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7tYyM-D9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://1.bp.blogspot.com/-6wq3UTzi1DM/YKon_vd7fmI/AAAAAAAAAJU/so2GsR0P1F48jQRzZewTOZcvcSqhxMFhgCLcBGAsYHQ/s16000/p30.gif" alt="Responsive Profile Cards Using HTML and CSS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;➜ Video Tutorial :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/0gyDGZmvTSA"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;strong&gt;➜ Source Code :&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.futurecodersweb.com/2021/06/responsive-profile-cards-using-html-and.html"&gt;https://www.futurecodersweb.com/2021/06/responsive-profile-cards-using-html-and.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;➜ Instagram Post and Reel for Day 30 :&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.instagram.com/future_coderss/"&gt;See Post and Reel&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Hey, If You don't know what is happening here. Don't Worry, I am doing a crazy challenge 😅. Read More about it from the post below.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/somanathgoudar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnNEMcDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--15QGQnyq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/600953/fdee0195-6d25-410d-9d97-c10ffaa4eb7d.jpeg" alt="somanathgoudar image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/somanathgoudar/30dayschallenge-30-days-extreme-html-css-challenge-50k1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;🤯 30DaysChallenge - 30 Days Extreme HTML &amp;amp; CSS CHALLENGE 🤯&lt;/h2&gt;
      &lt;h3&gt;Somanath Goudar ・ May 19 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#frontend&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#30daysofcode&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Support Me :&lt;/strong&gt;&lt;br&gt;
👉 Buy me a Coffee: &lt;a href="https://www.buymeacoffee.com/somanathgoudar"&gt;https://www.buymeacoffee.com/somanathgoudar&lt;/a&gt;&lt;br&gt;
👉 &lt;a href="https://www.instagram.com/somanath_goudar/"&gt;Follow Me on Instagram&lt;/a&gt;&lt;br&gt;
👉 &lt;a href="https://www.instagram.com/future_coderss/"&gt;Follow Future Coders on Instagram&lt;/a&gt;&lt;br&gt;
👉 &lt;a href="https://www.youtube.com/channel/UC_nTrhTr5fnBGjOxnkPUmmA"&gt;Subscribe to My Main Channel&lt;/a&gt;&lt;br&gt;
👉 &lt;a href="https://www.youtube.com/channel/UCzGSyMOf2jPt1MkNBB3SJ3g"&gt;Subscribe to Channel Created for this Challenge&lt;/a&gt;&lt;/p&gt;




</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Tools o improve your unit test  with .NET</title>
      <author>Jéssica Nathany</author>
      <pubDate>Fri, 18 Jun 2021 11:56:06 +0000</pubDate>
      <link>https://dev.to/jessicanathany/tools-o-improve-your-unit-test-with-net-1ekb</link>
      <guid>https://dev.to/jessicanathany/tools-o-improve-your-unit-test-with-net-1ekb</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lNDWi_vA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mpevyiez0pljycytlb2c.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lNDWi_vA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mpevyiez0pljycytlb2c.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article, I will show you some kind tools for you can write unit test better and make you job easier. In this case, I'm using here the Dotnet platform C# language. But first, let's understand some concepts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Test stuntmen&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, what are test stuntmen? They are fake implementation the object real can be simulated the unit real or the object real.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Mock&lt;/em&gt;&lt;br&gt;
Are what we are talking about here: objects pre-programmed with expectations which form a specification of the calls they are expected to receive.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Stubs&lt;/em&gt;&lt;br&gt;
Provide canned answers to calls made during the test, usually not responding at all to anything outside what's programmed in for the test.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fakes&lt;/em&gt;&lt;br&gt;
Are objects actually have working implementations, but usually take some shortcut that makes them not suitable for production (an in-memory database is a good example).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Spies&lt;/em&gt;&lt;br&gt;
Are stubs that also record some information based on how they were called. One form of this might be an email service that records how many messages it was sent.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Dummy&lt;/em&gt;&lt;br&gt;
Are objects are passed around but never actually used. Usually, they are just used to fill parameter lists.&lt;br&gt;
Fake objects actually have working implementations, but usually take some.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;XUnit Code Snippets&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you use these "code snippets", you can save time coding/typing to create unit test code based on xUnit framework. You can use write the command below I will show two options.&lt;/p&gt;

&lt;p&gt;You can to do download the Snippets in your Visual Studio&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WQK7GtYH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2y12nwgjzykatks4ruj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WQK7GtYH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2y12nwgjzykatks4ruj.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use command bellow&lt;br&gt;
1.xtestm [Tab] or&lt;br&gt;
2.fact [Tab]&lt;/p&gt;

&lt;p&gt;Then, this snippet expanded following C# code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ufAcEa8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ara4anftib076ghy0vug.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ufAcEa8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ara4anftib076ghy0vug.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--320sDAUy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/65ldlx5z6reo7fuce9gc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--320sDAUy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/65ldlx5z6reo7fuce9gc.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NBuilder&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Is a library that allows you to rapidly create test data, automatically. Some examples below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZE7PYQez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6twiaf3lwkgxdvdulsj4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZE7PYQez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6twiaf3lwkgxdvdulsj4.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ve6bSSr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6im0vn0anbmsdd93ww36.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ve6bSSr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6im0vn0anbmsdd93ww36.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Its a great idea and facility so much if you need to generate a quantity of data for testing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Faker.NET&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This library is different the NBuilder, because if you want something witch looks like actual names, address, email, telephone, etc you can use Faker.NET &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OJ-5FD3K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkaqpveukl464ev9skkx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OJ-5FD3K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkaqpveukl464ev9skkx.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Coverlet&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Coverlet is a cross platform code coverage framework for .NET, with support for line, branch and method coverage. It works with .NET Framework on Windows and .NET Core on all supported platforms.&lt;/p&gt;

&lt;p&gt;Coverlet documentation reflect the current repository state of the features, not the released ones.&lt;br&gt;
Check the changelog to understand if the documented feature you want to use has been officially released. You can see for more details in &lt;a href="https://github.com/coverlet-coverage/coverlet"&gt;Coverlete Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let´s first install the package coverlete in your test project in image bellow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IekP3Ea---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwmhbh6uas5xj0gvyhqe.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IekP3Ea---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwmhbh6uas5xj0gvyhqe.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can to configure the tests execute, for to generate the XML file format, for code coverage with the command and image bellow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dotnet test --verbosity minimal --collect:"XPlat Code Coverage"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ILOG1tFD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/51srxsv3uk2e7bnmw7qd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ILOG1tFD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/51srxsv3uk2e7bnmw7qd.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The option --collect:”XPlat Code Coverage”  will create the file &lt;strong&gt;coverage.cobertura.xml&lt;/strong&gt; in a folder named identified by a GUID and located in the TestResults directory of the test project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Eeg74b7I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9z704p4ea3p5u27jl4ca.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eeg74b7I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9z704p4ea3p5u27jl4ca.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Install Report Generator the command bellow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dotnet tool install --global dotnet-reportgenerator-globaltool --version 4.8.6&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e6lxR2Bm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/va8d6lyop9e482et05cb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e6lxR2Bm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/va8d6lyop9e482et05cb.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the power shell open the folder where the xml file was generated, and write the command &lt;strong&gt;reportgenerator "-reports:coverage.cobertura.xml" "-targetdir:coveragereport" -reporttypes:Html&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qiM6rNQ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lme77zrv3oqvapsc4j6f.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qiM6rNQ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lme77zrv3oqvapsc4j6f.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2--rP-U7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wp0j1vvxmyperapxwmcm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2--rP-U7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wp0j1vvxmyperapxwmcm.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the report generator created files in which it shows the test coverage of your code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7vW66HZH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ff7y7jdqwia6w8cixyto.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7vW66HZH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ff7y7jdqwia6w8cixyto.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hM2vK5Wf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdskw0lx450yuj7f68t7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hM2vK5Wf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdskw0lx450yuj7f68t7.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DgbO-ELH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/181siwutiyb6mswc8cjz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DgbO-ELH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/181siwutiyb6mswc8cjz.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pAfLtXw0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tuwz8z2kml83k5q4sn5f.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pAfLtXw0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tuwz8z2kml83k5q4sn5f.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Whenever I can, I write an article to document my programs and processes so I don't forget. Here I have put some tools that I use in my personal projects and at work to improve the way I write my unit tests, and observe test coverage. I hope you enjoyed it and it helps you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://martinfowler.com/articles/mocksArentStubs.html"&gt;Martin Fowler - article MocksArentStubs&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.microsoft.com/pt-br/dotnet/core/testing/unit-testing-code-coverage?tabs=windows"&gt;Documentation dotnet core unit testing code&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.jerriepelser.com/blog/creating-test-data-with-nbuilder-and-faker/"&gt;Jerrie Pelser&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/coverlet-coverage/coverlet"&gt;Coverlate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Links&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://github.com/JessicaNathany/unit-test"&gt;Unit Test project in Github&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/moq/moq4/wiki/Quickstart"&gt;Mock4 Quickstart&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/nbuilder/nbuilder"&gt;NBuilder GitHub&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.nuget.org/packages/Faker.Net"&gt;Faker.NET&lt;/a&gt;&lt;br&gt;
&lt;a href="https://nbuilder.wordpress.com/documentation/"&gt;NBuilder documentation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?&amp;lt;br&amp;gt;%0AitemName=jsakamoto.xUnitCodeSnippets"&gt;XUnitCodeSnippets&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.nuget.org/packages/moq/"&gt;Link package Moq&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.nuget.org/packages/coverlet.msbuild/"&gt;coverlet.msbuild&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/coverlet-coverage/coverlet"&gt;coverlet-coverage&lt;/a&gt;&lt;/p&gt;

</description>
      <category>testing</category>
      <category>testdev</category>
      <category>dotnet</category>
      <category>csharp</category>
    </item>
    <item>
      <title>Build a Break Scheduler using Python</title>
      <author>Ayushi Rawat </author>
      <pubDate>Fri, 18 Jun 2021 11:55:42 +0000</pubDate>
      <link>https://dev.to/ayushi7rawat/build-a-break-scheduler-using-python-2bm7</link>
      <guid>https://dev.to/ayushi7rawat/build-a-break-scheduler-using-python-2bm7</guid>
      <description>&lt;p&gt;Hello reader! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Working from home is the new normal&lt;/strong&gt;. and It is a must to ensure a healthy work-life balance. You cannot just grab a laptop and keep working all day long, it will affect your health drastically.&lt;/p&gt;

&lt;p&gt;Schedule your breaks, by far the way out. It works out well for me. In this blog post, we will learn how to build a &lt;strong&gt;breaks Scheduler.&lt;/strong&gt; We will see the implementation in &lt;strong&gt;Python&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ayushi7rawat/Ultimate-Python-Resource-Hub"&gt;Check out the Repository for Ultimate Resource in python&lt;/a&gt;. Drop a star if you find it useful! Got anything to add? Open a PR on the same!&lt;/p&gt;

&lt;p&gt;You can refer to my &lt;strong&gt;YouTube video Tutorial&lt;/strong&gt; to see a working tutorial for better understanding and a step-by-step guide of the same. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/qF8QG7Fr1Vk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-will-be-covered-in-this-blog"&gt;
  &lt;/a&gt;
  What will be covered in this Blog
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;  &lt;span class="n"&gt;Why&lt;/span&gt; &lt;span class="n"&gt;breaks&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;important&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;how&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Utilize&lt;/span&gt; &lt;span class="n"&gt;them&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;
&lt;span class="mf"&gt;2.&lt;/span&gt;  &lt;span class="n"&gt;What&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;webbrowser&lt;/span&gt; &lt;span class="n"&gt;Module&lt;/span&gt;
&lt;span class="mf"&gt;3.&lt;/span&gt;  &lt;span class="n"&gt;How&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;simple&lt;/span&gt; &lt;span class="n"&gt;breaks&lt;/span&gt; &lt;span class="n"&gt;Scheduler&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Let's get started!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-breaks-are-important-amp-how-to-utilize-them"&gt;
  &lt;/a&gt;
  Why breaks are important &amp;amp; how to Utilize them?
&lt;/h2&gt;

&lt;p&gt;Working from home can be a tiring desk job. You need to take care of your mental health. Well you can schedule your breaks to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Take small five minutes break every hour&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Drink water frequently.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stretch your muscles.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prepare Tea/Coffee or any healthy drink and take a small walk for few minutes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you receive a non-work call, again do a little walk and talk.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How do you Utilize and plan your breaks?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#module-used"&gt;
  &lt;/a&gt;
  Module Used:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#webbrowser-module"&gt;
  &lt;/a&gt;
  webbrowser Module:
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://docs.python.org/3/library/webbrowser.html#module-webbrowser"&gt;&lt;code&gt;webbrowser&lt;/code&gt;&lt;/a&gt; module provides a high-level interface to allow displaying Web-based documents to users. Under most circumstances, simply calling the &lt;code&gt;open()&lt;/code&gt; function from this module will do the right thing. The script &lt;strong&gt;webbrowser&lt;/strong&gt; can be used as a command-line interface for the module. It accepts a URL as the argument. &lt;/p&gt;

&lt;p&gt;If you wish to know more about it, you can refer to &lt;a href="https://docs.python.org/3/library/webbrowser.html#module-webbrowser"&gt;&lt;strong&gt;webbrowser Module&lt;/strong&gt; Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that you are familiar with &lt;em&gt;Why breaks are important &amp;amp; how to Utilize them?&lt;/em&gt; and have acquired basic knowledge of &lt;em&gt;webbrowser  module,&lt;/em&gt; we can move forward to &lt;em&gt;the coding section.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#time-to-code"&gt;
  &lt;/a&gt;
  Time to Code!
&lt;/h2&gt;

&lt;p&gt;You can find all the code at my &lt;a href="https://github.com/ayushi7rawat/Youtube-Projects/tree/master/Break%20Scheduler"&gt;GitHub Repository&lt;/a&gt;. &lt;strong&gt;Drop a star&lt;/strong&gt; if you find it useful.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2ux2YBIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vy16075bdremiubv2fry.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2ux2YBIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vy16075bdremiubv2fry.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
In order to access the Python library, we need to import the package into our python script. Use the following command to do so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;webbrowser&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have imported the library using the command &lt;code&gt;import requests&lt;/code&gt;, let's proceed.&lt;/p&gt;

&lt;p&gt;Let's display a welcome message.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Initiating the Break Scheduler!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's ask the user to input the number of breaks he wishes to take or since you are running the script for yourself, you can also hardcode the value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;breaks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'input the number of times you wish to take break today! '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;breaks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#breaks = 2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, you can set the break interval according to your need. I am setting the break interval as every hour for now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;gap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Initially let's set the counter as zero&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's define the URL, you wish to open in the interval&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://www.youtube.com/c/AyushiRawat"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's make use of &lt;code&gt;random&lt;/code&gt; module to display a random message at every break interval. Let's store the messages to be displayed in &lt;code&gt;messages&lt;/code&gt; for the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Time for a break!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Let's take a break!"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our resultant data is stored in &lt;code&gt;res&lt;/code&gt;. We will make use of the &lt;code&gt;text&lt;/code&gt; method to extract our desired weather details and let's display the result.&lt;/p&gt;

&lt;p&gt;Now, let's run a while loop until the counter becomes equal to the number of desired breaks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;breaks&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;#Let's print the break message
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;#opening the browser window.
&lt;/span&gt;    &lt;span class="n"&gt;webbrowser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will introduce &lt;code&gt;sleep&lt;/code&gt; here to schedule the breaks. A random message will be displayed on the screen and the URL will open automatically at every interval.&lt;/p&gt;

&lt;p&gt;At last, let's increase the counter by one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, let's display the termination message when the scripts end.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Terminating the Break Scheduler!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it. That all we have to do to build a simple break scheduler. And with that, it's a wrap!  I hope you found the article useful! Share in the comments below.&lt;/p&gt;

&lt;p&gt;I create content about &lt;strong&gt;Career, Blogging, Programming, and Productivity&lt;/strong&gt;, If this is something that interests you, please share the article with your friends and connections. You can also subscribe to my newsletter to get updates every time I write something!&lt;/p&gt;

&lt;p&gt;Thank you for reading, If you have reached so far, please like the article, It will encourage me to write more such articles. Do share your valuable suggestions, I appreciate your honest feedback!&lt;/p&gt;

&lt;p&gt;I would strongly recommend you to Check out the &lt;a href="https://www.youtube.com/watch?v=jAOkWehMF6E"&gt;YouTube video&lt;/a&gt; of the same and &lt;strong&gt;don't forget to subscribe to my Channel&lt;/strong&gt;. I would love to connect with you at &lt;a href="https://twitter.com/ayushi7rawat"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/ayushi7rawat/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You should definitely check out my other Blogs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/python-39-all-you-need-to-know"&gt;Python 3.9: All You need to know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/github-cli-10-all-you-need-to-know"&gt;GitHub CLI 1.0: All you need to know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/how-to-make-your-own-google-chrome-extension-1"&gt;How to make your own Google Chrome Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/run-javascript-from-python"&gt;Run Javascript from Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/automate-whatsapp-using-python"&gt;Automate WhatsApp using Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/automate-cowin-vaccine-slots-availablity-using-python"&gt;Automate Cowin Vaccine slots Availability using Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/what-is-competitive-programming-or-beginners-guide"&gt;What is Competitive Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/webbrowser.html"&gt;https://docs.python.org/3/library/webbrowser.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See you in my next Blog article, Take care!!&lt;/p&gt;

</description>
      <category>python</category>
      <category>computerscience</category>
      <category>career</category>
      <category>programming</category>
    </item>
    <item>
      <title>🔥🔥backend for login form. Easy to make fully working form</title>
      <author>Techy Programmers</author>
      <pubDate>Fri, 18 Jun 2021 11:47:55 +0000</pubDate>
      <link>https://dev.to/kunaal438/how-to-make-fully-working-login-form-with-database-full-backend-685</link>
      <guid>https://dev.to/kunaal438/how-to-make-fully-working-login-form-with-database-full-backend-685</guid>
      <description>&lt;p&gt;Hello, glad you are here. I am kunaal and today we will see how to make a fully working login and register form with psql databse and nodejs as a backend.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#video-tutorials"&gt;
  &lt;/a&gt;
  Video Tutorials
&lt;/h1&gt;

&lt;p&gt;Watch these tutorial to learn to make this login register form. You can see its demo also.&lt;/p&gt;

&lt;p&gt;Part - 1:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Lcih8lCY19k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Part - 2:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/I3ZNqmPBOPQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I hope you understood everything. If you have any doubt or you find any mistake that I made or you have any suggestion feel free to ask me in comment.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are interested in programming and want to know how I a 15yr old teen do coding make these design. You can follow me on my Instagram. I am also planning to post my game development stuff on Instagram.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/kunaal438/fullstack-login-form"&gt;Source Code&lt;/a&gt;, &lt;a href="https://www.youtube.com/c/TechyProgrammers/"&gt;My youtube Channel&lt;/a&gt;, &lt;a href="https://www.instagram.com/techy_programmers/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Steps to Create A To-Do App With MERN stack</title>
      <author>Chytra K R</author>
      <pubDate>Fri, 18 Jun 2021 10:54:10 +0000</pubDate>
      <link>https://dev.to/chytrakr/steps-to-create-a-to-do-app-with-mern-stack-4912</link>
      <guid>https://dev.to/chytrakr/steps-to-create-a-to-do-app-with-mern-stack-4912</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tools-you-will-need"&gt;
  &lt;/a&gt;
  Tools You Will Need
&lt;/h2&gt;

&lt;p&gt;Make sure Node and NPM are installed on your computer. You can download both at nodejs.org (NPM is included in your Node installation)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tech-stack"&gt;
  &lt;/a&gt;
  Tech Stack
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt;&lt;br&gt;
&lt;a href="https://expressjs.com/en/starter/installing.html"&gt;Express.js&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://www.mongodb.com/cloud"&gt;MongoDB&lt;/a&gt;&lt;br&gt;
&lt;a href="https://reactjs.org/docs/getting-started.html"&gt;React.js&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#dependencies-for-nodejs"&gt;
  &lt;/a&gt;
  Dependencies for Node.js
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/body-parser"&gt;body-parser&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/mongoose"&gt;mongoose&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/mongoose-auto-increment"&gt;mongoose-auto-increment&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-your-node-express-backend"&gt;
  &lt;/a&gt;
  Create your Node (Express) Backend
&lt;/h2&gt;

&lt;p&gt;First create a folder for your project, called to-do-node (for example).&lt;br&gt;
Then, open that folder in your code editor.&lt;br&gt;
To create our Node project, run the following command in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm init -y&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;This will create a package.json file that will allow us to keep track of all our app scripts and manage any dependencies our Node app needs.&lt;/p&gt;

&lt;p&gt;We'll use Express to create a simple web server for us that runs on port 3000.&lt;/p&gt;

&lt;p&gt;So let's create an index file where our app starts to run with the name of &lt;code&gt;index.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express')
const app = express()
const bodyParser = require('body-parser');

//import router
const router = require('./app/index.js');

// body parser
app.use(bodyParser.urlencoded({ limit: '100mb', extended: true }))
app.use(bodyParser.json({ limit: '100mb', extended: true }))

app.use(function(req, res, next) {
  res.header("Access-Control-Allow-Origin", "*");
  res.header("Access-Control-Allow-Methods", "GET, PUT, POST, DELETE");
  res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, Authorization");

  if ('OPTIONS' === req.method) {
    //respond with 200
    res.send(200);
  }
  else {
    //move on
    next();
  }
});

app.get('/', (req, res) =&amp;gt; {
  res.send("incorrect route");
})

//add routes
const base = '/api/v1/';
app.use(base, router);

app.listen(process.env.PORT || 3000, () =&amp;gt; console.log('Running on port 3000!'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then in our terminal, we will install dependencies which we need:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm I express mongoose body-parser nodemon mongoose-auto-increment&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Create a folder called &lt;code&gt;app&lt;/code&gt; inside the project folder and add &lt;code&gt;index.js&lt;/code&gt; file to defines routes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');

// Routes Import
const toDo = require("./toDo/index.js");

const router = express.Router();

// Adding Routes
router.use('/to-do', toDo);

module.exports = router;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create folder name called config and add &lt;code&gt;db.js&lt;/code&gt; file to that.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;db.js&lt;/code&gt; file will have the following configurations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mongoose = require('mongoose');
mongoose.connect('mongodb+srv://&amp;lt;mongodb_username&amp;gt;:&amp;lt;cluster_password&amp;gt;@cluster0.nxcni.mongodb.net/toDo?retryWrites=true&amp;amp;w=majority', { useNewUrlParser: true });
module.exports = mongoose.connection;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lets-write-apis-now"&gt;
  &lt;/a&gt;
  Let's write APIs now.
&lt;/h2&gt;

&lt;p&gt;Create a folder called toDo and &lt;code&gt;model.js&lt;/code&gt;, &lt;code&gt;index.js&lt;/code&gt;, and &lt;code&gt;router.js&lt;/code&gt; files in that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#indexjs"&gt;
  &lt;/a&gt;
  index.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = require("./router");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#modeljs"&gt;
  &lt;/a&gt;
  model.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mongoose = require('mongoose'); 
const autoIncrement = require('mongoose-auto-increment');
const db = require('../config/db.js');

autoIncrement.initialize(db);

const schema = new config.mongoose.Schema({
  toDos: [
    {
      toDo: String,
      tag: String,
      tagColor: String,
      done: Boolean
    }
  ],
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  },
  status: {
    type: Boolean,
    default: true
  }
}, {
  strict: true
});

var toDo = mongoose.model('toDos', schema);
module.exports = toDo;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#routerjs"&gt;
  &lt;/a&gt;
  router.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const config = require('../config/routes.js');
const router = config.express.Router();
const collection = require('./model.js');

// @route GET api/v1/to-do/list
// @desc get users list with pagination
// @access Public
router.get('/list', function (req, res) {
    if(!req.query.id) {
          res.status(200).send({data: []});
        return false;
    }
    getToDosList(req.query.tag ? req.query.tag : '', req.query.id).then(resp =&amp;gt; {
          res.status(200).send(resp[0]);
    }, err =&amp;gt; {
          res.status(500).send({message: "Something went wrong, please try after sometime"});
    })
});

// @route CREATE api/v1/to-do/add
// @desc add to-do
// @access Public
router.post('/add', function(req, res) {
    if(!req.query.id) {
        collection.create({toDos: [{toDo: req.body.text, done: false, tag: req.body.tag, tagColor: req.body.tagColor}]}, function (err, toDo) {
            if (!err) {
                return res.status(200).json({error: false, data: toDo, message: 'success'})
            } else {
                  return res.status(500).send({error: true, message: 'Error adding to-do'})
            }
        });
    } else {
            let updateData = {
            $push: {
                "toDos": {toDo: req.body.text, done: false, tag: req.body.tag, tagColor: req.body.tagColor}
            }
        };
            updateToDo({_id: req.query.id}, updateData).then(toDo =&amp;gt; {
              return res.status(200).json({error: false, data: toDo, message: 'success'})
            }, err =&amp;gt; {
            return res.status(500).send({error: true, message: 'Error adding to-do'})
            })
    }
});

// @route UPDATE api/v1/to-do/done
// @desc update toDo status
// @access Public
router.put('/done/:userId/:toDoId', function(req, res) {
    let updateData = {
        $set: {
            "toDos.$.done": req.body.done
        }
    };
    updateToDo({_id: req.params.userId, "toDos._id": req.params.toDoId}, updateData).then((toDo) =&amp;gt; {
        return res.status(200).json({error: false, message: 'Updated successfully'})
    }, err =&amp;gt; {
        return res.status(500).send({error: true, message: err})
    })
});

// @route UPDATE api/v1/to-do/delete
// @desc delete toDo
// @access Public
router.put('/delete/:userId/:toDoId', function(req, res) {
    let updateData = { "$pull": { "toDos": { "_id": req.params.toDoId } } }
    updateToDo({_id: req.params.userId, "toDos._id": req.params.toDoId}, updateData).then((toDo) =&amp;gt; {
        return res.status(200).json({error: false, message: 'Updated successfully'})
    }, err =&amp;gt; {
        return res.status(500).send({error: true, message: err})
    })
});

// function to get to-dos list with tag filter
function getToDosList(tag, id) {
    return new Promise(function(resolve, reject) {
        let agg = [
            {
                "$unwind": "$toDos"
            }, {
                "$match": {
                    $or: [{"_id": id}, {"toDos.tag": {$regex: `${tag}.*`, $options: "i" }}]
                }
            }, {
                "$group": {
                    _id: null,
                    data: {$push: "$toDos"}
                }
            }
        ]
        collection.aggregate(agg, function(err, response) {
          if(err) return reject({message: "Something went wrong"})
          if(!response) return reject({message: "Error while getting remitters data"})
          return resolve(response)
        })
    })
}

//function to update to-do
function updateToDo(query, updateData) {
    return new Promise(function(resolve, reject) {
        collection.findOneAndUpdate(query, updateData, {new: true},
            function (err, resp) {
                    if (err) return reject({error: 1, message: "There was a problem while updating data"});
                    return resolve(resp);
            }
        );
    })
}

function getToDos(query) {
    return new Promise(function(resolve, reject) {
        collection.find(query,
            function (err, resp) {
                    if (err) return reject({error: 1, message: "There was a problem while updating data"});
                    return resolve(resp);
            }
        );
    })
}


module.exports = router

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we can run our app by running &lt;code&gt;nodemon index.js&lt;/code&gt; in our terminal and we should see that app is running on port 3000.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dependencies-for-reactjs"&gt;
  &lt;/a&gt;
  Dependencies for React.js
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/bootstrap"&gt;bootstrap&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/react-bootstrap"&gt;react-bootstrap&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/react-icons"&gt;react-icons&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-your-react-frontend"&gt;
  &lt;/a&gt;
  Create your React Frontend
&lt;/h2&gt;

&lt;p&gt;After creating our backend, let's move to the frontend.&lt;/p&gt;

&lt;p&gt;Open another terminal tab and use create-react-app to create a new React project with the name to-do-react (for example):&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx create-react-app to-do-react&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;After that, we will have a React app with all of its dependencies installed.&lt;/p&gt;

&lt;p&gt;Now, go to the folder&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd to-do-react&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Change directory to src and run the below commands:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd src&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rm *&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now create index.js file by running below command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;touch index.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This file will render our app to an HTML file which is in the public folder. Also, create a folder name &lt;code&gt;components&lt;/code&gt; with the file name &lt;code&gt;app.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mkdir components &amp;amp;&amp;amp; cd components &amp;amp;&amp;amp; touch app.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;app.js will contain our To-Do app.&lt;/p&gt;

&lt;p&gt;Edit &lt;code&gt;index.js&lt;/code&gt; file in src:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';
import ReactDOM from 'react-dom';
import App from './components/app';
import 'bootstrap/dist/css/bootstrap.min.css';

ReactDOM.render(&amp;lt;App/&amp;gt;, document.getElementById('root'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a folder with the name of &lt;code&gt;api&lt;/code&gt; and add the file with name of &lt;code&gt;to-do.js&lt;/code&gt; and write API calls in that file as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import axios from 'axios';

let base = 'http://localhost:3000/api/v1/';

export default function api(url, method='GET', data={}) {
    return new Promise(function(resolve, reject) {
        const requestOptions = {
            url: base + url,
            method: method,
            headers: {
                'Content-Type': 'application/json'
            },
            data
        };
        axios(requestOptions)
        .then(function (response) {
            resolve(response.data);
        })
        .catch(function (error) {
            reject(error);
        });
    });
}

export function AddToDoAPI(data) {
    return new Promise(function(resolve, reject) {
        api(`to-do/add?id=${localStorage.userId ? localStorage.userId : ''}`, 'POST', data)
        .then((resp) =&amp;gt; {
            return resolve(resp);
        }, (error) =&amp;gt; {
            return reject(error.response.data.message);
        })
    })
}

export function GetToDoListAPI(tag='') {
    return new Promise(function(resolve, reject) {
        api(`to-do/list?id=${localStorage.userId ? localStorage.userId : ''}&amp;amp;tag=${tag}`)
        .then((resp) =&amp;gt; {
            return resolve(resp);
        }, (error) =&amp;gt; {
            console.log(error)
            debugger
            return reject(error.response.data.message);
        })
    })
}

export function UpdateToDoAPI(data, toDoId) {
    return new Promise(function(resolve, reject) {
        api(`to-do/done/${localStorage.userId}/${toDoId}`, 'PUT', data)
        .then((resp) =&amp;gt; {
            return resolve(resp);
        }, (error) =&amp;gt; {
            return reject(error.response.data.message);
        })
    })
}

export function DeleteToDoAPI(toDoId) {
    return new Promise(function(resolve, reject) {
        api(`to-do/delete/${localStorage.userId}/${toDoId}`, 'PUT', {})
        .then((resp) =&amp;gt; {
            return resolve(resp);
        }, (error) =&amp;gt; {
            return reject(error.response.data.message);
        })
    })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Edit &lt;code&gt;app.js&lt;/code&gt; in components:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, {Component} from 'react';

// Bootstrap for react
import Container from 'react-bootstrap/Container';
import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';
import Button from 'react-bootstrap/Button';
import InputGroup from 'react-bootstrap/InputGroup';
import FormControl from 'react-bootstrap/FormControl';
import ListGroup from 'react-bootstrap/ListGroup';
import Form from 'react-bootstrap/Form'
import Dropdown from 'react-bootstrap/Dropdown'
import DropdownButton from 'react-bootstrap/DropdownButton'
import {AddToDoAPI, GetToDoListAPI, UpdateToDoAPI, DeleteToDoAPI} from '../api/to-do'
import { BsStop, BsX } from 'react-icons/bs';
import {Badge} from "react-bootstrap";

class AppComponent extends Component {
    constructor(props) {
        super(props);

        // Setting up state
        this.state = {
            userInput : "",
            list:[],
            selectedTag: "Other",
            selectedTagColor: "grey",
            tags: [
                {tagName: 'Other', color: 'grey'},
                {tagName: 'Work', color: 'red'},
                {tagName: 'Personal', color: 'green'}
            ]
        }
    }
    componentDidMount() {
        this.getItems()
    }

    // Set a user input value
    updateInput(value){
        this.setState({
            userInput: value,
        });
    }

    // Set a selected tag value
    updateTag(value){
        this.setState({
            selectedTag: value.split(" ")[0],
            selectedTagColor: value.split(" ")[1]
        });
    }

    // Add item if user input in not empty
    addItem(event){
        if(event.code === 'Enter') {
            AddToDoAPI({text: this.state.userInput, tag: this.state.selectedTag, tagColor: this.state.selectedTagColor}).then(resp =&amp;gt; {
                if(!localStorage.userId) {
                    localStorage.setItem('userId', resp.data._id);
                }
                this.getItems()
            })
        }
    }

    //Get to-do list
    getItems(tag='') {
        GetToDoListAPI(tag).then(resp =&amp;gt; {
            // Update list
            const list = [...resp ? resp.data : []];
            // reset state
            this.setState({
                list,
                userInput: ""
            });
        })
    }

    UpdateToDo(val, id) {
        UpdateToDoAPI({done: val}, id).then(resp =&amp;gt; {
            this.getItems()
        })
    }

    // Function to delete item from list use id to delete
    deleteItem(id) {
        DeleteToDoAPI(id).then(resp =&amp;gt; {
            this.getItems()
        })
    }

    render(){
        return(
        &amp;lt;Container&amp;gt;

            &amp;lt;Row style={{
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
                fontSize: '3rem',
                fontWeight: 'bolder',
                fontFamily: 'DejaVu Sans Mono, monospace',
                paddingTop: 2
                }}
                &amp;gt;TODO LIST
            &amp;lt;/Row&amp;gt;
            &amp;lt;hr style={{marginTop: 0}}/&amp;gt;
            &amp;lt;Row&amp;gt;
                &amp;lt;Col md={{ span: 5, offset: 4 }}&amp;gt;
                    &amp;lt;InputGroup className="mb-3"&amp;gt;
                        &amp;lt;DropdownButton
                            variant="outline-secondary"
                            id="input-group-dropdown-2"
                            title={this.state.selectedTag}
                            align="end"
                            size="lg"
                            style={{backgroundColor: 'white'}}
                            onSelect = {e =&amp;gt; this.updateTag(e)}
                            &amp;gt;
                                {this.state.tags.map(tag =&amp;gt; (
                                    &amp;lt;span style={{display: 'flex'}}&amp;gt;&amp;lt;BsStop style={{fontSize: 30, marginTop: 1, color: tag.color}}/&amp;gt;&amp;lt;Dropdown.Item key={tag.tagName} eventKey={tag.tagName + ' ' + tag.color}&amp;gt;{tag.tagName}&amp;lt;/Dropdown.Item&amp;gt;&amp;lt;/span&amp;gt;
                                ))}
                        &amp;lt;/DropdownButton&amp;gt;
                        &amp;lt;FormControl
                            placeholder="add item . . . "
                            size="lg"
                            value = {this.state.userInput}
                            onChange = {item =&amp;gt; this.updateInput(item.target.value)}
                            onKeyPress = {e =&amp;gt; this.addItem(e)}
                            aria-label="add something"
                            aria-describedby="basic-addon2"
                        /&amp;gt;
                    &amp;lt;/InputGroup&amp;gt;
                &amp;lt;/Col&amp;gt;
            &amp;lt;/Row&amp;gt;
            {this.state.list.length ? 
                &amp;lt;Row&amp;gt;
                    &amp;lt;Col md={{ span: 5, offset: 4 }} style={{paddingBottom: 18}}&amp;gt;
                        &amp;lt;Button variant="primary" style={{paddingTop: 0, paddingBottom: 0}} onClick={e =&amp;gt; this.getItems('')} size="sm"&amp;gt;All&amp;lt;/Button&amp;gt;{' '}
                        &amp;lt;Button variant="secondary" style={{paddingTop: 0, paddingBottom: 0}} onClick={e =&amp;gt; this.getItems('Other')} size="sm"&amp;gt;Other&amp;lt;/Button&amp;gt;{' '}
                        &amp;lt;Button variant="danger" style={{paddingTop: 0, paddingBottom: 0}} onClick={e =&amp;gt; this.getItems('Work')} size="sm"&amp;gt;Work&amp;lt;/Button&amp;gt;{' '}
                        &amp;lt;Button variant="success" style={{paddingTop: 0, paddingBottom: 0}} onClick={e =&amp;gt; this.getItems('Personal')} size="sm"&amp;gt;Personal&amp;lt;/Button&amp;gt;{' '}
                    &amp;lt;/Col&amp;gt;
                &amp;lt;/Row&amp;gt; : null
            }
            &amp;lt;Row&amp;gt;
                &amp;lt;Col md={{ span: 5, offset: 4 }}&amp;gt;
                    &amp;lt;ListGroup&amp;gt;
                    {/* map over and print items */}
                    {this.state.list.map(item =&amp;gt; {return(

                        &amp;lt;ListGroup.Item variant="white" action
                             key={item._id}&amp;gt;
                            &amp;lt;Form.Group id="formGridCheckbox" style={{display: 'flex'}}&amp;gt;
                            &amp;lt;Form.Check type="checkbox" style={{width: 10}} className="my-1 mr-sm-2" onChange={e =&amp;gt; this.UpdateToDo(!item.done, item._id)} checked={item.done}/&amp;gt;
                            {item.done ? &amp;lt;span style={{textDecoration: 'line-through', marginTop: 5, width: 380}}&amp;gt;{item.toDo}&amp;lt;/span&amp;gt; : &amp;lt;span style={{marginTop: 5, width: 380}}&amp;gt;{item.toDo}&amp;lt;/span&amp;gt;}
                            &amp;lt;BsStop style={{fontSize: 25, marginTop: 1, color: item.tagColor, float: 'right', width: 30}}/&amp;gt;
                            &amp;lt;BsX
                                onClick = { () =&amp;gt; this.deleteItem(item._id) }
                                style={{float: 'right', fontSize: 25, marginLeft: 'auto', width: 30}}
                            /&amp;gt;
                            &amp;lt;/Form.Group&amp;gt;
                        &amp;lt;/ListGroup.Item&amp;gt;
                    )})}
                    &amp;lt;/ListGroup&amp;gt;
                &amp;lt;/Col&amp;gt;
            &amp;lt;/Row&amp;gt;
        &amp;lt;/Container&amp;gt;
        );
    }
}

export default AppComponent;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Start the server by typing the following command in the terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Output: Open &lt;code&gt;http://localhost:3000&lt;/code&gt; in browser:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LdvmpkmY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m41f3clondcm2830obv1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LdvmpkmY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m41f3clondcm2830obv1.png" alt="To-Do app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, Apply filters and see the personalized to-dos:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XPjo5Aw4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/alt66asdpvbp1l4pq5mw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XPjo5Aw4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/alt66asdpvbp1l4pq5mw.png" alt="To-Do app"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>GitHub Pages with Dynamic Routes</title>
      <author>mkt</author>
      <pubDate>Fri, 18 Jun 2021 10:29:05 +0000</pubDate>
      <link>https://dev.to/mktcode/github-pages-with-dynamic-routes-dli</link>
      <guid>https://dev.to/mktcode/github-pages-with-dynamic-routes-dli</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SwAdqDdJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xo5csn857fnxelq77xa3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SwAdqDdJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xo5csn857fnxelq77xa3.png" alt="GitHub Pages Dynamic Routes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt; is a super convenient hosting service for static sites, e.g. a personal portfolio or blog or a project’s documentation and even modern web apps are in many cases not much more than a static HTML file and (a lot of) Javascript. But static sites come with the downside of... well... being static. That means you can’t have dynamic routes, like &lt;code&gt;your-project.github.io/posts/&amp;lt;post-slug&amp;gt;&lt;/code&gt; where &lt;code&gt;&amp;lt;post-slug&amp;gt;&lt;/code&gt; is a dynamic parameter. All possible routes need to be known in advance and point to a static file. Maybe those files are generated by some build process and whenever you add a new blog post, you just re-deploy the page. Using CI/CD pipelines like GitHub Actions/Workflows, that process might even boil down to pushing a new markdown file to your repository and that is sufficiently convenient for a lot of scenarios. But sometimes it’s not and you just need dynamic paths, especially when user generated content is involved or a project becomes more complex.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-dynamic-routes-even-work"&gt;
  &lt;/a&gt;
  How do dynamic routes even work?
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;If you are well familiar with the concept and you just want to know how to trick GitHub Pages into supporting dynamic routes, you can skip this part and continue with The Solution.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A route/path is traditionally pointing to a (static) file on the server that is represented by a domain.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;your-server.com/some/path/index.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you try to access a file that does not exist on that server, it will respond with an error, which usually means it will serve you a default &lt;code&gt;404.html&lt;/code&gt; that comes with the server. You’ve probably seen something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yGGK5_Af--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pm36kkk4l2g0x5zfj1hj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yGGK5_Af--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pm36kkk4l2g0x5zfj1hj.png" alt="Nginx 404 Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s such a default error file, in this case served by an nginx server. However, you can configure a server in a way that it serves you a certain resource/file, no matter what path you request. Let’s say you have an &lt;code&gt;index.html&lt;/code&gt; on the server and you configured it accordingly. You can now call &lt;code&gt;your-server.com/index.html&lt;/code&gt; but also &lt;code&gt;your-server.com/some/path/that/does-not-exist.html&lt;/code&gt;. It will always return the same &lt;code&gt;index.html&lt;/code&gt; file. Now, that file can also be a script instead of just some static HTML file. Otherwise your dynamic routes wouldn’t be that dynamic since they all serve exactly the same content.&lt;/p&gt;

&lt;p&gt;A &lt;a href="https://en.wikipedia.org/wiki/Front_controller"&gt;front controller&lt;/a&gt; is such a dynamic script that handles all requests to your server and serves content dynamically, e.g. by fetching data from a database, based on what the actual request was, and then generating an HTML response from a template. This way you can support routes with dynamic parts, that you don’t have to know in advance, like the &lt;code&gt;/posts/&amp;lt;post-slug&amp;gt;&lt;/code&gt; example from above.&lt;br&gt;
GitHub Pages&lt;/p&gt;

&lt;p&gt;GitHub Pages does not support such a front controller because it is not meant to serve dynamic content. Sure. You can use Javascript in your static HTML files to change its content dynamically, e.g. based on user interaction, and most web apps, as mentioned before, are nothing more than a static HTML file and then Javascript takes over from there. But all this happens in your browser and not on GitHub’s servers. So if you call &lt;code&gt;your-username.github.io/some/file.html&lt;/code&gt; it will look for exactly that file and nothing else and if it can’t find it, because you didn’t add it to your repository, it will show you this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lU5Bm0GY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5p7yetieh2mq5z9318ah.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lU5Bm0GY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5p7yetieh2mq5z9318ah.png" alt="GitHub Pages 404 Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That is GitHub’s default &lt;code&gt;404.html&lt;/code&gt; file. At this point I assume that most developers/users would now simply accept the bitter reality that GitHub Pages might not be the right service for them and instead move on to a more comprehensive hosting solution, where they have more control over what the server actually does behind the scenes. But not me! I’m a lazy minimalist and one platform account must be enough!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#an-oldfashioned-alternative"&gt;
  &lt;/a&gt;
  An old-fashioned alternative
&lt;/h3&gt;

&lt;p&gt;At first I considered just being fine with a compromise and instead of having “real” dynamic routes, I could go back in the history of single page apps and use the &lt;code&gt;#&lt;/code&gt; method, &lt;a href="https://www.w3schools.com/angular/tryit.asp?filename=try_ng_routing"&gt;like the old AngularJS&lt;/a&gt;. In case you ever wondered, the part after the &lt;code&gt;#&lt;/code&gt; is not really part of the actual URL a server responds to. It is just used by the browser to jump to an HTML anchor and you can access it in Javascript. The server does not even know about this part. It’s client-side only. But that means you can have routes that look like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;your-server.com/#/posts/&amp;lt;post-id&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The app lives at &lt;code&gt;/&lt;/code&gt; on the server and processes the part after &lt;code&gt;#&lt;/code&gt; when running in the browser. When clicking a link in your app, it just updates the part after &lt;code&gt;#&lt;/code&gt; and changes the content accordingly via Javascript. But that doesn’t look that nice and modern frameworks, like Next.js do not even support this form of routing anymore. &lt;a href="https://nuxtjs.org/docs/2.x/configuration-glossary/configuration-router#fallback"&gt;Vue’s Nuxt.js actually has a fallback option&lt;/a&gt; but still...&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h2&gt;

&lt;p&gt;You already saw part of the solution in this post. It’s the 404 page. GitHub Pages actually allows you to add a custom &lt;code&gt;404.html&lt;/code&gt; to your repository, to adjust it to your project’s branding and so on. If you are familiar with the front controller pattern, you might have an “aahhhhhaaaa” moment now. The important part of this pattern is that it just takes any request and routes it to your app where the request is then handled. Well.. a 404 page is not much different. It handles aaaaall requests... that do not match any existing resource. You know where I am going with this? It is a bit different though. A classical front controller lives on the server and sends the desired response back to you as if the resource you requested actually exists physically. Tricking GitHub Pages into supporting dynamic routes is a bit more... tricky. Because it simply doesn’t! But we can make it look as if it does. The average human eye won’t notice the difference and it even works with the dynamic routing features of modern frameworks like Vue’s Nuxt.js or React’s Next.js.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#proof-of-concept"&gt;
  &lt;/a&gt;
  Proof of concept
&lt;/h3&gt;

&lt;p&gt;The simple trick is to let your custom &lt;code&gt;404.html&lt;/code&gt; redirect any request back to your app and then your app uses the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API"&gt;browser history API&lt;/a&gt; to update the URL that your browser shows, to whatever was requested originally. You need to pass that information to your app when redirecting. For that I use... guess what?... our old friend, the &lt;code&gt;#&lt;/code&gt;. I have a GitHub page set up here: &lt;a href="https://mktcode.github.io/static-dynamic-routing/"&gt;https://mktcode.github.io/static-dynamic-routing&lt;/a&gt; and its &lt;code&gt;404.html&lt;/code&gt; looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/static-dynamic-routing/#&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/static-dynamic-routing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So instead of showing some 404 Not found! message, it just redirects you to the root path where the app lives. Note that this GitHub Page example lives in the subdirectory &lt;code&gt;/static-dynamic-routing/&lt;/code&gt; which is normal, when you set up a GitHub page for a repository. It will live under &lt;code&gt;&amp;lt;your-username&amp;gt;.github.io/&amp;lt;repo-name&amp;gt;/&lt;/code&gt;. That’s why we have to do some replacements here. Otherwise we’d redirect the user to &lt;code&gt;mktcode.github.io/&lt;/code&gt;. Fortunately you can &lt;a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site"&gt;configure a custom domain for your GitHub Page&lt;/a&gt; very easily and then you don’t have to take care of this.&lt;/p&gt;

&lt;p&gt;So now, no matter what route we call, we’ll end up at our app and it will know about that route, so it can act accordingly. In my little example I do not much more than replacing the displayed URL in the address bar and manipulating some content. That’s basically how dynamic routing works in those modern frameworks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;My App&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;My App&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Post Path: {PATH}&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pushState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;page&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Some title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/static-dynamic-routing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;header&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;header&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{PATH}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try opening this link in your browser: &lt;a href="https://mktcode.github.io/static-dynamic-routing/posts/my-post"&gt;https://mktcode.github.io/static-dynamic-routing/posts/my-post&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For a split second you can see the &lt;code&gt;#&lt;/code&gt; in your browser’s address bar. That’s when the redirect happens and then we pretend it never did happen. And that’s basically all there is to it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-with-nuxtjs"&gt;
  &lt;/a&gt;
  Use with Nuxt.js
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;If you are more the react type of person, you’ll have to implement that on your own. I’ll only show the Nuxt.js way.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nuxtjs.org/docs/2.x/features/file-system-routing#dynamic-routes"&gt;In Nuxt.js you can easily configure dynamic routes&lt;/a&gt; by just creating a file like &lt;code&gt;/pages/posts/_slug.vue&lt;/code&gt;. Nuxt will do the rest and you have routes like &lt;code&gt;/posts/my-post-title&lt;/code&gt;. This even works in static site mode but only if the site is delivered by the integrated Nuxt server or any other server configured in the same way (think: front controller pattern). With GitHub Pages this does not work and you’ll just see the 404 page. But here’s the proof that my approach works totally fine even with Nuxt.js:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mktcode.github.io/dynamic-nuxt-gh-pages/post/my-totally-dynamic-post-title"&gt;https://mktcode.github.io/dynamic-nuxt-gh-pages/post/my-totally-dynamic-post-title&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All it needs is &lt;a href="https://github.com/mktcode/dynamic-nuxt-gh-pages/blob/main/static/404.html"&gt;&lt;code&gt;the 404.html&lt;/code&gt; file in the &lt;code&gt;static&lt;/code&gt; directory&lt;/a&gt; and a &lt;a href="https://github.com/mktcode/dynamic-nuxt-gh-pages/blob/main/middleware/gh-pages-dynamic-routes.js"&gt;router middleware&lt;/a&gt;, which performs a nuxt-internal redirect to the original route, resulting in the address bar of your browser being updated. If that route does not exist in your application, the &lt;a href="https://nuxtjs.org/docs/2.x/concepts/views/#error-page"&gt;Nuxt error page&lt;/a&gt; shows. By the way... It now uses &lt;code&gt;#!&lt;/code&gt; for the redirect, to still allow normal HTML anchors. Everything that worked before should still work, plus... dynamic routes for GitHub Pages! Well... kind of. :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The End
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Hope you enjoyed my first ever article! :) Follow me on &lt;a href="https://twitter.com/@thecodelander"&gt;Twitter&lt;/a&gt; and &lt;a href="https://github.com/mktcode"&gt;GitHub&lt;/a&gt; and comment and bla bla bla. There’s more to come! Five years later... “Hey I think I’ll start writing dev articles!” :D&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Introducing Scatter Flow Diagram For Performance Engineering</title>
      <author>Harinder Seera 🇭🇲</author>
      <pubDate>Fri, 18 Jun 2021 10:08:01 +0000</pubDate>
      <link>https://dev.to/aws-builders/introducing-scatter-flow-diagram-for-performance-engineering-d45</link>
      <guid>https://dev.to/aws-builders/introducing-scatter-flow-diagram-for-performance-engineering-d45</guid>
      <description>&lt;p&gt;Other than the application architects, most often than not, performance engineers are the next people to know the overall application architecture and how everything fits together &amp;amp; communicates. Sometimes they are the only ones who understand it better.&lt;/p&gt;

&lt;p&gt;A while back a colleague reached out to me and requested I give him a high-level application architecture walk-through. He wanted to have this knowledge so he could debug a performance degradation. During the walk-through of the architecture, I was also producing response time scatter plots from different components to help him with his investigation. I was educating him but also helping him narrow down potential areas to focus his investigate.&lt;/p&gt;

&lt;p&gt;Architecture was complex and it required different system data to be analyzed. It became apparent to me that I needed a different and some what simple approach to help him better understand the architecture and make sense of the data. Hence I came up with Scatter Flow Diagram (shown below).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HxqgFbos--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c80uy4f324e2745t2qcs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HxqgFbos--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c80uy4f324e2745t2qcs.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scatter Flow Diagram is a novel way of combining high-level application architecture with scatter plot. It visualizes ingress and egress response time using scatter plots for each component. It overlays response time from each component onto the application architecture. It shows the flow of response time (right to left) across components and how it varying.&lt;/p&gt;

&lt;p&gt;I found the following benefits of using the Scatter Flow Diagram:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Visually we could see which component(s) are potential areas for his investigation. It gave him the starting point. This also helped him engage the right people to debug and fix the problem (highlighted below).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--14o9EzDR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dksiqm7sc1g5ge4jidf3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--14o9EzDR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dksiqm7sc1g5ge4jidf3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Leftmost graph response time ranges from 0 to 4000ms. The rightmost graph response time ranges from 0 to 600ms. Plus the leftmost graphs have a higher response time variance compared to the other two.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;He could share this visualization with other team members (within or outside) and observation easily viewable. Diagram visualized the data backing his observation. Teams didn't have to run multiple queries to extract and visualize the data or look at different dashboards.&lt;/li&gt;
&lt;li&gt;Different teams could also see the high-level architecture of how their own component communicates with other component.&lt;/li&gt;
&lt;li&gt;It was easy for us to overlay &amp;amp; visualize how response time was changing across each component.&lt;/li&gt;
&lt;li&gt;Also it highlighted areas where Observability was lacking.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This same diagram can be extended to response code or error rate across different components.&lt;/p&gt;




&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;If you enjoyed this article feel free to share on social media 🙂&lt;/p&gt;

&lt;p&gt;Say Hello on: &lt;a href="https://www.linkedin.com/in/hpseera/"&gt;Linkedin&lt;/a&gt; | &lt;a href="https://twitter.com/harinderseera"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github repo: &lt;a href="https://github.com/hseera"&gt;hseera&lt;/a&gt;&lt;/p&gt;

</description>
      <category>performance</category>
      <category>architecture</category>
      <category>visualization</category>
      <category>observability</category>
    </item>
    <item>
      <title>Using VCR to Mock Your Requests</title>
      <author>Ana Schwendler</author>
      <pubDate>Fri, 18 Jun 2021 10:05:31 +0000</pubDate>
      <link>https://dev.to/anaschwendler/using-vcr-to-mock-your-requests-3127</link>
      <guid>https://dev.to/anaschwendler/using-vcr-to-mock-your-requests-3127</guid>
      <description>&lt;p&gt;In the past months I've been working with a lot of external API requests. Since I'm part of a logistics team we have the challenge to make sure our requests are done in time and everything is delivered in good shape.&lt;/p&gt;

&lt;p&gt;Part of this task, as software developer, is making sure the code I write is well tested, and does what is supposed to do. But, when integrating our code connection, we don't want to hit APIs with real requests every time we run our tests. This not only generates unnecessary requests, but as well, make them run slower. In order to pretend that we are making the real request, there is a tool that helps "faking" this call, while using accurate data from a true request, and recording it as a "cassette tape". The name of the tool I refer to is &lt;a href="https://github.com/vcr/vcr"&gt;VCR&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And in this post I'll explain how I've been learning how to use it as well as why I think it is useful.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/xT1R9RfuBqWvfo8oDe/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/xT1R9RfuBqWvfo8oDe/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-mock-test"&gt;
  &lt;/a&gt;
  What is a mock test?
&lt;/h2&gt;

&lt;p&gt;Since this is not about the mocking technique, I'll just briefly introduce it and link a useful article on the topic. In &lt;a href="https://circleci.com/blog/how-to-test-software-part-i-mocking-stubbing-and-contract-testing/"&gt;this post&lt;/a&gt; we can see mock testing defined as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Mocking means creating a fake version of an external or internal service that can stand in for the real one, helping your tests run more quickly and more reliably. When your implementation interacts with an object’s properties, rather than its function or behavior, a mock can be used.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And that is exactly the reason why we use VCR.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-vcr"&gt;
  &lt;/a&gt;
  What is VCR?
&lt;/h2&gt;

&lt;p&gt;According to &lt;a href="https://github.com/vcr/vcr"&gt;their documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Record your test suite's HTTP interactions and replay them during future test runs for fast, deterministic, accurate tests.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Which means that when you first run your test with the VCR syntax, it will record what happened and next time you run the test again, you will have this recorded version ready to stand in for the real request.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-vcr"&gt;
  &lt;/a&gt;
  How to use VCR?
&lt;/h2&gt;

&lt;p&gt;I have a basic example here: &lt;a href="https://github.com/anaschwendler/vcr_example"&gt;https://github.com/anaschwendler/vcr_example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So basically, whenever you want to test a part of code that requires a request, you use the &lt;code&gt;.use_cassette&lt;/code&gt; method to say that you want VCR to deal with that with a cassette file. It means that if there is a file already recorded, VCR will use it, otherwise, VCR will &lt;strong&gt;automatically create&lt;/strong&gt; one (this time making a real request) based on the request made in the test.&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rubygems'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'test/unit'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'vcr'&lt;/span&gt;

&lt;span class="no"&gt;VCR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cassette_library_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"fixtures/vcr_cassettes"&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;hook_into&lt;/span&gt; &lt;span class="ss"&gt;:webmock&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;VCRTest&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Test&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Unit&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;TestCase&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_example_dot_com&lt;/span&gt;
    &lt;span class="no"&gt;VCR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;use_cassette&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"synopsis"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Net&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HTTP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;URI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'http://www.iana.org/domains/reserved'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="n"&gt;assert_match&lt;/span&gt; &lt;span class="sr"&gt;/Example domains/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;body&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here you are requesting to use a cassette file called &lt;code&gt;synopsis&lt;/code&gt;, to mock a request to iana.org.&lt;/p&gt;

&lt;p&gt;If this is running the first time, VCR will generate a "cassette" file, which will be stored at &lt;code&gt;fixtures/vcr_cassettes&lt;/code&gt;, which for the example will be called &lt;code&gt;synopsis.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So if you take a look at &lt;code&gt;fixtures/vcr_cassettes/synopsis.yml&lt;/code&gt; it looks like (I've removed some parts as it was too big):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;---
http_interactions:
- request:
    method: get
    uri: http://www.iana.org/domains/reserved
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 18 Jun 2021 08:06:40 GMT
      Server:
      - Apache
      Vary:
      - Accept-Encoding
      Last-Modified:
      - Thu, 21 May 2020 22:41:39 GMT
      X-Frame-Options:
      - SAMEORIGIN
      Expires:
      - Fri, 18 Jun 2021 09:56:45 GMT
      Referrer-Policy:
      - origin-when-cross-origin
      X-Content-Type-Options:
      - nosniff
      Age:
      - '595'
      Content-Type:
      - text/html; charset=UTF-8
      Cache-Control:
      - public, max-age=21603
      Content-Security-Policy: /*cropped security policy*/
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        /*cropped binary string*/
    http_version:
  recorded_at: Fri, 18 Jun 2021 08:06:40 GMT
recorded_with: VCR 5.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So for now on you, whenever you run your tests, you suite will use this cassette file. It will also run faster, as it has the file in place and don't need to make the request which can take more time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#examples-in-real-life"&gt;
  &lt;/a&gt;
  Examples in real life
&lt;/h2&gt;

&lt;p&gt;One example of project that uses VCR is this &lt;code&gt;site-search-ruby&lt;/code&gt; client from elastic: &lt;a href="https://github.com/elastic/site-search-ruby"&gt;https://github.com/elastic/site-search-ruby&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In their context of &lt;code&gt;Search&lt;/code&gt;, when searching all DocumentTypes in the engine, they use a cassette called &lt;code&gt;engine_search&lt;/code&gt; to mock a request:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/elastic/site-search-ruby/blob/master/spec/client_spec.rb"&gt;https://github.com/elastic/site-search-ruby/blob/master/spec/client_spec.rb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And this is the cassette file that is used in this call: &lt;a href="https://github.com/elastic/site-search-ruby/blob/master/spec/fixtures/vcr/engine_search.yml"&gt;https://github.com/elastic/site-search-ruby/blob/master/spec/fixtures/vcr/engine_search.yml&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;VCR seems to be a very reliable tool to fake request to APIs. But we still need to be aware that sometimes APIs can change and with that we need to record our tests again. This process should be simple and easy to reproduce, so for more tips regarding VCR use, I recommend &lt;a href="https://fabioperrella.github.io/10_tips_to_help_using_the_VCR_gem_in_your_ruby_test_suite.html"&gt;this&lt;/a&gt; blog post.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hiding-confidential-credentials-in-cassettes"&gt;
  &lt;/a&gt;
  Hiding confidential credentials in cassettes
&lt;/h3&gt;

&lt;p&gt;There is an configuration option available to filter sensitive data that can be used to prevent it from being written to the cassette files, the documentation is &lt;a href="https://relishapp.com/vcr/vcr/v/5-0-0/docs/configuration/filter-sensitive-data"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/vcr/vcr"&gt;https://github.com/vcr/vcr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/elastic/site-search-ruby"&gt;https://github.com/elastic/site-search-ruby&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://circleci.com/blog/how-to-test-software-part-i-mocking-stubbing-and-contract-testing/"&gt;https://circleci.com/blog/how-to-test-software-part-i-mocking-stubbing-and-contract-testing/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fabioperrella.github.io/10_tips_to_help_using_the_VCR_gem_in_your_ruby_test_suite.html"&gt;https://fabioperrella.github.io/10_tips_to_help_using_the_VCR_gem_in_your_ruby_test_suite.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks &lt;a href="https://github.com/memunaharuna"&gt;Memuna&lt;/a&gt; for reviewing it! 🎉&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>vcr</category>
      <category>testing</category>
    </item>
    <item>
      <title>7 Udemy courses worth your time and money</title>
      <author>Pasca Vlad</author>
      <pubDate>Fri, 18 Jun 2021 10:00:04 +0000</pubDate>
      <link>https://dev.to/pascavld/7-udemy-courses-worth-your-time-and-money-1gd1</link>
      <guid>https://dev.to/pascavld/7-udemy-courses-worth-your-time-and-money-1gd1</guid>
      <description>&lt;p&gt;&lt;em&gt;If you found value in this thread you will most likely enjoy my tweets too so make sure you follow me on &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt;  for more information about web development and how to improve as a developer. This article was first published on my &lt;a href="https://vladpasca.hashnode.dev/"&gt;Blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-modern-javascript-from-the-beginning-by-traversymedia"&gt;
  &lt;/a&gt;
  1. Modern JavaScript from the beginning by &lt;a class="mentioned-user" href="https://dev.to/traversymedia"&gt;@traversymedia&lt;/a&gt;

&lt;/h3&gt;

&lt;p&gt;This is the course I used to learn JavaScript and I recommend it to everyone&lt;/p&gt;

&lt;p&gt;It will teach you every thing you need to know about JS and it also contains some amazing real-world projects&lt;/p&gt;

&lt;p&gt;🔗&lt;a href="https://www.udemy.com/course/modern-javascript-from-the-beginning/"&gt;https://www.udemy.com/course/modern-javascript-from-the-beginning/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-the-complete-web-developer-in-2021"&gt;
  &lt;/a&gt;
  2. The Complete Web Developer in 2021
&lt;/h3&gt;

&lt;p&gt;This is another course that I used to learn the basics of web development and it's amazing&lt;/p&gt;

&lt;p&gt;It really contains everything you need to know about web development&lt;/p&gt;

&lt;p&gt;🔗&lt;a href="https://www.udemy.com/course/the-complete-web-developer-zero-to-mastery/"&gt;https://www.udemy.com/course/the-complete-web-developer-zero-to-mastery/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-50-projects-in-50-days-by-florinpop1705-and-traversymedia"&gt;
  &lt;/a&gt;
  3. 50 Projects In 50 Days by @florinpop1705 and &lt;a class="mentioned-user" href="https://dev.to/traversymedia"&gt;@traversymedia&lt;/a&gt;

&lt;/h3&gt;

&lt;p&gt;If you're looking to practice your HTML, CSS, and JS skills this is perfect for you&lt;/p&gt;

&lt;p&gt;I didn't start this course yet but I can't wait to do so&lt;/p&gt;

&lt;p&gt;🔗&lt;a href="https://www.udemy.com/course/50-projects-50-days/"&gt;https://www.udemy.com/course/50-projects-50-days/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-modern-html-amp-css-from-the-beginning"&gt;
  &lt;/a&gt;
  4. Modern HTML &amp;amp; CSS From The Beginning
&lt;/h3&gt;

&lt;p&gt;This is another amazing course you can use if you want to learn just HTML and CSS&lt;/p&gt;

&lt;p&gt;You will learn things like HTML5, Flex, Grid, Sass, and more&lt;/p&gt;

&lt;p&gt;🔗&lt;a href="https://www.udemy.com/course/modern-html-css-from-the-beginning/"&gt;https://www.udemy.com/course/modern-html-css-from-the-beginning/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-complete-react-developer-in-2021"&gt;
  &lt;/a&gt;
  5. Complete React Developer in 2021
&lt;/h3&gt;

&lt;p&gt;This is a course that will teach you React, Redux, Hooks, GraphQL, Firebase, Stripe&lt;/p&gt;

&lt;p&gt;You'll also build an E-commerce app while learning React&lt;/p&gt;

&lt;p&gt;I plan to take this course in the future too&lt;/p&gt;

&lt;p&gt;🔗&lt;a href="https://www.udemy.com/course/complete-react-developer-zero-to-mastery/"&gt;https://www.udemy.com/course/complete-react-developer-zero-to-mastery/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-mern-stack-front-to-back"&gt;
  &lt;/a&gt;
  6. MERN Stack Front To Back
&lt;/h3&gt;

&lt;p&gt;If you want to learn the MERN stack this course is perfect for you&lt;/p&gt;

&lt;p&gt;You'll learn how to work with Node.js, Express, React, Redux and MongoDB&lt;/p&gt;

&lt;p&gt;🔗&lt;a href="https://www.udemy.com/course/mern-stack-front-to-back/"&gt;https://www.udemy.com/course/mern-stack-front-to-back/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-learning-to-learn"&gt;
  &lt;/a&gt;
  7. Learning to Learn
&lt;/h3&gt;

&lt;p&gt;This course isn't programming related but I recommend it to everyone that wants to learn programming&lt;/p&gt;

&lt;p&gt;It teaches you how to learn anything faster and more efficient&lt;/p&gt;

&lt;p&gt;🔗&lt;a href="https://www.udemy.com/course/learning-to-learn-efficient-learning-zero-to-mastery/"&gt;https://www.udemy.com/course/learning-to-learn-efficient-learning-zero-to-mastery/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Modern JavaScript from the beginning&lt;/li&gt;
&lt;li&gt;The Complete Web Developer&lt;/li&gt;
&lt;li&gt;50 Projects In 50 Days&lt;/li&gt;
&lt;li&gt;Modern HTML &amp;amp; CSS From The Beginning&lt;/li&gt;
&lt;li&gt;Complete React Developer&lt;/li&gt;
&lt;li&gt;MERN Stack Front To Back&lt;/li&gt;
&lt;li&gt;Learning to Learn&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The end
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;I hope found this useful and if you did please let me know. If you have any question feel free to DM me on  &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt; .&lt;/em&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Where is the end of a software engineer’s career?</title>
      <author>Vadim Kalinin</author>
      <pubDate>Fri, 18 Jun 2021 09:45:35 +0000</pubDate>
      <link>https://dev.to/s2engineers/where-is-the-end-of-a-software-engineer-s-career-3ahd</link>
      <guid>https://dev.to/s2engineers/where-is-the-end-of-a-software-engineer-s-career-3ahd</guid>
      <description>&lt;p&gt;In various ways, we’re all striving for a better future as engineers, and one of the instruments we own to get that future is a &lt;strong&gt;ladder&lt;/strong&gt;, which leads us to various career opportunities of our dreams.&lt;/p&gt;

&lt;p&gt;There are many opportunities to pick from. &lt;/p&gt;

&lt;p&gt;For many newcomers, it’s a hard choice to make. &lt;/p&gt;

&lt;p&gt;Frontend, Backend, Mobile, etc.? &lt;br&gt;
Which programming language to start with? &lt;br&gt;
Consulting or a product company? &lt;br&gt;
Enterprise or startup? &lt;/p&gt;

&lt;p&gt;Mostly, the decision should be based on what makes us feel right, though wage (for obvious reasons) also plays an important role in it.&lt;/p&gt;

&lt;p&gt;To better describe the case, I take my personal example. &lt;/p&gt;

&lt;p&gt;More than 7 years ago, when I was just starting my career as a web software engineer, I picked Frontend because it was an attractive and emerging field in web development. At that moment, I was dreaming of becoming a Senior and having all the knowledge my higher-ranked colleagues had.&lt;/p&gt;

&lt;p&gt;A few years later, when I became an expert in one already obsolete MVC framework (trends in front-end development used to change faster than we could keep up with), React and UX/UI principles, I realized catching up on backend would come in handy. The reason was that I could eventually make smarter decisions and not move everything to the browser-side just because I knew it better. This and many other decisions, together with reflections, then led me to the current position – Senior Software Engineer. &lt;/p&gt;

&lt;p&gt;Your way is apparently different from mine, maybe more straightforward or more crooked, but ultimately it makes each of us unique on each stage we reach.&lt;/p&gt;

&lt;p&gt;Senior position is a sweet spot in my opinion. The requirements to senior position might differ from company to company, but generally speaking, a senior engineer is capable of: solving most of the imminent technical challenges in many types of projects, can clearly and reasonably explain their thoughts, guide their junior colleagues, and (what’s also very important!) learn together with them. Senior is equated with a Swiss-knife, fitting almost into any project (very convenient for talent acquisition). &lt;/p&gt;

&lt;p&gt;In my experience, the job title doesn’t usually change that often for a hardcore techie after reaching a Senior position unless they start managing or leading. Nonetheless, it doesn’t mean the wage stays steel, acquiring new tech skills also brings you further up the ladder, and there are really lots (Blockchain, IoT, AI, etc.) to choose from nowadays.&lt;/p&gt;

&lt;p&gt;Although there is still lots to learn in this position, this is not the end, right?&lt;/p&gt;

&lt;p&gt;I noticed people start being very creative about their next opportunity at the senior level, maybe because thanks to their experience they can act almost standalone. Some people turn to freelance to get better payment and/or personalized work conditions, some decide to go for their own business, some switch more into management and leading, others get inspired by tutoring, public speaking, or technical writing and seek their fame there. I can list many more examples where the journey might continue but will let your inner force decide this on its own.&lt;/p&gt;

&lt;p&gt;And even though the seniority system might slowly disappear, for me it was never about the caste system, but about the &lt;em&gt;mindset&lt;/em&gt;, &lt;em&gt;experience&lt;/em&gt;, and &lt;em&gt;common skills&lt;/em&gt; valid for various technologies and industries. Reaching these qualities as I discovered is far from being a peak (or an “end”) but rather opens new horizons.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;No matter your position or role, at this point, I encourage you to admire yourself for the goals already reached.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What were your goals when you started (if not a secret 😉)? What will be your next step up the ladder? And which skills you suppose are necessary to reach that step?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I'm excited to hear your stories in the thread.&lt;/p&gt;

&lt;p&gt;Yours truly&lt;/p&gt;

</description>
      <category>career</category>
      <category>webdev</category>
      <category>discuss</category>
      <category>codeiscolorful</category>
    </item>
    <item>
      <title>Metrics to evaluate your Machine Learning algorithm</title>
      <author>Apoorv Tyagi</author>
      <pubDate>Fri, 18 Jun 2021 09:30:06 +0000</pubDate>
      <link>https://dev.to/apoorvtyagi/metrics-to-evaluate-your-machine-learning-algorithm-5bd6</link>
      <guid>https://dev.to/apoorvtyagi/metrics-to-evaluate-your-machine-learning-algorithm-5bd6</guid>
      <description>&lt;p&gt;You made a machine learning or deep learning model. Amazing! 🥳&lt;/p&gt;

&lt;p&gt;But how do you check its performance and robustness? Simply building a predictive model is not enough. You have to create a model which gives high accuracy on &lt;strong&gt;out-of-sample data&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;That's where evaluation metrics come into the picture. They are used to measure the quality of the statistical or machine learning model, and this article will introduce you to the most common and yet important metrics to evaluate your machine learning algorithms.&lt;/p&gt;

&lt;p&gt;If you're someone who just started out in the field of Data Science and Machine Learning, this is for you. We will discuss the following terms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Confusion matrix&lt;/li&gt;
&lt;li&gt;  Accuracy&lt;/li&gt;
&lt;li&gt;  Precision&lt;/li&gt;
&lt;li&gt;  Recall&lt;/li&gt;
&lt;li&gt;  F1 score&lt;/li&gt;
&lt;li&gt;  Mean Absolute Error&lt;/li&gt;
&lt;li&gt;  R Squared Score&lt;/li&gt;
&lt;li&gt;  Root Mean Squared Error&lt;/li&gt;
&lt;li&gt;  ROC (Receiver Operating Characteristics) curve&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So let’s dive into it to learn about them :&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#confusion-matrix"&gt;
  &lt;/a&gt;
  Confusion Matrix
&lt;/h1&gt;

&lt;p&gt;A confusion matrix is one of the simplest concepts in the field of machine learning, and yet so important when it comes to statistical classification problems.&lt;/p&gt;

&lt;p&gt;A confusion matrix is a N X N matrix, where N is the number of classes being predicted. It is usually used to &lt;strong&gt;describe the performance of a classification model based on the true values known for a data set&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In simple words, it is a summary of the prediction result made by the classification model.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#terms-associated-with-confusion-matrix"&gt;
  &lt;/a&gt;
  Terms Associated with Confusion Matrix
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;True Positive (TP):&lt;/strong&gt; True positive means their actual class value is 1 and the predicted value is also 1.&lt;/p&gt;

&lt;p&gt;For example, The case where the woman is actually pregnant and the model also classifies that she is pregnant.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;False Positive (FP):&lt;/strong&gt; False positive means their actual class value is 0 and the predicted value is 1.&lt;/p&gt;

&lt;p&gt;For example, The case where the woman is not pregnant and the model classifies that she is pregnant.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;True Negative (TN):&lt;/strong&gt; True negative means their actual class value is 0 and the predicted value is also 0.&lt;/p&gt;

&lt;p&gt;For example, The case where the woman is actually not pregnant and the model also classifies that she is not pregnant.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;False Negative (FN):&lt;/strong&gt; False-negative means their actual class value is 1 and the predicted value is 0.&lt;/p&gt;

&lt;p&gt;For example, The case where the woman is actually pregnant and the model also classifies that she is not pregnant.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zIhj8nIi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623853513229/trs6eb65N.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zIhj8nIi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623853513229/trs6eb65N.png" alt="confusion matrix.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The confusion matrix in itself is not a performance measure but all the performance metrics are dependent on the confusion matrix.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#accuracy"&gt;
  &lt;/a&gt;
  Accuracy
&lt;/h1&gt;

&lt;p&gt;Accuracy is the most common metric that you can see everywhere when you're evaluating your model. It is simply defined as the number of correct predictions made by your model.&lt;/p&gt;

&lt;p&gt;In simple terms, &lt;strong&gt;accuracy is the ratio of all the correct predictions to the total number of predictions&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It can be calculated using a confusion matrix.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ez903HgP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621997989964/x6JODZUuU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ez903HgP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621997989964/x6JODZUuU.png" alt="accuracy.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#precision"&gt;
  &lt;/a&gt;
  Precision
&lt;/h1&gt;

&lt;p&gt;Precision is defined as &lt;strong&gt;the total number of correctly classified positive examples by the total number of predicted positive examples&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In some cases, your classification model might classify based on the most frequent classes. Which in turn will bring a low accuracy because your model didn’t learn anything and just classified based on the top class.&lt;/p&gt;

&lt;p&gt;Therefore, we need class-specific performance metrics to analyze. Precision is one of them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3l-D_t-H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621997831139/q5VbMq6zx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3l-D_t-H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621997831139/q5VbMq6zx.png" alt="precision.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It depicts how much the model is right when it says it is right.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#recall"&gt;
  &lt;/a&gt;
  Recall
&lt;/h1&gt;

&lt;p&gt;A recall (also known as &lt;em&gt;sensitivity&lt;/em&gt;) refers to the percentage of total relevant results correctly classified by the classification model.&lt;/p&gt;

&lt;p&gt;It is the &lt;strong&gt;the number of positive samples returned by the custom-trained model&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gtg3OpTd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621997843703/IhiNTM2Cn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gtg3OpTd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621997843703/IhiNTM2Cn.png" alt="Recall.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The relation between recall and precision -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8tLFKmpw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623900342363/t6_00UhjI.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8tLFKmpw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623900342363/t6_00UhjI.jpeg" alt="RecalVsPrecision.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#high-recall-low-precision"&gt;
  &lt;/a&gt;
  High recall, low precision:
&lt;/h3&gt;

&lt;p&gt;This means, most of the positive examples are correctly recognized but there are a lot of false positives.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#low-recall-high-precision"&gt;
  &lt;/a&gt;
  Low recall, high precision:
&lt;/h3&gt;

&lt;p&gt;This means that we missed a lot of positive examples but those we predicted as positive are indeed positive.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#f1-score"&gt;
  &lt;/a&gt;
  F1 Score
&lt;/h1&gt;

&lt;p&gt;Based on the use case of the classification model, the priority is given either to precision or recall, but in some classification models, we need both of these metrics to be combined as a single one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;F1-Score is a metric that combines both precision and recall&lt;/strong&gt; and has an equal and relative contribution of both precision and recall.&lt;/p&gt;

&lt;p&gt;It is the harmonic mean of precision and recall.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gbvcmngN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621997858830/MVeG1-Ktb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gbvcmngN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621997858830/MVeG1-Ktb.png" alt="F1 score.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Remember that if your use case needs either recall or precision, one higher than the other then F1-score may not be the good metric for it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#mean-absolute-error"&gt;
  &lt;/a&gt;
  Mean Absolute Error
&lt;/h1&gt;

&lt;p&gt;Mean absolute error(MAE) is defined as &lt;strong&gt;the average of all errors that are calculated based on values predicted by your model&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jex4QBXx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621997877447/xhAb091-l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jex4QBXx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621997877447/xhAb091-l.png" alt="MAE-2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is intended to measure average model bias in a set of predictions, without considering their direction&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0cf1FgZX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623856647925/sJPrbnngB.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0cf1FgZX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623856647925/sJPrbnngB.jpeg" alt="MAE-1.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#r-squared-score"&gt;
  &lt;/a&gt;
  R Squared Score
&lt;/h1&gt;

&lt;p&gt;R squared is a measure of how close the data are to the fitted regression line. It is also known as the coefficient of determination.&lt;/p&gt;

&lt;p&gt;It defines the degree to which the variance in the dependent variable (or target) can be explained by the independent variable (features).&lt;/p&gt;

&lt;p&gt;Fo example if the R-squared value for our predictive model is 0.8. This means that 80% of the variation in the dependent variable is explained by the independent variables.&lt;/p&gt;

&lt;p&gt;Therefore we can say that the &lt;strong&gt;higher the r-squared value is, the better is the model&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xwofsczD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623986479517/HVNZgosBn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xwofsczD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623986479517/HVNZgosBn.png" alt="rsqared.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SSRES: the Residual sum of squared errors&lt;/p&gt;

&lt;p&gt;SSTOT: the total sum of squared errors&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#root-mean-squared-error"&gt;
  &lt;/a&gt;
  Root Mean Squared Error
&lt;/h1&gt;

&lt;p&gt;RMSE is one of the most popular metrics used today for evaluating regression-based models. This is an important evaluation metric since it’s essential to find the average squared error between the predicted values.&lt;/p&gt;

&lt;p&gt;RMSE &lt;strong&gt;measures the average magnitude of the error&lt;/strong&gt;. It’s the square root of the average of squared differences between prediction and actual observation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;RMSE is highly affected by outlier values. Hence, make sure you’ve removed outliers from your data set prior to using this metric.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As compared to mean absolute error, RMSE gives higher weightage and punishes large errors&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cvj39RI9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623856974370/Mh1npqTAA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cvj39RI9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623856974370/Mh1npqTAA.png" alt="rmse.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;here 'N' is total observations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#correlation-between-mae-and-rmse"&gt;
  &lt;/a&gt;
  Correlation between MAE and RMSE
&lt;/h3&gt;

&lt;p&gt;Both of these metrics express the average error of the machine learning models.&lt;br&gt;
These two metrics can range from 0 to infinity and both of these metrics are negatively oriented scores, which means that a lower score defines better results.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#roc-curve"&gt;
  &lt;/a&gt;
  ROC Curve
&lt;/h1&gt;

&lt;p&gt;ROC curve stands for “Receiver Operating Characteristic" Curve.&lt;/p&gt;

&lt;p&gt;ROC curve is a graph showing the performance of a classification model at all its cut-off threshold.&lt;/p&gt;

&lt;p&gt;In simple words, ROC Curve is the one that &lt;strong&gt;tells how much your model is capable of differentiating among the different classes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;ROC is a probability curve. It is a representation of the performance of your model in a graphical manner.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--69enRlQW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621997941907/LeLyOIDtr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--69enRlQW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621997941907/LeLyOIDtr.png" alt="ROC.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This curve represents:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; True positive rate (recall/sensitivity)&lt;/li&gt;
&lt;li&gt; False-positive rate (1- specificity) : FPR = FP/ FP+TN&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The curve separates the space into two areas, one for good and the other for poor performance levels.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In this article, you have seen some important metrics that are helpful for model evaluation and are needed to be understood by a data scientist or a machine learning engineer.&lt;/p&gt;

&lt;p&gt;I hope you have found it useful. Also please feel free to suggest corrections and improvements.&lt;/p&gt;

&lt;p&gt;Thanks for reading :))&lt;/p&gt;




&lt;p&gt;&lt;em&gt;"Enjoyed what you read??"&lt;/em&gt; You can show some support by &lt;strong&gt;Buying me some coffee☕&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/apoorvtyagi"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7PD28--a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-violet.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>VSCode and Docker container management</title>
      <author>Mishi</author>
      <pubDate>Fri, 18 Jun 2021 09:24:12 +0000</pubDate>
      <link>https://dev.to/mishi/vscode-and-docker-container-management-4ng5</link>
      <guid>https://dev.to/mishi/vscode-and-docker-container-management-4ng5</guid>
      <description>&lt;p&gt;Using containers for development is not a new thing. Almost everybody uses it because of its ease of handling software dependencies. But the time will come when you will have so many containers that it's getting harder and harder to manage them. VSCode does have a great Docker plugin where you can see your containers, images, registries, networks, and volumes but its functionality is limited. The same applies to Docker Desktop. It's easy to stop or delete a container but what about such a simple thing as renaming it. You can of course do it in the command line but some functions, such as deleting takes multiple lines of code. That's why I started searching for another solution. And I found it! It's called Portainer. 👋&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#about-portainer"&gt;
  &lt;/a&gt;
  About Portainer
&lt;/h1&gt;

&lt;p&gt;Portainer is a universal container management tool. It works with Kubernetes, Docker, Docker Swarm, and Azure ACI. And it's open-source. 👍&lt;br&gt;
Portainer handles the easy tasks as easy as the more complex ones. While this article is mainly focused on Docker, Portainer can handle much more advanced tasks like Kubernetes clusters.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h1&gt;

&lt;p&gt;Getting Portainer up and running is as easy as starting a new container. Simply create a named volume for your data and run the container.&lt;br&gt;
&lt;code&gt;docker volume create portainer_data&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Linux:&lt;/em&gt;&lt;br&gt;
&lt;code&gt;docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce&lt;/code&gt;&lt;br&gt;
&lt;em&gt;Windows:&lt;/em&gt;&lt;br&gt;
&lt;code&gt;docker run -d -p 9001:9001 --name portainer_agent --restart=always -v \\.\pipe\docker_engine:\\.pipe\docker_engine -v /var/lib/docker/volumes:/var/lib/docker/volumes portainer/agent&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once it's up and running you can access the web interface at: &lt;a href="http://localhost:9000/"&gt;http://localhost:9000/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WU90RaAq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbqmjdp8upuohh31ywra.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WU90RaAq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbqmjdp8upuohh31ywra.png" alt="Portainer startup screen"&gt;&lt;/a&gt;&lt;br&gt;
Setup the admin user and connect to Docker.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qdvWb29Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0z8mogf7wx7tmra7r6vh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qdvWb29Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0z8mogf7wx7tmra7r6vh.png" alt="Connect Portainer to Docker"&gt;&lt;/a&gt;&lt;br&gt;
And you're done! It's that simple. 🎉&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#start-exploring"&gt;
  &lt;/a&gt;
  Start exploring
&lt;/h1&gt;

&lt;p&gt;Start exploring Portainer. The interface is simple and easy to use. Check your volume locations or your network IPs without using additional Docker containers.&lt;/p&gt;

&lt;p&gt;Have fun using &lt;a href="https://www.portainer.io/"&gt;Portainer&lt;/a&gt;! 🐳&lt;/p&gt;

</description>
      <category>docker</category>
      <category>portainer</category>
      <category>vscode</category>
      <category>containers</category>
    </item>
  </channel>
</rss>
