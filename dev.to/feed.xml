<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Module 8 - Making apps with Grid </title>
      <author>Dominik Gorczyca</author>
      <pubDate>Sat, 10 Jul 2021 08:42:22 +0000</pubDate>
      <link>https://dev.to/dgx32123/module-8-making-apps-with-grid-511c</link>
      <guid>https://dev.to/dgx32123/module-8-making-apps-with-grid-511c</guid>
      <description>&lt;p&gt;&lt;a href="https://scrimba.com/learn/frontend"&gt;&lt;strong&gt;Module 8&lt;/strong&gt;&lt;/a&gt; is completed and time to share my experience!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First Part&lt;/strong&gt; is to remind how to use flexbox and its many properties, nearly everything was covered and it ended with making a simple flexbox card (which thanks to &lt;em&gt;interactive code&lt;/em&gt; you can do fully yourself!).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vk7sTfts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r93k62x3ufjly79egxk5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vk7sTfts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r93k62x3ufjly79egxk5.png" alt="Scrimba interactive Flexbox card"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second Part&lt;/strong&gt; was about using flexbox and various APIs at once to solidify your skills. In this part you will see how 4 different websites are done and with every website you will have a challenge to make it better. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0CZgZqcS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2a6nq6v7zsvmyi9m8xvm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0CZgZqcS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2a6nq6v7zsvmyi9m8xvm.png" alt="Scrimba Interactive Hex API note"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Third Part&lt;/strong&gt;, just as the first one was made by a great teacher, &lt;a href="https://www.youtube.com/channel/UCJZv4d5rbIKd4QHMPkcABCw"&gt;Kevin Powell&lt;/a&gt;. Finally we learn about Grid. This part covers most properties, gives great explanation to how even more complicated properties like auto-fill work and gives you an easy opportunity to play with them. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Forth Part&lt;/strong&gt;, which is also the last one repeats the pattern of joining new layout tool with various APIs. You get another 5 websites built and you need to use both grid and your async skills to improve the website. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gGqtGmLo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umzfs40vwzo68kvvdl19.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gGqtGmLo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umzfs40vwzo68kvvdl19.png" alt="Scrimba Pokedex Website code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This module is nice to get started with Grid, refresh your API skills and you could even learn flexbox quite well if you didn't know how to use it before (I would still advise you to learn from &lt;a href="https://dev.to/dgx32123/responsive-design-338g"&gt;Module 5&lt;/a&gt; if you want to learn it solidly).&lt;br&gt;&lt;br&gt;
Despite many challenges, it's still &lt;strong&gt;not enough&lt;/strong&gt; to really make it stick so further practice is essential. If you want to know even more about Grid check out Complete Guide to Grid on &lt;a href="https://css-tricks.com/snippets/css/complete-guide-grid/"&gt;CSS-Tricks&lt;/a&gt; or very popular &lt;a href="https://dev.to/mustapha/css-grid-illustrated-introduction-52l5"&gt;Dev Post&lt;/a&gt; and make a cool website! &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>scrimba</category>
    </item>
    <item>
      <title>Most Common Website Errors</title>
      <author>Ajo Alex</author>
      <pubDate>Sat, 10 Jul 2021 08:20:13 +0000</pubDate>
      <link>https://dev.to/ajoalex/most-common-website-errors-56g2</link>
      <guid>https://dev.to/ajoalex/most-common-website-errors-56g2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#500"&gt;
  &lt;/a&gt;
  500
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#internal-server-error"&gt;
  &lt;/a&gt;
  Internal Server Error
&lt;/h3&gt;

&lt;p&gt;This is general purpose error and can occur whenever an internal probem is encountered by a web server. More often that not, error 500 occurs when the web server is overloaded.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#401"&gt;
  &lt;/a&gt;
  401
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#unauthorised"&gt;
  &lt;/a&gt;
  Unauthorised
&lt;/h3&gt;

&lt;p&gt;This error message will appear usually after a user has attempted to access a site they were unauthorised to access or after a failed login attempt.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#400"&gt;
  &lt;/a&gt;
  400
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#bad-request"&gt;
  &lt;/a&gt;
  Bad Request
&lt;/h3&gt;

&lt;p&gt;If your request is corrupted you will see this error message appear. It means that something has gone wrong with your web browser in relation to your request. Usually, this means the data set by the browser does not cofirm to the rules of the http protocol.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#403"&gt;
  &lt;/a&gt;
  403
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#forbidden"&gt;
  &lt;/a&gt;
  Forbidden
&lt;/h3&gt;

&lt;p&gt;If there is an attempt to access a forbidden directory on a website you will see the error message which means there is no login opportunity on the page. The most common reason a user will see this error message is if the website does not permit users to browse the site's file directory structure or the specific file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#404"&gt;
  &lt;/a&gt;
  404
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#not-found"&gt;
  &lt;/a&gt;
  Not Found
&lt;/h3&gt;

&lt;p&gt;If user attempts to access a non existent web page, a 404 error message will appear. This message also appear when a file is very large or service running too slow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#501"&gt;
  &lt;/a&gt;
  501
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#not-implemented"&gt;
  &lt;/a&gt;
  Not Implemented
&lt;/h2&gt;

&lt;p&gt;This message means that the browser does not support the requested feature.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#502"&gt;
  &lt;/a&gt;
  502
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#service-temporarily-overloaded"&gt;
  &lt;/a&gt;
  Service Temporarily Overloaded
&lt;/h3&gt;

&lt;p&gt;You will see a 502 error when your server is congested - a problem tha usualle resolves itself when web traffice decreases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#503"&gt;
  &lt;/a&gt;
  503
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#service-unavailabe"&gt;
  &lt;/a&gt;
  Service Unavailabe
&lt;/h3&gt;

&lt;p&gt;Users will see a 503 message if the site they are attempting to reach is busy, or if the server is down.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connection-refused-by-host"&gt;
  &lt;/a&gt;
  Connection Refused by Host
&lt;/h2&gt;

&lt;p&gt;This error message, like 404 erro, usually means that the user does not have authorisation to access the site or that an attempted login failed, usually because the password used was not correct.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#file-contains-no-data"&gt;
  &lt;/a&gt;
  File Contains no Data
&lt;/h2&gt;

&lt;p&gt;users will see a file contains no data error when a page is present, but nothin shows up. This can be caused by bad table formatting or stripped header information.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#failed-dns-lookup"&gt;
  &lt;/a&gt;
  failed DNS Look-Up
&lt;/h2&gt;

&lt;p&gt;when a website's URL cannot be translated, a failed dns lookup error usually appears. This error usually appears on commercial sites due to overload&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#408"&gt;
  &lt;/a&gt;
  408
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#request-time-out"&gt;
  &lt;/a&gt;
  Request Time out
&lt;/h3&gt;

&lt;p&gt;You will see the error message when the server does not recieve the full request from the user within the set timeframe it has allocated to wait. Repeat 408s will occur if either the server or the user's system is experiening heavy workload, or the temperory internet surge which slows down the message being deivered to the server. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cheat-sheet"&gt;
  &lt;/a&gt;
  Cheat Sheet
&lt;/h2&gt;

&lt;h5&gt;
  &lt;a href="#1xx-codes-informational-statuses"&gt;
  &lt;/a&gt;
  1XX Codes - Informational statuses.
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#2xx-codes-status-after-successfull-action"&gt;
  &lt;/a&gt;
  2XX Codes - Status after successfull action.
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#3xx-codes-status-showing-a-redirection"&gt;
  &lt;/a&gt;
  3XX Codes - Status showing a redirection.
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#4xx-codes-status-showing-a-client-side-error"&gt;
  &lt;/a&gt;
  4XX Codes - Status showing a client side error
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#5xx-codes-status-showing-a-server-side-error"&gt;
  &lt;/a&gt;
  5XX Codes - Status showing a Server side error
&lt;/h5&gt;

</description>
      <category>webdev</category>
    </item>
    <item>
      <title>What are the Uses Of Python?</title>
      <author>Rocky</author>
      <pubDate>Sat, 10 Jul 2021 08:19:34 +0000</pubDate>
      <link>https://dev.to/codelivly/what-are-the-uses-of-python-34pb</link>
      <guid>https://dev.to/codelivly/what-are-the-uses-of-python-34pb</guid>
      <description>&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;&lt;span&gt;What's Python used for?&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class="wordai-block rewrite-block enable-highlight"&gt;Python programming is an in-demand skill that is highly sought after.&lt;/span&gt; &lt;span class="wordai-block rewrite-block enable-highlight"&gt;What is Python programming used for?&lt;/span&gt; &lt;span class="wordai-block rewrite-block enable-highlight active"&gt;We have already briefly discussed some of the applications it can be used for, and we will expand on these and other Python examples.&lt;/span&gt; &lt;span class="wordai-block rewrite-block enable-highlight"&gt;You can use Python for:&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;&lt;span class="wordai-block rewrite-block enable-highlight"&gt;1.&lt;/span&gt; &lt;span class="wordai-block rewrite-block enable-highlight"&gt;Machine learning and AI&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="wordai-block rewrite-block enable-highlight"&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/what-is-machine-learning-a-quick-guide-to-basic-concepts/"&gt;&lt;span&gt;Machine learnings with python&lt;/span&gt;&lt;/a&gt;&lt;/b&gt;&lt;span&gt;: Python is a stable, flexible and easy programming language that's great for machine learning (ML), and artificial intelligence (AI), projects.&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span class="wordai-block rewrite-block enable-highlight"&gt;Python is a favorite language among data scientists. There are numerous Python packages and machine learning libraries.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="wordai-block rewrite-block enable-highlight"&gt;This application of Python is what our Deep Learning and Python Programming For AI with Microsoft Azure ExpertTrack can help.&lt;/span&gt; &lt;span class="wordai-block rewrite-block enable-highlight"&gt;Deep learning and Python can be used to enhance your career in AI.&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;&lt;span class="wordai-block rewrite-block enable-highlight"&gt;2. Data analytics&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="wordai-block rewrite-block enable-highlight"&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/how-to-become-a-data-analyst/"&gt;&lt;span&gt;Data analytics with python&lt;/span&gt;&lt;/a&gt;&lt;/b&gt;&lt;span&gt;: Data analytics, like AI and machine-learning, is another field rapidly growing that makes use of Python programming.&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span class="wordai-block rewrite-block enable-highlight"&gt;There is an increasing need for people who can organize, collect and manipulate data in a world where there is more data than ever.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="wordai-block rewrite-block enable-highlight"&gt;Python is a good choice for data science and analysis.&lt;/span&gt; &lt;span class="wordai-block rewrite-block enable-highlight"&gt;It is flexible, easy to learn, and well-supported. This makes it relatively fast and easy to use when analysing data.&lt;/span&gt; &lt;span class="wordai-block rewrite-block enable-highlight"&gt;It's great for manipulating large amounts of data and performing repetitive tasks.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="wordai-block rewrite-block enable-highlight"&gt;With our ExpertTrack you can learn more about data analytics with Python. This will allow you to develop data analytics skills.&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;&lt;span class="wordai-block rewrite-block enable-highlight"&gt;3.&lt;/span&gt; &lt;span class="wordai-block rewrite-block enable-highlight"&gt;Data visualization&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="wordai-block rewrite-block enable-highlight"&gt;Data visualization is another area of growing interest.&lt;/span&gt; &lt;span class="wordai-block rewrite-block enable-highlight"&gt;It plays into many of Python's strengths.&lt;/span&gt; &lt;span class="wordai-block rewrite-block enable-highlight"&gt;Python offers a wide range of graphing libraries that offer a multitude of features, in addition to its flexibility and open-source nature.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="wordai-block rewrite-block enable-highlight"&gt;You can choose to create simple graphics or interactive plots.&lt;/span&gt; &lt;span class="wordai-block rewrite-block enable-highlight"&gt;Plotly and Pandas Visualization are two examples.&lt;/span&gt; &lt;span class="wordai-block rewrite-block enable-highlight"&gt;There are many options available to turn data into useful insights.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="wordai-block rewrite-block enable-highlight"&gt;Our 12-week ExpertTrack on data visualization with Python is a great option.&lt;/span&gt; &lt;span class="wordai-block rewrite-block enable-highlight"&gt;Learn how to use Python libraries to analyze and interpret data sets.&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;&lt;span class="wordai-block rewrite-block enable-highlight"&gt;4.&lt;/span&gt; &lt;span class="wordai-block rewrite-block enable-highlight"&gt;Programming apps&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="wordai-block rewrite-block enable-highlight"&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/what-is-python-basis-of-python-explained/"&gt;&lt;span&gt;Python&lt;/span&gt;&lt;/a&gt;&lt;/b&gt;&lt;span&gt; can be used to program many different applications.&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span class="wordai-block rewrite-block enable-highlight"&gt;This general-purpose language is used to create and read file directories, create GUIs, APIs, and many other things.&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span class="wordai-block rewrite-block enable-highlight"&gt;Python can be used to build any type of application, including audio and video apps or machine learning applications.&lt;/span&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Android School Management System with PHP MySql</title>
      <author>rrtutors</author>
      <pubDate>Sat, 10 Jul 2021 07:28:18 +0000</pubDate>
      <link>https://dev.to/rrtutors/android-school-management-system-with-php-mysql-1ad7</link>
      <guid>https://dev.to/rrtutors/android-school-management-system-with-php-mysql-1ad7</guid>
      <description>&lt;p&gt;&lt;a href="https://rrtutors.com/projectsinfo/School-Management-System-with-PHP-MySQL"&gt;School management system&lt;/a&gt; is an Android application where Faculty and Student can communicate with each other.&lt;/p&gt;

&lt;p&gt;This Android application consist of 3 Modules&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Admin Module&lt;/li&gt;
&lt;li&gt;Teacher/Faculty Module&lt;/li&gt;
&lt;li&gt;Student Module&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ftFTGSS9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rrtutors.com/uploads/langpostimg/achl-admin.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ftFTGSS9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rrtutors.com/uploads/langpostimg/achl-admin.png" alt="Android school mnagement System Admin"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Admin Module&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1 Admin can manage Authorization, Authentication, permissions, History tracking&lt;br&gt;
2 He can Create Faculty Details&lt;br&gt;
3 He can edit Faculty Details&lt;br&gt;
4 He can delete Faculty Details&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Teacher Module&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1 Teacher can create Student details&lt;br&gt;
2 Teacher can manage Student Time Tables&lt;br&gt;
3 Teacher can manage Student daily activities&lt;br&gt;
4 Teacher can send notifications to Student.&lt;br&gt;
5 Teacher can manage student doubts&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q_eUbXIA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rrtutors.com/uploads/langpostimg/schl-teacher.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q_eUbXIA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rrtutors.com/uploads/langpostimg/schl-teacher.png" alt="Android school mnagement System Admin"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Student Module&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1 Student can Register/Login into application&lt;br&gt;
 2 Student can raise his doubts and can get solved from teacher&lt;br&gt;
 3 Student can view questions&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w8vmu3hH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rrtutors.com/uploads/langpostimg/schl-student.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w8vmu3hH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rrtutors.com/uploads/langpostimg/schl-student.png" alt="Android school mnagement System Admin"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Download &lt;a href="https://rrtutors.com/projectsinfo/School-Management-System-with-PHP-MySQL"&gt;Android School Management System with PHP MySql&lt;/a&gt;&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>android</category>
      <category>php</category>
      <category>mysql</category>
    </item>
    <item>
      <title>Appwrite In Production: Backups and Restores</title>
      <author>Bradley Schofield</author>
      <pubDate>Sat, 10 Jul 2021 07:16:50 +0000</pubDate>
      <link>https://dev.to/appwrite/appwrite-in-production-backups-and-restores-4beg</link>
      <guid>https://dev.to/appwrite/appwrite-in-production-backups-and-restores-4beg</guid>
      <description>&lt;p&gt;Backing up and restoring data is an extremely important part of running servers. It's a virtual safety net against most bad things that can happen. Made a bad config change? Restore a backup. Messed up an update? Restore a backup. Corrupted Drives? Restore a backup.&lt;/p&gt;

&lt;p&gt;Not only that, backups can also come in handy when migrating data to other systems, for instance migrating a development server into a production environment or vice versa 🔁&lt;/p&gt;

&lt;p&gt;To make this entire process as easy as possible we've written this simple and handy guide to explain everything you need to know about backing up and restoring your Appwrite instance.&lt;/p&gt;

&lt;p&gt;Appwrite is broken down into multiple sections and most of Appwrite is stateless. This means that Appwrite only actually has two main things you need to backup: one is Appwrite's Database (MariaDB) and the other is the Docker volumes which store functions data and uploads. The rest - Appwrite can automatically handle and regenerate.&lt;/p&gt;

&lt;p&gt;Please note that all these commands need to be run within the same directory as Appwrite's &lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With all that said, lets begin! 😊&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backing-up-the-mariadb-database"&gt;
  &lt;/a&gt;
  💾 Backing up the MariaDB Database
&lt;/h2&gt;

&lt;p&gt;Due to the fact that Appwrite uses a Docker image of MariaDB it is extremely easy to dump the entire database with just one command and likewise to restore the dump.&lt;/p&gt;

&lt;p&gt;Creating a Database backup is just one command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose &lt;span class="nb"&gt;exec &lt;/span&gt;mariadb sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s1"&gt;'exec mysqldump --all-databases --add-drop-database -u"$MYSQL_USER" -p"$MYSQL_ROOT_PASSWORD"'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; ./dump.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Going into depth this command does a couple things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Docker-compose launches a temporary shell onto the MariaDB container to start work&lt;/li&gt;
&lt;li&gt;It runs &lt;code&gt;mysqldump&lt;/code&gt; on the server with two specific options &lt;code&gt;--all-databases&lt;/code&gt; and &lt;code&gt;--add-drop-database&lt;/code&gt; these are important since they ensure that when the backup is restored old data doesn't get overlapped with new data.&lt;/li&gt;
&lt;li&gt;The output of &lt;code&gt;mysqldump&lt;/code&gt; is piped into a &lt;code&gt;dump.sql&lt;/code&gt; file. This is your backup ✅️&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#restoring-the-mariadb-database"&gt;
  &lt;/a&gt;
  ✍️ Restoring the MariaDB Database
&lt;/h2&gt;

&lt;p&gt;Restoring the database is similarly easy and also requires just one command to do so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nt"&gt;-T&lt;/span&gt; mariadb sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s1"&gt;'exec mysql -uroot -p"$MYSQL_ROOT_PASSWORD"'&lt;/span&gt; &amp;lt; dump.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command is very simple once you break it down:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Docker-compose launches a temporary shell onto the MariaDB container to start work&lt;/li&gt;
&lt;li&gt;Using the &lt;code&gt;mysql&lt;/code&gt; command we restore the dump through a pipe&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#backing-up-your-docker-volumes"&gt;
  &lt;/a&gt;
  💿 Backing up your Docker Volumes
&lt;/h2&gt;

&lt;p&gt;Appwrite stores various things in Docker volumes. This includes your file uploads and Cloud Function data and docker volumes makes it easy for us to coordinate data between the central Appwrite container and our various Appwrite workers. Uploads are especially important to backup since they include all your app's file uploads, these commands can take a while to run depending on how much data you have to backup.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Before running these commands is it highly recommended to &lt;strong&gt;shutdown your Appwrite instance&lt;/strong&gt; to ensure you get a complete backup.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To backup the functions volume the command is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; backup &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;--volumes-from&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;docker-compose ps &lt;span class="nt"&gt;-q&lt;/span&gt; appwrite&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="nv"&gt;$PWD&lt;/span&gt;/backup:/backup ubuntu bash &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"cd /storage/functions &amp;amp;&amp;amp; tar cvf /backup/functions.tar ."&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and to backup the uploads volume the command is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; backup &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;--volumes-from&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;docker-compose ps &lt;span class="nt"&gt;-q&lt;/span&gt; appwrite&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="nv"&gt;$PWD&lt;/span&gt;/backup:/backup ubuntu bash &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"cd /storage/uploads &amp;amp;&amp;amp; tar cvf /backup/uploads.tar ."&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both these commands do similar things and when you break them down they are pretty simple.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Start a new Docker container. This Docker container has a few special options &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;--rm&lt;/code&gt; will delete the container once it's done running. The reason we want this is because this container is only being used to package up our backup and give it to the host machine. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;--volume-from&lt;/code&gt;  This flag special as it will mount all of the volumes of the container we give it. To get the container ID we want we use a &lt;code&gt;$(docker-compose ps -q appwrite)&lt;/code&gt; to get the ID within the command&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-v&lt;/code&gt; This flag is being used to mount a volume onto our new container which will give us access to a backup folder we created using the &lt;code&gt;mkdir&lt;/code&gt; command at the start&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ubuntu&lt;/code&gt; is the image we are basing our new container on&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Finally with this command created we change directories into the normal Appwrite mount point for uploads and create a tarball which will be created in the backup directory where we will be able to access it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once these commands are run you should find a new &lt;code&gt;backup&lt;/code&gt; folder which contains&lt;code&gt;uploads.tar&lt;/code&gt; and &lt;code&gt;functions.tar&lt;/code&gt; these are your backups. Keep them safe.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#restoring-your-docker-volumes"&gt;
  &lt;/a&gt;
  📝 Restoring your Docker Volumes
&lt;/h2&gt;

&lt;p&gt;Restoring your Appwrite volumes is fairly simple as well. Move the backup folder you just created to your destination machine next to the &lt;code&gt;docker-compose.yml&lt;/code&gt; file and simply run the following commands to restore the backup. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please note that the Appwrite instance should be shutdown while running these commands.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Restoring functions volume:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;--volumes-from&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;docker-compose ps &lt;span class="nt"&gt;-q&lt;/span&gt; appwrite&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="nv"&gt;$PWD&lt;/span&gt;/backup:/restore ubuntu bash &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"cd /storage/functions &amp;amp;&amp;amp; tar xvf /restore/functions.tar --strip 1"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Restoring uploads volume:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;--volumes-from&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;docker-compose ps &lt;span class="nt"&gt;-q&lt;/span&gt; appwrite&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="nv"&gt;$PWD&lt;/span&gt;/backup:/restore ubuntu bash &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"cd /storage/uploads &amp;amp;&amp;amp; tar xvf /restore/uploads.tar --strip 1"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command creates new temporary Docker container like the backup command but instead extracts the tar back into the functions and uploads endpoint which will restore the backup.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-in-conclusion"&gt;
  &lt;/a&gt;
  ⭐️ In Conclusion
&lt;/h2&gt;

&lt;p&gt;To create a full Appwrite backup you will want to backup MariaDB and the two volumes specified here. Once you have done that make sure to keep it safe, the best backup will store the backup in multiple locations including locally and in multiple clouds. As with any Cloud Native Application, make sure that you backup your Appwrite instance regularly to ensure that you're never in a situation where you have to lose data due to a server failure.&lt;/p&gt;

&lt;p&gt;This entire process can be easily done to help migrate an Appwrite installation easily by simply copying the backup files onto another server and running the restore steps.&lt;/p&gt;

&lt;p&gt;We hope you enjoyed this article! We love contributions and encourage you to take a look at our &lt;a href="https://github.com/appwrite/appwrite/issues"&gt;open isuses&lt;/a&gt; and &lt;a href="https://github.com/appwrite/rfc/pulls"&gt;ongoing RFCs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you get stuck anywhere, feel free to reach out to us on our &lt;a href="https://appwrite.io/discord"&gt;friendly support channels&lt;/a&gt; run by humans 👩‍💻&lt;/p&gt;

&lt;p&gt;Here are some handy links for more information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite/appwrite/blob/master/CONTRIBUTING.md"&gt;Appwrite Contribution Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite"&gt;Appwrite Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/docs"&gt;Appwrite Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you to &lt;a href="https://unsplash.com/@tvick?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Taylor Vick&lt;/a&gt; for the server image.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>opensource</category>
      <category>devops</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>The Scope Chain in JavaScript</title>
      <author>Rajat Verma</author>
      <pubDate>Sat, 10 Jul 2021 07:07:37 +0000</pubDate>
      <link>https://dev.to/rajat2502/the-scope-chain-in-javascript-596o</link>
      <guid>https://dev.to/rajat2502/the-scope-chain-in-javascript-596o</guid>
      <description>&lt;h1&gt;
  &lt;a href="#chapter-3-the-scope-chain"&gt;
  &lt;/a&gt;
  Chapter 3: The Scope Chain
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;These are the notes of third chapter of the book "You Don't Know JS: Scope and Closures".&lt;/li&gt;
&lt;li&gt;The connections between scopes that are nested in the other scopes are called the scope chain.&lt;/li&gt;
&lt;li&gt;The scope chain is &lt;strong&gt;directed&lt;/strong&gt;, meaning the lookup moves upward only.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#lookup-is-mostly-conceptual"&gt;
  &lt;/a&gt;
  "Lookup" Is (Mostly) Conceptual
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;We described runtime access to a variable as a &lt;em&gt;lookup&lt;/em&gt; in the last chapter, in which the JavaScript Engine first checks if the variable is present in the current scope before moving upward up the chain of nested scopes (towards the global scope) until the variable is found, if at all.&lt;/li&gt;
&lt;li&gt;The lookup stops as soon as the first matching named declaration in scope is found.&lt;/li&gt;
&lt;li&gt;The scope of a variable is usually decided during the initial compilation process. It will not change based on anything that can happen later during runtime.&lt;/li&gt;
&lt;li&gt;Since the scope is known from compilation, this information would likely be stored with each variable's entry in the AST, which means that the &lt;em&gt;Engine&lt;/em&gt; doesn't need to lookup up a bunch of scopes to figure out which scope a variable comes from.&lt;/li&gt;
&lt;li&gt;Avoiding the need for lookup is a key optimization benefit of lexical scope.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Consider the following scenario: we have numerous files and we are unable to locate the declaration of a specific variable in one of them. It's not always an error if no declaration is found. That variable could be declared in the shared global scope by another file (program) in the runtime.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;So the ultimate determination of whether the variable was declared in some scope may need to be deferred to the runtime.&lt;/li&gt;
&lt;li&gt;Let's understand this with the &lt;em&gt;Marble and Buckets&lt;/em&gt; analogy that we discussed in the &lt;a href="https://dev.to/rajat2502/illustrating-lexical-scope-in-javascript-2h0f"&gt;last chapter&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Any reference to a variable that's initially undeclared is left as an uncolored marble during that file's compilation; this color cannot be determined until other relevant files have been compiled and the application runtime commences. That deferred lookup will eventually resolve the color to whichever scope the variable is found in (likely the global scope).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#shadowing"&gt;
  &lt;/a&gt;
  Shadowing
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If all variables have different names it wouldn't matter if all of them were just declared in the global scope.&lt;/li&gt;
&lt;li&gt;Having different lexical scopes starts to matter more when you have two or more variables, each in different scopes, with the same lexical names.&lt;/li&gt;
&lt;li&gt;Let's consider an example:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;studentName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Suzy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;printStudent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;studentName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;studentName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;studentName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;studentName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;printStudent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Frank&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// FRANK&lt;/span&gt;
&lt;span class="nx"&gt;printStudent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;studentName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// SUZY&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;studentName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Suzy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;studentName&lt;/code&gt; declaration on line 1, creates a new variable in the global scope. &lt;/li&gt;
&lt;li&gt;All the three &lt;code&gt;studentName&lt;/code&gt; references in the &lt;code&gt;printStudent&lt;/code&gt; function refer to a different local scoped variable and not the global scoped &lt;code&gt;studentName&lt;/code&gt; variable. This behavior is called &lt;strong&gt;Shadowing&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;So, we can say that in the above example, the local scoped variable shadows the globally scoped variable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: It's lexically impossible to reference the global studentName anywhere inside of the printStudent(..) function (or from any nested scopes).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#global-unshadowing-trick"&gt;
  &lt;/a&gt;
  Global Unshadowing Trick
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It is possible to access a global variable from a scope where that variable has been shadowed, but not through a typical lexical identifier reference.&lt;/li&gt;
&lt;li&gt;In the global scope, &lt;code&gt;var&lt;/code&gt; and &lt;code&gt;function&lt;/code&gt; declarations also expose themselves as properties (of the same name as the identifier) on the global object—essentially an object representation of the global scope. Consider the program:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;studentName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Suzy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;printStudent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;studentName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;studentName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;studentName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;printStudent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Frank&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// "Frank"&lt;/span&gt;
&lt;span class="c1"&gt;// "Suzy"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;So, as we can notice using &lt;code&gt;window.variableName&lt;/code&gt; we can still access the globally scoped shadowed variable in a function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;window.studentName&lt;/code&gt; is a mirror of the global &lt;code&gt;studentName&lt;/code&gt; variable, not a separate snapshot copy. Changes to one are still seen from the other, in either direction.&lt;/li&gt;
&lt;li&gt;This trick only works for accessing a global scope variable and not a shadowed variable from a nested scope, and even then, only one that was declared with &lt;code&gt;var&lt;/code&gt; or &lt;code&gt;function&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Just because you can doesn't mean you should. Don't shadow a global variable that you need to access, and conversely, avoid using this trick to access a global variable that you've shadowed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#copying-is-not-accessing"&gt;
  &lt;/a&gt;
  Copying Is Not Accessing
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Consider the example:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;special&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;lookingFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;special&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;another&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;special&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;special&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;keepLooking&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;special&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.141592&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;special&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;another&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;special&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Ooo, tricky!&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;special&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;keepLooking&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;lookingFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;112358132134&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 3.141592&lt;/span&gt;
&lt;span class="c1"&gt;// 112358132134&lt;/span&gt;
&lt;span class="c1"&gt;// 42&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;So, we noticed that we were able to get the value of &lt;code&gt;special&lt;/code&gt; variable passed as a parameter to the &lt;code&gt;lookingFor&lt;/code&gt; function in the &lt;code&gt;keepLooking&lt;/code&gt; function. Does that mean we accessed a shadowed variable?
&lt;/li&gt;
&lt;li&gt;No! &lt;code&gt;special: special&lt;/code&gt; is copying the value of the &lt;code&gt;special&lt;/code&gt; parameter variable into another container (a property of the same name). This doesn't mean that we are accessing the parameter &lt;code&gt;special&lt;/code&gt;. It means we are accessing the copy of the value it had at that moment, by way of another container. We cannot reassign the &lt;code&gt;special&lt;/code&gt; parameter to a different value from the inside &lt;code&gt;keepLooking&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;What if I'd used objects or arrays as the values instead of the numbers ( 112358132134, etc.)? Would us having references to objects instead of copies of primitive values "fix" the inaccessibility? No. Mutating the contents of the object value via a reference copy is &lt;strong&gt;not&lt;/strong&gt; the same thing as lexically accessing the variable itself. We still can't reassign the &lt;code&gt;special&lt;/code&gt; parameter.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#illegal-shadowing"&gt;
  &lt;/a&gt;
  Illegal Shadowing
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Not all combinations of declaration shadowing are allowed. &lt;code&gt;let&lt;/code&gt; can shadow &lt;code&gt;var&lt;/code&gt;, but &lt;code&gt;var&lt;/code&gt; can't shadow &lt;code&gt;let&lt;/code&gt;. Consider the example:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;special&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;special&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// totally fine shadowing&lt;/span&gt;
    &lt;span class="c1"&gt;// ..&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;another&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ..&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;special&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;special&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="c1"&gt;// ^^^ Syntax Error&lt;/span&gt;
      &lt;span class="c1"&gt;// ..&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Notice in the &lt;code&gt;another()&lt;/code&gt; function, the inner var &lt;code&gt;special&lt;/code&gt; declaration is attempting to declare a function-wide &lt;code&gt;special&lt;/code&gt;, which in and of itself is fine (as shown by the &lt;code&gt;something()&lt;/code&gt; function).&lt;/li&gt;
&lt;li&gt;The syntax error description, in this case, indicates that &lt;code&gt;special&lt;/code&gt; has already been defined.&lt;/li&gt;
&lt;li&gt;The real reason it's raised as a &lt;code&gt;SyntaxError&lt;/code&gt; is because the &lt;code&gt;var&lt;/code&gt; is basically trying to "cross the boundary" of (or hop over) the &lt;code&gt;let&lt;/code&gt; declaration of the same name, which is not allowed.&lt;/li&gt;
&lt;li&gt;That boundary-crossing prohibition effectively stops at each function boundary, so this variant raises no exception:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;another&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ..&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;special&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://some.url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// totally fine shadowing&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;special&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="c1"&gt;// ..&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#function-name-scope"&gt;
  &lt;/a&gt;
  Function Name Scope
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A function declaration looks like:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;askQuestion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ..&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;While function expression looks like:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;askQuestion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="c1"&gt;//..&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;A function expression, takes in a function as a value, due to this, the function itself will not "hoist".&lt;/li&gt;
&lt;li&gt;Now let's consider a named function expression:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;askQuestion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ofTheTeacher&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ..&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;We know &lt;code&gt;askQuestion&lt;/code&gt; can be accessed in the outer scope, but what about &lt;code&gt;ofTheTeacher&lt;/code&gt; identifier? &lt;code&gt;ofTheTeacher&lt;/code&gt; is declared as an identifier inside the function itself:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;askQuestion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ofTheTeacher&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ofTheTeacher&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;askQuestion&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// function ofTheTeacher()...&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ofTheTeacher&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// ReferenceError: ofTheTeacher is not defined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#arrow-functions"&gt;
  &lt;/a&gt;
  Arrow Functions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Here is how an arrow function is declared:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;askQuestion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ..&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The arrow function doesn't need the word &lt;code&gt;function&lt;/code&gt; to define it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#backing-out"&gt;
  &lt;/a&gt;
  Backing Out
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;When a function (declaration or expression) is defined, a new scope is created. The positioning of scopes nested inside one another creates a natural scope hierarchy throughout the program, called the scope chain.&lt;/li&gt;
&lt;li&gt;Each new scope offers a clean slate, a space to hold its own set of variables. When a variable name is repeated at different levels of the scope chain, shadowing occurs, which prevents access to the outer variable from that point inward.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That concludes this chapter. I'll be back with the notes for the next chapter soon.&lt;/p&gt;

&lt;p&gt;Till then, &lt;strong&gt;Happy Coding :)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you enjoyed reading the notes or have any suggestions or doubts, then feel free to share your views in the comments. &lt;br&gt;
In case you want to connect with me, follow the links below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/rajat2502"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/rajat2502"&gt;GitHub&lt;/a&gt; | &lt;a href="https://twitter.com/rajatverma2502"&gt;Twitter&lt;/a&gt; | &lt;a href="https://medium.com/@rajat2502"&gt;Medium&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>vue</category>
    </item>
    <item>
      <title>Why is learning to code so hard?</title>
      <author>Sophie Kaelin</author>
      <pubDate>Sat, 10 Jul 2021 06:30:46 +0000</pubDate>
      <link>https://dev.to/sophiekaelin/why-is-learning-to-code-so-hard-2921</link>
      <guid>https://dev.to/sophiekaelin/why-is-learning-to-code-so-hard-2921</guid>
      <description>&lt;p&gt;A comment I’ve heard from many people is :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“I’ve tried to learn coding so many times, but it never seems to click.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Is this something you’ve said in the past? Don’t worry, you are definitely not alone. Having taught multiple introductory programming classes before, I’ve noticed this is a sentiment shared by a lot of newly starting developers.&lt;/p&gt;

&lt;p&gt;Learning to code is hard. And while it is true that some people find it easier to learn programming in comparison to others (whether due to higher levels of interest or an aptitude for logical/mathematical reasoning), the way someone goes about teaching themselves to code will impact the likelihood of them developing and retaining those skills.&lt;/p&gt;

&lt;p&gt;It is very tempting, as it is when learning all new skills, to jump straight into creating the cool things. Like crocheting a jumper, or baking a twelve story croquembouche. It is important to differentiate between your end goal (what you want to build), and what you need to know/learn in order to meet that goal.&lt;/p&gt;

&lt;p&gt;Along with that, there are various skills you should develop that will aid you in tackling any blockers or errors you may face when completing a project.&lt;/p&gt;

&lt;p&gt;In this article I will be discussing my top tips I’ve shared with hundreds of past students that helped them grow in confidence and ability, as well as the tips previous mentors have shared with me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-it-so-different-to-learning-other-skills"&gt;
  &lt;/a&gt;
  Why is it so different to learning other skills?
&lt;/h2&gt;

&lt;p&gt;Learning to code is often likened to learning a language or an instrument. So methods such as spaced repetition are regularly recommended to learn new programming languages, just as you would with learning any language. As much as this is a helpful way of learning, it is important to acknowledge the differences between learning a programming language and human language. The main difference being:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is no margin for error when writing code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s say, for example, you are learning to speak French. You practice your French by making conversation with a fluent French speaker. If you were to mispronounce a word, or jumble up the order of words in a sentence, it is likely the other person will still understand what you were trying to say and a conversation will continue. Unfortunately, a computer does not have that sense of intuition. There is no “close enough” in programming — only right or wrong. That’s what makes it so difficult.&lt;/p&gt;

&lt;p&gt;If you were to ask any person with coding experience, I’m certain they would be able to recall multiple times they were stuck on a silly bug for hours if not days because of a spelling mistake or syntax error. And if they can’t… well they’re lying ! I’ve personally felt the embarrassment of being stuck with broken code for hours, only to realise I wrote “docmuent” instead of “document”, or raged when I couldn’t connect to my server only to realise it was running on port 8888 instead of 888. A human can understand what was meant to be said, but a compiler does not have that ability.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y8Z0x9g7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/l0MYE0pAvRSSTyRzi/giphy.gif%3Fcid%3Decf05e47xs6sczgevb3eorjiuol1b3uxfrdijbouucr2ua4m%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y8Z0x9g7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/l0MYE0pAvRSSTyRzi/giphy.gif%3Fcid%3Decf05e47xs6sczgevb3eorjiuol1b3uxfrdijbouucr2ua4m%26rid%3Dgiphy.gif%26ct%3Dg" alt="Facepalm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The unforgiving nature of code is what makes it such a difficult thing to learn. It is also the reason why it is vital to develop a handful of important skills that both limit mistakes made, and enable you to solve and debug errors in order to move forward from those mistakes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-skills-should-i-learn"&gt;
  &lt;/a&gt;
  What skills should I learn?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VrWOTIGc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1581464647110-26e129ce2d02%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1350%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VrWOTIGc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1581464647110-26e129ce2d02%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1350%26q%3D80" alt="Computer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are trying to learn to code, it is important to first learn the following four things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Core programming concepts&lt;/li&gt;
&lt;li&gt;Problem solving strategies&lt;/li&gt;
&lt;li&gt;How to debug your code and&lt;/li&gt;
&lt;li&gt;Core features of your chosen language&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#core-programming-concepts"&gt;
  &lt;/a&gt;
  Core Programming Concepts
&lt;/h3&gt;

&lt;p&gt;It is one thing to copy out an answer you saw on &lt;a href="https://stackoverflow.com/"&gt;Stack Overflow&lt;/a&gt;. It is another to understand what you are writing and what it is accomplishing. It is near impossible to learn how to code without first understanding fundamental components that code is made of. Good things to research first are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Variables &amp;amp; Primitive Data Types&lt;/li&gt;
&lt;li&gt;Compound Data Types (Strings, Arrays, Lists, HashMaps)&lt;/li&gt;
&lt;li&gt;Memory Allocation&lt;/li&gt;
&lt;li&gt;Loops&lt;/li&gt;
&lt;li&gt;Boolean Logic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are various online courses available to teach you these concepts, as well as countless Youtube videos. For the most part, these are transferable skills across different languages.&lt;/p&gt;

&lt;p&gt;Videos by &lt;strong&gt;&lt;a href="https://thecodingtrain.com/beginners/"&gt;“The Coding Train”&lt;/a&gt;&lt;/strong&gt; are what I watched when I first started learning. Another great resource is &lt;strong&gt;&lt;a href="https://www.codecademy.com/"&gt;“Code Academy”&lt;/a&gt;&lt;/strong&gt; if you are looking to challenge yourself and receive feedback.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#problem-solving-strategies"&gt;
  &lt;/a&gt;
  Problem Solving Strategies
&lt;/h3&gt;

&lt;p&gt;Once you’ve got the core concepts down, you should spend some time practicing completing functions to expose yourself to different scenarios and generate your own strategies for how to overcome them.&lt;/p&gt;

&lt;p&gt;Expose yourself to popular &lt;a href="https://www.geeksforgeeks.org/searching-algorithms/"&gt;searching&lt;/a&gt; or &lt;a href="https://www.geeksforgeeks.org/sorting-algorithms/"&gt;sorting&lt;/a&gt; algorithms. Practicing implementing well known algorithms will assist you in developing a better understanding of computer science concepts. Plus, the more practice you get, the better you become at problem solving. This may take a bit of time to improve at, but it can also be very fun.&lt;/p&gt;

&lt;p&gt;Here are some fun resources to practice with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.crackingthecodinginterview.com/"&gt;Cracking the Coding Interview&lt;/a&gt;: unpacks common questions given in coding interviews.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://codingbat.com/java"&gt;Coding Bat&lt;/a&gt;: I used this all the time when I got started. Getting a gold star next to completed problems also feels super rewarding.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://leetcode.com/"&gt;Leet Code&lt;/a&gt;: Another great tool for practicing interview questions.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.geeksforgeeks.org/"&gt;Geeks 4 Geeks&lt;/a&gt;: Fantastic write-ups unpacking popular algorithms and core programming concepts. Great for refreshers on topics you may not have visited in a while.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TLXrdpHM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media2.giphy.com/media/3o7525CnwPAlwoG7qE/giphy.gif%3Fcid%3D790b7611660e78c9a594fef309e5009cf6a8b64e1e4d82cb%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TLXrdpHM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media2.giphy.com/media/3o7525CnwPAlwoG7qE/giphy.gif%3Fcid%3D790b7611660e78c9a594fef309e5009cf6a8b64e1e4d82cb%26rid%3Dgiphy.gif%26ct%3Dg" alt="Gold Star"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-debug-your-code"&gt;
  &lt;/a&gt;
  How to debug your code
&lt;/h3&gt;

&lt;p&gt;When your code breaks it is important to ask yourself: do I understand what I’ve written? Is this broken because I lack understanding on the topic?&lt;/p&gt;

&lt;p&gt;Odds are, you will encounter many MANY errors throughout your journey. Experienced programmers still come across various bugs and challenges they need to unpack every day. The difference between experienced and unexperienced developers is that the former have effective strategies on how to debug and unpack issues in their code.&lt;/p&gt;

&lt;p&gt;The best way to debug your code (especially as a beginner) is to print variables to your console or using debug tools built into the IDE you’re working in. You will gain a better understanding of your code by stepping through it line by line to find the source of your issue. Tracing things in your head can also get super tricky and complex. Try creating memory diagrams and tracing your variables on a piece of paper as you step through code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4kYAT8Jh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/3owzW5c1tPq63MPmWk/giphy.gif%3Fcid%3Decf05e47u7t4zifl0pix7qqmoz9lktlatxajm7vung9wr8jy%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4kYAT8Jh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/3owzW5c1tPq63MPmWk/giphy.gif%3Fcid%3Decf05e47u7t4zifl0pix7qqmoz9lktlatxajm7vung9wr8jy%26rid%3Dgiphy.gif%26ct%3Dg" alt="Hangover"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The more experience you have encountering problems, the better equipped you’ll be with dealing with them in the future. Don’t feel disheartened if you are making a lot of mistakes initially — we all make mistakes, and the learning curve is different for everyone. Take each mistake as a learning opportunity — you’ll be surprised how quickly concepts will come to you later when faced with similar problems&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=NTaNksV-DPY"&gt;Mike from Code Academy highlights some great debugging strategies to practice when getting started.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#core-features-of-your-language"&gt;
  &lt;/a&gt;
  Core Features of your Language
&lt;/h3&gt;

&lt;p&gt;Do a bit of research on the language you want to learn. This isn’t exactly a step, but more something you should be doing and learning by default when learning concepts and practicing problem solving. No doubt you will come across various errors and bugs you cannot explain. By researching syntactical standards of the language of your choice you will be able to identify these mistakes earlier. Maybe try and organise a time to chat with someone who has experience with that language and ask for their tips.&lt;/p&gt;

&lt;p&gt;Another thing to consider is what type of things you are wanting to build. This will impact which language will be the most appropriate to learn. If you are planning to build iOS apps, Swift would be a worthwhile language to consider learning. If you were hoping to build websites, Javascript would be more appropriate. Do your research and ask for advice. There are so many languages and tools out there, it is important to try and find the one with the most appropriate features and functionality to suit your goal product.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#-"&gt;
  &lt;/a&gt;
  * * *
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#extra-tips"&gt;
  &lt;/a&gt;
  Extra Tips
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get yourself a mentor. There is nothing better than having a person to explain your problems to without fear of feeling stupid. Their support will be invaluable throughout your journey.&lt;/li&gt;
&lt;li&gt;There is no indignity in asking for help. I know I keep repeating myself, but mistakes are part of the learning process. It does not make you dumb, it makes you efficient and resourceful.&lt;/li&gt;
&lt;li&gt;Get yourself some buddies. Learning to code is much easier when you are doing it with a group of people.&lt;/li&gt;
&lt;li&gt;Teach someone else. Teaching is one of the best ways of learning, so once you feel comfortable with topics, have a go at teaching someone else what you’ve learnt.&lt;/li&gt;
&lt;li&gt;Start good habits early. Things like naming your variables and functions meaningful things, leaving code comments and using version control. Future you will thank you.&lt;/li&gt;
&lt;li&gt;Take notes. There are resources all over the place, try and collate some notes just for yourself to reference.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://mattr.net.au/meta/google.html"&gt;Google is not always your friend&lt;/a&gt;. Knowing how and what to search is something that comes with experience. Instead of searching for a solution, search for things to help you better understand your problem so that you can come to your own informed solution.&lt;/li&gt;
&lt;li&gt;Buy a rubber duck. I’m serious. Tell it all your problems, and in explaining your problem you might answer your own question.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uBOMDC9Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/3orif4ACshZRKhW6ru/giphy.gif%3Fcid%3Decf05e47t76lq8zcsited7t1y86ykms4tft1f9lnnhug5kyj%26rid%3Dgiphy.gif%26ct%3Dg" alt="Talk in mirror"&gt;
&lt;/li&gt;
&lt;li&gt;This is a bit of a stretch goal, but look into testing. It is important to trial how your code responds to a variety of different edge cases to ensure it works the way you think it does.&lt;/li&gt;
&lt;li&gt;Lastly, and most importantly, don’t expect to know everything straight away! Imposter syndrome is so so common in the computing and engineering community. &lt;a href="https://medium.com/@grace.m.nolan/imposter-syndrome-and-flow-f1628be8ebb4"&gt;My friend Grace wrote an amazing piece on Imposter Syndrome I’d recommend reading.&lt;/a&gt; It is easy to compare yourself to someone who seems to know everything. But try and remind yourself that everyone started somewhere and everyone has been in the position you’re in now. Its a sucky feeling, but if you persist with it and invest the hours, you can be just as knowledgable as your friend with the insanely busy Github profile.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best and worst thing about programming is that the learning never stops, and technology continues to evolve and change. Be patient with yourself, set up a study plan, and practice, practice, practice!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--82YVnAdS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/nwyqBwP65XCAU/giphy.gif%3Fcid%3Decf05e47u7ro50ramr9z4clxgeswcwg4t8oeav0wgh40x5zp%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--82YVnAdS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/nwyqBwP65XCAU/giphy.gif%3Fcid%3Decf05e47u7ro50ramr9z4clxgeswcwg4t8oeav0wgh40x5zp%26rid%3Dgiphy.gif%26ct%3Dg" alt="penguin"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>codenewbie</category>
      <category>education</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Understanding the useReducer hook in React</title>
      <author>Amarjit Singh</author>
      <pubDate>Sat, 10 Jul 2021 06:17:16 +0000</pubDate>
      <link>https://dev.to/amarjits/understanding-the-usereducer-hook-in-react-4k12</link>
      <guid>https://dev.to/amarjits/understanding-the-usereducer-hook-in-react-4k12</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-usereducer"&gt;
  &lt;/a&gt;
  What is useReducer?
&lt;/h2&gt;

&lt;p&gt;useReducer is one of the additional hooks that shipped with React 16.8 . It is an alternative to &lt;code&gt;useState&lt;/code&gt; hook and helps in managing complex state logic that involves multiple sub-values or when the next state depends on the previous one. When combined with &lt;code&gt;useContext&lt;/code&gt; and other hooks, it can be a good alternative to redux.&lt;br&gt;
Also, &lt;code&gt;useReducer&lt;/code&gt; also lets you optimize performance for components that trigger deep updates because you can pass dispatch down instead of callbacks.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-use-usereducer-hook"&gt;
  &lt;/a&gt;
  How to use useReducer hook?
&lt;/h2&gt;

&lt;p&gt;Just like any other hook in React, you first need to import it from react.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, just like the &lt;code&gt;useState&lt;/code&gt; hook, &lt;code&gt;useReducer&lt;/code&gt; hook also returns two things in an Array : the current state value and a &lt;code&gt;dispatch&lt;/code&gt; function to which you can pass an action and invoke later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use Array destructuring to get the state and dispatch.&lt;br&gt;
The &lt;code&gt;useReducer&lt;/code&gt; takes two parameters. The first one is the reducer function and second is the initialState. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#reducer-function-"&gt;
  &lt;/a&gt;
  Reducer Function :
&lt;/h2&gt;

&lt;p&gt;A "reducer" is generally a function that accepts two parameters and returns a single value.&lt;br&gt;
A simple example would be the reducer function that we pass to the &lt;code&gt;reduce()&lt;/code&gt; method in JavaScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Reducer function that we pass to &lt;code&gt;useReducer&lt;/code&gt; is also similar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="c1"&gt;// The reducer function&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;countReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INCREMENT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DECREMENT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;RESET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The reducer function above takes two parameters, first is the current state and second is the action which tells us the operation to be performed. &lt;br&gt;
Here, we have used a &lt;code&gt;Switch&lt;/code&gt; Statement and based on the value of &lt;code&gt;action.type&lt;/code&gt; we perform the corresponding operation on the state.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#dispatching-the-action"&gt;
  &lt;/a&gt;
  Dispatching the action
&lt;/h2&gt;

&lt;p&gt;Now, in order to call the Reducer function to perform an operation on the state we use the &lt;code&gt;dispatch&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;countReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INCREMENT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;+&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DECREMENT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;-&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;RESET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Reset&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we call the &lt;code&gt;dispatch&lt;/code&gt; function, the current state is automatically passed as the first argument. Therefore, we only pass the action object, which has the type of action we want to perform on the state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;The above example is a basic implementation of useReducer. However, it can be used to perform complex state logic. In that case, both our state and action objects will be a collection of many key value pairs.&lt;/p&gt;

&lt;p&gt;In my next blog, I will explain on how to use &lt;code&gt;useReducer&lt;/code&gt; with &lt;code&gt;useContext&lt;/code&gt; for global state management.&lt;/p&gt;

&lt;p&gt;I hope you learnt a lot from this blog. Try implementing what you have learnt in your projects. If you enjoyed this post, I’d be very grateful if you’d share it. Comment below if you have any doubts or questions.&lt;/p&gt;

&lt;p&gt;Thank you for Reading!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Generating Flutter app icons automatically</title>
      <author>Chris Bongers</author>
      <pubDate>Sat, 10 Jul 2021 06:11:55 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/generating-flutter-app-icons-automatically-59lf</link>
      <guid>https://dev.to/dailydevtips1/generating-flutter-app-icons-automatically-59lf</guid>
      <description>&lt;p&gt;Coming from Ionic, it's pretty straightforward to &lt;a href="https://daily-dev-tips.com/posts/ionic-resources/"&gt;generate app icons&lt;/a&gt; for your app. While doing some research, I learned it's easy for Flutter as well!&lt;/p&gt;

&lt;p&gt;Today we'll learn how to automatically generate App Icons for iOS and Android-based on one image source!&lt;/p&gt;

&lt;p&gt;The idea is that apps need many different sizes of App Icons for all kinds of devices and resolutions.&lt;br&gt;
Yet, we don't want to make all these images ourselves.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#adding-the-flutterlaunchericons-plugin"&gt;
  &lt;/a&gt;
  Adding the flutter_launcher_icons plugin
&lt;/h2&gt;

&lt;p&gt;Flutter is built in a way we can easily add plugins.&lt;br&gt;
For this one, head over to your &lt;code&gt;pubspec.yml&lt;/code&gt; file and add the following line to your dev_dependencies.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;dev_dependencies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;flutter_launcher_icons&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;^0.8.0'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we need to install this plugin by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;flutter pub get
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adding-our-app-icon"&gt;
  &lt;/a&gt;
  Adding our app icon
&lt;/h2&gt;

&lt;p&gt;For our base icon to work, I would suggest having a logo that is 1024x1024px in size. Also, don't use alpha or transparency in this image (for iOS). For Android, you can use transparency.&lt;/p&gt;

&lt;p&gt;However, for this demo, I'll use one generic image.&lt;/p&gt;

&lt;p&gt;Place this image in a folder called &lt;code&gt;images&lt;/code&gt; at the root of your directory.&lt;/p&gt;

&lt;p&gt;I made this basic image for my app icon just to demo how it will look.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ETS1DYAL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625379130988/ToaBUOP7J.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ETS1DYAL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625379130988/ToaBUOP7J.png" alt="Basic app icon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Head back over to the &lt;code&gt;pubspec.yml&lt;/code&gt; file and add the following configuration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;flutter_icons&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;android&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;ios&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;image_path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;images/icon.png'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We could also specify a specific image for iOS or Android:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;flutter_icons:
  image_path_ios: &lt;span class="s1"&gt;'images/icon-ios.png'&lt;/span&gt;
  image_path_android: &lt;span class="s1"&gt;'images/icon-android.png'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To generate the icons, we can run the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;flutter pub run flutter_launcher_icons:main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when we run the application on our simulator, we should see the app icon we defined.&lt;br&gt;
I also opened up the Xcode assets to showcase all the different sizes that have been created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LiLP1FNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625379576412/iGxjCZN1E.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LiLP1FNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625379576412/iGxjCZN1E.png" alt="iOS app icons in Flutter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>ios</category>
      <category>android</category>
    </item>
    <item>
      <title>The great Dev Campaign 🎊💯🙏🙏</title>
      <author>Fortune the Dev 🚀❤️</author>
      <pubDate>Sat, 10 Jul 2021 05:58:40 +0000</pubDate>
      <link>https://dev.to/codewithfortune/the-great-dev-campaign-4lbf</link>
      <guid>https://dev.to/codewithfortune/the-great-dev-campaign-4lbf</guid>
      <description>&lt;p&gt;This is a plea to every developer out there who loves code as much as I do, I have a youtube channel that I love with my heart and soul 🤗... Sadly my pc recently crashed and cannot be fixed😭💔... I can't let my dream die here not now not ever. Please if you can this is a fundraiser link to buy me a coffee☕ &lt;a href="https://www.buymeacoffee.com/FortuneCodes"&gt;https://www.buymeacoffee.com/FortuneCodes&lt;/a&gt; any amount will be appreciated 🙏❤️❤️. We aren't all financially enabled so if you can't donate I'll appreciate if you would subscribe and get me to monetization and pliz share this post Kindly. This is my pride and joy💪🥲.&lt;a href="https://youtube.com/c/FortuneDevAcademy"&gt;https://youtube.com/c/FortuneDevAcademy&lt;/a&gt; Hope I'll be back soon producing coding videos soon. Any help is appreciated, signing out pleading, Langat Fortune. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>php</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>LikedList Questions: Reverse a Linked List - Recursive version</title>
      <author>Kathan Vakharia</author>
      <pubDate>Sat, 10 Jul 2021 05:51:03 +0000</pubDate>
      <link>https://dev.to/kathanvakharia/likedlist-questions-reverse-a-linked-list-recursive-version-ige</link>
      <guid>https://dev.to/kathanvakharia/likedlist-questions-reverse-a-linked-list-recursive-version-ige</guid>
      <description>&lt;p&gt;In this series of posts, I will discuss coding questions on the &lt;code&gt;LinkedList&lt;/code&gt; Data structure.&lt;br&gt;
The posts in this series will be organized in the following way,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Question Link ❓&lt;/li&gt;
&lt;li&gt;Possible Explanation 📝&lt;/li&gt;
&lt;li&gt;Documented C++ Code 🧹&lt;/li&gt;
&lt;li&gt;Time and Space Complexity Analysis ⌛🌌&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#the-question"&gt;
  &lt;/a&gt;
  The Question
&lt;/h2&gt;

&lt;p&gt;Given the &lt;code&gt;head&lt;/code&gt; of a singly linked list, reverse the list, and return the reversed list.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://leetcode.com/problems/reverse-linked-list/"&gt;https://leetcode.com/problems/reverse-linked-list/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 Give yourself at least 15-20 mins to figure out the solution :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h2&gt;

&lt;p&gt;Its bit &lt;strong&gt;tricky&lt;/strong&gt; so pay your atmost attention,&lt;/p&gt;

&lt;p&gt;The idea is to make &lt;em&gt;current&lt;/em&gt; node's successor( &lt;code&gt;cur→next&lt;/code&gt; ) point to &lt;em&gt;current&lt;/em&gt; and there by reversing the list. (Here, we are under assumption that the list after current node is already reversed ).&lt;/p&gt;

&lt;p&gt;Lastly, we will return the last node's pointer as the new &lt;code&gt;head&lt;/code&gt; of our reversed linkedlist.&lt;/p&gt;

&lt;p&gt;See the recursion animation to make things more clear, &lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/nkxfM3fYaG8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  C++ Code
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#definition-of-linked-list"&gt;
  &lt;/a&gt;
  Definition of Linked List
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Definition for singly-linked list.&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;ListNode&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;reverseList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/*
        *Approach
            -Let's say list is n0 -&amp;gt; n1 -&amp;gt;... "nk" -&amp;gt; nk+1 -&amp;gt; ...n-&amp;gt;null
            -when we are on nk, we assume nk+1 &amp;lt;-...n i.e. the list ahead is reversed 
        */&lt;/span&gt;

       &lt;span class="c1"&gt;//* When 1. list contains 0 or 1 node, &lt;/span&gt;
       &lt;span class="c1"&gt;//* 2. head is pointing last node&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverseList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//note: To make sure this works, we need to make sure:&lt;/span&gt;
        &lt;span class="c1"&gt;//&amp;gt; head-&amp;gt;next and head exits (base condition)&lt;/span&gt;
        &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//! crux&lt;/span&gt;

        &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#complexity-analysis"&gt;
  &lt;/a&gt;
  Complexity Analysis
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#time-complexity-on"&gt;
  &lt;/a&gt;
  Time Complexity: O(n)
&lt;/h3&gt;

&lt;p&gt;We will visit every node once.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#space-complexity-on"&gt;
  &lt;/a&gt;
  Space Complexity: O(n)
&lt;/h3&gt;

&lt;p&gt;The size of recursion stack as we will go &lt;strong&gt;n&lt;/strong&gt; levels deep.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://leetcode.com/problems/reverse-linked-list/solution/"&gt;https://leetcode.com/problems/reverse-linked-list/solution/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>cpp</category>
      <category>codenewbie</category>
      <category>linkedlist</category>
    </item>
    <item>
      <title>GraphQL Queries - Getting Started</title>
      <author>Eternal Dev</author>
      <pubDate>Sat, 10 Jul 2021 05:31:08 +0000</pubDate>
      <link>https://dev.to/eternaldev/graphql-queries-getting-started-467p</link>
      <guid>https://dev.to/eternaldev/graphql-queries-getting-started-467p</guid>
      <description>&lt;h2&gt;
  &lt;a href="#graphql-queries"&gt;
  &lt;/a&gt;
  GraphQL Queries
&lt;/h2&gt;

&lt;p&gt;Getting started on GraphQL can look like a lot of effort to learn a new syntax and start integrating with backend and frontend but when you learn that the syntax is very easy and familiar, all there is to do is to just jump in and start your first project with GraphQL&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fields"&gt;
  &lt;/a&gt;
  Fields
&lt;/h3&gt;

&lt;p&gt;Fields are the individual data retrieved from the query. Once you have formed the query with fields needed, structure of the data returned follows the same structure as the input which makes it easy to map the fields&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    user {
        name
        id
        dateofbirth
    }
}

Returns:

{
    "data": {
        "user": {
            "name": "Name 1",
            "id": "uniqueid124",
            "dateofbirth" : "23/10/1995"
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#pulling-specific-fields"&gt;
  &lt;/a&gt;
  Pulling specific fields
&lt;/h3&gt;

&lt;p&gt;There will be scenarios where you just want a specific data from a list or fields being transformed based on the business logic of your application. Luckily all the fields can have arguments passed which can simplify the data fetched from the backend and remove the need to have filter logic in the frontend&lt;/p&gt;

&lt;p&gt;Consider the scenario where you have the search filter and each user input is sending a backend api call to your server which filters the list and sends it back. Now you can send the GraphQL query based on the search input and make it easier to display the list in the UI&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    allusers(name: "nam") {
        name
        dateofbirth
    }
}

Returns:
{
    "data": {
        "allusers": [{
            "name" : "name lastname",
            "dateofbirth": "23/03/1997"
        }. {
            "name" : "name middlename",
            "dateofbirth": "03/07/2003"
        }]
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fragments"&gt;
  &lt;/a&gt;
  Fragments
&lt;/h3&gt;

&lt;p&gt;When building a real world application, we tend to follow standard patterns when displaying similar data throughout the application. Fragment help in following the DRY pattern (Don't Repeat Yourself) when it comes to GraphQL.&lt;/p&gt;

&lt;p&gt;When there is blog site and displaying each blog as a card in your application might follow the same pattern.&lt;/p&gt;

&lt;p&gt;&lt;a href="///static/eebf201c1226ca47c78f7eac9b0a6650/4ee7f/post_design.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vOV3RSFA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://eternaldev.com/static/eebf201c1226ca47c78f7eac9b0a6650/4ee7f/post_design.png" alt="Blog Post Design" title="Blog Post Design"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    mostViewedBlog: blog(id: "1234") {
        ...blogFields
    }
    mostRecentBlog: blog(id: "43243") {
        ...blogFields
    }
    relatedBlog: blog(idL "323") {
        ...blogFields
    }
}

fragment blogFields on Blog {
  name
  description
  image_url
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have made our query easier to read and also removed repetition in the query using fragment. When declaring the fragment &lt;code&gt;on&lt;/code&gt; keyword defines on which fields you are going to use the fragment. GraphQL then allows to define those fragments on those fields which prevent errors and making sure that fragment fields are present.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bonus:&lt;/strong&gt; Keen observers would have noticied the last query having some name on the left separated by &lt;code&gt;:&lt;/code&gt;. Those are aliases and you can use them to rename the result of the field&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Result:
{
    "data": {
        "mostViewedBlog" : {
            "name": "GraphQL Queries",
            "description" : "Description of GraphQL Queries",
            "image_url": "blogimage.png"
        },
        "mostRecentBlog" : {
            "name": "What is GraphQL",
            "description" : "Description of GraphQL",
            "image_url": "blogimage.png"
        },
        "relatedBlog" : {
            "name": "GraphQL Mutation",
            "description" : "Description of GraphQL Mutation",
            "image_url": "blogimage.png"
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#practical-exercise"&gt;
  &lt;/a&gt;
  Practical Exercise
&lt;/h2&gt;

&lt;p&gt;Start learning these concepts better, you can start a quick project in Hasura and learn GraphQL queries by building api of the feed with a search input&lt;/p&gt;

&lt;p&gt;Here is an simple design to spark your creativity&lt;/p&gt;

&lt;p&gt;&lt;a href="///static/4434e8f65b2da09f1ca6d80f11fe87d3/9f933/feed_app.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZRYqJJ8Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://eternaldev.com/static/4434e8f65b2da09f1ca6d80f11fe87d3/9f933/feed_app.png" alt="Feed app design" title="Feed app design"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are not familiar with Hasura follow this multipart tutorial on how to get started with Hasura&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.eternaldev.com/blog/build-sports-team-api-with-graphql-hasura-and-postgresql-part-1/"&gt;Build Sports API with GraphQL - Hasura - Part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Stay tuned by subscribing to our mailing list and joining our Discord community&lt;/p&gt;

&lt;p&gt;&lt;a href="https://discord.gg/AUjrcK6eep"&gt;Discord&lt;/a&gt;&lt;/p&gt;

</description>
      <category>graphql</category>
    </item>
  </channel>
</rss>
