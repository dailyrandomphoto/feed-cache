<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What's your favorite programming newsletter?</title>
      <author>Amruta Ranade</author>
      <pubDate>Tue, 20 Apr 2021 14:42:07 +0000</pubDate>
      <link>https://dev.to/amrutaranade/what-s-your-favorite-newsletter-2iad</link>
      <guid>https://dev.to/amrutaranade/what-s-your-favorite-newsletter-2iad</guid>
      <description>&lt;p&gt;I start every morning with the Morning Brew (for tech/business news) and Skimm (for world news) and would love to add a tech/programming newsletter to the mix. What's your favorite newsletter?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>webdev</category>
      <category>writing</category>
    </item>
    <item>
      <title>Building a Professionally Designed Website Episode 2 - CSS Framework, Baseline Grid, NextJS Structure </title>
      <author>James Mikrut</author>
      <pubDate>Tue, 20 Apr 2021 14:38:04 +0000</pubDate>
      <link>https://dev.to/payloadcms/building-a-professionally-designed-website-episode-2-css-framework-baseline-grid-nextjs-structure-29ci</link>
      <guid>https://dev.to/payloadcms/building-a-professionally-designed-website-episode-2-css-framework-baseline-grid-nextjs-structure-29ci</guid>
      <description>&lt;h3&gt;
  &lt;a href="#this-is-episode-2-in-a-series-that-takes-you-through-how-to-build-a-highend-website-from-a-design-agencys-perspective-using-payload-cms-typescript-and-statically-rendered-nextjs"&gt;
  &lt;/a&gt;
  This is Episode 2 in a series that takes you through how to build a high-end website from a design agency's perspective using &lt;a href="https://payloadcms.com"&gt;Payload CMS&lt;/a&gt;, TypeScript, and statically rendered NextJS.
&lt;/h3&gt;

&lt;p&gt;If you missed the first episode, I'd highly recommend going back and watching that one before jumping in here. In that first episode, we covered a lot of ground, including the setup of the entire Payload CMS needed to drive the content of the website. &lt;/p&gt;

&lt;p&gt;In that first episode, we defined all &lt;a href="https://payloadcms.com/docs/configuration/collections"&gt;Collections&lt;/a&gt; and &lt;a href="https://payloadcms.com/docs/configuration/globals"&gt;Globals&lt;/a&gt; necessary as well as went in-depth with layout-building &lt;a href="https://payloadcms.com/docs/fields/blocks"&gt;Block&lt;/a&gt; definitions.&lt;/p&gt;

&lt;p&gt;Now, in Episode 2, we're ready to start work on the frontend. In this episode, we dive into how to build a lightweight but powerful CSS framework that we'll rely on through the entire site. We'll define breakpoints, media queries, typography, colors, a global reset, and finally - a really awesome way to build a baseline grid using &lt;code&gt;rem&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/N8PCZxJlz5w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=N8PCZxJlz5w?t=0s"&gt;0:00​​&lt;/a&gt; - Intro&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=N8PCZxJlz5w?t=121s"&gt;2:01​​&lt;/a&gt; - React JSS + NextJS setup&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=N8PCZxJlz5w?t=267s"&gt;4:27​​&lt;/a&gt; - Writing our first global styles&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=N8PCZxJlz5w?t=627s"&gt;10:27​​&lt;/a&gt; - The baseline grid - in CSS rems&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=N8PCZxJlz5w?t=1030s"&gt;17:10​​&lt;/a&gt; - Reusable values (breakpoints, colors)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=N8PCZxJlz5w?t=1117s"&gt;19:37​&lt;/a&gt; - Typography&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=N8PCZxJlz5w?t=1368s"&gt;22:48​&lt;/a&gt; - CSS media queries&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=N8PCZxJlz5w?t=1644s"&gt;27:24​&lt;/a&gt; - Installing dependencies (CSS grid, Modal, Window Info)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=N8PCZxJlz5w?t=2115s"&gt;35:15​​&lt;/a&gt; - First component - GridContainer&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=N8PCZxJlz5w?t=2567s"&gt;42:47​​&lt;/a&gt; - Testing our grid, discussing NextJS page folder&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=N8PCZxJlz5w?t=2868s"&gt;47:48​​&lt;/a&gt; - Stubbing out the Template, Header and Footer components&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=N8PCZxJlz5w?t=3322s"&gt;55:22​&lt;/a&gt; - Outro&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#give-payload-a-shot"&gt;
  &lt;/a&gt;
  Give Payload a shot
&lt;/h3&gt;

&lt;p&gt;If you're a JS / TS developer and haven't heard of &lt;a href="https://payloadcms.com"&gt;Payload&lt;/a&gt; yet, you should give it a shot. Its developer experience is second to none and it just feels &lt;em&gt;right&lt;/em&gt; to build sites and apps with it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#feedback-welcome"&gt;
  &lt;/a&gt;
  Feedback welcome
&lt;/h3&gt;

&lt;p&gt;As always, let us know what you think about the video - and about Payload! &lt;/p&gt;

</description>
      <category>typescript</category>
      <category>nextjs</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>One of my React projects</title>
      <author>Daniil</author>
      <pubDate>Tue, 20 Apr 2021 14:31:29 +0000</pubDate>
      <link>https://dev.to/a03z/one-of-my-react-projects-2bnh</link>
      <guid>https://dev.to/a03z/one-of-my-react-projects-2bnh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#so-today-ive-done-this-poject-where-you-enter-a-keyword-and-list-of-images-from-unsplash-appear-under-input"&gt;
  &lt;/a&gt;
  So today i've done this poject, where you enter a keyword and list of images from Unsplash appear under input.
&lt;/h2&gt;

&lt;p&gt;I was thinking about projects for portfolio/practice and then saw this article: &lt;a href="https://dev.to/siva2910/my-first-react-project-24lo"&gt;click&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've done almost the same, but with React Hook Forms, Typescript and ChakraUI. &lt;/p&gt;

&lt;p&gt;Here's links: &lt;br&gt;
&lt;a href="https://github.com/a03z/search-image-by-word"&gt;GitHub&lt;/a&gt;&lt;br&gt;
&lt;a href="https://goofy-visvesvaraya-c1730a.netlify.app/"&gt;Netlify&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TODO: infinity loading (when u scroll to the bottom of the app new list of images load)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks for attention&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;Open for suggestions&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Challenge: Create a `pad` function without using loops!</title>
      <author>Gio</author>
      <pubDate>Tue, 20 Apr 2021 14:28:32 +0000</pubDate>
      <link>https://dev.to/_gdelgado/challenge-create-a-pad-function-without-using-loops-2id5</link>
      <guid>https://dev.to/_gdelgado/challenge-create-a-pad-function-without-using-loops-2id5</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Photo Credit: Kylie Fitts / &lt;a href="http://www.kyliefitts.com"&gt;www.kyliefitts.com&lt;/a&gt; &amp;amp; &lt;a href="https://unsplash.com"&gt;https://unsplash.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In any language, implement a function &lt;code&gt;pad&lt;/code&gt; that takes a value and conditionally pads it with &lt;code&gt;n&lt;/code&gt; number of &lt;code&gt;padding&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;padded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pad&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;👋&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;requiredLength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;padded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// --&amp;gt; ***👋&lt;/span&gt;

&lt;span class="c1"&gt;//////////&lt;/span&gt;
&lt;span class="c1"&gt;// Case 2: do not pad a value whose length is equal to `requiredLength`&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;padded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pad&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;👋👋👋👋&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;requiredLength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;padded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// --&amp;gt; 👋👋👋👋&lt;/span&gt;


&lt;span class="c1"&gt;//////////&lt;/span&gt;
&lt;span class="c1"&gt;// Case 3: do not overwrite a value that is longer than `requiredLength`&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;padded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pad&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;👋👋👋👋👋👋&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;requiredLength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;padded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// --&amp;gt; 👋👋👋👋👋👋&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#submit-your-solutions-down-below"&gt;
  &lt;/a&gt;
  Submit your solutions down below! 👇👇👇
&lt;/h4&gt;

&lt;p&gt;Remember, your solution cannot use any sort of loop construct such as &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;, or &lt;code&gt;for&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: Here is &lt;a href="https://gist.github.com/supermacro/1cdb1dbc40d3a5efa05ccd164162cc9f"&gt;my solution&lt;/a&gt; in typescript.&lt;/p&gt;

</description>
      <category>challenge</category>
      <category>functional</category>
    </item>
    <item>
      <title>React vs Angular comparison: Which is better for your project in 2021?</title>
      <author>Pawan Bhayde</author>
      <pubDate>Tue, 20 Apr 2021 14:21:19 +0000</pubDate>
      <link>https://dev.to/pawanbhayde/react-vs-angular-comparison-which-is-better-for-your-project-in-2021-4o5a</link>
      <guid>https://dev.to/pawanbhayde/react-vs-angular-comparison-which-is-better-for-your-project-in-2021-4o5a</guid>
      <description>&lt;p&gt;Choosing React or Angular may be a debating issue raised by many developers. Everybody, from a newcomer and a freelancer to a talented architect, is trying to know where to start out . do you have to got to craft a technique for your project, you'll need to get an experienced opinion. Our experts have conducted an in depth React vs AngularJS (Angular 2+) comparison to save lots of some time.&lt;/p&gt;

&lt;p&gt;Comparing React vs Angular, you’ll be ready to understand which technology is best for your case and environment. &lt;/p&gt;

&lt;p&gt;AngularJS is an open-source JavaScript framework maintained by Google and community which may help developers create single-page applications. AngularJS which is made on top of JavaScript is making the lifetime of developers easy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is React a framework? Advantages of React.JS&lt;/strong&gt;&lt;br&gt;
React may be a interface library that was developed at Facebook for creating interactive, stateful, and reusable interface components. it's used at Facebook in production. ReactJS is sweet for rendering complex user interfaces with high performance. the essential fundamental behind React is that the concept of virtual DOM (Document Object Model). ReactJS effectively uses virtual DOM which may be rendered either at the client-side or server-side and communicate back and forth. The Virtual DOM renders subtrees of nodes based upon state changes.&lt;/p&gt;

&lt;p&gt;React is lighter than Angular. it's crammed with less number of conditions and eliminates the necessity to use extra elements like plugins. React is against two-way binding, it intentionally stays faraway from it and makes use of explicit updates instead.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Questions to ask yourself if you can’t decide between Angular popularity and React Js advantages&lt;/strong&gt;&lt;br&gt;
When it involves selecting the proper tool for your case, you ought to ask yourself: “Does it work for me?”, “Will it's good to finish my tasks?” Here are more specific questions you ought to care about:&lt;/p&gt;

&lt;p&gt;1 Is your tool mature enough and who developed it?&lt;br&gt;
2 What are the features you'll need?&lt;br&gt;
3 What does one realize the tool’s ecosystem?&lt;br&gt;
4 Which paradigms, patterns, and architecture does your tool employ?&lt;/p&gt;

&lt;p&gt;Below are some questions for you and your team members:&lt;/p&gt;

&lt;p&gt;1 Does a tool fit well together with your project requirements?&lt;br&gt;
2 Will your team be ready to easily master this technology?&lt;br&gt;
3 Have your developers had the experience of using it?&lt;/p&gt;

&lt;p&gt;Why does one need answering these questions? By giving the answers you'll be ready to assess the technology of your choosing and in our case, to work out what's the difference between React and Angular.&lt;/p&gt;

&lt;p&gt;Before beginning to compare the pros and cons React and Angular have, we should always mention that it’s not actually fair to contrast those. And here is why: React may be a UI library whereas Angular may be a sophisticated framework.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;original post :-&lt;/strong&gt; &lt;a href="https://webdevpawan.blogspot.com/2021/04/react-vs-angular-comparison-which-is.html"&gt;https://webdevpawan.blogspot.com/2021/04/react-vs-angular-comparison-which-is.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note:- visit my youtube channel for frontend tutorials&lt;br&gt;
&lt;strong&gt;subscribe to my youtube channel :-&lt;/strong&gt; &lt;a href="https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg"&gt;https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resent post :-&lt;/strong&gt; &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/pawanbhayde" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zic_2tNp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--C-k5zhb8--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/616392/67585460-1ef8-429f-9da3-98339a4e0449.jpg" alt="pawanbhayde image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pawanbhayde/30-website-to-find-designs-for-your-next-projects-1kih" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;30+ website to find designs for your next projects&lt;/h2&gt;
      &lt;h3&gt;Pawan Bhayde ・ Apr 20 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#design&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>react</category>
      <category>angular</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Creating an API With Python Flask to Upload Files to Cloudinary</title>
      <author>Rebeccca Peltz</author>
      <pubDate>Tue, 20 Apr 2021 14:20:40 +0000</pubDate>
      <link>https://dev.to/rebeccapeltz/creating-an-api-with-python-flask-to-upload-files-to-cloudinary-1a0a</link>
      <guid>https://dev.to/rebeccapeltz/creating-an-api-with-python-flask-to-upload-files-to-cloudinary-1a0a</guid>
      <description>&lt;p&gt;Creating an API With Python Flask to Upload Files to Cloudinary&lt;/p&gt;

&lt;p&gt;Meta Title: Creating an API With Python Flask to Upload Files to Cloudinary&lt;br&gt;
Meta Description: Learn how to build an API with Python Flask and Cloudinary's Python SDk to upload files of any format to Cloudinary.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/rebeccapeltz/flask-cld-upload"&gt;Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cloudinary offers SDKs for many programming languages and frameworks. Even though it also offers an Upload API endpoint for both back-end and front-end code, most developers find the SDKs very helpful. If you're working with a powerful back-end framework like Python Flask, you'll be happy to hear that a Python SDK is now available.&lt;br&gt;&lt;br&gt;
This tutorial walks you through the process of building an API to upload images to Cloudinary. You can also upload other file types, including video and even nonmedia files, with the API.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#understanding-the-difference-between-back-end-and-front-end"&gt;
  &lt;/a&gt;
  Understanding the Difference Between Back End and Front End
&lt;/h2&gt;

&lt;p&gt;Generally, code that runs on the server is &lt;strong&gt;back end&lt;/strong&gt;, and code that runs on the browser is &lt;strong&gt;front end&lt;/strong&gt;. However, since server code can render HTML, CSS,  and JavaScript, which all run on the browser, confusion sometimes results. &lt;br&gt;
In the context of the Cloudinary SDKs, the back-end ones can read secret credentials, which should not be shared in the front end. In other words, you must never expose the back-end environment variables in the front end because front-end SDKs cannot hide credentials that are meant to be kept secret. As a solution, you can upload browser code with Cloudinary’s &lt;a href="https://cloudinary.com/documentation/upload_presets"&gt;&lt;strong&gt;unsigned presets&lt;/strong&gt;&lt;/a&gt; without revealing secret credentials. A better way would be to build a back-end API for secure uploads, keeping your &lt;code&gt;API_SECRET&lt;/code&gt; credential hidden. Read on to see how to do that with Cloudinary’s Python SDK and Python Flask or Python Django.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#coding-a-flask-api-to-upload-to-cloudinary"&gt;
  &lt;/a&gt;
  Coding a Flask API to Upload to Cloudinary
&lt;/h2&gt;

&lt;p&gt;The Flask framework makes it easy to define routes and their functionalities. To get started, first create a route named &lt;code&gt;/upload&lt;/code&gt;, which accepts a &lt;code&gt;POST&lt;/code&gt; that contains &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST"&gt;multipart/form-data&lt;/a&gt;. You then package up the image file input into a &lt;code&gt;FormData&lt;/code&gt; object in a submit handler and &lt;code&gt;POST&lt;/code&gt; it to your own Flask API to call Cloudinary’s Upload API, which is configured with your full set of Cloudinary credentials.&lt;br&gt;&lt;br&gt;
Flask's &lt;code&gt;request&lt;/code&gt; option enables you to get data from the client. When submitting files, such as uploading images, you can call upon &lt;code&gt;request&lt;/code&gt; to access them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;file_to_upload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'file'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The data retrieved from &lt;code&gt;request.files['file']&lt;/code&gt; is an instance of &lt;code&gt;werkzeug.FileStorage&lt;/code&gt;. The object can be handed off to the Python SDK’s Upload function. Flask then wraps &lt;a href="https://palletsprojects.com/p/werkzeug/"&gt;Werkzeug&lt;/a&gt;, which handles the details of the Web Server Gateway Interface (WSGI).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;file_to_upload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;upload_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cloudinary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uploader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_to_upload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;upload_result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For uploads to Cloudinary, the default &lt;code&gt;resource_type&lt;/code&gt; is &lt;code&gt;image&lt;/code&gt;. To expand or create a new Flask API, add &lt;code&gt;resource_type: 'video'&lt;/code&gt; or &lt;code&gt;resource_type: 'raw'&lt;/code&gt; for video or raw files, respectively.  &lt;a href="https://cloudinary.com/documentation/upload_images#uploading_non_media_files_as_raw_files"&gt;Raw&lt;/a&gt; refers to nonmedia file formats, including text and JSON.&lt;br&gt;
Finally, &lt;code&gt;upload_result&lt;/code&gt; is an object that contains the upload response. To complete the actions of your &lt;code&gt;upload&lt;/code&gt; API, return that response to the client, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;upload_result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Below is the complete code of your &lt;code&gt;upload&lt;/code&gt; API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/upload"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;upload_file&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'in upload route'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;cloudinary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cloud_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'CLOUD_NAME'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;api_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'API_KEY'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
    &lt;span class="n"&gt;api_secret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'API_SECRET'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="n"&gt;upload_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;file_to_upload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'file'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'%s file_to_upload'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file_to_upload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;file_to_upload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;upload_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cloudinary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uploader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_to_upload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;upload_result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;upload_result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-the-flask-app"&gt;
  &lt;/a&gt;
  Setting Up the Flask App
&lt;/h2&gt;

&lt;p&gt;Next, follow the steps below to build the app. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#set-up-the-virtual-environment"&gt;
  &lt;/a&gt;
  Set Up the Virtual Environment
&lt;/h3&gt;

&lt;p&gt;The command below establishes your virtual environment. This is an important step for encapsulating the libraries you'll be using in this app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python3 &lt;span class="nt"&gt;-m&lt;/span&gt; venv &lt;span class="nb"&gt;env
source env&lt;/span&gt;/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To  deactivate the environment, type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;deactivate
&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#install-flask"&gt;
  &lt;/a&gt;
  Install Flask
&lt;/h3&gt;

&lt;p&gt;Install Flask with this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python3 &lt;span class="nt"&gt;-m&lt;/span&gt; pip &lt;span class="nb"&gt;install &lt;/span&gt;&lt;span class="nv"&gt;Flask&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;1.1.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#add-a-raw-requirementstxt-endraw-file"&gt;
  &lt;/a&gt;
  Add a &lt;code&gt;requirements.txt&lt;/code&gt; File
&lt;/h3&gt;

&lt;p&gt;Create a &lt;code&gt;requirements.txt&lt;/code&gt; file to keep track of all the versioned libraries you need for the app and to facilitate future deployment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python3 &lt;span class="nt"&gt;-m&lt;/span&gt; pip freeze &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#upgrade-the-python-package-installer"&gt;
  &lt;/a&gt;
  Upgrade the Python Package Installer
&lt;/h3&gt;

&lt;p&gt;If necessary, upgrade the Python package installer, called PIP, with the command below. The command might vary, depending on your local Python installation. As shown below, the &lt;code&gt;freeze&lt;/code&gt; command writes the library and version to the &lt;code&gt;requirements.txt&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;usr/local/opt/python@3.9/bin/python3.9 &lt;span class="nt"&gt;-m&lt;/span&gt; pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--upgrade&lt;/span&gt; pip
python3 &lt;span class="nt"&gt;-m&lt;/span&gt; pip freeze &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#install-cloudinary"&gt;
  &lt;/a&gt;
  Install Cloudinary
&lt;/h3&gt;

&lt;p&gt;Next, install Cloudinary to gain access to its Upload API for the Python SDK.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; python3 &lt;span class="nt"&gt;-m&lt;/span&gt; pip &lt;span class="nb"&gt;install &lt;/span&gt;cloudinary
 python3 &lt;span class="nt"&gt;-m&lt;/span&gt; pip freeze &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#add-cors-support"&gt;
  &lt;/a&gt;
  Add CORS support
&lt;/h3&gt;

&lt;p&gt;If you want to access your &lt;code&gt;upload&lt;/code&gt; API from a client served from a different host, add Cross Origin Resource Sharing (CORS) support:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python3 &lt;span class="nt"&gt;-m&lt;/span&gt; pip &lt;span class="nb"&gt;install &lt;/span&gt;flask-cors
python3 &lt;span class="nt"&gt;-m&lt;/span&gt; pip freeze &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can add code to configure CORS for all the APIs and, specifically, the &lt;code&gt;upload&lt;/code&gt; API. The code below demonstrates both options.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_cors&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CORS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cross_origin&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# After creating the Flask app, you can make all APIs allow cross-origin access.
&lt;/span&gt;&lt;span class="n"&gt;CORS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# or a specific API
&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/upload"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;cross_origin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#work-with-environment-variables"&gt;
  &lt;/a&gt;
  Work With Environment Variables
&lt;/h3&gt;

&lt;p&gt;You can easily load environment variables with Python. Conveniently, the &lt;code&gt;python-dotenv&lt;/code&gt; library is modeled on the Node.js &lt;code&gt;dotenv&lt;/code&gt; package. You need three Cloudinary environment variables, i.e., &lt;code&gt;CLOUD_NAME&lt;/code&gt;, &lt;code&gt;API_KEY&lt;/code&gt;, and &lt;code&gt;API_SECRET&lt;/code&gt;, for your code, but don't share &lt;code&gt;API_SECRET&lt;/code&gt;.  You can export those variables to the local environment. When you deploy to Heroku, you can add them to make them available to the app when it runs in a Heroku container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dotenv&lt;/span&gt;
&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In your &lt;code&gt;upload&lt;/code&gt; API, you read in the environment variables with the &lt;code&gt;cloudinary.config()&lt;/code&gt; function. You then access those variables with the &lt;code&gt;os.getenv()&lt;/code&gt; function in the &lt;code&gt;dotenv&lt;/code&gt; library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;cloudinary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cloud_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'CLOUD_NAME'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;api_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'API_KEY'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
    &lt;span class="n"&gt;api_secret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'API_SECRET'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When working locally, you can create a gitignore'd &lt;code&gt;.env&lt;/code&gt; file that contains your Cloudinary credentials for local testing. The values for those credentials are displayed in your Cloudinary console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;CLOUD_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;CLOUD_NAME
&lt;span class="nv"&gt;API_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;API_KEY
&lt;span class="nv"&gt;API_SECRET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;API_SECRET
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, install the &lt;code&gt;python-dotenv&lt;/code&gt; library:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python3 &lt;span class="nt"&gt;-m&lt;/span&gt; pip &lt;span class="nb"&gt;install &lt;/span&gt;python-dotenv
python3 &lt;span class="nt"&gt;-m&lt;/span&gt; pip freeze &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing-the-api-locally"&gt;
  &lt;/a&gt;
  Testing the API Locally
&lt;/h2&gt;

&lt;p&gt;You're now ready to test the app locally. You can do end-to-end testing with Postman and a local form that points at a server running on &lt;code&gt;localhost&lt;/code&gt;.&lt;br&gt;
Create your app with an upload function by downloading, cloning, or copying from &lt;a href="https://github.com/rebeccapeltz/flask-cld-upload/blob/master/app.py"&gt;this GitHub repository&lt;/a&gt;. Add your credentials to a &lt;code&gt;.env&lt;/code&gt; file and then start your server on &lt;code&gt;localhost&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python3 app.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above command opens a server at &lt;code&gt;http://127.0.0.1:5000/&lt;/code&gt;. Note that the default port is 5000.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-with-postman"&gt;
  &lt;/a&gt;
  Test With Postman
&lt;/h3&gt;

&lt;p&gt;In Postman, do the following: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Set the method to &lt;code&gt;POST&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Set the body type to &lt;code&gt;form-data&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Establish Key/Value pairs for input. Set the value for the Key to &lt;code&gt;file&lt;/code&gt;. Mouse over the &lt;strong&gt;Key&lt;/strong&gt; field and choose &lt;strong&gt;Text&lt;/strong&gt; or &lt;strong&gt;File&lt;/strong&gt; from the drop-down menu. Under &lt;strong&gt;File&lt;/strong&gt; is a &lt;strong&gt;Select Files&lt;/strong&gt; button; click it to select a file from your local drive.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Send&lt;/strong&gt; to process the request.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The Cloudinary Upload API response is displayed at the bottom of the page&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H1d1GRdy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-marketing/image/upload/w_700%2Cc_fill%2Cf_auto%2Cq_auto%2Cdpr_2.0/Web_Assets/blog/localpostman.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H1d1GRdy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-marketing/image/upload/w_700%2Cc_fill%2Cf_auto%2Cq_auto%2Cdpr_2.0/Web_Assets/blog/localpostman.jpg" alt="Localhost with Postman"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-with-a-local-form"&gt;
  &lt;/a&gt;
  Test With a Local Form
&lt;/h3&gt;

&lt;p&gt;Follow these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open the &lt;code&gt;index.html&lt;/code&gt; file with a local HTTP server. Choose a local file and click &lt;strong&gt;Upload&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the JavaScript code below. The &lt;code&gt;fetch&lt;/code&gt; command calls the server that runs on  &lt;code&gt;localhost&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://127.0.0.1:5000/upload&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;If the process is successful, the Cloudinary Upload API response is displayed in the console.  Don't forget to set &lt;code&gt;event.preventDefault();&lt;/code&gt; for the submit handler. Otherwise, you'll get a page refresh and won't see your log.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Post a file in a submit handler by creating a &lt;code&gt;FormData&lt;/code&gt; object and appending the file, as shown in the code below.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fileInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The above code packages up the file you select in your form input as if you had submitted a multipart form. A multipart form is important for submitting files because each input is sent as a block of data, separated by boundaries. &lt;br&gt;
The result is then displayed in your console, like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m_fXnJbX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-marketing/image/upload/w_700%2Cc_fill%2Cf_auto%2Cq_auto%2Cdpr_2.0/Web_Assets/blog/formlocal.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m_fXnJbX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-marketing/image/upload/w_700%2Cc_fill%2Cf_auto%2Cq_auto%2Cdpr_2.0/Web_Assets/blog/formlocal.jpg" alt="local form"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#deploying-the-flask-app-to-heroku"&gt;
  &lt;/a&gt;
  Deploying the Flask App to Heroku
&lt;/h2&gt;

&lt;p&gt;Heroku is a platform as a service (PaaS) for serving prototypes or production-ready apps. Host the API you just built on Heroku by doing the following: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a free account on Heroku.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install &lt;a href="https://gunicorn.org/"&gt;Gunicorn&lt;/a&gt;, short for Green Unicorn, a Python WSGI HTTP server for hosting apps.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;python3 &lt;span class="nt"&gt;-m&lt;/span&gt; pip &lt;span class="nb"&gt;install &lt;/span&gt;&lt;span class="nv"&gt;gunicorn&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;20.0.4
python3 &lt;span class="nt"&gt;-m&lt;/span&gt; pip freeze &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Create a file called &lt;code&gt;Prodfile&lt;/code&gt; with instructions for Heroku to start your app with Gunicorn:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;web: gunicorn app:app
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Create a file called &lt;code&gt;runtime.txt&lt;/code&gt; that contains the Python version you want to use:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python-3.9.1
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Deploy with Git:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;git init
git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt;&lt;span class="s2"&gt;"my first commit"&lt;/span&gt;
&lt;span class="c"&gt;# Create a new Heroku app&lt;/span&gt;
heroku create
&lt;span class="c"&gt;# You will get a URL where the app will be hosted&lt;/span&gt;
git remote &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;span class="c"&gt;# will confirm that you have set up a remote to push to Heroku&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#if-you-have-an-existing-heroku-app-that-you-created-in-the-heroku-gui"&gt;
  &lt;/a&gt;
  If you have an existing Heroku app that you created in the Heroku GUI
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#you-can-add-it-with-this-command-instead-of-creating-a-new-one"&gt;
  &lt;/a&gt;
  you can add it with this command instead of creating a new one
&lt;/h1&gt;

&lt;p&gt;heroku git:remote -a thawing-inlet-61413&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#to-deploy-you-can-now-just-push-to-heroku"&gt;
  &lt;/a&gt;
  To deploy, you can now just push to Heroku
&lt;/h1&gt;

&lt;p&gt;git push heroku master&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#open-your-server-its-nice-to-have-a-get-method-so-you-can-verify-like-this"&gt;
  &lt;/a&gt;
  Open your server (it's nice to have a GET method so you can verify like this)
&lt;/h1&gt;

&lt;p&gt;heroku open&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#to-log-in-to-heroku-from-the-command-line-type"&gt;
  &lt;/a&gt;
  To log in to Heroku from the command line, type:
&lt;/h1&gt;

&lt;p&gt;heroku login&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#youll-then-be-prompted-to-open-the-webpage-to-log-in"&gt;
  &lt;/a&gt;
  You’ll then be prompted to open the webpage to log in
&lt;/h1&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;


You can build the new Heroku app with the CLI. However, as noted above, if you built it on the heroku.com dashboard, you can just add the link Heroku created for you to a `git:remote` command.

### Loading Environment Variables on Heroku

To load environment variables on Heroku, open the dashboard and navigate to your new server instance. Click the **Settings** tab and scroll down to the **Config Vars** section. Click **Reveal Config Vars**, where you can enter Key/Value pairs. This is where you load your Cloudinary environment variables: `CLOUD_NAME`, `API_KEY`, and `API_SECRET`.

![Heroku Config Vars](https://res.cloudinary.com/cloudinary-marketing/image/upload/w_700,c_fill,f_auto,q_auto,dpr_2.0/Web_Assets/blog/environmentvars.jpg)

For more options for setting up `prod` and `dev` instances, see the [Heroku documentation](https://devcenter.heroku.com/articles/git).

## Testing the API Deployed on Heroku
If you have a `GET` method API like the "Hello World!" in the `app.py` example, you can open the Heroku app in the browser.

For end-to-end testing, you can `POST` to the Heroku server link from Postman. The result is similar to that for local testing.

![Remote Post](https://res.cloudinary.com/cloudinary-marketing/image/upload/w_700,c_fill,f_auto,q_auto,dpr_2.0/Web_Assets/blog/remotepost.jpg)

Alternatively, modify the `index.html` file to post to your Heroku server. Just add your Heroku server link to the `fetch` command, like this:



```JavaScript
fetch("https://xxxx.herokuapp.com", options)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#securing-the-app"&gt;
  &lt;/a&gt;
  Securing the App
&lt;/h2&gt;

&lt;p&gt;You might have noticed that the Heroku deployment link has been erased from the images above. That’s for security. Deploying this app to Heroku enables you to upload data to Cloudinary. If the link is not secured for use on an authenticated webpage only, anyone can upload to your Cloudinary cloud. Even though you are hiding your environment variables, you’d have created a public method to change data on your cloud.&lt;/p&gt;

&lt;p&gt;This tutorial does not cover how to set up authentication. Many options are available for authentication of API routes. You might want to look into Auth0, Google, or GitHub. Alternatively, build your own process based on your user database for this type of authentication.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#moving-on"&gt;
  &lt;/a&gt;
  Moving On
&lt;/h2&gt;

&lt;p&gt;Once you get this API running, you can build other media APIs with the Cloudinary Python SDK by following the same pattern. Have fun!&lt;/p&gt;

</description>
      <category>cloudinary</category>
      <category>python</category>
      <category>flask</category>
    </item>
    <item>
      <title>What if?</title>
      <author>Shaquil Maria</author>
      <pubDate>Tue, 20 Apr 2021 14:18:40 +0000</pubDate>
      <link>https://dev.to/theowlsden/what-if-36l1</link>
      <guid>https://dev.to/theowlsden/what-if-36l1</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@emilymorter?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Emily Morter&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/question?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most of the time, people ask: What would your dream job look like? Or, what is the ideal company you would like to work at?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H3hJa_2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.tenor.com/images/7192e2c40e335695e4e615bc509a9eb9/tenor.gif" class="article-body-image-wrapper"&gt;&lt;img width="900" src="https://res.cloudinary.com/practicaldev/image/fetch/s--H3hJa_2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.tenor.com/images/7192e2c40e335695e4e615bc509a9eb9/tenor.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One thing I rarely hear people asking is this: &lt;/p&gt;

&lt;p&gt;Imagine an ideal world that you didn't have to worry about money, thus didn't have to work. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What would be the dream project you'd be working on?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As a developer, maybe there is this one side project that you always wanted to work on, but never got that far. What is that project, and why is it important to you?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>watercooler</category>
      <category>sideprojects</category>
      <category>career</category>
    </item>
    <item>
      <title>Custom Swatch for Material App Theme – primarySwatch </title>
      <author>Rohan Joshi</author>
      <pubDate>Tue, 20 Apr 2021 14:17:20 +0000</pubDate>
      <link>https://dev.to/rohanjsh/custom-swatch-for-material-app-theme-primaryswatch-3kic</link>
      <guid>https://dev.to/rohanjsh/custom-swatch-for-material-app-theme-primaryswatch-3kic</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9P36d1m9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8s170ty1gq5rjyc4vfj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9P36d1m9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8s170ty1gq5rjyc4vfj.png" alt="Error Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;‘Color’ is not a subtype of type ‘MaterialColor?’, ever got this kind of error at runtime, most probably, defining the primarySwatch for your App.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So let’s find out how to define a custom swatch that would work as expected.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://api.flutter.dev/flutter/painting/ColorSwatch-class.html#:~:text=A%20color%20that%20has%20a,primary%20and%20accent%20color%20swatches.&amp;amp;text=Colors%2C%20which%20defines%20all%20of%20the%20standard%20material%20design%20colors."&gt;A color that has a small table of related colors called a “swatch”&lt;/a&gt; — Dart Docs&lt;/p&gt;

&lt;p&gt;To create our own small table we need some values to put it in, right. So where can we get them? People on the earth are just awesome, we have a tool &lt;a href="https://maketintsandshades.com/"&gt;Make Tints and Shades&lt;/a&gt; to our rescue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4qMRO8kP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njs9g45xnzuid98qoc49.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4qMRO8kP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njs9g45xnzuid98qoc49.png" alt="Make Tints and Shades"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Get any color HEX code you want paste it in that box, and then click on ‘Make tints and Shade’ (Tip for future — Hover the shades to copy the code)&lt;br&gt;
Create a new dart file for our new values' home. I have named it ‘palette.dart’. (You guys can post your creative names in comments 😜)&lt;/p&gt;

&lt;p&gt;From Dart Documentation&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const MaterialColor(
int primary,
Map&amp;lt;int, Color&amp;gt; swatch
)
//Creates a color swatch with a variety of shades.
//The primary argument should be the 32 bit ARGB value of one of the values in the swatch, as would be passed to the new Color constructor for that same color, and as is exposed by value. (This is distinct from the specific index of the color in the swatch.)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;To tap into the desired value, all you need to create is a Map. That is exactly what we have created below with defining a class Palette for better use and scalability in the future.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;Now we just need to import our newly created dart file in main.dart for implementation.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;When we define a primarySwatch by ourselves, Theme itself takes some decision in defining colors for widgets like AppBar, FAB, etc. And that’s it, we have a very own customized primarySwatch defined.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
    </item>
    <item>
      <title>7 self-taught coders who work full time as software developers</title>
      <author>General Info.</author>
      <pubDate>Tue, 20 Apr 2021 14:14:44 +0000</pubDate>
      <link>https://dev.to/general42103681/7-self-taught-coders-who-work-full-time-as-software-developers-2d3m</link>
      <guid>https://dev.to/general42103681/7-self-taught-coders-who-work-full-time-as-software-developers-2d3m</guid>
      <description>&lt;p&gt;Studying web development is a path with many ups and downs.It’s often hard to see the light at the end of the tunnel. But when you’re in those tough, dark spots, try to find the motivation to hang in there.&lt;/p&gt;

&lt;p&gt;You might have one day where you figure out a tough problem and feel absolutely amazing. But then the very next day, you get stuck on a seemingly easy problem for hours. You end up feeling completely defeated.You can also find encouragement from others who are in the same boat as you. Knowing that there are people who struggle with the same issues can be hugely encouraging.&lt;/p&gt;

&lt;p&gt;Read More :: &lt;a href="https://cmsinstallation.blogspot.com/2021/04/7-self-taught-coders-who-work-full-time.html"&gt;https://cmsinstallation.blogspot.com/2021/04/7-self-taught-coders-who-work-full-time.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Side Effects with Combine</title>
      <author>Omar 👾</author>
      <pubDate>Tue, 20 Apr 2021 14:07:52 +0000</pubDate>
      <link>https://dev.to/obscured_pixels/side-effects-with-combine-2oh3</link>
      <guid>https://dev.to/obscured_pixels/side-effects-with-combine-2oh3</guid>
      <description>&lt;p&gt;One of the benefits of adopting Combine's publisher approach to asynchronous programing is that every operation is a stream or pipeline that we can subscribe and react to via powerful operators. &lt;/p&gt;

&lt;p&gt;This works really well for situations where would like to execute code outside the scope of a publisher as certain events occur. Such executions are often described as side effects&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-side-effects"&gt;
  &lt;/a&gt;
  What are side effects?
&lt;/h3&gt;

&lt;p&gt;For the context of this article and within the realm of Combine, we can define side effects as invocations that do not transform the output of a publisher which are triggered when certain events occur during a publisher's lifecycle. &lt;/p&gt;

&lt;p&gt;Common use cases for side effects in reactive programming include but are not limited to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Debugging&lt;/li&gt;
&lt;li&gt;Error handling&lt;/li&gt;
&lt;li&gt;Event tracking&lt;/li&gt;
&lt;li&gt;Persisting data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So how would we go about implementing side effects in Combine?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#handling-events"&gt;
  &lt;/a&gt;
  Handling events
&lt;/h3&gt;

&lt;p&gt;Combine provides a useful &lt;code&gt;handleEvents()&lt;/code&gt; operator that allows us to provide closures that can be performed when certain publisher events occur. This makes it possible, for example, to log relevant information in the event of a non-fatal error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;todoRepository.addTodo(title: title)
    .handleEvents(receiveCompletion: { [logger] completion in
        switch completion {
        case .failure(let error):
            logger.error(error)
            debugPrint("an error occurred: \(error)")
        case .finished:
            debugPrint("addTodo publisher completed")
        }
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In addition to the &lt;code&gt;receiveCompletion&lt;/code&gt; parameter, the operator provides other events that we can hook into that can serve a variety of use cases:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#receivesubscription"&gt;
  &lt;/a&gt;
  receiveSubscription:
&lt;/h4&gt;

&lt;p&gt;Executes when the publisher receives the subscription from the upstream publisher. A possible use case for this would be to launch a background process/experience whenever a consumer subscribes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;videoCallProvider.acceptCall()
    .handleEvents(receiveSubscription: { [cameraManager] _ in
        cameraManager.startCapture()
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#receiveoutput"&gt;
  &lt;/a&gt;
  receiveOutput:
&lt;/h4&gt;

&lt;p&gt;Executes when the publisher receives a value from the upstream publisher. In the pattern we put together in my previous article &lt;a href="https://obscuredpixels.com/managing-view-state-with-combine"&gt;Managing View State Combine&lt;/a&gt;, we could use this to keep track of Inputs as users interact with our views:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;inputSubject
    .handleEvents(receiveOutput: { [eventTracker] input in
        switch input {
        case .addTodo:
            eventTracker.track(.todoAdded)
        case .todoRemoved:
            eventTracker.track(.todoRemoved)
        }
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#receivecancel"&gt;
  &lt;/a&gt;
  receiveCancel:
&lt;/h4&gt;

&lt;p&gt;Executes when the downstream receiver cancels publishing. A good use case for this would be disposing of no longer needed processes that live outside of a publisher's lifecycle:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;videoCallProvider.acceptCall()
    .handleEvents(receiveCancel: { [cameraManager] in
        cameraManager.endCapture()
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#receiverequest"&gt;
  &lt;/a&gt;
  receiveRequest:
&lt;/h4&gt;

&lt;p&gt;Executes when the publisher receives a request for more elements. Had a hard time thinking of a good use case for this one, but could come in handy during situations where we would like know the amount of outputs being requested by a subscriber.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: closures passed to these parameters are escaped, and as a result, subject to the dangers of strong reference cycles or wrong thread executions. Make sure to avoid strong references by using capture lists and insuring the closure is performed on the appropriate thread via the &lt;code&gt;receive(on:)&lt;/code&gt; operator.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#a-tip-when-handling-events-"&gt;
  &lt;/a&gt;
  A tip when handling events 💡:
&lt;/h3&gt;

&lt;p&gt;You might have noticed when typing &lt;code&gt;handleEvents&lt;/code&gt;, Xcode will autofill all possible parameters of the method. This can be annoying to deal with, especially if we find ourselves handling specific events frequently. Lets try and fix that with some convenient extensions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;extension Publisher {
    func handleOutput(_ receiveOutput: @escaping ((Self.Output) -&amp;gt; Void)) -&amp;gt; Publishers.HandleEvents&amp;lt;Self&amp;gt; {
        handleEvents(receiveOutput: receiveOutput)
    }

    func handleError(_ receiveError: @escaping ((Self.Failure) -&amp;gt; Void)) -&amp;gt; Publishers.HandleEvents&amp;lt;Self&amp;gt; {
        handleEvents(receiveCompletion: { completion in
            switch completion {
            case .failure(let error):
                receiveError(error)
            case .finished:
                ()
            }
        })
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the extensions above, not only will interacting with the operator become more enjoyable, but the end result ends ups looking more readable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;todoRepository.addTodo(title: title)
    .handleOutput({ [eventTracker] _ in
        eventTracker.track(.todoAdded)
    })
    .handleError({ [logger] error in
        logger.error(error)
        debugPrint("an error occurred: \(error)")
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In situations where we would need to execute some code along side other asynchronous code, the Combine framework can serve as a good candidate given its elegant approach to performing side effects.&lt;/p&gt;

&lt;p&gt;If you liked this article, &lt;a href="https://twitter.com/obscured_pixels"&gt;follow me on Twitter&lt;/a&gt; for more updates and content about Swift development, architectural patterns and clean code.&lt;/p&gt;

</description>
      <category>swift</category>
      <category>ios</category>
    </item>
    <item>
      <title>Excited to publish a major release of tgcf</title>
      <author>Aahnik Daw</author>
      <pubDate>Tue, 20 Apr 2021 14:04:26 +0000</pubDate>
      <link>https://dev.to/aahnik/excited-to-publish-a-major-release-of-tgcf-55h4</link>
      <guid>https://dev.to/aahnik/excited-to-publish-a-major-release-of-tgcf-55h4</guid>
      <description>&lt;ul&gt;
&lt;li&gt;refactor code for better maintainability&lt;/li&gt;
&lt;li&gt;the features of paid private repo "telegram-live-sync" is now free and merged into tgcf&lt;/li&gt;
&lt;li&gt;implement plugin architecture to allow easy addition of features&lt;/li&gt;
&lt;li&gt;a shiny new README&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Link to GitHub: &lt;a href="https://github.com/aahnik/tgcf"&gt;https://github.com/aahnik/tgcf&lt;/a&gt;&lt;br&gt;
Link to PyPI: &lt;a href="https://pypi.org/project/tgcf/"&gt;https://pypi.org/project/tgcf/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please help this repo reach 100 stars.&lt;/p&gt;

</description>
      <category>news</category>
      <category>python</category>
    </item>
    <item>
      <title>Learn JavaScript's for...of and for...in - in 2 minutes</title>
      <author>Jordi Enric</author>
      <pubDate>Tue, 20 Apr 2021 14:01:55 +0000</pubDate>
      <link>https://dev.to/jordienr/learn-javascript-s-for-of-and-for-in-in-2-minutes-1kk9</link>
      <guid>https://dev.to/jordienr/learn-javascript-s-for-of-and-for-in-in-2-minutes-1kk9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-raw-forin-endraw-loop"&gt;
  &lt;/a&gt;
  The &lt;code&gt;for...in&lt;/code&gt; loop
&lt;/h2&gt;

&lt;p&gt;We use &lt;code&gt;for...in&lt;/code&gt; when we want to use the &lt;strong&gt;keys&lt;/strong&gt; of an Object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;keyOne&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;valueOne&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;keyTwo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;valueTwo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;keyThree&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;valueThree&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;propertyKey&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;propertyKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Will result in:&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;keyOne&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;keyTwo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;keyThree&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see in the example &lt;code&gt;propertyKey&lt;/code&gt; will be the key of the object.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You should know&lt;br&gt;
💡 &lt;code&gt;for...in&lt;/code&gt; will ignore any &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol"&gt;Symbol&lt;/a&gt;s in your Object&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we want to access the value we can still do it like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;propertyKey&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;propertyKey&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But instead of doing this we could use a &lt;code&gt;for...of&lt;/code&gt; loop.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-raw-forof-endraw-loop"&gt;
  &lt;/a&gt;
  The &lt;code&gt;for...of&lt;/code&gt; loop
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;for...of&lt;/code&gt; loop will iterate over the values of the Iterable Object.&lt;/p&gt;

&lt;p&gt;Here's an example with an Array&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myIterableObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;valueOne&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;valueTwo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;valueThree&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myValue&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;myIterableObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Will result in&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;valueOne&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;valueTwo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;valueThree&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a good alternative to the &lt;code&gt;forEach&lt;/code&gt; method&lt;/p&gt;

&lt;p&gt;This was a quick introduction to these two syntaxes of the for loop in Javascript. I recommend you play around with them. These two are really useful to know when you want to write short for loops.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-me-on-twitter-for-more"&gt;
  &lt;/a&gt;
  🚀 Follow me on &lt;a href="https://twitter.com/jordienr"&gt;twitter&lt;/a&gt; for more
&lt;/h2&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
