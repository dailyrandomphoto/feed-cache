<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Improving MetaMask with custom tokens ü™ô</title>
      <author>Brandon</author>
      <pubDate>Fri, 21 Jan 2022 14:00:05 +0000</pubDate>
      <link>https://dev.to/brandonkylebailey/improving-metamask-with-custom-tokens-4h04</link>
      <guid>https://dev.to/brandonkylebailey/improving-metamask-with-custom-tokens-4h04</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;MetaMask, by default, displays ERC20 tokens held in your wallet. Here‚Äôs how to add your custom tokens to your metaMask wallet!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-my-options"&gt;
  &lt;/a&gt;
  What are my options?
&lt;/h2&gt;

&lt;p&gt;There are 2 primary methods of adding a custom token to MetaMask:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Through &lt;a href="https://etherscan.io/"&gt;Etherscan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Directly through your wallet&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let‚Äôs talk about Etherscan first!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#etherscan-approach"&gt;
  &lt;/a&gt;
  Etherscan approach
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Open your browser&lt;/li&gt;
&lt;li&gt;Navigate to Etherscan&lt;/li&gt;
&lt;li&gt;Search for your tokens contract&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on more and click ‚ÄúAdd Token to MetaMask (Web3)‚Äù&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gG9KOV7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/li582pxmjf5mrgtkiah8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gG9KOV7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/li582pxmjf5mrgtkiah8.png" alt="Image of etherscan token address with option to add token to wallet" width="880" height="316"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go back to your wallet&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select ‚ÄúAdd Token‚Äù&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eAdIu7nZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxe2lxhmgbbwv7dce61v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eAdIu7nZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxe2lxhmgbbwv7dce61v.png" alt="Image of MetaMask wallet with option to add token" width="343" height="604"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;And that‚Äôs it! navigating to your account page will show your new token:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0bLTeFYj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kkdy5a2nkf1jrlwvh7wi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0bLTeFYj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kkdy5a2nkf1jrlwvh7wi.png" alt="Image of MetaMask wallet with new token present" width="359" height="215"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Let‚Äôs try that again with the MetaMask Token Detection feature!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#metamask-token-detection"&gt;
  &lt;/a&gt;
  MetaMask Token Detection
&lt;/h2&gt;

&lt;p&gt;If you hold your token in your wallet, you can use MetaMasks experimental Auto Token Detection feature, which will attempt to auto-load tokens held within your wallet. Simply navigate to MetaMask, open settings and find Experimental. Then set it to on:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fqg3t-mf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w70nis1gdkzltg5p5l2l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fqg3t-mf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w70nis1gdkzltg5p5l2l.png" alt="Image of MetaMask experimental Auto Token Detection feature" width="361" height="607"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And after a time, your token should appear!&lt;/p&gt;

&lt;p&gt;If you liked this post don't forget to hit me up on üê¶ at &lt;a href="https://twitter.com/brandonkpbailey"&gt;brandonkpbailey&lt;/a&gt; or GitHub at &lt;a href="https://github.com/brandon-kyle-bailey"&gt;brandon-kyle-bailey&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>The Amplify Series, Part 3: Why should you use AWS Amplify?</title>
      <author>Evertson Croes</author>
      <pubDate>Fri, 21 Jan 2022 13:36:11 +0000</pubDate>
      <link>https://dev.to/aws-builders/the-amplify-series-part-3-why-should-you-use-aws-amplify-kla</link>
      <guid>https://dev.to/aws-builders/the-amplify-series-part-3-why-should-you-use-aws-amplify-kla</guid>
      <description>&lt;p&gt;&lt;strong&gt;Now that you know what AWS Amplify is and have a broad overview of how it works, we will look at several reasons you might consider using it. We will also look at scenarios where Amplify might not be the best choice. AWS Amplify is a powerful tool. However, you should always try to use the right tool for the job! Whether the right choice is Amplify or another tool.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amplify has evolved into a useful and mature toolset for creating cloud-native web and mobile applications. Having Amplify in your developer toolbelt will increase your productivity in different scenarios. Be it developing your next application, creating a quick prototype, or learning/teaching AWS. Let‚Äôs look at why you might want to use AWS Amplify.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#increase-speed-reduce-risk-write-less-handcrafted-code"&gt;
  &lt;/a&gt;
  Increase speed, reduce risk: write less hand-crafted code
&lt;/h2&gt;

&lt;p&gt;The primary reason to use AWS Amplify is that it increases your business speed and agility. This is achieved by greatly reducing the amount of code you need to write and manage to achieve cloud-native functionality. &lt;a href="https://www.luminis.eu/blog/cloud-en/the-amplify-series-part-1-what-is-aws-amplify/"&gt;In part 1&lt;/a&gt;, we already listed all of the functionality available in AWS Amplify. However, that was just a brief overview. In this section, we want to zoom in on some of the functionality and advantages that impress us the most and end up using the most in our projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#authentication"&gt;
  &lt;/a&gt;
  Authentication
&lt;/h3&gt;

&lt;p&gt;One of the most valuable categories in the Amplify suite is the &lt;a href="https://docs.amplify.aws/lib/auth/getting-started/q/platform/js/"&gt;Auth category&lt;/a&gt;. It provides us with rich authentication functionality backed by &lt;a href="https://aws.amazon.com/cognito/"&gt;AWS Cognito&lt;/a&gt;. After you use this for the first time, you will never want to write your own authentication mechanisms ever again. This category even comes with an authentication UI that you can optionally use to speed up development even more, and it is completely customizable:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hd1oHgyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.luminis.eu/wp-content/uploads/2022/01/Screenshot-2020-10-21-at-15.51.19-3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hd1oHgyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.luminis.eu/wp-content/uploads/2022/01/Screenshot-2020-10-21-at-15.51.19-3.png" alt="authUI" width="469" height="434"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the auth category is set up, it will create an AWS Cognito user pool to register your users. The &lt;a href="https://aws.amazon.com/cognito/"&gt;Amplify SDK&lt;/a&gt; will provide several helper functions to register, sign in and sign out your users. There is also forgot-password and email activation functionality out-of-the-box.¬†&lt;/p&gt;

&lt;p&gt;Besides creating a user using an email and password combination, you can easily set up federated sign-in with Google, Facebook, Apple, or any provider that supports Open-ID connect and SAML.&lt;/p&gt;

&lt;p&gt;One other nice feature to notice in this category is that it will handle authentication for the other categories such as API and Storage once you have it set up. This means that you do not need to handle any token management yourself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#graphql"&gt;
  &lt;/a&gt;
  GraphQL
&lt;/h3&gt;

&lt;p&gt;While the &lt;a href="https://docs.amplify.aws/lib/restapi/getting-started/q/platform/js/"&gt;REST version of the Amplify API&lt;/a&gt; category also provides a lot of functionality, including a REST API, &lt;a href="https://aws.amazon.com/lambda/"&gt;Lambda&lt;/a&gt; function, and &lt;a href="https://aws.amazon.com/dynamodb/"&gt;DynamoDB&lt;/a&gt;, we have decided to highlight the GraphQL version as it is a prime example how much AWS Amplify can help you with.&lt;/p&gt;

&lt;p&gt;If you are familiar with GraphQL, you know that you can define your API in a GraphQL schema. What Amplify adds to this is several annotations called &lt;a href="https://docs.amplify.aws/cli-legacy/graphql-transformer/directives/"&gt;GraphQL directives&lt;/a&gt; that generate functionality. The following is an example of such a schema:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DmChoXKu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.luminis.eu/wp-content/uploads/2022/01/Screenshot-2022-01-09-at-13.14.34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DmChoXKu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.luminis.eu/wp-content/uploads/2022/01/Screenshot-2022-01-09-at-13.14.34.png" alt="GraphQL_Schema" width="880" height="794"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just by creating this schema, we will get the following generated for us:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;@model&lt;/strong&gt;: DynamoDB tables for Show and Review are generated.
GraphQL Query, Mutation, and Subscription client stub code for Show and Review¬†&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;@auth&lt;/strong&gt;: 403 http status codes when the auth rules are broken. In this example, only users that are logged in (‚Äúprivate‚Äù) are allowed to create, read, update and delete shows. There is also the possibility of making more complex authorization rules, such as allowing only users of a particular group to perform actions.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;@connection&lt;/strong&gt;: References from Show to Review and vice versa&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;@function&lt;/strong&gt;: GraphQL queries for ‚ÄúreviewScore‚Äù for ‚Äúshow‚Äù routes to a separate Lambda function instead of going directly to the database. In this way, you can still customize the logic in the backend instead of just building CRUD.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Visit the AWS Amplify docs to find out more about &lt;a href="https://docs.amplify.aws/cli-legacy/graphql-transformer/directives/"&gt;Amplify GraphQL directives&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hosting-and-cicd"&gt;
  &lt;/a&gt;
  Hosting and CI/CD
&lt;/h3&gt;

&lt;p&gt;The final part we want to highlight is the entire hosting and CI/CD that you can set up for your project in just a few commands. By simply running ‚Äúamplify add hosting‚Äù and following a few instructions, you can set up an entire CI/CD pipeline for your repo that deploys the backend and hosts the frontend on a public URL.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3c6DwQTg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.luminis.eu/wp-content/uploads/2022/01/Screenshot-2022-01-14-at-14.47.45.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3c6DwQTg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.luminis.eu/wp-content/uploads/2022/01/Screenshot-2022-01-14-at-14.47.45.png" alt="CICD" width="880" height="250"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every part of the pipeline is customizable, and setting up redirects and HTTPS with a domain name is a piece of cake. You can even spin up different environments per branch to test them.¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#empower-frontend-engineers-javascript-front-and-backends"&gt;
  &lt;/a&gt;
  Empower front-end engineers: JavaScript front- and back-ends
&lt;/h2&gt;

&lt;p&gt;We have noticed while using Amplify that it has allowed our front-end engineers to expand their reach in development by being able to contribute to the backend since it is also written in JavaScript.¬†&lt;/p&gt;

&lt;p&gt;While Amplify supports Lambda functions in other languages such as Java, choosing for JavaScript while also building your frontend in JavaScript means that you develop your entire application with the one language all frontend engineers know. This will allow Frontend engineers to pick up whole vertical issues in your project to handle changes to the entire stack.&lt;/p&gt;

&lt;p&gt;Note that you can choose to ignore JavaScript completely and build an Android mobile app with Java Lambda‚Äôs in the backend in Amplify. The advantage mentioned here does not hold in this case.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#innovate-at-speed-prototype-to-reduce-timetovalue"&gt;
  &lt;/a&gt;
  Innovate at speed: prototype to reduce time-to-value
&lt;/h2&gt;

&lt;p&gt;Prototyping is one of the best ways to determine if your product/solution will solve the problems you are trying to solve. If you can test your ideas and get feedback as fast as possible, you will innovate quickly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8b_sQRBv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.luminis.eu/wp-content/uploads/2022/01/Product-feedback-productboard-e1621926658567.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8b_sQRBv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.luminis.eu/wp-content/uploads/2022/01/Product-feedback-productboard-e1621926658567.png" alt="innovate" width="650" height="361"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While using paper prototypes or interactive mockups is a fast way to get user feedback, you can only reach the number of people you have time to test with. If you want to get an actual prototype up and running in no time so that it can be shared via social media and tested by several users, then Amplify can be used to skip all of the setup and let you focus on building the prototype.¬†&lt;/p&gt;

&lt;p&gt;If you combine this with analytics and surveys, you will get information from a more extensive user base should that be necessary.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accelerate-cloud-proficiency-leverage-aws-best-practices-and-patterns"&gt;
  &lt;/a&gt;
  Accelerate cloud proficiency: leverage AWS best practices and patterns
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j2AD4pDT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.luminis.eu/wp-content/uploads/2022/01/Screenshot-2022-01-20-at-15.24.35.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j2AD4pDT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.luminis.eu/wp-content/uploads/2022/01/Screenshot-2022-01-20-at-15.24.35.png" alt="academy" width="880" height="273"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS has almost 200 services available at the moment. This can be very intimidating for someone trying to start their cloud journey. AWS Amplify only uses a subset of these services and guides you in creating and configuring the services.¬†&lt;/p&gt;

&lt;p&gt;One of the strengths of Amplify is that you can create an entire cloud-native application without having to know what is happening under the hood. However, learning what happens under the hood of AWS Amplify is an excellent way to start learning about cloud computing since the scope of services is much smaller, and you can take it step-by-step based on the categories.&lt;/p&gt;

&lt;p&gt;When you are done building your first cloud-native Amplify application and know what is happening in the background, you will have a sound base of knowledge and experience to build upon.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keep-options-open-extend-amplify-with-cdk"&gt;
  &lt;/a&gt;
  Keep options open: extend Amplify with CDK
&lt;/h2&gt;

&lt;p&gt;One of the most common questions is when we should use Amplify or CDK when starting up a cloud-native AWS project. By now, you have an idea of what AWS Amplify is. If you have never heard of CDK before, our colleague wrote an introduction &lt;a href="https://www.luminis.eu/blog/creating-your-serverless-web-application-using-aws-cdk-part-1/"&gt;blog post&lt;/a&gt; about it.¬†&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5lRJQGL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.luminis.eu/wp-content/uploads/2022/01/cdk-logo6-1260x476-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5lRJQGL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.luminis.eu/wp-content/uploads/2022/01/cdk-logo6-1260x476-1.png" alt="cdk" width="880" height="332"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The primary objective of CDK is to allow developers to write infrastructure-as-code in a programmer-friendly language instead of CloudFormation. Amplify wants to abstract as much as possible from the backend infrastructure and Cloudformation, while CDK has nothing to do with the frontend. Since they have different goals, they have different scenarios where you should pick one over the other.¬†&lt;/p&gt;

&lt;p&gt;However, since the introduction of Amplify Extensibility, your options have become somewhat simpler. You can build your frontend using Amplify, extend it with CDK and even export your Amplify project as a CloudFormation templates to use in your existing CDK projects. ‚Äã‚ÄãPicking one over the other is no longer an binary exercise. Instead, we should explore when to leverage which option.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-should-you-not-use-aws-amplify"&gt;
  &lt;/a&gt;
  When should you not use AWS Amplify?
&lt;/h2&gt;

&lt;p&gt;Before Amplify Extensibility, which allows you to use AWS CDK to define AWS services you want to use in your Amplify application that is not present in the several Amplify categories, my advice was always:&lt;/p&gt;

&lt;p&gt;‚ÄúIf you can map your main success use cases to the Amplify categories, then you should use Amplify. Otherwise, you should avoid using it.‚Äù&lt;/p&gt;

&lt;p&gt;However, this advice has become obsolete since we can now use any AWS service in our Amplify applications thanks to Extensibility. There are still some scenarios where you shouldn‚Äôt use Amplify:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Non-AWS or multi-cloud projects&lt;/strong&gt;: AWS Amplify can only target the AWS cloud platform.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Non-fullstack projects&lt;/strong&gt;: if you creating pure front-end or back-end projects, Amplify might not be the most effective choice.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Misfit with existing architecture&lt;/strong&gt;: if fitting an AWS Amplify project into your existing landscape would require massive effort or does not align with existing architectural principles, it might not be the most logical choice. Maybe you should start with convincing your enterprise architect of Amplify's value first.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;No clear advantage&lt;/strong&gt;: if large parts of Amplify's functionality are already in place (e.g., slick build and deploy pipelines, or a library of similar building blocks), then the added value of Amplify might not be so great. But that's good news, right?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#up-next"&gt;
  &lt;/a&gt;
  Up next‚Ä¶
&lt;/h2&gt;

&lt;p&gt;Hopefully, this blog has given you even more reason to start working with AWS Amplify. Now that we have the high-overview and background information out of the way, it is time to get our hands dirty! In the following blog posts, we will be creating an AWS Amplify application, and we will take a closer look at several Amplify categories.&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>aws</category>
      <category>amplify</category>
    </item>
    <item>
      <title>üé¨JavaScript Fetch API - Simple Exampleüëç</title>
      <author>Robson Muniz</author>
      <pubDate>Fri, 21 Jan 2022 13:29:20 +0000</pubDate>
      <link>https://dev.to/robsonmuniz16/javascript-fetch-api-simple-example-2ofi</link>
      <guid>https://dev.to/robsonmuniz16/javascript-fetch-api-simple-example-2ofi</guid>
      <description>&lt;p&gt;Use fetch API to get some data from an any external API &lt;br&gt;
and display it on your website: step-by-step from SCRATCH‚Ä¶&lt;/p&gt;



&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rRvDGhx8Kgo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source Code:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;JavaScript Fetch API | Simple Example&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://kit.fontawesome.com/fc0bcca8a3.js"&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"results"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"result"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"cat_result"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Random Cat Placeholder&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"result"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"dog_result"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Random Dog Placeholder&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;


  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"buttons"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"cat_btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-cat"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt; Get Cat
    &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"dog_btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-dog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt; Get Dog
    &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;


  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"app.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cat_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cat_result&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dog_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dog_result&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cat_btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cat_btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dog_btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dog_btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;cat_btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getRandomCat&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;dog_btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getRandomDog&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getRandomCat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://aws.random.cat/meow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;cat_result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;img src=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; alt="cat" /&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getRandomDog&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://random.dog/woof.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;dog_result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;img src=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; alt="dog" /&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Complete Jenkins Tutorial | Learn Jenkins From Scratch In 3 Hours</title>
      <author>LambdaTest</author>
      <pubDate>Fri, 21 Jan 2022 12:58:49 +0000</pubDate>
      <link>https://dev.to/lambdatest/complete-jenkins-tutorial-learn-jenkins-from-scratch-in-3-hours-1eji</link>
      <guid>https://dev.to/lambdatest/complete-jenkins-tutorial-learn-jenkins-from-scratch-in-3-hours-1eji</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/nCKxl7Q_20I"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This LambdaTest Jenkins Tutorial will help you learn the fundamentals of Jenkins and everything you need to know to get started with Jenkins.&lt;/p&gt;

&lt;p&gt;This Jenkins Tutorial for beginners and professionals will help you learn how to use Jenkins, one of the most popular CI/CD tools used in DevOps. In this course, Moss a DevOps engineer, helps you understand how Continuous Integration and Continuous Delivery happens with Jenkins. This video course covers the basics of Jenkins, how Jenkins works, Jenkins architecture, Jenkins and GitHub integration, and Jenkins installation &amp;amp; configuration. During this course, you will also learn a step-wise approach for creating your first Jenkins Pipeline, integrating Maven and Jenkins with Selenium, and performing cross browser testing with Jenkins Plugin. By the end of this video, you will know some of the Jenkins best practices that will help you automate the software development pipeline and get better results with this DevOps tool.&lt;/p&gt;

&lt;p&gt;You will learn:&lt;br&gt;
üî∏ What is Jenkins? &lt;br&gt;
üî∏ What is Jenkins and why do we use it?&lt;br&gt;
üî∏ What are the features of Jenkins?&lt;br&gt;
üî∏ How does Jenkins integrate with GitHub?&lt;br&gt;
üî∏ What Jenkins is used for?&lt;br&gt;
üî∏ How Jenkins works in real-time?&lt;/p&gt;

</description>
      <category>jenkins</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What bug reporting tool to choose?</title>
      <author>Olga Budynska</author>
      <pubDate>Fri, 21 Jan 2022 12:58:15 +0000</pubDate>
      <link>https://dev.to/olga_budynska/what-bug-reporting-tool-to-choose-4a3d</link>
      <guid>https://dev.to/olga_budynska/what-bug-reporting-tool-to-choose-4a3d</guid>
      <description>&lt;p&gt;Hey, guys! &lt;br&gt;
I want to try some bug reporting tool like BugHerd, Marker.io or Bird Eats Bug etc. &lt;br&gt;
Are you using any of those and what do you think is the best one?&lt;/p&gt;

</description>
      <category>qa</category>
      <category>tools</category>
      <category>productivity</category>
      <category>testing</category>
    </item>
    <item>
      <title>Thinking Like a Programmer</title>
      <author>EniRox</author>
      <pubDate>Fri, 21 Jan 2022 12:41:42 +0000</pubDate>
      <link>https://dev.to/enirox/thinking-like-a-programmer-27n9</link>
      <guid>https://dev.to/enirox/thinking-like-a-programmer-27n9</guid>
      <description>&lt;p&gt;If you are reading this article, then you are either a programmer or aspiring to become one. But being a developer or programmer isn't exactly an easy feat. As a newbie developer, it is common to feel overwhelmed by the influx of information as everything is new and unfamiliar. Most times you'll find yourself asking yourself - "What the heck am I doing". This feeling is exacerbated by the sight of other programmers who are "good" at solving problems, implementing logic, and building sustainable software.&lt;/p&gt;

&lt;p&gt;This feeling is understandable, everyone in the programming sphere is either facing or has faced this problem before. Every efficient programmer/developer today was a beginner/newbie yesterday. &lt;/p&gt;

&lt;p&gt;But what is the best approach to becoming better? What steps should one take to become a skillful programmer? In this article, we'll go through the steps on how to become and feel like a professional developer in your field. This is the No B.S Guide to Thinking Like a Programmer&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-problem-solving-skills"&gt;
  &lt;/a&gt;
  Build Problem Solving Skills
&lt;/h2&gt;

&lt;p&gt;Despite one's thoughts or beliefs, every efficient programmer today is only as good as he/she is because of the time and energy such an individual has dedicated to developing problem-solving as a skill. You can only solve problems quickly and efficiently if you have solved/seen the problem before.&lt;br&gt;
Now you're probably thinking "How can I solve every problem out there? That's not possible." This is true, you can never be able to solve every problem in the world (That's a job for superman üòé). What solving problems to become better basically entails, is to deeply understand the solution to the problems you've faced before, so that you can use the ideas to approach and ultimately solve more sophisticated problems.&lt;br&gt;
This is exactly why newbie developers should aspire to learn and have a good grasp of Algorithms and Data Structures. The concept gained from mastery of this skill can be applied to most problems one could face.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sort-out-some-way-to-solve-any-programming-challenge"&gt;
  &lt;/a&gt;
  Sort Out Some Way To Solve Any Programming Challenge.
&lt;/h2&gt;

&lt;p&gt;One thing you should keep in mind is that as a programmer, you are bound to face problems. Your passion to code should stem from the desire to effectively solve these problems. Some of these problems will be difficult, and as a beginner these problems will naturally take time to resolve, most newbie programmers give up on programming at this point. Instead of giving up, you should patiently take time to deliberately practice and hone your problem-solving skills. The more you practice, the better you become at approaching and solving problems efficiently.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-programming-like-a-pro"&gt;
  &lt;/a&gt;
  Start Programming Like a Pro
&lt;/h2&gt;

&lt;p&gt;Once you've learned the basics of being a programmer, which is the ability to solve problems. You need to start coding. Don't Wait. Your ability to solve problems should propel you to solve more problems as you advance on your journey. Constantly keep learning, don't give up. Whether you are trying to land a developer job or to solve personal tech problems. Thinking like a programmer will help you get there.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>codenewbie</category>
      <category>techtalks</category>
      <category>python</category>
    </item>
    <item>
      <title>Explained: Why headless commerce helps SEO and page speed</title>
      <author>Nicklas Gellner</author>
      <pubDate>Fri, 21 Jan 2022 12:38:54 +0000</pubDate>
      <link>https://dev.to/medusajs/explained-why-headless-commerce-helps-seo-and-page-speed-nm5</link>
      <guid>https://dev.to/medusajs/explained-why-headless-commerce-helps-seo-and-page-speed-nm5</guid>
      <description>&lt;p&gt;Yet another one of those SEO / Page performance articles...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p7l89gjB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjjmojr2k0zmq49pqu9a.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p7l89gjB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjjmojr2k0zmq49pqu9a.gif" alt="Image description" width="498" height="333"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;... I myself have probably read +50 of these by now and to me they always end up being either &lt;strong&gt;(a)&lt;/strong&gt; overly technically detailed or &lt;strong&gt;(b)&lt;/strong&gt; some superficial marketing gimmick that in itself is build for SEO purposes. &lt;/p&gt;

&lt;p&gt;With this article, I tried to put some words to the performance benefits of headless commerce in the same vein as I would when I talk to ecommerce managers; straight to the point, but not too fluffy (at least that was the aim). &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer:&lt;/em&gt; I will focus the arguments from the points of an open-source headless solution which is different from proprietary solutions offered by Commercetools, Commerce.js etc.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-page-speed-and-seo"&gt;
  &lt;/a&gt;
  Why page speed and SEO?
&lt;/h2&gt;

&lt;p&gt;Page speed and SEO improvements have for many merchants been among the key reasons to opt for a headless commerce platform. In this article, we will explain how a headless setup can serve as a strong technical foundation to improve performance on these parameters. &lt;/p&gt;

&lt;p&gt;So why are page speed and SEO so important in ecommerce? If we start with page speed, &lt;a href="https://neilpatel.com/blog/loading-time/"&gt;studies&lt;/a&gt; have shown that if a webshop has a load time of more than 3 seconds then 40% of the visitors abandon the site. On top of that, a one-second delay leads to a &lt;a href="https://neilpatel.com/blog/loading-time/"&gt;7% reduction&lt;/a&gt; in conversion. Not just this, page speed also impacts your website's SEO performance, making it a potential ranking factor in Google SERP (Search Engine Result Pages). Google and other search engines make your brand visible and drive traffic, but if Google does not know you, there's no way that your customers will. Online searches lead to almost &lt;a href="https://www.businessinsider.com/most-online-shoppers-are-using-search-engines-before-they-buy-2016-4?r=US&amp;amp;IR=T"&gt;39%&lt;/a&gt; of the total ecommerce traffic, but only the &lt;a href="https://backlinko.com/google-ctr-stats"&gt;top 3&lt;/a&gt; Google search results get 75% of all the traffic.&lt;/p&gt;

&lt;p&gt;As the need for speed and enhanced SEO performance increases in importance, developers need to put focus on optimizing ecommerce sites for these parameters. The good part is that developers now have the right technology at their disposal with many headless commerce platforms emerging and these are now becoming more widely accessible with open-source solutions such as &lt;a href="https://github.com/medusajs/medusa"&gt;Medusa&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-headless-commerce-work"&gt;
  &lt;/a&gt;
  How headless commerce work
&lt;/h2&gt;

&lt;p&gt;Before going into the details of how headless commerce enables optimized performance, it is important to understand how it works.&lt;/p&gt;

&lt;p&gt;At its core, headless commerce refers to the decoupling of the frontend (the visual storefront) and the backend (the engine handling orders, customer data, etc.). This means that your storefront can run separately without impacting the backend like logistics, inventory, product details, etc. &lt;/p&gt;

&lt;p&gt;This architecture allows businesses to take full control of the user experience with the storefront while configuring a fully customized backend to handle their needs. From a shopping cart to the payment gateway ‚Äì all functional elements can work as a microservice and be programmatically managed while API supports the transmission and management of data. &lt;/p&gt;

&lt;p&gt;Headless commerce breaks the monotony of the monolithic structures that tied both systems together in one which is often seen with traditional platforms like Shopify. This gives some ease to setting it up, bit it also makes the solutions rigid rather than flexible.&lt;/p&gt;

&lt;p&gt;If you want to know more about the overall impact a headless setup can have on your ecommerce store, then check out our old article on what +20 ecommerce managers thought to be the key benefits of a headless architecture&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-page-speed-amp-seo-is-improved-through-headless-commerce"&gt;
  &lt;/a&gt;
  How page speed &amp;amp; SEO is improved through headless commerce
&lt;/h2&gt;

&lt;p&gt;Even though SEO can be a moving target with the ever-changing algorithms and updates, there are a few parameters that almost certainly will help improve your rankings. We will explore four of the key reasons below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-cdns-amp-optimized-servers-for-deployment"&gt;
  &lt;/a&gt;
  Using CDNs &amp;amp; optimized servers for deployment
&lt;/h3&gt;

&lt;p&gt;A Content Delivery Network, like Netlify or Cloudflare, enables you to distribute your content across a wide network of servers, globally. This network of servers hosts your website content and pulls it from the server which is closest to the visitor in order to reduce load time as data doesn't have to transit as far. When a user then loads a web page it will be the closest CDN that sends a catched version of the web page's content to the user's browser. This can have significant impact on page load time; in some instances CDNs have been able to reduce page load time by as much as &lt;a href="https://www.ventureharbour.com/content-delivery-network/"&gt;30%&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When using out-of-the-box e-commerce platforms (e.g. Shopify), you most often depend on the server they use as the hosting option for your commerce platform. Although this might look like an easy deployment option, it is not optimal for your page speed to, for instance, use a US-based server when operating in Europe. With a headless solution, you can use optimized servers for deployment to improve page delivery speed to the end-user.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-an-ssg"&gt;
  &lt;/a&gt;
  Use an SSG
&lt;/h3&gt;

&lt;p&gt;A static site generator (SSG) helps you improve page load speed. An SSG lets you create static web pages (consisting of HTML, CSS, and frontend JS) that can be hosted directly on a CDN. Whereas traditional website generators only generate a page when it is requested by the user, static pages are generated ahead of time and do not need to be generated on the server when the user accesses it. One example of the impact of implementing an SSG can be seen at QueryClick.com, a small B2B site, which witnessed a load time reduction up to &lt;a href="https://searchengineland.com/load-time-static-site-generators-seo-280785"&gt;74%&lt;/a&gt; after the deployment of a SSG.&lt;/p&gt;

&lt;p&gt;With newer SSG frameworks like &lt;a href="https://www.gatsbyjs.com/"&gt;Gatsby&lt;/a&gt; and &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt;, it has become significantly easier to build static sites that they use of popular technologies like ReactJS, GraphQL, Webpack, etc. and makes it easier for developers to jump in without much of a learning curve. Plus, these frameworks do data fetching such as data sourcing from local files. This data is then used to generate static HTML, CSS, and JavaScript files.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fewer-plugins-to-improve-load-time"&gt;
  &lt;/a&gt;
  Fewer Plugins To Improve Load Time
&lt;/h3&gt;

&lt;p&gt;Monolithic solutions are built for simplicity often obtained through templated solutions. Although templates offer a good starting point, they often end up having more deteriorating long-term consequences on page performance due to a lack of flexibility and customization options.&lt;/p&gt;

&lt;p&gt;What happens for most webshop owners is that they end up wanting a more customized setup than what they set out to do as their business needs evolve over time. When starting from a templated design, the only way to solve this issue is by adding new plugins that solve customization issues at hand. However, most of these plugins, especially on the frontend, require a huge amount of processing power slowing down the load time of the site.&lt;/p&gt;

&lt;p&gt;The problem is often described as ‚Äúdead by plugins‚Äù and can be avoided using open-source solutions and headless architecture to build custom functionality into the core project instead of relying on outside solutions that might in turn negatively impact performance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#full-control-of-page-structure-and-content"&gt;
  &lt;/a&gt;
  Full control of page structure and content
&lt;/h3&gt;

&lt;p&gt;Using a headless architecture likewise solves many of the common issues with the lack of page structure and content control that content specialists are often vocal about with monolithic solutions.&lt;/p&gt;

&lt;p&gt;Websites that use monolithic structures like Shopify generally experience SEO hurdles due to the predetermined sites structure which makes it hard to fully optimize the website setup. What happens with a monolithic solution is that the pages you create on your website will have a ranking structure you can't make changes to.&lt;/p&gt;

&lt;p&gt;A common Shopify problem is that with each new category comes multiple URLs. Buffer.com is one such website that faces this issue. Because of multiple paths that lead to the same page, duplicate product pages are produced with the same content but a different URL. See example below where each of these URLs leads to one page only, e.g.:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://buffer.com/library/social-media-manager-checklist"&gt;https://buffer.com/library/social-media-manager-checklist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://buffer.com/resources/social-media-manager-checklist"&gt;https://buffer.com/resources/social-media-manager-checklist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These pages are almost exact duplicates. All of this drastically impacts the ranking on SERP since search engines aren't capable to infer which duplicate page to rank, therefore, giving preference to other web pages. Using a headless commerce platform enables you to control the way your content is rendered as content lives on a separate server and can be structured independently for an optimal page structure.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#optimize-page-speed-and-seo-with-medusa"&gt;
  &lt;/a&gt;
  Optimize page speed and SEO with Medusa
&lt;/h2&gt;

&lt;p&gt;Okay, a bit of commercializing in the end ;-) No seriously, headless commerce presents some easy to grasp benefits in the form of page speed and SEO performance. The problem has been that small to midsized merchants would not consider these solutions due to the excessive costs associated with them. That is why &lt;a href="https://www.medusajs.com/"&gt;Medusa&lt;/a&gt; made it a key priority to:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lower the bar for when developers and businesses can shift to a headless commerce platform&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is done by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open-sourcing the solution to enable merchants to start for free compared to competing platforms starting at +20,000 USD / year&lt;/li&gt;
&lt;li&gt;Creating a setup that is easy to use and extend, even as a smaller merchant with limited developer resources&lt;/li&gt;
&lt;li&gt;Making a suite of plugins, quick starters, and migration tools freely available to make it easy to get up and running&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With a lower bar for entering into the world of headless commerce, Medusa aims to make the benefits accessible to merchants of all sizes in the future. &lt;/p&gt;

&lt;p&gt;If you are interested to hear more, feel free to check-out our solution on &lt;a href="https://github.com/medusajs/medusa"&gt;GitHub&lt;/a&gt;. Or catch our team in the &lt;a href="https://discord.gg/F87eGuwkTp"&gt;Discord community&lt;/a&gt; for a chat.&lt;/p&gt;

</description>
      <category>ecommerce</category>
      <category>headless</category>
      <category>webdev</category>
      <category>performance</category>
    </item>
    <item>
      <title>Loading images with Svelte</title>
      <author>Andrei Roba</author>
      <pubDate>Fri, 21 Jan 2022 12:18:16 +0000</pubDate>
      <link>https://dev.to/andreirobadev/loading-images-with-svelte-4a5c</link>
      <guid>https://dev.to/andreirobadev/loading-images-with-svelte-4a5c</guid>
      <description>&lt;p&gt;Poor network conditions cause images to load slower, sometimes leading to broken layouts. You could exclusively rely on the &lt;a href="https://www.w3schools.com/tags/att_img_alt.asp"&gt;alt&lt;/a&gt; attribute, but a more robust solution would handle such cases. Therefore, showing a placeholder or a spinner until displaying a fully loaded image could significantly improve the user experience.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/Image"&gt;Image&lt;/a&gt; web API exposes two methods, &lt;code&gt;onload&lt;/code&gt; and &lt;code&gt;onerror&lt;/code&gt; that help managing these situations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;onMount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;loaded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;failed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;onMount&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;loaded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onerror&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;failed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the above &lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt; code is part of an &lt;code&gt;Image&lt;/code&gt; component with the following template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{#if loaded}
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
{:else if failed}
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"not_found.jpg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
{:else if loading}
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"loading.gif"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
{/if}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A full working example can be found &lt;a href="https://svelte.dev/repl/327aa441312e41d7937b4adcdab86765?version=3.46.2"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cover photo by &lt;a href="https://unsplash.com/@mike_van_den_bos?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Mike van den Bos&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/loading?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>javascript</category>
      <category>ux</category>
      <category>design</category>
    </item>
    <item>
      <title>Understanding ViewChild and ViewChildren in Angular</title>
      <author>Anubhab Mukherjee</author>
      <pubDate>Fri, 21 Jan 2022 12:12:08 +0000</pubDate>
      <link>https://dev.to/this-is-angular/understanding-viewchild-and-viewchildren-in-angular-1aep</link>
      <guid>https://dev.to/this-is-angular/understanding-viewchild-and-viewchildren-in-angular-1aep</guid>
      <description>&lt;p&gt;Today we will learn a very important and powerful concept in Angular - the &lt;code&gt;ViewChild&lt;/code&gt; and &lt;code&gt;ViewChildren&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;On a high level &lt;code&gt;ViewChild&lt;/code&gt; and &lt;code&gt;ViewChildren&lt;/code&gt; both are property decorators. &lt;br&gt;
With this decorators we can -&lt;br&gt;
 1Ô∏è‚É£ Access an element present in the same template (html) of the component&lt;br&gt;
 2Ô∏è‚É£ Access the child component&lt;/p&gt;

&lt;p&gt;So we can say it's used to access elements present in the template.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Syntax&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;@ViewChild(selector, {read: readValue, static: staticValue})&lt;br&gt;
propertyName&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I will touch upon the syntax as and when we need them.&lt;/p&gt;

&lt;p&gt;So what we will achieve at the end of this demo?&lt;br&gt;
We will create a counter component. It will have a counter initialized to 0. There will be two methods one to increase the counter by &lt;code&gt;x&lt;/code&gt; amount and the other to reduce by &lt;code&gt;x&lt;/code&gt; amount.&lt;br&gt;
The component methods will be accessed or you can say called from the parent only.&lt;/p&gt;

&lt;p&gt;Lets setup our playground first.&lt;br&gt;
Lets create a component called &lt;code&gt;my-counter&lt;/code&gt; and make it a child component of &lt;code&gt;app-component&lt;/code&gt;. If you are wondering how to make a child component? Please have a look at this &lt;a href="https://dev.to/this-is-angular/component-communication-parent-to-child-child-to-parent-5800"&gt;post&lt;/a&gt; before moving ahead.&lt;/p&gt;

&lt;p&gt;Once we create the component, lets open the my-counter component ts file and add the below code-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  counter = 0;
  constructor() { }
  ngOnInit(): void { }

  increaseCounter(x: number) {
    this.counter += x;
  }

  decreaseCounter(x: number) {
    this.counter -= x;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1EWQbhCf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ozorey0kxpbhuvzjqjn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1EWQbhCf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ozorey0kxpbhuvzjqjn.PNG" alt="Image description" width="707" height="646"&gt;&lt;/a&gt;&lt;br&gt;
And in the corresponding template file -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p&amp;gt;Counter Value: {{ counter }}&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now lets move to the app.component.ts file and the following code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  increaseCounter(x: number) { }

  decreaseCounter(x: number) { }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will add the method body soon.&lt;br&gt;
And in the corresponding template the following code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input (click)="increaseCounter(1)" type="button" 
value="Add by 1"&amp;gt;

&amp;lt;input (click)="decreaseCounter(1)" type="button" 
value="Subtract by 1"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Output till now&lt;/em&gt; - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EutEpBQf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tha8z81pr0u7mm7lyk8q.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EutEpBQf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tha8z81pr0u7mm7lyk8q.PNG" alt="Image description" width="295" height="199"&gt;&lt;/a&gt;&lt;br&gt;
And the button does nothing. But it will do ü§û&lt;/p&gt;

&lt;p&gt;Now lets come to the real part -&lt;/p&gt;

&lt;p&gt;We will see ViewChild first.&lt;br&gt;
So lets add a property in &lt;code&gt;app.component&lt;/code&gt; üëâ &lt;code&gt;counterReference&lt;/code&gt;.&lt;br&gt;
The property counterReference will be holding a reference of the Counter component. So we will assign -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;counterReference = {} as MyCounterComponent;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and also decorate it with ViewChild. So the final code will become -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  @ViewChild(MyCounterComponent)
  counterReference = {} as MyCounterComponent;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The viewChild accepts few parameters. &lt;br&gt;
The first parameter is the &lt;u&gt;Component&lt;/u&gt; which you want to select or get the reference (in this case). You can also query using a templateReference (which I will show soon).&lt;br&gt;
Now lets complete the 2 functions which we kept empty -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  increaseCounter(x: number) {
    this.counterReference.increaseCounter(1);
  }

  decreaseCounter(x: number) {
    this.counterReference.decreaseCounter(1);
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here in the above code you can see with the property  &lt;code&gt;counterReference&lt;/code&gt; decorated with ViewChild we can access the child component &lt;code&gt;MyCounterComponent&lt;/code&gt; (methods).&lt;/p&gt;

&lt;p&gt;When you click any of the button you will see the Counter value is getting changed.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WXJZBwKM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ozn8nix4tvw8g5ddlwhb.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WXJZBwKM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ozn8nix4tvw8g5ddlwhb.PNG" alt="Image description" width="340" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So from the parent you can access the child methods.&lt;/p&gt;

&lt;p&gt;Cool right?&lt;br&gt;
Now the next variation (as I said earlier) using &lt;code&gt;template reference&lt;/code&gt;.&lt;br&gt;
Example of a template reference -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div #myTemplateRef&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;app-my-counter #componentTemplateRef&amp;gt;&amp;lt;/app-my-counter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Observe the # (pound symbol).&lt;br&gt;
It is a variable to reference the DOM within a template. Here &lt;code&gt;myTemplateRef&lt;/code&gt; or &lt;code&gt;componentTemplateRef&lt;/code&gt; is the template reference.&lt;/p&gt;

&lt;p&gt;Lets add few more lines of code to see how it works. Add the below lines of code in component.ts file-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  @ViewChild('myTemplateRef')
  myTemplateRef = {};

  @ViewChild('componentTemplateRef')
  componentTemplateRef = {};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in the corresponding template file -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div #myTemplateRef&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;app-my-counter #componentTemplateRef&amp;gt;&amp;lt;/app-my-counter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now a very important piece of information -&lt;/p&gt;

&lt;p&gt;You might have seen a method that gets generated when you create a component using CLI - the &lt;code&gt;ngOnInit()&lt;/code&gt;&lt;br&gt;
This is a Angular lifecycle hook method. I will talk about the &lt;strong&gt;Lifecycle Hooks&lt;/strong&gt; in details in the upcoming post.&lt;br&gt;
Similar to this method there is another life cycle hook method called &lt;code&gt;ngAfterViewInit()&lt;/code&gt;.&lt;br&gt;
So, when ever the template/ view initialization is complete or I can say view is ready the &lt;code&gt;ngAfterViewInit()&lt;/code&gt; method is called and all the properties decorated with viewChild are ready to use. Before that they are uninitialized/ undefined.&lt;br&gt;
In the &lt;code&gt;ngOnInit&lt;/code&gt; the properties would look like below -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ecOEhhn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9em6hppz1brglfcyxrk.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ecOEhhn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9em6hppz1brglfcyxrk.PNG" alt="Image description" width="304" height="325"&gt;&lt;/a&gt;&lt;br&gt;
And in the &lt;code&gt;ngAfterViewInit&lt;/code&gt; the properties would look like -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0vJWQeR7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xf8nzmzltsh2k3rlqjr3.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0vJWQeR7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xf8nzmzltsh2k3rlqjr3.PNG" alt="Image description" width="319" height="390"&gt;&lt;/a&gt;&lt;br&gt;
In summary a quick pictorial representation -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F_t2SP2q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pij5fi0kifhmvzbqune3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F_t2SP2q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pij5fi0kifhmvzbqune3.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;static:&lt;/strong&gt; &lt;br&gt;
By default the value of static is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The true value is used to support creating embedded view on the runtime. When I will write about creating dynamic component again I will talk about &lt;code&gt;static: true&lt;/code&gt;. &lt;/p&gt;



&lt;p&gt;Now coming to &lt;code&gt;ViewChildren&lt;/code&gt;. It is very similar to &lt;code&gt;ViewChild&lt;/code&gt; except it provides a collection of matching references as a QueryList of items.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;QueryList&lt;/code&gt; - Its an unmodifiable list of items that Angular keeps track of and up to date when the state of the application changes.&lt;/p&gt;

&lt;p&gt;There are few properties and methods of QueryList&lt;br&gt;
&lt;code&gt;first&lt;/code&gt;: gets the first item in the list.&lt;br&gt;
&lt;code&gt;last&lt;/code&gt;: gets the last item in the list.&lt;br&gt;
&lt;code&gt;length&lt;/code&gt;: gets the length of the items.&lt;br&gt;
&lt;code&gt;changes&lt;/code&gt;: An observable. It emits a new value, whenever the Angular adds, removes or moves the child elements.&lt;/p&gt;

&lt;p&gt;JavaScript array methods like map(), filter() , find(), forEach(), etc. are also supported by the QueryList&lt;/p&gt;

&lt;p&gt;Now the example -&lt;br&gt;
You have three entries of the same component üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;app-my-counter&amp;gt;&amp;lt;/app-my-counter&amp;gt;
&amp;lt;app-my-counter&amp;gt;&amp;lt;/app-my-counter&amp;gt;
&amp;lt;app-my-counter&amp;gt;&amp;lt;/app-my-counter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you want to get hold of all the items. &lt;br&gt;
&lt;code&gt;ViewChildren&lt;/code&gt; is the best choice.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  @ViewChildren(MyCounterComponent)
  viewChildrenRef: QueryList&amp;lt;MyCounterComponent&amp;gt; | undefined;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here using ViewChildren you can get access to all the matching selector. You can loop through them and perform any operation you need to.&lt;/p&gt;

&lt;p&gt;That's all for now.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed reading the post&lt;/p&gt;

&lt;p&gt;If you liked it please &lt;em&gt;like&lt;/em&gt; ‚ù§Ô∏è &lt;em&gt;share&lt;/em&gt; üíû &lt;em&gt;comment&lt;/em&gt; üß°.&lt;/p&gt;

&lt;p&gt;Coming up more topics on Angular.&lt;br&gt;
So stay tuned.&lt;/p&gt;

&lt;p&gt;I will be &lt;a href="https://twitter.com/Anubhab_0905"&gt;tweeting&lt;/a&gt; more on &lt;code&gt;Angular&lt;/code&gt; &lt;code&gt;JavaScript&lt;/code&gt; &lt;code&gt;TypeScript&lt;/code&gt; &lt;code&gt;CSS&lt;/code&gt; tips and tricks.&lt;/p&gt;

&lt;p&gt;So hope to see you there too üòÉ&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Cheers&lt;/em&gt;&lt;/strong&gt; üçª &lt;br&gt;
&lt;em&gt;Happy Coding&lt;/em&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>beginners</category>
      <category>development</category>
      <category>typescript</category>
    </item>
    <item>
      <title>From Jest to Vitest - Migration and Benchmark</title>
      <author>Matti Bar-Zeev</author>
      <pubDate>Fri, 21 Jan 2022 11:52:20 +0000</pubDate>
      <link>https://dev.to/mbarzeev/from-jest-to-vitest-migration-and-benchmark-23pl</link>
      <guid>https://dev.to/mbarzeev/from-jest-to-vitest-migration-and-benchmark-23pl</guid>
      <description>&lt;p&gt;In this post join me as I migrate my project‚Äôs test runner framework from Jest to &lt;a href="https://github.com/vitest-dev/vitest"&gt;Vitest&lt;/a&gt;, and check if it is really as they claim - ‚Äú&lt;em&gt;A blazing fast unit test framework&lt;/em&gt;‚Äù.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vitest"&gt;
  &lt;/a&gt;
  Vitest?
&lt;/h2&gt;

&lt;p&gt;I‚Äôm pretty sure you‚Äôve already heard about &lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt; which is Evan You‚Äôs recent promising project for frontend tooling. Benchmarks claim it is super fast in times where bundling and HMR present real challenges for dev velocity. &lt;br&gt;
It was recently brought to my attention that there is another emerging project called &lt;a href="https://github.com/vitest-dev/vitest"&gt;Vitest&lt;/a&gt; which is supposed to bring that same disruption into the realm of test runners. My curiosity obviously could not let this pass.&lt;br&gt;
Although ‚Äú&lt;em&gt;Vitest is still in development and not stable yet. It's not recommended to use it in production.&lt;/em&gt;‚Äù I was eager to find out just how fast we are talking about. &lt;/p&gt;

&lt;p&gt;Here's my path for migrating a project using Jest into using Vitest along with some benchmarking.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#benchmarking"&gt;
  &lt;/a&gt;
  Benchmarking
&lt;/h2&gt;

&lt;p&gt;My guinea pig is (yet again) my React &lt;a href="https://word-search-react-game.netlify.app/"&gt;Word-Search game&lt;/a&gt; and its tests, but before I jump in I would like to measure how long it currently takes to run the project‚Äôs tests in order to do some comparison at the end.&lt;br&gt;
The Project currently has 4 test files which have 37 tests between them. Not too many, I agree, but I believe it can give a good sense of the difference between Jest and Vitest.&lt;/p&gt;

&lt;p&gt;I will measure the tests running time in 2 scenarios: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Initial run - where I first lunch the test &lt;/li&gt;
&lt;li&gt;Watch run - where I change a single file and see how long it takes for the tests to run&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For each framework I will run these scenarios a few times (with and without cleaning the cache for Jest for the initial run) to make sure I get the average time.&lt;/p&gt;

&lt;p&gt;Here are the results for Jest I got:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Initial run - 6.5s (without clearing Jest cache its 5.5s)&lt;/li&gt;
&lt;li&gt;Watch run - 5.5s&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#migrating-to-vitest"&gt;
  &lt;/a&gt;
  Migrating to Vitest
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/vitest-dev/vitest"&gt;Vitest&lt;/a&gt; has a really comprehensive gitHub repo, with some good documentation (considering its age).&lt;br&gt;
I could look into the code &lt;a href="https://github.com/vitest-dev/vitest/tree/main/examples"&gt;examples&lt;/a&gt; for React and React Testing Lib and monkey copy-paste it with fingers crossed, but I would like to know what‚Äôs really going on, and what is the exact minimum required for one to make this transition.&lt;br&gt;
Before I even start to npm install anything, I‚Äôd like to try it as they suggest by running a single test. This following test is passing with Jest, now let‚Äôs try it with Vitest:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx vitest src/components/Confirmation/index.test.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After confirming the installation of ‚Äòvitest‚Äô we get our feedback from the test runner - who could have guessed, the first error (I must admit that Vitest has a more clearer way of displaying the errors and failed tests):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LpX74Ayn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2tippsxuwg80n94u9dfl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LpX74Ayn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2tippsxuwg80n94u9dfl.png" alt="Image description" width="880" height="338"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Error: Failed to parse source for import analysis because the content contains invalid JS syntax. If you are using JSX, make sure to name the file with the .jsx or .tsx extension.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While Jest has no issue with parsing these files, it appears that Vitest does not know how to parse them, and requires that we change the file names if they contain JSX. &lt;br&gt;
Before I jump into introducing new configurations I would like to see if just changing the file name will help with this error, and it does - changing the name of my test file from index.test.js to index.test.jsx eliminates that error, but now I‚Äôm getting a new one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ZW5ycYa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpnw5iz136hnhct9qh3s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ZW5ycYa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpnw5iz136hnhct9qh3s.png" alt="Image description" width="880" height="309"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;describe is not defined&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, Jest has these globals declared, but it seems that Vitest does not, and we need to import them explicitly. No worries, let‚Äôs do that, but before we do, we need to install Vitest. We at least know now that running Vitest just by using npx is not enough when migrating a project to work with it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i vitest &lt;span class="nt"&gt;-D&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let‚Äôs add the needed imports to our test file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vitest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Oh my, now all my tests fail with a lot of errors flying, but that‚Äôs good. Let‚Äôs address them one by one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OfCAx3q5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvytvq0glr3t70fcv3cv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OfCAx3q5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvytvq0glr3t70fcv3cv.png" alt="Image description" width="880" height="268"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;document is not defined&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This error comes from react-testing-library and it has to do with js-dom support of vitest. I‚Äôm going to look for some resources for this‚Ä¶ yes, the &lt;a href="https://github.com/vitest-dev/vitest/blob/main/docs/config/index.md#environment"&gt;docs&lt;/a&gt; do not fail - it says that adding a docblock or comment specifying the env as js-dom (or dom-happy) will do the trick. I will add it to my test and see how it goes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
* @vitest-environment jsdom
*/&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Confirmation component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The tests run again, but still all of them are failing, now with new error:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jiITefXi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e57z5qiqlj6wsvh5xypo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jiITefXi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e57z5qiqlj6wsvh5xypo.png" alt="Image description" width="880" height="254"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Invalid Chai property: toBeInTheDocument&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Chai? No, no, no‚Ä¶ toBeInTheDocument is not a Chai property. &lt;br&gt;
toBeInTheDocument is an API of the testing-library‚Äôs js-dom, and the part responsible to include it and append its assertions is the test setup file (in create react app it is the testSetup.js file on the project root).&lt;/p&gt;

&lt;p&gt;In order to let vitest include this file as its own setup we need to create a vitest config, no escape there. Now is a good time to look at the configuration found on the &lt;a href="https://github.com/vitest-dev/vitest/tree/main/examples/react-testing-lib"&gt;example&lt;/a&gt; and check what‚Äôs going on in the configuration there. Again, I‚Äôm not blindly copy-pasting and so I pick what I know to be relevant to the problem I‚Äôm facing.&lt;/p&gt;

&lt;p&gt;In order to use the configuration I need to install ‚Äúvite‚Äù. I‚Äôm not very keen about it, but if that makes my tests run faster, so be it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i vite &lt;span class="nt"&gt;-D&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I create a configuration file named ‚Äúvite.config.js‚Äù and set the configuration as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;defineConfig&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vite&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineConfig&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
   &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="na"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="na"&gt;setupFiles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src/setupTests.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see I‚Äôm giving the setup file location, which loads the jest-dom needed, and also notice that I have the global property set to ‚Äútrue‚Äù. This means that I won‚Äôt need to import those global variables Jest comes with like ‚Äúdescribe‚Äù, ‚Äúexpect‚Äù etc. I can remove that import from my test :)&lt;br&gt;
(more information on the configuration can be found &lt;a href="https://github.com/vitest-dev/vitest/blob/main/docs/config/index.md"&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Good progress, but do our tests pass now? No, some still don‚Äôt. We have another error:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pfgy4FpF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ythoeol9ck1uvvb8tuu2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pfgy4FpF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ythoeol9ck1uvvb8tuu2.png" alt="Image description" width="880" height="273"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jest is not defined&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well of course it isn‚Äôt. We‚Äôre using jest in this test for creating spy/stub functions with &lt;code&gt;jest.fn()&lt;/code&gt;, but Vitest has another way of achieving this - it has the same implementation but under ‚Äúvi‚Äù. So instead we need to use &lt;code&gt;vi.fn()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;vi&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vitest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should be able to receive a handler for the "Cancel" button and execute it upon click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onCancellationHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;vi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hurrah! We have a single test migrated into Vitest :)&lt;/p&gt;

&lt;p&gt;I will now attempt to run the entire tests with vitest. I will start by changing my npm script for test to run vitest instead of jest:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vitest"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's also add the &lt;code&gt;environment: 'jsdom'&lt;/code&gt; to the configuration file so we can avoid adding the env docblock in each test.&lt;br&gt;
Running npm tests, and as you probably guessed it, many tests fail, but the good news is that there is nothing new to the issues we already bumped into before.&lt;br&gt;
It is time to do some benchmarking &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benchmark-again-and-compare"&gt;
  &lt;/a&gt;
  Benchmark again and compare
&lt;/h2&gt;

&lt;p&gt;Now it is time to take our statistics again for Vitest:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Initial run - 5.30s (nice, but kinda the same as Jest with cache)&lt;/li&gt;
&lt;li&gt;Watch run  1.25s (wow!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let‚Äôs put it in a nice table:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Framework&lt;/th&gt;
&lt;th&gt;Initial run&lt;/th&gt;
&lt;th&gt;Watch run&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Jest&lt;/td&gt;
&lt;td&gt;6.50s&lt;/td&gt;
&lt;td&gt;5.5s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vitest&lt;/td&gt;
&lt;td&gt;5.30s&lt;/td&gt;
&lt;td&gt;1.25s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;From this little benchmarking I did here on my own machine, it appears that although the initial runs are slightly in the favor of Vitest, the watch run is a lot faster!&lt;br&gt;
As I see it, there is no question that once Vitest is ready for production you should really consider replacing your current test runner with it. My Word-Search game already has it ;)&lt;/p&gt;

&lt;p&gt;As always, if you have any thoughts or comments about what's written here, please share with the rest of us :)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hey! If you liked what you've just read check out &lt;a href="https://twitter.com/mattibarzeev?ref_src=twsrc%5Etfw"&gt;@mattibarzeev&lt;/a&gt; on Twitter&lt;/em&gt; üçª&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;small&gt;&lt;small&gt;Photo by &lt;a href="https://unsplash.com/@flo_stk?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Florian Steciuk&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/speed?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/small&gt;&lt;/small&gt;&lt;/small&gt;&lt;/p&gt;

</description>
      <category>testing</category>
      <category>react</category>
      <category>vite</category>
      <category>performance</category>
    </item>
    <item>
      <title>End-To-End Type Safety: What, Why and How</title>
      <author>Sabin Adams üßëüèª‚Äçüíª</author>
      <pubDate>Fri, 21 Jan 2022 11:46:45 +0000</pubDate>
      <link>https://dev.to/sabinthedev/end-to-end-type-safety-what-why-and-how-179n</link>
      <guid>https://dev.to/sabinthedev/end-to-end-type-safety-what-why-and-how-179n</guid>
      <description>&lt;p&gt;A difficult challenge developers often face is creating and managing types across the entirety of their software stack in a way that allows for quick and easy error and change detection.&lt;/p&gt;

&lt;p&gt;Without a proper system in place, simple changes to your database's schema, your API layer's definition of an object, or even your web client's definition of that object could result in missing or malformed data somewhere in the chain of commands if each place wasn't updated properly.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;These kinds of problems are NO FUN to debug!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this article we're going to take a look at the cause of this issue, what a safe solution might look like, and then work through a simple full-stack application that puts a solution in place to solve the problem, making the DX (developer experience) a million times better!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;The application we will be building will require the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://nodejs.org/"&gt;Node.js&lt;/a&gt; installed on your machine&lt;/li&gt;
&lt;li&gt;A basic understanding of JavaScript, TypeScript, and their ecosystem&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will be using the these technologies and tools to build our application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://nx.dev/"&gt;Nx&lt;/a&gt;: A build system that makes developing monorepos simple&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;: Front-end library&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nestjs.com/"&gt;NestJS&lt;/a&gt;: Back-end Node.js Framework&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.prisma.io/"&gt;Prisma&lt;/a&gt;: ORM&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.sqlite.org/index.html"&gt;SQLite&lt;/a&gt;: Database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don't worry if you aren't familiar with the individual pieces. I'll explain as we go! &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can find the final application on &lt;a href="https://github.com/sabinadams/bookstore-type-safe"&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#a-little-history"&gt;
  &lt;/a&gt;
  A Little History
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wXtfusOy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642678726860/DpjmzMtkJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wXtfusOy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642678726860/DpjmzMtkJ.png" alt="Add a subheading (1).png" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's take a step back in time for a second. It's the early 2010's and Node.js is the cool new kid on the block. Every developer is eager to jump in and get their hands into some JavaScript that magically runs on a server! &lt;/p&gt;

&lt;p&gt;More and more people begin adopting and contributing to this new technology, and soon even large companies like Uber and LinkedIn start switching over to the shiny new toy!&lt;/p&gt;

&lt;p&gt;But then the applications start to get big... a little too big for their developers to remember things like &lt;em&gt;"What does my &lt;code&gt;createUser&lt;/code&gt; function actually expect as its parameters? And what does it return? What all is available from the database?"&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Organizing functionality becomes tedious as the concept of &lt;em&gt;Object Oriented programming&lt;/em&gt; doesn't exist in JavaScript and every time you hit deploy you have a little voice in the back of your head that wonders if you're sure everything was set up correctly...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enter-typescript"&gt;
  &lt;/a&gt;
  Enter, TypeScript
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7dyT2L0j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642678155311/sNu0XdaXB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7dyT2L0j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642678155311/sNu0XdaXB.png" alt="Untitled design (6).png" width="150" height="150"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This exact scenario is what lead to the development of what we know today as &lt;strong&gt;TypeScript&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;TypeScript brought with it a whole new world of tooling and type-safety that was previously impossible. You could organize your code into classes, provide interfaces for those classes, and set up types for various pieces of your code.&lt;/p&gt;

&lt;p&gt;Editor tooling also evolved in a way that made it super easy to develop efficiently and detect bugs before even compiling your code!&lt;/p&gt;

&lt;p&gt;This all sounds great and was a huge step in the right direction, but it shed light on another problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;While TypeScript made development way smoother, safer, and less error-prone, developers began to realize that there was some disconnect in their applications even with these types. &lt;/p&gt;

&lt;p&gt;Here's why:&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;typical&lt;/em&gt; application nowadays is organized generally into three main layers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client Layer: The website you interact with&lt;/li&gt;
&lt;li&gt;API Layer: The layer that allows your client to indirectly interact with the database&lt;/li&gt;
&lt;li&gt;Database Layer: The layer where your data is kept&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PooO-Kau--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642678650256/TEabIv4iPN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PooO-Kau--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642678650256/TEabIv4iPN.png" alt="Copy of Add a subheading.png" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's imagine we have an application following this structure and in our database we have a table called &lt;code&gt;users&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ovf1ZWu5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642679482518/urHhVZ9Ur.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ovf1ZWu5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642679482518/urHhVZ9Ur.png" alt="Blank diagram - Page 1.png" width="340" height="220"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your front-end code &lt;em&gt;(the client layer)&lt;/em&gt; and your back-end code &lt;em&gt;(the api layer)&lt;/em&gt; each have their own typings that describe what a &lt;code&gt;User&lt;/code&gt; from your database schema &lt;em&gt;(the database layer)&lt;/em&gt; should look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If everything was set up correctly, we can assume our imaginary application is working great! Your front-end might be able to fetch an array of users from the API. Both of those ends are aware of what a user is and how to handle it within its own layer and all is well.&lt;/p&gt;

&lt;p&gt;... But then things change. A nit-picky database admin decides the &lt;code&gt;fullname&lt;/code&gt; column should be split into two: &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt;. A schema update is prepared and it's up to you as a developer to make absolutely sure the code and types are updated to reflect the new schema changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;type User = {
&lt;/span&gt;  id: number;
&lt;span class="gd"&gt;-  fullname: string;
&lt;/span&gt;&lt;span class="gi"&gt;+  firstName: string;
+  lastName: string;
&lt;/span&gt;  email: string;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What happens, however, if you forget to update the front-end code? Your editor and the TypeScript compiler won't throw any errors because, as far as it's concerned, in the front-end a &lt;code&gt;User&lt;/code&gt; still only has the &lt;code&gt;fullname&lt;/code&gt; column!&lt;/p&gt;

&lt;p&gt;We can imagine our layers currently look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ostbF4QI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642711905385/cmbTcqg9F.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ostbF4QI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642711905385/cmbTcqg9F.png" alt="Copy of Copy of Add a subheading (2).png" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each individual layer has its own definition of the object's shape, or a &lt;code&gt;type&lt;/code&gt;. But they are unaware of their counterpart's version of that type and in their own &lt;em&gt;box&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Requests made between the individual layers are working fine, but the shape of the data being passed around can't be known for sure as it crosses borders.&lt;/p&gt;

&lt;p&gt;This issue is what can, and tends to, arise as an application grows without implementing &lt;strong&gt;end-to-end type safety&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Fixing the type in your front-end code would suddenly reveal a bunch of squiggly red lines under every instance of &lt;code&gt;user.fullname&lt;/code&gt; that was accidentally left behind, but you would never know until the type was fixed or an error popped up after thorough testing &lt;em&gt;(or a deployment üò¨&lt;/em&gt;)!&lt;/p&gt;

&lt;p&gt;In a less-severe scenario, we can imagine all of the types were properly updated throughout the stack and everything works fine. While the end-result is functional, the developer experience is not great at all because every change to a type or the database schema would require the developer to have to make the same change in a bunch of different locations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#endtoend-type-safety"&gt;
  &lt;/a&gt;
  End-To-End Type Safety
&lt;/h2&gt;

&lt;p&gt;With &lt;strong&gt;end-to-end type safety&lt;/strong&gt;, the goal is to have a single source of truth for your types across all layers of your application. Ideally this would occur in an automated fashion as your database schema changes. &lt;/p&gt;

&lt;p&gt;If this is achieved, the walls between each layer are essentially broken down and allow the data to flow to and from each layer in a much more simple way that makes sense to the developer who has to work with it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wcyYZsro--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642712249114/yk7BuvND7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wcyYZsro--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642712249114/yk7BuvND7.png" alt="Copy of Copy of Add a subheading (3).png" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As data passes through each layer of the application, crossing borders via requests, we can be sure that in each &lt;em&gt;area&lt;/em&gt; of the stack we are expecting the same object.&lt;/p&gt;

&lt;p&gt;The benefits of this implementation include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Great DX&lt;/li&gt;
&lt;li&gt;Less testing, because TypeScript handles a lot of what we would normally test for&lt;/li&gt;
&lt;li&gt;Easier debugging because of the tooling and linting TypeScript comes with&lt;/li&gt;
&lt;li&gt;Ease-of-mind when making changes because we can allow ourselves to lean on the TypeScript Compiler&lt;/li&gt;
&lt;li&gt;A lot of your code ends up becoming self-documented across your stack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are, of course, many different ways to achieve &lt;strong&gt;end-to-end type safety&lt;/strong&gt;, and those implementations can vary depending on your tech stack.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#putting-it-into-practice"&gt;
  &lt;/a&gt;
  Putting It Into Practice
&lt;/h2&gt;

&lt;p&gt;As a developer myself, I understand that the best way for a developer to understand a concept like this is to jump in and get your hands dirty, so let's take a look at one possible implementation of &lt;strong&gt;end-to-end type safety&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We'll set up a Monorepo with Nx that has a NestJS API and a React client. The API will consume a SQLite database.&lt;/p&gt;

&lt;p&gt;Our goal with the application will be to have fully automated type safety across all three layers. Making changes to our database should automatically update the type definitions in the API and Client layers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generate-an-nx-workspace"&gt;
  &lt;/a&gt;
  Generate an Nx Workspace
&lt;/h3&gt;

&lt;p&gt;We'll start up by setting up the Nx Workspace. Navigate to a directory where you'd like to generate your project and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-nx-workspace bookstore 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should take you through a series of prompts asking you how to initialize your monorepo. Go ahead and pick &lt;code&gt;nest&lt;/code&gt; to start off and name the nest application &lt;code&gt;api&lt;/code&gt;.  I chose &lt;code&gt;no&lt;/code&gt; for the Nx Cloud option.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tIpo3IYF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642667231795/zJAJq0h1O.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tIpo3IYF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642667231795/zJAJq0h1O.gif" alt="nxinit.gif" width="658" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you pop open the workspace that was generated, inside of the &lt;code&gt;/apps/api&lt;/code&gt; folder you should find a boilerplate NestJS application!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;bookstore
code &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="c"&gt;# if you're using VSCode&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mCFzSdey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642721028760/iVD05aAi4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mCFzSdey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642721028760/iVD05aAi4.png" alt="YKNdYzib8.png" width="500" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was conveniently set up for you by Nx and is ready to run!&lt;/p&gt;

&lt;p&gt;We're going to also need our React front-end, so lets download Nx's React project generator and generate a project in our monorepo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-D&lt;/span&gt; @nrwl/react
nx g @nrwl/react:app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are the options I went with for the react app:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--slHYmWO9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642721003298/nVPOubDcO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--slHYmWO9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642721003298/nVPOubDcO.png" alt="82ET6rMwn.png" width="880" height="99"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: A &lt;code&gt;client-e2e&lt;/code&gt; folder was also generated. This is where any e2e tests for your react application will live. We'll ignore that folder in this tutorial.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And viola! We have a monorepo set up with a NestJS API and React application all ready to serve. &lt;/p&gt;

&lt;p&gt;If you'd like to serve the projects, you can use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nx serve client &lt;span class="c"&gt;# The react app&lt;/span&gt;
nx serve api    &lt;span class="c"&gt;# The nest api&lt;/span&gt;
nx run-many &lt;span class="nt"&gt;--parallel&lt;/span&gt; &lt;span class="nt"&gt;--target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;serve &lt;span class="nt"&gt;--projects&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;client,api &lt;span class="c"&gt;# Both&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If you are unfamiliar with Nx and want to learn more about what it can do, check out the docs &lt;a href="https://nx.dev/getting-started/intro"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#initialize-prisma"&gt;
  &lt;/a&gt;
  Initialize Prisma
&lt;/h3&gt;

&lt;p&gt;The next thing we'll want to set up is our database, and we're going to do that through Prisma. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.prisma.io/"&gt;Prisma&lt;/a&gt; has a rich set up features that go beyond just being a fantastic ORM. Through it we can define the shape of our database in a schema file, apply our schema to the actual database, and manage deployments and our migration history.&lt;/p&gt;

&lt;p&gt;Along with this, Prisma generates an ORM that is derived from the schema we define and is fully type safe. This allows us to already tick a few things off our list of type-related concerns!&lt;/p&gt;

&lt;p&gt;To use Prisma we'll first need to install it as a development dependency and initialize Prisma in our project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-D&lt;/span&gt; prisma
npx prisma init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will generate a &lt;code&gt;/prisma&lt;/code&gt; folder at the root of your project with a file inside named &lt;code&gt;schema.prisma&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;schema.prisma&lt;/code&gt; is what we'll call our &lt;em&gt;source of truth&lt;/em&gt;. We'll see more about why later on, but for now let's move on to setting up an actual database for Prisma to interact with.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#set-up-sqlite"&gt;
  &lt;/a&gt;
  Set Up SQLite
&lt;/h3&gt;

&lt;p&gt;To keep things nice and simple, we're going to use SQLite as our database.&lt;/p&gt;

&lt;p&gt;Add the following &lt;em&gt;blocks&lt;/em&gt; to your &lt;code&gt;schema.prisma&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url = "file:./dev.db"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This tells Prisma we are using SQLite and it should generate the db file into the same directory as the schema file.&lt;/p&gt;

&lt;p&gt;It also lets Prisma know we want to generate the &lt;em&gt;Prisma Client&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For more information about Prisma's &lt;code&gt;PSL&lt;/code&gt; &lt;em&gt;(Prisma Schema Language)&lt;/em&gt;, check out their &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-schema"&gt;docs&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#add-a-model"&gt;
  &lt;/a&gt;
  Add A Model
&lt;/h3&gt;

&lt;p&gt;Now that we've got a database set up and Prisma configured, let's model out our data. We'll keep things clean and just add a &lt;code&gt;Book&lt;/code&gt; model to the &lt;code&gt;schema.Prisma&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;model Book {
  id         Int    @id @default(autoincrement())
  title      String
  authorName String
  pages      Int
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Remember&lt;/em&gt;, this schema is the source of truth that not only describes the database schema, but will generate types for us to use in our code via the &lt;em&gt;Prisma Client&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;To apply the new model &lt;em&gt;(or table)&lt;/em&gt; to our SQLite database, we can run Prisma's migrate tool.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;prisma migrate dev &lt;span class="nt"&gt;--name&lt;/span&gt; init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command generates a migration file in &lt;code&gt;/prisma/migrations&lt;/code&gt;, applies that migration to our database, and finishes by generating our Prisma client.&lt;/p&gt;

&lt;p&gt;At this point, we have successfully set up control of our database schema, but those &lt;em&gt;walls&lt;/em&gt; are still up between each layer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wvlu-A35--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642719505904/NY-d226gH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wvlu-A35--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642719505904/NY-d226gH.png" alt="Copy of Copy of Add a subheading (11).png" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#set-up-an-api-endpoint"&gt;
  &lt;/a&gt;
  Set Up An API Endpoint
&lt;/h3&gt;

&lt;p&gt;Okay, so we've got a database set up, our API and Client generated, and the Prisma client automatically modeled around our database. Let's put these to use.&lt;/p&gt;

&lt;p&gt;Inside of your &lt;code&gt;/apps/api/src&lt;/code&gt; folder, create a new file called &lt;code&gt;prisma.service.ts&lt;/code&gt;. This file will initialize and handle the &lt;code&gt;Prisma Client&lt;/code&gt; that was generated when we ran our migration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// prisma.service.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnModuleInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnModuleDestroy&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PrismaClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@prisma/client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PrismaService&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;PrismaClient&lt;/span&gt;
  &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnModuleInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnModuleDestroy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;onModuleInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$connect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;onModuleDestroy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Here we are wrapping Prisma in a service so that it can be provided via NestJS's dependency injection system&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, over in your &lt;code&gt;app.module.ts&lt;/code&gt; we need to register the new &lt;code&gt;PrismaService&lt;/code&gt; as a provider for that module. &lt;/p&gt;

&lt;p&gt;First, go ahead and get rid of the existing &lt;code&gt;app.service.ts&lt;/code&gt; and &lt;code&gt;app.service.spec.ts&lt;/code&gt; files and remove that service's references in the app module file. We won't be needing those.&lt;/p&gt;

&lt;p&gt;Once those are cleaned out, replace them with references to the &lt;code&gt;PrismaService&lt;/code&gt; we created.&lt;/p&gt;

&lt;p&gt;Your &lt;code&gt;app.module.ts&lt;/code&gt; file should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Module&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppController&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.controller&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PrismaService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./prisma.service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="na"&gt;controllers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AppController&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;PrismaService&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppModule&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now our service is registered in NestJS's DI &lt;em&gt;(Dependency Injection)&lt;/em&gt; system, so we should be able to reference the &lt;code&gt;PrismaService&lt;/code&gt; in our controller. Open up &lt;code&gt;app.controller.ts&lt;/code&gt; and update it to match the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Get&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PrismaService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./prisma.service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Controller&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PrismaService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This controller is where we can set up our API routes. The &lt;code&gt;@Get&lt;/code&gt; decorator on &lt;code&gt;getData&lt;/code&gt; lets NestJS know that it can be accessed at the base route: &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We want this endpoint to return all of the books in our database.&lt;/p&gt;

&lt;p&gt;In the return of &lt;code&gt;getData&lt;/code&gt;, if we begin to type out a query with Prisma, you will see we get some nice autocompleting features.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---RdTVT8---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642672851942/1YGXrTx8A.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---RdTVT8---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642672851942/1YGXrTx8A.gif" alt="prismaclient.gif" width="516" height="262"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the query for all of the books is written, if you hover over the function definition you should notice the return type of that function is &lt;code&gt;PrismaPromise&amp;lt;Book[]&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_WhQlDYR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642673111965/lgs6z-5_C.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_WhQlDYR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642673111965/lgs6z-5_C.png" alt="Untitled design (4).png" width="500" height="264"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's super convenient! ...but where did the &lt;code&gt;Book&lt;/code&gt; type come from?? That was Prisma, our source of truth! &lt;/p&gt;

&lt;p&gt;We have now broken down the wall between our database schema's shape and our API types by having a single source defining each of those.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xBbQyl0u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642723772256/jkDADmKYf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xBbQyl0u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642723772256/jkDADmKYf.png" alt="Copy of Copy of Add a subheading (13).png" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our types in the API are automatically updated whenever the database changes and the prisma client gets re-generated! If you play around with the query a bit and narrow down the selected fields, you should see that the return type of the route function dynamically changes based on the fields you select.&lt;/p&gt;

&lt;p&gt;That's pretty slick, and checks off two layers of the three layers we need to worry about!&lt;/p&gt;

&lt;p&gt;Before moving on to that third layer though, let's add some data to the database via Prisma Studio so we can query it and make sure everything is working nicely.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;prisma studio
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command should open up the studio to a list of models. If you click into the &lt;code&gt;Book&lt;/code&gt; model you should see a table view of our &lt;code&gt;Book&lt;/code&gt; table. Go ahead and add a few records to the database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qcrM9Yte--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642673759055/ruvZrOBJo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qcrM9Yte--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642673759055/ruvZrOBJo.png" alt="Screen Shot 2022-01-20 at 2.15.53 AM.png" width="880" height="560"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, serve up the &lt;code&gt;api&lt;/code&gt; via Nx and head over to &lt;a href="http://localhost:3333/api"&gt;&lt;code&gt;http://localhost:3333/api&lt;/code&gt;&lt;/a&gt; to check out your data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rrkIAPck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642673735920/JU0_Ri8JK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rrkIAPck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642673735920/JU0_Ri8JK.png" alt="Screen Shot 2022-01-20 at 2.15.28 AM.png" width="880" height="560"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Awesome! We're getting data and ready to set up our front-end to safely consume that data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-the-frontend"&gt;
  &lt;/a&gt;
  Build The Front-End
&lt;/h3&gt;

&lt;p&gt;In order to interact with our api, we'll first need to enable &lt;code&gt;cors&lt;/code&gt; on the server. In &lt;code&gt;/apps/api/src/main.ts&lt;/code&gt;, we can use our NestJS app's &lt;code&gt;enableCors&lt;/code&gt; method to accomplish this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// main.ts&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;NestFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AppModule&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enableCors&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we should be okay to make requests from our client to our api. In &lt;code&gt;/app/client/src/app/app.tsx&lt;/code&gt;, we'll start off by fetching our list of books from the api.&lt;/p&gt;

&lt;p&gt;Add this effect and state variable to the top of the &lt;code&gt;App&lt;/code&gt; component function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setBooks&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;

&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3333/api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;setBooks&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And to display those books, we'll replace the return of that function with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;book&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1px solid black&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2rem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authorName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you serve up the API and Client and navigate to &lt;a href="http://localhost:4200/"&gt;&lt;code&gt;http://localhost:4200/&lt;/code&gt;&lt;/a&gt;, you should see our books beautifully displayed üé® &lt;em&gt;(or not so beautifully...)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oa83MFY4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642676794115/KsT12aXgB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oa83MFY4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642676794115/KsT12aXgB.png" alt="Screen Shot 2022-01-20 at 3.06.22 AM.png" width="880" height="560"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay, before you TypeScript junkies start getting queazy seeing that &lt;code&gt;any&lt;/code&gt; type, let me explain. &lt;/p&gt;

&lt;p&gt;Currently, even though our Database knows what a &lt;code&gt;Book&lt;/code&gt; looks like and our API knows what it looks like, our front-end has no clue! The TypeScript compiler complains about that when we try to access properties on the mapped books.&lt;/p&gt;

&lt;p&gt;Fortunately, we're implementing an &lt;strong&gt;end-to-end type safe&lt;/strong&gt; system and Prisma gives us access to those types.&lt;/p&gt;

&lt;p&gt;At the top of this file, let's import the &lt;code&gt;Book&lt;/code&gt; type Prisma generated for us &lt;em&gt;(yes, the same book type we're using in the API layer!)&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@prisma/client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we'll tell our state variable that it should hold an array of books.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setBooks&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you remove the &lt;code&gt;any&lt;/code&gt; type now from the mapped books, you should see that the editor stopped complaining! &lt;/p&gt;

&lt;p&gt;Also, if you go to modify a key being accessed on the &lt;code&gt;book&lt;/code&gt; variable, you should see you get a nice set of auto-complete options that show the fields available to a &lt;code&gt;Book&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nxqASPjS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642715510610/O9rje0A6S.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nxqASPjS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642715510610/O9rje0A6S.png" alt="Screen Shot 2022-01-20 at 1.51.45 PM.png" width="880" height="236"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's pretty awesome if you ask me! We now have a single source of truth for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Our database schema&lt;/li&gt;
&lt;li&gt;Our back-end types&lt;/li&gt;
&lt;li&gt;Our front-end types&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fPetJzY8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642715708633/JhAXS_nkT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fPetJzY8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642715708633/JhAXS_nkT.png" alt="Copy of Copy of Add a subheading (5).png" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All the walls between layers have been broken down and our types and data flow nicely and automatically across our entire stack! &lt;/p&gt;

&lt;p&gt;Congratulations, you have implemented an &lt;strong&gt;end-to-end type safe&lt;/strong&gt; full-stack application! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now-we-break-it"&gt;
  &lt;/a&gt;
  Now We Break It
&lt;/h2&gt;

&lt;p&gt;Alright, enough celebrating! What fun is building a working project if you don't get to break it in the end?&lt;/p&gt;

&lt;p&gt;I've decided I don't really care how many pages a book has. That data is taking up precious (and expensive) space in my database server, so let's get rid of it. &lt;/p&gt;

&lt;p&gt;Pop open that &lt;code&gt;schema.prisma&lt;/code&gt; file we worked in before and remove the &lt;code&gt;pages&lt;/code&gt; field from the model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;model Book {
&lt;/span&gt;  id         Int    @id @default(autoincrement())
  title      String
  authorName String
&lt;span class="gd"&gt;-  pages      Int
&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since our schema definition changed, run a new migration to apply that to our database and generate the new Prisma Client.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;prisma migrate dev &lt;span class="nt"&gt;--name&lt;/span&gt; removed-field
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will get some prompts letting you know you have non-null values in the field you are removing. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;That's pretty awesome Prisma thinks to warn you about that!&lt;/li&gt;
&lt;li&gt;Go ahead and allow it, we aren't concerned about data loss here üí£&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that our schema is migrated and the new client generated, let's find out what we broke!&lt;/p&gt;

&lt;p&gt;Run both the API and the Client:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nx run-many &lt;span class="nt"&gt;--parallel&lt;/span&gt; &lt;span class="nt"&gt;--target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;serve &lt;span class="nt"&gt;--projects&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;client,api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aha! We broke it! You should see an error in your console letting you know what the problem is. Also in your code you'll see those red squiggly lines I mentioned earlier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dTcmAgDv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642716015543/Nkxbf37XJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dTcmAgDv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642716015543/Nkxbf37XJ.png" alt="Screen Shot 2022-01-20 at 2.00.09 PM.png" width="880" height="321"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Think about what just happened. Our Database changed and because we have implemented &lt;strong&gt;end-to-end type safety&lt;/strong&gt; our front-end code was smart enough to tell us it needs to be updated because of that! All without us having to change anything in the code!&lt;/p&gt;

&lt;p&gt;Our back-end code would have done the same if we were actually accessing the &lt;code&gt;pages&lt;/code&gt; field directly anywhere. &lt;/p&gt;

&lt;p&gt;That is the power of TypeScript and end-to-end type safety. Because of this, we would have been able to easily catch any problems using the TypeScript compiler.&lt;/p&gt;

&lt;p&gt;Okay, I know the developer inside you is dying to fix the bug, so go ahead and remove that &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag with the erroneous key.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;I hope after following through that example you're as excited as I am about how powerful TypeScript is when combined with tools like Prisma and Nx that allow you to generate and share types across the entire stack of your application.&lt;/p&gt;

&lt;p&gt;Of course, as mentioned near the beginning of this article, there is no &lt;em&gt;one-size-fits-all&lt;/em&gt; solution and this example was one specific case. Maybe you need partial types, are using GraphQL, or have some other requirement. Implementing a &lt;strong&gt;end-to-end type safe&lt;/strong&gt; experience is possible with the proper tools and configuration. &lt;/p&gt;

&lt;p&gt;Thanks so much for following along and I hope you found this useful&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>sql</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How I improved a Node web application perfomance multifold</title>
      <author>Alexey Yakovlev</author>
      <pubDate>Fri, 21 Jan 2022 11:39:58 +0000</pubDate>
      <link>https://dev.to/yakovlev_alexey/how-i-improved-a-node-web-application-perfomance-multifold-34m2</link>
      <guid>https://dev.to/yakovlev_alexey/how-i-improved-a-node-web-application-perfomance-multifold-34m2</guid>
      <description>&lt;p&gt;This post is a continuation of &lt;a href="https://dev.to/yakovlev_alexey/creating-a-project-with-nestjs-nextjs-3i1i"&gt;Nest.js + Next.js series&lt;/a&gt; and it fixes a big issue I left in the code in &lt;a href="https://dev.to/yakovlev_alexey/advanced-practices-for-nestjs-nextjs-projects-36g9"&gt;the second article&lt;/a&gt;. While I will be using the project from those articles this article is not specific neither to Nest.js nor to Next.js. The goal of this article is to tell a story how I managed to improve a Node application perfomance multifold and share my experience on how to profile complex perfomance issues and make sure they do not return. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="#table-of-contents"&gt;Table of Contents&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#introduction"&gt;Introduction&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#emulating-environment"&gt;Emulating environment&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="#containerizing-application"&gt;Containerizing application&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#generating-load"&gt;Generating load&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#narrowing-down-the-issue"&gt;Narrowing down the issue&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;  &lt;a href="#profiling-a-remote-nodejs-application"&gt;Profiling a remote Node.js application&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="#attaching-nodejs-inspector"&gt;Attaching Node.js inspector&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#reading-profiles"&gt;Reading profiles&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#benching-improvements"&gt;Benching improvements&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;  &lt;a href="#lessons-learned"&gt;Lessons learned&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;I was assigned to refactor bits of server-side rendering pipelines in a project using Nest.js + Next.js combo. Bridge implementation is very similar to the one I left in the articles mentioned earlier. I was still discovering all the quirks with this technology and it was the time I discovered that &lt;code&gt;undefined&lt;/code&gt; values can not be serialized by Next.js. To fix this issue I introduced a sanitizing function. Inspired by JavaScripts functional code style and immutability the function was recursive and did not modify any values, only copied where needed.&lt;/p&gt;

&lt;p&gt;This solution worked fine when the project was small. But the  application was growing and we started transferring rather large objects with a lot of properties and deep nesting. Later we discovered a huge increase in &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/First_contentful_paint"&gt;FCP times&lt;/a&gt; in our user monitorings.&lt;/p&gt;

&lt;p&gt;As the person with the largest amount of experience with &lt;code&gt;nest-next&lt;/code&gt; in the team I went on a quest to investigate and find the source of issues. At this point I obviously forgot about the potential ineffectiveness of a function I wrote earlier. I also did not pay enough attention to the amount of data we started transferring.&lt;/p&gt;

&lt;p&gt;I will show how I approached and overcome this challenge and what lessons I learned. &lt;/p&gt;

&lt;p&gt;We will start by emulating a deployed environment. Developers strive to make different environments including the local one as similar as possible. Unfortunately often it is not possible. To make sure that I make proper inspections I had to analyze a deployed environment and not a local one. And so we will do in this article. &lt;em&gt;Kind of.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#emulating-environment"&gt;
  &lt;/a&gt;
  Emulating environment
&lt;/h2&gt;

&lt;p&gt;To emulate a remote server with SSH connection we will develop a Dockerfile with connection instructions. Then we will synthesize load in the application from Nest.js + Next.js series. With the load in place we may start inspecting our application to narrow down what causes the issue. Use &lt;a href="https://github.com/yakovlev-alexey/nest-next-example/tree/50bfe74492e7fe45c9ce34464d5f02b6cd09692f"&gt;this revision&lt;/a&gt; to work along or check complete code on my GitHub - &lt;a href="https://github.com/yakovlev-alexey/nest-next-example"&gt;https://github.com/yakovlev-alexey/nest-next-example&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#containerizing-application"&gt;
  &lt;/a&gt;
  Containerizing application
&lt;/h3&gt;

&lt;p&gt;In order to run application in an isolated environment I will be using Docker. We will need to run both Node.js app and SSH server in the background. The base image would be &lt;code&gt;node:12.22-alpine&lt;/code&gt;. Alpine Linux images have certain prerequisites in order to properly boot background processes. About those prerequisites read &lt;a href="https://dev.to/yakovlev_alexey/running-ssh-in-an-alpine-docker-container-3lop"&gt;a recent post I made on how to setup SSH server on an Alpine container&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:12.22-alpine&lt;/span&gt;

&lt;span class="k"&gt;ARG&lt;/span&gt;&lt;span class="s"&gt; ssh_pub_key&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /root/.ssh &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;chmod &lt;/span&gt;0700 /root/.ssh &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; passwd &lt;span class="nt"&gt;-u&lt;/span&gt; root &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$ssh_pub_key&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /root/.ssh/authorized_keys &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk add openrc openssh &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ssh-keygen &lt;span class="nt"&gt;-A&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="s1"&gt;'s/AllowTcpForwarding no/AllowTcpForwarding yes/g'&lt;/span&gt; /etc/ssh/sshd_config &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s2"&gt;"PasswordAuthentication no"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/ssh/sshd_config &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /run/openrc &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;touch&lt;/span&gt; /run/openrc/softlevel

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; yarn build

&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["sh", "-c", "rc-status; rc-service sshd start; yarn start"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Something that was not present in the post I mentioned is the line configuring &lt;code&gt;AllowTcpForwarding&lt;/code&gt;. This option allows us to transfer any data by binding ports using &lt;code&gt;-L&lt;/code&gt; client option. It is required for Node.js inspector to communicate with a remote server. Otherwise this Dockerfile is the same and I will neither go into details of its workings nor develop a proper caching solution at this time.&lt;/p&gt;

&lt;p&gt;Add shortcuts to frequently used commands to &lt;code&gt;scripts&lt;/code&gt; section in &lt;code&gt;package.json&lt;/code&gt;. We will map port 3000 as is and port 7655 to internal container port 22 - the default one for SSH server. For authorization a local key will be used and injected into the container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="s2"&gt;"start:docker"&lt;/span&gt;: &lt;span class="s2"&gt;"docker run --rm -p 3000:3000 -p 7655:22 -it &lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;docker build &lt;span class="nt"&gt;--build-arg&lt;/span&gt; &lt;span class="nv"&gt;ssh_pub_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; ~/.ssh/id_rsa.pub&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt; &lt;span class="nt"&gt;-q&lt;/span&gt; .&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="c"&gt;# unwrapped command&lt;/span&gt;
docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-p&lt;/span&gt; 3000:3000 &lt;span class="nt"&gt;-p&lt;/span&gt; 7655:22 &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;docker build &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="nt"&gt;--build-arg&lt;/span&gt; &lt;span class="nv"&gt;ssh_pub_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; ~/.ssh/id_rsa.pub&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="nt"&gt;-q&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="si"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To establish a connection we will use the following script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"start:ssh"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ssh -L 9221:localhost:9229 root@localhost -p 7655"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Unfortunately each new built image will have a new host key since they are generated during the build. Just &lt;code&gt;rm ~/.ssh/known_hosts&lt;/code&gt; locally or remove the host key from this file. &lt;code&gt;StrictHostKeyChecking=no&lt;/code&gt; option will not help since it still prohibits port binding.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#generating-load"&gt;
  &lt;/a&gt;
  Generating load
&lt;/h3&gt;

&lt;p&gt;Before we start adding stub data to generate load let's examine our current perfomance. Use Chrome Dev Tools embedded Lighthouse for this. Start the app using &lt;code&gt;start:docker&lt;/code&gt; (it may take some time to build the image at first) and visit &lt;code&gt;localhost:3000&lt;/code&gt;. After conducting both mobile and desktop tests I got the following results for mobile.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KOXgZYNt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3c6xn1d3jdtze6dxt3cu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KOXgZYNt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3c6xn1d3jdtze6dxt3cu.png" alt="Mobile perfomance" width="880" height="366"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And for desktop.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z_sR8VmQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ww2itvvtgd6blzgdht12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z_sR8VmQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ww2itvvtgd6blzgdht12.png" alt="Desktop estimates" width="880" height="361"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Seems very much fine at the moment.&lt;/p&gt;

&lt;p&gt;Now let's imagine our application puts some large amounts of data into the client payload in order to display the page. It could be anything from actual data to simple translations. For this example I will be stubbing a large object of translations - as close to a real life scenario as possible.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ./src/server/translations.middleware.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NextFunction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createStubTranslation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;en&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lorem ipsum&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;gb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lorem ipsum&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dolore sit ame&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TRANSLATIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStubTranslation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;translationsMiddleware&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;_res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NextFunction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;translations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;TRANSLATIONS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This basic middleware will inject a &lt;code&gt;translations&lt;/code&gt; property with a large amount of nested properties. To make sure it properly works extend the type for Express &lt;code&gt;Request&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ./@types/express.d.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;translations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add this middleware to &lt;code&gt;AppModule&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MiddlewareConsumer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Module&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;translationsMiddleware&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./translations.middleware&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppModule&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MiddlewareConsumer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;translationsMiddleware&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forRoutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally update &lt;code&gt;extractAppData&lt;/code&gt; to filter &lt;code&gt;translations&lt;/code&gt; property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ./src/client/ssr/extractAppData.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GetServerSidePropsContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src/shared/types/next&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppData&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src/shared/types/app-data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;filterUnserializable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./filterUnserializable&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StaticQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./buildServerSideProps&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;extractAppData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GetServerSidePropsContext&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Partial&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StaticQuery&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;features&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;basePath&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;translations&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;filterUnserializable&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;features&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;basePath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;translations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;Partial&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AppData&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;extractAppData&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#narrowing-down-the-issue"&gt;
  &lt;/a&gt;
  Narrowing down the issue
&lt;/h3&gt;

&lt;p&gt;The load is in place - time to check Lighthouse. Reboot &lt;code&gt;start:docker&lt;/code&gt; and generate another report.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nBGmtWta--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9bq4ezb2j3anrtvwdlr7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nBGmtWta--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9bq4ezb2j3anrtvwdlr7.png" alt="Results with load" width="880" height="373"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Seems fine, right? But it does not align well with what you actually see when you refresh the page - loading takes well over a second - and that is on a desktop (assuming you are on one) for an almost empty page.&lt;/p&gt;

&lt;p&gt;Well, if you scroll Lighthouse report a little lower you will see a few "opportunities". It turns out it indeed takes more than a second to recieve the first byte from the server. However it is not exactly clear from the Lighthouse score. It can be very deceiving and that is one of the reasons why you should not consider a primary metric for perfomance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XS-B7pyN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp3n7rkq2ee83pfbt36m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XS-B7pyN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp3n7rkq2ee83pfbt36m.png" alt="Lighthouse opportunities and recommendations" width="880" height="176"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another tool we may employ to narrow down a bottleneck is request timings. In the network section of Dev Tools select any request and open "Timing" tab. For the initial request you will see a similar picture. Large TTFB always indicates issues with server-side request handling.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RywRJ2Vg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x3pc1hpmpqr6rqg8q3km.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RywRJ2Vg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x3pc1hpmpqr6rqg8q3km.png" alt="Initial request timings" width="880" height="465"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You may narrow down issue location by checking other requests which do not require server rendering a page. They will have little to no TTFB. Clearly something is wrong with server-side rendering.&lt;/p&gt;

&lt;p&gt;When a server handles the request it typically first executes all the middlewares, then interceptors, actual handlers and filters if needed. Server-side rendering may be stalled by blocking requests run synchronously one after another. In large projects it is really challenging to pinpoint what causes issues analytically.&lt;/p&gt;

&lt;p&gt;Therefore we should do a perfomance inspection using &lt;a href="https://en.wikipedia.org/wiki/Profiling_(computer_programming)"&gt;profiling&lt;/a&gt;. But the code is run on a remote server, how can we debug and profile a remote Node.js application?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#profiling-a-remote-nodejs-application"&gt;
  &lt;/a&gt;
  Profiling a remote Node.js application
&lt;/h2&gt;

&lt;p&gt;I will be largely following &lt;a href="https://nodejs.org/en/docs/guides/debugging-getting-started/"&gt;the official doc on Node.js debugging&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#attaching-nodejs-inspector"&gt;
  &lt;/a&gt;
  Attaching Node.js inspector
&lt;/h3&gt;

&lt;p&gt;First thing we should do is establish a remote SSH connection to our server. We already configured SSH in the Docker container and may use &lt;code&gt;start:ssh&lt;/code&gt; script to connect.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are having issues connecting try troubleshooting recommendations from my recent post on Alpine Docker images SSH I mentioned earlier.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Upon successful connection you should find the &lt;a href="https://en.wikipedia.org/wiki/Process_identifier"&gt;PID&lt;/a&gt; for the Node.js application. Use &lt;code&gt;ps&lt;/code&gt; command for this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn start:ssh
&lt;span class="c"&gt;# &amp;lt;...&amp;gt;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;ps
PID   USER     TIME  COMMAND
    1 root      0:01 node /opt/yarn-v1.22.17/bin/yarn.js start
  127 root      0:00 sshd: /usr/sbin/sshd &lt;span class="o"&gt;[&lt;/span&gt;listener] 0 of 10-100 startups
  154 root      0:18 /usr/local/bin/node dist/server/main.js
  176 root      0:00 sshd: root@pts/1
  178 root      0:00 &lt;span class="nt"&gt;-ash&lt;/span&gt;
  181 root      0:00 ps
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You would see a similar result. What we need is &lt;code&gt;main.js&lt;/code&gt; process - PID 154. Currently there is not inspector attached to it. To open a Node.js process to inspector attachments send a &lt;code&gt;SIGUSR1&lt;/code&gt; signal to it using &lt;code&gt;kill -s SIGUSR1 154&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that Node.js process is ready to be inspected you should open dedicated Dev Tools for Node. Open &lt;a href="https://dev.tochrome://inspect"&gt;&lt;code&gt;chrome://inspect&lt;/code&gt;&lt;/a&gt; in your Chromium based browser. You would see a page like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5920FbDe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvr7wyaim324gxmy9dvg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5920FbDe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvr7wyaim324gxmy9dvg.png" alt="Chrome devices inspection" width="880" height="432"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click "Open dedicated Dev Tools for Node". Here you should add a new remote connection. Remember SSH connection script? &lt;code&gt;-L 9221:localhost:9229&lt;/code&gt; binds internal Docker container port 9229 (the default one used after sending &lt;code&gt;SIGUSR1&lt;/code&gt; signal) to &lt;code&gt;localhost:9221&lt;/code&gt;. Therefore new connection network address would &lt;code&gt;localhost:9221&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HgvciIgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxnxdlcrgigwhpgywzn0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HgvciIgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxnxdlcrgigwhpgywzn0.png" alt="Detached dedicated Dev Tools for Node" width="880" height="651"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have done everything correctly you should see a new remote target on &lt;a href="https://dev.tochrome://inspect"&gt;&lt;code&gt;chrome://inspect&lt;/code&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2XqlgnAv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sl3xj6goglykvlizsffx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2XqlgnAv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sl3xj6goglykvlizsffx.png" alt="New remote target" width="880" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the same time Dev Tools should now show some messages in the console and server file system in "Sources". There you may actually add breakpoints and debug your code remotely. But what we are interested in at the moment is "Profiling" tab.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reading-profiles"&gt;
  &lt;/a&gt;
  Reading profiles
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uY14WVq9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hjl5jmfvvt576l0d4zo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uY14WVq9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hjl5jmfvvt576l0d4zo.png" alt="Profiling tab" width="880" height="651"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click "Start" and refresh &lt;code&gt;localhost:3000&lt;/code&gt; in your browser. After successful refresh and complete page load return to Dev Tools and stop the recording. You should now see "Profile 1" in the list on the left.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2f686ik--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7px5teirgy1ksjrt9nvo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2f686ik--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7px5teirgy1ksjrt9nvo.png" alt="Profling results" width="880" height="416"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the top we would see functions that took the longest to execute. That would be &lt;code&gt;_defineProperty&lt;/code&gt; and &lt;code&gt;_objectSpread&lt;/code&gt; generated by &lt;code&gt;tsc&lt;/code&gt; for new language features to work with ES5. Still we may be using those in a variety of places. Let's sort not by "Self time" (time that took to execute statements in the function itself and not the internal function calls) but by "Total time". And we indeed see a clear winner.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KPpMzoos--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/waphq3wt8jo0lzk7klz8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KPpMzoos--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/waphq3wt8jo0lzk7klz8.png" alt="filterUnserializable takes a long time to finish" width="880" height="330"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;filterUnserializable&lt;/code&gt; takes an unreasonable amount of time to finish. &lt;code&gt;_defineProperty&lt;/code&gt; and &lt;code&gt;_objectSpread&lt;/code&gt; functions already tell us that it is due to inefficient spreads and property assigning. Clearly we should refactor this function to make it faster.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benching-improvements"&gt;
  &lt;/a&gt;
  Benching improvements
&lt;/h3&gt;

&lt;p&gt;In order to be sure that we introduce a quicker solution we should employ a tool like &lt;a href="https://jsbench.me"&gt;jsbench.me&lt;/a&gt;. First we add tested data at "Setup JS" stage. Then add test cases with different function implementations. Check &lt;a href="https://jsbench.me/ogky79y7mi/1"&gt;this bench&lt;/a&gt; with suggested implementation and run it yourself for results.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u0T5c3vW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cq6ob8l0r9wreru558qg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u0T5c3vW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cq6ob8l0r9wreru558qg.png" alt="My bench results" width="880" height="421"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clearly the new function is &lt;em&gt;much&lt;/em&gt; better. With smaller payloads old implementation will show slightly better results but still worse than the new mutable one.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When refactoring such an important function you surely would want to first add unit tests to make sure that it has the same behaviour. At this time we will not do that but make sure you do so when refactoring production applications. The new implementation also fixes a bug with invalid array serialization.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's implement the improvement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ./src/client/ssr/filterUnserializable.ts&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filterUnserializable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;filteredValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filteredValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;filterUnserializable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;filteredValues&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;filterUnserializable&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the application is using a much more effective way of filtering unserializable data and can grow much larger without perfomance hickups. Let's make sure that improvements indeed took place, restart Docker container and record another profile.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When rebooting container and attempting to connect via SSH you will likely see error messages like &lt;code&gt;channel 3: open failed: connect failed: Connection refused&lt;/code&gt;. Node.js Dev Tools make attempts to connect though there is no servers listening on internal Docker container port 9229. Run &lt;code&gt;kill -s SIGUSR1 &amp;lt;APP_PID&amp;gt;&lt;/code&gt; again to allow inspector attachments. Or temporarily close/delete connection in Dev Tools.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WfqsC8FC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cnlmn1m5tmt6izu85hl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WfqsC8FC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cnlmn1m5tmt6izu85hl.png" alt="Improved implementation profile" width="880" height="183"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Times of 100ms are much more reasonable for large objects like this. Obviously you could make more improvements like making sure that objects like &lt;code&gt;translations&lt;/code&gt; are valid before they reach SSR or caching validated objects. You may also assume that there are no nested &lt;code&gt;undefined&lt;/code&gt; properties. For the purpose of this article existing improvements will suffice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lessons-learned"&gt;
  &lt;/a&gt;
  Lessons learned
&lt;/h2&gt;

&lt;p&gt;Now that we profiled and fixed the issue in an emulated environment we can compile a list of things a developer or a team should do to avoid situations when you need to conduct profiling on your application.&lt;/p&gt;




&lt;p&gt;First I will list preemptive solutions and then how you may improve perfomance when issues arise.&lt;/p&gt;

&lt;p&gt;1) Collect real usage data using &lt;a href="https://en.wikipedia.org/wiki/Real_user_monitoring"&gt;Real user monitoring&lt;/a&gt;. Some services like &lt;a href="https://vercel.com"&gt;Vercel&lt;/a&gt; provide RUM out of the box. Collect data like &lt;a href="https://web.dev/lighthouse-performance/#metrics"&gt;FCP, TTI and other metrics&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;2) Setup alerts over spikes in RUM data. This way when a release happens to introduce a significant slowdown you will be alerted immediately. If you are against alerts or have technical difficulties implementing them develop a culture of frequent monitoring for this data. Regularly assess it a few days after a release happens.&lt;/p&gt;

&lt;p&gt;3) Perform regular &lt;a href="https://en.wikipedia.org/wiki/Load_testing"&gt;load testing&lt;/a&gt;. It will also succeed in showing drops in responsiveness of a service under load.&lt;/p&gt;

&lt;p&gt;4) Do not overuse immutability. While it does help you write predictable code it also hurts perfomance when overused. When in doubt create a quick bench on &lt;a href="https://jsbench.me"&gt;jsbench&lt;/a&gt; to make sure you make the right decision.&lt;/p&gt;

&lt;p&gt;5) Parallelize requests and stream data where possible. If a page requires multiple pieces of information attempt requesting them simultaneously in parallel. &lt;/p&gt;

&lt;p&gt;6) Prevalidate data and use as little of it as possible. Do not pull unnecessary entities. Split data required for individual pages. Use cache where applicable.&lt;/p&gt;

&lt;p&gt;7) For critical parts that are inaccessible by RUM setup manual monitoring by tracking time to execute with tools like &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/console/time"&gt;&lt;code&gt;console.time()&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://nodejs.org/api/process.html#processhrtimebigint"&gt;&lt;code&gt;process.hrtime&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;And when challenged with improving perfomance do:&lt;/p&gt;

&lt;p&gt;1) Before making any improvements create a baseline for perfomance. This may be some metric or a combination of those. It should work toward improving actual user experience.&lt;/p&gt;

&lt;p&gt;2) Do not rely on assumptions. Conduct perfomance tests and record profiles. Use real data on an environment as close to the production one as possible. Use this data to choose next steps.&lt;/p&gt;

&lt;p&gt;3) When introducing an improvement make sure that it behaves the same way using unit tests. And make sure it does what you want it to do - perform better. Once again employ &lt;a href="https://jsbench.me"&gt;jsbench&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;I hope you found this article helpful in learning remote Node.js profiling and general perfomance care. Perhaps you have some rules of your own you follow to make sure your app stays perfomant? Or a story of a big perfomance hickup? Feel free to discuss in the comments.&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>devtools</category>
    </item>
  </channel>
</rss>
