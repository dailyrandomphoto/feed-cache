<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>10 Common HTML Mistakes you should avoid</title>
      <author>Harry</author>
      <pubDate>Thu, 30 Sep 2021 01:34:16 +0000</pubDate>
      <link>https://dev.to/uu7j/10-common-html-mistakes-you-should-avoid-1bf7</link>
      <guid>https://dev.to/uu7j/10-common-html-mistakes-you-should-avoid-1bf7</guid>
      <description>&lt;p id="f9e9"&gt;HTML is the queen of web development. It‚Äôs the markup language that every web developer must know. It allows you to easily create elements for web pages by using tags and attributes in your code.&lt;/p&gt;
&lt;p id="4d42"&gt;HTML has a lot of cool features that you can benefit from as a web developer. However, writing semantic and quality HTML code is not that easy. There are some mistakes that a lot of developers do without noticing that.&lt;/p&gt;
&lt;p id="caf7"&gt;That‚Äôs why in this article, we will cover some common HTML mistakes that every developer should avoid. So let‚Äôs get right into it.¬†&lt;/p&gt;
&lt;p id="caf7"&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/&amp;amp;ved=2ahUKEwiJ-uH95KTzAhWA7XMBHVeKBdwQFnoECAgQAg&amp;amp;usg=AOvVaw1PUPii-XosNgl1ZTInOseb"&gt;5 Common HTML Mistakes you should avoid&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Make your own API under 30 lines of code</title>
      <author>Harry</author>
      <pubDate>Thu, 30 Sep 2021 01:32:39 +0000</pubDate>
      <link>https://dev.to/uu7j/make-your-own-api-under-30-lines-of-code-dml</link>
      <guid>https://dev.to/uu7j/make-your-own-api-under-30-lines-of-code-dml</guid>
      <description>&lt;h1&gt;Make your own API under 30 lines of code&lt;/h1&gt;
&lt;p&gt;Hey readers üëãüèª, in this blog we are going to discuss about making our own API in just 30 lines of code.&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/shreyazz/make-your-own-api-under-30-lines-of-code-4doh#topics-covered-"&gt;&lt;/a&gt;Topics Covered :&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;What is an API.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tech used to make one.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to code it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to deploy it (FOR FREE).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;&lt;p&gt;Those who all know what APIs are and don't want to know anything else then 'How to code it', you can skip to that part directly.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/shreyazz/make-your-own-api-under-30-lines-of-code-4doh#what-is-an-api-"&gt;&lt;/a&gt;What is an API :&lt;/h3&gt;
&lt;p&gt;API stands for¬†&lt;span&gt;Application Programming Interface&lt;/span&gt;, which is a way for computer to talk to each other. APIs are just like website, except the UI part, it sends a¬†&lt;span&gt;request&lt;/span&gt;¬†to a server and in return the server send a¬†&lt;span&gt;response&lt;/span&gt;¬†.&lt;/p&gt;
&lt;p&gt;Most APIs which we use are¬†&lt;span&gt;RESTFUL APIs&lt;/span&gt;, which means they follow a set of protocols/rules .&lt;/p&gt;
&lt;p&gt;You all already know what URLs are, but APIs use¬†&lt;span&gt;URIs&lt;/span&gt;¬†which stands for¬†&lt;span&gt;Uniform Resource Identifiers&lt;/span&gt;¬†and they help to differentiate between data on a server.¬†&lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/&amp;amp;ved=2ahUKEwjxi6XKxqXzAhW1yTgGHS6yASoQFnoECAgQAg&amp;amp;usg=AOvVaw1PUPii-XosNgl1ZTInOseb"&gt;Make your own API under 30 lines of code¬†&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;




</description>
    </item>
    <item>
      <title>Hiring is broken! Let's fix it with empathy.</title>
      <author>David Whitney</author>
      <pubDate>Thu, 30 Sep 2021 01:28:25 +0000</pubDate>
      <link>https://dev.to/david_whitney/hiring-is-broken-let-s-fix-it-with-empathy-2om9</link>
      <guid>https://dev.to/david_whitney/hiring-is-broken-let-s-fix-it-with-empathy-2om9</guid>
      <description>&lt;p&gt;Hiring technical people is difficult, and doubly so if you want to get people who are a good fit for you and the teams you're working with, yet repeatedly &lt;strong&gt;we seem to get it awfully wrong as an industry&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The tropes are real&lt;/strong&gt; ‚Äì and we're now in our second iteration of "hiring terribly". Where the 80s and early 90s were characterised by mystery puzzle hiring ("how would you work out how many cars you can fit into three cruise ships?"), the 2010s are defined by the tired trope of the interview that is orders of magnitude more difficult to pass and bares increasingly less resemblance to the job you do once you get the role.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Over fifteen years of hiring people for coding jobs, a few things still seem to hold:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The ability to talk fluently about what you like and don't like about code for an hour or so is the most reliable indicator of a good fit.&lt;/li&gt;
&lt;li&gt;It's a bad idea to hire someone if you have never seen code they have written.&lt;/li&gt;
&lt;li&gt;Interview processes are stressful, unnatural, and frequently don't get the best from people.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We're faced with the quandary ‚Äì how do we find people from a pool of unknowns, who will quickly be able to contribute, work in relative harmony, and enjoy being a part of your team.&lt;/p&gt;

&lt;p&gt;The kind of people who will fit best in your organisations is inevitably variable ‚Äì as it's driven by the qualities you desire in your team's ‚Äì but personally, I value kind people who are clear communicators who are a pleasure to work with. Those are not everyone's values, but I want to speak to how I've tried to cultivate those kinds of teams.&lt;/p&gt;

&lt;p&gt;You're going to need to know how to write an excellent job spec, construct a good interview process, evaluate technical performance, and give meaningful feedback. Let's cover each of those topics in turn.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-construct-a-kind-interview-process"&gt;
  &lt;/a&gt;
  How to construct a kind interview process
&lt;/h2&gt;

&lt;p&gt;A good interview process respects everyone's time.&lt;/p&gt;

&lt;p&gt;Set amongst the hellscape of FAANG multi-stage interview processes with one hundred asinine divisional directors, &lt;strong&gt;it's simple to put together an interview process that isn't hell on earth&lt;/strong&gt; for everyone involved.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write a job spec that captures your cultural values.&lt;/li&gt;
&lt;li&gt;Have an hour-long conversation with them about themselves, their experiences, and their opinions.&lt;/li&gt;
&lt;li&gt;See some code they've written.&lt;/li&gt;
&lt;li&gt;Have the team they would join, or someone else representative, talk to them about code.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There's no reason for this process to take any longer than three hours end-to-end, and ideally shouldn't be a chore for anybody involved.&lt;/p&gt;

&lt;p&gt;The first bit is all on you, the interviewer. It's important that a job spec contains &lt;strong&gt;concrete information&lt;/strong&gt; on the work that the role involves, that the only skills listened as mandatory are &lt;strong&gt;skills used in the actual role&lt;/strong&gt;, and that you are clear about constraints and salary conditions.&lt;/p&gt;

&lt;p&gt;The conversation is what most people are used to as an interview. Be kind. Understand people are humans and might be nervous, make sure they know that the best outcome is that you both "win" ‚Äì &lt;strong&gt;don't be there to get a rise out of someone&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-be-a-good-interviewer"&gt;
  &lt;/a&gt;
  How to be a good interviewer
&lt;/h2&gt;

&lt;p&gt;The first and most important thing about being a good interviewer is that you're not there to trip people up or catch people out. If that's what you feel an interview should be, I implore you to pass on interviewing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interviews are not meant to be hostile environments, and as a candidate, if you encounter one, do not under any circumstances take the job&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You're in an interview to &lt;strong&gt;verify someone's experience, understand their communication style, and discuss the expectations&lt;/strong&gt; of the role you're hiring for.&lt;/p&gt;

&lt;p&gt;You're there to &lt;strong&gt;sell the position&lt;/strong&gt;, hopefully stimulating enthusiasm in the candidate, and to &lt;strong&gt;set expectations of what the job is like&lt;/strong&gt;, day-to-day, so that neither you nor the candidate is surprised if you both choose to work together.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You need to be honest&lt;/strong&gt; ‚Äì both about the problem space, and the work. You need to be clear about where you need to grow as a team or organisation. There is nothing worse, as a candidate, than being sold a lie. &lt;strong&gt;Much rather articulate your challenges up front lest you ruin your own reputation.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You need to &lt;strong&gt;ask clear and relevant questions&lt;/strong&gt; ‚Äì learn from the mistakes of a thousand poor "balance a binary tree" style interview questions and leave that stuff at home.&lt;/p&gt;

&lt;p&gt;Ask candidates questions about their &lt;strong&gt;relevant experience&lt;/strong&gt;. Ask them how they would solve problems that you have already solved in the course of your work, or how they would approach them. &lt;strong&gt;Don't ask meaningless brain teasers.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You need to &lt;strong&gt;give them space&lt;/strong&gt; to talk about broad topics ‚Äì I love asking candidates what they think makes good code. I love to ask the question because everyone will say "readable" or "maintainable" and then we get to have a conversation on what they think satisfies those qualities in a codebase.&lt;/p&gt;

&lt;p&gt;As an interviewer, I don't care that you learnt to say, "it follows the solid principles", I'd &lt;strong&gt;much rather a candidate has the floor to talk&lt;/strong&gt; about how code makes them feel and why. Nice big broad questions are good at opening the floor to a discussion once you've talked about experience.&lt;/p&gt;

&lt;p&gt;Take notes. &lt;strong&gt;Don't interrupt the candidate&lt;/strong&gt;.&lt;br&gt;
 Give them time to speak, and &lt;strong&gt;actively listen&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#seeing-some-code"&gt;
  &lt;/a&gt;
  Seeing some code
&lt;/h2&gt;

&lt;p&gt;You're going to want to see some code for technical roles ‚Äì this is an absolute minefield, but the thing that I've settled on after trying all sorts of techniques here is to &lt;strong&gt;offer the candidates choice&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;My standard process here is to offer candidates any of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bring me some code you have written that you're comfortable talking about&lt;/li&gt;
&lt;li&gt;Do a well-known kata, in your own time, and send it across&lt;/li&gt;
&lt;li&gt;Set up a one-hour session and I will pair program the kata with you&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I ask the candidates to &lt;strong&gt;"please pick whichever is less stressful for you".&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;People perform differently under different types of assessment, and qualitatively, I get the same outcome from a candidate regardless of the path they pick. I like to hope that this opens the door for more neurodiversity in applicants and protects me from only hiring people that share my exact mental model. &lt;strong&gt;Choice is good, it doesn't hurt to be kind, it costs nothing&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Each approach has subtle pros and cons ‚Äì their own arbitrary code might not quite give me the same high-quality signal, but it's a great way for people who are &lt;strong&gt;unquestionably competent to avoid wasting their own time&lt;/strong&gt;. The take-home kata is a nice happy medium, though could potentially accidentally have a candidate thrashing around trying to complete something that doesn't need to be complete. The pairing session requires a little bit more of the interviewer's time and is probably the &lt;strong&gt;more high-stress option&lt;/strong&gt; as people sometimes don't perform well when they feel like they're being actively evaluated, but you know &lt;strong&gt;precisely&lt;/strong&gt; how someone works in those conditions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technical tests are intimidating&lt;/strong&gt; to all but the most confident of candidates, this choice lets them wrestle a little bit of confidence and control back to at least feel like they're not being ambushed by something with which they cannot reckon.&lt;/p&gt;

&lt;p&gt;It's the right thing to do.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-set-a-good-technical-test"&gt;
  &lt;/a&gt;
  How to set a good technical test
&lt;/h2&gt;

&lt;p&gt;I've been involved in setting a lot of technical tests over the years ‚Äì and I'm extremely sensitive to the ire that tech tests often cause in people. I've seen so many borderline abusive practices masquerading as technical tests that I'm not even remotely surprised.&lt;/p&gt;

&lt;p&gt;The commandments of good tech tests:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A test should take &lt;strong&gt;no longer than one hour&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It should be &lt;strong&gt;completable by a junior to the most senior, senior&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It should &lt;strong&gt;not be in your problem domain&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It should &lt;strong&gt;not be unpaid work&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;answer should be provided&lt;/strong&gt; in the question&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a couple of potentially controversial points here.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;tech tests should respect a candidate's time&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You are not the only place they are applying, and the candidate does not owe you their time. Anything more than thirty minutes to half an hour can act as implicit discrimination against people that don't have unlimited time, or have families, or other social constraints.&lt;/p&gt;

&lt;p&gt;Using the same test for your most junior developers to your most senior allows you to &lt;strong&gt;understand the comparative skill of candidates&lt;/strong&gt; who are applying, on a level playing field. You might not expect the same level of assessment or scrutiny between submissions, but that baseline is a powerful way of &lt;strong&gt;removing the vast discrepancies between titles and pay&lt;/strong&gt; and focusing on a candidate's capability.&lt;/p&gt;

&lt;p&gt;The test should be synthetic, and not part of your domain. For years I believed the opposite of this and was a fan of making tests look like "real work", but this often fails because it &lt;strong&gt;expects that the candidate often must understand a whole set of new concepts&lt;/strong&gt; that doesn't help you assess their capability for the job.&lt;/p&gt;

&lt;p&gt;And finally, providing the answer in the question deliberately reinforces that &lt;strong&gt;it's not a "puzzle", but an interview aid.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If a tech test contains the answer, and isn't domain specific, then what is it really for?&lt;/p&gt;

&lt;p&gt;A tech test exists to verify, at the most basic level, that a &lt;strong&gt;candidate can code at all&lt;/strong&gt;. The extremely non-zero number of people I have interviewed that couldn't so much as add new classes to an application is real, and it's why &lt;a href="https://en.wikipedia.org/wiki/Fizz_buzz"&gt;FizzBuzz&lt;/a&gt; is a good traditional screening question ‚Äì it does little more than "test" if you can write an if-statement.&lt;/p&gt;

&lt;p&gt;Once you've established a candidate can code, &lt;strong&gt;you're looking to see how they approach problem solving&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Do they write &lt;strong&gt;tests&lt;/strong&gt;?&lt;br&gt;
 Do they write code that is &lt;strong&gt;stylistically alike to your team's preferences&lt;/strong&gt;?&lt;br&gt;
 Can they &lt;strong&gt;clearly articulate why they made the choices&lt;/strong&gt; they made, however small?&lt;/p&gt;

&lt;p&gt;A technical test isn't there to see if a candidate can complete a problem under exam conditions, it's just an &lt;strong&gt;indicator&lt;/strong&gt; as to the way they approach a problem.&lt;/p&gt;

&lt;p&gt;A good technical test is the &lt;strong&gt;quickest shortcut to providing you these signals&lt;/strong&gt;. I've come to value well known code katas as recruitment tests as they tend to fulfil most of these criteria trivially, without having to be something of my own invention.&lt;/p&gt;

&lt;p&gt;I tend to use the Diamond Kata ‚Äì&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Given a character from the alphabet, print a diamond of its output with that character being the midpoint of the diamond. Write appropriate tests.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ru0-HU0a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cig6m4mej8f7pwxzrdpv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ru0-HU0a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cig6m4mej8f7pwxzrdpv.png" alt="Example of the Diamond Kata - find it on github davidwhitney Code Katas"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#giving-feedback"&gt;
  &lt;/a&gt;
  Giving feedback
&lt;/h2&gt;

&lt;p&gt;If a candidate has given you an hour of their time, it's responsible to give them meaningful feedback as notes. It doesn't have to be much, and you don't need to review them ‚Äì just a few hints as to what they could have done in future to be more successful ("we didn't feel like you had enough experience in Some Framework" or "We didn't feel confident that the tests you were writing") is absolutely fine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be kind.&lt;/strong&gt; Hope they take the feedback away and think about it.&lt;/p&gt;

&lt;p&gt;There are hundreds of examples of "failed interview candidate later the hiring manager" out there ‚Äì being nice to people even if they don't get the job is a good precedent for when you inevitably meet them in the future.&lt;/p&gt;

&lt;p&gt;An unfortunate majority of job roles won't contact unsuccessful candidates at all ‚Äì and there is a balance to be struck. You're certainly not obligated to everyone that applies to a CV screen funnel, but &lt;strong&gt;anyone you talk to deserves the courtesy of feedback for their time spent&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adapt-to-fit"&gt;
  &lt;/a&gt;
  Adapt to fit
&lt;/h2&gt;

&lt;p&gt;The best interview processes accurately reflect your own personal values and set the stage for the experience your new team members are going to have when they join your organisation. Because of this, it's an absolute truth that no one way will work for everyone ‚Äì it's impossible.&lt;/p&gt;

&lt;p&gt;I hope that the pointers in here will &lt;strong&gt;stimulate a little bit of thought&lt;/strong&gt; as to how you can re-tool your own interview process to &lt;strong&gt;be simpler, kinder, and much quicker&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Below is an appendix about marking technical recruitment tests that may be useful in this process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#appendix-how-to-mark-a-technical-test"&gt;
  &lt;/a&gt;
  Appendix: How to mark a technical test
&lt;/h2&gt;

&lt;p&gt;Because I tend to use the same technical tests for people across the entire skill spectrum, I've come to use a &lt;strong&gt;standard marking sheet to understand where a particular candidate fits&lt;/strong&gt; in the process. I &lt;strong&gt;expect less from candidates earlier on in their careers&lt;/strong&gt; than more experienced individuals ‚Äì this grading sheet isn't the be all and end all, but as you scale out your process and end up with different people reviewing technical tests and seeing candidates, it's &lt;strong&gt;important that people are assessing work they see through the same lens.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Feel free to use this if it is helpful for you understanding what good looks like.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem domain and understanding of question&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Submitter suggested irrelevant implementation / entirely misunderstood domain&lt;/li&gt;
&lt;li&gt;Submitter modelled single concept correctly&lt;/li&gt;
&lt;li&gt;Submitter modelled a few concepts in domain&lt;/li&gt;
&lt;li&gt;Submitter modelled most concepts in domain&lt;/li&gt;
&lt;li&gt;Submitter modelled all concepts in domain&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Accuracy of solution&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Code does not compile&lt;/li&gt;
&lt;li&gt;Code does not function as intended, no features work&lt;/li&gt;
&lt;li&gt;Code builds and functions, but only some of the acceptance criteria are met&lt;/li&gt;
&lt;li&gt;~90% of the acceptance criteria are met. Bugs outside of the scope of the acceptance criteria allowed&lt;/li&gt;
&lt;li&gt;All acceptance criteria met. Any "hidden" bugs found and solved.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Simplicity of solution&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Is hopeless spaghetti code, illegible, confusing, baffling&lt;/li&gt;
&lt;li&gt;An overdesigned mess, or nasty hacky code - use of large frameworks for simple problems, misusing DI containers, exceptions as flow control, needless repetition, copy-¬≠pasting of methods, lack of encapsulation, overuse of design patterns to show off, excess of repetitive comments, long methods&lt;/li&gt;
&lt;li&gt;Code is concise, size of solution fits the size of the problem, no surprises. Maybe a few needless comments, the odd design smell, but nothing serious&lt;/li&gt;
&lt;li&gt;Code is elegant, minimalist, and concise without being code-golf, no side effects, a good read. Methods and functions are descriptive and singular in purpose&lt;/li&gt;
&lt;li&gt;Perfect, simple solution. Absolutely no needless comments, descriptive method names. Trivial to read, easy to understand&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Presentation of solution&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ugly code, regions, huge comment blocks, inconsistent approach to naming or brace style, weird amounts of whitespace&lt;/li&gt;
&lt;li&gt;Average looking code. No regions, fewer odd comment blocks, no bizarre whitespace&lt;/li&gt;
&lt;li&gt;Nice respectable code. Good code organisation, no odd comment blocks or lines (no stuff like //======= etc), internally consistent approach to naming and brace style&lt;/li&gt;
&lt;li&gt;Utterly consistent, no nasty comment blocks, entirely consistent naming and brace style, effective use of syntactic sugar (modern language features in the given language etc)&lt;/li&gt;
&lt;li&gt;Beautiful code. Great naming, internally consistent style. Follows conventions of language of test. Skillful use of whitespace / stanzas in code to logically group lines of code and operations. Code flows well and is optimised for the reader.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Quality of unit tests&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;No test coverage, tests that are broken, illegible, junk&lt;/li&gt;
&lt;li&gt;Tests that don't test the class that's supposed to be under test, some tests test some functionality. Vaguely descriptive naming. AAA pattern in unit tests.&lt;/li&gt;
&lt;li&gt;Descriptive, accurate names. AAA in unit tests. Use of test setup to DRY out tests if appropriate. Reasonable coverage.&lt;/li&gt;
&lt;li&gt;Complete test coverage to address all acceptance criteria, setup if appropriate, good descriptive names. BDD style tests with contexts are appreciated.&lt;/li&gt;
&lt;li&gt;Full coverage, all acceptance criteria covered, great naming that represents the user stories accurately, little to no repetition, no bloated repetitive tests, effective use of data driven tests if appropriate, or other framework features.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>culture</category>
      <category>webdev</category>
      <category>leadership</category>
      <category>career</category>
    </item>
    <item>
      <title>Create a themed favicon for color modes</title>
      <author>Eddy Sims</author>
      <pubDate>Wed, 29 Sep 2021 23:21:23 +0000</pubDate>
      <link>https://dev.to/eddysims/create-a-themed-favicon-for-color-modes-2ok1</link>
      <guid>https://dev.to/eddysims/create-a-themed-favicon-for-color-modes-2ok1</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;There are 2 types of people in this world. Those who use dark mode and the other people.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I'm not sure about you, but I am basically a 100% user of dark mode on everything I do. There is nothing worse then sitting down at my desk to do some work or reading, opening a website and being hit with a solar flare from the bright white screen in front of me. However, this has caused me some issues when it comes to &lt;code&gt;favicons&lt;/code&gt; on the web. A favicon is the small icon that you see in your browser tab that allows you to navigate the madness of your many tabs. If your like me and prefer to save your eyes from the blinding brightness of light mode, you may have noticed that some of these &lt;code&gt;favicons&lt;/code&gt; are kind of hard to see.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vI_iV3Qa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r0xzjta8n1l0ymazek95.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vI_iV3Qa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r0xzjta8n1l0ymazek95.png" alt="The current favicon on my personal website"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this post we will go over how to toggle your favicon based on whether the user has their settings on &lt;code&gt;dark mode&lt;/code&gt; or &lt;code&gt;light mode&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In this example I will be using a &lt;a href="https://nextjs.org/"&gt;NextJS&lt;/a&gt; website, however this will work in any React application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-start"&gt;
  &lt;/a&gt;
  Lets start
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#create-our-project"&gt;
  &lt;/a&gt;
  Create our project
&lt;/h3&gt;

&lt;p&gt;First thing we will do is create a new project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-next-app themeable-favicons
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-a-custom-hook"&gt;
  &lt;/a&gt;
  Create a custom hook
&lt;/h3&gt;

&lt;p&gt;Next, we are going to create a &lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;custom hook&lt;/a&gt; called &lt;code&gt;useSystemTheme&lt;/code&gt;. For our custom hook we are going to simply wrap an already created npm package. So lets install the package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;react-use-system-theme
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's create a new file called &lt;code&gt;useSystemTheme.js&lt;/code&gt; under a &lt;code&gt;hooks&lt;/code&gt; directory. Our directory structure should look something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚îÇ   ‚îî‚îÄ‚îÄ components
‚îÇ   ‚îî‚îÄ‚îÄ hooks
|       ‚îú‚îÄ‚îÄ useSystemTheme.js
‚îÇ   ‚îî‚îÄ‚îÄ pages
|       ‚îú‚îÄ‚îÄ index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside our &lt;code&gt;useSystemTheme.js&lt;/code&gt; file, we are going to import the &lt;code&gt;useTheme&lt;/code&gt; function from our &lt;code&gt;react-use-system-theme&lt;/code&gt; and return the value from it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// useSystemTheme.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useTheme&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-use-system-theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useSystemTheme&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTheme&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is called "wrapping". The reason that we want to take this approach rather than just using the &lt;code&gt;useTheme&lt;/code&gt; function directly is that if in the future, we decide to re-write this hook or use a different package, we will only need to make the change in one place.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-our-favicons"&gt;
  &lt;/a&gt;
  Create our favicons
&lt;/h3&gt;

&lt;p&gt;Next we want to create our favicons. I like to use &lt;a href="https://realfavicongenerator.net/"&gt;RealFaviconGenerator.net&lt;/a&gt; as I think that it gives you the most robust options for your favicons.&lt;/p&gt;

&lt;p&gt;Once you have created your two favicon packages (one for your dark mode and one for your light mode), you will want to rename the files in them from &lt;code&gt;favicon.ico&lt;/code&gt; -&amp;gt; &lt;code&gt;favicon-dark.ico&lt;/code&gt; etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚îÇ   ‚îî‚îÄ‚îÄ public
|       ‚îú‚îÄ‚îÄ favicon-dark-16x16.png
|       ‚îú‚îÄ‚îÄ favicon-dark-32x32.png
|       ‚îú‚îÄ‚îÄ favicon-dark.ico
|       ‚îú‚îÄ‚îÄ favicon-light-16x16.png
|       ‚îú‚îÄ‚îÄ favicon-light-32x32.png
|       ‚îú‚îÄ‚îÄ favicon-light.ico
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#use-our-hook-to-toggle-favicons"&gt;
  &lt;/a&gt;
  Use our hook to toggle favicons
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This step will be very specific to how NextJS works. However, you can do the same thing in any project that has a &lt;code&gt;favicon&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By default, NextJS adds a favicon to our &lt;code&gt;pages/index.js&lt;/code&gt; file. We will want to go in and remove this, as we are going to move the favicon to our &lt;code&gt;pages/_app.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Next, in our &lt;code&gt;pages/_app.js&lt;/code&gt; file we will want to include our &lt;code&gt;favicon&lt;/code&gt;. To do this, we are going to import the &lt;code&gt;Head&lt;/code&gt; component from &lt;code&gt;next/head&lt;/code&gt;. This will allow us to add to our &lt;code&gt;html&lt;/code&gt; &lt;code&gt;head&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;Inside of our &lt;code&gt;Head&lt;/code&gt; component, we will want to add our &lt;code&gt;favicon&lt;/code&gt; that we removed from our &lt;code&gt;pages/index.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../styles/globals.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`/favicon-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.ico`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we want to import and use our hook to toggle between the two &lt;code&gt;favicons&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useSystemTheme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../hooks/useSystemTheme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../styles/globals.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSystemTheme&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`/favicon-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.ico`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see in the code above that I am including the &lt;code&gt;favicon&lt;/code&gt; with &lt;code&gt;favicon-${theme}.ico&lt;/code&gt;. This will use the dark favicon that we created earlier on.&lt;/p&gt;

&lt;p&gt;Now, when we switch our system theme from light mode, to the more appropriate dark mode, we will be able to toggle our favicon with it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-extra-notes"&gt;
  &lt;/a&gt;
  Some extra notes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;While this technique works for system preferences, it can also be used with different color themes if you use something like &lt;a href="https://theme-ui.com/"&gt;Theme UI&lt;/a&gt; or &lt;a href="https://chakra-ui.com/"&gt;Chakra UI&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You can find an example repo of this working &lt;a href="https://github.com/eddysims/color-themed-favicons"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;You can find a working demo &lt;a href="https://themed-favicons.netlify.app/"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;You can find this content in video form &lt;a href="https://www.youtube.com/watch?v=kDl2dU4D8kg&amp;amp;t=18s"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>reacthooks</category>
      <category>npm</category>
    </item>
    <item>
      <title>Copy text to the system clipboard on click with JavaScript</title>
      <author>Michael Burrows</author>
      <pubDate>Wed, 29 Sep 2021 23:19:09 +0000</pubDate>
      <link>https://dev.to/michaelburrows/copy-text-to-the-system-clipboard-on-click-with-javascript-1c0k</link>
      <guid>https://dev.to/michaelburrows/copy-text-to-the-system-clipboard-on-click-with-javascript-1c0k</guid>
      <description>&lt;p&gt;In this short tutorial I‚Äôll be showing you how to add copy to clipboard functionality when a button is clicked using JavaScript. This comes in handy within web apps when you need to copy a large string of text or when using touch screen devices.&lt;/p&gt;

&lt;p&gt;Let get started by setting up some HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
  &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
  &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"key-txt"&lt;/span&gt;
  &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"1seWYeywqmTnqv7a5FC6LkD2vsdEx6jXOwqkmhLN"&lt;/span&gt;
  &lt;span class="na"&gt;size=&lt;/span&gt;&lt;span class="s"&gt;"45"&lt;/span&gt;
  &lt;span class="na"&gt;readonly&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"key-btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;COPY&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now begin the JavaScript functionality starting with declaring variables for the text and button element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;keyTxt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;key-txt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;keyBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;key-btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we‚Äôll add a click event listener to the button:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;keyBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clipboard&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Copy functionality not supported&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clipboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keyTxt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ERROR&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First we‚Äôre checking if the browser supports the &lt;code&gt;navigator.clipboard&lt;/code&gt; which is part of the Clipboard API that provides the ability to respond to clipboard commands (cut, copy, and paste) as well as to asynchronously read from and write to the clipboard. If the browser does support &lt;code&gt;navigator.clipboard&lt;/code&gt; the text is written to the clipboard.&lt;/p&gt;

&lt;p&gt;That‚Äôs all for this tutorial, it should be noted that similar functionality could also be written using &lt;code&gt;document.execCommand()&lt;/code&gt; however that method is no longer recommended as browsers drop support for it.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Ruby Analytic System</title>
      <author>Prosper Yong</author>
      <pubDate>Wed, 29 Sep 2021 21:01:17 +0000</pubDate>
      <link>https://dev.to/yongdev/ruby-analytic-system-2i15</link>
      <guid>https://dev.to/yongdev/ruby-analytic-system-2i15</guid>
      <description>&lt;p&gt;Am a new ruby dev on block is it possible to create a blog analytic system in pure ruby&lt;/p&gt;

</description>
      <category>ruby</category>
    </item>
    <item>
      <title>Have you used Stripe to collect payments?</title>
      <author>Madza</author>
      <pubDate>Wed, 29 Sep 2021 20:41:35 +0000</pubDate>
      <link>https://dev.to/madza/do-you-use-stripe-to-collect-payments-5e3f</link>
      <guid>https://dev.to/madza/do-you-use-stripe-to-collect-payments-5e3f</guid>
      <description>&lt;p&gt;With &lt;a href="https://stripe.com/"&gt;Stripe&lt;/a&gt; businesses of all sizes - from startups to large enterprises can accept payments, send payouts, and manage their businesses online.&lt;/p&gt;

&lt;p&gt;It's easy to set-up and maintain. Thanks to their API, developers can integrate custom payment solutions in their apps. &lt;/p&gt;

&lt;p&gt;Have you ever used it for any of your projects? &lt;br&gt;
What's your experience and would you recommend it to others?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>business</category>
      <category>stripe</category>
      <category>finanses</category>
    </item>
    <item>
      <title>SvelteKit Path Based Navigation</title>
      <author>Ryan Cooke</author>
      <pubDate>Wed, 29 Sep 2021 20:30:22 +0000</pubDate>
      <link>https://dev.to/debussyman/sveltekit-path-based-navigation-1la4</link>
      <guid>https://dev.to/debussyman/sveltekit-path-based-navigation-1la4</guid>
      <description>&lt;p&gt;In this post, I‚Äôll describe how to build rich, dynamic path-based navigation using SvelteKit. It builds on SvelteKit‚Äôs routing capabilities, as well as leveraging the Svelte stores it provides to represent path and navigation state. It isn‚Äôt a trivial example, I want to show how a real-world application might work with all the code (some HTML redacted). Authentication and fetching data is left out, as topics for other posts.&lt;/p&gt;

&lt;p&gt;Working code for this example is available at &lt;a href="https://github.com/extragood-io/svelte-kit-navigation"&gt;svelte-kit-navigation&lt;/a&gt;, which can be cloned and run locally.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h3&gt;

&lt;p&gt;We are running &lt;code&gt;svelte ^3.40&lt;/code&gt;, &lt;code&gt;@sveltejs/kit ^1.0&lt;/code&gt;, and a few extra libraries - &lt;code&gt;@sveltejs/adapter-static&lt;/code&gt;, &lt;code&gt;tailwindcss&lt;/code&gt;, &lt;code&gt;postcss&lt;/code&gt; and others. You can see the full package list at &lt;a href="https://github.com/extragood-io/svelte-kit-navigation/blob/main/package.json"&gt;this link&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;The main moving parts for this approach leverage features of SvelteKit -- the provided &lt;a href="https://kit.svelte.dev/docs#loading"&gt;load function&lt;/a&gt;, &lt;a href="https://kit.svelte.dev/docs#modules-%24app-navigation"&gt;goto function&lt;/a&gt;, and &lt;a href="https://kit.svelte.dev/docs#modules-%24app-stores"&gt;$page and $navigating stores&lt;/a&gt;. It also uses SvelteKit‚Äôs support for &lt;a href="https://kit.svelte.dev/docs#routing-advanced-rest-parameters"&gt;dynamic paths&lt;/a&gt;, to encapsulate the state necessary to display the page‚Äôs intended contents. These features provide reactivity to changes in navigation and the component variables of the path, including query variables. SvelteKit also intercepts all clicks on links, allowing us to use standard HTML for navigation.&lt;/p&gt;

&lt;p&gt;A big advantage of this approach is that it supports deep linking into your application, with rendering of each page consistent, even temporary states with modals or notifications. It also simplifies complex navigation in a SPA, without any special handling for the back button or copied links, since the page URLs are driving the details of data loading and rendering.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#detailed-overview"&gt;
  &lt;/a&gt;
  Detailed Overview
&lt;/h3&gt;

&lt;p&gt;This example has an index page at the root path, and a page of ‚Äútransactions‚Äù. Paths take a pattern of &lt;code&gt;/resource/resource_id?queryParam=queryValue&lt;/code&gt;, and can be extended to include subpages. So a page displaying a list of transactions would match &lt;code&gt;/transactions&lt;/code&gt; while displaying the details of a single transaction could match &lt;code&gt;/transactions/000-111-000&lt;/code&gt; where ‚Äú000-111-000‚Äù is the transaction id. SvelteKit calls these ‚Äúdynamic paths‚Äù and will extract the dynamic parts of the path as variables.&lt;/p&gt;

&lt;p&gt;The site uses a standard SvelteKit &lt;code&gt;src/routes/__layout.svelte&lt;/code&gt; for each page, which serves as the parent component of subsequent pages. This is a good place to initialize ‚Äúglobal‚Äù stores with state that child components might need. There are a few states that we manage at the top level, a ‚Äúloading‚Äù state while the app goes through an initial setup (such as initial user state), and authentication state to conditionally render a login prompt.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dynamic-routes"&gt;
  &lt;/a&gt;
  Dynamic routes
&lt;/h3&gt;

&lt;p&gt;From &lt;a href="https://kit.svelte.dev/docs#routing"&gt;SvelteKit's documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;At the heart of SvelteKit is a filesystem-based router. This means that the structure of your application is defined by the structure of your codebase ‚Äî specifically, the contents of src/routes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This includes ‚Äúdynamic‚Äù pages that get encoded using &lt;code&gt;[brackets]&lt;/code&gt; in the &lt;code&gt;.svelte&lt;/code&gt; file name. For example, the file &lt;code&gt;src/routes/transactions/[...id].svelte&lt;/code&gt; will match paths &lt;code&gt;myapp.com/transactions&lt;/code&gt; as well as &lt;code&gt;myapp.com/transactions/00-11-00&lt;/code&gt;, with the latter containing an id parameter that gets parsed and passed as a prop.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#load-function"&gt;
  &lt;/a&gt;
  Load function
&lt;/h3&gt;

&lt;p&gt;This function, provided by SvelteKit, runs before each page ‚Äúload‚Äù, and parses the id from the path if available, passed into the component as a prop. It‚Äôs important to note that the load function must be declared in a module script, and the variable for the prop must be exported.&lt;/p&gt;

&lt;p&gt;In our testing, child components cannot declare additional load functions, but we‚Äôll detail an approach that works for those below.&lt;/p&gt;

&lt;p&gt;The load function will run each time navigation occurs, including links and the back button. You can see a full example at &lt;a href="https://github.com/extragood-io/svelte-kit-navigation/blob/main/src/routes/transactions/%5B...id%5D.svelte"&gt;/transactions/[...id].svelte&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;context=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;// Pass the id parameter from the dynamic path slug corresponding to /transactions/[id]&lt;/span&gt;
    &lt;span class="c1"&gt;// This gets set to the exported variable transaction_id&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;page&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;transaction_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;goto&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$app/navigation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte/store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="c1"&gt;// This variable is set from the load function above&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;transaction_id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// We use stores to reference the list of transactions as well as the transaction details&lt;/span&gt;
    &lt;span class="c1"&gt;// for the currently selected transaction.&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transactions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selectedTxn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Call method reactively when transaction id changes&lt;/span&gt;
    &lt;span class="nl"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;setupPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transaction_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$transactions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;//... continued below&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#setup-page-function"&gt;
  &lt;/a&gt;
  Setup page function
&lt;/h3&gt;

&lt;p&gt;In our component‚Äôs &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; section, we define a function called &lt;code&gt;setupPage()&lt;/code&gt;. This function is responsible for setting component variables consistent with the current path. It will be reactive to changes in the path variables, invoked through reactive blocks and store subscriptions. This function should be consistent when setting state as it can be called multiple times in certain scenarios due to multiple subscriptions. As a result it‚Äôs best for this function to also be synchronous and not fetch external data (which is better done on mounting).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;// ... continuing from above&lt;/span&gt;
    &lt;span class="c1"&gt;// Main function for setting the correct state on the page.&lt;/span&gt;
    &lt;span class="c1"&gt;// This idempotent function sets the selected transaction data&lt;/span&gt;
    &lt;span class="c1"&gt;// based on the transaction id from dynamic path.&lt;/span&gt;
    &lt;span class="c1"&gt;// It identifies the selected transaction from the list of all transactions loaded&lt;/span&gt;
    &lt;span class="c1"&gt;// when the component mounts.&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setupPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;txn_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;txns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// If no transaction id is set in the path, default to the first transaction&lt;/span&gt;
        &lt;span class="c1"&gt;// This handles the path "/transactions"&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;txn_id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;txns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/transactions/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;txns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$selectedTxn&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;txn_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;txn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;txns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;txn_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;txn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
            &lt;span class="nx"&gt;$selectedTxn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;txn&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Also run the setupPage function when the list of transactions changes&lt;/span&gt;
    &lt;span class="nx"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setupPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transaction_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#url-query-parameters"&gt;
  &lt;/a&gt;
  URL query parameters
&lt;/h3&gt;

&lt;p&gt;We use URL query parameters to display intermediary states, such as forms or modals, that toggle on or off. In the example app, there are links to open a "create transaction" form, and a button to dismiss the form.&lt;/p&gt;

&lt;p&gt;To show the form, we use a shorthand link to add the parameter to the current path.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"?new=t"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- link contents --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Dismissing the form takes a bit more code, as we want to only remove the parameter &lt;code&gt;new&lt;/code&gt; without modifying the rest of the path. We can use the SvelteKit &lt;code&gt;goto&lt;/code&gt; method to navigate without resetting the position or focus of the current page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
    &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Hide form by unsetting query param new&lt;/span&gt;
        &lt;span class="nx"&gt;$page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;$page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;?&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;$page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;noscroll&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;keepfocus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;Cancel&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#child-components-and-navigating-store"&gt;
  &lt;/a&gt;
  Child components and $navigating store
&lt;/h3&gt;

&lt;p&gt;Since the &lt;code&gt;load&lt;/code&gt; function is scoped to the entire component, in the case when child components need to be reactive to navigation we use subscriptions on the &lt;code&gt;$page&lt;/code&gt; and &lt;code&gt;$navigating&lt;/code&gt; stores. These are also used to invoke the &lt;code&gt;setupPage()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;In the example below, we have a child component displaying the details of a transaction. It also displays a form for creating a new transaction, based on a query parameter value in the URL path. The &lt;code&gt;$navigating&lt;/code&gt; store has a few states that transition during navigation, please refer to the SvelteKit docs for full details. Here we react to the state where a &lt;code&gt;to&lt;/code&gt; object represents the next page being loaded.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;navigating&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$app/stores&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;showForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;unsubs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

    &lt;span class="c1"&gt;// Show form based on url parameters&lt;/span&gt;
    &lt;span class="c1"&gt;// Svelte-kit page store contains an instance of URLSearchParams&lt;/span&gt;
    &lt;span class="c1"&gt;// https://kit.svelte.dev/docs#loading-input-page&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setupPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;t&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;showForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;showForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Subscribe to page and navigating stores to setup page when navigation changes&lt;/span&gt;
    &lt;span class="c1"&gt;// Note that, in our testing, the Svelte-kit load function does not fire on child modules&lt;/span&gt;
    &lt;span class="c1"&gt;// This is an alternative way to detect navigation changes without a component load function&lt;/span&gt;
    &lt;span class="nx"&gt;unsubs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;unsubs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setupPage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;unsubs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;unsubs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;navigating&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setupPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// ... full component below&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#put-it-all-together"&gt;
  &lt;/a&gt;
  Put it all together
&lt;/h3&gt;

&lt;p&gt;Here is the entire component. Transaction data is fetched during onMount and added to stores, and current transaction details are displayed based on the navigation. "Selecting" a transaction to view details is done through regular &lt;code&gt;&amp;lt;a href&amp;gt;&lt;/code&gt; links or programatically using the &lt;code&gt;goto&lt;/code&gt; method provided by SvelteKit.&lt;/p&gt;

&lt;p&gt;Changes to navigation or state invoke the &lt;code&gt;setupPage(...)&lt;/code&gt; method which ensures component variables are set correctly.&lt;/p&gt;

&lt;p&gt;Also note the use of a URL query parameter &lt;code&gt;?new=t&lt;/code&gt; which opens (and closes) a form for "creating" a new transaction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;src/routes/transactions/[...id].svelte&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;context=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;// Pass the id parameter from the dynamic path slug corresponding to /transactions/[id]&lt;/span&gt;
    &lt;span class="c1"&gt;// This gets set to the exported variable transaction_id&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;page&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;transaction_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;goto&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$app/navigation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte/store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;onDestroy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onMount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;TransactionDetails&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$lib/Transaction/details.svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fetchTransactions&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$lib/api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// This variable is set from the load function above&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;transaction_id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// We use stores to reference the list of transactions as well as the transaction details&lt;/span&gt;
    &lt;span class="c1"&gt;// for the currently selected transaction.&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transactions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selectedTxn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Track subscriptions to wrtable stores, to unsubscribe when the component is destroyed&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;unsubs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

    &lt;span class="c1"&gt;// Main function for setting the correct state on the page.&lt;/span&gt;
    &lt;span class="c1"&gt;// This idempotent function sets the selected transaction data&lt;/span&gt;
    &lt;span class="c1"&gt;// based on the transaction id from dynamic path.&lt;/span&gt;
    &lt;span class="c1"&gt;// It identifies the selected transaction from the list of all transactions loaded&lt;/span&gt;
    &lt;span class="c1"&gt;// when the component mounts.&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setupPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;txn_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;txns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;txn_id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;txns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/transactions/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;txns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$selectedTxn&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;txn_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;txn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;txns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;txn_id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;txn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;$selectedTxn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;txn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Call the setupPage method reactively when the transaction_id is changed&lt;/span&gt;
    &lt;span class="nl"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;setupPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transaction_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$transactions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Call the setupPage method reactively when the list of all transactions is changed&lt;/span&gt;
    &lt;span class="nx"&gt;unsubs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;unsubs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setupPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transaction_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="c1"&gt;// Fetch all transactions when this component mounts&lt;/span&gt;
    &lt;span class="nx"&gt;onMount&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fetchTransactions&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// Unsubscribe from all subscriptions&lt;/span&gt;
    &lt;span class="nx"&gt;onDestroy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;unsubs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex flex-row"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"w-1/4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex flex-row m-2 mt-6 justify-between"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            Transactions
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"?new=t"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="c"&gt;&amp;lt;!-- SVG details omitted for conciseness --&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex flex-col"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            {#each $transactions as txn (txn.id)}
                &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt;
                    &lt;span class="na"&gt;class:active=&lt;/span&gt;&lt;span class="s"&gt;{txn.id&lt;/span&gt; &lt;span class="err"&gt;==&lt;/span&gt; &lt;span class="na"&gt;transaction_id&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
                    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"m-2 border border-green-900 rounded-sm p-2"&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;{`/transactions/${txn.id}`}&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"linklike"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Transaction {txn.id}&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            {:else}
                &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;No transactions&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            {/each}
        &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"w-3/4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        {#if !$selectedTxn &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; $transactions?.length == 0}
            &lt;span class="c"&gt;&amp;lt;!-- empty page element goes here --&amp;gt;&lt;/span&gt;
        {:else if $selectedTxn}
            &lt;span class="nt"&gt;&amp;lt;TransactionDetails&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="na"&gt;transaction_id&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        {:else if transaction_id}
            &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Transaction {transaction_id} not found&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        {/if}
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nc"&gt;.active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;bg-gray-300&lt;/span&gt; &lt;span class="err"&gt;font-bold;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;src/lib/Transaction/details.svelte&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;navigating&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$app/stores&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;goto&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$app/navigation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte/store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;onDestroy&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;transaction_id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;showForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;unsubs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

    &lt;span class="c1"&gt;// Show form based on URL parameters&lt;/span&gt;
    &lt;span class="c1"&gt;// Svelte-kit page store contains an instance of URLSearchParams&lt;/span&gt;
    &lt;span class="c1"&gt;// https://kit.svelte.dev/docs#loading-input-page&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setupPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;t&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;showForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;showForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Subscribe to page and navigating stores to setup page when navigation changes&lt;/span&gt;
    &lt;span class="c1"&gt;// Note that, in our testing, the Svelte-kit load function does not fire on child modules&lt;/span&gt;
    &lt;span class="c1"&gt;// This is an alternative way to detect navigation changes without the component load function&lt;/span&gt;
    &lt;span class="nx"&gt;unsubs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;unsubs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setupPage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;unsubs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;unsubs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;navigating&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setupPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchTransactionDetails&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;txn_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;txn_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// In normal circumstances, a call to an API would take place here&lt;/span&gt;
        &lt;span class="c1"&gt;// const api = fetchapi(`/api/transactions/${txn_id}`)&lt;/span&gt;
        &lt;span class="c1"&gt;// const res = await api.ready&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;json&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
                &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;txn_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Transaction &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;txn_id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Not a person&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1 million dollars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Network error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nl"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fetchTransactionDetails&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transaction_id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;onDestroy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;unsubs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

{#if !showForm &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; $transaction}
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"m-6 p-6 border border-gray-600 rounded"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Details for {$transaction.name}
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid grid-cols-2 pt-6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Id: {$transaction.id}&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Name: {$transaction.name}&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;User: {$transaction.user}&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Amount: {$transaction.amount}&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
{/if}

{#if showForm}
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"m-6 p-6 border border-gray-600 rounded"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Create new transaction
        &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid grid-cols-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Name&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"user"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;User&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"user"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"amount"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Amount&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"amount"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt;
                &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"cancel"&lt;/span&gt;
                &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"border border-purple-800 bg-purple-100 rounded-md w-16 mt-2"&lt;/span&gt;
                &lt;span class="na"&gt;on:click&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="na"&gt;preventDefault=&lt;/span&gt;&lt;span class="s"&gt;{()&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; {
                    // Hide form by unsetting query param new
                    $page.query.delete('new');
                    goto(`${$page.path}?${$page.query.toString()}`, {
                        noscroll: true,
                        keepfocus: true
                    });
                }}
            &amp;gt;
                Cancel
            &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"save"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"border border-purple-800 bg-purple-100 rounded-md w-12 mt-2"&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Save&lt;span class="nt"&gt;&amp;lt;/button&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
{/if}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is a screenshot of the example app in action. Note the transaction id in the path, and the corresponding details selected on the page being displayed!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EHxTojTL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jumpwire.ai/images/blog/sveltekit-path-based-navigation/01-svelte-navigation-example.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EHxTojTL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jumpwire.ai/images/blog/sveltekit-path-based-navigation/01-svelte-navigation-example.png" alt="Screenshot of example app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Svelte stores are one of the more powerful features of the Svelte framework. Importing and subscribing to state allows for component encapsulation without passing all data as props through children.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;I‚Äôve been working with SvelteKit for a few months now and am really enjoying the experience. There have been rare moments of coding delight as something just works in Svelte as intuited. This is in contrast with my experience in React or NextJS, where I found components, lifecycles and hooks downright befuddling at times. Svelte solves just enough problems that make reactive web page development easy, and doesn‚Äôt hide much behind magic.&lt;/p&gt;

&lt;p&gt;Using path-based variables and parameters to set component state ties together the ease of state management in Svelte along with people's normal browsing behavior of saving links and using the back button. Additionally, driving state changes through the path drives a consistent approach to component data that simplifies the execution flow of code across a Svelte app.&lt;/p&gt;

&lt;p&gt;We will continue to post about our use of Svelte and experience in the broader Svelte ecosystem of tools and extensions. If you found this article helpful, we would love to hear from you!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Happy coding adventures!&lt;/strong&gt; -&lt;br&gt;
The JumpWire team&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Promise &amp; Async await in JavaScript.</title>
      <author>Santan kr Sharma</author>
      <pubDate>Wed, 29 Sep 2021 20:30:07 +0000</pubDate>
      <link>https://dev.to/santan47/promise-async-await-in-javascript-mlb</link>
      <guid>https://dev.to/santan47/promise-async-await-in-javascript-mlb</guid>
      <description>&lt;p&gt;&lt;strong&gt;Promise:&lt;/strong&gt;&lt;br&gt;
Imagine that you‚Äôre a top singer, and fans ask day and night for your upcoming song.&lt;/p&gt;

&lt;p&gt;To get some relief, you promise to send it to them when it‚Äôs published. You give your fans a list. They can fill in their email addresses, so that when the song becomes available, all subscribed parties instantly receive it. And even if something goes very wrong, say, a fire in the studio, so that you can‚Äôt publish the song, they will still be notified.&lt;/p&gt;

&lt;p&gt;This is a real-life analogy for things we often have in programming:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;‚Äúproducing code‚Äù that does something and takes time. For instance, some code that loads the data over a network. That‚Äôs a ‚Äúsinger‚Äù.&lt;/li&gt;
&lt;li&gt;‚Äúconsuming code‚Äù that wants the result of the ‚Äúproducing code‚Äù once it‚Äôs ready. Many functions may need that result. These are the ‚Äúfans‚Äù.&lt;/li&gt;
&lt;li&gt;promise is a special JavaScript object that links the ‚Äúproducing code‚Äù and the ‚Äúconsuming code‚Äù together. In terms of our analogy: this is the ‚Äúsubscription list‚Äù. The ‚Äúproducing code‚Äù takes whatever time it needs to produce the promised result, and the ‚Äúpromise‚Äù makes that result available to all of the subscribed code when it‚Äôs ready.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Promises are a new feature of ES6. It‚Äôs a method to write asynchronous code. They are easy to manage when dealing with multiple asynchronous operations where callbacks can create callback hell leading to unmanageable code.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How It Works.
&lt;/h6&gt;

&lt;p&gt;There are 3 states of the Promise object:&lt;/p&gt;

&lt;p&gt;1.Pending: Initial State, before the Promise succeeds or fails&lt;br&gt;
2.Resolved: Completed Promise&lt;br&gt;
3.Rejected: Failed Promise&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#creating-and-using-a-promise-step-by-step"&gt;
  &lt;/a&gt;
  Creating and Using A Promise Step by Step
&lt;/h6&gt;

&lt;p&gt;Firstly, we use a constructor to create a Promise object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const myPromise = new Promise();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It takes two parameters, one for success (resolve) and one for fail (reject):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const myPromise = new Promise((resolve, reject) =&amp;gt; {  
    // condition
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, there will be a condition. If the condition is met, the Promise will be resolved, otherwise it will be rejected:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const myPromise = new Promise((resolve, reject) =&amp;gt; {  
    let condition;  

    if(condition is met) {    
        resolve('Promise is resolved successfully.');  
    } else {    
        reject('Promise is rejected');  
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we have created our first Promise. Now let's use it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;then( ) for resolved Promises:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;myPromise.then();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The then( ) method is called after the Promise is resolved. Then we can decide what to do with the resolved Promise.&lt;/p&gt;

&lt;p&gt;For example, let‚Äôs log the message to the console that we got from the Promise:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;myPromise.then((message) =&amp;gt; {  
    console.log(message);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;catch( ) for rejected Promises:&lt;/strong&gt;&lt;br&gt;
However, the then( ) method is only for resolved Promises. What if the Promise fails? Then, we need to use the catch( ) method.&lt;/p&gt;

&lt;p&gt;Likewise we attach the then( ) method. We can also directly attach the catch( ) method right after then( ):&lt;/p&gt;

&lt;p&gt;example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;myPromise.then((message) =&amp;gt; { 
    console.log(message);
}).catch((message) =&amp;gt; { 
    console.log(message);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#async-functions-making-promises-friendly"&gt;
  &lt;/a&gt;
  Async functions - making promises friendly
&lt;/h6&gt;

&lt;p&gt;The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"&gt;async functions&lt;/a&gt; and the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await"&gt;await&lt;/a&gt; keyword, added in ECMAScript 2017.&lt;br&gt;
These features basically act as syntactic sugar on top of promises, making asynchronous code easier to write and to read afterwards.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#the-async-keyword"&gt;
  &lt;/a&gt;
  The Async Keyword
&lt;/h6&gt;

&lt;p&gt;First of all we have the async keyword, which you put in front of a function declaration to turn it into an async function. An async function is a function that knows how to expect the possibility of the await keyword being used to invoke asynchronous code.&lt;/p&gt;

&lt;p&gt;They allow you to write promise-based code as if it were synchronous, but without blocking the main thread. They make your asynchronous code less "clever" and more readable.&lt;/p&gt;

&lt;p&gt;Async functions work like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;async function myFirstAsyncFunction() {
  try {
    const fulfilledValue = await promise;
  }
  catch (rejectedValue) {
    // ‚Ä¶
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you use the async keyword before a function definition, you can then use await within the function. When you await a promise, the function is paused in a non-blocking way until the promise settles. If the promise fulfills, you get the value back. If the promise rejects, the rejected value is thrown.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example: Logging a fetch&lt;/strong&gt;&lt;br&gt;
Say we wanted to fetch a URL and log the response as text. Here's how it looks using promises:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function logFetch(url) {
  return fetch(url)
    .then(response =&amp;gt; response.text())
    .then(text =&amp;gt; {
      console.log(text);
    }).catch(err =&amp;gt; {
      console.error('fetch failed', err);
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here's the same thing using async functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;async function logFetch(url) {
  try {
    const response = await fetch(url);
    console.log(await response.text());
  }
  catch (err) {
    console.log('fetch failed', err);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's the same number of lines, but all the callbacks are gone. This makes it way easier to read, especially for those less familiar with promises.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#adding-error-handling"&gt;
  &lt;/a&gt;
  Adding error handling
&lt;/h6&gt;

&lt;p&gt;And if you want to add error handling, you've got a couple of options.&lt;/p&gt;

&lt;p&gt;You can use a synchronous try...catch structure with async/await. This example expands on the first version of the code we showed above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;async function myFetch() {
  try {
    let response = await fetch('coffee.jpg');

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    let myBlob = await response.blob();
    let objectURL = URL.createObjectURL(myBlob);
    let image = document.createElement('img');
    image.src = objectURL;
    document.body.appendChild(image);

  } catch(e) {
    console.log(e);
  }
}

myFetch();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The catch() {} block is passed an error object, which we've called e; we can now log that to the console, and it will give us a detailed error message showing where in the code the error was thrown.&lt;/p&gt;

&lt;p&gt;If you wanted to use the second (refactored) version of the code that we showed above, you would be better off just continuing the hybrid approach and chaining a .catch() block onto the end of the .then() call, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;async function myFetch() {
  let response = await fetch('coffee.jpg');
  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }
  return await response.blob();

}

myFetch().then((blob) =&amp;gt; {
  let objectURL = URL.createObjectURL(blob);
  let image = document.createElement('img');
  image.src = objectURL;
  document.body.appendChild(image);
})
.catch((e) =&amp;gt;
  console.log(e)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is because the .catch() block will catch errors occurring in both the async function call and the promise chain. If you used the try/catch block here, you might still get unhandled errors in the myFetch() function when it's called.&lt;/p&gt;

&lt;p&gt;Reference :- &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await"&gt;developer.mozilla.org&lt;/a&gt; &lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Quickest way to Secure API Keys on the Frontend</title>
      <author>Jose R. Torres</author>
      <pubDate>Wed, 29 Sep 2021 20:26:50 +0000</pubDate>
      <link>https://dev.to/korconnect/quickest-way-to-secure-api-keys-on-the-frontend-1jcp</link>
      <guid>https://dev.to/korconnect/quickest-way-to-secure-api-keys-on-the-frontend-1jcp</guid>
      <description>&lt;p&gt;We all know that API keys and connections can not be secured on the client side of an application. Hard coding API keys on the frontend is a quick and surefire way to have your API connection shutdown, API keys stolen, and have your API provider‚Äôs bill skyrocket. So what options are there if you do not want to maintain back end infrastructure? We will explore the recommended techniques for integrating 3rd party APIs into client side applications without having to build a backend. Then we will walk you through a step by step example of integrating a private API to create a Covid 19 tracker using &lt;a href="https://korconnect.io"&gt;KOR Connect&lt;/a&gt;.   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ways-of-integrating-3rd-party-apis-without-backend-infrastructure"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Ways of integrating 3rd party APIs without backend infrastructure:&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ESpBP-wu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6ufft11nrvwv10knfon.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ESpBP-wu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6ufft11nrvwv10knfon.png" alt="Lambda image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#serverless-functions-as-a-backend-proxy-aws-lambda"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Serverless Functions as a backend proxy (AWS Lambda):&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;It is often recommended to use serverless functions to hide API keys for client side applications. Then the client can use this serverless function as a proxy to call the API through a new endpoint. The developer should also incorporate CORS to identify the header origin so that only the allowed domains are calling the proxy (to prevent unwanted calls to the proxy url from anywhere). This may seem secure but CORS only verifies browser calls and can be easily spoofed or can be called from outside of the browser. A malicious actor can still run up costs with a bot and have the endpoint shut down. Further issues with this technique can arise around provisioning AWS services to support the lambda functions like API gateways, roles, and permissions between cloud services, this can be very time consuming if you are not familiar with the cloud provider. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MgbDFUvR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0q72a1o7nbcsnp61f95k.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MgbDFUvR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0q72a1o7nbcsnp61f95k.jpg" alt="Netlify logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#netlify-functions-built-on-aws-lambda"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Netlify Functions (built on AWS Lambda):&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Netlify Functions is a wrapper around AWS Lambdas, the main advantage to using this approach over the AWS provisioned proxy is an improved user experience and Netlify helps streamline the deployment for you. Netlify Functions remove the tasks associated with setting up an AWS account and other AWS services required to correctly integrate the API. Similar security issues persist with Netlify Functions as they do with setting up your own AWS provisioned proxy. Even with CORS setup the new Netlify endpoint can be called in unwanted ways and by unwanted agents. This leaves your API susceptible to being shut down, or having costs run up. Furthermore if you are not familiar with writing functions this could present an additional learning curve.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fCcQbgTG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fg4bj3hp3w310mkvzmcz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fCcQbgTG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fg4bj3hp3w310mkvzmcz.png" alt="KOR Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#kor-connect"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://korconnect.io"&gt;KOR Connect&lt;/a&gt;:&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;KOR Connect is a new way for client-side web apps to integrate APIs. KOR Connect is the quickest way to secure API Keys and connect 3rd party APIs because you do not need to build infrastructure (AWS/ other cloud providers), or code functions (AWS and Netlify Functions). KOR Connect also uses AWS Lambda to secure API keys but the similarities between KOR Connect and the other options end there. The API key is secured on KOR Connect through a one click integration then a snippet containing a new public URL is copy-pasted into the developer‚Äôs code. This snippet that is placed into the frontend code contains Google‚Äôs Recaptcha V3 which is used as an attestation layer to confirm the origin of the endpoint call as well as block unwanted bot traffic. KOR Connect also has additional layers of security to further protect the API traffic from man-in-the-middle attacks. KOR Connect prevents endpoint calls from malicious actors with and without the browser, secures API keys, and blocks bot attacks. The public URL that is used in the code does not need to be hidden so this frees the developer from having to worry about API secrets ending up in the git repository, API secrets being exposed on the client, having to manually create wrappers around lambda functions, and worrying about unwanted endpoint calls being made. The current feature set KOR Connect is the best option for client-side web apps that want dynamic functionality but may not necessarily want user authentication. (Bonus it‚Äôs also free)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-lets-walk-through-an-example-using-kor-connect-and-vuejs"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Now let's walk through an example using KOR Connect and Vue.js!&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G9oPKo8N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ivbhc4t0wbj9p1n73ued.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G9oPKo8N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ivbhc4t0wbj9p1n73ued.gif" alt="gif"&gt;&lt;/a&gt;&lt;br&gt;
Lets create a COVID-19 tracker. In order to do this we have to pick the API that we want to use. I decided on the &lt;a href="https://rapidapi.com/axisbits-axisbits-default/api/covid-19-statistics/"&gt;COVID-19 Statistics API&lt;/a&gt; that uses data from John Hopkins University.  &lt;/p&gt;

&lt;p&gt;If you already have a &lt;a href="https://korconnect.io"&gt;KOR Connect&lt;/a&gt; account you can sign in &lt;a href="https://app.korconnect.io/login"&gt;here&lt;/a&gt; or you can create a new account.&lt;/p&gt;

&lt;p&gt;Let‚Äôs start by creating an API connection on KOR Connect by clicking on the ‚Äú+ Connect API‚Äù button:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MzzRXC-_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wg07xvqtu7udjuggvhem.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MzzRXC-_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wg07xvqtu7udjuggvhem.jpeg" alt="Connect API Button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The connection details were all copied directly from RapidAPI. More information regarding the API connection module &lt;a href="https://kor-comunity.gitlab.io/kor-connect/adir/GETSTARTED.html"&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AR-EC_HD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/he0413n4qaji6p77mcie.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AR-EC_HD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/he0413n4qaji6p77mcie.png" alt="Connection module"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Done! After making the connection go to the code snippets to see how you will consume the API in the frontend. In my case I wanted to use Vue.js so I went to the Vue.js snippets section and retrieved the information I needed for this framework.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WK-ZRgfU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ktkwb6ve89uiqrxfmmn.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WK-ZRgfU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ktkwb6ve89uiqrxfmmn.jpeg" alt="Snippets"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want, &lt;a href="https://www.youtube.com/watch?v=m-MAIpnH9ag"&gt;here&lt;/a&gt; is a great video tutorial by Traversy Media walking you through building the site on Vue.js. (&lt;a href="https://github.com/bradtraversy/vue-covid-tracker"&gt;Here&lt;/a&gt; is the code for his COVID-19 tracker).&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt; In the tutorial he uses a public API, we will use KOR Connect to easily integrate the private API into our site.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs take a look at how KOR Connect provides the snippet:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VpmXLZtU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tg2w3d0a3wf55lhxpgh0.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VpmXLZtU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tg2w3d0a3wf55lhxpgh0.jpeg" alt="Snippet box"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is how to integrated the snippet into your project:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZkVJyuqI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8evdz2qu9yhqr01pzzb5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZkVJyuqI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8evdz2qu9yhqr01pzzb5.png" alt="Modified snippet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the KOR Connect URL is modified with the paths I received from RapidAPI. For example, to get the total Covid cases I need to add this to my base URL:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5XJXPXXf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/az6j8mssouab1cihrjmx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5XJXPXXf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/az6j8mssouab1cihrjmx.png" alt="Path"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;All the paths available in the API you are using can be appended to the KOR Connect base URL (secure URL).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, all of the API calls are made to the public URL that KOR Connect provides. KOR Connect will act as a proxy to authenticate as well as send the API information. Furthermore, thanks to reCaptcha V3 (which is implemented automatically) and additional layers of security, several malicious attack vectors are blocked which enhances KOR Connects security.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qg-0uB5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zj4ttldiae61fbmtniyb.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qg-0uB5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zj4ttldiae61fbmtniyb.jpeg" alt="Finished site"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>security</category>
      <category>vue</category>
    </item>
    <item>
      <title>Transform your smart devices to intelligent communicators üöÄ</title>
      <author>Aniket Pal</author>
      <pubDate>Wed, 29 Sep 2021 20:20:26 +0000</pubDate>
      <link>https://dev.to/aniket762/transform-your-smart-devices-to-intelligent-communicators-3np9</link>
      <guid>https://dev.to/aniket762/transform-your-smart-devices-to-intelligent-communicators-3np9</guid>
      <description>&lt;p&gt;Ever built a product which you yourself used the next day? Well, I did! I had a Frenectomy and I was restricted to speak for the next 48 hours. That time, Donna came to the rescue!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/betaoverflow"&gt;
        betaoverflow
      &lt;/a&gt; / &lt;a href="https://github.com/betaoverflow/donna"&gt;
        donna
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Transform your smart devices to intelligent communicators.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/c61194fc44eeb20dc58a3ebe35af40fdd11edd69477c1389e14a8aa27be26226/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646775793871707a692f696d6167652f75706c6f61642f76313633313432363530302f646f6e6e612f52656374616e676c655f33395f70723662366c2e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/c61194fc44eeb20dc58a3ebe35af40fdd11edd69477c1389e14a8aa27be26226/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646775793871707a692f696d6167652f75706c6f61642f76313633313432363530302f646f6e6e612f52656374616e676c655f33395f70723662366c2e706e67" width="200"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
 Donna&lt;/h1&gt;
&lt;p&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/daf35c44c11a146522faedb80925edb265b89128993e64d05fa52e3dddfc06ec/687474703a2f2f466f7254686542616467652e636f6d2f696d616765732f6261646765732f6275696c742d62792d646576656c6f706572732e737667"&gt;&lt;img src="https://camo.githubusercontent.com/daf35c44c11a146522faedb80925edb265b89128993e64d05fa52e3dddfc06ec/687474703a2f2f466f7254686542616467652e636f6d2f696d616765732f6261646765732f6275696c742d62792d646576656c6f706572732e737667"&gt;&lt;/a&gt;¬†&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/7dd59506447a5060c5df4ab9da2c7a3fefcb0e1cd86ba40d31a45666bc98e6e0/687474703a2f2f466f7254686542616467652e636f6d2f696d616765732f6261646765732f6275696c742d776974682d6c6f76652e737667"&gt;&lt;img src="https://camo.githubusercontent.com/7dd59506447a5060c5df4ab9da2c7a3fefcb0e1cd86ba40d31a45666bc98e6e0/687474703a2f2f466f7254686542616467652e636f6d2f696d616765732f6261646765732f6275696c742d776974682d6c6f76652e737667"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
According to a survey of 601 people, 57.9 % of participants experienced communication difficulties, with 23.5 % reporting severe difficulties. Only 75.1 % of participants communicated verbally; more than half found communicating with professionals and non-familiar partners difficult. Living in the privileged galaxy of intellects and witnessing a technical revolution in everyday life it is imperative not to overlook the responsibility to utilize technology to contribute to the progress and development of society at large. Communication is the fundamental basis for any individual to live a normal life. People facing trouble in communicating with others can often be a victim of social isolation. For example, most people who are hearing disabled are also speech disabled. In an extensive research conducted in various domains, it was found that hearing impairment and inability to verbally express oneself leads to lack of equal opportunities as well as leads to problems even in‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/betaoverflow/donna"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;According to a survey of 601 people, 57.9 % of participants experienced communication difficulties, with 23.5 % reporting severe difficulties. Only 75.1 % of participants communicated verbally; more than half found communicating with professionals and non-familiar partners difficult. &lt;/p&gt;

&lt;p&gt;Communication is the fundamental basis for any individual to live a normal life. People facing trouble in communicating with others can often be a victim of social isolation. For example, most people who are hearing disabled are also speech disabled. In an extensive research conducted in various domains, it was found that hearing impairment and inability to verbally express oneself leads to lack of equal opportunities as well as leads to problems even in everyday communication. &lt;/p&gt;

&lt;p&gt;We wanted to contribute to help this cause so we came up with Donna. For all the suits fans, you know who Donna is. For those who don't, Donna is a strong female character from a famous T.V. show called Suits. She was one person who everyone could count on and whatever the situation might be she was always there for her dear ones. With all the difficulties specially-abled people feel, we hope to never let them feel lonely and helpless having Donna by their side.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fN8_qver--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y7ir2qb6mz91forq0aug.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fN8_qver--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y7ir2qb6mz91forq0aug.png" alt="Donna User Interface"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works ü§ì
&lt;/h2&gt;

&lt;p&gt;Donna is an application that always has your back. Through this hack, we want to make sure specially-abled people never feel helpless. Donna supports people with disabilities by allowing them to communicate. It has special cards for a lot of statements people might normally use and need in day to day life routines. Moreover, we have a facility for storing an identity card, emergency contact and other important information to make them feel even more secure. There is also a provision of typing your own statements and using them to communicate with others. The app uses the flutter_tts package for text to speech conversion. Both the web and app is created on flutter along with firebase for user authentication. Although Donna can help a lot of people, we especially made this to help the deaf people who find it really difficult to communicate with the outside world which leads to them not opening up to new people.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-we-built-it"&gt;
  &lt;/a&gt;
  How we built it üßë‚Äçüíª
&lt;/h2&gt;

&lt;p&gt;We used flutter to build the frontend and Firebase as our backend service for authentication and database. We used a flutter package to convert text to speech. We added the feature in which the users can create personalised voice cards (a card on clicking which converts the text to speech) through a form. These custom cards are stored in the database for user convenience and are available upon login.&lt;/p&gt;




&lt;p&gt;Donna was built in Ability Hacks powered by Abilify, USA in which we were the winner but there are a lot of features we have planned and some which need the support of community.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RjJDj0LP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixuwftxb83frs48jdnj5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RjJDj0LP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixuwftxb83frs48jdnj5.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next-for-donna"&gt;
  &lt;/a&gt;
  What's next for Donna üî•
&lt;/h2&gt;

&lt;p&gt;Next, we want to add more and more categories and functionalities in the app to try and put all the phrases that might be required in day-to-day activities. We also wish to add hospital support and on-call emergency services in the future. In addition to that, we want to make sure, we take care of their mental health as well, so we would also be adding a mood tracker which tracks a person's happiness index every day and helps them make the graph go up!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#support-us-to-empower-everyone"&gt;
  &lt;/a&gt;
  Support us to empower everyone üöÄ
&lt;/h2&gt;

&lt;p&gt;Taking this prototype to production needs your help. The code is open-sourced and we would love to see your contribution:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check the &lt;a href="https://github.com/betaoverflow/donna"&gt;Github Repo &lt;/a&gt; üòé&lt;/li&gt;
&lt;li&gt;Fork the Repository üç¥&lt;/li&gt;
&lt;li&gt;Star the Repo ‚≠êÔ∏è&lt;/li&gt;
&lt;li&gt;Send the PR or create an issue ü§ì&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Incase you like the  &lt;a href="https://github.com/betaoverflow/donna"&gt;project&lt;/a&gt; and want to help our community drop a star to increase the visibility. And, if you want to discuss more, would love to have a chat with you on &lt;a href="https://www.linkedin.com/in/aniket-pal/"&gt;LinkedIn&lt;/a&gt; &lt;/p&gt;

</description>
      <category>opensource</category>
      <category>programming</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Welcome Thread - v144</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 29 Sep 2021 19:49:08 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v144-287</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v144-287</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ITXtM_I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/OJqimXwqG7CQE/giphy.gif%3Fcid%3Decf05e47phjd4n8s48dw6z2to68w2n5km6609s75lh8pdrer%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ITXtM_I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/OJqimXwqG7CQE/giphy.gif%3Fcid%3Decf05e47phjd4n8s48dw6z2to68w2n5km6609s75lh8pdrer%26rid%3Dgiphy.gif%26ct%3Dg" alt="Willy Wonka Welcome"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. üëã &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
  </channel>
</rss>
