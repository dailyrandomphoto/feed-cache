<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>10 raisons pourquoi j'aime Laravel !</title>
      <author> Eric Le Codeur</author>
      <pubDate>Tue, 15 Jun 2021 12:58:23 +0000</pubDate>
      <link>https://dev.to/ericlecodeur/10-raisons-pourquoi-j-aime-laravel-3kec</link>
      <guid>https://dev.to/ericlecodeur/10-raisons-pourquoi-j-aime-laravel-3kec</guid>
      <description>&lt;p&gt;Si vous d√©sirez plus de contenu francophone comme celui-ci, cliquer &lt;strong&gt;Follow ou &lt;a href="https://twitter.com/EricLeCodeur"&gt;suivez-moi sur Twitter&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Au cours des deux derni√®res ann√©es, j'ai essay√© plusieurs langages et frameworks de programmation. J'ai r√©alis√© des projets avec Django, Laravel, Ruby on Rails et Node.js avec Express.js&lt;/p&gt;

&lt;p&gt;J'ai ador√© tout ces frameworks. Ils sont tous matures et font tous le travail. En revanche, l'un de ces framework m'a s√©duit un peu plus que les autres ... Laravel.&lt;/p&gt;

&lt;p&gt;Voici les 10 raisons pour lesquelles je crois sinc√®rement que Laravel est g√©nial!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;PHP est g√©nial! Oui. Ceux qui pr√©tendent le contraire sont, d√©sol√©s de le dire, ignorants. Ils ignorent que PHP 3.0 est obsol√®te depuis longtemps et que PHP 8 est d√©sormais un langage POO complet, relativement rapide, mature, stable et tr√®s agr√©able √† utiliser.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Le framework Laravel est pr√©cis√©ment construit en POO avec les derniers standards PHP. La syntaxe de Laravel est simple, claire et √©l√©gante.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avec Laravel, il n'y a presque pas de code standard √† √©crire. Compar√© √† plusieurs autres frameworks, Laravel est livr√© avec une configuration de d√©marrage compl√®te. Gr√¢ce aux librairies de Laravel, d√©velopper une application web c'est simple et ultra rapide!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Il existe une panoplie de packages tiers. Pourquoi r√©-inventer la roue ? Utilisez un package existant et √©conomisez des heures et des heures de d√©veloppement... Un point fort en faveur de Laravel est que les packages tier Laravel sont maintenu, √† jour et pr√™t pour √™tre utilis√© sur des vraie projets! &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Les cr√©ateurs de Laravel ont cr√©√© un √©co-syst√®me de produits professionnels qui compl√®te Laravel d'une mani√®re merveilleuse. Bien s√ªr, ces produits sont payants, mais en retour, ils sont pr√™ts pour la mise en production √† grande √©chelle et peuvent vous faire √©conomiser des centaines d'heures de d√©veloppement.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avec Laravel, il est √©galement possible de cr√©er des applications fullstack, c'est-√†-dire backend mais aussi frontend. Le code reste ex√©cut√© sur le serveur mais certains produits comme Livewire permettent de d√©velopper des UI interactives comme React mais en pur PHP, simple et facile et sans une ligne de code Javascript.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Laravel prend √©galement en charge la cr√©ation de composants d'interface utilisateur. Il est donc possible d'int√©grer dans votre UI des widgets d√©j√† pr√©-d√©velopp√©s et cl√© en main qui peuvent √™tre install√©s en moins d'une minute et toujours en PHP pur et sans javascript. (ex. graphique chart, calendrier, datatable, ect.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Laravel est open source mais il est d√©velopp√© par ces cr√©ateurs comme un produit pro. C'est-√†-dire que les retours clients sont pris en compte dans les d√©cisions et que des corrections et am√©liorations sont r√©guli√®rement publi√©es. Laravel peut se targuer d'√™tre √† jour avec les derni√®res technologies.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Une documentation incroyables. Laravel a √† mon avis la meilleure documentation pour un framework backend. Tout est simple, clair et d√©taill√© avec des exemples. Les outils de recherche fonctionnent tr√®s bien, il est donc facile de trouver ce que vous recherchez. De plus, elle est r√©guli√®rement mis √† jour.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;La communaut√© Laravel est g√©niale! Tout le monde est le bienvenu pour rejoindre la famille. Il n'y a pas de discrimination et pas de snobisme. Aucune question n'est consid√©r√©e comme stupide. Les gens veulent aider du mieux qu'ils peuvent.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;C'est tout :-)&lt;/p&gt;

&lt;p&gt;Si cela vous donne envie d'en savoir plus sur Laravel et pourquoi pas l'essayer. Vous pouvez commencer ici: &lt;a href="http://www.laravel.com"&gt;www.laravel.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Je publierai plusieurs articles dans les semaines √† venir sur Laravel. Vous pouvez me suivre si vous ne voulez rien manquer.&lt;/p&gt;

</description>
      <category>french</category>
      <category>php</category>
      <category>laravel</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Landing Page Using Next JS üòç</title>
      <author>Said Mounaim</author>
      <pubDate>Tue, 15 Jun 2021 12:50:08 +0000</pubDate>
      <link>https://dev.to/said_mounaim/landing-page-using-next-js-5dd3</link>
      <guid>https://dev.to/said_mounaim/landing-page-using-next-js-5dd3</guid>
      <description>&lt;p&gt;Taskia Landing Page Using Next JS üéâüòç&lt;/p&gt;

&lt;p&gt;Demo : &lt;a href="https://taskia-two.vercel.app/"&gt;https://taskia-two.vercel.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Code : &lt;a href="https://github.com/saidMounaim/Taskia"&gt;https://github.com/saidMounaim/Taskia&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>javascript</category>
      <category>100daysofcode</category>
      <category>css</category>
    </item>
    <item>
      <title>Day 27/30 : CSS Image Hover Effect | Show Button on Hover</title>
      <author>Somanath Goudar</author>
      <pubDate>Tue, 15 Jun 2021 12:06:46 +0000</pubDate>
      <link>https://dev.to/somanathgoudar/day-27-30-css-image-hover-effect-show-button-on-hover-4mg0</link>
      <guid>https://dev.to/somanathgoudar/day-27-30-css-image-hover-effect-show-button-on-hover-4mg0</guid>
      <description>&lt;p&gt;Welcome to Day 27 of this &lt;a href="https://dev.to/somanathgoudar/30dayschallenge-30-days-extreme-html-css-challenge-50k1"&gt;Challenge&lt;/a&gt;. This is what I created today. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;‚ûú Here is the Demo :&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QPvCz-Lb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://1.bp.blogspot.com/-r2F-7F5zFHs/YKokcwhU60I/AAAAAAAAAIk/H4gcDw0JV-k5ZE89mT91fzWZOAedcop0QCLcBGAsYHQ/s600/p27.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QPvCz-Lb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://1.bp.blogspot.com/-r2F-7F5zFHs/YKokcwhU60I/AAAAAAAAAIk/H4gcDw0JV-k5ZE89mT91fzWZOAedcop0QCLcBGAsYHQ/s600/p27.gif" alt="CSS Image Hover Effect"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;‚ûú Video Tutorial :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ZuFVxZdHKkE"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;strong&gt;‚ûú Source Code :&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.futurecodersweb.com/2021/06/image-hover-effects-using-html-and-css.html"&gt;https://www.futurecodersweb.com/2021/06/image-hover-effects-using-html-and-css.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;‚ûú Instagram Post and Reel for Day 27 :&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.instagram.com/future_coderss/"&gt;See Post and Reel&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Hey, If You don't know what is happening here. Don't Worry, I am doing a crazy challenge üòÖ. Read More about it from the post below.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/somanathgoudar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnNEMcDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--15QGQnyq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/600953/fdee0195-6d25-410d-9d97-c10ffaa4eb7d.jpeg" alt="somanathgoudar image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/somanathgoudar/30dayschallenge-30-days-extreme-html-css-challenge-50k1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;ü§Ø 30DaysChallenge - 30 Days Extreme HTML &amp;amp; CSS CHALLENGE ü§Ø&lt;/h2&gt;
      &lt;h3&gt;Somanath Goudar „Éª May 19 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#frontend&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#30daysofcode&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Support Me :&lt;/strong&gt;&lt;br&gt;
üëâ Buy me a Coffee: &lt;a href="https://www.buymeacoffee.com/somanathgoudar"&gt;https://www.buymeacoffee.com/somanathgoudar&lt;/a&gt;&lt;br&gt;
üëâ &lt;a href="https://www.instagram.com/somanath_goudar/"&gt;Follow Me on Instagram&lt;/a&gt;&lt;br&gt;
üëâ &lt;a href="https://www.instagram.com/future_coderss/"&gt;Follow Future Coders on Instagram&lt;/a&gt;&lt;br&gt;
üëâ &lt;a href="https://www.youtube.com/channel/UC_nTrhTr5fnBGjOxnkPUmmA"&gt;Subscribe to My Main Channel&lt;/a&gt;&lt;br&gt;
üëâ &lt;a href="https://www.youtube.com/channel/UCzGSyMOf2jPt1MkNBB3SJ3g"&gt;Subscribe to Channel Created for this Challenge&lt;/a&gt;&lt;/p&gt;




</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Explain Callback Function In JavaScript Like You Are 5 Years Old</title>
      <author>Nick Bull</author>
      <pubDate>Tue, 15 Jun 2021 12:05:53 +0000</pubDate>
      <link>https://dev.to/nickbulljs/explain-callback-function-in-javascript-like-you-are-5-years-old-3dj2</link>
      <guid>https://dev.to/nickbulljs/explain-callback-function-in-javascript-like-you-are-5-years-old-3dj2</guid>
      <description>&lt;p&gt;You are five. You know almost nothing about the world. And know you‚Äôre going to learn one of the toughest concepts in JavaScript ‚Äì callback.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-the-hell-is-this-function"&gt;
  &lt;/a&gt;
  Who the hell is this function
&lt;/h2&gt;

&lt;p&gt;Imagine that JavaScript is a big king that gives tasks to small humans.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QFZ0KKmc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623756700566/NZ8xinMsP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QFZ0KKmc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623756700566/NZ8xinMsP.png" alt="javascript and functions.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n9quRWYp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623756711270/3nrlsDGcj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n9quRWYp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623756711270/3nrlsDGcj.png" alt="javascript calling function.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aTZ7I_Ib--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623756718100/Guxh_0QuC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aTZ7I_Ib--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623756718100/Guxh_0QuC.png" alt="javascript functions is executing.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;**In the JavaScript world, the small humans that perform tasks are called functions. **Functions can perform any task JavaScript tells them to do.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3asH2gM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623756792292/j9kp-pqiD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3asH2gM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623756792292/j9kp-pqiD.png" alt="javascript functions.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And the moment when JavaScript tells a function to do it‚Äôs task is called calling a function.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KfbsP_aq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623756804331/-kCoSM1gA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KfbsP_aq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623756804331/-kCoSM1gA.png" alt="calling a javascript function.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But not all functions are the same. Some functions already know what they have to do. Like the function above that says ‚ÄúJavaScript is the king!‚Äù It knows that it has to say this phrase. Poor function.&lt;/p&gt;

&lt;p&gt;Other functions are more flexible. They also know what they have to do, but they don‚Äôt know with &lt;em&gt;what&lt;/em&gt; exactly they have to do it until javascript tells them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aDhEzd16--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623756850367/TbrepvQVU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDhEzd16--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623756850367/TbrepvQVU.png" alt="javascript tells to take two numbers and say the sum.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PReMUD-i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623756861256/pUY5KtcVM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PReMUD-i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623756861256/pUY5KtcVM.png" alt="javascript function says the sum of two numbers.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J1_wb6Ji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623756870790/0fiRHUak1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J1_wb6Ji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623756870790/0fiRHUak1.png" alt="javascript function log the sum of two numbers.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Until JavaScript told the actual numbers, the first person didn't know them. He just knew what he had to do. But he didn't know &lt;em&gt;with&lt;/em&gt; what exactly he had to do it. So the person can say the sum of any numbers, not just given ones. Like a sum of 2 and 5, or sum of 14 and 3. The person doesn‚Äôt care about it.&lt;/p&gt;

&lt;p&gt;This is more flexible than saying the sum of known data. Because most of the time we want the sum of different numbers, not just 2 and 5. Or we want a person to be able to say different phrases, not just one "JavaScript is king!" Even though it's very nice to JavaScript.&lt;/p&gt;

&lt;p&gt;This way JavaScript doesn't have to give a new task to a new person. For example, telling person number one, to say the sum of 2 and 5. And person number three to say the sum of 14 and 3. It can just tell one person to take some unknown data and do something with it, without saying what exactly is in that data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In the JavaScript world, this unknown data that a function takes is called arguments.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The two numbers in the example above are arguments. The person knows that he has to take them and tell the sum. But he doesn't know what's inside those numbers until JavaScript tells him. And if JavaScript will tell a function to take two numbers and one letter and do something with them, those numbers and a letter also will be called arguments.** All unknown data that functions take are called arguments.**&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N-9UzE-T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623756947814/lHoOW2ftY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N-9UzE-T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623756947814/lHoOW2ftY.png" alt="javascript function arguments.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We‚Äôve learned about functions and arguments, it's time to meet the callback.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-the-hell-is-this-callback"&gt;
  &lt;/a&gt;
  Who the hell is this callback
&lt;/h2&gt;

&lt;p&gt;As you can see, JavaScript has a big crown on its head. This means that it's the king of its world and can do whatever it wants. For example, ask one person to call another person and tell him to do his task.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a7zC38Ni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623756978654/60kyBALri.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a7zC38Ni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623756978654/60kyBALri.png" alt="javascript tell two functions what to do.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8ZD5nlMI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623756987775/fOhKypvEa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ZD5nlMI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623756987775/fOhKypvEa.png" alt="javascript function tell two numbers and call callback function.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sCD33ttW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623756997272/E3pT-c9-G.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sCD33ttW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623756997272/E3pT-c9-G.png" alt="javascript callback function tells javascript is the king.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice that JavaScript didn‚Äôt tell the first person &lt;em&gt;what&lt;/em&gt; person he should call. Like it didn‚Äôt tell the &lt;em&gt;actual&lt;/em&gt; numbers. It simply said it would give two numbers and the person's name. But not the &lt;em&gt;actual&lt;/em&gt; numbers and his name. So we can say with confidence that numbers and a person's name are unknown data. In other words, these are the arguments the function takes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And in the JavaScript world, if one function takes another function as an argument (1), and calls it inside of it (2), the accepted function is called the callback function. Or a more shortened name: callback.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In our example, person number one takes the name of person number two (1) and calls him inside of his task (2). So person number two is a callback function.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--54iBFPVq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623757082448/292vnKZVX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--54iBFPVq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623757082448/292vnKZVX.png" alt="javascript and callback function.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nb2ET2hV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623757092860/yW1js5mbR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nb2ET2hV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623757092860/yW1js5mbR.png" alt="callback function hating javascript.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Functions are still called functions. But if they are accepted as arguments in other functions, they are also called callback functions. Now you know who is hidden under the name callback. And who is the king. Or think he is.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FO6BuCXq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623757105685/Iins98gmE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FO6BuCXq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623757105685/Iins98gmE.png" alt="javascript vs python.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#in-the-end"&gt;
  &lt;/a&gt;
  In the end...
&lt;/h1&gt;

&lt;p&gt;If you want to learn JavaScript, I have something interesting for you. A JavaScript course that fixes &lt;em&gt;one&lt;/em&gt; thing that 97% of other courses lack ‚Äì &lt;strong&gt;a combination of modern and practical JavaScript theory with real-world practice.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Try to get it here:  &lt;a href="http://javascriptcoursethatworks.com/"&gt;javascriptcoursethatworks.com&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;And if you like this article you need to know that every Monday, I send a letter to 4,000+ Web Developers with 3 hand-picked articles from the tech world, 2 web development guides, and 1 best Tweet of the week&lt;/p&gt;

&lt;p&gt;&lt;em&gt;‚ÄúYour newsletter is f&lt;/em&gt;&lt;em&gt;king awesome, really Nick. It gives me a great start to the week with a lot of insightful knowledge.‚Äù&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nickbulljs.com/newsletter/"&gt;Join smart developers who get short and full of knowledge letters&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to Think in¬†Next.js</title>
      <author>Ben Fox</author>
      <pubDate>Tue, 15 Jun 2021 12:04:07 +0000</pubDate>
      <link>https://dev.to/benjaminwfox/how-to-think-in-next-js-2dh5</link>
      <guid>https://dev.to/benjaminwfox/how-to-think-in-next-js-2dh5</guid>
      <description>&lt;p&gt;Let me tell you a story about a client.&lt;/p&gt;

&lt;p&gt;This client was demanding. They wanted &lt;em&gt;all&lt;/em&gt; the things, and they wanted them &lt;em&gt;now&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Servers know this kind of client all too well. When the client comes in, asking for everything &lt;em&gt;and&lt;/em&gt; the kitchen sink, a server just has to sigh.&lt;/p&gt;

&lt;p&gt;"A lot of that is just going to go to waste, you know," says the server, softly.&lt;/p&gt;

&lt;p&gt;Their comments go unheeded.&lt;/p&gt;

&lt;p&gt;Does this client sound familiar?&lt;/p&gt;

&lt;p&gt;This client is your Single Page Application (SPA).&lt;/p&gt;

&lt;p&gt;There's a new client in town, though, and it only asks for what it &lt;em&gt;needs&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This client is Next.js.&lt;/p&gt;

&lt;p&gt;It also happens to be the server ü§î&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clients-and-servers-and-node-oh-my"&gt;
  &lt;/a&gt;
  &lt;a href="#clients-and-servers-and-node-oh-my"&gt;Clients and Servers and Node Oh My&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Starting with Next.js after working on SPAs can be challenging (at least it was for me) with the whole server thing going on, not to mention the node.js runtime üò±&lt;/p&gt;

&lt;p&gt;It can feel like a steep learning curve, especially if you haven't worked much with Node.js, but at the end of the day remember that &lt;strong&gt;the client is still React&lt;/strong&gt;! A majority of getting comfortable with Next.js, I've found, is understanding three things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#execution-context"&gt;Client vs server contexts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#your-application-is-starbucks"&gt;Page types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#api-routes"&gt;API Routes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uwy3CBTO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1kr3jg43u2wri21c86z.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uwy3CBTO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1kr3jg43u2wri21c86z.jpg" alt='The Count from Sesame Street saying "3 Things, Ah Ah Ah!."'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next.js is powerful, and a lot of fun to build with once you get a handle on how it works üèó It combines some of the best features of traditional and single page web applications into a hybrid application.&lt;/p&gt;

&lt;p&gt;If you want a refresher &lt;a href="https://dev.to/benjaminwfox/how-does-a-website-get-its-data-and-why-does-it-matter-dgm"&gt;check out the high-level differences between the three application types&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;‚ö†Ô∏è Expect that things will take longer, at least at first. If you're not learning at your own pace and have to make time estimates, remember to pad those so that you have the time needed to do things correctly the 'Next' way, and not just revert to SPA patterns on top of Next.&lt;/p&gt;

&lt;p&gt;‚ö†Ô∏è Inevitably there will be places where adding functionality is just more complex when rendering occurs in both a server and a browser context like &lt;a href="https://redux.js.org/recipes/server-rendering#redux-on-the-server"&gt;Redux&lt;/a&gt; or &lt;a href="https://cssinjs.org/server-side-rendering"&gt;CSS-In-JS&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#review-spa-vs-nextjs"&gt;
  &lt;/a&gt;
  &lt;a href="#review-spa-vs-nextjs"&gt;Review: SPA vs Next.js&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dpaNK7jS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hput99l0cnlisbgow409.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dpaNK7jS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hput99l0cnlisbgow409.jpg" alt="Visual diagram of the following SPA vs Next.js comparison list."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;In a SPA&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Your code executes in the browser &lt;em&gt;only&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The entire site code bundle is downloaded upfront&lt;/li&gt;
&lt;li&gt;You should not include sensitive information (API keys, passwords, etc...)&lt;/li&gt;
&lt;li&gt;Subsequent pages are all built from bundle code&lt;/li&gt;
&lt;li&gt;You have access to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API"&gt;Web APIs&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/DOM"&gt;the DOM&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;In Next.js&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Your code executes on the server &lt;em&gt;first&lt;/em&gt; and in the browser &lt;em&gt;second&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;On the server:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pages are pre-built and/or pre-rendered (more on that later)&lt;/li&gt;
&lt;li&gt;During API Routes &amp;amp; Data Fetching you &lt;em&gt;can&lt;/em&gt; include sensitive information&lt;/li&gt;
&lt;li&gt;You &lt;em&gt;do not&lt;/em&gt; have access to Web APIs &amp;amp; the DOM &lt;em&gt;on the server&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;You &lt;em&gt;do&lt;/em&gt; have access to a whole new set of &lt;a href="https://nodejs.org/docs/latest/api/"&gt;APIs in Node.js&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the Browser:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The browser only gets the code it needs for the requested page&lt;/li&gt;
&lt;li&gt;None of the sensitive data from the server is available&lt;/li&gt;
&lt;li&gt;Subsequent pages make new requests to the server&lt;/li&gt;
&lt;li&gt;You have access to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API"&gt;Web APIs&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/DOM"&gt;the DOM&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This &lt;em&gt;also&lt;/em&gt; means implementing functionality which may have had a common approach for SPAs, &lt;a href="https://auth0.com/blog/ultimate-guide-nextjs-authentication-auth0/"&gt;like Authentication&lt;/a&gt;, now has multiple approaches to choose from depending on a variety of factors related to how you design your application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#execution-context"&gt;
  &lt;/a&gt;
  &lt;a href="#execution-context"&gt;Execution Context&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The considerations I want to focus on all revolve around the fact that there is now a server you have to deal with. At the risk of sounding obvious, I think it's hard to overstate how important this is.&lt;/p&gt;

&lt;p&gt;The biggest gotcha?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adding a server adds an execution context&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Consider that you've essentially doubled the complexity of your application!&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;context&lt;/em&gt; in which your code &lt;em&gt;executes&lt;/em&gt; can be either the server or the client (browser). There may be code you write that can &lt;em&gt;only&lt;/em&gt; execute in one or the other of these. Common examples are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The browser globals &lt;code&gt;window&lt;/code&gt; &amp;amp; &lt;code&gt;document&lt;/code&gt; are &lt;code&gt;undefined&lt;/code&gt; on the server&lt;/li&gt;
&lt;li&gt;The Node.js File system (&lt;code&gt;fs&lt;/code&gt;) module is &lt;code&gt;undefined&lt;/code&gt; in the browser&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Right off the bat do yourself a favor and create two utility functions to wrap code that should run in only one context:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isServer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚ö†Ô∏è Those methods aren't always necessary. The &lt;code&gt;useEffect&lt;/code&gt; (and &lt;code&gt;useLayoutEffect&lt;/code&gt;) React hooks will &lt;em&gt;only&lt;/em&gt; run in the browser. The &lt;a href="#api-routes"&gt;API Routes&lt;/a&gt; and &lt;a href="https://nextjs.org/docs/basic-features/data-fetching"&gt;Data Fetching methods&lt;/a&gt; will &lt;em&gt;only&lt;/em&gt; run on the server.&lt;/p&gt;

&lt;p&gt;‚ö†Ô∏è Don't leave unused imports; Node.js modules that are imported and unused will throw errors. The reference won't be removed before the code goes to the client and the browser will choke on the Node.js code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-application-is-starbucks"&gt;
  &lt;/a&gt;
  &lt;a href="#your-application-is-starbucks"&gt;Your Application is Starbucks&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Before we go further, let's go back to our metaphor from the beginning. &lt;/p&gt;

&lt;p&gt;Our client (a customer) walks into a Starbucks. Our server (a barista) will be ready to help with whatever the client wants.&lt;/p&gt;

&lt;p&gt;Starbucks knows certain things about what the customer might want. Since there are things they can make ahead, they have a nice selection of canned beverages (like the DOUBLESHOT) that the customer can just grab and go!&lt;/p&gt;

&lt;p&gt;The server has to do almost no work, huzzah ü•≥&lt;/p&gt;

&lt;p&gt;But Starbucks also knows that the customer might be picky (&lt;a href="https://nypost.com/2021/05/03/tiktoks-edward-trend-inspires-viral-starbucks-coffee-order/"&gt;I'm looking at YOU Edward&lt;/a&gt;) so they're ready to make something crazy (the TikTok Special) on the fly.&lt;/p&gt;

&lt;p&gt;The server has to do a lot of work, dang üò∞&lt;/p&gt;

&lt;p&gt;Finally, there might be some things the server can't provide. In this case the client will sneak into the bathroom with their hip flask (don't try this at home, always drink responsibly) and add their own whisky to the coffee.&lt;/p&gt;

&lt;p&gt;The server will do some work, and so does the client üçª&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9KCda0hp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwgsp08ohkby5hl43yqt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9KCda0hp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwgsp08ohkby5hl43yqt.jpg" alt="Starbucks drinks: A Doubleshot (as SSG), fancy TikTok special order (as SSR), and coffee with a shot of whisky (as CSR)."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Can you guess who Starbucks is in the scenario above? It's Next.js üòÜ&lt;/p&gt;

&lt;p&gt;The three scenarios above encompass the choices you have when building pages in Next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pages"&gt;
  &lt;/a&gt;
  &lt;a href="#pages"&gt;Pages&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Before building any pages it pays to step back and think about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;where does your content come from?&lt;/li&gt;
&lt;li&gt;how often does your content change?&lt;/li&gt;
&lt;li&gt;how much of a page depends on certain content?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Answers to these questions will impact whether you want to implement the page via Static Site Generation (SSG), Server Side Rendering (SSR), or some combination of those mixed with client side rendering (CSR).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SSG&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Grab-and-Go: The fastest choice, &lt;a href="https://nextjs.org/docs/basic-features/data-fetching#getstaticpaths-static-generation"&gt;Static Site Generation&lt;/a&gt; means little to no processing on the server &amp;amp; best for &lt;a href="https://moz.com/learn/seo/what-is-seo"&gt;SEO&lt;/a&gt; &amp;amp; &lt;a href="https://web.dev/vitals/"&gt;Core Web Vitals&lt;/a&gt;. The server only has to return pre-built, static content.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Statically generated pages are still reactive: Next.js will &lt;a href="https://reactjs.org/docs/react-dom.html#hydrate"&gt;hydrate&lt;/a&gt; your application client-side to give it full interactivity." - &lt;a href="https://nextjs.org/docs/advanced-features/automatic-static-optimization"&gt;Next.js Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Use this option with content that doesn't change frequently (or ever). Blogs, marketing sites, policy documents, and FAQs all fall more or less in this category.&lt;/p&gt;

&lt;p&gt;This can get cumbersome on sites with many (thousands or more) pages, but can be mitigated to some degree with &lt;a href="https://vercel.com/docs/next.js/incremental-static-regeneration#"&gt;incremental static regeneration&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SSR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The TikTok Special: &lt;a href="https://nextjs.org/docs/basic-features/data-fetching#getserversideprops-server-side-rendering"&gt;Server Side Rendering&lt;/a&gt; means rather than serving pre-built pages, the server builds the page when it is requested. The browser still gets static content, but data fetching &amp;amp; processing likely means longer time to &lt;a href="https://web.dev/lcp/"&gt;largest contentful paint&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It's an excellent option for pages that depend on particular input data and where it isn't possible (or feasible) to statically generate all page combinations for given inputs.&lt;/p&gt;

&lt;p&gt;Input data might be something like user details, purchase/order history, weather, time, or traffic.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Hip Flask: &lt;a href="https://nextjs.org/docs/basic-features/data-fetching#fetching-data-on-the-client-side"&gt;Client Side Rendering&lt;/a&gt; can be &lt;em&gt;added&lt;/em&gt; in addition to either of the strategies above. It can serve as a strategy to defer loading &lt;em&gt;some&lt;/em&gt; page content so that &lt;em&gt;most&lt;/em&gt; content can be ready faster via SSG or SSR.&lt;/p&gt;

&lt;p&gt;The deferred content might be frequently updating/real-time data like a stock chart or chatbar, or content with a particularly long load time.&lt;/p&gt;

&lt;p&gt;‚ö†Ô∏è Be mindful that if some content is not readily available there may be impact to SEO and issues with &lt;a href="https://web.dev/cls/"&gt;cumulative layout shift&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;‚ö†Ô∏è Remember that page code may be executed on both the server and client! If you have any sensitive information in environment variables or other stores be careful that it doesn't get sent to the client accidentally.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api-routes"&gt;
  &lt;/a&gt;
  &lt;a href="#api-routes"&gt;API Routes&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Let's extend our metaphor above even further! Consider an espresso maker, a beautiful and complex machine that you &lt;em&gt;definitely&lt;/em&gt; do not want your customers, err I mean clients, touching.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fJlGLaG1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6q68kdvqrll0o344msvw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fJlGLaG1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6q68kdvqrll0o344msvw.jpg" alt="Picture of a commercial espresso machine"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To shield the clients from the complexity of the espresso maker, the client makes a &lt;strong&gt;request&lt;/strong&gt; of the server. The server goes off and deals with all the complicated bits, and after a while the order is ready. Then the server gives a &lt;strong&gt;response&lt;/strong&gt;, "Edward, I have your Venti Caramel Crunch Frappuccino!"&lt;/p&gt;

&lt;p&gt;Until the response arrives, the client is free to doomscroll TikTok looking for cat videos and a new crazy coffee drink.&lt;/p&gt;

&lt;p&gt;Your API Routes in Next.js mirror that interaction. They won't get you coffee, but if you build them right they can get you cat memes.&lt;/p&gt;

&lt;p&gt;‚ö†Ô∏è Remember this is in the server context. You can use sensitive keys, secrets, passwords, and connection strings if required. You could interact with the filesystem, say, to pull in markdown documents for creating content. You could add an ORM like Prisma to interact with a database.&lt;/p&gt;

&lt;p&gt;‚ö†Ô∏è Server-only context extends beyond API Routes. It also includes the Data Fetching methods &lt;code&gt;getServerSideProps&lt;/code&gt;, &lt;code&gt;getStaticProps&lt;/code&gt;, and &lt;code&gt;getStaticPaths&lt;/code&gt;. These methods are more specialized and I won't be going into more detail on them here, but the documentation linked in the &lt;a href="#pages"&gt;pages section&lt;/a&gt; for each of the three types are great resources.&lt;/p&gt;

&lt;p&gt;For reference, an API Route looks something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Do lots of processing...call apis...access database...&lt;/span&gt;

  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Next.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Simple right? üò¨&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Request&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You're probably familiar with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"&gt;fetching data&lt;/a&gt; from APIs from the SPA architecture. Now you're on the API side of that transaction.&lt;/p&gt;

&lt;p&gt;The request, or &lt;code&gt;req&lt;/code&gt; object, will have all kinds of information about the request that the client has made. This includes headers, referrers, browser information.&lt;/p&gt;

&lt;p&gt;In API Routes there is also &lt;a href="https://nextjs.org/docs/api-routes/api-middlewares"&gt;extra data added by Next&lt;/a&gt; which includes objects for &lt;code&gt;cookies&lt;/code&gt;, &lt;code&gt;query&lt;/code&gt;, and &lt;code&gt;body&lt;/code&gt; if that information is present.&lt;/p&gt;

&lt;p&gt;If you're doing &lt;a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete"&gt;CRUD operations&lt;/a&gt; pay especially close attention to the &lt;code&gt;method&lt;/code&gt; the client is using, since &lt;a href="https://stackoverflow.com/q/6203231/1763258"&gt;you'll want to respond differently to different methods&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Response&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The response, or &lt;code&gt;res&lt;/code&gt; sends information back to the client. It's important to always send back a response or the browser request will never finish, drifting endlessly in the wind.&lt;/p&gt;

&lt;p&gt;Similar to the &lt;code&gt;req&lt;/code&gt; object, the &lt;code&gt;res&lt;/code&gt; object in API Routes has &lt;a href="https://nextjs.org/docs/api-routes/response-helpers"&gt;some extra helper methods&lt;/a&gt; added by Next, which make building the response easier than default Node.js &lt;code&gt;http.ServerResponse&lt;/code&gt; functionality. It tripped me up when I saw these helpers used in tutorials but couldn't find them referenced in the Node.js documentation.&lt;/p&gt;

&lt;p&gt;And with the response sent you're all wrapped up and ready to get on with building something new and exciting!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  &lt;a href="#further-reading"&gt;Further Reading&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I hope that this has given you some new insight as you get started with Next.js!&lt;/p&gt;

&lt;p&gt;If you're looking to set up Next.js beyond the basic scaffold, &lt;a href="https://benjaminwfox.com/blog/tech/nextjs-setup-config-testing-linting-absolute-imports"&gt;check on my tutorial on adding tests, linting, and absolute imports&lt;/a&gt; to a Next.js project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#questions-comments"&gt;
  &lt;/a&gt;
  &lt;a href="#questions-comments"&gt;Questions? Comments?&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Follow me on Twitter &lt;a href="https://twitter.com/BenjaminWFox"&gt;@BenjaminWFox&lt;/a&gt; for more tech and leadership content, and reach out with any thoughts or questions!&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>React Project: Newsletter Signup form (using Formik, Netlify Functions &amp; MailChimp)</title>
      <author>James Bubb</author>
      <pubDate>Tue, 15 Jun 2021 11:53:34 +0000</pubDate>
      <link>https://dev.to/codebubb/react-project-newsletter-signup-form-using-formik-netlify-functions-mailchimp-1e38</link>
      <guid>https://dev.to/codebubb/react-project-newsletter-signup-form-using-formik-netlify-functions-mailchimp-1e38</guid>
      <description>&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=mAfR27lUKNQ"&gt;Watch the full tutorial here --&amp;gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So in this React tutorial we'll be taking a look at the Formik forms library for React and seeing how you can use it to create and manage forms quickly and easily within your React projects.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/mAfR27lUKNQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We'll start off by getting the Formik library setup and then creating some simple inputs that the user can enter data into and we'll see how Formik handles all of the state management and form submission for us automatically.&lt;/p&gt;

&lt;p&gt;Once we've got a basic form setup with Formik, we'll add a custom React label component and then wire up some validation to the form.  We'll do this using the Yup library with our React form and you'll see it's really simple to create a Yup schema and then apply this to the Formik form. In fact, Yup and Formik work really well together.&lt;/p&gt;

&lt;p&gt;With our validation in place we'll finish up the tutorial by creating a Netlify function to handle our form submission which will essentially pass this data to the email service provider MailChimp.  We'll use the MailChimp API with React to submit the user's details they enter into the form to the MailChimp service.  I'll take you through how to find your own MailChimp list ID and also MailChimp API token and successfully add contacts.&lt;/p&gt;

&lt;p&gt;So I hope you enjoy this React Project tutorial from Junior Developer Central!&lt;/p&gt;

</description>
      <category>react</category>
      <category>netlify</category>
      <category>mailchimp</category>
    </item>
    <item>
      <title>Side Projects Ideas To Keep Learning</title>
      <author>Pavel Pol√≠vka</author>
      <pubDate>Tue, 15 Jun 2021 11:42:40 +0000</pubDate>
      <link>https://dev.to/pavel_polivka/side-projects-ideas-to-keep-learning-5cf</link>
      <guid>https://dev.to/pavel_polivka/side-projects-ideas-to-keep-learning-5cf</guid>
      <description>&lt;p&gt;Recently I wrote an &lt;a href="https://ppolivka.com/posts/how-to-keep-learning-as-a-developer"&gt;article&lt;/a&gt; about how to keep learning as a developer that highlighted side projects as one of the biggest helpers to keep learning new stuff. In this article, I want to present few side project ideas that you can try to do. &lt;/p&gt;

&lt;p&gt;Most of these projects I tried to implement in the past or planning to do in the future. I mostly work as a backend Java developer so my side projects are trying to be anything that that. For each project, I will try to provide as many details as possible to get you started. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#temperature-monitor"&gt;
  &lt;/a&gt;
  Temperature monitor
&lt;/h2&gt;

&lt;p&gt;I am obsessed with data and its visualization. This is one of those I did already and loved every second of it. This side project has few parts in it. &lt;/p&gt;

&lt;p&gt;First thing is to have an actual sensor that would measure temperature and store the data somewhere. I used Arduino for this. With WiFi addon and temperature sensor. Arduino is super cheap and you can buy a lot of it on Aliexpress/Amazon/wherever you do your electronics shopping. You can use Raspberry Pi or any other board. The goal is to learn how to program it. The bonus objective here can be to design and 3D print a nice case for your sensor. &lt;/p&gt;

&lt;p&gt;The second part is the backend. You can go and create your REST API for this (if this is something you need to improve). As I already mentioned I wanted to sidestep the backend so I decided to use a third-party service called &lt;a href="https://thingspeak.com/"&gt;ThingSpeak&lt;/a&gt;. It's a super easy-to-use, free for non-commercial use platform that gives you an HTTP endpoint to where you can send your data. Its primary use is in the applications like this so they even have nice libraries to be used on platforms such as Arduino.&lt;/p&gt;

&lt;p&gt;Third and the last component to this is a frontend. You need to fetch your data and display it. You can display current temperature, average temperature, a graph of the evolving temperature. There are endless options. When I did this it was the first time I used React/Flux and I got most of the concepts of React from this. And this was in 2015. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alliexpress-twitter-bot"&gt;
  &lt;/a&gt;
  Alliexpress Twitter bot
&lt;/h2&gt;

&lt;p&gt;This is a fun small project. I created a bot that goes to Aliexpress, finds a completely random item under one dollar and tweets link to it. Why? So that I learned about Twitter API, web scrapping and that I can see the random stuff you can buy there. &lt;/p&gt;

&lt;p&gt;For the web scrapping part, you can go the traditional route of downloading the HTML, parsing it, and find one random thing. Or you can try to do it with something like Selenium. It's up to you and what skills you want to improve. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dampd-map-generator"&gt;
  &lt;/a&gt;
  D&amp;amp;D Map Generator
&lt;/h2&gt;

&lt;p&gt;I played a ton of D&amp;amp;D growing up and as I started to DM I figure out I am quite a lazy DM and wanted to automate a lot of my prep work. There are two types of the map you might need. &lt;/p&gt;

&lt;p&gt;One is a geographical map of your world, where are the rivers, mountains, forests, etc... There is a ton of approaches you can take here and you will learn a lot about data structures, math, etc... To get you started I recommend this awesome &lt;a href="http://www-cs-students.stanford.edu/~amitp/game-programming/polygon-map-generation/"&gt;article&lt;/a&gt; it goes over a lot and has tons of links to other approaches. &lt;/p&gt;

&lt;p&gt;The second map you are going to need is a dungeon map. Those are usually some rooms connected with hallways. It's all full of traps, monsters, and sweet loot. Again there are tons of options you can take. This very nice &lt;a href="https://www.freecodecamp.org/news/how-to-make-your-own-procedural-dungeon-map-generator-using-the-random-walk-algorithm-e0085c8aa9a/"&gt;article&lt;/a&gt; will get you started on the concepts. One of the best ones I ever found is this &lt;a href="https://apps.mysticwaffle.com/dnd-dungeon-generator/"&gt;one&lt;/a&gt; from MysticWaffle. It gives you a very nice looking map, with room descriptions, furniture, traps, items, etc... &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choose-your-own-adventure-game"&gt;
  &lt;/a&gt;
  Choose your own adventure game
&lt;/h2&gt;

&lt;p&gt;As a kid, I loved these. You can do these in any technology. You can do them in a browser, as a console app, mobile app, whatever. You can have fancy UI or just text-based. You can provide a set of accepted commands or do some fancy AI-powered text meaning recognition. It's up to you. This is an open playground.&lt;/p&gt;

&lt;p&gt;As a bonus, you will get to practice your writing. &lt;/p&gt;




&lt;p&gt;If you have different ideas or you want to discuss these, you can contact me on my &lt;a href="https://twitter.com/pavel_polivka"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>java</category>
      <category>sideprojects</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to make coding a habit in 5 actionable steps</title>
      <author>Pasca Vlad</author>
      <pubDate>Tue, 15 Jun 2021 11:05:41 +0000</pubDate>
      <link>https://dev.to/pascavld/how-to-make-coding-a-habit-in-5-actionable-steps-4fco</link>
      <guid>https://dev.to/pascavld/how-to-make-coding-a-habit-in-5-actionable-steps-4fco</guid>
      <description>&lt;p&gt;&lt;em&gt;If you found value in this thread you will most likely enjoy my tweets too so make sure you follow me on &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt;  for more information about web development and how to improve as a developer. This article was first published on my &lt;a href="https://vladpasca.hashnode.dev/"&gt;Blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-be-consistent"&gt;
  &lt;/a&gt;
  1. Be consistent
&lt;/h3&gt;

&lt;p&gt;This is self-explanatory because you can't create a habit without being consistent&lt;/p&gt;

&lt;p&gt;What I recommend doing is trying your best to code for 30 minutes/day at least&lt;/p&gt;

&lt;p&gt;No more, for a few months (1-2)&lt;/p&gt;

&lt;p&gt;Just do something you enjoy (build a project for example)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-document-your-journey-online"&gt;
  &lt;/a&gt;
  2. Document your journey online
&lt;/h3&gt;

&lt;p&gt;This is the thing that helped me the most of form the coding habit&lt;/p&gt;

&lt;p&gt;This will keep you accountable to share something every day and that means that you need to code for a bit every day&lt;/p&gt;

&lt;p&gt;Don't overthink this, just start&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-do-something-you-enjoy"&gt;
  &lt;/a&gt;
  3. Do something you enjoy
&lt;/h3&gt;

&lt;p&gt;To be fair this is a shortcut&lt;/p&gt;

&lt;p&gt;Once I started working on my coding projects (which is something I enjoy) I started to form this habit&lt;/p&gt;

&lt;p&gt;It become something normal to code every day because I loved doing that&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-join-a-community-of-beginner-developers"&gt;
  &lt;/a&gt;
  4. Join a community of beginner developers
&lt;/h3&gt;

&lt;p&gt;If you don't want to document your journey online, you can try this&lt;/p&gt;

&lt;p&gt;Just join a private community of developers on Reddit, Facebook, or anywhere else and share your journey&lt;/p&gt;

&lt;p&gt;Talk with others about what you're learning and all that&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-force-yourself-to-do-it"&gt;
  &lt;/a&gt;
  5. Force yourself to do it
&lt;/h3&gt;

&lt;p&gt;You might need to code first thing in the morning&lt;/p&gt;

&lt;p&gt;Or after you get back from school/work&lt;/p&gt;

&lt;p&gt;That's ok, I was there too&lt;/p&gt;

&lt;p&gt;Just find sometime during the day when you can code for a bit so you can finally form that habit and make everything easier&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Be consistent&lt;/li&gt;
&lt;li&gt;Document your journey online&lt;/li&gt;
&lt;li&gt;Do something you enjoy&lt;/li&gt;
&lt;li&gt;Join a community of beginner developers&lt;/li&gt;
&lt;li&gt;Force yourself to do it&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you liked this thread, make sure that you follow me on Twitter @VladPasca5 for more threads like this one&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The end
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;I hope found this useful and if you did please let me know. If you have any question feel free to DM me on  &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt; .&lt;/em&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>The current state of RuntDeale!</title>
      <author>Calin Baenen</author>
      <pubDate>Tue, 15 Jun 2021 10:36:18 +0000</pubDate>
      <link>https://dev.to/baenencalin/the-current-state-of-runtdeale-4h6o</link>
      <guid>https://dev.to/baenencalin/the-current-state-of-runtdeale-4h6o</guid>
      <description>&lt;p&gt;So... RuntDeale could be further along than I want it to be...&lt;br&gt;
BUT, I am happy with what I got now, considering I've been moving it from language to language constantly (first it started as a web-game in JS, then I made a prototype in Python, then I tried to move to Java, then I eventually, after taking a bit of a break from it, I moved to GoLang... it was working well there, until I found out the &lt;a href="https://github.com/gen2brain/raylib-go"&gt;Go bindings&lt;/a&gt; for &lt;a href="https://www.raylib.com/"&gt;Raylib&lt;/a&gt; were broken... so then I moved to C, but that was just beyond my understanding, so... FINALLY, I ended up with C++).&lt;/p&gt;

&lt;p&gt;Wow, that was a lot (in the thought portion).&lt;br&gt;
For the Go version, I've put up two gamedev bug logs on &lt;a href="https://www.youtube.com/channel/UCSwxv-A5IL6gTswguxGW0lg"&gt;my YouTube channel&lt;/a&gt;.&lt;br&gt;
For the C++ version, I recently released a video showing that the C (not C++) bindings for Raylib work perfectly fine, and I'm happy to be using them in my game.&lt;br&gt;
The video can be found &lt;a href="https://www.youtube.com/watch?v=1y28YL6juSo"&gt;here (RuntDeale C++ game demo (ver 0.0.0) - Sprites + Audio.)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The thumbnail for the video also includes a watermark for the game that I made recently.&lt;br&gt;
The watermark, and the Tweet I put it in can be found &lt;a href="https://twitter.com/BaenenCalin/status/1397502021725532161"&gt;here&lt;/a&gt;.&lt;br&gt;
This is the artwork that the watermark rests on-top of:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x24LA279--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltltno49rpl1wvb2jjh4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x24LA279--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltltno49rpl1wvb2jjh4.png" alt="Artwork of Rainville from RuntDeale. Rainville finally has a clearing between its storming clouds."&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
On top of all of this, I've been trying to create clever ways to cut down on my "code footprint", since I still want my game's code to be readable (even if no one except me is interested in it), and one clever way I've decided to solve that issue is by making a custom form of Ini for my game's use case.&lt;br&gt;
I'm planning for it to have "synonym keys" (so I don't have to write multiple lines with similar keybindings), mapping features, and other stuff in that vein.&lt;/p&gt;

&lt;p&gt;Anyways, this is getting pretty long, so I'll leave it here.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thanks-for-readingcheers"&gt;
  &lt;/a&gt;
  &lt;center&gt;Thanks for reading!&lt;br&gt;Cheers!&lt;/center&gt;
&lt;/h1&gt;

</description>
      <category>cpp</category>
      <category>gamedev</category>
      <category>watercooler</category>
      <category>raylib</category>
    </item>
    <item>
      <title>Mario in JavaScript using KaboomJS (video)</title>
      <author>Ania Kubow</author>
      <pubDate>Tue, 15 Jun 2021 09:59:27 +0000</pubDate>
      <link>https://dev.to/ania_kubow/mario-in-javascript-using-kaboomjs-video-2b3g</link>
      <guid>https://dev.to/ania_kubow/mario-in-javascript-using-kaboomjs-video-2b3g</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2nucjefSr6I"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this video I show you how to build a Mario in JavaScript using the Kaboom.js library in my code editor of choice. If you want to see the full course on FreeCodeCamp, click here: &lt;a href="https://www.youtube.com/watch?v=4OaHB0JbJDI"&gt;https://www.youtube.com/watch?v=4OaHB0JbJDI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the full course I use a preconfigured environment to code Mario. In this tutorial I create the game from scratch using my code editor of choice. &lt;/p&gt;

&lt;p&gt;Final code here: &lt;a href="https://github.com/kubowania/mario"&gt;https://github.com/kubowania/mario&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Imgur: &lt;a href="https://imgur.com/a/F8Jkryq"&gt;https://imgur.com/a/F8Jkryq&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;‚≠ê In most videos I use Tabnine as my A.I autocompletion tool. You can download it for free here: &lt;a href="http://bit.ly/tabnine-top-tool"&gt;http://bit.ly/tabnine-top-tool&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚≠ê You can get a blockchain domain with my affiliate link here: &lt;a href="http://bit.ly/get-a-crypto-domain"&gt;http://bit.ly/get-a-crypto-domain&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚≠ê If you would like to buy me a coffee, well thank you very much that is mega kind! : &lt;a href="https://www.buymeacoffee.com/aniakubow"&gt;https://www.buymeacoffee.com/aniakubow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚≠ê Sign up for weekly coding tips from my newsletter partnership: &lt;a href="https://bit.ly/JS-tips"&gt;https://bit.ly/JS-tips&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-can-also-find-me-on"&gt;
  &lt;/a&gt;
  You can also find me on:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Twitter: &lt;a href="https://twitter.com/ania_kubow"&gt;https://twitter.com/ania_kubow&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Instagram: &lt;a href="https://instagram.com/aniakubow"&gt;https://instagram.com/aniakubow&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>tutorial</category>
      <category>javascript</category>
      <category>kaboomjs</category>
    </item>
    <item>
      <title>How our team writes React tests and other stuff too
 5 June 2021  8 minute read</title>
      <author>Robert Prib</author>
      <pubDate>Tue, 15 Jun 2021 09:54:40 +0000</pubDate>
      <link>https://dev.to/whassup/how-our-team-writes-react-tests-and-other-stuff-too-5-june-2021-8-minute-read-29c</link>
      <guid>https://dev.to/whassup/how-our-team-writes-react-tests-and-other-stuff-too-5-june-2021-8-minute-read-29c</guid>
      <description>&lt;p&gt;Have you ever worked in a codebase where each test file was different to the next? Different terminology and grouping of test scenarios; different usages of snapshot testing and react-testing-library.&lt;/p&gt;

&lt;p&gt;The effect of this meant wasted time reading a full test file to understand its structure before adding another test case. Creating new tests involved making multiple decisions; should I copy the structure of an existing test or create a new one? Should I use snapshot tests?&lt;/p&gt;

&lt;p&gt;We solved this problem by defining guidelines to follow, that make writing tests that are easy to read and write, and would reduced wasted time on decisions.&lt;/p&gt;

&lt;p&gt;Our guidelines are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Group tests by render and user behaviours&lt;/li&gt;
&lt;li&gt;Use a snapshot test to validate render&lt;/li&gt;
&lt;li&gt;Use GIVEN-WHEN-THEN to describe branching logic&lt;/li&gt;
&lt;li&gt;Don't be afraid to stub child components&lt;/li&gt;
&lt;li&gt;Don't re-test functionality of other components&lt;/li&gt;
&lt;li&gt;Use a single expect statement per test&lt;/li&gt;
&lt;li&gt;Accept unit testing UI components can be difficult&lt;/li&gt;
&lt;li&gt;Try use &lt;code&gt;screen.getByRole&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Isolate complex component logic, and test separately&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For full detail on our approach and each guideline for writing tests see &lt;a href="https://whassup.github.io/blog/article/how-our-team-writes-tests"&gt;https://whassup.github.io/blog/article/how-our-team-writes-tests&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>testing</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Why Should You Learn Python in 2021?</title>
      <author>Le Truong</author>
      <pubDate>Tue, 15 Jun 2021 09:52:53 +0000</pubDate>
      <link>https://dev.to/letruong/why-should-you-learn-python-in-2021-5c9o</link>
      <guid>https://dev.to/letruong/why-should-you-learn-python-in-2021-5c9o</guid>
      <description>&lt;p&gt;Python is one of those programming languages that has exploded in popularity and demand over the last 4-5 years. Whether we discuss the PYPL index, Stack Overflow, or any other platform, the language consistently ranks among the top programming languages.&lt;/p&gt;

&lt;p&gt;However, many people believe that these rankings change frequently and that there should be some compelling and legitimate reasons to learn and get started with Python!&lt;/p&gt;

&lt;p&gt;This is also true ‚Äì rather than focusing exclusively on the popularity and demand of a particular programming language, you should consider its features, learning curve, compatibility with other technologies, and community support, among other things.&lt;/p&gt;

&lt;p&gt;Additionally, it would be best to determine whether the language is relevant and appropriate for your career prospects.&lt;br&gt;&lt;br&gt;Moreover, specifically, when it comes to Python, the language provides numerous compelling reasons to begin using it in the year 2021, whether due to its compatibility with future technologies, extensive library support, ease of learning and versatility, or any other reason.&lt;/p&gt;

&lt;p&gt;In this article, we will discuss seven compelling reasons why you should learn Python in 2021.&lt;/p&gt;

&lt;p&gt;Thus, let us begin:&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;1. Simplicity Is Critical&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;When an individual, mainly a student, considers learning a new programming language, the first thing that comes to mind is that the language should be simple to learn, with no overly complicated syntax or unusual rules.&lt;/p&gt;

&lt;p&gt;Furthermore, without a doubt, Python scores a perfect 100 in this parameter!&lt;/p&gt;

&lt;p&gt;Python has a straightforward syntax, almost identical to that of the English language, making it an ideal language for beginners. The language is comparatively more straightforward to learn due to its simple syntax and improved readability. To print 'Hello World' in Python, for example, the code would be print("Hello World") ‚Äì yes, it is that simple!&lt;/p&gt;

&lt;p&gt;That is perhaps why various schools and colleges prefer the language as the first programming language to teach students. Additionally, you should be aware that Python is a freely available, open-source, high-level programming language.&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;2. Provides Maximum Flexibility and Extensibility&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Python provides much-needed scalability, extensibility, and flexibility. As a cross-platform language, it runs effectively on Windows, Linux, and macOS.&lt;/p&gt;

&lt;p&gt;Additionally, you should be aware that you can do so without difficulty if you wish to execute Python code written for Windows, Mac, or Linux. Python enables developers to perform cross-language operations efficiently and integrates easily with Java,.NET components and C/C++ libraries. Its extremely extensible nature enables it to be effectively extended to other programming languages.&lt;/p&gt;

&lt;p&gt;Additionally, because Python is an interpreted language, unlike Java or C++, you do not need to compile your program before running it. Additionally, it is a dynamically typed language, which means that you are not required to specify the data type when declaring variables. Python is, in fact, a more flexible, portable, and extensible programming language than other programming languages.&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;3. Integration with Almost Every Popular Tech Domain&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
    &lt;li&gt;Are you interested in pursuing a career in the field of Artificial Intelligence and Machine Learning?&lt;/li&gt;
    &lt;li&gt;Are you interested in pursuing a career as a Data Scientist or Data Engineer?&lt;/li&gt;
    &lt;li&gt;Are you interested in pursuing a career in Web Development or Game Development?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Regardless of the trending domain in which you wish to gain expertise or establish a career, the likelihood is that you will require Python along the way. Big Data, Cloud Computing, AI &amp;amp; Machine Learning, and Data Science are just a few technologies that heavily rely on Python.&lt;/p&gt;

&lt;p&gt;According to reports, most tech professionals believe Python is the best language for Artificial Intelligence, Machine Learning, and Data Science in the modern era. Additionally, you can use Python to develop web applications, web scraping, embedded systems, and so on.&lt;/p&gt;

&lt;p&gt;These technologies rely on Python as a tool for various reasons, including its robustness, extensive library, increased scalability, and strong community support.&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;4. Provides You with a Vast Library and Framework Collection&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Now for one of Python's significant advantages ‚Äì a vast collection of libraries and frameworks. The language provides hundreds of well-known libraries and frameworks for Machine Learning, Data Science, Cloud Computing, and Web Development, among other things.&lt;/p&gt;

&lt;p&gt;It truly helps simplify and expedite the development process by completing the required task with a few lines of code. From the developer's perspective, an extensive standard library enables them to focus on the critical tasks at hand rather than on low-level details. Additionally, it contributes to cost savings during development.&lt;/p&gt;

&lt;p&gt;The following are some of the most popular Python libraries and frameworks:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;NumPy, SciPy, Pandas, PyTorch, and others are available for data science.&lt;/li&gt;
    &lt;li&gt;Scikit-Learn, PyBrain, PyML, and Tensorflow are all examples of machine learning libraries.&lt;/li&gt;
    &lt;li&gt;NLTK, Keras, OpenCV, and others are used in Artificial Intelligence.&lt;/li&gt;
    &lt;li&gt;Django, Pyramid, Flask, and others are used for web development.&lt;/li&gt;
    &lt;li&gt;For network programming, Asyncio, Pulsar, Pyzmq, and others are available.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;strong&gt;5. Scripting and automation are preferred&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Everyone recognizes the importance of automation, and let us assure you that Python is an excellent choice for scripting and automation. The language can be used to automate various routine or repetitive tasks, resulting in increased productivity and efficiency.&lt;/p&gt;

&lt;p&gt;Because Python is an interpreted language, you can write the code in script format, and it will be executed directly. The machine will check for the error during runtime when it reads and interprets your code. After the code has been verified for errors, it can be reused multiple times.&lt;/p&gt;

&lt;p&gt;To make things easier, Python includes a plethora of tools and modules for performing various critical automation tasks such as web scraping, testing, and so on. Selenium Python, Robot framework, PyTest, Beautiful Soup, and Automagica are just a few popular Python libraries and tools for automation.&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;6. Strong Community Support&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;A programming language's growth and evolution are highly dependent on its community support, documentation, and other related parameters. Whether you are a beginner or an experienced programmer, this open-source language provides an extensive and dependable community to assist you with any Python-related issue or concern.&lt;/p&gt;

&lt;p&gt;According to reports, there are more than 8 million Python developers active worldwide. You can join a variety of well-known communities such as Stack Overflow, GitHub, and others to connect with many Python programmers who are always willing to assist beginners.&lt;/p&gt;

&lt;p&gt;Additionally, numerous documents, guides, and learning resources are available on the web that can assist you in quickly getting started and working with Python.&lt;/p&gt;

&lt;p&gt;Perhaps, if you are a beginner or have not yet entered the programming world, you will not consider this massive community supports an enriching feature. However, you will inevitably appreciate this advantage the most once you advance with Python.&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;7. And yes, Python Developers Earn a Comparably Higher Salary!&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Python is one of the most rapidly growing technologies on the planet. As mentioned previously, Python is associated with a variety of future technologies, including the Internet of Things (IoT), artificial intelligence (AI), automation, cloud computing, and big data ‚Äì which is why the demand for Python developers is high in the tech world.&lt;/p&gt;

&lt;p&gt;Their salary is also relatively higher than that of other developers. In India, the average salary for a mid-level Python developer is approximately 10-16 LPA. Additionally, if you acquire additional relevant skills such as Data Science, Machine Learning, and so on in addition to Python, your salary may increase.&lt;/p&gt;

&lt;p&gt;Almost every major information technology company, whether Google, Facebook, Amazon, Uber, or another, uses Python for their respective platform or product. Additionally, it indicates that Python's future is bright, and career opportunities for Python professionals will grow significantly in the coming years.&lt;/p&gt;

&lt;p&gt;Thus, these are some of the primary reasons (or, you could say, advantages) why you should consider learning Python in the year 2021. From Web Developer to Data Scientist to Machine Learning Professional ‚Äì once you have mastered the language, you will have many career options.&lt;/p&gt;

&lt;p&gt;Thus, from now on, stop looking for reasons to learn Python and instead begin learning immediately and making the most of it...!!&lt;/p&gt;

</description>
      <category>python</category>
    </item>
  </channel>
</rss>
