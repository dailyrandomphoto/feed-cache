<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Guide to Callbacks &amp; Higher-Order Functions in JavaScript.</title>
      <author>Blessing Hirwa</author>
      <pubDate>Tue, 27 Apr 2021 16:09:45 +0000</pubDate>
      <link>https://dev.to/blessingartcreator/guide-to-callbacks-higher-order-functions-in-javascript-g98</link>
      <guid>https://dev.to/blessingartcreator/guide-to-callbacks-higher-order-functions-in-javascript-g98</guid>
      <description>&lt;p&gt;&lt;strong&gt;Callbacks and Higher Order functions&lt;/strong&gt; are some of the most misunderstood concepts in JavaScript. During this post, we will become familiar with them to write pro-level code as JavaScript engineers.&lt;/p&gt;

&lt;p&gt;Before continuing, let's ask ourselves a question.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why do we even have functions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s see why…&lt;/p&gt;

&lt;p&gt;Create a function 10 squared&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Takes no input&lt;/li&gt;
&lt;li&gt;Returns 10*10&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;tenSquared&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;tenSquared&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;tenSquared&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#what-about-a-9-squared-function"&gt;
  &lt;/a&gt;
  What about a 9 squared function?
&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;nineSquared&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;nineSquared&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;nineSquared&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 81&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;And an 8 squared function? 125 squared?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What principle are we breaking? &lt;strong&gt;DRY (Don’t Repeat Yourself )&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#we-can-generalize-the-function-to-make-it-reusable"&gt;
  &lt;/a&gt;
  👉 We can generalize the function to make it reusable.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;squareNum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;squareNum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 100&lt;/span&gt;
&lt;span class="nx"&gt;squareNum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 81&lt;/span&gt;
&lt;span class="nx"&gt;squareNum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 64&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Generalizing functions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Parameters (placeholders)&lt;/code&gt; mean we don’t need to decide what data to run our functionality on until we run the function. Then provide an actual value &lt;code&gt;(argument)&lt;/code&gt; when we run the function. &lt;code&gt;Higher-order functions&lt;/code&gt; follow this same principle, we may not want to decide exactly what some of our functionality is until we run our function.&lt;/p&gt;

&lt;p&gt;Now suppose we have a function &lt;code&gt;copyArrayAndMultiplyBy2&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;copyArrayAndMultiplyBy2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;copyArrayAndMultiplyBy2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What if want to copy the array and divide it by 2?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;copyArrayAndDivideBy2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;copyArrayAndDivideBy2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or add 3?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;copyArrayAndAdd3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;copyArrayAndAdd3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What principle are we breaking? &lt;strong&gt;DRY (Don’t Repeat Yourself )&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;👉 We could generalize our function, so we pass in our specific instruction only when we run &lt;code&gt;copyArrayAndManipulate&lt;/code&gt;!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;copyArrayAndManipulate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;instructions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instructions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;multiplyBy2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;copyArrayAndManipulate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;multiplyBy2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-was-this-possible"&gt;
  &lt;/a&gt;
  How was this possible?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Functions in javascript = first-class objects&lt;/code&gt;. In addition to this, let's highlight some of the other features of functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They can co-exist with and can be treated like any other javascript object&lt;/li&gt;
&lt;li&gt;Assigned to variables and properties of other objects&lt;/li&gt;
&lt;li&gt;Passed as arguments into functions&lt;/li&gt;
&lt;li&gt;Returned as values from functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider this piece of code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;copyArrayAndManipulate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;instructions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instructions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;multiplyBy2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;copyArrayAndManipulate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;multiplyBy2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#which-is-our-higher-order-function-%E2%98%9D"&gt;
  &lt;/a&gt;
  Which is our Higher Order Function ☝?
&lt;/h4&gt;

&lt;p&gt;The outer function that takes in a function is our higher-order.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#which-is-our-callback-function"&gt;
  &lt;/a&gt;
  Which is our Callback Function
&lt;/h4&gt;

&lt;p&gt;The function we insert is our callback function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Higher-order functions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Takes in a function or passes out a function. Just a term to describe these functions - &lt;code&gt;any function that does it we call that -&lt;/code&gt; but there's nothing different about them inherently.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why do we need to master these two concepts&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Callbacks and Higher-Order Functions simplify our code &lt;br&gt;
and keep it &lt;code&gt;DRY&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Declarative readable code:&lt;/strong&gt; Map, filter, reduce - the most readable way to write code to work with data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Codesmith &amp;amp; pro interview prep:&lt;/strong&gt; One of the most popular topics to test in an interview both for &lt;a href="https://codesmith.io/"&gt;Codesmith&lt;/a&gt; and other mid/senior-level job interviews.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Asynchronous JavaScript:&lt;/strong&gt; Callbacks are a core aspect of &lt;code&gt;async JavaScript&lt;/code&gt;, and are under the hood of &lt;code&gt;promises&lt;/code&gt;, &lt;code&gt;async/await&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;br&gt;
What's more, there we have it. If you made it here thank you for reading! I hope this post will help you get started with writing pro-level JavaScript codes.&lt;/p&gt;

&lt;p&gt;👋&lt;strong&gt;Let's be friends!&lt;/strong&gt; Follow me on &lt;a href="https://twitter.com/graphicblessing"&gt;Twitter&lt;/a&gt; and &lt;a href="https://instagram.com/blessingartcreator"&gt;instagram&lt;/a&gt; for more related content. Don't forget to follow me also here on &lt;a href="https://dev.to/blessingartcreator"&gt;Dev&lt;/a&gt; as well to get updated for new content.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Why Community is Important for Developers</title>
      <author>Ceora Ford</author>
      <pubDate>Tue, 27 Apr 2021 15:54:36 +0000</pubDate>
      <link>https://dev.to/ceeoreo/why-community-is-important-for-developers-25g8</link>
      <guid>https://dev.to/ceeoreo/why-community-is-important-for-developers-25g8</guid>
      <description>&lt;p&gt;There are a plethora of developer communities out there. Countless times, I've been encouraged to join some online or in-person community for developers and I'm sure you have too. After listening to the  &lt;a href="https://codesandbox.io/podcasts/version-one/Vercel-Guillermo-Rauch"&gt;episode 2 of the Version One podcast&lt;/a&gt;, I was reminded of the value of community.&lt;/p&gt;

&lt;p&gt;The second episode of the Version One podcast features guest &lt;a href="https://twitter.com/rauchg"&gt;Guillermo Rauch&lt;/a&gt;, CEO and Co-founder of &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt;. When discussing how he started coding, Guillermo mentioned an online forum which played a huge part in his growth as a developer. As Guillermo's experience demonstrates, community can be a huge catalyst for growth as a developer. By why is that the case? And where can you find said communities? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-you-need-to-invest-in-community"&gt;
  &lt;/a&gt;
  Why you need to invest in community
&lt;/h2&gt;

&lt;p&gt;Coding isn't always an easy task. There are multiple hurdles that many people confront along their developer journey. Running into difficult errors, dealing with difficult coding concepts, job searching, career growth- the list could go on forever. It becomes so much easier to deal with these things when you have a helpful community to lean on.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I started finding different communities that were helping me figure things out. And that also, whenever I would figure something out, I would contribute back, too.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When you find a community that fits your interests and career goals, you'll have a place where you can turn to ask questions and get advice from developers all over the world. You can also share your own insights and help others along the way. As time goes on, your developer network will continue to grow and you'll become a better developer. This is why it's so important to invest in community, no matter what skill level you're at.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-find-the-right-community-for-you"&gt;
  &lt;/a&gt;
  Where to find the right community for you
&lt;/h2&gt;

&lt;p&gt;Now that you know community is so valuable, it's time to actually find one for yourself. You don't need to be part of every single one you come across. That can easily become overwhelming. Focus on actively participating in just a few. &lt;/p&gt;

&lt;p&gt;If it's safe to do so in the area where you live, you can look around for local meetups and communities. Check websites like &lt;a href="https://www.meetup.com/"&gt;Meetup&lt;/a&gt; and search for groups using keywords that are related to whatever language or technology you would like to be more involved with.&lt;/p&gt;

&lt;p&gt;Thankfully, we have social media and platforms like Discord and Slack which enable remote community building. Twitter is a developer hot spot. It's a great place to go to share what you're working on and learning and to ask and answer questions. It's good to know, though, that Twitter isn't always a safe space. But it still holds a ton of value. &lt;/p&gt;

&lt;p&gt;To find Discord and Slack communities, search "[insert language or tech stack of interest] communities on Discord/Slack" on Google. It also helps to ask developers you already know for recommendations. When you find a community that matches your interests, keep an eye out for active moderators and a Code of Conduct. Both of these things ensure the safety of community members. Of course, this isn't absolute and people with bad intentions may still slip in. But having moderators and a Code of Conduct that is heavily promoted means that your online safety is being prioritized and that's very important.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;It's clear that being part of a community can do wonders for your growth as a developer. Searching for, joining, and participating in developer communities online or in-person (if it's safe) will be well worth the effort and time you invest. Guillermo's podcast episode reminded me of this. There's much more to learn from his journey to becoming a startup founder. So make sure to give his Version One interview a listen.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/3lIxK1Qbi5g0Z5ZBmOCic4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>community</category>
      <category>career</category>
      <category>coding</category>
    </item>
    <item>
      <title>Rendering components conditionally with Phoenix LiveView</title>
      <author>Santiago Cardona</author>
      <pubDate>Tue, 27 Apr 2021 15:34:18 +0000</pubDate>
      <link>https://dev.to/santiagocardo/rendering-components-conditionally-with-phoenix-liveview-4p6j</link>
      <guid>https://dev.to/santiagocardo/rendering-components-conditionally-with-phoenix-liveview-4p6j</guid>
      <description>&lt;p&gt;When we come across a view that has many HTML elements, we usually want to separate them into their own components to have a better organization of the code to make it easier to understand and maintain, as well as decouple large logic into smaller pieces, and why not, re-use these components in another view (very much in the style of React.js mental model).  This can be easily achieved by using &lt;a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveComponent.html"&gt;LiveComponent&lt;/a&gt; de &lt;strong&gt;Phoenix LiveView&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The problem is that many times these components share some logic between them, and many times they depend on each other to know if it should be rendered or not. This is called conditional rendering, and with &lt;strong&gt;Phoenix LiveView&lt;/strong&gt; we can achieve this by handling the conditional logic in the parent &lt;strong&gt;LiveView&lt;/strong&gt;, through the &lt;strong&gt;handle_info&lt;/strong&gt; callback function.&lt;/p&gt;

&lt;p&gt;You can also see this post in Spanish 🇨🇴 &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/santiagocardo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dkPOt6LF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uDvZZEOo--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/616717/4d670ae5-1bc6-4a63-911c-9f3168ea5631.jpeg" alt="santiagocardo image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/santiagocardo/renderizar-componentes-condicionalmente-con-phoenix-liveview-14ih" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Renderizar componentes condicionalmente con Phoenix LiveView&lt;/h2&gt;
      &lt;h3&gt;Santiago Cardona ・ Apr 27 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#elixir&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#liveview&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#phoenix&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#use-case"&gt;
  &lt;/a&gt;
  Use Case
&lt;/h3&gt;

&lt;p&gt;Suppose we have a view for registering a vehicle in a mechanics workshop. This view is composed of two forms, one for the registration of the vehicle owner and one for the registration of the vehicle itself. Each form has its own independent registration view, so we use a &lt;strong&gt;LiveComponent&lt;/strong&gt; for each of these, within which its own business logic is handled independently.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8C1jwc1---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/12a0yx9e9ktraic1tidi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8C1jwc1---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/12a0yx9e9ktraic1tidi.png" alt="live componets"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These views must be rendered independently and in order:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;User registration (&lt;strong&gt;customer_component.ex&lt;/strong&gt;)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YCkdh46D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/apcsxpheptiwq7z43sce.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YCkdh46D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/apcsxpheptiwq7z43sce.png" alt="Register Customer"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vehicle registration (&lt;strong&gt;vehicle_component.ex&lt;/strong&gt;)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ImceAHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ebskxglwjtf0n6xl0t1t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ImceAHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ebskxglwjtf0n6xl0t1t.png" alt="Register Vehicle"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once the user is registered, the user's &lt;em&gt;id&lt;/em&gt; must be passed to the vehicle component, so that we can successfully associate the user with the vehicle when we are registering the vehicle.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-do-we-achieve-this-lets-go-to-the-code"&gt;
  &lt;/a&gt;
  How do we achieve this? Let's go to the code...
&lt;/h3&gt;

&lt;p&gt;The conditional logic is handled in the parent view of the user and vehicle components, in this case, it will be the LiveView &lt;strong&gt;&lt;em&gt;vehicle_live/index.ex&lt;/em&gt;&lt;/strong&gt; and its respective file &lt;strong&gt;&lt;em&gt;vehicle_live/index.html.leex&lt;/em&gt;&lt;/strong&gt; where the HTML elements to be rendered are located.&lt;/p&gt;

&lt;p&gt;In the file &lt;strong&gt;&lt;em&gt;vehicle_live/index.ex&lt;/em&gt;&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;CarWorkshopWeb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;VehicleLive&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Index&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;CarWorkshopWeb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:live_view&lt;/span&gt;

  &lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="no"&gt;CarWorkshop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;Vehicles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Vehicle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Accounts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nv"&gt;@impl&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;customer:&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="ss"&gt;view_to_show:&lt;/span&gt; &lt;span class="ss"&gt;:customer_view&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="nv"&gt;@impl&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;handle_params&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:noreply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;apply_action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assigns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;live_action&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;apply_action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;socket&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:page_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Register Vehicle"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:vehicle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;Vehicle&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:customer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="nv"&gt;@impl&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;handle_info&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:customer_registered&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;view_to_show&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:noreply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;customer:&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;view_to_show:&lt;/span&gt; &lt;span class="n"&gt;view_to_show&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the &lt;strong&gt;mount&lt;/strong&gt; function, we assign to the socket the property &lt;em&gt;view_to_show&lt;/em&gt; by means of which we will know the component to render in &lt;strong&gt;&lt;em&gt;vehicle_live/index.html.leex&lt;/em&gt;&lt;/strong&gt;. We give it a value of &lt;em&gt;:customer_view&lt;/em&gt;, making the first view to be rendered the one of the user component.&lt;/p&gt;

&lt;p&gt;The callback function &lt;strong&gt;handle_info&lt;/strong&gt; will be in charge of changing the &lt;em&gt;view_to_show&lt;/em&gt; property of the socket, and thus, the conditional rendering of each component will be performed according to the arguments we pass to this function.&lt;/p&gt;

&lt;p&gt;In the file &lt;strong&gt;&lt;em&gt;vehicle_live/index.html.leex&lt;/em&gt;&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;@view_to_show&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:vehicle_view&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;live_component&lt;/span&gt; &lt;span class="nv"&gt;@socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;CarWorkshopWeb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;VehicleComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;id:&lt;/span&gt; &lt;span class="nv"&gt;@vehicle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;title:&lt;/span&gt; &lt;span class="s2"&gt;"Register Vehicle"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;action:&lt;/span&gt; &lt;span class="nv"&gt;@live_action&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;vehicle:&lt;/span&gt; &lt;span class="nv"&gt;@vehicle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;customer_id:&lt;/span&gt; &lt;span class="nv"&gt;@customer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
  &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;live_component&lt;/span&gt; &lt;span class="nv"&gt;@socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;CarWorkshopWeb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;CustomerComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;id:&lt;/span&gt; &lt;span class="nv"&gt;@customer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;title:&lt;/span&gt; &lt;span class="s2"&gt;"Register Customer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;action:&lt;/span&gt; &lt;span class="nv"&gt;@live_action&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;customer:&lt;/span&gt; &lt;span class="nv"&gt;@customer&lt;/span&gt;
  &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;With this, we already have the user view rendered. The only thing missing would be to call the callback &lt;strong&gt;handle_info&lt;/strong&gt; from the user component once all our business logic has been executed, and then allow the rendering of the vehicle view.&lt;/p&gt;

&lt;p&gt;Suppose we want to render the vehicle component immediately after successful user registration. For this, in the file &lt;strong&gt;&lt;em&gt;customer_component.ex&lt;/em&gt;&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="nv"&gt;@impl&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;handle_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"save"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="s2"&gt;"customer"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;customer_params&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="no"&gt;Accounts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_customer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:customer_registered&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:vehicle_view&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:noreply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;Ecto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Changeset&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:noreply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;changeset:&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Using the &lt;strong&gt;send()&lt;/strong&gt; function we make the parent LiveView execute the &lt;strong&gt;handle_info&lt;/strong&gt; callback that satisfies the &lt;em&gt;{:customer_registered, customer, view_to_show}&lt;/em&gt; parameter contract. From which we will be able to know the identifier of the &lt;strong&gt;handle_info&lt;/strong&gt; to execute (&lt;em&gt;:customer_registered&lt;/em&gt;), the newly created user (&lt;em&gt;customer&lt;/em&gt;), and the view to render (&lt;em&gt;:vehicle_view&lt;/em&gt;).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#thats-it-we-have-a-conditional-rendering-of-components"&gt;
  &lt;/a&gt;
  That's it, we have a conditional rendering of components!
&lt;/h3&gt;



&lt;p&gt;To see the full implementation you can visit the repo:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/santiagocardo80"&gt;
        santiagocardo80
      &lt;/a&gt; / &lt;a href="https://github.com/santiagocardo80/car-workshop"&gt;
        car-workshop
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Car Workshop Managment Web App
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
CarWorkshop&lt;/h1&gt;
&lt;p&gt;To start your Phoenix server:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install dependencies with &lt;code&gt;mix deps.get&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Create and migrate your database with &lt;code&gt;mix ecto.setup&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Install Node.js dependencies with &lt;code&gt;npm install&lt;/code&gt; inside the &lt;code&gt;assets&lt;/code&gt; directory&lt;/li&gt;
&lt;li&gt;Start Phoenix endpoint with &lt;code&gt;mix phx.server&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now you can visit &lt;a href="http://localhost:4000" rel="nofollow"&gt;&lt;code&gt;localhost:4000&lt;/code&gt;&lt;/a&gt; from your browser.&lt;/p&gt;
&lt;p&gt;Ready to run in production? Please &lt;a href="https://hexdocs.pm/phoenix/deployment.html" rel="nofollow"&gt;check our deployment guides&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Learn more&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Official website: &lt;a href="https://www.phoenixframework.org/" rel="nofollow"&gt;https://www.phoenixframework.org/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Guides: &lt;a href="https://hexdocs.pm/phoenix/overview.html" rel="nofollow"&gt;https://hexdocs.pm/phoenix/overview.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Docs: &lt;a href="https://hexdocs.pm/phoenix" rel="nofollow"&gt;https://hexdocs.pm/phoenix&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Forum: &lt;a href="https://elixirforum.com/c/phoenix-forum" rel="nofollow"&gt;https://elixirforum.com/c/phoenix-forum&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Source: &lt;a href="https://github.com/phoenixframework/phoenix"&gt;https://github.com/phoenixframework/phoenix&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/santiagocardo80/car-workshop"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>elixir</category>
      <category>liveview</category>
      <category>phoenix</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Create a Phone Wallpaper with Visme</title>
      <author>Sarah Bartley</author>
      <pubDate>Tue, 27 Apr 2021 15:24:32 +0000</pubDate>
      <link>https://dev.to/theoriginalbpc/how-to-create-a-phone-wallpaper-with-visme-957</link>
      <guid>https://dev.to/theoriginalbpc/how-to-create-a-phone-wallpaper-with-visme-957</guid>
      <description>&lt;p&gt;&lt;em&gt;Originally published January 12, 2020 on BritishPandaChick Codes. I made tweaks to the original post so it would work for The Practical Dev.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;One of my favorite things to collect is phone wallpapers. Wallpapers are my favorite way to decorate my phone. I love changing the wallpapers for my home and lock screens each month. I often search for new wallpapers on Pinterest.&lt;/p&gt;

&lt;p&gt;Last year, I made updates on my Pinterest profile. During these updates, I made a new board just for all the wallpapers I had saved on my phone. I have a variety of wallpapers on my Pinterest board, but my favorite ones are simple with a positive message on them.&lt;/p&gt;

&lt;p&gt;I find a lot of these wallpapers from The Everygirl website. They release new wallpapers each month. I like to use these wallpapers as my lock screen. When I need a confidence boost or motivation, I just turn on my phone and look at my lock screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://theeverygirl.com/category/culture/tech-backgrounds/"&gt;==&amp;gt; Click here to find tech backgrounds on The Everygirl!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Over the past couple of years, I've thought about making my own phone wallpapers. I've seen many creators and online businesses make their own wallpapers. This got me interested in learning how to create my own wallpapers. However, I hesitated about creating one since I wasn't sure how to make one and I didn't have a design in mind to make.&lt;/p&gt;

&lt;p&gt;When I was working on my post "How to Use Visme to Help Design Projects Stand Out", I was super excited to see that Visme had phone wallpapers as one of the project types. Visme has a big selection of templates creators can use to help them build their very own wallpapers. In today's post, I'm using Visme to create my very own phone wallpaper. I'll walk you through the process I took to create my wallpaper using one of the Visme templates.&lt;/p&gt;

&lt;h2&gt;What is Visme?&lt;/h2&gt;

&lt;p&gt;Visme is an online design tool. They are best known as a tool for creating presentations and infographics, but you can use their platform to create anything you can imagine. They have a huge selection of things you can create.&lt;/p&gt;

&lt;p&gt;Some of the items you can create on  Visme include flyers, scatter plots, and social media graphics. You can also use Visme to publish your survey results in a visual way. You can learn more about these content types on the Visme website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.visme.co/graph-maker/"&gt;==&amp;gt; Click here to learn how to use Visme to make graphs and charts!&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.visme.co/flyer-maker/"&gt;==&amp;gt; Click here to learn how to use Visme to make flyers!&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.visme.co/scatter-plot-maker/"&gt;==&amp;gt; Click here to learn how to make scatter plots with Visme!&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.visme.co/survey-results-report/"&gt;==&amp;gt; Click here to learn how to publish survey results with Visme!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of my favorite things about Visme is the templates. While creators still have the option of just creating whatever they imagine, Visme offers a large selection of pre-made templates to help creators get started. If you would like to learn more about Visme templates, there is a page dedicated just to the templates they offer for all different types of content types. You can see sample templates for all different content items.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.visme.co/templates/"&gt;==&amp;gt; Click here to learn more about Visme's templates!&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Want to learn more?&lt;/h3&gt;

&lt;p&gt;The best place to learn more about Visme is their website. Visme's website has lots of information about their tool and pricing. I definitely visiting the Visme blog on the website. Their blog has lots of great design advice and tips creators can use to make amazing visual content.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.visme.co/"&gt;==&amp;gt; Click here to learn more about Visme!&lt;/a&gt;&lt;br&gt;
&lt;a href="https://visme.co/blog/"&gt;==&amp;gt; Click here to read the Visme blog!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Last year, I published "How to Use Visme to Help You Design Projects Stand Out". This post is a guide on how creators can get started with Visme. You can see a tour of the Visme workspace and how to create a project. In this post, I use Visme to create the blog graphic for the post.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/theoriginalbpc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NpElAxir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--TALdGAPs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/61140/fa4551ac-4fc2-4ca1-884d-325b97b0277b.jpg" alt="theoriginalbpc image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/theoriginalbpc/how-to-use-visme-to-help-your-desing-projects-stand-out-2hj0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Use Visme to Help Your Desing Projects Stand Out&lt;/h2&gt;
      &lt;h3&gt;Sarah Bartley ・ Apr 23 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#visme&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#design&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;Preparing the Workspace&lt;/h2&gt;

&lt;p&gt;First thing I'm going to do is create my project. In the Visme dashboard, I click the create button to make a new project. Next, I pick the project I want to create.&lt;/p&gt;

&lt;p&gt;Phone wallpapers are in web graphics. I click on Web Graphics icon in the black navigation menu. When the sub-menu of all the web graphics projects opens up, I click on the phone wallpaper image. This will open all the phone wallpaper templates Visme has available.&lt;/p&gt;

&lt;p&gt;I am going to use a template to create my phone wallpaper. The amount of templates you have available will depend on what kind of account you have. I am using a premium account so I've got access to all the wallpaper templates Visme has created.&lt;/p&gt;

&lt;p&gt;After looking at all the templates, I decided to go with the template that says "Don't let ANYONE dull your sparkle". I've circled this wallpaper below so you can see what the template looks like before I start to customize it. All I need to do now is double click the template I want and Visme will open the template in the workspace.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cneRtaYm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51141600327_a170682ce6_m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cneRtaYm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51141600327_a170682ce6_m.jpg" alt="Don't let ANYONE dull your Sparkle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If I would like to change the template at any time, I can click the layout option on the left navigation bar in the workspace and pick a new template. Now that my template is in the workspace, I like to name my project so I can find it very easily on the Visme dashboard later. I'm naming this project blog-phone-wallpaper which lets me know what the project is about and who the project is for. Now I'm ready to transform this template into my very own wallpaper.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BgXLvJST--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51141602902_dbaba83d81_m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BgXLvJST--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51141602902_dbaba83d81_m.jpg" alt="Theme opened in Visme workspace"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Updating the Text&lt;/h2&gt;

&lt;p&gt;I'm going to start by changing all the text. My plan is to keep this wallpaper very simple with just a little bit of text and graphics. First thing I'm going to do is switch out template text with the words loyal, brave, and true.&lt;/p&gt;

&lt;p&gt;I double-click on each text item to get a blinking cursor so I can highlight and delete the text in the template. Then I just need to write the text I want. If there is any text I'm not planning on using, I'll just delete it from the wallpaper.&lt;/p&gt;

&lt;p&gt;Once I've changed all the text, I can start playing around with the layout of each text item. I just click and drag them around the canvas to make sure everything is centered just right and in the right places. Next, it is time to start playing with the fonts and font size.&lt;/p&gt;

&lt;p&gt;Before I start playing with the fonts, I am going to add a new font I can use for my wallpaper. Visme allows designers to add fonts to use on projects. In this project, I'm using a free version of Mulan's font I found online.&lt;/p&gt;

&lt;p&gt;If you would like to use this font for any projects, you can download the file below. Just make sure after you download the file you extra the files so you can upload them to Visme.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.dafont.com/mulan.font"&gt;==&amp;gt; Click here to get the Mulan font!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to add my font to Visme, I go back to the dashboard and click My Brand on the black sidebar menu. Inside My Brand, I go to the bottom of the page to the My Fonts section and click the Upload the Fonts button. This will open a window to let me search my computer and add the font I want.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---RvyXl5l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51143389365_4a1ff6f9a8_m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---RvyXl5l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51143389365_4a1ff6f9a8_m.jpg" alt="My Brand in Visme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My font is in my downloads folder so I'll click my extracted font file and press ok. Visme will add my font to the My Fonts section next to the Upload the Fonts button. Once the font is added to My Brand, I can use the preview window to change the text to see how it works with the new fonts I've added.&lt;/p&gt;

&lt;p&gt;You will want to look at the radio buttons are at the bottom of the window. These buttons set the fonts for the header, subheader, and body of my projects. If I no longer want to use this font, I can click the trash can icon in the corner of the window to delete it.&lt;/p&gt;

&lt;p&gt;Once my font is uploaded to Visme, I can now change the font on all the text in my wallpaper. I head back to my project and can start updating all the text with my new font. When I double-click each text item, I just click on the font drop-down menu and will see my new font as one of the options. I just click the font name and my font of my text will change.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3pF6K-XK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51143394395_a8c782c3e5_m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3pF6K-XK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51143394395_a8c782c3e5_m.jpg" alt="Font window in the Visme workspace"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Changing the Graphics&lt;/h2&gt;

&lt;p&gt;The text is finished so it is time to add the graphics. I added two graphics to my wallpaper. One is a lotus flower while the other is a bow and arrow. I found my graphics in the Visme graphics collection.&lt;/p&gt;

&lt;p&gt;Visme has a big library of graphics designers can use for their projects. Many of these graphics designers have available will depend on what kind of account you have. My premium account gives me complete access of all the graphics in their libraries.&lt;/p&gt;

&lt;p&gt;In my project workspace, I click on the graphics I want to change. This will open the graphics icon from the left sidebar menu. I can also click on the icon and pick replace icon to access the menu.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RGLoQYmq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51142505013_5886fd77ca_m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RGLoQYmq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51142505013_5886fd77ca_m.jpg" alt="The replace icon on the menu"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, I search for the icon I am looking for. Visme will then show me icons that match what I'm looking for. I click the icon I want and Visme will change the icon on my canvas to the one I selected.&lt;/p&gt;

&lt;p&gt;Now that my graphics are on the screen, I can fix the size of each icon. I use the selectors in the corner of each graphic to change the size. I can also use the black box underneath the graphics submenu to change the width and height.&lt;/p&gt;

&lt;h2&gt;Adding Colors&lt;/h2&gt;

&lt;p&gt;It is time to start playing with color. This is where I'm going to change the colors for all the elements on my wallpaper. First thing I'm going to change the background.&lt;/p&gt;

&lt;p&gt;I click on the background. This opens a sub-menu at the top of the workspace. I remove the template's background by clicking the trash can icon remove background.&lt;/p&gt;

&lt;p&gt;The background Visme has on the wallpaper will be removed. The sub-menu will change to show only upload background or the color square. I'm going to pick use a background color for my wallpaper.&lt;/p&gt;

&lt;p&gt;In the background sub-menu, I click on the color square next to upload background. A window will open showing tabs for colors, presets, and more palettes. I am going to use a black background for my wallpaper.&lt;/p&gt;

&lt;p&gt;I click on the black color square in the colors tab and the background on my canvas will turn black. Now it is time to change the text color. I double click each of the text items to get a text sub-menu.&lt;/p&gt;

&lt;p&gt;I click on the text color icon on the menu (it is an A with a color line underneath it) to open the color menu. I am going to make my text red on my wallpaper so I just click the red color square. The text color will change to red on the canvas.&lt;/p&gt;

&lt;p&gt;Finally, it is time to start changing the color of the graphics. I click on each of the graphics to get the graphics submenu to open at the top of the workspace. Each graphic will have different color squares designers can customize.&lt;/p&gt;

&lt;p&gt;The arrow graphic only has one color square while the lotus graphic has three color squares. All I need to do for my graphics is click on each color square and pick the colors I want.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;My wallpaper is now finished. After playing around with the position of the text and graphics, I just need to download my wallpaper as a jpg and see how it looks on my phone. I just click the download button in the upper right corner of the workspace and pick what option I want to download.&lt;/p&gt; 

&lt;p&gt;It took me several versions, but below is the final version of my phone wallpaper.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fDppf2d5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51141624147_a757c6a827_m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fDppf2d5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51141624147_a757c6a827_m.jpg" alt="Loyal Brave True iPhone wallpaper"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What projects would you like to see me make with Visme? Are there any Visme features you'd like to see me talk about? Let me know what you'd like to see in the comments and I'll do my best to make it happen.&lt;/p&gt;

</description>
      <category>visme</category>
      <category>design</category>
    </item>
    <item>
      <title>Introduction To JavaScript Promises</title>
      <author>Boyan Iliev</author>
      <pubDate>Tue, 27 Apr 2021 15:23:09 +0000</pubDate>
      <link>https://dev.to/boiliev/introduction-to-javascript-promises-2oed</link>
      <guid>https://dev.to/boiliev/introduction-to-javascript-promises-2oed</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;A Promise is an object representing the eventual completion or failure of an async operation. A promise is a returned object to which you attach callbacks, instead of passing callback into a function. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#-raw-new-promise-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;new Promise&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;In order to make a new Promise you need to write &lt;code&gt;new Promise&lt;/code&gt; and then it will expect you to pass in a function with two arguments which are functions. The first one represents the resolution of this promise and the second one the rejection of this promise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const requestPromise = (url) =&amp;gt; {
    return new Promise((resolve, rejects) =&amp;gt; {
        const delay = Math.floor(Math.random() * (4500)) + 500;
        setTimeout(() =&amp;gt; {
            if(delay &amp;gt; 4000) {
                reject('Connection Timeout :(')
            } else {
                resolve(`Here is your fake data from ${url}`)
            }
        }, delay)
    })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now in order to call the function multiple times with different URLs, we need to use the &lt;code&gt;then&lt;/code&gt; method. The &lt;code&gt;then&lt;/code&gt; method returns data if the async request is returned. But if the operation is failed, we must use the &lt;code&gt;catch&lt;/code&gt; method. This is how it should look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;requestPromise('reddit.com/api/chicken/page1')
    .then(() =&amp;gt; {
        console.log('PAGE1 WORKED!!');
        requestPromise('reddit.com/api/chicken/page2')
            .then(() =&amp;gt; {
                console.log('PAGE2 WORKED!!');
                requestPromise('reddit.com/api/chicken/page3')
                    .then(() =&amp;gt; {
                        console.log('PAGE3 WORKED!!');
                    })
                    .catch(() =&amp;gt; {
                        console.log('PAGE3 ERROR!!');
                    })
                    .catch(() =&amp;gt; {
                        console.log('PAGE2 ERROR!!');
                    })
            })
            .catch(() =&amp;gt; {
                console.log('PAGE1 ERROR!!');
            })
    })  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can notice this is very long and repetitive. We can make it shorter and cleaner by using only one &lt;code&gt;catch&lt;/code&gt;.  In order for this to work, we need to return a promise from within our callback.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;requestPromise('reddit.com/api/chicken/page1')
    .then(() =&amp;gt; {
      console.log('PAGE1 WORKED!!');
      return requestPromise('reddit.com/api/chicken/page2')
    })
    .then(() =&amp;gt; {
    console.log('PAGE2 WORKED!!');
    return requestPromise('reddit.com/api/chicken/page3')
    })
    .then(() =&amp;gt; {
        console.log('PAGE3 WORKED!!');
    })
    .catch(() =&amp;gt; {
        console.log('REQUEST FAILED!');
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Promises are resolved and rejected with values.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;requestPromise('reddit.com/api/chicken/page1')
    .then((data) =&amp;gt; {
      console.log('PAGE1 WORKED!!');
        console.log(data);           
      return requestPromise('reddit.com/api/chicken/page2')
    })
    .catch((err) =&amp;gt; {
        console.log('REQUEST FAILED!');
        console.log(err);
    })


// IF IT WORKS IT WILL PRINT:
// PAGE 1 WORKED!!
// Here is your fake data from reddit.com/api/chicken/page1

// IF IT DOESN'T WORK:
// REQUEST FAILED!
// Connection Timeout :(
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is coming from a function.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#-raw-async-endraw-functions"&gt;
  &lt;/a&gt;
  &lt;code&gt;async&lt;/code&gt; Functions
&lt;/h1&gt;

&lt;p&gt;A newer and cleaner syntax for working with async code! It's still the same thing as a promise, but it's "prettier". There are two keywords that you need to know.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-async-endraw-keyword"&gt;
  &lt;/a&gt;
  &lt;code&gt;async&lt;/code&gt; keyword
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#1-async-functions-always-return-a-promise"&gt;
  &lt;/a&gt;
  1. Async functions always return a promise
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#2-if-the-function-returns-a-value-the-promise-will-be-resolved-with-that-value"&gt;
  &lt;/a&gt;
  2. If the function returns a value. the promise will be resolved with that value.
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#3-if-the-function-throws-an-exception-the-promise-will-be-rejected"&gt;
  &lt;/a&gt;
  3. If the function throws an exception, the promise will be rejected.
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;async function hello(){   
}
//-&amp;gt; returns a promise even if empty


const sing = async () =&amp;gt; {  
}
// -&amp;gt; we can use async arrow functions
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here are some examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const login = async (username, password) =&amp;gt; {
    if(!username || !password) 
    throw 'Missing Credentials'
    if(password === 'password') 
    return 'Welcome!'
    throw 'Invalid Password'
}

login('demonslayer64')
    .then(msg =&amp;gt; {
        console.log('LOGGED IN!')
        console.log(msg)
    })
    .catch(err =&amp;gt; {
        console.log('ERROR!')
        console.log(err)
    })

//Returns:
ERROR!
Missing Credentials
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;login('demonslayer64', 'slayerdemon46')
    .then(msg =&amp;gt; {
        console.log('LOGGED IN!')
        console.log(msg)
    })
    .catch(err =&amp;gt; {
        console.log('ERROR!')
        console.log(err)
    })

//Returns:
ERROR!
Invalid Password
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;login('demonslayer64', 'password')
    .then(msg =&amp;gt; {
        console.log('LOGGED IN!')
        console.log(msg)
    })
    .catch(err =&amp;gt; {
        console.log('ERROR!')
        console.log(err)
    })

//Returns:
LOGGED IN!
WELCOME!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-await-endraw-keyword"&gt;
  &lt;/a&gt;
  &lt;code&gt;await&lt;/code&gt; keyword
&lt;/h2&gt;

&lt;h5&gt;
  &lt;a href="#1-the-raw-await-endraw-keyword-is-used-inside-of-functions-declared-with-async"&gt;
  &lt;/a&gt;
  1. The &lt;code&gt;await&lt;/code&gt; keyword is used inside of functions declared with async.
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#2-raw-await-endraw-will-pause-the-execution-of-the-function-waiting-for-a-promise-to-be-resolved"&gt;
  &lt;/a&gt;
  2. &lt;code&gt;await&lt;/code&gt; will pause the execution of the function, &lt;strong&gt;waiting for a promise to be resolved&lt;/strong&gt;.
&lt;/h5&gt;

&lt;p&gt;Here is an example with our function from earlier:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;async function makeTwoRequests() {
    let data1 = await requestPromise('/page1');
    console.log(data1);
}

//Returns
&amp;lt;- &amp;gt;Promise {&amp;lt;pending&amp;gt;}
Here is your fake data from /page1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This is pretty much the basics of JavaScript promises. Let me know if this has helped you at all. Any feedback will be greatly appreciated!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>async</category>
      <category>developer</category>
    </item>
    <item>
      <title>Amazing Image Hover Effect Using HTML &amp; CSS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Tue, 27 Apr 2021 15:03:04 +0000</pubDate>
      <link>https://dev.to/nikhil27b/amazing-image-hover-effect-using-html-css-4m76</link>
      <guid>https://dev.to/nikhil27b/amazing-image-hover-effect-using-html-css-4m76</guid>
      <description>&lt;p&gt;Hello, &lt;/p&gt;

&lt;p&gt;Today I created an Amazing Image Hover Effect Using HTML &amp;amp; CSS. when you hover on the image it's changing blur &amp;amp; grayscale also have some cubic-bezier animation in this post. I hope you like this also comments about your thoughts.&lt;/p&gt;

&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to more support me then buy me a &lt;a href="https://www.buymeacoffee.com/nikhilbobade27"&gt;coffee&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/RwKOWPM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Cree una mini librería CSS de sombras </title>
      <author>Franco Andrés</author>
      <pubDate>Tue, 27 Apr 2021 14:38:26 +0000</pubDate>
      <link>https://dev.to/franqsanz/cree-una-mini-libreria-css-de-sombras-1jcn</link>
      <guid>https://dev.to/franqsanz/cree-una-mini-libreria-css-de-sombras-1jcn</guid>
      <description>&lt;p&gt;Me puse a crear un proyecto de fin de semana (que no lo hice en un fin de semana 🙃), se trata de una librería CSS de sombras, se me ocurrió porque tenía curiosidad de como crear una. &lt;br&gt;
Es algo básico pero siempre se aprende algo nuevo al crear proyectos. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#como-funciona"&gt;
  &lt;/a&gt;
  Como funciona
&lt;/h2&gt;

&lt;p&gt;Hay dos formas de usar esta librería:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;De forma tradicional descargando un archivo &lt;code&gt;.css&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Instalando desde npm.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#echemos-un-vistazo-a-lo-tradicional"&gt;
  &lt;/a&gt;
  Echemos un vistazo a lo tradicional:
&lt;/h3&gt;

&lt;p&gt;Enlazamos el archivo como cualquier otro archivo &lt;code&gt;.css&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./shadows.min.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Esta librería solo contiene &lt;strong&gt;clases&lt;/strong&gt;, entonces hacemos lo siguiente:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sw-b-30-b"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!--
  Está clase contiene una sombra tipo blur de 30px posicionada en la línea inferior del elemento,
  el nombre completo sería así: "shadows-blur-30-botton".
--&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para saber todas las clases que existen puedes leer la &lt;a href="https://github.com/Franqsanz/box-shadows.css"&gt;Documentación&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hay tres tipos de sombras:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Efecto Blur.&lt;/li&gt;
&lt;li&gt;Efecto Solid.&lt;/li&gt;
&lt;li&gt;Efecto multi sombra(experimental).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#echemos-un-vistazo-al-paquete-npm"&gt;
  &lt;/a&gt;
  Echemos un vistazo al paquete npm:
&lt;/h3&gt;

&lt;p&gt;Decidí crear un paquete porque me pareció interesante poder usarlo con Styled Components o otro framework de CSS-in-JS.&lt;/p&gt;

&lt;p&gt;Instalamos el paquete:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;box-shadows
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Acá un ejemplo con Styled Components:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;sw_b_20_b&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;box-shadows&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Card&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  width: 200px;
  height: 200px;
  box-shadow: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;sw_b_20_b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusi%C3%B3n"&gt;
  &lt;/a&gt;
  Conclusión
&lt;/h2&gt;

&lt;p&gt;Seguramente existen otros proyectos parecidos y que estén mejor desarrollados, en mi caso solo fue crear algo por solo curiosidad.&lt;br&gt;
De todas formas me gustó hacer esto. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enlaces"&gt;
  &lt;/a&gt;
  Enlaces
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://cssshadows.netlify.app"&gt;Sitio web&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/Franqsanz/box-shadows.css"&gt;Documentación&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/box-shadows"&gt;Paquete npm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Saludos!&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>showdev</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Mendekatkan Diri Kepada Functional Programming di Javascript 🚶</title>
      <author>Muhammad Fauzan</author>
      <pubDate>Tue, 27 Apr 2021 14:14:13 +0000</pubDate>
      <link>https://dev.to/fauzan121002/mendekatkan-diri-kepada-functional-programming-di-javascript-3opk</link>
      <guid>https://dev.to/fauzan121002/mendekatkan-diri-kepada-functional-programming-di-javascript-3opk</guid>
      <description>&lt;p&gt;Bagaimana kalian menulis blok program, dan menggunakan paradigma apa adalah hal yang sangat penting dan vital bagi pemrogram, karena hal tersebut juga dapat menentukan bagaimana sebuah program berjalan dan berkembang selanjutnya. 😋&lt;/p&gt;

&lt;p&gt;Kali ini saya akan membahas Functional Programming, karena terlalu banyak sudah yang membahas OOP dan procedural programming, akhirnya saya berinisiatif menyebarkan faham tentang paradigma pemrograman yang satu ini. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#functional-programming-sunglasses"&gt;
  &lt;/a&gt;
  Functional Programming 😎
&lt;/h1&gt;

&lt;p&gt;Functional Programming adalah ketika kita menulis kumpulan blok program menggunakan functions dan menghindari state dan data yang mutable (mutable berarti kita dapat dengan mudah membuat struktur data daripada memodifikasi yang sudah ada), bukan OOP (objects, classes, bottom-up approach) maupun procedural programming (every program start with function, top-down approach).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-terminology-and-concepts"&gt;
  &lt;/a&gt;
  Basic Terminology and Concepts
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#referential-transparency"&gt;
  &lt;/a&gt;
  Referential transparency
&lt;/h3&gt;

&lt;p&gt;Dalam matematika, Referential transparency adalah properti yang memungkinkan kita mengganti ekspresi dengan nilainya, dan tidak mengubah hasil dari apa pun yang kita lakukan.&lt;/p&gt;

&lt;p&gt;Sebagai contoh menggunakan Javascript :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;menjadi&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;atau (lebih baik) menjadi&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;untuk menghemat waktu eksekusi, ini memanfaatkan fakta bahwa semua ekspresi dan fungsi matematika (menurut definisinya) adalah transparan secara referensial.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#modular-approach"&gt;
  &lt;/a&gt;
  Modular approach
&lt;/h3&gt;

&lt;p&gt;Modular approach adalah proses pengelompokan program komputer menjadi sub-program terpisah menggunakan functions, dimana functions ini bisa digunakan di aplikasi lain atau functions lainnya.&lt;/p&gt;

&lt;p&gt;Desain modular dapat meningkatkan produktivitas. Modul kecil dapat dikodekan dengan lebih cepat dan memiliki peluang lebih besar untuk digunakan kembali (DRY Don'T RepeaT YourselF) yang tentunya mengarah pada pengembangan program yang lebih cepat. Selain itu, modul dapat diuji secara terpisah (unit testing) yang membantu kita mengurangi waktu yang dihabiskan untuk pengujian unit dan debugging.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#maintainability"&gt;
  &lt;/a&gt;
  Maintainability
&lt;/h3&gt;

&lt;p&gt;Maintainability adalah istilah sederhana yang berarti pemrograman FP lebih mudah dipelihara karena kita tidak perlu khawatir secara tidak sengaja mengubah apa pun di luar fungsi yang diberikan.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First-class Function&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First-class Function&lt;/strong&gt; adalah definisi, yang dikaitkan dengan entitas bahasa pemrograman yang tidak memiliki batasan dalam penggunaannya. Oleh karena itu, first-class function dapat muncul di mana saja dalam program.&lt;/p&gt;

&lt;p&gt;di JavaScript first-class function adalah function yang berarti kita dapat menyimpannya dalam variabel, objek, dan array.&lt;/p&gt;

&lt;p&gt;Sebagai contoh menggunakan Javascript :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isOdd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;dengan &lt;strong&gt;higher order function&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isOdd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;oddArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;proxyArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="c1"&gt;//imperative approach&lt;/span&gt;
  &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;isOdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;
     &lt;span class="nx"&gt;proxyArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;proxyArr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oddArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;dengan &lt;code&gt;filter()&lt;/code&gt; (no imperative approach)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isOdd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;oddNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isOdd&lt;/span&gt;&lt;span class="p"&gt;,[]);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oddNumbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#closure"&gt;
  &lt;/a&gt;
  Closure
&lt;/h3&gt;

&lt;p&gt;Closures adalah fungsi dalam yang dapat mengakses variabel dari fungsi induk, bahkan setelah fungsi induk dijalankan.&lt;/p&gt;

&lt;p&gt;Contoh closure ada pada bagian &lt;a href="#maintainability"&gt;&lt;strong&gt;higher order function&lt;/strong&gt;&lt;/a&gt; diatas.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pure-function-accessor-method"&gt;
  &lt;/a&gt;
  Pure Function (Accessor Method)
&lt;/h3&gt;

&lt;p&gt;Pure Function adalah fungsi yang masukannya dideklarasikan sebagai masukan dan tidak ada satupun yang harus disembunyikan. outputnya juga dideklarasikan sebagai output.&lt;/p&gt;

&lt;p&gt;Pure Function bekerja berdasarkan parameternya. Tidak efisien jika tidak me-return apapun. Selain itu, ia menawarkan return yang sama untuk parameter yang diberikan.&lt;/p&gt;

&lt;p&gt;Contoh pure function pada Javascript :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;pure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#impure-function-mutator-method"&gt;
  &lt;/a&gt;
  Impure Function (Mutator Method)
&lt;/h3&gt;

&lt;p&gt;Impure Function adalah kebalikan dari pure function. Fungsi ini memiliki input atau output tersembunyi; itu disebut impure. Impure Function tidak dapat digunakan atau diuji secara terpisah karena memiliki ketergantungan. &lt;/p&gt;

&lt;p&gt;Contoh impure function pada Javascript :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;impure&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
   &lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#function-composition"&gt;
  &lt;/a&gt;
  Function Composition
&lt;/h3&gt;

&lt;p&gt;Function Composition adalah proses menggabungkan 2 fungsi atau lebih untuk membuat yang baru.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shared-state"&gt;
  &lt;/a&gt;
  Shared State
&lt;/h3&gt;

&lt;p&gt;Shared State adalah state (bisa berupa variabel, ataupun objek) yang dibagikan.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Side Effects&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Side Effects&lt;/strong&gt; adalah efek samping setiap perubahan keadaan yang terjadi di luar function yang dipanggil. Tujuan terbesar dari setiap functional programming language adalah meminimalkan efek samping, dengan memisahkannya dari kode perangkat lunak lainnya. Dalam functional programming, sangat penting untuk menghilangkan efek samping dari sisa logika pemrograman.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#kenapa-functional-programming-"&gt;
  &lt;/a&gt;
  Kenapa Functional Programming ?
&lt;/h2&gt;

&lt;p&gt;Secara general, alasan kenapa kita harus memilih functional programming karena paradigma ini powerful, expressive dan fun (contohnya menggunakan fungsi filter dari javascript sebelumnya, itu fun dan expressive, loh kenapa expressive? karena kita sudah tau bagaimana mengoperasikan fungsinya).&lt;/p&gt;

&lt;p&gt;Benefit lainnya :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Memungkinkan kita menghindari masalah dan kesalahan yang membingungkan dalam kode (expressive, fun)&lt;/li&gt;
&lt;li&gt;Lebih mudah menguji dan menjalankan unit testing, dan debugging.  (powerfull, fun)&lt;/li&gt;
&lt;li&gt;Pemrosesan Paralel, dan Concurrency (powerfull)&lt;/li&gt;
&lt;li&gt;Hot code deployment and fault tolerance (powerfull)&lt;/li&gt;
&lt;li&gt;Menawarkan modularitas yang lebih baik dengan kode yang lebih pendek (powerfull, fun, expressive)&lt;/li&gt;
&lt;li&gt;Meningkatkan produktivitas (fun)&lt;/li&gt;
&lt;li&gt;Mendukung Nested Functions (powerfull)&lt;/li&gt;
&lt;li&gt;Functional construction seperti Map , Filter , Reduce , dll.  (fun, expressive)&lt;/li&gt;
&lt;li&gt;Memungkinkan penggunaan Lambda Calculus secara efektif (powerfull)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#tamat"&gt;
  &lt;/a&gt;
  Tamat
&lt;/h2&gt;

&lt;p&gt;Sekian yang bisa saya sampaikan mengenai Functional Programming, Divide and Conquer! 🔥&lt;/p&gt;

&lt;p&gt;Terima kasih buat yang sudah baca ❤️🧠🧠❤️🦄🦄🧠❤️🧠&lt;/p&gt;

&lt;p&gt;Untuk penjelasan mengenai functional programming lainnya , saya sangat merekomendasikan slide di url berikut ini &lt;a href="https://slides.com/thomasomans/functional-programming-forever/fullscreen#/0/0/1"&gt;Functional Programming Forever&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>functional</category>
      <category>indonesia</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Bootstrap 5 Breadcrumbs</title>
      <author>MD Bootstrap</author>
      <pubDate>Tue, 27 Apr 2021 14:12:43 +0000</pubDate>
      <link>https://dev.to/mdbootstrap/bootstrap-5-breadcrumbs-ik8</link>
      <guid>https://dev.to/mdbootstrap/bootstrap-5-breadcrumbs-ik8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-are-bootstrap-breadcrumbs"&gt;
  &lt;/a&gt;
  What are Bootstrap Breadcrumbs?
&lt;/h2&gt;

&lt;p&gt;You can indicate the current page’s location within a navigational hierarchy that automatically adds separators via CSS.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#manual-installation-zip-package"&gt;
  &lt;/a&gt;
  Manual installation (zip package)
&lt;/h4&gt;

&lt;p&gt;To take advantage of  our Bootstrap images component and use them in your project, you first need to install the &lt;a href="https://mdbootstrap.com/docs/standard/getting-started/installation/#section-manual-installation"&gt;MDB 5 Free package&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#mdb-cli"&gt;
  &lt;/a&gt;
  MDB CLI
&lt;/h4&gt;

&lt;p&gt;Watch our &lt;a href="https://mdbootstrap.com/docs/standard/getting-started/quick-start/"&gt;&lt;strong&gt;Quick Start Tutorial&lt;/strong&gt;&lt;/a&gt; to discover and use the full potential of MDB 5 and MDB CLI&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#npm"&gt;
  &lt;/a&gt;
  NPM
&lt;/h4&gt;

&lt;h6&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h6&gt;

&lt;p&gt;Before starting the project make sure to install &lt;a href="https://nodejs.org/en/"&gt;Node LTS (12.x.x recommended)&lt;/a&gt;.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h6&gt;

&lt;p&gt;To install MDB UI KIT in your project easily type the following command in the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;npm i mdb-ui-kit 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#importing-js-modules"&gt;
  &lt;/a&gt;
  Importing JS modules
&lt;/h6&gt;

&lt;p&gt;You can import the entire library or just individual modules:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;import * as mdb from 'mdb-ui-kit';&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;// lib
&lt;span class="gp"&gt;import { Input } from 'mdb-ui-kit';&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;// module 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#importing-css-file"&gt;
  &lt;/a&gt;
  Importing CSS file
&lt;/h6&gt;

&lt;p&gt;To import MDB stylesheet please use the following syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;@import '~mdb-ui-kit/css/mdb.min.css';&lt;/span&gt;&lt;span class="w"&gt; 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#importing-scss-modules"&gt;
  &lt;/a&gt;
  Importing SCSS modules
&lt;/h6&gt;

&lt;p&gt;You can also import individual SCSS modules. To do it properly, we recommend to copy them from the node_modules/mdb-ui-kit/src/scss location directly to your project and import in the same way as CSS files.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#webpack-integration"&gt;
  &lt;/a&gt;
  Webpack integration
&lt;/h6&gt;

&lt;p&gt;You can significantly speed up the process of creating a new project based on Webpack using our &lt;a href="https://github.com/mdbootstrap/mdb-webpack-starter"&gt;Starter&lt;/a&gt;.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#cdn"&gt;
  &lt;/a&gt;
  CDN
&lt;/h4&gt;

&lt;p&gt;Installation via CDN is one of the easiest methods of integrating MDB UI KIT with your project. Just copy the latest compiled JS script tag and CSS link tag from &lt;a href="https://cdnjs.com/libraries/mdb-ui-kit"&gt;cdnjs&lt;/a&gt; to the application.&lt;/p&gt;

&lt;p&gt;Don't forget to add also Font Awesome and Roboto font if you need. Here's an example code:&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;Font&lt;/span&gt; &lt;span class="nt"&gt;Awesome&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt;
  &lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css"&lt;/span&gt;
  &lt;span class="nt"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"stylesheet"&lt;/span&gt;
&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;Google&lt;/span&gt; &lt;span class="nt"&gt;Fonts&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt;
  &lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&amp;amp;display=swap"&lt;/span&gt;
  &lt;span class="nt"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"stylesheet"&lt;/span&gt;
&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;MDB&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt;
  &lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/3.3.0/mdb.min.css"&lt;/span&gt;
  &lt;span class="nt"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"stylesheet"&lt;/span&gt;
&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#js"&gt;
  &lt;/a&gt;
  JS
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="nx"&gt;MDB&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;
  &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text/javascript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/3.3.0/mdb.min.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#customization"&gt;
  &lt;/a&gt;
  Customization
&lt;/h2&gt;

&lt;h6&gt;
  &lt;a href="#basic-example"&gt;
  &lt;/a&gt;
  Basic example
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;nav&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"breadcrumb"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ol&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"breadcrumb"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"breadcrumb-item active"&lt;/span&gt; &lt;span class="na"&gt;aria-current=&lt;/span&gt;&lt;span class="s"&gt;"page"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ol&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;nav&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"breadcrumb"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ol&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"breadcrumb"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"breadcrumb-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"breadcrumb-item active"&lt;/span&gt; &lt;span class="na"&gt;aria-current=&lt;/span&gt;&lt;span class="s"&gt;"page"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Library&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ol&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;nav&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"breadcrumb"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ol&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"breadcrumb"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"breadcrumb-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"breadcrumb-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Library&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"breadcrumb-item active"&lt;/span&gt; &lt;span class="na"&gt;aria-current=&lt;/span&gt;&lt;span class="s"&gt;"page"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Data&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ol&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h6&gt;
  &lt;a href="#changing-the-separator"&gt;
  &lt;/a&gt;
  Changing the separator
&lt;/h6&gt;

&lt;p&gt;Separators are automatically added in CSS through &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;content&lt;/code&gt;. They can be changed by changing &lt;code&gt;$breadcrumb-divider&lt;/code&gt;. The &lt;a href="https://sass-lang.com/documentation/modules/string#quote"&gt;quote&lt;/a&gt; function is needed to generate the quotes around a string, so if you want &lt;code&gt;&amp;gt;&lt;/code&gt; as separator, you can use this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nv"&gt;$breadcrumb-divider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#you-can-see-more-customization-examples-on-the-breadcrumbs-documentation-page"&gt;
  &lt;/a&gt;
  You can see more customization examples on the &lt;a href="https://mdbootstrap.com/docs/standard/navigation/breadcrumb/"&gt;📄 Breadcrumbs documentation page&lt;/a&gt;
&lt;/h4&gt;




&lt;h2&gt;
  &lt;a href="#crucial-resources"&gt;
  &lt;/a&gt;
  Crucial Resources
&lt;/h2&gt;

&lt;p&gt;Here are the resources that we have prepared to help you work with this component:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Read &lt;a href="https://mdbootstrap.com/docs/standard/navigation/breadcrumb/"&gt;📄 Breadcrumbs documentation page&lt;/a&gt; &amp;lt;-- start here&lt;/li&gt;
&lt;li&gt;In to get the most out of your project, you should also get acquainted with other Content &amp;amp; style options related to Images. See the section below to find the list of them.&lt;/li&gt;
&lt;li&gt;You can use predesigned Content &amp;amp; style elements in &lt;a href="https://mdbootstrap.com/freebies/"&gt;📥 Starter Bootstrap 5 templates&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Templates are a part of &lt;a href="https://mdbootstrap.com/docs/standard/"&gt;📦 Free UI Kit for Bootstrap 5&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;After finishing the project you can publish it with CLI in order to receive &lt;a href="https://mdbootstrap.com/docs/standard/cli/"&gt;💽 Free hosting (beta)&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#related-content-and-styles-options-amp-features"&gt;
  &lt;/a&gt;
  Related Content and Styles options &amp;amp; features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/navigation/footer/"&gt;Footer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/navigation/headers/"&gt;Headers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/navigation/navbar/"&gt;Navbar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/navigation/pagination/"&gt;Pagination&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/navigation/pills/"&gt;Pills&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/navigation/scrollspy/"&gt;Scrollspy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/navigation/sidenav/"&gt;Sidenav&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/navigation/tabs/"&gt;Tabs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#learn-bootstrap-5-in-15h"&gt;
  &lt;/a&gt;
  Learn Bootstrap 5 in 1.5H
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/c9B4TPnak1A"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#additional-resources"&gt;
  &lt;/a&gt;
  Additional resources
&lt;/h2&gt;

&lt;p&gt;Learn web development with our &lt;strong&gt;learning roadmap&lt;/strong&gt;:&lt;br&gt;
&lt;strong&gt;&lt;a href="https://mdbootstrap.com/docs/standard/getting-started/"&gt;🎓 Start Learning&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Join our mailing list &amp;amp; receive &lt;strong&gt;exclusive resources&lt;/strong&gt; for developers&lt;br&gt;
&lt;strong&gt;&lt;a href="https://mdbootstrap.com/newsletter/"&gt;🎁 Get gifts&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Join our private FB group for &lt;strong&gt;inspiration &amp;amp; community experience&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://www.facebook.com/groups/682245759188413"&gt;👨‍👩‍👧‍👦 Ask to join&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Support creation of open-source packages&lt;/strong&gt; with a STAR on GitHub&lt;br&gt;
&lt;a href="https://github.com/mdbootstrap/mdb-ui-kit/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KKY5TtAR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/github/stars/mdbootstrap/mdb-ui-kit%3Flabel%3DStar%2520now%26style%3Dsocial" alt="GitHub Stars"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>bootstrap</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>How FirstPort manage GitHub, using code stored in GitHub</title>
      <author>Andrew</author>
      <pubDate>Tue, 27 Apr 2021 14:08:07 +0000</pubDate>
      <link>https://dev.to/ghostinthewire5/how-firstport-manage-github-using-code-stored-in-github-41f6</link>
      <guid>https://dev.to/ghostinthewire5/how-firstport-manage-github-using-code-stored-in-github-41f6</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p_dRf8VD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1zrev604hudv5pqgi73.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p_dRf8VD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1zrev604hudv5pqgi73.png" alt="FirstPort GitHub"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;As many of you will already know, I recently started an exciting new role as Head of Technology at &lt;a href="https://www.firstport.co.uk/"&gt;FirstPort&lt;/a&gt;, having previously been at a great consultancy called &lt;a href="https://www.devopsgroup.com/blog/andrew-urwin-lead-azure-engineer-and-microsoft-mvp/"&gt;DevOpsGroup&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A key part of my role is delivering FirstPort’s vision of ‘People First’ technology. To do this, it is imperative that I select the right technology to underpin the delivery of services that help make customers’ lives easier.&lt;/p&gt;

&lt;p&gt;Today I want to talk about my selection of &lt;a href="https://github.com/enterprise"&gt;GitHub Enterprise&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;GitHub is a best-in-breed, &lt;a href="https://github.com/features/security"&gt;secure&lt;/a&gt;, collaborative, code hosting platform with built-in &lt;a href="https://github.com/features/actions"&gt;CI/CD&lt;/a&gt; capabilities with over 56 million users. &lt;/p&gt;

&lt;p&gt;Many organisations use it, and all of them have to manage users, repositories, branch rules, and much more. Standardising all of this is quite challenging and involves creating things like CLI tools, scripts, and other ways to try to automate how people deal with GitHub.&lt;/p&gt;

&lt;p&gt;Here at FirstPort, I decided to use &lt;a href="https://www.terraform.io/"&gt;Terraform&lt;/a&gt; to manage and standardise all of the repository and user management, and today I want to share with you how we are doing this! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#team-and-user-management"&gt;
  &lt;/a&gt;
  Team and user management
&lt;/h2&gt;

&lt;p&gt;If you are using GitHub enterprise, you will probably use Single Sign-on (SSO). This does the job but isn’t great, especially when having to manage collaborators outside of your Identity Provider (However, you can use Terraform to &lt;a href="https://registry.terraform.io/providers/integrations/github/latest/docs/resources/team_sync_group_mapping"&gt;manage sync groups&lt;/a&gt;) - This still leaves you to manage repositories, labels, pull requests all manually. In our case, I decided to use &lt;a href="https://registry.terraform.io/providers/integrations/github/latest/docs"&gt;Terraform's GitHub provider&lt;/a&gt; to automate most of this work.&lt;/p&gt;

&lt;p&gt;Firstly, I created the teams:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Creates a parent team
resource "github_team" "engineering" {
  name        = "engineering"
  description = "This is a parent team"
  privacy     = "closed"
}

# Creates a sub team of front-end developers
resource "github_team" "frontend" {
  name           = "frontend"
  description    = "This is a sub team "
  parent_team_id = github_team.engineering.id
  privacy        = "closed"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every time we have someone new join, anyone at FirstPort can open a PR and invite them to the team.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Invites a user to the organization
resource "github_membership" "anewstarter" {
  username = "firstportuser"
  role     = "member"
}

# Adds the user to a team
resource "github_team_membership" "frontend-firstportuser1" {
  username = github_membership.firstportuser.username
  team_id  = github_team.frontend.id
  role     = "maintainer"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will run in a GitHub Actions workflow, and the user will receive an invite to join our organisation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#repository-creation"&gt;
  &lt;/a&gt;
  Repository creation
&lt;/h2&gt;

&lt;p&gt;This is probably the main reason why I decided to use Terraform for managing GitHub. If repositories aren't standardised this can create a chaotic situation if the way engineers open issues, raise PRs etc is different in every repository. To avoid this I decided to create most of our repositories in the same way.&lt;/p&gt;

&lt;p&gt;A few things were very important to us that every repository had to have. Let's go through the mains ones:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#release-notes"&gt;
  &lt;/a&gt;
  Release notes
&lt;/h2&gt;

&lt;p&gt;I wanted to provide a way to be able to easily create release notes, to enhance transparency on what we are delivering. I chose to use a tool called &lt;a href="https://github.com/release-drafter/release-drafter"&gt;Release Drafter&lt;/a&gt; in our workflow. I wanted to configure how labels would be used in every repository, and for that, we standardised all labels across all repositories. I use: &lt;em&gt;docs, dependencies, bug, feature, and maintenance.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Every time someone opens a PR, they need to select at least one of these labels to define how this PR is categorised (This is enforced using the &lt;a href="https://github.com/yogevbd/enforce-label-action"&gt;Enforce Label Action&lt;/a&gt;). When a PR is merged, I use the GitHub Action release drafter, which creates a draft release with the commits from the PR into one of those categories. This helps us to create release notes for all of our services!&lt;/p&gt;

&lt;p&gt;This is how the release notes would look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K3o6y3cy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l35n7w1b53j0j3twx94b.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K3o6y3cy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l35n7w1b53j0j3twx94b.PNG" alt="Release Drafter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every time someone creates a new repo, the release drafter comes pre-configured and you can start enjoying good release notes without any effort.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#branch-protection"&gt;
  &lt;/a&gt;
  Branch protection
&lt;/h2&gt;

&lt;p&gt;Setting up rules for when you can merge a branch is very important for code quality, and in our case for legal reasons (at FirstPort, we deal with personal user data, so all changes must go through strict code quality checks). GitHub gives the possibility for you to configure branch protection rules to solve that.&lt;/p&gt;

&lt;p&gt;I wanted to define the same set of basic branch protection for all repositories. This was easily solved with our Terraform module.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#terraform-module"&gt;
  &lt;/a&gt;
  Terraform module
&lt;/h2&gt;

&lt;p&gt;To achieve all of this, I created a Terraform module that manages users, teams, and repositories. Here is an example on how we use the module:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module "my-firstport-repo" {
  source = "./modules/repo"
  version = "~&amp;gt; 1.0"


  name                   = "my-firstport-repo"
  description            = "A firstport repository description"
  visibility             = "private"
  delete_branch_on_merge = true
  vulnerability_alerts   = true
  teams                  = { (data.github_team.engineering.id) = "push" }
  collaborators          = { (data.github_user.external.username) = "push" }

  labels = {
    "type: bug"          = "d73a4a"
    "type: docs"         = "0f727f"
    "type: feature"      = "a2eeef"
    "type: maintenance"  = "a5f7da"
    "type: dependencies" = "0366d6"
  }

  branch_protection = {
    master = {
      enforce_admins    = true
      push_restrictions = []
      required_status_checks = {
        strict   = true
        contexts = []
      }
      required_pull_request_reviews = {
        dismiss_stale_reviews      = true
        require_code_owner_reviews = true
        dismissal_restrictions     = []
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#github-actions"&gt;
  &lt;/a&gt;
  GitHub Actions
&lt;/h2&gt;

&lt;p&gt;GitHub Actions is our CI tool of choice. GitHub Actions is a hosted runner service provided by GitHub. Any user can write individual tasks, called actions, and put them together into a workflow. These workflows can trigger off numerous events, such as pull requests, comments, labels, releases, and so forth. I think of it as having a box of LEGO bricks that can be put together as needed; I can build a space ship or a pirate ship as my heart desires.&lt;/p&gt;

&lt;p&gt;Users are free to write their own actions or consume them from the &lt;a href="https://github.com/marketplace?type=actions"&gt;GitHub Marketplace&lt;/a&gt;. For example, the action that performs &lt;a href="https://github.com/marketplace/actions/checkout"&gt;code checkout&lt;/a&gt; is written by GitHub and is on the Marketplace. For a more in-depth introduction to GitHub Actions, I suggest reading the &lt;a href="https://docs.github.com/en/actions/learn-github-actions"&gt;Getting started with GitHub Actions&lt;/a&gt; documentation.&lt;/p&gt;

&lt;p&gt;For the purpose of this article, I am using GitHub Actions to construct a workflow to provide &lt;a href="https://docs.github.com/en/actions/guides/about-continuous-integration"&gt;CI functionality&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is one workflow that runs on every PR:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: Terraform Plan
on:
  - pull_request

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.GH_TERRAFORM_PRD }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.SUB_ID }}
      ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
      ARM_ACCESS_KEY: ${{secrets.GH_TERRAFORM_PRD_STATE_BLOB_KEY}}

    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: "Security Scan"
        uses: triat/terraform-security-scan@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Lint Code Base
        uses: github/super-linter@master
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          VALIDATE_ALL_CODEBASE: true
          VALIDATE_MD: true
          VALIDATE_TERRAFORM: true

      - uses: hashicorp/setup-terraform@master
        with:
          terraform_version: latest

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        env:
          TF_VAR_github_token: ${{ secrets.GH_TOKEN }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
        env:
          TF_VAR_github_token: ${{ secrets.GH_TOKEN }}

      - uses: actions/github-script@master
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const output = `#### Terraform Security Scan ☠ \`Success! The configuration is secure.\`
            #### Terraform Format and Style 🖌 \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️ \`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖 ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan 📖 \`${{ steps.plan.outcome }}\`

            &amp;lt;details&amp;gt;&amp;lt;summary&amp;gt;Show Plan&amp;lt;/summary&amp;gt;

            \`\`\`${process.env.PLAN}\`\`\`

            &amp;lt;/details&amp;gt;

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On a merge, we run the following workflow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: Terraform Apply
on:
  push:
    branches:
      - main

jobs:
  terraform:
    name: Apply
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.GH_TERRAFORM_PRD }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.SUB_ID }}
      ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
      ARM_ACCESS_KEY: ${{ secrets.GH_TERRAFORM_PRD_STATE_BLOB_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@master

      - uses: hashicorp/setup-terraform@master
        with:
          terraform_version: 0.14.3 

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -input=false
        env:
          TF_VAR_github_token: ${{ secrets.GH_TOKEN }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Release Drafter is set up as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: Release Drafter

on:
  push:
    branches:
      - main

jobs:
  update_release_draft:
    runs-on: ubuntu-latest

    steps:
      - uses: release-drafter/release-drafter@master
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;with the following YAML for config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;categories:
  - title: '🚀 Features'
    labels:
      - 'feature'
  - title: '🐛 Bug Fixes'
    labels:
      - 'bug'
  - title: '🧰 Maintenance'
    label: 'maintenance'
  - title: '📖 Docs'
    label: 'docs'
  - title: '⚙️ Dependencies'
    label: 'dependencies'
change-template: '- $TITLE @$AUTHOR (#$NUMBER)'
change-title-escapes: '\&amp;lt;*_&amp;amp;' # You can add # and @ to disable mentions, and add ` to disable code blocks.
template: |
  ## Changes

  $CHANGES
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To ensure everything is captured in the release notes, we also use the &lt;a href="https://github.com/yogevbd/enforce-label-action"&gt;Enforce Label Action&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: Enforce PR labels

on:
  pull_request:
    types: [labeled, unlabeled, opened, edited, synchronize]
jobs:
  enforce-label:
    runs-on: ubuntu-latest

    steps:
    - uses: yogevbd/enforce-label-action@master
      with:
        REQUIRED_LABELS_ANY: "bug,docs,feature,maintenance,dependencies"
        REQUIRED_LABELS_ANY_DESCRIPTION: "Select at least one label ['bug','docs','feature','maintenance','dependencies']"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is what you see in the Pull Request Tab, each time the PR workflow runs. Allowing you to quickly see if a PR can be merged:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fm7UujSp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mfst7reelr00fw4qtgyr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fm7UujSp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mfst7reelr00fw4qtgyr.PNG" alt="PR_Workflow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We also push this information into Microsoft Teams using the &lt;a href="https://github.com/integrations/microsoft-teams"&gt;GitHub Integration App&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8atnKmac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/emk3nlu1nrgqkgj2w4nq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8atnKmac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/emk3nlu1nrgqkgj2w4nq.PNG" alt="GitHub_Teams"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#devsecops"&gt;
  &lt;/a&gt;
  DevSecOps
&lt;/h2&gt;

&lt;p&gt;An additional benefit of using a CI workflow is adding automated tests. In this scenario, I’ve added a step leveraging &lt;a href="https://github.com/tfsec/tfsec"&gt;tfsec&lt;/a&gt; to scan for static code vulnerabilities. In the example below, tfsec warns against creating an Azure network security rule which is fully open. This will halt and fail the workflow unless I provide an ignore comment to accept the warning.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lCmlVGDi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xyq1va3jqj9h26upqoil.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lCmlVGDi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xyq1va3jqj9h26upqoil.png" alt="tfsec"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;In this post, I explored using GitHub Actions as a CI workflow that could build and maintain a GitHub organization including users, teams, permissions, security etc. I started by generating a new GitHub repository, then wrote the GitHub Workflow files, and finally started testing the CI workflow and introducing small, incremental changes.&lt;/p&gt;

&lt;p&gt;Using Terraform to manage GitHub organisations can really help your developer teams to onboard quickly and securely. &lt;/p&gt;

&lt;p&gt;I hope I could help you learn something new today, and share how we do things here at &lt;a href="https://www.firstport.co.uk/"&gt;FirstPort&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Any questions, get in touch on &lt;a href="https://twitter.com/GhostInTheWire5"&gt;Twitter&lt;/a&gt;  &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5fcZFt77--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/EIRun9ZXYAAsMCs.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--GXR7wJds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1266114810590179328/at1PK_qL_normal.jpg" alt="Andrew [MVP] profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Andrew [MVP]
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/ghostinthewire5"&gt;@ghostinthewire5&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      ✨Azure Readiness Checklist✨&lt;br&gt;&lt;br&gt;Are you ready to go to prod on Azure? Use this checklist to find out: &lt;a href="https://t.co/TtL66YS3nX"&gt;azurechecklist.com&lt;/a&gt;&lt;br&gt;&lt;br&gt;Call for &lt;a href="https://twitter.com/hashtag/contributors"&gt;#contributors&lt;/a&gt;! - Help make this THE go to list for &lt;a href="https://twitter.com/hashtag/Azure"&gt;#Azure&lt;/a&gt; &lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/Azure"&gt;#Azure&lt;/a&gt;DevOps &lt;a href="https://twitter.com/hashtag/OpenSource"&gt;#OpenSource&lt;/a&gt; - PLS RT ❤️ 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      09:24 AM - 01 Nov 2019
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1190197872404377600" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1190197872404377600" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1190197872404377600" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


</description>
      <category>github</category>
      <category>terraform</category>
      <category>devops</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>5 Array Methods You Should Know 🚀</title>
      <author>Garvit Motwani</author>
      <pubDate>Tue, 27 Apr 2021 14:04:51 +0000</pubDate>
      <link>https://dev.to/garvitmotwani/5-array-methods-you-should-know-22ff</link>
      <guid>https://dev.to/garvitmotwani/5-array-methods-you-should-know-22ff</guid>
      <description>&lt;p&gt;Array methods are used in almost every JavaScript project nowadays, which also means that everybody should know the important ones. So I will give you 5 array methods that you should know.&lt;/p&gt;

&lt;p&gt;So let's get started!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#foreach"&gt;
  &lt;/a&gt;
  .forEach
&lt;/h2&gt;

&lt;p&gt;This is a common one and a vital one. The &lt;code&gt;.forEach&lt;/code&gt; method executes a given function on every element from an array. So I would try to explain it through some code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrFunc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;arrFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;span class="c1"&gt;// 6&lt;/span&gt;
&lt;span class="c1"&gt;// 7&lt;/span&gt;
&lt;span class="c1"&gt;// 8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;So as you can see I created an array &lt;code&gt;nums&lt;/code&gt; and then called the &lt;code&gt;.forEach()&lt;/code&gt; method and then declared a callback function called &lt;code&gt;arrFunc()&lt;/code&gt;, so this is where it all happens, you see the &lt;code&gt;.forEach()&lt;/code&gt; needs 3 parameters, first one is &lt;code&gt;item&lt;/code&gt; which are the elements which in our case are 1, 2, 3, 4, 5, 6, 7 and 8, then the second parameter is &lt;code&gt;index&lt;/code&gt; which is the index of the item in the array and second is the &lt;code&gt;arr&lt;/code&gt; which is the array itself, although you don't use this parameter often. So in the callback function, you can just type the things you want with every single element on the array. It is like a for loop on the base but not much like it.&lt;/p&gt;

&lt;p&gt;Keep in mind that you can use the &lt;code&gt;.forEach()&lt;/code&gt; method with arrow functions, which is always the recommended way:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#concat"&gt;
  &lt;/a&gt;
  .concat
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;.concat&lt;/code&gt; method allows you to merge 2 or more arrays together without modifying the arrays but instead creating a new one.&lt;br&gt;
It is a bit easy and useful and it is as simple as it sounds in code too. So let's say we have two arrays:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;So if you want to merge them you can do that easily with this method, like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Now If you console.log the z array&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// You will receive [10, 20, 30, 40, 50, 60]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If you want to concat more than 1 arrays, you can just add it as the second parameter and if more you can add more parameters, like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can also use &lt;code&gt;.concat&lt;/code&gt; method like the &lt;code&gt;.push&lt;/code&gt; method like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Output: [10, 20, 30, 40]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#includes"&gt;
  &lt;/a&gt;
  .includes
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;.includes&lt;/code&gt; method allows you to find if an element is included inside an array. Let's try understand it with code:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Garvit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lorenzo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Adam&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;outputRes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Adam&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;outputRes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Output: true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;So here as you can see we have declared an array called &lt;code&gt;names&lt;/code&gt; and we have the names, Garvit, Lorenzo and Adam stored in them now in the next line we declared a variable called &lt;code&gt;outputRes&lt;/code&gt; in which we typed if the array &lt;code&gt;names&lt;/code&gt; includes "Adam" then the output will be true, prooving that the array includes that and if we wrote something like, "John" the output will be false prooving that "John" is not in that array.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#splice"&gt;
  &lt;/a&gt;
  .splice
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;.splice&lt;/code&gt; method allows you to remove or replace an existing element of an array, simple right? Let's try to learn more about this in code:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Output: [1, 2, 6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;So as you can see I have created an array called &lt;code&gt;numbers&lt;/code&gt; and entered some numbers in it and then I typed &lt;code&gt;numbers.splice(2, 3)&lt;/code&gt;, so here the first parameter is the starting index from where we want to start removing elements which in our case was 2 (3) and then the second parameter that we passed was that how many elements we want to remove which in our case was 3 (3, 4, 5).&lt;/p&gt;

&lt;p&gt;Now take a look at this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;modifiedArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;modifiedArr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Output: [3, 4, 5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Not much of a difference, right? but still, the output has changed, that is because we have stored the splice array in a variable, so It is like putting all the deleted element in the &lt;code&gt;modifiedArr&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you want to replace the existing elements, you can just add the elements as another parameter:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Output: [1, 2, 7, 8, 6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#reverse"&gt;
  &lt;/a&gt;
  .reverse
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;.reverse&lt;/code&gt; method allows you to reverse an array, this is an easy one, lets see how that works in code:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Output: [6, 5, 4, 3, 2, 1]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=SXb5LN_opbA&amp;amp;list=PLgBH1CvjOA62PBFIDq55-S6Beivje30A2"&gt;Florin Pop's Array Methods Playlist&lt;/a&gt;&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/"&gt;MDN Web Docs&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-giveaway-%EF%B8%8F"&gt;
  &lt;/a&gt;
  ⚡️ Giveaway ⚡️
&lt;/h2&gt;

&lt;p&gt;We are giving away any course you need on Udemy. Any price any course.&lt;br&gt;
Steps to enter the giveaway&lt;br&gt;
--&amp;gt; React to this post&lt;br&gt;
--&amp;gt; Subscribe to our &lt;a href="https://worldindev.ck.page/"&gt;Newsletter&lt;/a&gt; &amp;lt;-- Very important&lt;br&gt;
--&amp;gt; Follow me on &lt;a href="https://twitter.com/garvitmotwani"&gt;Twitter&lt;/a&gt; &amp;lt;-- x2 Chances of winning&lt;/p&gt;

&lt;p&gt;The winner will be announced on May 1, Via Twitter&lt;/p&gt;



&lt;p&gt;Thank you very much for reading this article.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PLEASE LIKE, SHARE, AND COMMENT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://dev.to/garvitmotwani"&gt;Dev&lt;/a&gt; and &lt;a href="https://twitter.com/GarvitMotwani"&gt;Twitter&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;You Should also check &lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/devlorenzo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pCohWvfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8B-BJEvg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571015/e3d4ff5f-e11d-4538-bb83-9d3ce3e9dfb9.gif" alt="devlorenzo image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/worldindev/400-javascript-interview-questions-with-answers-2fcj" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;400+ JavaScript Interview Questions 🎓  With Answers 🌠&lt;/h2&gt;
      &lt;h3&gt;DevLorenzo ・ Apr 27 ・ 181 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;by my friend &lt;a class="mentioned-user" href="https://dev.to/devlorenzo"&gt;@devlorenzo&lt;/a&gt;
 &lt;/p&gt;

&lt;p&gt;Subscribe to our &lt;a href="https://chipper-motivator-3112.ck.page/05710ea3d3"&gt;newsletter&lt;/a&gt; to receive our weekly recap directly on your email!&lt;/p&gt;

&lt;p&gt;Join us on &lt;a href="https://discord.gg/aWS2YKk6"&gt;Discord&lt;/a&gt; to participate in hackathons with us / participate in our giveaways!&lt;/p&gt;

&lt;p&gt;Happy Coding.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>html</category>
    </item>
    <item>
      <title>Intro to Amazon S3</title>
      <author>Michael Liendo</author>
      <pubDate>Tue, 27 Apr 2021 14:02:23 +0000</pubDate>
      <link>https://dev.to/mtliendo/intro-to-amazon-s3-1il1</link>
      <guid>https://dev.to/mtliendo/intro-to-amazon-s3-1il1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#simple-storage-service-or-s3"&gt;
  &lt;/a&gt;
  Simple Storage Service, or S3
&lt;/h2&gt;

&lt;p&gt;Whether it’s Dropbox, Google Drive, iCloud, or that folder on your Desktop that has way too much stuff in it (&lt;a href="https://twitter.com/kvlly/status/1207515539448446977?s=20"&gt;you know the one&lt;/a&gt;), the idea of storing data somewhere and being able to access it later on isn’t anything new.&lt;/p&gt;

&lt;p&gt;S3, on its surface, can be seem like the services above. However, going deeper it is much more versatile—but more on that in a later post.&lt;/p&gt;

&lt;p&gt;To get started, you'll need an AWS account. If you don't have one, I created a video showing how you can sign up.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/FAfhMXUiLuU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;With that out of the way, let’s define some terms.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#need-to-know-terms"&gt;
  &lt;/a&gt;
  📖 Need to know terms
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Bucket:&lt;/strong&gt; This is a grouping of all the &lt;strong&gt;“stuff”&lt;/strong&gt; you’d like to store. There’s no limit to the amount of stuff you can put in a bucket. Also, even though buckets are created in a specific region of your choosing, the name you decide to give them has to be globally unique.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Object:&lt;/strong&gt; Notice above how I said a bucket contains &lt;strong&gt;“stuff”&lt;/strong&gt;? Well S3 calls it an object. This an item you’d like to put in a bucket. This can be any type of data: text, JSON, a picture, or video. A single object’s size can be as large as 5 &lt;strong&gt;terabytes&lt;/strong&gt; 😱&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-your-first-bucket"&gt;
  &lt;/a&gt;
  🏗️ Creating Your First Bucket
&lt;/h2&gt;

&lt;p&gt;Creating an S3 bucket is fairly straightforward with one small gotcha that we’ll address as we go. &lt;/p&gt;

&lt;p&gt;To get started, search for S3 once you’re logged into your AWS account or click this &lt;a href="https://s3.console.aws.amazon.com/s3/home"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From here, we can follow these steps to create our first bucket:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click the orange &lt;strong&gt;Create Bucket&lt;/strong&gt; button on the right side of the page&lt;/li&gt;
&lt;li&gt;Give our bucket a name (remember it has to be globally unique)&lt;/li&gt;
&lt;li&gt;Ensure the region is a location generally close to you&lt;/li&gt;
&lt;li&gt;Uncheck &lt;strong&gt;Block all public access&lt;/strong&gt; 

&lt;ol&gt;
&lt;li&gt;Of the 4 nested checkboxes, check the first 2 and leave the last 2 unchecked&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;⚠️warning&lt;/strong&gt; area, click the box to acknowledge the bucket being public&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;At the bottom of the page, select &lt;strong&gt;Create bucket&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If all went well, you should be looking at a screen with your bucket listed in it&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--InJg6_Gy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2z1ki19228dx6eyaiziq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--InJg6_Gy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2z1ki19228dx6eyaiziq.png" alt="preview of newly created bucket"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;“What did we do in step 4?”&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Great question, glad you asked!&lt;/p&gt;

&lt;p&gt;AWS has a concept known as &lt;strong&gt;Least Privilege&lt;/strong&gt;. This means, services should only be able to do exactly what we need them to do, and nothing more. &lt;/p&gt;

&lt;p&gt;So when we tell AWS we want a bucket (&lt;strong&gt;that can contain &lt;strong&gt;anything&lt;/strong&gt; in it&lt;/strong&gt;) to be publicly available on the internet, they want to ensure we know what we’re doing to avoid any &lt;a href="https://www.computerweekly.com/news/252476870/Exposed-AWS-buckets-again-implicated-in-multiple-data-leaks"&gt;security issues&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In addition, when it comes to making items public, there are a few ways to do it. Leaving those two boxes unchecked says “we’re going to write a policy (&lt;strong&gt;a snippet of JSON&lt;/strong&gt;) that tells you exactly how I want to make this bucket public.”&lt;/p&gt;

&lt;p&gt;If you haven’t already, go ahead and click on your bucket and select the &lt;strong&gt;Permissions&lt;/strong&gt; tab. Down a bit, we’ll come across a section that says &lt;strong&gt;Bucket policy&lt;/strong&gt;. Click the &lt;strong&gt;Edit&lt;/strong&gt; button, then click &lt;strong&gt;Policy examples&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;On the new tab that opened up, select the &lt;strong&gt;Granting read-only permissions to an anonymous user&lt;/strong&gt; link as shown in the screenshot below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gUWCSqWL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ufpzdcrgi57afinmra40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gUWCSqWL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ufpzdcrgi57afinmra40.png" alt="S3 policy links"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now copy the JSON snippet and head back to the tab with your S3 bucket. Paste in the JSON and click “Save changes” at the bottom.&lt;/p&gt;

&lt;p&gt;🚨 Make sure to replace &lt;strong&gt;DOC-EXAMPLE-BUCKET&lt;/strong&gt; with your bucket name&lt;br&gt;
🚨 Make sure there is a &lt;strong&gt;/*&lt;/strong&gt; at the end of your bucket name &lt;/p&gt;

&lt;p&gt;🗒️ Yes, I could’ve just given you a link or the snippet to paste, but knowing where to click in AWS is a skill in itself!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“What does this policy (aka, snippet of JSON) do?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Excellent question! &lt;/p&gt;

&lt;p&gt;Here's a breakdown of what each part is doing&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kakoQzf6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/he87klnwv1t0ga6hrz4e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kakoQzf6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/he87klnwv1t0ga6hrz4e.png" alt="Breakdown of an AWS Policy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🗒️ Remember when I mentioned &lt;strong&gt;Least Privilege&lt;/strong&gt;? The &lt;strong&gt;Action&lt;/strong&gt; part in our policy should only list what we want our resource to allow.&lt;/p&gt;

&lt;p&gt;Back at the top of the page, select the &lt;strong&gt;Objects&lt;/strong&gt; tab and select &lt;strong&gt;Upload&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;On the next page, feel free to drag in a photo (remember this is public!) and click &lt;strong&gt;Upload&lt;/strong&gt; at the bottom when you’re done. Once you get an “Upload Succeeded” message, click the &lt;strong&gt;Close&lt;/strong&gt; button on the right side of the page.&lt;/p&gt;

&lt;p&gt;🎉 Congratulations! You’ve just created a bucket and uploaded an item to it! &lt;/p&gt;

&lt;p&gt;To verify, click the photo link, and on the next page, note the &lt;strong&gt;Object URL&lt;/strong&gt;. This is the public link to view your image.&lt;/p&gt;

&lt;p&gt;Want to try it out on a webpage? Feel free to head to this &lt;a href="https://codesandbox.io/s/hardcore-swirles-624bk?file=/index.html"&gt;Codesandbox&lt;/a&gt; and update the link on line 14.&lt;/p&gt;

&lt;p&gt;Pricing&lt;/p&gt;

&lt;p&gt;In S3 you pay based on 2 factors:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The amount of data in a bucket&lt;/li&gt;
&lt;li&gt;The requests made to query (&lt;strong&gt;get&lt;/strong&gt;) or change (&lt;strong&gt;copy, delete, update&lt;/strong&gt;) a bucket.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;🗒️ The pricing is also specific to whatever region the bucket is in but is similar across most regions.&lt;/p&gt;

&lt;p&gt;For example, in the region &lt;strong&gt;us-east-1&lt;/strong&gt;, for an S3 bucket with &lt;strong&gt;1GB&lt;/strong&gt; of data in it being &lt;strong&gt;fetched 1,000 times/month&lt;/strong&gt;, you would spend &lt;strong&gt;$0.02/month&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/s3/pricing/"&gt;https://aws.amazon.com/s3/pricing/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h1&gt;

&lt;p&gt;Today we explored Simple Storage Service. We created a bucket of images and displayed them on a webpage. This is only scratching the surface of what S3 can do.&lt;br&gt;
In many tutorials and blogs, this is usually where they tell you how to host a static website on S3. However, I'm not going to do that. &lt;/p&gt;

&lt;p&gt;The process of hosting static webpages used to be &lt;strong&gt;really&lt;/strong&gt; involved and error-prone due to the number of services needed. &lt;br&gt;
With that said, I hope you still use S3 to host your static assets (photos, movies, etc). &lt;/p&gt;

&lt;p&gt;AWS released the Amplify Console which greatly simplifies the process of hosting static sites. So I'll leave you with a video on how to use the Amplify Console to deploy a react application to AWS (spoiler alert, it's &lt;em&gt;really&lt;/em&gt; easy).&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ucVK6Z55PZY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Thanks for following along, and I look forward to seeing you next time when I talk about one of the most buzzword cloud services out there: AWS Lambda.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>explainlikeimfive</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
