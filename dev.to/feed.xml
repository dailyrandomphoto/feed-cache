<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Basic accessibility features you should ALWAYS implement</title>
      <author>Drew Clements</author>
      <pubDate>Mon, 15 Nov 2021 20:46:07 +0000</pubDate>
      <link>https://dev.to/drewclem/basic-accessibility-features-you-should-always-implement-59h4</link>
      <guid>https://dev.to/drewclem/basic-accessibility-features-you-should-always-implement-59h4</guid>
      <description>&lt;p&gt;Accessibility on the web has always been important, but it's only been in the last &amp;lt;10 years that a true emphasis on it has come about. Legally, it's against the law to build a site or application that doesn't adhere to the &lt;a href="https://www.w3.org/TR/WCAG20/"&gt;Web Content Accessibility Guidelines&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Purple Cow Agency has &lt;a href="https://purplecowagency.com/is-website-accessibility-a-legal-requirement/"&gt;this great article&lt;/a&gt; where they answer some of the questions around accessibility. They do a great job of answering those questions and giving an easier-to-digest version WCAG 2.1&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;According to Title III of the Americans with Disabilities Act (ADA), all public areas must accommodate people with disabilities—this includes your website. Though the ADA doesn’t mention websites anywhere, the US courts interpret “places of public accommodation” to include the public domain of the internet.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Today, we're going to look at 3 commonly overlooked accessibility patterns you can add to your projects to get them a few steps closer to be fully accessible compliant!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessible-modals"&gt;
  &lt;/a&gt;
  Accessible Modals
&lt;/h2&gt;

&lt;p&gt;Modals are a very common design pattern across the web today. You see them for newsletter signups, requests for cookie tracking, and- believe it or not- mobile menus!&lt;/p&gt;

&lt;p&gt;Slide-out, pop-out, revealing- whatever you want to call them- mobile menus hidden behind an icon toggle are technically modals, and they should be treated as such!&lt;/p&gt;

&lt;p&gt;They're definitely good patterns to pull user's attention to specific content (especially when they quite literally block other content)- but there are some features they need to be considered a11y compliant.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;On open, autofocus the first focusable element in the modal dialog.&lt;/li&gt;
&lt;li&gt;While open, limit mouse and keyboard focusability to &lt;em&gt;only&lt;/em&gt; the content within the modal dialog.&lt;/li&gt;
&lt;li&gt;On close, autofocus the element that initially triggered the modal to open.&lt;/li&gt;
&lt;li&gt;When opened, the modal dialog and content should be appended to the end of the DOM.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, there are a lot of ways to accomplish this. I just wrote an &lt;a href="https://dev.to/drewclem/building-an-accessible-modal-in-vue-2d2a"&gt;article&lt;/a&gt; about how to do this in Vue, if you're interested in implementing this into your Vue project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessible-menus-navigation-submenus"&gt;
  &lt;/a&gt;
  Accessible Menus (navigation submenus)
&lt;/h2&gt;

&lt;p&gt;Collapsible/hover-able navigation menus are another pattern that eat the web up. They make sense. Designers/marketers want to save space &lt;a href="https://www.google.com/search?q=above+the+fold&amp;amp;oq=above+the+fold&amp;amp;aqs=chrome..69i57j0i512l4j46i512j46i175i199i512j0i512l3.2040j0j4&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;above the fold&lt;/a&gt;, and they do that by hiding submenu items underneath or behind their parent menu item.&lt;/p&gt;

&lt;p&gt;However, this exposes a lot of room for accessibility errors to come into play. It's easy enough to reveal a menu with a mouse hover, but what about for people who use assistive technologies and navigate with their keyboard?&lt;/p&gt;

&lt;p&gt;Does &lt;code&gt;.menu-item:hover&lt;/code&gt; apply to when a submenu item is keyboard focused? No, it doesn't. That leaves your assisted users possibly reading top-level non-clickable menu items that go nowhere and being given no context as to why they don't go anywhere.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.smashingmagazine.com/author/heydon-pickering/"&gt;Heydon Pickering&lt;/a&gt; has a fantastic &lt;a href="https://www.smashingmagazine.com/2017/11/building-accessible-menu-systems/"&gt;Smashing Mag article&lt;/a&gt; where he walks through, in detail, how to build an accessible compliant menu and submenu navigation system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#semantically-correct-html"&gt;
  &lt;/a&gt;
  Semantically correct HTML
&lt;/h2&gt;

&lt;p&gt;The last, and surprising thing, on this is semantically correct HTML. It's surprising that this one needs to be mentioned, because structurally sound HTML should be the default for anyone coming out of a bootcamp or grad school- but, somehow, it isn't.&lt;/p&gt;

&lt;p&gt;Getting your HTML right can have a huge effect on your assisted users experience. It's very common to wrap everything in a div, and before you know it, you have div soup.&lt;/p&gt;

&lt;p&gt;HTML has specific elements with some accessibility baked into them. So, why not use them?&lt;/p&gt;

&lt;p&gt;We all know about the header and footer, but how often do you forget to wrap your main content between the two in the &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; tag? I know I have, more than I care to admit.&lt;/p&gt;

&lt;p&gt;There are other HTML patterns to remember too:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Only have a &lt;em&gt;single&lt;/em&gt; &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag per page

&lt;ul&gt;
&lt;li&gt;There was a rumor/myth that perpetuated pretty far into the tech community that &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; tags reset the page reader and that you could have multiple H1s on a page. This isn't true. There was a proposal for such, but it was never implemented.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Keep your heading tags in order

&lt;ul&gt;
&lt;li&gt;You should only use your heading tags in an ascending order (by number). H1's should only be followed by H2's. H2's should only be followed by H3's. H3's should only be followed by H4's. Rinse and repeat. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Separate different generic content areas with &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; tags with proper headings. This lets your user know the content they're about to consume (while it may be related) is separate from what they just engaged with.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; tags to separate content that could exist independently of the rest of the content, e.g., forum post, a blog entry, etc..&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is a lot more that goes into writing proper HTML. It would take an entire novel (and some do exist) on how to write each section the right way, but keep things like this in mind when you're building, and overtime, you'll probably notice the quality of your HTML increasing while the effort to do so decreases with each project!&lt;/p&gt;

&lt;p&gt;Here's a &lt;a href="http://www.springboardseo.com/resources/what-is/html-elements-list-complete.html"&gt;list&lt;/a&gt; of HTML elements you can use to check when and if you're using the right element.&lt;/p&gt;

&lt;p&gt;A simple page could look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Menu Item&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Page Title&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Section title&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This would be your content description area. 
      &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;aside&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Side Navigation&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Menu Item&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Menu Item&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;I'll be the first to admit that I build a lot of websites &lt;em&gt;incredibly incorrectly,&lt;/em&gt; from an HTML perspective. But the growth comes from knowing you can do better, and then striving to do so. If you're reading this article, then you're on that right path!&lt;/p&gt;

&lt;p&gt;As developers, it's our responsibility to make the knowledge and entertainment on the web available and accessible to everyone. I try to take that responsibility seriously. Do you?&lt;/p&gt;

</description>
      <category>programming</category>
      <category>html</category>
      <category>a11y</category>
    </item>
    <item>
      <title>Soft skills that will improve your work and life. With self-check</title>
      <author>Vadim Kolobanov</author>
      <pubDate>Mon, 15 Nov 2021 20:38:08 +0000</pubDate>
      <link>https://dev.to/abstract/soft-skills-that-will-improve-your-work-and-life-with-self-check-24h6</link>
      <guid>https://dev.to/abstract/soft-skills-that-will-improve-your-work-and-life-with-self-check-24h6</guid>
      <description>&lt;p&gt;Being a programmer in 2021 is not the same as ten years ago. The world is constantly changing, and many of the skills that were important back then have faded into the background over time. And what skills should a developer have in order to remain a sought-after specialist, for example, in five years? If you don't have them, maybe you should think about their development now?&lt;/p&gt;




&lt;p&gt;In this post, I want to talk about skills that will help you stay in demand as a developer even in conditions of constant change. Usually, IT specialists rely on the scientific and technical base, which is important for understanding the functioning of the system as a whole. This includes knowledge of the operating principles of the OS, the network stack, databases, and the mathematical apparatus that underlies any algorithm or protocol, etc. However, hard skills alone are not enough — communication skills, the ability to build a workflow with a team and/or strangers, flexibility in decision-making, and other soft skills are also needed. Moreover, it is important not just to have the — soft skills that should be integrated into the overall development process and go in close conjunction with professional skills. Seven of them will be discussed today.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-comprehensive-problem-solving"&gt;
  &lt;/a&gt;
  1. Comprehensive problem solving
&lt;/h1&gt;

&lt;p&gt;The demand for specialists who are able to approach the task from different sides is steadily growing. Most people cannot solve complex problems because they often use technologies aimed at the process, not the result. A developer using an integrated approach can not only identify the problem, but also determine its causes, and most importantly, "calculate" further steps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bn7BRpYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fp8141tlxdtqi418ckc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bn7BRpYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fp8141tlxdtqi418ckc.png" alt="Comprehensive problem" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Self-test:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Colleagues complain about a recurring problem. If it arose in your team, where would you start solving it?&lt;/li&gt;
&lt;li&gt;Do you calculate the possible risks when choosing a certain solution?&lt;/li&gt;
&lt;li&gt;How to understand that you are really solving the problem, and not eliminating its "symptoms"?&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#2-the-ability-to-convince"&gt;
  &lt;/a&gt;
  2. The ability to convince
&lt;/h1&gt;

&lt;p&gt;The ability to convince — that is, to present your idea, make arguments and tell a story so that listeners are passionate - is necessary not only for those who constantly communicate with clients. This skill will help to defend your point of view, inspire like-minded people. And in order for colleagues to listen to you not out of politeness, but attentively and intently, it is highly desirable to make your story not only convincing but also interesting.&lt;/p&gt;

&lt;p&gt;For example: when preparing a presentation about a release, you try not to load your colleagues with a dry list of facts with technical details, but build a story: add explanations, vivid examples, think about how you will manage the attention of listeners, and prepare arguments for answers to possible questions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wpMhzM3t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/epoaw7d4ri3lv2eqjkez.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wpMhzM3t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/epoaw7d4ri3lv2eqjkez.png" alt="Convince" width="880" height="586"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Self-test:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Have you noticed that you are interrupted at meetings? Was there a feeling that no one was listening to you?&lt;/li&gt;
&lt;li&gt;Do you try to give illustrative cases when defending your point of view?&lt;/li&gt;
&lt;li&gt;How will you start the story about yourself? Rehearse a small speech.&lt;/li&gt;
&lt;li&gt;Remember the case when, after a conversation with you, a colleague changed his mind. What exactly helped you convince him?&lt;/li&gt;
&lt;li&gt;How do you respond to objections?&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#3-cooperation-and-teamwork-skills"&gt;
  &lt;/a&gt;
  3. Cooperation and teamwork skills
&lt;/h1&gt;

&lt;p&gt;I think many will agree that the community plays a significant role in the IT environment: experienced developers help colleagues and willingly share their experiences. Nevertheless, there is a stereotype that it is normal for a programmer to be closed, but it is difficult to interact with a closed person since he almost never offers ideas and is not inclined to discuss current processes. Therefore, more and more companies are paying attention to whether a specialist is able to work in a team, whether he understands colleagues as well as the project itself, whether he is able to give and receive feedback.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n992f1li--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lz364liptut1mirt4rfn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n992f1li--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lz364liptut1mirt4rfn.png" alt="Team" width="880" height="622"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Self-test:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You need to talk to a colleague you didn't know before. Where will you start?&lt;/li&gt;
&lt;li&gt;One of the team members repeatedly passes the work with errors. What will you do?&lt;/li&gt;
&lt;li&gt;What words will you choose to make the criticism sound friendly?&lt;/li&gt;
&lt;li&gt;Do you celebrate the successes of your colleagues and talk about them publicly?&lt;/li&gt;
&lt;li&gt;What helps you feel the mood of the interlocutor and tune in to his wave?&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#4-ability-to-plan-your-work"&gt;
  &lt;/a&gt;
  4. Ability to plan your work
&lt;/h1&gt;

&lt;p&gt;Employers value specialists who are able to plan, give accurate estimates of the complexity of tasks and adhere to deadlines regardless of the language, technologies, and methodologies used.&lt;/p&gt;

&lt;p&gt;Example: to organize the work of a group (if you are a leader) or your own, you plan sprints, make sure that there is a time interval between the task and the solution, which will allow you to organize things and prioritize. During the day, you stick to what you have planned and do not get distracted by other requests so that the work becomes more calm and predictable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ouTGVo2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5asuy6cdzumda2xj36e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ouTGVo2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5asuy6cdzumda2xj36e.png" alt="Time Management" width="880" height="619"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Self-test:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You are asked to name the deadlines for the project's readiness. What will guide you in the assessment?&lt;/li&gt;
&lt;li&gt;It's the middle of the working day, and suddenly a colleague sends you a link. You know that there is a useful and important article there. What will you do?&lt;/li&gt;
&lt;li&gt;Do you make work and personal plans for the day/week/month? How many of them can be completed?&lt;/li&gt;
&lt;li&gt;Are you familiar with the Eisenhower matrix time planning method?&lt;/li&gt;
&lt;li&gt;Do you know how much time it takes you on average for each type of task?&lt;/li&gt;
&lt;li&gt;How many minutes/hours a day do you spend on social media? Do you track these statistics in any way? Do you use time trackers?&lt;/li&gt;
&lt;li&gt;Do you practice taking a break from social networks and the Internet, digital detox?&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#5-critical-thinking"&gt;
  &lt;/a&gt;
  5. Critical thinking
&lt;/h1&gt;

&lt;p&gt;The ability to think critically is one of the key skills in our time. In a world where knowledge is power and the flow of information increases exponentially, you need to be able to ask questions, compare data and be critical of what others write. If we talk about professional development, critical thinking allows you to determine which set of skills you need. Someone needs clean code, knowledge of the version control system, and system thinking to work, and someone who is engaged in high-tech projects needs deep immersion in special sections of mathematics or physics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GbqbzQvn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jan3jd8cdxc5ve6q5lbu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GbqbzQvn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jan3jd8cdxc5ve6q5lbu.png" alt="Thinking" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Self-test:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do you think when reading materials on the Internet about who publishes them and for what purpose?&lt;/li&gt;
&lt;li&gt;How do you determine which information can be trusted? What criteria do you rely on when choosing information sources?&lt;/li&gt;
&lt;li&gt;Do you check website addresses and connection security when clicking on unfamiliar links?&lt;/li&gt;
&lt;li&gt;Do you have a list of trusted sources of information?&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#6-continuous-learning-long-life-learning"&gt;
  &lt;/a&gt;
  6. Continuous learning — long life learning
&lt;/h1&gt;

&lt;p&gt;Many leading companies seek to hire full-stack developers who work freely with different technologies and platforms. Such specialists understand the principles of any development, starting from the network core level and ending with the interface level. This is impossible to achieve if you do not make it a rule to constantly learn new things. A sought-after developer is determined not only by the possession of a rare stack but also by the ability to easily "switch" between different languages and the desire to learn new tools every day.For example: although Java and C# have occupied a significant part of the market for several years, IT companies are increasingly using newer technologies (Kotlin, Swift, etc.). And, logically, developers who are proficient in several languages will give odds to those who are familiar with one or two technologies. In five years, new stacks will surely appear, so to remain in demand, it is important to constantly learn and be able to choose the right tool for solving a specific task, based on a comprehensive analysis of factors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4yRUDUpe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tu5uxls1jh6vf5vi13mb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4yRUDUpe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tu5uxls1jh6vf5vi13mb.png" alt="Learning" width="880" height="529"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Self-test:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do you participate in the development of open-source projects? How many commits have you made over the past year? How many bugs and suggestions have you created in the tracker? How many questions were answered?&lt;/li&gt;
&lt;li&gt;How long have you been studying an unfamiliar technology for yourself?&lt;/li&gt;
&lt;li&gt;What would you do if you found out about the emergence of a new language that is gaining popularity?&lt;/li&gt;
&lt;li&gt;How do you react if you are offered to go to a training event?&lt;/li&gt;
&lt;li&gt;What professional conferences do you attend?&lt;/li&gt;
&lt;li&gt;What have you learned in your professional field over the past six months?&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#7-compliance-with-worklife-balance"&gt;
  &lt;/a&gt;
  7. Compliance with work-life balance
&lt;/h1&gt;

&lt;p&gt;Compliance with work-life balance and your well-being directly affect productivity: those who take care of themselves usually live longer, work more efficiently and have time to pay due attention to other important matters. The topic of health is closely connected with all spheres of life, including work. I won't say anything about biohacking and implanting chips under the skin (this is the topic of a separate post — or even more than one), this item is more about attention to the body, to the psycho-emotional state, and also that the separation of personal and professional life helps them mutually support each other. Try to be more tolerant of others, especially if their point of view contradicts yours, express feelings without harming others, and be aware of what you can influence and what you can't. Find a hobby to your liking and remember that your career success will partly depend on how your life is organized after work and study.&lt;/p&gt;

&lt;p&gt;For example: in order to feel cheerful and have more time, you go to bed on time, do not use the phone two hours before bedtime and do not grab it first thing in the morning, do not overeat. Thanks to this, you stay attentive and energetic longer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4IDAaTfp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cc0jekhb0eaxa43bxoei.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4IDAaTfp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cc0jekhb0eaxa43bxoei.png" alt="Work-life" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Self-test:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When was the last time you underwent a comprehensive examination?&lt;/li&gt;
&lt;li&gt;What do you do to ensure that your diet is balanced?&lt;/li&gt;
&lt;li&gt;How many hours a day do you sleep? Do you get enough sleep? If not, what can you do now to improve the quality of your sleep?
In the morning you feel cold, but you need to go to work. What will you do?&lt;/li&gt;
&lt;li&gt;Do you work on vacation? Do you finish projects on weekends? Do you write to work chats in the evenings?&lt;/li&gt;
&lt;li&gt;What are your hobbies? Have you been interested in something new for yourself for a long time?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This skill set does not appear with birth and is not strictly mandatory. But the development of these skills will not only give you success in work or in a team but will also make your life much better.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#put-on-heart-if-you-liked-it-and-you-learned-something-new"&gt;
  &lt;/a&gt;
  Put on Heart if you liked it and you learned something new!
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#you-can-also-follow-me-to-receive-notifications-about-new-interesting-articles"&gt;
  &lt;/a&gt;
  You can also follow &lt;a href="https://dev.to/vadimkolobanov"&gt;ME&lt;/a&gt; to receive notifications about new interesting articles.
&lt;/h3&gt;




&lt;h4&gt;
  &lt;a href="#faq"&gt;
  &lt;/a&gt;
  FAQ
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;I am a beginner, how should I learn Python?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Look into the following series:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/vadimkolobanov/series/15329"&gt;Learning Python&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/vadimkolobanov/series/15349"&gt;Step by Step to Junior&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/vadimkolobanov/series/15331"&gt;Ideas&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can we cooperate with you?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you have interesting projects and you need a python (web)developer, then you can contact me by &lt;strong&gt;&lt;a href="//titanyforgame@gmail.com"&gt;mail&lt;/a&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;a href="https://discord.gg/szEuVAhatW"&gt;discord&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href="https://www.linkedin.com/in/vadzim-hlobuz-0b44531b7/"&gt;LinkedIn&lt;/a&gt;&lt;/strong&gt; for cooperation&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connect to me on&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.facebook.com/neo.skarynsky"&gt;Write me on Face....oh...Meta&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/decodesperato"&gt;My Twitter&lt;/a&gt; &lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>motivation</category>
      <category>leadership</category>
    </item>
    <item>
      <title>Deep Flatten an Array</title>
      <author>Mukul Singhal</author>
      <pubDate>Mon, 15 Nov 2021 20:13:21 +0000</pubDate>
      <link>https://dev.to/mukul_singhal/deep-flatten-an-array-5elf</link>
      <guid>https://dev.to/mukul_singhal/deep-flatten-an-array-5elf</guid>
      <description>&lt;p&gt;Hello all👋,&lt;/p&gt;

&lt;p&gt;In this series we will see a lot of question that are asked in javascript interviews so get ready for it&lt;/p&gt;

&lt;p&gt;In this article we will see How to flatten an deeply nested array for example&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[1,[2,3,[4,5]]] and convert in into [1,2,3,4,5]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We will learn to flatten an array in 2 ways&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Using built in function (&lt;code&gt;flat()&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using recursion&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;1. Using &lt;code&gt;Flat()&lt;/code&gt; method in Javascript&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;flat()&lt;/code&gt; method is an inbuilt array method that flattens a given array into a newly created one-dimensional array. It concatenates all the elements of the given multidimensional array, and flats upto the specified depth.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var newArr = arr.flat(depth)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;By default, the depth limit is 1. It can be 1 to &lt;code&gt;Infinity&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]]];&lt;/span&gt;

  &lt;span class="c1"&gt;// Setting the depth value to&lt;/span&gt;
  &lt;span class="c1"&gt;// Infinity to deep flatten the array&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;flattened&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flattened&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Output [1,2,3,4,5]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. Recursively flat an array (Pollyfill)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now we will see how do it without using any builtin function or basically writing the pollyfill for flat function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Flatten an array using recursion&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]]]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;// Output [1,2,3,4,5]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me explain the code&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Iterate through each and every value of an array and check whether it is value or an array using &lt;code&gt;Array.isArray()&lt;/code&gt;
method.&lt;/li&gt;
&lt;li&gt;If it is a value return it and concat it.&lt;/li&gt;
&lt;li&gt;If it is an array then follow again from step 1.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Using ES6 features (using &lt;code&gt;reduce()&lt;/code&gt;)&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]]];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;flattened&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flattened&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Output [1,2,3,4,5]&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For better understanding of the code Please refer to the gif below.&lt;br&gt;
You can also check this &lt;a href="https://github.com/Mukul-Singhal/Javascript-interview-questions/blob/master/arrays/deeplyFlattenArray.js"&gt;Github repo&lt;/a&gt; for the code&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CwHUrcYJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/6XdWH3v.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CwHUrcYJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/6XdWH3v.gif" alt="Recursion" width="800" height="581"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Voila😃&lt;br&gt;
Let me know your thoughts about it 😃 and if you like it share it with others.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uo6SOpic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rk3yciobisco1ulfi03s.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uo6SOpic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rk3yciobisco1ulfi03s.gif" alt="Image description" width="498" height="358"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>In-depth Interpretation of Amara Three Core Products</title>
      <author>Vadim Voronovskiy</author>
      <pubDate>Mon, 15 Nov 2021 20:11:16 +0000</pubDate>
      <link>https://dev.to/ovoronovskiy/in-depth-interpretation-of-amara-three-core-products-4ckp</link>
      <guid>https://dev.to/ovoronovskiy/in-depth-interpretation-of-amara-three-core-products-4ckp</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_xrp182g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewp0s12d473rg7xhclrk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_xrp182g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewp0s12d473rg7xhclrk.png" alt="Image description" width="875" height="410"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Where is Amara on the steep mountain of three core products development?&lt;br&gt;
Amara Finance has conquered numerous adversities and developed three core products with distinctive characteristics since its birth. With other products afoot, AmaraLend, AmaraLink and AmaraPay are recognized as three pillars of Amara Finance. This article, written by senior…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://amara-finance.medium.com/in-depth-interpretation-of-amaralend-three-core-products-ca955b89016f"&gt;Read more...&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>javascript - New array method at()</title>
      <author>Jose</author>
      <pubDate>Mon, 15 Nov 2021 20:06:20 +0000</pubDate>
      <link>https://dev.to/josec/javascript-new-array-method-at-3aip</link>
      <guid>https://dev.to/josec/javascript-new-array-method-at-3aip</guid>
      <description>&lt;p&gt;The new array method &lt;code&gt;at()&lt;/code&gt; allows us to get access to array indexes using both positive as negative indexes.&lt;/p&gt;

&lt;p&gt;This way we don't need to do maths anytime we want to access to the last array element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;movies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`Terminator 2`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`Rambo`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`Harry Potter`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`Star Wars`&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oldWay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The last movie is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;oldWay&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Star Wars&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newWay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The last movie is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;newWay&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Star Wars&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's not just for the last element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`First movie &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Terminator 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we pass an index that not exists it will return &lt;code&gt;Undefined&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At this time the array method &lt;code&gt;at()&lt;/code&gt; it's not compatible with all the browsers yet so for use it on production you will need a polyfill.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i0UzrqEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ykrzvsbeal4n7ljhavvr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i0UzrqEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ykrzvsbeal4n7ljhavvr.png" alt="Image description" width="880" height="425"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find more information at &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at"&gt;Mozilla MDN&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Automation and Multi-processing w/ Python</title>
      <author>Adrian Brown</author>
      <pubDate>Mon, 15 Nov 2021 20:05:01 +0000</pubDate>
      <link>https://dev.to/cloudguruab/automation-and-multi-processing-w-python-4d1k</link>
      <guid>https://dev.to/cloudguruab/automation-and-multi-processing-w-python-4d1k</guid>
      <description>&lt;h4&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h4&gt;

&lt;p&gt;When it comes to finding ways to run a task python offers us tools that allow us to automate those task, whether it be read/writes or api calls there's lots of usecases where this might be necessary.&lt;/p&gt;

&lt;p&gt;Lets start with understanding the what. So, what's a subprocess in python? &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A subprocess in Python is a task that a python script delegates to the Operative system (OS) - Daniel Diaz, GeekFlare&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In short, a subprocess allows us to achieve the unachievable by giving us a new level of cohesiveness with the operating system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#by-the-end-of-this-tutorial-you-will"&gt;
  &lt;/a&gt;
  By the end of this tutorial, you will
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Understand the concept of subprocess&lt;/li&gt;
&lt;li&gt;Have learned the basics of the Python multi-process/time library&lt;/li&gt;
&lt;li&gt;Found meaningful examples/usecases where you can implement the subprocess/multiprocessing library&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#core-concepts"&gt;
  &lt;/a&gt;
  Core Concepts
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;In this tutorial I am assuming you have some basic foundations in python programming, and data structures&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The nice part about the subprocess module is it falls under the core utilities offered to us as python developers. This means there is no need to install this module as a dependency using PIP or Pipenv, it's there for us already!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#calling the subprocess module into our environment
import subprocess
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Quick use cases,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Program checker&lt;/li&gt;
&lt;li&gt;Setting up a virtual environments &lt;/li&gt;
&lt;li&gt;Run other programming languages&lt;/li&gt;
&lt;li&gt;Open external programs &lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#our-application"&gt;
  &lt;/a&gt;
  Our Application
&lt;/h3&gt;

&lt;h6&gt;
  &lt;a href="#in-this-tutorial-we-will-be-looking-at-using-the-processstart-module-to-run-background-computations-for-excel-data"&gt;
  &lt;/a&gt;
  &lt;em&gt;In this tutorial we will be looking at using the Process.start() module to run background computations for excel data.&lt;/em&gt;
&lt;/h6&gt;

&lt;h3&gt;
  &lt;a href="#tutorial"&gt;
  &lt;/a&gt;
  Tutorial
&lt;/h3&gt;

&lt;p&gt;So after learning at a high level what the subprocess package does, and what it looks like at the import level you're ready to move towards this part of the tutorial. &lt;/p&gt;

&lt;p&gt;I wanted to give two quick distinctions we will be using the &lt;code&gt;Process.start()&lt;/code&gt; api from the &lt;code&gt;multiprocessing&lt;/code&gt; library offered by Python. &lt;/p&gt;

&lt;p&gt;So, why cover Subprocess's?&lt;/p&gt;

&lt;p&gt;I like to explain things backwards. For me this helps by understanding the full context of my environment in which I am learning from when what I am learning from is more reading intensive rather than visually intensive. &lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#recap-we-know-what-subprocesss-are-now-think-of-multiprocessing-as-the-stepchildreally-parent-to-what-a-subprocess-will-allow-you-to-do-instead-of-running-that-process-in-the-background-we-can-now-bring-it-foreground-by-running-multiple-processs-single-handedly"&gt;
  &lt;/a&gt;
  Recap: We know what subprocess's are now think of multiprocessing as the stepchild/(really parent) to what a subprocess will allow you to do. Instead of running that process in the background we can now bring it "foreground" by running multiple process's single handedly.
&lt;/h6&gt;

&lt;h3&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h3&gt;

&lt;p&gt;Here we are going to take our data set and using some basic arithmetic sort and sum all the entries in our list of data. Once&lt;br&gt;
this is complete we will set a task for this to occur every 60 seconds to simulate a batched process using code. To draw more from real world scenarios this data set could be healthcare/financial data for a company, and your jobs has been to extract, transform this data into a list. So, after doing so the company will need a summary for all the data in this list to make biweekly decisions. &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#our-data-set"&gt;
  &lt;/a&gt;
  Our data set
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#lets assume this data is updated every half minute
data = [3, 4, 7, 10, 2, 32, 15, 8]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from multiprocessing import Process
from file_location import data

def process_manager(data):
    while True:
        results = sum(data)
        time.sleep(60)
        return results

if __name__ == '__main__':
    p = Process(target=process_manager(), args=(data))
    p.start()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To explain, we import our &lt;code&gt;multiprocessing&lt;/code&gt; and near real time data object into our code environment. We define a function to govern our process that we want to run every minute. &lt;/p&gt;

&lt;p&gt;Here you can see how Process takes two arguments, the target function and arguments. These will work together to fork this process in our developer environment and run in sync with our application. &lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#note-python-has-been-known-to-lackstruggle-with-multiprocessing-and-concurrency-compared-to-other-toolspackages-offered-by-other-languages-like-rust-so-be-sure-to-check-the-trade-offs-when-making-timecost-decisions-feel-free-to-copypaste-and-try-this-in-your-own-ide-if-you-run-into-issues-spend-some-time-debugging-and-getting-your-code-to-run-this-should-be-a-safe-exercise-to-practice-your-debugging-skills-with-as-you-will-gain-experienceunderstanding-of-more-python"&gt;
  &lt;/a&gt;
  &lt;strong&gt;NOTE: Python has been known to lack/struggle with multiprocessing and concurrency compared to other tools/packages offered by other languages like rust, so be sure to check the trade offs when making time-cost decisions. Feel free to copy/paste and try this in your own IDE, if you run into issues spend some time debugging and getting your code to run. This should be a safe exercise to practice your debugging skills with as you will gain experience/understanding of more PYTHON!&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://docs.python.org/3/library/multiprocessing.html"&gt;Link to multiprocess&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
      <category>python</category>
    </item>
    <item>
      <title>My Next Adventure</title>
      <author>Shodipo Ayomide</author>
      <pubDate>Mon, 15 Nov 2021 19:47:38 +0000</pubDate>
      <link>https://dev.to/developerayo/my-next-adventure-3l0i</link>
      <guid>https://dev.to/developerayo/my-next-adventure-3l0i</guid>
      <description>&lt;p&gt;Moving on doesn't mean forgetting the past, the past is part of what made a way to the future we are in today.&lt;/p&gt;

&lt;p&gt;My time at Stack Overflow came to an end sometime recently, it was an exciting run working with some of the smartest engineers and community leaders I have ever met, which specifically thought me to do more and keep getting better, working daily and never seeing how good everyone is getting to stop me from getting even much better.  &lt;/p&gt;

&lt;p&gt;But, never forget one thing, part of the end of something huuge, is just the beginning of something far much greater.&lt;/p&gt;

&lt;p&gt;I'm super excited to be leading Global Developer Advocacy at &lt;a href="https://polygon.technology"&gt;Polygon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My team would be covering everything around the building of example applications on Polygon, community building, hackathons, engineering content, and more. &lt;/p&gt;

&lt;p&gt;I believe the future of Ethereum and the internet would be built on Polygon and I'm excited to be part of this huge story being forged.&lt;/p&gt;

&lt;p&gt;I got offers from companies I didn't expect, I saw offers coming in from Amazon, Snapchat, Ford Motors, Elastic Search, Scylladb, and more, all great products, then one popped up on my screen from Polygon, I wasn't particularly excited, but after 10 minutes of research and looking at what goes on at Polygon, it looked exactly like my next adventure, and now I've been working here and yes it's actually what I expected.&lt;/p&gt;

&lt;p&gt;Looking forward to more years at Polygon.&lt;/p&gt;

&lt;p&gt;As I said in the last one,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The journey is only 1% finished,&lt;/p&gt;

&lt;p&gt;Jisi nu ike "Be Strong".&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>engineering</category>
      <category>community</category>
      <category>leadership</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Number Generator With JS</title>
      <author>Walter Nascimento</author>
      <pubDate>Mon, 15 Nov 2021 19:17:58 +0000</pubDate>
      <link>https://dev.to/walternascimentobarroso/number-generator-with-js-213h</link>
      <guid>https://dev.to/walternascimentobarroso/number-generator-with-js-213h</guid>
      <description>&lt;p&gt;&lt;a href="https://medium.com/walternascimentobarroso-pt/gerador-de-n%C3%BAmeros-com-js-5ebdc220c180"&gt;[Clique aqui para ler em português]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we have a project that generates random numbers, odd numbers, even numbers and real numbers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;

&lt;p&gt;First let’s create the interface, we’ll do something simple, using just HTML.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Gerador de números&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"form_main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Quantidade&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Tipo&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"odd"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"odd"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"odd"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Impar&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"even"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"even"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"even"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Par&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"real"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"real"&lt;/span&gt; &lt;span class="na"&gt;checked=&lt;/span&gt;&lt;span class="s"&gt;'checked'&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"real"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Reais&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"generate"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Gerar&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"output"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this code we have an input that will define the amount of number we want to generate, in the type (radio) we have options (odd, even and real) and finally we have a button that calls the function to generate the numbers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;form_main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;output&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;form_main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;form_main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;odd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generateOdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;even&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generateEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;real&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generateReal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generateOdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;odd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;odd&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;odd&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;odd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;odd&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generateEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;even&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;even&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;even&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;even&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;even&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generateReal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have the javascript code that does all the magic, in the first line we have the selection of the button that calls the generate function, where the type that must be generated is checked and then its respective function is called.&lt;/p&gt;

&lt;p&gt;We have three functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;generateOdd&lt;/strong&gt; = This function loops over the total amount of numbers that must be generated and in the while statement it is checked if the number is even and finally it returns all the even numbers generated;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;generateEven&lt;/strong&gt; = This function loops over the total amount of numbers that must be generated and in the while statement it is checked if the number is odd, finally, all the generated odd numbers are returned;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;generateReal&lt;/strong&gt; = This function loops over the total amount of numbers that must be generated, finally all generated numbers are returned;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ready simple like that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;See below for the complete working project.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/WalterNascimento/embed/oNLLRqo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#youtube"&gt;
  &lt;/a&gt;
  Youtube
&lt;/h2&gt;

&lt;p&gt;If you prefer to watch it, see the development on youtube.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/WokYF0Y9BuI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h2&gt;

&lt;p&gt;If you have any questions, complaints or tips, you can leave them here in the comments. I will be happy to answer!&lt;/p&gt;

&lt;p&gt;😊😊 See you later! 😊😊&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tips</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Introducing OpenShift Container
Platform 4</title>
      <author>Ahmed Shendy</author>
      <pubDate>Mon, 15 Nov 2021 18:55:29 +0000</pubDate>
      <link>https://dev.to/ahmedshendy/introducing-openshift-containerplatform-4-16mc</link>
      <guid>https://dev.to/ahmedshendy/introducing-openshift-containerplatform-4-16mc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#openshift-container-platform-4-architecture"&gt;
  &lt;/a&gt;
  OpenShift Container Platform 4 Architecture
&lt;/h2&gt;

&lt;p&gt;Red Hat OpenShift Container Platform 4 (RHOCP 4) is a set of modular components and services built on top of Red Hat CoreOS and Kubernetes.&lt;br&gt;
One of the main advantages of using OpenShift is that it uses several nodes to ensure the resiliency and scalability of its managed applications. OpenShift forms a cluster of node servers that run containers and are centrally managed by a set of master servers.&lt;/p&gt;

&lt;p&gt;The following diagram illustrates the high-level logical overview of the OpenShift Container Platform 4 architecture.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6YXZWOau--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzn5di2bfoe6px2pi103.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6YXZWOau--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzn5di2bfoe6px2pi103.png" alt="OCP 4 Architecture" width="880" height="692"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The following diagram illustrates the OpenShift Container Platform stack.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cWkTcHR8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uav645q1roc4wplf8qkk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cWkTcHR8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uav645q1roc4wplf8qkk.png" alt="OCP Stack" width="880" height="463"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From bottom to top, and from left to right, this shows the basic container infrastructure, integrated and enhanced by Red Hat:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Red Hat CoreOS&lt;/strong&gt; is the base OS on top which OpenShift runs. Red Hat CoreOS is a Linux distribution focused on providing an immutable operating system for container execution.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CRI-O&lt;/strong&gt; is an implementation of the Kubernetes Container Runtime Interface (CRI) to enable using Open Container Initiative (OCI) compatible runtimes&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Kubernetes&lt;/strong&gt; manages a cluster of hosts, physical or virtual, running containers. It uses resources that describe multicontainer applications composed of multiple resources, and how they interconnect&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;etcd&lt;/strong&gt; is a distributed key-value store, used by Kubernetes to store configuration and state information about the containers and other resources inside the Kubernetes cluster&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Custom Resource Definitions (CRDs)&lt;/strong&gt; are resource types stored in etcd and managed by Kubernetes. These resource types form the state and configuration of all resources managed by OpenShift. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Containerized services&lt;/strong&gt; fulfill many PaaS infrastructure functions, such as networking and authorization. RHOCP uses the basic container infrastructure from Kubernetes and the underlying container runtime for most internal functions.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Runtimes and xPaaS&lt;/strong&gt; are base container images ready for use by developers, each preconfigured with a particular runtime language or database.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;DevOps Tools and User Experience&lt;/strong&gt;: RHOCP provides web UI and CLI management tools for managing user applications and RHOCP services.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following table lists some of the most commonly used terminology when you work with OpenShift.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Term&lt;/th&gt;
&lt;th&gt;Definition&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Node&lt;/td&gt;
&lt;td&gt;A server that hosts applications in an OpenShift cluster&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Master Node&lt;/td&gt;
&lt;td&gt;A node server that manages the control plane in an OpenShift cluster. Master nodes provide basic cluster services such as APIs or controllers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Worker Node&lt;/td&gt;
&lt;td&gt;Worker nodes execute workloads for the cluster. Application pods are scheduled onto worker nodes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Resource&lt;/td&gt;
&lt;td&gt;Resources are any kind of component definition managed by OpenShift.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Controller&lt;/td&gt;
&lt;td&gt;A controller is an OpenShift component that watches resources and makes changes attempting to move the current state towards the desired state.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Label&lt;/td&gt;
&lt;td&gt;A key-value pair that can be assigned to any OpenShift resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Namespace or Project&lt;/td&gt;
&lt;td&gt;A scope for OpenShift resources and processes, so that resources with the same name can be used in different contexts.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Console&lt;/td&gt;
&lt;td&gt;A web UI provided by OpenShift that allows developers and administrators to manage cluster resources.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#new-features-in-rhocp-4"&gt;
  &lt;/a&gt;
  New Features in RHOCP 4
&lt;/h2&gt;

&lt;p&gt;RHOCP 4 includes new features, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CoreOS as the default operating system for all nodes, offering an immutable infrastructure optimized for containers&lt;/li&gt;
&lt;li&gt;A new cluster installer, which simplifies the process of installing and updating the masters and worker nodes in the cluster&lt;/li&gt;
&lt;li&gt;A self-managing platform, able to automatically apply cluster updates and recoveries without disruption.&lt;/li&gt;
&lt;li&gt;A redesigned web console based on the concept of "personas", targeting both platform administrators and developers&lt;/li&gt;
&lt;li&gt;An Operator SDK to build, test, and package Operators.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#describing-openshift-resource-types"&gt;
  &lt;/a&gt;
  Describing OpenShift Resource Types
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Pods (pod)&lt;/strong&gt; are the basic unit of work for OpenShift.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Services (svc)&lt;/strong&gt; Specific IP/port combinations that provides access to a pool of pods. By default, services connect clients to pods in a round-robin fashion.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Replication Controllers (rc)&lt;/strong&gt; OpenShift resources that define how pods are replicated (horizontally scaled) to different nodes.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Persistent Volumes (pv)&lt;/strong&gt; Storage areas to be used by pods.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Persistent Volume Claims (pvc)&lt;/strong&gt; Requests for storage by a pod. A pvc links a pv to a pod so its containers can make use of it, usually by mounting the storage into the container's file system.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Config Maps (cm)&lt;/strong&gt; A set of keys and values that can be used by other resources. ConfigMaps and Secrets are usually used to centralize configuration values used by several resources. Secrets differ from ConfigMaps maps in that Secrets are used to store sensitive data (usually encrypted), and their access is restricted to fewer authorized users.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Deployment Configs (dc)&lt;/strong&gt; A set of containers included in a pod, and the deployment strategies to be used. A dc also provides a basic but extensible continuous delivery workflow.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Build Configs (bc)&lt;/strong&gt; A process to be executed in the OpenShift project. The OpenShift Source-to-Image (S2I) feature uses BuildConfigs to build a container image from application source code stored in a Git repository. A bc works together with a dc to provide a basic but extensible continuous integration and continuous delivery workflows.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Routes&lt;/strong&gt; DNS host names recognized by the OpenShift router as an ingress point for various applications and microservices deployed on the cluster.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Image Streams (is)&lt;/strong&gt; An image stream and its tags provide an abstraction for referencing container images from within OpenShift Container Platform. The image stream and its tags allow you to track what images are available and ensure that you are using the specific image you need even if the image in the repository changes. Image streams do not contain actual image data, but present a virtual view of related images, similar to an image repository.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>containers</category>
      <category>devops</category>
      <category>openshift</category>
    </item>
    <item>
      <title>What is Arccticy™?</title>
      <author>masspopcorn</author>
      <pubDate>Mon, 15 Nov 2021 18:44:18 +0000</pubDate>
      <link>https://dev.to/arccticy/what-is-arccticy-8hc</link>
      <guid>https://dev.to/arccticy/what-is-arccticy-8hc</guid>
      <description>&lt;h1&gt;
  &lt;a href="#arccticy%E2%84%A2-chat"&gt;
  &lt;/a&gt;
  Arccticy™ Chat
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#what-is-it"&gt;
  &lt;/a&gt;
  What is it?
&lt;/h3&gt;

&lt;p&gt;Arccticy™ Chat is an open-source, simple, (for now), chat platform.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#current-team"&gt;
  &lt;/a&gt;
  Current team:
&lt;/h3&gt;

&lt;p&gt;&lt;del&gt;Product Manager&lt;/del&gt;: (1 person)&lt;a href="https://replit.com/@dudeactualdev/"&gt;@dudeactualdev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;Head Developer&lt;/del&gt;: (2 ppl)(Taken - &lt;a href="https://replit.com/@Lankdev/"&gt;@Lankdev&lt;/a&gt; &lt;a href="https://replit.com/@StringentDev/"&gt;@StringentDev&lt;/a&gt;)(Advantages: Team Admin)&lt;/p&gt;

&lt;p&gt;Designer: (2 people)(Open - &lt;a href="https://replit.com/@ch1ck3n/"&gt;@ch1ck3n&lt;/a&gt;)) &lt;/p&gt;

&lt;p&gt;Back-end development: (3 people)(Available - &lt;a href="https://replit.com/@natethemaker"&gt;@natethemaker&lt;/a&gt;, &lt;a href="https://replit.com/@zplusfour"&gt;@zplusfour&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;del&gt;Marketing Assistant&lt;/del&gt;: (1 person)(Taken - &lt;a href="https://replit.com/@natethemaker"&gt;@natethemaker&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Developer: (2 people)(Available)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-planned"&gt;
  &lt;/a&gt;
  What's planned:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Design&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User Interface&lt;/li&gt;
&lt;li&gt;Landing Page&lt;/li&gt;
&lt;li&gt;Components&lt;/li&gt;
&lt;li&gt;Templates&lt;/li&gt;
&lt;li&gt;Desktop app with Electron.JS (All devs)&lt;/li&gt;
&lt;li&gt;Mobile app with Flutter? (Optional)&lt;/li&gt;
&lt;li&gt;Skeleton shimmers (better than using a circular indicator as it tells the user what type of content to expect)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Implement&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SPA routing (No reloading for moving channels/servers and to all pages)&lt;/li&gt;
&lt;li&gt;Video Chat (P2P?)&lt;/li&gt;
&lt;li&gt;Custom Database module (Stringent)&lt;/li&gt;
&lt;li&gt;API server (Stringent)&lt;/li&gt;
&lt;li&gt;Clusters module (standard nodejs module)&lt;/li&gt;
&lt;li&gt;Subscription service using API (NOT POSSIBLE ON REPL)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>chat</category>
      <category>css</category>
      <category>discuss</category>
      <category>node</category>
    </item>
    <item>
      <title>Are Design Patterns Important To Know ?</title>
      <author>Aimen Zairi</author>
      <pubDate>Mon, 15 Nov 2021 18:40:53 +0000</pubDate>
      <link>https://dev.to/zairiaimendev/are-design-patterns-important-to-know--4a0</link>
      <guid>https://dev.to/zairiaimendev/are-design-patterns-important-to-know--4a0</guid>
      <description>&lt;p&gt;For Beginners, Making Projects is Simply about writing code that works, in one of the previous posts we talked about why that won't do in the long term, and now we talk about another solution.&lt;br&gt;
That Solution is using Design Patterns to help make the code clear, flexible and extensible.&lt;br&gt;
In Big projects and when you become a real software developer with a job you will see that Design Patterns are used for every single big project.&lt;/p&gt;

&lt;p&gt;PS : this was supposed to come with a video with cool animations and all, but i lost the project file, hopefully the next topic comes with a video.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-not-to-use-design-patterns-"&gt;
  &lt;/a&gt;
  When Not To Use Design Patterns ?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Design Patterns + Small Project is the worst combination as it makes the code more complex and bigger than it should be.&lt;/li&gt;
&lt;li&gt;Using Design patterns doesn't Indicate Quality Code, as sometimes the implementation of these said patterns is wrong which leads to bad experience for developers checking your code.&lt;/li&gt;
&lt;li&gt;Once you implement a design pattern it is hard to remove when it's not needed or want to replace it with another design pattern.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-design-patterns-"&gt;
  &lt;/a&gt;
  When To Use Design Patterns ?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Design Patterns solve certain problems when writing the code and that's what you have to look for. If you are facing a known problem that has a design pattern as a solution it is recommended that you use.&lt;/li&gt;
&lt;li&gt;Creating flexibility and Making your project easily scalable.&lt;/li&gt;
&lt;li&gt;Code Re-Usability when needed.&lt;/li&gt;
&lt;li&gt;Easy to understand by other developers as design patterns are known standards, so any developer that picks your code can understand it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#commonly-used-patterns"&gt;
  &lt;/a&gt;
  Commonly Used Patterns
&lt;/h2&gt;

&lt;p&gt;Though these aren't "Design Patterns" they are called "Architectural Patterns" but nonetheless it's good to have an idea of what a pattern can look like.&lt;/p&gt;

&lt;p&gt;You may have seen these when trying out a new framework like Django, .NET ... etc.&lt;/p&gt;

&lt;p&gt;There are others but the two most known ones are : &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mvc-"&gt;
  &lt;/a&gt;
  MVC :
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Model&lt;/em&gt;&lt;/strong&gt; : Components That Describe the data in used the app.&lt;br&gt;
&lt;strong&gt;&lt;em&gt;View&lt;/em&gt;&lt;/strong&gt; : : Contains the interface that the user sees which&lt;br&gt;
contains the representation of this data&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Controller&lt;/em&gt;&lt;/strong&gt; : Contains all the business logic done in the&lt;br&gt;
application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mvvm-"&gt;
  &lt;/a&gt;
  MVVM :
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Model&lt;/em&gt;&lt;/strong&gt; : Describes The Data&lt;br&gt;
&lt;strong&gt;&lt;em&gt;View&lt;/em&gt;&lt;/strong&gt; : Defines the structure, layout and appearance of a view on screen &lt;br&gt;
&lt;strong&gt;&lt;em&gt;View Model&lt;/em&gt;&lt;/strong&gt; : A link between the View and Model, dealing with any view logic.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
      <category>design</category>
    </item>
    <item>
      <title>Speeding Up Docker Builds with Remote Cache</title>
      <author>Martin Heinz</author>
      <pubDate>Mon, 15 Nov 2021 18:37:23 +0000</pubDate>
      <link>https://dev.to/martinheinz/speeding-up-docker-builds-with-remote-cache-4890</link>
      <guid>https://dev.to/martinheinz/speeding-up-docker-builds-with-remote-cache-4890</guid>
      <description>&lt;p&gt;Building images in CI/CD pipeline can be quite different from builds on local machine. One major difference is availability of cache. In the local environment you most likely have all the resources, dependencies and image layers cached from previous builds and therefore your builds might take just a few seconds. In the CI pipeline on the other hand, there's no local cache, which can cause the builds to take several minutes. There's solution to this though, and in this article we will look at how we can solve it both with and without Docker and for any CI/CD platform you might be using.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-generic-solution"&gt;
  &lt;/a&gt;
  The Generic Solution
&lt;/h2&gt;

&lt;p&gt;The idea for the generic solution that would work in any environment is pretty simple - we need to somehow create or bring the cache to the pipeline. We have 2 options here - either we point the builder tool (e.g. Docker) to the repository of our image from which it can retrieve image layers and use them as cache, or alternatively, we store the layers on a filesystem which we make available to the pipeline and grab the layers from there. Either way, we need to create the cache by pushing the image to repository or to filesystem, then - in the subsequent builds - we try to use it and if that doesn't work because of cache-miss, we update it with new layers. &lt;/p&gt;

&lt;p&gt;Now let's see how we can do that in practice with various tools...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#docker"&gt;
  &lt;/a&gt;
  Docker
&lt;/h2&gt;

&lt;p&gt;The simplest solution to this problem is to use Docker with &lt;em&gt;BuildKit&lt;/em&gt;. BuildKit is a set of enhancements for &lt;code&gt;docker build&lt;/code&gt; which improves performance, storage management and adds couple extra features, including better caching functionality. To build container image with BuildKit, all we need to do is prepend &lt;code&gt;DOCKER_BUILDKIT=1&lt;/code&gt; to each command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Warm up cache&lt;/span&gt;
~ &lt;span class="nv"&gt;$ DOCKER_BUILDKIT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 docker build &lt;span class="nt"&gt;-t&lt;/span&gt; martinheinz/docker-cached &lt;span class="nt"&gt;--build-arg&lt;/span&gt; &lt;span class="nv"&gt;BUILDKIT_INLINE_CACHE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 &lt;span class="nb"&gt;.&lt;/span&gt; 
...
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; writing image sha256:09f473587beb1a1f240a776760655637ca00894a2a31b730019ecfee48d43848              0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; naming to docker.io/martinheinz/docker-cached                                                      0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; exporting cache                                                                                       0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; preparing build cache &lt;span class="k"&gt;for &lt;/span&gt;&lt;span class="nb"&gt;export                                                                   &lt;/span&gt;0.0s

~ &lt;span class="nv"&gt;$ &lt;/span&gt;docker push martinheinz/docker-cached

&lt;span class="c"&gt;# Build using cache repo&lt;/span&gt;
~ &lt;span class="nv"&gt;$ DOCKER_BUILDKIT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 docker build &lt;span class="nt"&gt;--cache-from&lt;/span&gt; martinheinz/docker-cached &lt;span class="nb"&gt;.&lt;/span&gt;
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;internal] load metadata &lt;span class="k"&gt;for &lt;/span&gt;docker.io/library/ubuntu:latest                                          0.5s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; importing cache manifest from martinheinz/docker-cached                                               0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; CACHED &lt;span class="o"&gt;[&lt;/span&gt;1/1] FROM docker.io/library/ubuntu@sha256:44ab2c3b26363823dcb965498ab06abf...50743df0d4172d   0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; exporting to image                                                                                    0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; exporting layers                                                                                   0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; writing image sha256:09f473587beb1a1f240a776760655637ca00894a2a31b730019ecfee48d43848              0.0s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This example should be self-explanatory to anyone who ever built an image with Docker. Only real difference between this and basic Docker usage is the addition of &lt;code&gt;BUILDKIT_INLINE_CACHE=1&lt;/code&gt; which tells BuildKit to enable inline cache exporter. This makes sure that Docker writes metadata needed for caching into the image. This metadata will be then used in subsequent builds to find out which layers can be cached. The only other difference in the above snippet is the command output - during the first build we can see that Docker exports the cache to the repository, while during the second one it imports cache manifests and also uses one cached layer.&lt;/p&gt;

&lt;p&gt;The use of BuildKit as part of Docker is convenient, but it hides some features and options. So, in case you want more control over the build and caching, then you can directly use the upstream BuildKit project. To do so, you will need to download binaries from &lt;a href="https://github.com/moby/buildkit/releases"&gt;GitHub release page&lt;/a&gt;, unpack it and move it into your path (e.g. &lt;code&gt;/usr/local/bin/&lt;/code&gt;). Finally, you need to start the BuildKit daemon and then you're ready to build:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo cp&lt;/span&gt; ~/Downloads/buildkit-v0.9.0.linux-amd64/bin/buildctl /usr/local/bin/
&lt;span class="nb"&gt;sudo cp&lt;/span&gt; ~/Downloads/buildkit-v0.9.0.linux-amd64/bin/buildkitd /usr/local/bin/
&lt;span class="nb"&gt;sudo cp&lt;/span&gt; ~/Downloads/buildkit-v0.9.0.linux-amd64/bin/buildkit-runc /usr/local/bin/
&lt;span class="nb"&gt;sudo &lt;/span&gt;buildkitd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we want to perform the same cached build with upstream BuildKit as we did with the Docker integration, we will need to craft a bit more complicated command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;buildctl build martinheinz/docker-cached &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--output&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;image,name&lt;span class="o"&gt;=&lt;/span&gt;docker.io/martinheinz/docker-cached,push&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--export-cache&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;inline &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--import-cache&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;registry,ref&lt;span class="o"&gt;=&lt;/span&gt;docker.io/martinheinz/docker-cached &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--frontend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dockerfile.v0 &lt;span class="nt"&gt;--local&lt;/span&gt; &lt;span class="nv"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;--local&lt;/span&gt; &lt;span class="nv"&gt;dockerfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;

...
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; pushing layers                                                                                    0.6s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; pushing manifest &lt;span class="k"&gt;for &lt;/span&gt;docker.io/martinheinz/docker-cached:latest@sha256:d5e200aa86c...18e234cc92   0.4s
...
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; exporting cache                                                                                      0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; preparing build cache &lt;span class="k"&gt;for &lt;/span&gt;&lt;span class="nb"&gt;export                                                                  &lt;/span&gt;0.0s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see here, there's a lot of flags and arguments that we had to specify, which can be annoying, but allows for great customizability. One advantage of this approach is that we don't need to run &lt;code&gt;docker push&lt;/code&gt;, instead we include &lt;code&gt;push=true&lt;/code&gt; in one of the arguments and &lt;code&gt;buildctl&lt;/code&gt; takes care of pushing the image.&lt;/p&gt;

&lt;p&gt;Another advantage of using BuildKit in this way is ability to push the image and the cached layers into separate repositories or tags. In this example we will store the image itself in &lt;code&gt;docker-cached:latest&lt;/code&gt;, while the cache will live in &lt;code&gt;docker-cached:buildcache&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;buildctl build martinheinz/docker-cached &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--output&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;image,name&lt;span class="o"&gt;=&lt;/span&gt;docker.io/martinheinz/docker-cached,push&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--export-cache&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;registry,ref&lt;span class="o"&gt;=&lt;/span&gt;docker.io/martinheinz/docker-cached:buildcache &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--import-cache&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;registry,ref&lt;span class="o"&gt;=&lt;/span&gt;docker.io/martinheinz/docker-cached:buildcache &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--frontend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dockerfile.v0 &lt;span class="nt"&gt;--local&lt;/span&gt; &lt;span class="nv"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;--local&lt;/span&gt; &lt;span class="nv"&gt;dockerfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;

&lt;span class="c"&gt;# During first build  - `=&amp;gt; ERROR importing cache manifest from docker.io/martinheinz/docker-cached:buildcache`&lt;/span&gt;
&lt;span class="c"&gt;# During second build - `=&amp;gt; importing cache manifest from docker.io/martinheinz/docker-cached:buildcache`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For completeness, I will also mention that it's also possible to leverage the above mentioned advanced features of BuildKit without installing it separately. For that you will need &lt;code&gt;buildx&lt;/code&gt; which is a Docker CLI plugin for extended build capabilities. &lt;code&gt;buildx&lt;/code&gt; however, has different arguments than &lt;code&gt;buildctl&lt;/code&gt;, so you will need to adjust your build commands based on the docs &lt;a href="https://github.com/docker/buildx/blob/master/docs/reference/buildx_build.md#-use-an-external-cache-source-for-a-build---cache-from"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With that said, we're doing all these shenanigans to improve CI/CD build performance, so running these commands locally is nice for testing, but we need to somehow perform this in the environment of some CI/CD platform, and the environment of choice for me is Kubernetes.&lt;/p&gt;

&lt;p&gt;To make this work in Kubernetes, we will need to bring a couple of additional things - namely credentials for pushing the image and volume used as a workspace:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;batch/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Job&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;buildkit&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;restartPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Never&lt;/span&gt;
      &lt;span class="na"&gt;initContainers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prepare&lt;/span&gt;
          &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;alpine:3.10&lt;/span&gt;
          &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;sh&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;-c&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;echo&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-e&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;"FROM&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ubuntu\nENTRYPOINT&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;["/bin/bash",&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-c",&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;"echo&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;hello"]\n"&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;/workspace/Dockerfile'&lt;/span&gt;
          &lt;span class="na"&gt;volumeMounts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;workspace&lt;/span&gt;
              &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/workspace&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;buildkit&lt;/span&gt;
          &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;moby/buildkit:master&lt;/span&gt;
          &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;buildctl-daemonless.sh&lt;/span&gt;
          &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;build"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--frontend"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;dockerfile.v0"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--local"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;context=/workspace"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--local"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;dockerfile=/workspace"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; 
                  &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--output"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;type=image,name=docker.io/martinheinz/docker-cached,push=true"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--import-cache"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
                  &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;type=registry,ref=docker.io/martinheinz/docker-cached"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--export-cache"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;type=inline"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
          &lt;span class="na"&gt;securityContext&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;privileged&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
          &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;DOCKER_CONFIG&lt;/span&gt;
              &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/docker/.docker&lt;/span&gt;
          &lt;span class="na"&gt;volumeMounts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker-config&lt;/span&gt;
              &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/docker/.docker&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;workspace&lt;/span&gt;
              &lt;span class="na"&gt;readOnly&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
              &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/workspace&lt;/span&gt;
      &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker-config&lt;/span&gt;
          &lt;span class="na"&gt;secret&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;secretName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;buildkit-docker-config&lt;/span&gt;
            &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config.json&lt;/span&gt;
                &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config.json&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;workspace&lt;/span&gt;
          &lt;span class="na"&gt;persistentVolumeClaim&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;claimName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;buildkit-workspace&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above is a single &lt;em&gt;Job&lt;/em&gt;, which first creates a &lt;code&gt;Dockerfile&lt;/code&gt; inside the workspace provided by &lt;em&gt;PersistentVolumeClaim&lt;/em&gt; using an init container. The actual job then performs the build as shown earlier. It also mounts repository credentials from &lt;em&gt;Secret&lt;/em&gt; named &lt;code&gt;buildkit-docker-config&lt;/code&gt;, which is needed so that BuildKit can push both the cached layers and the image itself to the repository.&lt;/p&gt;

&lt;p&gt;For clarity, I omitted the manifests of the PersistentVolumeClaim and Secret used above, but if you want test it out yourself, then you can find those &lt;a href="https://gist.github.com/MartinHeinz/e5cc1f8aa00b1c44d19cf685144d16e4"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dockerless"&gt;
  &lt;/a&gt;
  Docker-less
&lt;/h2&gt;

&lt;p&gt;Docker is not however, the only tool for building images that can help us leverage cache during CI/CD builds. One of the alternatives to Docker is Google's Kaniko. Its advantage is that it's meant to be run as container image, which makes it suitable for environments like Kubernetes. &lt;/p&gt;

&lt;p&gt;Considering that this tool is meant for CI/CD pipelines, we need to simulate the same conditions locally to be able to test it. To do so, we will need a couple of directories and files that will be used as volumes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;volume &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;volume
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'FROM ubuntu'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; Dockerfile
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'ENTRYPOINT ["/bin/bash", "-c", "echo hello"]'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; Dockerfile
&lt;span class="nb"&gt;mkdir &lt;/span&gt;cache
&lt;span class="nb"&gt;mkdir &lt;/span&gt;config
&lt;span class="nb"&gt;cp&lt;/span&gt; ~/.docker/config.json config/config.json  &lt;span class="c"&gt;# or podman login --authfile config/config.json&lt;/span&gt;

tree
&lt;span class="nb"&gt;.&lt;/span&gt;
|____Dockerfile    -&amp;gt; Sample Dockerfile &lt;span class="o"&gt;(&lt;/span&gt;will be mounted as workspace&lt;span class="o"&gt;)&lt;/span&gt;
|____cache         -&amp;gt; Cache directory/volume
|____config        -&amp;gt; Config directory/volume
  |____config.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above we created 3 things - a sample &lt;code&gt;Dockerfile&lt;/code&gt; consisting of single layer, which we will use for testing. Next, we created a &lt;code&gt;cache&lt;/code&gt; directory which will be mounted into container and used for storing cached image layers. Finally, we created &lt;code&gt;config&lt;/code&gt; directory, containing registry credentials, which will be mounted read-only.&lt;/p&gt;

&lt;p&gt;In previous section we only looked at the caching image layers using image registry/repository, with Kaniko though, we can also use a local directory/volume as a cache source. To do that we first need to &lt;em&gt;"warm-up"&lt;/em&gt; the cache aka populate it with image layers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Warm up (populate) the cache with base image(s)&lt;/span&gt;
~ &lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;:/workspace &lt;span class="se"&gt;\&lt;/span&gt;
    gcr.io/kaniko-project/warmer:latest &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--cache-dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/workspace/cache &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ubuntu  &lt;span class="c"&gt;# --image=more-images&lt;/span&gt;

~ &lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls &lt;/span&gt;cache/
sha256:3555f4996aea6be945ae1532fa377c88f4b3b9e6d93531f47af5d78a7d5e3761
sha256:3555f4996aea6be945ae1532fa377c88f4b3b9e6d93531f47af5d78a7d5e3761.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: This section is about building images and caching images without docker, however during testing outside of Kubernetes, we still need to run the Kaniko image somehow, and that's using &lt;code&gt;docker&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Kaniko project provides 2 images - &lt;code&gt;warmer&lt;/code&gt; and &lt;code&gt;executor&lt;/code&gt;, above we used the former, which takes variable number of images and uses them to populate specified cache directory.&lt;/p&gt;

&lt;p&gt;With the cache ready, we can move onto building the image. This time we use the &lt;code&gt;executor&lt;/code&gt; image, passing in 2 volumes - one for registry credential (mounted read-only) and one for workspace, which we pre-populated with sample &lt;code&gt;Dockerfile&lt;/code&gt;. Additionally, we specify flags to enable caching as well as destination, where the final image will be pushed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Use the cache&lt;/span&gt;
~ &lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;/config/config.json:/kaniko/.docker/config.json:ro &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;:/workspace &lt;span class="se"&gt;\&lt;/span&gt;
    gcr.io/kaniko-project/executor:latest &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--dockerfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/workspace/Dockerfile &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--cache&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--cache-dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/workspace/cache &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--destination&lt;/span&gt; martinheinz/kaniko-cached &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--context&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;:///workspace/

...
INFO[0002] Returning cached image manifest              
INFO[0002] Found sha256:3555f4996aea6be945ae1532fa377c88f4b3b9e6d93531f47af5d78a7d5e3761 &lt;span class="k"&gt;in &lt;/span&gt;&lt;span class="nb"&gt;local &lt;/span&gt;cache 
INFO[0002] Found manifest at /workspace/cache/sha256:3555f4996aea6be945ae1532fa377c88f4b3b9e6d93531f47af5d78a7d5e3761.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These examples show us how it works in theory, but in practice we will want to run this on Kubernetes. For that we will need similar set of objects as in the example with BuildKit, that is - &lt;a href="https://gist.github.com/MartinHeinz/1c9700d197f0e565d314555b26e66890"&gt;volume claim for cache directory&lt;/a&gt;, &lt;a href="https://gist.github.com/MartinHeinz/a1270557722478b65a4ec33f632a36cb"&gt;volume claim for workspace (Dockerfile)&lt;/a&gt;, a secret with registry credentials and a Job or Pod that will execute &lt;code&gt;kaniko&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Pod&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gcr.io/kaniko-project/executor:latest&lt;/span&gt;
    &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--dockerfile=/workspace/Dockerfile"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
           &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--context=dir://workspace"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
           &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--destination=martinheinz/kaniko-cached"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
           &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--cache"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
           &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--cache-dir=/cache"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
    &lt;span class="na"&gt;volumeMounts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-docker-config&lt;/span&gt;
        &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/kaniko/.docker/&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-cache&lt;/span&gt;
        &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/cache&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-workspace&lt;/span&gt;
        &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/workspace&lt;/span&gt;
  &lt;span class="na"&gt;restartPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Never&lt;/span&gt;
  &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-docker-config&lt;/span&gt;
      &lt;span class="na"&gt;secret&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;secretName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-docker-config&lt;/span&gt;
        &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config.json&lt;/span&gt;
            &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config.json&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-cache&lt;/span&gt;
      &lt;span class="na"&gt;persistentVolumeClaim&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;claimName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-cache&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-workspace&lt;/span&gt;
      &lt;span class="na"&gt;persistentVolumeClaim&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;claimName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-workspace&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, assuming that we already have the cache populated using &lt;code&gt;warmer&lt;/code&gt; image, we run &lt;code&gt;kaniko&lt;/code&gt; executor, which retrieves &lt;code&gt;Dockerfile&lt;/code&gt; from &lt;code&gt;/workspace&lt;/code&gt; directory, cached layers from &lt;code&gt;/cache&lt;/code&gt; and credentials from &lt;code&gt;/kaniko/.docker/config.json&lt;/code&gt;. If everything goes well, we should see in logs that the cached layers were found by Kaniko &lt;code&gt;executor&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Caching layers from local volume can be useful, but most of the time you'll probably want to use remote registry. Kaniko can do that too, and all we need to do is change a couple of arguments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Pod&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gcr.io/kaniko-project/executor:latest&lt;/span&gt;
    &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--dockerfile=/workspace/Dockerfile"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
           &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--context=dir://workspace"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
           &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--destination=martinheinz/kaniko-cached"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
           &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--cache"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
           &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--cache-copy-layers"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
           &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--cache-repo=martinheinz/kaniko-cached"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
    &lt;span class="na"&gt;volumeMounts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-docker-config&lt;/span&gt;
        &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/kaniko/.docker&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-workspace&lt;/span&gt;
        &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/workspace&lt;/span&gt;
  &lt;span class="na"&gt;restartPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Never&lt;/span&gt;
  &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-docker-config&lt;/span&gt;
      &lt;span class="na"&gt;secret&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;secretName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-docker-config&lt;/span&gt;
        &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config.json&lt;/span&gt;
            &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config.json&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-workspace&lt;/span&gt;
      &lt;span class="na"&gt;persistentVolumeClaim&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;claimName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-workspace&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The important change we made here is that we replaced &lt;code&gt;--cache-dir&lt;/code&gt; flag with &lt;code&gt;--cache-repo&lt;/code&gt;. Additionally, we were also able to omit the volume claim used for cache directory.&lt;/p&gt;

&lt;p&gt;Besides Kaniko, there are quite a few other tools that can build a container image. The most notable one is &lt;code&gt;podman&lt;/code&gt;, which leverages &lt;code&gt;buildah&lt;/code&gt; to build images. Using these 2 for caching however, is not an option right now. The &lt;code&gt;--cache-from&lt;/code&gt; option is available in &lt;code&gt;buildah&lt;/code&gt;, it is however NOOP, so even if you specify it, nothing will happen. So, if you want to migrate your CI from Docker to Buildah and the caching is a requirement, then you will need to wait for &lt;a href="https://github.com/containers/buildah/issues/620"&gt;this issue&lt;/a&gt; to be implemented/resolved.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;This article described how we can leverage layer caching to improve build performance. If you're experiencing bad performance in image builds, chances are though, that problem doesn't lie in missing caching, but rather in the commands in your &lt;code&gt;Dockerfile&lt;/code&gt;. Therefore, before you in jump into implementing layer caching, I'd suggest you try to optimize structure of your &lt;code&gt;Dockerfiles&lt;/code&gt; first. Additionally, the caching will only work if you have well-structured &lt;code&gt;Dockerfiles&lt;/code&gt;, because after first cache miss, no further cached layers can be used.&lt;/p&gt;

&lt;p&gt;Besides caching layers, you might also want to cache dependencies, that way you can save time needed to download libraries from NPM, PyPI, Maven or other artifact repositories. One way to do this would be using BuildKit and its &lt;code&gt;--mount=type=cache&lt;/code&gt; flag described &lt;a href="https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/syntax.md#example-cache-go-packages"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>kubernetes</category>
      <category>devops</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
