<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Fetching a API, vs using ContextProvider. When should you use just fetching vs a ContextProvider??</title>
      <author>Bret</author>
      <pubDate>Tue, 06 Jul 2021 18:09:44 +0000</pubDate>
      <link>https://dev.to/yobretyo/fetching-a-api-vs-using-contextprovider-when-should-you-use-just-fetching-vs-a-contextprovider-12cg</link>
      <guid>https://dev.to/yobretyo/fetching-a-api-vs-using-contextprovider-when-should-you-use-just-fetching-vs-a-contextprovider-12cg</guid>
      <description>&lt;p&gt;I’m using Next for the first time and I’m liking it, &lt;br&gt;
There is a choice tho of… when do i need a “ContextProvider”?&lt;/p&gt;

&lt;p&gt;In my Next project i have several files to get data from Airtable:&lt;/p&gt;

&lt;p&gt;In Airtable.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
const Airtable = require('airtable');
const base = new Airtable({ apiKey: process.env.AIRTABLE_API_KEY }).base(process.env.AIRTABLE_BASE_ID);
const table = base(process.env.AIRTABLE_TABLE_NAME);
const table2 = base(process.env.AIRTABLE_TABLE_NAME2);
const table3 = base(process.env.AIRTABLE_TABLE_NAME3);

const minifyRecords = (records) =&amp;gt; {
    return records.map(record =&amp;gt; getMinifiedRecord(record));
}

const getMinifiedRecord = (record) =&amp;gt; {
    if(!record.fields.completed) {
        record.fields.completed = false;
    }
    return {
        id: record.id,
        fields: record.fields,
    }
}
export { table, table2, table3, getMinifiedRecord, minifyRecords}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then in my getCorals.js i have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
import { table, minifyRecords } from './utils/Airtable'

export default async (req, res) =&amp;gt; {
    try{
    const records = await table.select({}).firstPage();
    const minifiedRecords = minifyRecords(records);
    res.statusCode = 200;
    res.json(minifiedRecords);
    //console.log(records)
    }catch(err){
    res.statusCode = 500;
    res.json({msg: 'something went wrong'})
}
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The in my actual page to show my data i have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
import React from 'react'
import { CoralProvider } from '../contexts/CoralContext'
import { table, minifyRecords } from '../pages/api/utils/Airtable'
// im at video 6 in Airtable Nextjs video series....ITS WORKING!!!

export default function Coral({initialCoral}) {
    // console log initialCoral... it logs them out
    //console.log(initialCoral);
    try{
    return (
        &amp;lt;CoralProvider&amp;gt;
            &amp;lt;h1&amp;gt;ZOAS PAGE&amp;lt;/h1&amp;gt;
        &amp;lt;/CoralProvider&amp;gt;
    )
    }catch(err){
        console.log(err);
        return{
            props: {
                err: "something went wrong"
            }
        }
    }
}

export async function getServerSideProps(context) {
    const coral = await table.select({}).firstPage();
    return {
        props: {
            InitCoral: minifyRecords(coral)
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OOOOOOOORRRRRR&lt;/p&gt;

&lt;p&gt;Do i just fetch my data like this:??????&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
import React from 'react'
import Coralapi from '../../API/Coralapi'
import { useEffect, useState } from "react";
import Airtable from 'airtable';
require('dotenv').config();

const base = new Airtable({apiKey: `${process.env.REACT_APP_AIRTABLE_API_KEY}` }).base(`${process.env.REACT_APP_AIRTABLE_BASE_ID}`);

function Coralpage() {
   const [coral, setCoral] = useState([]);
   const [care, setCare] = useState([]);
   useEffect(() =&amp;gt; {
    base("CORAL")
    .select({view: "Gallery" })
    .eachPage((records, fetchNextPage) =&amp;gt; {
        console.log(records);
        setCoral(records);
        fetchNextPage();
    });
    base("CARE")
    .select({view: "Gallery" })
    .eachPage((records, fetchNextPage) =&amp;gt; {
        console.log(records);
        setCare(records);
        fetchNextPage();
    });

},[]);
return (
    &amp;lt;&amp;gt;
    &amp;lt;h1&amp;gt;Coral Products&amp;lt;/h1&amp;gt;
    {coral.map((coral) =&amp;gt; (
        &amp;lt;Coralapi 
        key={coral.id}
        coral={coral}
        care={care.filter(
            (care) =&amp;gt; care.coral
        )}
        /&amp;gt;
    ))}
    &amp;lt;/&amp;gt;
);
}

export default Coralpage

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;IM NOT TOO SURE ON WHAT TO USE???&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>help</category>
      <category>devops</category>
    </item>
    <item>
      <title>CSS Tip - Perfect Flexbox overflow items</title>
      <author>Tony</author>
      <pubDate>Tue, 06 Jul 2021 18:06:46 +0000</pubDate>
      <link>https://dev.to/immannino/css-tip-perfect-flexbox-overflow-items-1ceb</link>
      <guid>https://dev.to/immannino/css-tip-perfect-flexbox-overflow-items-1ceb</guid>
      <description>&lt;p&gt;&lt;sup&gt;&lt;a href="https://www.pexels.com/photo/white-and-blue-painted-wall-2585552/"&gt;Credits for cover photo&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The following snippet is a powerful set of CSS rules I use all the time. I think it solves a common layout issue I want to help others solve.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://coryrylan.com/blog/css-gap-space-with-flexbox"&gt;Original Source for the code&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ever needed to create a UI that required a list of items of varying length and you wanted to make it look fluid and pretty at the same time? You tried to use flex box but it all ended up looking like the image below?&lt;/p&gt;

&lt;p&gt;Follow along for a quick CSS snippet that helps level up your CSS flex game.&lt;/p&gt;

&lt;p&gt;What we will be creating:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1vk5UILY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2j1xbns0p22uomz8bawt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1vk5UILY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2j1xbns0p22uomz8bawt.gif" alt="Crazy Gif Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Table of Contents&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#the-problem"&gt;The Problem&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#the-solution"&gt;The Solution&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#the-explanation"&gt;The Explanation&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h3&gt;

&lt;p&gt;We want to write some CSS that works when tackling variable length lists of items. In a lot of cases, when we start styling these types of pages it looks like the image below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fe24bEV5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.stack.imgur.com/1P8vG.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fe24bEV5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.stack.imgur.com/1P8vG.gif" alt="The problem"&gt;&lt;/a&gt;&lt;br&gt;
&lt;sup&gt;&lt;a href="https://stackoverflow.com/questions/54384305/dynamic-width-parent-with-flexbox-column-wrapping"&gt;source&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Here is what I want to solve:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;The margin issue&lt;/strong&gt; - Children within a Flex parent do not &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing"&gt;collapse margins&lt;/a&gt;. So when we apply margins to them for spacing purposes, we end up in a scenario where the first/last elements in a row have less margin on their outsides than they do next to their siblings. This becomes an issue when we want a consistent &lt;em&gt;gap&lt;/em&gt; between elements in our list.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's an example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Unu8rP_---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8a07xigalqddrdw1ojgp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Unu8rP_---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8a07xigalqddrdw1ojgp.png" alt="Margin Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The overflow elements&lt;/strong&gt; - Depending on the size of our page and the size of the elements in our list, we can have a variable number of items that "overflow" at the end of the list. How do we tackle this? Do we want them to be right justified? Do we want to hardcode some styles for each situation: if 1 item, width 100%, if 2 items width 50%, etc etc? &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The size &amp;amp; spacing of the items&lt;/strong&gt; - How much tweaking do we want to do to ensure the items look good? Are we okay with a &lt;code&gt;max-width&lt;/code&gt; or do we need a &lt;code&gt;min-width&lt;/code&gt; for the item to look okay? Are we using all the white space? Are things centered or is everything left-aligned? &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Is IE friendly&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h3&gt;

&lt;p&gt;Here is the solution to our problems listed above. I will explain this in further detail below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.flex&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.flex&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;flex-grow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-shrink&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-basis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;225px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://flex-basis-fluid-layout-demo.stackblitz.io"&gt;A small demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What it looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZKdlKK4g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8vmxk4r427v5i6gu9cos.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZKdlKK4g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8vmxk4r427v5i6gu9cos.png" alt="Example demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-explanation"&gt;
  &lt;/a&gt;
  The Explanation
&lt;/h3&gt;

&lt;p&gt;The core elements to our solution are &lt;code&gt;margin&lt;/code&gt;, the &lt;code&gt;calc&lt;/code&gt; function, and flexbox's &lt;code&gt;flex-grow&lt;/code&gt; and &lt;code&gt;flex-basis&lt;/code&gt; properties.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#margin"&gt;
  &lt;/a&gt;
  Margin
&lt;/h4&gt;

&lt;p&gt;In the snippet we're doing 3 things with margin:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Defining how big of a gap we want between the elements.&lt;/li&gt;
&lt;li&gt;Adding &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;left&lt;/code&gt; margin to all the children elements.&lt;/li&gt;
&lt;li&gt;Translating the parent &lt;code&gt;.flex&lt;/code&gt; container in the opposite direction of our top and left margins we added on the children.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This snippet is essentially fixing our margin issue I outlined above.&lt;/p&gt;

&lt;p&gt;Here is the margin applied to the children:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U94iMZGh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1q53mzv78qe9p5jdp20i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U94iMZGh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1q53mzv78qe9p5jdp20i.png" alt="Flex children"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the negative margin applied to the &lt;code&gt;.flex&lt;/code&gt; container:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--muamUfeC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6pn1vlba7dighd0k6ej5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--muamUfeC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6pn1vlba7dighd0k6ej5.png" alt="Flex parent"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#but-but-but-youre-forgetting-about-the-raw-gap-endraw-property"&gt;
  &lt;/a&gt;
  BUT BUT BUT You're forgetting about the &lt;code&gt;gap&lt;/code&gt; property!!!!
&lt;/h5&gt;

&lt;p&gt;Yes and no. This same functionality can be applied using the built in &lt;code&gt;gap&lt;/code&gt; property, but this currently has limited support in some mobile browsers and all of IE.&lt;/p&gt;

&lt;p&gt;I know that IE is going away, but I work in an industry &amp;amp; field that supports around 5-10% of our customer base on IE 11 and need a solution that I can trust works. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/almanac/properties/g/gap/"&gt;Here is a good article outlining the gap property&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#flex-grow"&gt;
  &lt;/a&gt;
  Flex Grow
&lt;/h4&gt;

&lt;p&gt;If you have never used &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow"&gt;flex-grow&lt;/a&gt; before, I highly recommend reading about how it works. The quick and dirty explanation is that it allows our flex children to expand to fill the row/column that they are in.&lt;/p&gt;

&lt;p&gt;In this case we're using the property &lt;code&gt;flex-grow: 1;&lt;/code&gt;. This tells the parent "Hey for all the children you have, make sure they take up &lt;em&gt;ALL&lt;/em&gt; of the white space available".&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;flex-grow: 0;&lt;/code&gt; (default)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4Jtdgskj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0c95rhyy9kd3xgfcsiu5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4Jtdgskj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0c95rhyy9kd3xgfcsiu5.png" alt="flex grow no"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;flex-grow: 1;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--muamUfeC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6pn1vlba7dighd0k6ej5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--muamUfeC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6pn1vlba7dighd0k6ej5.png" alt="Flex grow yes"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#flex-basis"&gt;
  &lt;/a&gt;
  Flex Basis
&lt;/h4&gt;

&lt;p&gt;I am going to be honest I really didn't understand what flex basis was until I learned about this css snippet. But, this snippet is a perfect way to understand the concepts of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis"&gt;how it works&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Flex basis lets us define the &lt;em&gt;base&lt;/em&gt; or minimum size we want an element to be in a flex container. Whats nice about this is for scenarios where we won't know how many elements we're going to be styling in our list, we can treat the &lt;code&gt;flex-basis&lt;/code&gt; as our "default" size, and then with &lt;code&gt;flex-grow&lt;/code&gt;, if we have less items on the last line, they will fill up the remaining space and look nice. &lt;/p&gt;

&lt;p&gt;Without flex-basis or flex-grow:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_tzeDRZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uoukaw5enadbwcdtuwkj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_tzeDRZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uoukaw5enadbwcdtuwkj.png" alt="Without both"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With flex-basis, Without flex-grow&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y-k2EVD8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nape0ws77dd542088fg2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y-k2EVD8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nape0ws77dd542088fg2.png" alt="With Basis"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With both flex-basis and flex-grow&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---n_eEjuY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qdmid47ni7u88ui73nn2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---n_eEjuY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qdmid47ni7u88ui73nn2.png" alt="With Both"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Putting it all together in the long-form way, we have the the snippet again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.flex&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;/*  */&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; 

  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.flex&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;flex-grow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-shrink&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-basis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;225px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gap&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://flex-basis-fluid-layout-demo.stackblitz.io"&gt;The small demo again&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;All in all, I hope you can take these learnings and apply them to your web projects as you see fit. I hope you learned something new and if anything -- I hope have a better understanding of how flexbox works.&lt;/p&gt;

&lt;p&gt;Thank you for reading.&lt;/p&gt;

</description>
      <category>css</category>
      <category>flexbox</category>
      <category>ui</category>
      <category>html</category>
    </item>
    <item>
      <title>useToggle: Custom react hook for toggle</title>
      <author>Mehul Lakhanpal</author>
      <pubDate>Tue, 06 Jul 2021 18:05:55 +0000</pubDate>
      <link>https://dev.to/318097/usetoggle-custom-react-hook-for-toggle-3g7</link>
      <guid>https://dev.to/318097/usetoggle-custom-react-hook-for-toggle-3g7</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// File: useToggle.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useToggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setVisibility&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setVisibility&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setToggleStatus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setVisibility&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setToggleStatus&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useToggle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useToggle&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./useToggle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toggleVisibility&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setVisibility&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useToggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;toggleVisibility&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Toggle&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setVisibility&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hide&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hidden content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Thanks for reading 💙&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Follow &lt;strong&gt;@codedrops.tech&lt;/strong&gt; for more.&lt;br&gt;&lt;br&gt;
&lt;a href="https://www.instagram.com/codedrops.tech/"&gt;Instagram&lt;/a&gt; ● &lt;a href="https://twitter.com/codedrops_tech"&gt;Twitter&lt;/a&gt; ● &lt;a href="https://www.facebook.com/codedrops.tech/"&gt;Facebook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Micro-Learning ● Web Development ● Javascript ● MERN stack&lt;br&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://www.codedrops.tech/"&gt;codedrops.tech&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Projects&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=mehullakhanpal.file-ops"&gt;File Ops&lt;/a&gt; - A VS Code extension to easily tag/alias files &amp;amp; quick switch between files&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Git: Fixing Unsigned GPG Commits</title>
      <author>zahrakhadijha</author>
      <pubDate>Tue, 06 Jul 2021 17:38:24 +0000</pubDate>
      <link>https://dev.to/zahrakhadijha/git-fixing-unsigned-gpg-commits-phn</link>
      <guid>https://dev.to/zahrakhadijha/git-fixing-unsigned-gpg-commits-phn</guid>
      <description>&lt;p&gt;Before I started my job, all I knew how to do with Git was&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .
git commit -m "commit message"
git push origin &amp;lt;branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On my first day, I learned that I needed to set up a &lt;a href="https://docs.github.com/en/github/authenticating-to-github/managing-commit-signature-verification/generating-a-new-gpg-key"&gt;GPG key&lt;/a&gt; so that I could sign my commit messages. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-the-purpose-of-signing-your-commits"&gt;
  &lt;/a&gt;
  What's the purpose of signing your commits?
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;GnuPG&lt;/strong&gt; allows you to encrypt and sign your data and communications. &lt;strong&gt;GPG&lt;/strong&gt;, or GNU Privacy Guard is a public key cryptography implementation. This allows for the secure transmission of information between parties and can be used to verify that the origin of a message is genuine. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Signing your commits allows you to have ownership over your work and your communication.&lt;/p&gt;

&lt;p&gt;However, sometimes, I forget to sign my commits and have to go back and fix it 😅&lt;br&gt;
&lt;a href="https://i.giphy.com/media/1Y7ChRtbWnYONjDidg/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/1Y7ChRtbWnYONjDidg/giphy.gif" alt="Whoops GIPHY"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It felt daunting at first because I was afraid I'd mess up my commits and therefore, my entire branch and get into a git mess. But as I've been religiously practicing Git, I'm getting more comfortable fixing my mistakes and figuring out solutions to conflicts.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h3&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--_SHx8r9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1391554477048619013/6KkkYGP8_normal.jpg" alt="Zahra Khadijha 🤍 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Zahra Khadijha 🤍
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/zahrakhadijha"&gt;@zahrakhadijha&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Whoops, forgot to sign my commits. So I learned how to fix them with: &lt;br&gt;&lt;br&gt;✅`git rebase -i ID-OF-COMMIT-BEFORE-FIX`&lt;br&gt;✅ change `pick` to `edit` for the commits needing a GPG signature&lt;br&gt;✅`git commit --amend --no-edit -S`&lt;br&gt;✅`git rebase --continue`&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/DEVCommunity"&gt;#DEVCommunity&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/100DaysOfCode"&gt;#100DaysOfCode&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:56 PM - 06 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1412440310672723968" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1412440310672723968" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1412440310672723968" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;1 - &lt;strong&gt;&lt;em&gt;Interactive Rebase.&lt;/em&gt;&lt;/strong&gt; You want to begin the rebase at the commit just before the commit that needs to be modified. In my case, it turned out that NONE of my commits were signed after finishing up an entire project/task. So I had to go back and sign them all. I started at the very top of the commits:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git rebase -i 3a08ed4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will open a text editor that'll show all the commits you have in your branch. They'll all say &lt;code&gt;pick&lt;/code&gt; next to each commit ID and the message. &lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pick 3a08ed4 added Summer playlist to Spotify
pick 5a68cc9 updated README for Summer Plans
pick 6ff7e5a removed spring header

# Rebase c6e777e..39574f2 onto c992o90 (3 commands)
#
# Commands: 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(Or something like that)&lt;/p&gt;

&lt;p&gt;2 - Replace &lt;code&gt;pick&lt;/code&gt; with &lt;code&gt;edit&lt;/code&gt; within the editor and save your changes with &lt;code&gt;ESC&lt;/code&gt; and then &lt;code&gt;:wq&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So it would look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;edit 3a08ed4 added Summer playlist to Spotify
edit 5a68cc9 updated README for Summer Plans
edit 6ff7e5a removed spring header

# Rebase c6e777e..39574f2 onto c992o90 (3 commands)
#
# Commands: 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#remember-i-messed-up-and-didnt-have-any-of-my-commits-signed-if-you-missed-one-youd-only-raw-edit-endraw-the-one-you-didnt-sign"&gt;
  &lt;/a&gt;
  REMEMBER: I messed up and didn't have ANY of my commits signed. If you missed one, you'd only &lt;code&gt;edit&lt;/code&gt; the one you didn't sign.
&lt;/h4&gt;

&lt;p&gt;3 - Once you save your changes, git will bring you back to the command line. Here, you'll do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit ---amend --no-edit -S 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;--amend&lt;/code&gt; : fix/change the previous commit message&lt;br&gt;
&lt;code&gt;--no-edit&lt;/code&gt; : use the existing commit message, no need to edit this. &lt;br&gt;
&lt;code&gt;-S&lt;/code&gt; : GPG-sign the commit. &lt;/p&gt;

&lt;p&gt;4 - After you've fixed the commit, you'll run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git rebase --continue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;5 - Lastly, to check that my commit has been signed, I'll run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git log --show-signature
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Resources:&lt;br&gt;
&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-use-gpg-to-encrypt-and-sign-messages"&gt;How To Use GPG to Encrypt and Sign Messages&lt;/a&gt;&lt;br&gt;
&lt;a href="https://gnupg.org/"&gt;GnuPG Documentation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.github.com/en/github-ae@latest/github/authenticating-to-github/managing-commit-signature-verification/generating-a-new-gpg-key"&gt;Github Documentation&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>There Is No Pot Of Gold At The End Of The Rainbow</title>
      <author>Feli (she/her)</author>
      <pubDate>Tue, 06 Jul 2021 17:26:00 +0000</pubDate>
      <link>https://dev.to/kotzendekrabbe/there-is-no-pot-of-gold-at-the-end-of-the-rainbow-5955</link>
      <guid>https://dev.to/kotzendekrabbe/there-is-no-pot-of-gold-at-the-end-of-the-rainbow-5955</guid>
      <description>&lt;p&gt;Recently I watched a short video with &lt;a href="https://www.youtube.com/watch?v=_gt3SjZW9jA"&gt;Simon Sinek about finding the balance&lt;/a&gt;. He talked about how people looking for the perfect partner &lt;em&gt;doesn’t exist&lt;/em&gt;, the perfect job &lt;em&gt;doesn’t exist&lt;/em&gt; or the perfect company &lt;em&gt;doesn’t exist&lt;/em&gt;. That you can't have impact and happiness every day, that it’s about finding the balance. There will always be some bad days or days where you don’t have the energy to give 100%. You have to have bad days to appreciate the good ones. &lt;/p&gt;

&lt;p&gt;Simon added in the video that people are looking for the pot of gold at the end of a rainbow - but there is no pot at the end of a rainbow. There are a lot of books and speakers who are telling that there is - so people start to find it. However, it's not about finding the pot of gold at the end of a rainbow, it's about the adventure and who we take with us on the journey. &lt;strong&gt;That is the best part&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The video reminded me of a situation where a colleague asked me "Which was the best company you ever worked at". And my answer was "There is no perfect company or job. Every company has issues and you need to find out what kind of issues you can live or work with."&lt;br&gt;
So, I truly agree with Simon that there is no perfect job or company. And especially not for everyone, because we are humans and so we are different. Everyone of us needs something else.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stop-telling-talent-marketing-lies"&gt;
  &lt;/a&gt;
  Stop telling talent marketing lies
&lt;/h2&gt;

&lt;p&gt;Which brings me to a topic I have been working on for a while now: Helping our Recruiting department to build trustworthy talent marketing for developers.&lt;/p&gt;

&lt;p&gt;In marketing it's normal to window dress products or stories. That's why a lot of companies use stories people want to hear instead of what their values actually are. How their culture is. They tell the story of the &lt;em&gt;pot of gold at the end of the rainbow&lt;/em&gt; instead of telling the talents:&lt;br&gt;
&lt;em&gt;hey wanna join me for an adventure? I heard there is a pot of gold at the end of the rainbow. I'm not sure if we're gonna find it, but let’s go&lt;/em&gt;. It’s not important if you find the pot of gold or not, it’s about the relationship, the journeys, the experience you make with each other while you are looking for it.&lt;/p&gt;

&lt;p&gt;For Employer Branding and Talent Marketing this would mean for example: Instead of saying "We are a diverse and inclusive company" say "We are committed to become a diverse and inclusive workplace and therefore we are looking for people who are helping us to bring this vision to life".&lt;/p&gt;

&lt;p&gt;If a company tells shiny stories which are not the truth to attract talents, those talents may join the company because they tell them what they want to hear. But those talents that join will recognize sooner or later that it all was just window dressing. And in the best case they quit. In the worst case scenario, they stay at the company without believing in the company, without passion and happiness. Which leads to employees who don’t bring their best to the table. Don’t sell candidates a dummy and have them quit months later. Find candidates who are willing to join your adventure. Who wants to go with &lt;strong&gt;you&lt;/strong&gt; on the journey to find the pot of gold at the end of the rainbow, no matter if you find the pot of gold or not.&lt;/p&gt;




&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@austinchan?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Austin Chan&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>leadership</category>
      <category>career</category>
      <category>culture</category>
    </item>
    <item>
      <title>Django full CI-CD flow to AWS with GitHub Actions and S3</title>
      <author>Valentine Solonechnyi</author>
      <pubDate>Tue, 06 Jul 2021 17:24:27 +0000</pubDate>
      <link>https://dev.to/vlntsolo/django-full-ci-cd-flow-to-aws-with-github-actions-and-s3-2enp</link>
      <guid>https://dev.to/vlntsolo/django-full-ci-cd-flow-to-aws-with-github-actions-and-s3-2enp</guid>
      <description>&lt;p&gt;This guide covers all steps needed for setting up your CI-CD workflow for Django project with Amazon Beanstalk and GitHub Actions under the hood.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Link to sample project: &lt;a href="https://github.com/vlntsolo/django-cicd"&gt;https://github.com/vlntsolo/django-cicd&lt;/a&gt;&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#toc"&gt;
  &lt;/a&gt;
  TOC
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#1-aws-beanstalk-environment"&gt;AWS Beanstalk environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-s3-configuration"&gt;S3 configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-iam-user-access"&gt;IAM user access&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4-github-workflow-settings"&gt;GitHub workflow settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5-preparing-django-settings"&gt;Preparing Django settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6-first-run"&gt;First run&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7-composing-postdeploy-commands-hooks"&gt;Composing postdeploy commands (hooks)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before we start, what is CI-CD flow in the first place?&lt;/p&gt;

&lt;p&gt;Despite the fact that Django code doesn't require any build step compared to compiled apps, you might find it quite frustrating to repeat a manual re-upload each time you need to deploy a new feature or a bug fix. Because of this, CI-CD (Continuous integration and Continuous delivery) workflows were invented.&lt;/p&gt;

&lt;p&gt;CI-CD workflows or pipelines allow us to safely build, test and deploy web applications in a relatively short period of time (usually, in a matter of minutes). So what about Django? If you have a python application codebase hosted on a GitHub, it would be enormously convenient to push it to the hosting environment right after you update the repository. And that is exactly what we're going to do using GitHub Actions, which is publicly available for free since late 2019.&lt;/p&gt;

&lt;p&gt;Let's dive in!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-aws-beanstalk-environment"&gt;
  &lt;/a&gt;
  1. AWS Beanstalk environment
&lt;/h2&gt;

&lt;p&gt;Before we start configuring everything, we need to be sure we have our environment warm and ready.&lt;/p&gt;

&lt;p&gt;If you already have an AWS account, go to the Console and search for Beanstalk. If not, &lt;a href="https://aws.amazon.com/"&gt;create one here&lt;/a&gt;. You will be asked to add billing information in order to proceed.&lt;/p&gt;

&lt;p&gt;In the Beanstalk dashboard, make sure you have selected the most suitable region (where services to be deployed) in the right top corner. Check [Environments] and choose [Create a new environment]. Then, on the dialogue page, choose [Web server environment].&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fccIjJbU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/beanstalk1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fccIjJbU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/beanstalk1.jpg" alt="Creating beanstalk python environment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fill in the details and focus on Platform section. Here we need to select Python platform (last version) and last Amazon Linux 2 available.&lt;/p&gt;

&lt;p&gt;Leave Sample application and hit &lt;strong&gt;[Create environment]&lt;/strong&gt;. In a few moments, you should be able to open your environment URL address and see a sample page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UIxMsqWn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/size/w1000/2021/07/beanstalk-sample-page.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UIxMsqWn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/size/w1000/2021/07/beanstalk-sample-page.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy the name of the application and the environment displayed in the top left corner if you open the environment page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--juKeFojT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/beanstalk-details.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--juKeFojT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/beanstalk-details.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The last thing to do here is to set up the database for Django.&lt;/p&gt;

&lt;p&gt;Go to &lt;strong&gt;[Configuration] → [Database]&lt;/strong&gt; and select preferred options:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DzflPGZm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/size/w1000/2021/07/beanstalk-db.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DzflPGZm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/size/w1000/2021/07/beanstalk-db.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It this example I picked a PostgreSQL since this my usual choice, but you can stick with MySQL or even Oracle if you want.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;! Alert:&lt;/strong&gt; &lt;em&gt;Database server created this way is suited for testing purposes only. It will be strictly attached to the environment. The database will be deleted if you remove or recreate the Beanstalk environment. In production, you should use RDS or Aurora, standalone servers inside your &lt;a href="https://aws.amazon.com/vpc/"&gt;VPC&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now that we've got a managed python environment and the database, we need to prepare a file storage for our future application builds.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-s3-configuration"&gt;
  &lt;/a&gt;
  2. S3 configuration 🪣
&lt;/h2&gt;

&lt;p&gt;We need to set up a custom S3 bucket as a temporary storage for our builds before they will be pushed to the Beanstalk.&lt;/p&gt;

&lt;p&gt;Search for S3 in AWS console or switch to it from the menu. Then select &lt;strong&gt;[Create bucket]&lt;/strong&gt;. Type in some unique name and select your region.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vTf71wli--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/s3-new-bucket.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTf71wli--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/s3-new-bucket.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Leave the checkbox on &lt;em&gt;"Block all public access"&lt;/em&gt; and proceed with &lt;strong&gt;[Apply]&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The next thing we need to do is to generate programmatic access credentials which will be used by GitHub Action to deploy our Django app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-iam-user-access"&gt;
  &lt;/a&gt;
  3. IAM user access 🔐
&lt;/h2&gt;

&lt;p&gt;Search for IAM users in the AWS console and select &lt;strong&gt;[Add user]&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6QFqAGNX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/IAM-1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6QFqAGNX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/IAM-1.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the permissions page, select [Attach existing policies directly]. Search for S3FullAccess* and select the checkbox. Repeat the same steps for &lt;em&gt;AdministratorAccess-AWSElasticBeanstalk&lt;/em&gt;* and hit &lt;strong&gt;[Add user]&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Finally, copy Access key ID and Secret from the last step. Make sure to save this info somewhere safe, since user secret will be shown only once.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LPBudD3x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/IAM-3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LPBudD3x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/IAM-3.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looks like we're done with AWS and ready to proceed with GitHub!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-github-workflow-settings"&gt;
  &lt;/a&gt;
  4. GitHub workflow settings 🔡
&lt;/h2&gt;

&lt;p&gt;Go back to your Django project and create a folder called &lt;code&gt;.github&lt;/code&gt;. And one more folder inside it called workflows. GitHub Actions config should be placed inside and formatted with YAML syntax. See my example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#Location: .github/workflows/custom_config.yml

name: CI-CD pipeline to AWS
env:
  EB_S3_BUCKET_NAME: "YOUR BUCKET NAME FROM Step 2"
  EB_APPLICATION_NAME: "YOUR APP NAME FROM Step 1"
  EB_ENVIRONMENT_NAME: "YOUR ENVIRONMENT NAME FROM Step 1"
  DEPLOY_PACKAGE_NAME: "django-app-${{ github.sha }}.zip"
  AWS_REGION_NAME: "YOUR AWS REGION ("us-east-1"/"eu-central-1" etc.)"

on:
  push:
    branches:
      - master #Use your own branch here (Might be staging or testing)
jobs:
  build:
    runs-on: ubuntu-latest
    steps: 
      - name: Git clone on our repo
        uses: actions/checkout@v2

      - name: Create zip deployment package
        run: zip -r ${{ env.DEPLOY_PACKAGE_NAME }} ./ -x *.git*

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with: 
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ env.AWS_REGION_NAME }}
      - name: Copying file to S3
        run: aws s3 cp ${{ env.DEPLOY_PACKAGE_NAME }} s3://${{ env.EB_S3_BUCKET_NAME }}/
      - name: Print nice message on success finish
        run: echo "CI part finished successfuly"
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with: 
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ env.AWS_REGION_NAME }}

      - name: Create new EBL app ver
        run: |
          aws elasticbeanstalk create-application-version \
          --application-name ${{ env.EB_APPLICATION_NAME }} \
          --source-bundle S3Bucket="${{ env.EB_S3_BUCKET_NAME }}",S3Key="${{ env.DEPLOY_PACKAGE_NAME }}" \
          --version-label "${{ github.sha }}"

      - name: Deploy new app
        run: aws elasticbeanstalk update-environment --environment-name ${{ env.EB_ENVIRONMENT_NAME }} --version-label "${{ github.sha }}"
      - name: Print nice message on success finish
        run: echo "CD part finished successfuly"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's go through the surface of the config blocks and check their purpose. More details can be found here.&lt;/p&gt;

&lt;p&gt;1) &lt;strong&gt;[env]&lt;/strong&gt; block serves as a list of shortcuts for variables inside the config. We define our non-sensitive data here.&lt;/p&gt;

&lt;p&gt;2) &lt;strong&gt;[jobs]&lt;/strong&gt; block defines what actually will be done.&lt;/p&gt;

&lt;p&gt;3) &lt;strong&gt;[build]&lt;/strong&gt; block is just a job name and includes a list of "steps" to perform in our building process. For a pure Django app, this means only zipping the working directory and pushing it to the S3 bucket.&lt;/p&gt;

&lt;p&gt;4) &lt;strong&gt;[steps]&lt;/strong&gt; block lists names and actual commands to execute on the virtual machine.&lt;/p&gt;

&lt;p&gt;You might easily add another job name called testing and run ./manage.py test step within it.&lt;/p&gt;

&lt;p&gt;5) &lt;strong&gt;[needs]&lt;/strong&gt; block is a prerequisite for further execution. In our case, we're making sure that our file transfer was completed successfully before we send commands to the Beanstalk.&lt;/p&gt;

&lt;p&gt;6) &lt;strong&gt;[on]&lt;/strong&gt; block specifies the trigger event, like our "push", as well as the target branch.&lt;/p&gt;

&lt;p&gt;If you come up with several Beanstalk environments (QA, testing, staging, production etc.), you'd need to place new config.yml files for them and change env vars and branch accordingly.&lt;/p&gt;

&lt;p&gt;You might also notice that we didn't define &lt;code&gt;secrets.aws_access_key_id&lt;/code&gt; or &lt;code&gt;secrets.aws_secret_access_key&lt;/code&gt; yet. 🧊 Let's fix that!&lt;/p&gt;

&lt;p&gt;Open your GitHub repo or create one for your project and go to &lt;strong&gt;[Settings]&lt;/strong&gt; → &lt;strong&gt;[Secrets]&lt;/strong&gt; → &lt;strong&gt;[New repository secret]&lt;/strong&gt;. Paste your IAM user key and secret there like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4FQJQsBQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/secrets-1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4FQJQsBQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/secrets-1.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Repeat the same step for &lt;code&gt;aws_secret_access_key and&lt;/code&gt; it's value. That's it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-preparing-django-settings"&gt;
  &lt;/a&gt;
  5. Preparing Django settings 📦
&lt;/h2&gt;

&lt;p&gt;Remember, we've connected a Relational database to our Beanstalk environment at Step 1? But where are the connection parameters and db user credentials?&lt;/p&gt;

&lt;p&gt;With integrated database, Beanstalk exposes env variables, which can be used right away:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# main_django_app settings.py
import os

ALLOWED_HOSTS = ['YOUR_ENVIRONMENT_HOST']

DATABASES = {
'default': {
    'ENGINE': 'django.db.backends.postgresql_psycopg2',
    'NAME': os.environ['RDS_DB_NAME'],
    'USER': os.environ['RDS_USERNAME'],
    'PASSWORD': os.environ['RDS_PASSWORD'],
    'HOST': os.environ['RDS_HOSTNAME'],
    'PORT': os.environ['RDS_PORT'],
    }
}

# rest of the settings
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget to add your environment URL and main domain to allowed hosts list.&lt;/p&gt;

&lt;p&gt;At this point, we need to make sure that Beanstalk python platform will be ready to establish a connection with PostgreSQL. Let's tell it to install some extras for us.&lt;/p&gt;

&lt;p&gt;Create a folder in your &lt;a href="https://github.com/vlntsolo/django-cicd"&gt;project root&lt;/a&gt; called &lt;code&gt;.ebextensions&lt;/code&gt; and place there a file &lt;code&gt;01_packages.config&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;packages: 
  yum: 
    amazon-linux-extras: []

commands:
  01_postgres_activate: 
    command: sudo amazon-linux-extras enable postgresql10
  02_postgres_install: 
    command: sudo yum install -y postgresql-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to add Django config to inform Beanstalk's WSGI server about our main app and settings. Create another file inside &lt;code&gt;.ebextensions&lt;/code&gt; folder called &lt;code&gt;django.config&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;option_settings:
  aws:elasticbeanstalk:container:python:
    WSGIPath: main_django_app.wsgi:application
  aws:elasticbeanstalk:application:environment:
    DJANGO_SETTINGS_MODULE: main_django_app.settings
    "PYTHONPATH": "/var/app/current:$PYTHONPATH"
  aws:elasticbeanstalk:environment:proxy:staticfiles:
    /static: static
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change &lt;em&gt;main_django_app&lt;/em&gt; to your Django application name.&lt;/p&gt;

&lt;p&gt;Last row &lt;code&gt;aws:elasticbeanstalk:environment:proxy:staticfiles0:&lt;/code&gt; tells which folder to serve through the reverse proxy and which relative URL to use.&lt;/p&gt;

&lt;p&gt;Finally, freeze your local python environment with &lt;code&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt; (it will be the primary source for Beanstalk to configure EC2 environment).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-first-run"&gt;
  &lt;/a&gt;
  6. First run 🔥
&lt;/h2&gt;

&lt;p&gt;Push any changes to your specified branch and visit Actions tab. If your actions completed successfully, you will see the green mark. If something went wrong, open the logs and resolve the errors inside.&lt;/p&gt;

&lt;p&gt;Got errors after successful GitHub Actions run? Visit Elastic Beanstalk environment and check the Logs.&lt;/p&gt;

&lt;p&gt;Hopefully, you'll see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rNy9g7Wx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/size/w1000/2021/07/django-demopage.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rNy9g7Wx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/size/w1000/2021/07/django-demopage.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-composing-postdeploy-commands-hooks"&gt;
  &lt;/a&gt;
  7. Composing postdeploy commands (hooks) 🔌
&lt;/h2&gt;

&lt;p&gt;There's still few commands that should be executed after deploy.&lt;/p&gt;

&lt;p&gt;1) We need to migrate our changes to the Beanstalk database (migration files created by makemigrations command should be a part of your codebase).&lt;/p&gt;

&lt;p&gt;2) We need to collect static files (no need to keep your static files in a codebase).&lt;/p&gt;

&lt;p&gt;This problem could be solved with Beanstalk postdeploy hooks. File names could be totally custom, but file extension is important. All .sh files will be executed in alphanumerical order.&lt;/p&gt;

&lt;p&gt;In your project root, create a folder &lt;code&gt;.platform&lt;/code&gt; with the following structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.platform/
└───hooks/
    └───postdeploy/
        -01_django.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

source /var/app/venv/*/bin/activate &amp;amp;&amp;amp; {

# collecting static files
python manage.py collectstatic --noinput;
# log which migrations have already been applied
python manage.py showmigrations;
# migrate the rest
python manage.py migrate --noinput;
# another command to create a superuser (write your own)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You've got the idea! Now, you can figure out how to create the superuser account.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#important-notes"&gt;
  &lt;/a&gt;
  ⚠️ Important notes:
&lt;/h3&gt;

&lt;p&gt;– &lt;strong&gt;Review IAM user access policy&lt;/strong&gt;. For the tutorial purpose, I've granted full access to S3 and Beanstalk. Make sure that you grant only required permissions for GitHub Actions client in order to prevent unpleasant consequences in case of secret key leakage.&lt;/p&gt;

&lt;p&gt;– &lt;strong&gt;Add lifecycle rules&lt;/strong&gt; to S3 bucket and Application versions storage. By default, S3 doesn't delete application versions or any other files from the buckets. Use lifecycle rules in both S3 and Beanstalk to keep only needed app versions.&lt;/p&gt;

&lt;p&gt;– AWS Beanstalk health checking system might not work properly ( severe health status) because of Django ALLOWED_HOSTS restriction in headers. I don't know the right way of handling this issue (you can either ignore status warnings or set &lt;code&gt;ALLOWED_HOSTS = ['*']&lt;/code&gt; at your own risk).&lt;/p&gt;

&lt;p&gt;– If you're going to use PostgreSQL, don't forget to install the package with &lt;code&gt;pip install psycopg2-binary&lt;/code&gt; and freeze the requirements.txt.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful links:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://valentine.click/blog/how-to-split-django-settings-for-different-environments"&gt;How to split Django settings for different environments&lt;/a&gt;&lt;br&gt;
&lt;a href="https://valentine.click/blog/django-q-and-beanstalk"&gt;How to configure Django Q with Supervisor on AL2 Beanstalk&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create-deploy-python-django.html"&gt;Deploying a Django application to Elastic Beanstalk&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions"&gt;Workflow syntax for GitHub Actions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope, you've enjoyed following this guide. Stay tuned and next time I might cover how to set up a full-stack Django-based project with truly seamless dev experience.&lt;/p&gt;

&lt;p&gt;This article was originally published &lt;a href="https://valentine.click/blog/django-full-ci-cd-flow-to-aws-with-github-actions"&gt;in my blog post&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>django</category>
      <category>aws</category>
      <category>devops</category>
      <category>python</category>
    </item>
    <item>
      <title>Preact, Vite, &amp; Docker Compose in 5 easy steps</title>
      <author>Amin</author>
      <pubDate>Tue, 06 Jul 2021 16:58:32 +0000</pubDate>
      <link>https://dev.to/aminnairi/preact-vite-docker-compose-in-5-easy-steps-j21</link>
      <guid>https://dev.to/aminnairi/preact-vite-docker-compose-in-5-easy-steps-j21</guid>
      <description>&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Docker Compose&lt;/li&gt;
&lt;li&gt;A terminal emulator&lt;/li&gt;
&lt;li&gt;A text editor&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#docker-compose"&gt;
  &lt;/a&gt;
  Docker Compose
&lt;/h2&gt;

&lt;p&gt;Add these lines to &lt;a href="https://docs.docker.com/compose/compose-file/"&gt;&lt;code&gt;docker-compose.yaml&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3"&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;yarn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;node:16.0.0&lt;/span&gt;
    &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;node&lt;/span&gt;
    &lt;span class="na"&gt;working_dir&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/home/node&lt;/span&gt;
    &lt;span class="na"&gt;tty&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="na"&gt;stdin_open&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="na"&gt;entrypoint&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;--help&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.:/home/node&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#vite"&gt;
  &lt;/a&gt;
  Vite
&lt;/h2&gt;

&lt;p&gt;Add these lines to &lt;a href="https://vitejs.dev/config/"&gt;&lt;code&gt;vite.config.js&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;esbuild&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;jsxFactory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;jsxFragment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fragment&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#preact"&gt;
  &lt;/a&gt;
  Preact
&lt;/h2&gt;

&lt;p&gt;Add these lines to &lt;a href="https://reactjs.org/docs/introducing-jsx.html#gatsby-focus-wrapper"&gt;&lt;code&gt;index.jsx&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact/hooks&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onButtonClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, Preact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onButtonClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      Hello
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h2&gt;

&lt;p&gt;Add these lines to &lt;code&gt;index.html&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./index.jsx"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#run"&gt;
  &lt;/a&gt;
  Run
&lt;/h2&gt;

&lt;p&gt;Run the following commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;docker-compose run yarn add preact vite
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;docker-compose run &lt;span class="nt"&gt;--publish&lt;/span&gt; 3000:3000 yarn vite &lt;span class="nt"&gt;--host&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;open http://localhost:3000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it
&lt;/h2&gt;

&lt;p&gt;You can now build your next awesome &lt;a href="https://preactjs.com/"&gt;Preact&lt;/a&gt; application using the awesome &lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt; bundler running anywhere with &lt;a href="https://docs.docker.com/compose/"&gt;Docker Compose&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Use this command to generate your optimized build.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;docker-compose run yarn vite build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Thank you Evan, I can now dev on my 2 cores @1GHz laptop using Docker Compose without going for a coffee break between each updates on my projects.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>preact</category>
      <category>vite</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to push your website online for free (Bonus: How to get domain name for 2$)</title>
      <author>CodeOzz</author>
      <pubDate>Tue, 06 Jul 2021 16:35:19 +0000</pubDate>
      <link>https://dev.to/codeozz/how-to-push-your-website-online-for-free-bonus-how-to-get-domain-name-for-2-1ikp</link>
      <guid>https://dev.to/codeozz/how-to-push-your-website-online-for-free-bonus-how-to-get-domain-name-for-2-1ikp</guid>
      <description>&lt;p&gt;Welcome my friend ! Today I will show you how to deploy your static website for free with Netlify !&lt;/p&gt;

&lt;p&gt;In bonus I will show you where you can bug domain name for 2$ and connect it will Netlify !&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First step:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create an account on &lt;a href="https://www.netlify.com/"&gt;https://www.netlify.com/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the overview, you will need to connect your git project to Netlify.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Arym6U-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfmobeixdc5bqn38e9xj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Arym6U-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfmobeixdc5bqn38e9xj.png" alt="Screenshot 2021-07-06 at 17.54.55.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go to &lt;a href="https://app.netlify.com/start"&gt;https://app.netlify.com/start&lt;/a&gt; Select your plateform between Github, Gitlab or Bitbucket.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second Step:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Choose the branch to deploy, it's means that when you will push onto this branch, Netlify will build the project and re-deploy it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4NOGJb7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q5btvkqm3u13vingb5mk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4NOGJb7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q5btvkqm3u13vingb5mk.png" alt="Screenshot 2021-07-06 at 18.01.01.png (1)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For me I create a dedicated branch named &lt;code&gt;prod&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Third Step:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--18EiB0iH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8tzu7umwerely514pow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--18EiB0iH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8tzu7umwerely514pow.png" alt="Screenshot 2021-07-06 at 18.01.01.png (2)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will need to provide the npm command that will build your project (and the output directory name). &lt;/p&gt;

&lt;p&gt;I use &lt;code&gt;npm run build&lt;/code&gt; and I named the output file &lt;code&gt;/dist&lt;/code&gt; (classic).&lt;/p&gt;

&lt;p&gt;Netlify will build your project and deploy it on a &lt;em&gt;special&lt;/em&gt; url.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BONUS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you don't have domain name, read this section !&lt;/p&gt;

&lt;p&gt;Go to &lt;a href="https://www.namecheap.com/domains/domain-name-search/"&gt;https://www.namecheap.com/domains/domain-name-search/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Put your domain name wanted, and select a domain name cheap (for example .art). The first year, the domain name will be cheap and you will need to pay more for the next years, it depends of the domain name (.art stay very cheap).&lt;/p&gt;

&lt;p&gt;Buy your domain name and when you receive the confirmation by email, you will need to verify your mail (in order to link email and your domain name).&lt;/p&gt;

&lt;p&gt;You will just need to select your domain name on the dashboard and click on verify account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r_GylKlt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92siv9ihc803klr9plth.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r_GylKlt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92siv9ihc803klr9plth.png" alt="icannwhois_ar2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fourth Step:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Set up a custom domain ! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--23IkClQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4vo3jw22gxaj91pwx76.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--23IkClQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4vo3jw22gxaj91pwx76.png" alt="Screenshot 2021-07-06 at 18.11.10"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: You can see the &lt;em&gt;special&lt;/em&gt; url generated by Netlify ! (By default any of your build project has this special url in case of you have an issue with your domain name)&lt;/p&gt;

&lt;p&gt;So put your domain name&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aUq4nrof--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgcb5xwz01t3qhiv25le.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aUq4nrof--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgcb5xwz01t3qhiv25le.png" alt="Screenshot 2021-07-06 at 18.12.46"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Last Step:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Set up Netlify DNS for your domain !&lt;/p&gt;

&lt;p&gt;Click on &lt;code&gt;check DNS configuration&lt;/code&gt;, you will have four &lt;em&gt;hostnames&lt;/em&gt;, keep it, we will need it .&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2inxTcE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/et18zbmazhbodajxng6i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2inxTcE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/et18zbmazhbodajxng6i.png" alt="Screenshot 2021-07-06 at 17.54.55.png (2)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Come back into Namecheap, go to &lt;strong&gt;dashboard&lt;/strong&gt; and click on &lt;strong&gt;manage&lt;/strong&gt; into your domain name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--juej3wm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ae1v6aqg46nk913sd5vc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--juej3wm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ae1v6aqg46nk913sd5vc.png" alt="Screenshot 2021-07-06 at 18.19.45"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;nameservers&lt;/code&gt; select custom DNS and put the four &lt;em&gt;hostnames&lt;/em&gt; !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JsYr7EFz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duxw4hr699hasnvwfojx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JsYr7EFz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duxw4hr699hasnvwfojx.png" alt="Screenshot 2021-07-06 at 18.23.17"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Save it and wait a few minutes in order to link your hostname with your domain name !&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTTPS:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Netlify will add a SSL in order to have HTTPS on your website ! &lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>devops</category>
      <category>netlify</category>
    </item>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 06 Jul 2021 16:26:21 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-beo</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-beo</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-bury-the-lede"&gt;
  &lt;/a&gt;
  Don't Bury the Lede
&lt;/h2&gt;

&lt;p&gt;Ok, so the title above IS kind of burying the lede of this fantastic article. In it, &lt;a class="mentioned-user" href="https://dev.to/jmfayard"&gt;@jmfayard&lt;/a&gt;
 shares many learnings from four years (!!!) or writing on DEV. Onne of them is, you guessed it, "don't bury the lede of your article." Read on for many great writing, life, and DEV lessons.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jmfayard" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NjlhV-kq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--oLH1L0EP--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/17066/64e291f5-65fd-452a-88d9-a2f0c071f807.jpg" alt="jmfayard"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jmfayard/20-lessons-i-ve-learned-writing-on-dev-for-4-years-4nk3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;20+ Lessons I've Learned Writing on DEV for 4 Years&lt;/h2&gt;
      &lt;h3&gt;Jean-Michel Fayard 🇫🇷🇩🇪🇬🇧🇪🇸🇨🇴 ・ Jun 29 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#meta&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#squash-your-git-squash-confusion"&gt;
  &lt;/a&gt;
  Squash Your Git Squash Confusion
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/pb"&gt;@pb&lt;/a&gt;
 is here to help you get over the fear of messing up others' commits &lt;em&gt;and&lt;/em&gt; get comfortable with squashing commits.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r3sfWXRc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--52cZyHb1--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/618537/3cd782cd-1a3a-4926-9eb6-1e55fba23a61.jpg" alt="pb"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pb/git-squash-simplified-3ba1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Git Squash Simplified&lt;/h2&gt;
      &lt;h3&gt;Pawel ・ Jul 2 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#git&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#graphql-is-like-pizza"&gt;
  &lt;/a&gt;
  GraphQL is Like Pizza
&lt;/h2&gt;

&lt;p&gt;Yep, you read that right. Find out how why &lt;a class="mentioned-user" href="https://dev.to/shrutikapoor08"&gt;@shrutikapoor08&lt;/a&gt;
 likes to compare GraphQL and REST to different types of pizza places. 🤤 &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/shrutikapoor08" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FxsCavCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--HHESzKaW--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/197069/406b42c3-4552-4a6f-8ce9-39a58e542a5a.jpg" alt="shrutikapoor08"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/shrutikapoor08/what-is-graphql-hj5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What is GraphQL? &lt;/h2&gt;
      &lt;h3&gt;Shruti Kapoor ・ Jul 1 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#graphql&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#design-is-intelligence-made-visible"&gt;
  &lt;/a&gt;
  Design is Intelligence Made Visible
&lt;/h2&gt;

&lt;p&gt;That's why it's important to have at least a basic understanding of product design as a developer. &lt;a class="mentioned-user" href="https://dev.to/flaque"&gt;@flaque&lt;/a&gt;
 is here to help!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/flaque" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XXQrFVq2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--H-b5CF7r--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/87211/951afa46-47e8-4f65-b0c1-a0dcf19e85b5.jpg" alt="flaque"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/flaque/how-to-make-your-product-look-good-h5j" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to make your product look good&lt;/h2&gt;
      &lt;h3&gt;Evan Conrad ・ Jun 29 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#design&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#you-are-a-creative-showcase-it-with-css"&gt;
  &lt;/a&gt;
  You Are a Creative. Showcase it with CSS!
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/andrewbaisden"&gt;@andrewbaisden&lt;/a&gt;
 says that creating CSS art is one of the best ways to improve your front-end programming skills as a developer — of all levels! Here's how you can get started...&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/andrewbaisden" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iLg9JixC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bRSmMlC_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/333889/005fe9de-759e-4d70-9c3c-d3aa1289b2ef.png" alt="andrewbaisden"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/andrewbaisden/how-creating-css-art-can-make-you-a-better-developer-4cd5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How creating CSS Art can make you a better developer&lt;/h2&gt;
      &lt;h3&gt;Andrew Baisden ・ Jun 29 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-whys-and-whats-of-testing"&gt;
  &lt;/a&gt;
  The Whys and Whats of Testing
&lt;/h2&gt;

&lt;p&gt;As &lt;a class="mentioned-user" href="https://dev.to/pat_the99"&gt;@pat_the99&lt;/a&gt;
 writes, "Test Driven Development (TDD)'s main idea is to simply start working on code by writing automated tests BEFORE writing the code that is being tested." Pretty useful, no? In this article, Patricia helps us understand JavaScript TDD through the lens of Jest in particular.  &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/pat_the99" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IrOrF7B9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--jiAMjh3G--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/628161/0fc61315-16e2-4c38-b364-c2515768dc7a.jpeg" alt="pat_the99"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pat_the99/basics-of-javascript-test-driven-development-tdd-with-jest-o3c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Basics of Javascript Test Driven Development (TDD) with Jest&lt;/h2&gt;
      &lt;h3&gt;Patricia Nicole ・ Jul 4 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#todayilearned&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#youre-invited"&gt;
  &lt;/a&gt;
  You're Invited...
&lt;/h2&gt;

&lt;p&gt;... to &lt;a class="mentioned-user" href="https://dev.to/kharouk"&gt;@kharouk&lt;/a&gt;
's book club — which just might help you land your next job! First up? "Eloquent JavaScript" by Marijn Haverbeke 📚  &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kharouk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vwCCXRul--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XxmUYGMN--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/85930/0868ee73-1ee3-424e-a3c3-63b35ec21d68.jpeg" alt="kharouk"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kharouk/book-club-eloquent-javascript-chapter-one-5c0d" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Book Club: Eloquent Javascript - Chapter One&lt;/h2&gt;
      &lt;h3&gt;Alex Kharouk ・ Jul 3 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#bookclub&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>GitHub Copilot and its impact on the future of coding</title>
      <author>Julien</author>
      <pubDate>Tue, 06 Jul 2021 16:24:16 +0000</pubDate>
      <link>https://dev.to/codeinspector/github-copilot-and-its-impact-on-the-future-of-coding-43ld</link>
      <guid>https://dev.to/codeinspector/github-copilot-and-its-impact-on-the-future-of-coding-43ld</guid>
      <description>&lt;p&gt;On June 29, 2021, GitHub announced the technical preview of their new product: &lt;a href="https://copilot.github.com/"&gt;GitHub copilot&lt;/a&gt;. It took many people by surprise and the overall reception from the community is very positive (see for example the stream from &lt;a href="https://twitter.com/rauchg/status/1409907555749351427"&gt;Guillermo Rauch&lt;/a&gt;, &lt;a href="https://twitter.com/cassidoo/status/1410728940797251591?s=20"&gt;Cassidy Williams&lt;/a&gt; or &lt;a href="https://twitter.com/danielgross/status/1410226061959442432"&gt;Daniel Gross&lt;/a&gt;). It’s definitely a major step in terms of technology. Now, what does it mean for the future of coding?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#machine-learning-will-help-you-produce-better-code"&gt;
  &lt;/a&gt;
  Machine Learning will help you produce better code
&lt;/h1&gt;

&lt;p&gt;Machine learning is going to replace the software developer or at least help you produce better code, and in a not-so-distant future, write complete programs. And there is absolutely no doubt about this. &lt;/p&gt;

&lt;p&gt;Some early players (&lt;a href="https://www.tabnine.com/"&gt;tabnine&lt;/a&gt;, &lt;a href="https://www.kite.com/"&gt;kite&lt;/a&gt;) released products that are AI assistance for coders, mostly as a smart autocomplete. IntelliJ (one of the most popular IDE with VS Code) already embeds a &lt;a href="https://www.jetbrains.com/help/idea/auto-completing-code.html#ml_completion"&gt;Machine Learning system for code completion&lt;/a&gt; in their IDE. But none of the existing players generated fully functional code. In that sense, Copilot is a major step in the direction of automating code generation.&lt;/p&gt;

&lt;p&gt;When making a machine-learning based product, the accuracy of the model (and quality of the recommendations) depends on the amount of data available to train it. And GitHub has the best position on the market to get a massive amount of training data since it is the primary platform to host all source code (GitHub has more than 50% of the market for Git hosting and is the primary platform for open source projects).&lt;/p&gt;

&lt;p&gt;There is a controversy around the license on which the code is trained (see &lt;a href="https://drewdevault.com/2021/07/04/Is-GitHub-a-derivative-work.html"&gt;here&lt;/a&gt;, &lt;a href="https://news.ycombinator.com/item?id=27725274"&gt;here&lt;/a&gt;, or &lt;a href="https://twitter.com/eevee/status/1410037309848752128?s=20"&gt;here&lt;/a&gt;, but the argument is unlikely to stand in the case of a lawsuit (see &lt;a href="https://twitter.com/luis_in_brief/status/1410242882523459585?s=20"&gt;this twitter thread&lt;/a&gt;). Even if that was a real concern, Microsoft could train its model on the vast codebase developers at all its companies (Microsoft, GitHub, LinkedIn, etc) and still, probably produce good results.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Takeaway: like it or not, machine learning is entering the developer tools space. And it’s here to stay.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#this-is-the-beginning-of-a-new-era-of-developer-tools"&gt;
  &lt;/a&gt;
  This is the beginning of a new era of developer tools
&lt;/h1&gt;

&lt;p&gt;Until GitHub copilot, many people were skeptical about the use of machine learning in the developer tools space. Developers, in particular, thought that writing code was art that machines could not replicate (or that it will come in decades and they would not be impacted). The release of Copilot (and its quality for a preview) proved them wrong and they now have to face the reality: the machine can do better than us in some domains (try to write a function that validates an email address in less than 10 seconds, it’s actually very complex and can be done correctly by Copilot in less than five seconds).&lt;/p&gt;

&lt;p&gt;Other people argued a lot about the privacy (e.g. your code being sent to an API) of such tools. Again, the release of Copilot proved them wrong and it was barely a topic of discussion, even if GitHub collects source code, geolocation, operating systems, and a lot of other identifiable data (&lt;a href="https://docs.github.com/en/github/copilot/about-github-copilot-telemetry"&gt;see documentation&lt;/a&gt;. The reality is that developers do not care: the value the tool provides is bigger than its privacy cost.&lt;/p&gt;

&lt;p&gt;Machine learning will impact many domains of computer science, programming is just one domain among many others. The next generation of developer tools will be AI-driven and will leave the other tools in the dust in terms of quality. Expect to see ML-based infrastructure tools that optimize your deployment in real-time depending on your cost and performance targets. Or tools that will generate code according to your comments and test cases. The possibilities are endless.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Takeaway: Copilot is not the end of the software developer: it’s the beginning of a new era of developer tools.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-impact-on-the-developer-market"&gt;
  &lt;/a&gt;
  The impact on the developer market
&lt;/h1&gt;

&lt;p&gt;Copilot reduces the barrier to enter the software development workforce and reduces friction to write simple code. In a world where software usage is growing incredibly fast and there is a &lt;a href="https://cacm.acm.org/magazines/2021/7/253461-the-2021-software-developer-shortage-is-coming/fulltext"&gt;shortage of software developers&lt;/a&gt;, this is a much-needed product.&lt;/p&gt;

&lt;p&gt;Tools such as Copilot will also widen the gap between junior developers and senior developers. Such a tool will make it very easy to write a new frontend or a backend system in Javascript: the model will be well trained to generate the correct code. But it will fail on complex legacy codebases, embedded systems (that deal with architecture-specific code), where suggestions might not be accurate for some time.&lt;/p&gt;

&lt;p&gt;Finally, Copilot generates functions but does nothing to organize them into efficient software architecture. You will still require to have experienced engineers to compose your code into efficient software units. But this is just a matter of time before you have an AI that can also automate that job.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion: It is going to be easier to become a software engineer. Software developers will not disappear but will be more specialized.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-to-expect-in-the-future"&gt;
  &lt;/a&gt;
  What to expect in the future
&lt;/h1&gt;

&lt;p&gt;Machine learning will automate software production, transforming the software developer into an architect that will edit (to fit their need) and compose generated code into an efficient software architecture.&lt;/p&gt;

&lt;p&gt;We will soon see codebases with 80% of auto-generated code by Copilot (or similar product) in the near future, especially for new products written in languages like Javascript or Python (that represent together more than 40% of the actual market).&lt;/p&gt;

&lt;p&gt;The release of GPT-3 and the promise that OpenAI will make available all the work of Copilot on their API is very promising for the developer tools community. And I expect more tools that will make use of AI to make the developer more efficient in the years to come.&lt;br&gt;
What does it mean for Code Inspector?&lt;br&gt;
At Code Inspector, using ML has always been part of our plan and we have been experimenting with various ML techniques and been using the OpenAI API for some time. In all our conversations with users, developers or investors, we always communicated that using machine learning was the future of developer tools which is why we invested early on in these technologies. In that regard, the release of Copilot shows that our vision has been correct since the beginning.&lt;/p&gt;

&lt;p&gt;We are excited by the release of Copilot because it opens a new era of developer tools. It will make available its work on the OpenAI API. Code Inspector will not be a competitor of Copilot. It will complement it. At the end of the day, our mission is simple: help developers write better code, faster.&lt;/p&gt;

&lt;p&gt;Photo Credit: Ilya Pavlov on Unsplash&lt;/p&gt;

</description>
      <category>github</category>
      <category>githubcopilot</category>
      <category>machinelearning</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Serverless Contact Form Using AWS Amplify</title>
      <author>Michael Liendo</author>
      <pubDate>Tue, 06 Jul 2021 16:20:02 +0000</pubDate>
      <link>https://dev.to/mtliendo/serverless-contact-form-using-aws-amplify-1e9m</link>
      <guid>https://dev.to/mtliendo/serverless-contact-form-using-aws-amplify-1e9m</guid>
      <description>&lt;p&gt;When building out applications, sending email is a frequently needed feature. In addition, it's likely that the data sent in the email needs to be stored in a database for record keeping, analytics, or additional processing.&lt;/p&gt;

&lt;p&gt;AWS provides a range of services that help make setting up an API, database, and email transport quick, and secure. Specifically, &lt;a href="https://docs.amplify.aws/"&gt;AWS Amplify&lt;/a&gt; provides a lot of the functionality we'll need out of the box, and &lt;a href="https://aws.amazon.com/ses/"&gt;Amazon SES&lt;/a&gt; will send emails on our behalf.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overview-of-services"&gt;
  &lt;/a&gt;
  Overview of Services
&lt;/h2&gt;

&lt;p&gt;AWS Amplify is a suite of services ranging from UI components and a use case focused CLI to a CI/CD console and backend-scaffolding GUI.&lt;/p&gt;

&lt;p&gt;On the other hand, Amazon SES provides a scalable solution for sending email and is used at companies like Reddit and Netflix.&lt;/p&gt;

&lt;p&gt;In this post, we'll be using the Amplify CLI along with its JavaScript libraries to create a backend for a contact form, and use Amazon SES to send that information to our email.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;If you don't already have an AWS account or have the Amplify CLI installed, follow &lt;a href="https://docs.amplify.aws/start/getting-started/installation/q/integration/next#install-and-configure-the-amplify-cli"&gt;this guide&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🚨 This project makes use of lambda environment variables. The ability to do this via the CLI was introduced in version &lt;code&gt;5.1.0&lt;/code&gt;. You may need to run &lt;code&gt;npm install -g @aws-amplify/cli&lt;/code&gt; to ensure you're on the latest version.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once setup, clone this &lt;code&gt;contact-form-starter&lt;/code&gt; branch from this &lt;a href="https://github.com/mtliendo/amplify-email-recipes/tree/contact-form-starter"&gt;github url&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After cloning the project, install the dependencies and run the project. Below are some helpful commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// visit: https://github.com/mtliendo/amplify-email-recipes/tree/contact-form-starter&lt;/span&gt;

&lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;clone&lt;/span&gt; &lt;span class="nx"&gt;git&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;mtliendo&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;amplify&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;recipes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;git&lt;/span&gt;
&lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;amplify&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;recipes&lt;/span&gt;
&lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;checkout&lt;/span&gt; &lt;span class="nx"&gt;contact&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;starter&lt;/span&gt;
&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt;
&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the project has started, visit &lt;code&gt;localhost:3000&lt;/code&gt; and you should be presented with the following screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3VlHN9D---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n90724mt9efedfc4kmx6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3VlHN9D---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n90724mt9efedfc4kmx6.png" alt="Main page of contact form site"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-our-backend"&gt;
  &lt;/a&gt;
  Understanding Our Backend
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--poe6lx9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wm3utgolcosua1wtcq7x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--poe6lx9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wm3utgolcosua1wtcq7x.png" alt="architecture diagram of contact form using appsync, ses, lambda trigger, and dynamodb"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the above image as a reference, the Amplify services we'll need for our backend are in the following order:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;AppSync: Fully managed GraphQL API&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DynamoDB: NoSQL database&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lambda: FaaS/cloud function&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In short, when a user fills out their contact form, that information will be stored in our database via our API. When that item is successfully saved, it will automatically trigger a function to send an email.&lt;/p&gt;

&lt;p&gt;Sounds like a lot. Let's see what we have to do to get this working.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initializing-our-backend"&gt;
  &lt;/a&gt;
  Initializing Our Backend 🚀
&lt;/h2&gt;

&lt;p&gt;We'll start creating our backend by opening up a terminal and making sure we're in the root directory of our project.&lt;/p&gt;

&lt;p&gt;From here, we'll initialize Amplify by running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;amplify&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll give our project a name and when prompted, select &lt;code&gt;n&lt;/code&gt; to deny the default configuration. This is because we will be deploying our application as a static site. In NextJS, the name of that build directory is called &lt;code&gt;out&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the terminal, accept all of the prompts, except when it comes to the &lt;code&gt;Distribution Directory Path&lt;/code&gt; enter &lt;code&gt;out&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The entire flow should look like the below screenshot:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2KGa04Ts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t352huyjs8todeg5b5x3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2KGa04Ts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t352huyjs8todeg5b5x3.png" alt="Amplify Configure flow for static nextjs apps"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lastly, after selecting &lt;code&gt;AWS profile&lt;/code&gt; we'll choose the profile we'd like to use.&lt;/p&gt;

&lt;p&gt;The flow should look similar to the following screenshot:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q2YsRYBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5hkudm93gljt57hvzi1e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q2YsRYBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5hkudm93gljt57hvzi1e.png" alt="output from going through the Amplify init process"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-an-api"&gt;
  &lt;/a&gt;
  Adding An API
&lt;/h2&gt;

&lt;p&gt;With our application ready to use the Amplify CLI, we'll create our backend. As mentioned earlier, we are using AWS AppSync, which is a managed GraphQL API.&lt;/p&gt;

&lt;p&gt;Traditionally, when sending email, a REST API is used. However, I've found that as needs change, AppSync provides more flexibility when it comes to handling authorization and a few other features.&lt;/p&gt;

&lt;p&gt;To add an API in Amplify, we'll simply type the following command in our project's terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;amplify&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While in the CLI prompts, choose the following options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;GraphQL&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[enter] to accept the default name&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;API key&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Contact form public API"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[enter] to accept a default of 7 days&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[enter] to accept "No, I am done."&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[enter] to accept the default "N" option&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[enter] for a Single object with fields&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"y" to edit the schema now&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select your editor of choice&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By selecting those options through the prompts, we told Amplify how we would like our API to be built.&lt;/p&gt;

&lt;p&gt;At this point, Amplify has opened up a file called &lt;code&gt;schema.graphql&lt;/code&gt; with a sample Todo object. Replace everything in that file with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Candidate&lt;/span&gt;&lt;span class="w"&gt; 
  &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="w"&gt; 
  &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;operations&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;}]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AWSEmail&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To break down what's happening here, we are first creating a type called &lt;code&gt;Candidate&lt;/code&gt;. In our application, a &lt;em&gt;Candidate&lt;/em&gt; represents the user submitting their information.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;@model&lt;/code&gt; text is called a directive. When Amplify sees this, it will automatically create a DynamoDB table &lt;em&gt;and&lt;/em&gt; create CRUDL operations for the type it's associated with (in this case, Candidate).&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;@auth&lt;/code&gt; directive setups up authorization rules on our API. Here we are saying, "We want our API to be public to anyone with an API key, but we only want them to be able to create entries in out database, they can't read, update, or delete items.&lt;/p&gt;

&lt;p&gt;The next few lines are the fields associated with a Candidate. Here it's required that every Candidate has a unique id (automatically created with &lt;code&gt;ID&lt;/code&gt;), a name, and an email -- AWS has a primitive called AWSEmail that automatically validates an email pattern.&lt;/p&gt;

&lt;p&gt;With that, our API and database are ready to be deployed. Before doing so, let's move on to our function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-our-function-trigger"&gt;
  &lt;/a&gt;
  Setting Up Our Function Trigger
&lt;/h2&gt;

&lt;p&gt;AWS Lambda is an event-driven function. Meaning, it is called as a response to something. Often times, this is an endpoint like &lt;code&gt;/pets&lt;/code&gt;, but in our application, we want this function to be called whenever an item is added to our database.&lt;/p&gt;

&lt;p&gt;Fortunately, Amplify takes care of this process by allowing us to set this up from the CLI.&lt;/p&gt;

&lt;p&gt;In our terminal, let's go through the following prompts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;amplify add function&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lambda function (serverless function)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"contactformuploader" as the name of the function&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NodeJS&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Lambda Trigger&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon DynamoDB Stream&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use API category graphql @model backed DynamoDB table in the current Amplify project&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[enter] to not configure advanced settings&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[enter] to edit the local function now&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choose your editor of choice&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This will open up the function in your editor. Before we remove the contents, let's chat about the generated code.&lt;/p&gt;

&lt;p&gt;When a change happens to a record in our database -- a change being either a &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;MODIFY&lt;/code&gt;, or &lt;code&gt;REMOVE&lt;/code&gt; event, that information is sent as a &lt;em&gt;stream&lt;/em&gt; of data to our lambda function. &lt;/p&gt;

&lt;p&gt;However, our database can undergo heavy traffic. So instead of firing our lambda for one change at a time, the changes can be sent in batches called &lt;em&gt;shards&lt;/em&gt;. No need to get too technical, but this is why the generated code is iterating over &lt;code&gt;event.Records&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To drive the concept home, here's a diagram to showcase streaming and sharding:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sI9YhbjI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16iwurzkf6zfh432mmpu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sI9YhbjI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16iwurzkf6zfh432mmpu.png" alt="streams terminology"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With that mini-lesson out of the way, let's replace the content in our lambda function, with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-sdk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SES&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;streamedItem&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Records&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;streamedItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INSERT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;//pull off items from stream&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;candidateName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;streamedItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dynamodb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;candidateEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;streamedItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dynamodb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;

      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ses&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendEmail&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;Destination&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;ToAddresses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SES_EMAIL&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;Source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SES_EMAIL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;Subject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Candidate Submission&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
              &lt;span class="na"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`My name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;candidateName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;. You can reach me at &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;candidateEmail&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
              &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;})&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;done&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function will be automatically called when a candidate submits their information. The &lt;code&gt;event&lt;/code&gt; will contain the related stream of data. So from here our job is simple:&lt;/p&gt;

&lt;p&gt;Grab the items from the stream, and send an email.&lt;/p&gt;

&lt;p&gt;Using the AWS SDK, we call the &lt;code&gt;sendEmail&lt;/code&gt; function from the &lt;code&gt;ses&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;Wit that out of the way, we now have at least touched on all the pieces of our backend. We still however have a couple loose ends.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Our function doesn't have permission to interact with SES&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We need to setup this &lt;code&gt;process.env.SES_EMAIL&lt;/code&gt; variable&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We've yet to setup SES&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Our frontend code isn't setup to interact with our backend.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's change gears for a bit and start with the third item and revisit the others.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-ses"&gt;
  &lt;/a&gt;
  Setting Up SES
&lt;/h2&gt;

&lt;p&gt;As mentioned earlier, Amazon Simple Email Service (SES) provides a scalable way to send email. When first setting up SES, AWS will place you in sandbox mode.&lt;/p&gt;

&lt;p&gt;This means we'll have the following constraints:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We can only send/receive to verified email addresses&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We can only send 1 email/sec&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Only 200 emails/day are allowed&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Fortunately for our application, this won't matter too much.&lt;/p&gt;

&lt;p&gt;To get started, let's hop into our terminal and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;amplify&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When prompted, select "Amplify console".&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;📝 you may be asked to log in to your AWS account&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once logged in, search for "SES" in the top search bar of the console and hit enter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AAhXmLle--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2s5icpfb43o5r1aab4yv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AAhXmLle--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2s5icpfb43o5r1aab4yv.png" alt="AWS SES Getting Started Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should see a view similar to the one above. If not, you may need to click the top banner to be taken to this newer UI.&lt;/p&gt;

&lt;p&gt;From here, perform the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Click the orange "Create identity" button&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select the "Email address" option and enter your desired email&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the orange "Create identity" button&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oC9_ahT7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/axhc4oun0vlhq7cc9sxx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oC9_ahT7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/axhc4oun0vlhq7cc9sxx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it! Setting up an email for this service is well...simple 😅 &lt;/p&gt;

&lt;p&gt;There are two things we'll need before we hop back into our code.&lt;/p&gt;

&lt;p&gt;First, copy the ARN for your email by clicking the copy icon on the verified identities screen as show in the screenshot below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--olJz4z6x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j19o73wabvtxqeygqmcc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--olJz4z6x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j19o73wabvtxqeygqmcc.png" alt="Copy ARN"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Store that in a notepad. We'll need it in a bit.&lt;/p&gt;

&lt;p&gt;Next, SES sent a confirmation email to the email address that was provided. Click the verification link and we're all set to head back to our code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#updating-our-lambda"&gt;
  &lt;/a&gt;
  Updating Our Lambda
&lt;/h2&gt;

&lt;p&gt;Recall that we need to both give our function permission to access SES, and add an environment variable to the function called &lt;code&gt;SES_EMAIL&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's first update the permissions.&lt;/p&gt;

&lt;p&gt;In your project directory we'll want to navigate to the following directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;amplify&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="sr"&gt;/your-function-name/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside of this directory, you'll see the &lt;code&gt;src&lt;/code&gt; directory for lambda, and a file titled&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;your&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;cloudformation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_fwcReG3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqfy9q25ureax2bua8im.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_fwcReG3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqfy9q25ureax2bua8im.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select this file.&lt;/p&gt;

&lt;p&gt;No need to be intimidated, this JSON code is known as Cloudformation and is what Amplify has been creating for us when we were interacting with the CLI.&lt;/p&gt;

&lt;p&gt;It's full of settings and rules and we're about to add one more.&lt;/p&gt;

&lt;p&gt;Search for &lt;code&gt;lambdaexecutionpolicy&lt;/code&gt; (it should be right around line 132). &lt;/p&gt;

&lt;p&gt;This object has a &lt;code&gt;Statement&lt;/code&gt; array that currently contains a single object. This object lets our function create logs in AWS.&lt;/p&gt;

&lt;p&gt;Add the following object to the &lt;code&gt;Statement&lt;/code&gt; array &lt;strong&gt;and save&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Action&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ses:SendEmail&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
 &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Effect&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Allow&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Resource&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;the-arn-you-copied-from-ses&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This small addition gives our function the ability to call the &lt;code&gt;sendEmail&lt;/code&gt; function using the email we verified.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;lambdaexecutionpolicy&lt;/code&gt; object should look like the below screenshot (note I removed my email in place of a &lt;code&gt;*&lt;/code&gt; for a bit more flexibility):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3lojsEbg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k6rer8r1ma1p9e6qbge1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3lojsEbg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k6rer8r1ma1p9e6qbge1.png" alt="Lambda with SES permissions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next step is to add the environment variable to our function. &lt;/p&gt;

&lt;p&gt;Back in the terminal, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;amplify&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enter the following options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Lambda function (serverless function)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[Select your function name]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Environment variables configuration&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;type &lt;code&gt;SES_EMAIL&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enter the email that was verified with SES&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I'm done&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No -- I don't want to edit the local file now&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#push-up-our-backend"&gt;
  &lt;/a&gt;
  Push Up Our Backend
&lt;/h2&gt;

&lt;p&gt;We've done a lot by only running a few commands in the CLI. This templated our resources, but we have yet to push everything up to AWS.&lt;/p&gt;

&lt;p&gt;Let's fix that by running the following command in the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;amplify&lt;/span&gt; &lt;span class="nx"&gt;push&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will provide a table of the primary resources we created (recall that our database is a secondary resource created by the @model directive).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s----NZ1igz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6b23dmqmbuh48xgxwcbh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s----NZ1igz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6b23dmqmbuh48xgxwcbh.png" alt="amplify status"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After selecting that you'd like to continue, select the following options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Yes -- generate code for the API 🔥 &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[enter] to allow the default file path&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Yes -- generate all &lt;em&gt;possible&lt;/em&gt; operations (recall we only allow &lt;code&gt;create&lt;/code&gt; per our schema)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[enter] to accept a max depth of 2&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It'll take a few minutes for our terminal to finish up, but once that's done, our backend is complete 🎉 &lt;/p&gt;

&lt;p&gt;Let's wrap this up by giving our frontend the ability to talk to our backend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-amplify-libraries"&gt;
  &lt;/a&gt;
  Configuring Amplify Libraries
&lt;/h2&gt;

&lt;p&gt;We'll start off by installing the AWS Amplify JavaScript package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;amplify&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once that is installed, we'll marry our frontend and backend together. In &lt;code&gt;_app.js&lt;/code&gt;, add the following lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Amplify&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-amplify/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../src/aws-exports&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;Amplify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we bring in the Amplify library, bring in our config (Amplify generated this and put it in &lt;code&gt;.gitignore&lt;/code&gt;), and then we pass in our config to Amplify.&lt;/p&gt;

&lt;p&gt;Next up, in &lt;code&gt;ContactForm.js&lt;/code&gt;, we'll also bring in the following imports:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-amplify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createCandidate&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../src/graphql/mutations&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;📝 Feel free to check out the &lt;code&gt;createCandidate&lt;/code&gt; mutations file that Amplify generated for us.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The API category is how we will talk to our AppSync API. Recall that this should not only store the contact in our database, but send an email to our verified address as well.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ContactForm.js&lt;/code&gt; file has the following lines of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// TODO: Add code to send email here&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;send to backend here&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replace the above with this snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;createCandidate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that bit out of the way, we can now test our project!&lt;/p&gt;

&lt;p&gt;Restart your application on &lt;code&gt;localhost:3000&lt;/code&gt; and test it out. If all went well, after a few seconds you'll have an email in your inbox 🎉 &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;📝  Because our emails are being sent via SES, they may show up in a spam folder or flagged by your email provider. This is because we haven't setup DKIM with SES. Though not terribly difficult, it's out of scope for this tutorial. However, if interested, you can read more about it &lt;a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-authentication-dkim.html"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#hosting-our-project"&gt;
  &lt;/a&gt;
  Hosting Our Project
&lt;/h2&gt;

&lt;p&gt;Having this run locally is great, but for a contact form, chances are we want it to be live on the internet.&lt;/p&gt;

&lt;p&gt;Fortunately, Amplify allows us to do this from the CLI as well. &lt;/p&gt;

&lt;p&gt;To get started, in our terminal, we'll run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;amplify&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;hosting&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the prompts, we'll select the following options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Hosting with Amplify Console&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Manual Deployment&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once selected, we can run the following command to view changes and upon accepting, our application will be deployed and a live on the web:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;amplify&lt;/span&gt; &lt;span class="nx"&gt;publish&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2yM0mT_c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b75erjs22i0t6ls7xw57.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2yM0mT_c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b75erjs22i0t6ls7xw57.png" alt="Amplify hosting flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Copy and paste the generated URL in your terminal to browser to view.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you may have noticed in the CLI prompts, Amplify also supports git-based deployments. More information on setting that up can be found in the &lt;a href="https://docs.amplify.aws/guides/hosting/git-based-deployments/q/platform/js#n4-deploy-your-app-to-aws-amplify"&gt;Amplify docs&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;p&gt;Using Amplify takes care of a lot of the heavy-lifting when it comes to setting up AWS services so that we can focus on our actual business logic. &lt;/p&gt;

&lt;p&gt;It's also good to remember that Amplify allows us to own the code that we deploy by letting us modify the generated Cloudformation templates.&lt;/p&gt;

&lt;p&gt;Be sure to follow this series, or &lt;a href="https://twitter.com/intent/follow?screen_name=mtliendo"&gt;follow me on Twitter&lt;/a&gt; to get notified when the next iteration of this series comes out: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sending emails with attachments!&lt;/strong&gt; 📧 &lt;/p&gt;

&lt;p&gt;Until then 🤖&lt;/p&gt;

</description>
      <category>aws</category>
      <category>amplify</category>
      <category>serverless</category>
      <category>chakraui</category>
    </item>
    <item>
      <title>Migrate Adonis.js v4 user passwords to v5</title>
      <author>Chirill Ceban</author>
      <pubDate>Tue, 06 Jul 2021 16:15:10 +0000</pubDate>
      <link>https://dev.to/bitkidd/migrate-adonis-js-v4-user-passwords-to-v5-2m21</link>
      <guid>https://dev.to/bitkidd/migrate-adonis-js-v4-user-passwords-to-v5-2m21</guid>
      <description>&lt;p&gt;A new version of &lt;a href="https://adonisjs.com"&gt;Adonis.js&lt;/a&gt; isn't just a simple update, it is a complete revamp of all the core modules and structure including hashing mechanism.&lt;/p&gt;

&lt;p&gt;Prior the update Adonis.js used plain &lt;code&gt;bcrypt&lt;/code&gt; hashing implementation but now it became more standartized, the use of &lt;a href="https://github.com/P-H-C/phc-string-format/blob/master/phc-sf-spec.md"&gt;PHC string format&lt;/a&gt; allows to incorporate different hashers and verify the hashes against the current configuration and then decide if the hash needs to be rehashed or not.&lt;/p&gt;

&lt;p&gt;This change leads to a situation when old v4 hashes will not be compatible with v5 and your users will not be able to login.&lt;/p&gt;

&lt;p&gt;The way to resolve this problem I'd describe in three steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Expand hasher with our own &lt;code&gt;legacy&lt;/code&gt; driver&lt;/li&gt;
&lt;li&gt;On user authentication attempt check if the password has been hashed using an old hasher, if yes, use our new &lt;code&gt;legacy&lt;/code&gt; driver&lt;/li&gt;
&lt;li&gt;Authenticate user and rehash password using a new hasher, in my case I'm using &lt;code&gt;argon2&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#expanding-the-hasher"&gt;
  &lt;/a&gt;
  Expanding the hasher
&lt;/h3&gt;

&lt;p&gt;To expand the hasher we have to create a new local provider by running a corresponding command inside our projects folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node ace make:provider LegacyHasher
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will generate a new provider file inside &lt;code&gt;/providers&lt;/code&gt; folder. After the file has been generated, we have to add it to &lt;code&gt;.adonisrc.json&lt;/code&gt; into &lt;code&gt;providers&lt;/code&gt; section.&lt;/p&gt;

&lt;p&gt;Before actually expending we have to create a new &lt;code&gt;Hash&lt;/code&gt; driver, as an example we can use the code provided in an official documentation &lt;a href="https://docs.adonisjs.com/guides/security/hashing#adding-a-custom-driver"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I created a separate folder inside &lt;code&gt;/providers&lt;/code&gt;, named it &lt;code&gt;LegacyHashDriver&lt;/code&gt; and placed my &lt;code&gt;legacy&lt;/code&gt; driver there (inside an &lt;code&gt;index.ts&lt;/code&gt; file).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;bcrypt&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bcrypt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;HashDriverContract&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@ioc:Adonis/Core/Hash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cm"&gt;/**
 * Implementation of custom bcrypt driver
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;LegacyHashDriver&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;HashDriverContract&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/**
   * Hash value
   */&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;bcrypt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="cm"&gt;/**
   * Verify value
   */&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hashedValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;plainValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;bcrypt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;plainValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hashedValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, it depends on a &lt;code&gt;bcrypt&lt;/code&gt; package, you'll have to install it before running.&lt;/p&gt;

&lt;p&gt;Having created a new driver, we can now expand the &lt;code&gt;Hash&lt;/code&gt; core library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ApplicationContract&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@ioc:Adonis/Core/Application&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;LegacyHashDriver&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./LegacyHashDriver&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;LegacyHasherProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ApplicationContract&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;boot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Adonis/Core/Hash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;legacy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;LegacyHashDriver&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are two additional things we have to do before proceeding to actual testing of implementation. We have to add our new hasher to &lt;code&gt;contracts/hash.ts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@ioc:Adonis/Core/Hash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;HashersList&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;bcrypt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BcryptConfig&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BcryptContract&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nl"&gt;argon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ArgonConfig&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ArgonContract&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nl"&gt;legacy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
      &lt;span class="nl"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HashDriverContract&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add it to &lt;code&gt;config/hash.ts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="nx"&gt;legacy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;legacy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#authenticating-users-with-legacy-hasher"&gt;
  &lt;/a&gt;
  Authenticating users with legacy hasher
&lt;/h3&gt;

&lt;p&gt;As user tries to login the first thing you do (after request validation) is user search, by email or username. When you find a corresponding record, you can check if the password hash has been generated using an old method, by testing it&lt;br&gt;
agains a simple regex. Then later verify it using the right hash driver.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;usesLegacyHasher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="sr"&gt;2&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;aby&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isMatchedPassword&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;usesLegacyHasher&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;isMatchedPassword&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;legacy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;isMatchedPassword&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rehashing-old-user-password"&gt;
  &lt;/a&gt;
  Rehashing old user password
&lt;/h3&gt;

&lt;p&gt;Rehashing user password on login is the most convenient way to migrate to a new driver. I do this after I checked all the security things, found the user and know that the password is hashed using an old method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// rehash user password&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;usesLegacyHasher&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ok&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;internalServerError&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can test it and it should work. You can expand hasher not only to migrate from v4 to v5, but even when you try to build your app on top of existing database.&lt;/p&gt;

</description>
      <category>adonisjs</category>
      <category>adonis</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
