<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Introduction to Asynchronous Programming with JavaScript</title>
      <author>Kingsley Ubah</author>
      <pubDate>Sun, 02 May 2021 18:47:50 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/introduction-to-asynchronous-programming-with-javascript-1j8i</link>
      <guid>https://dev.to/ubahthebuilder/introduction-to-asynchronous-programming-with-javascript-1j8i</guid>
      <description>&lt;p&gt;Your plan was to drink some tea while you read a book. However, when you were about to start, you noticed that there was no sugar for the tea. Instead of completely aborting your plan, you send for some sugar, keep aside the tea and begin reading. When the sugar arrives, you are notified. You pause reading, mix up the tea with the sugar, and go back to your initial plan.&lt;/p&gt;

&lt;p&gt;This is an &lt;strong&gt;Asynchronous Pattern&lt;/strong&gt;. JavaScript inherently supports Async programming patterns with something known as &lt;strong&gt;Callbacks&lt;/strong&gt;. Going back to our analogy, you were "called back" when your sugar arrived. You then proceeded to &lt;em&gt;mix them up together&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Callbacks in JavaScript works kind of in the same way. These are functions which contains instructions/statements you want to run after the Asynchronous process is resolved.  A callback is the &lt;strong&gt;unit of Asynchrony&lt;/strong&gt;. When you see a callback in a code, know that part will &lt;strong&gt;not resolve immediately&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Callbacks are simply functions passed as an argument to another "Async" function.&lt;/p&gt;

&lt;p&gt;They are set-up as continuation for processes which are Asynchronous in nature. A very good example would be an Asynchronous get request to an external API with a utility such as fetch ().&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://some.url.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;// Error. `data` won't have the Ajax results by the time this runs. &lt;/span&gt;

&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://some.url.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myCallbackFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 'data' now has the results! &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's break down that code snippet fellas.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The first function is asynchronously processed, &lt;strong&gt;i.e it runs later&lt;/strong&gt;.This means that console.log() statement is going to run before the data is returned. The outcome being that 'data' variable will not have the results stored.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The second function makes an API call to a server. This indicates &lt;strong&gt;Asynchrony&lt;/strong&gt;. You then define a callback which will be "called" when the Async process resolves. The callback can optionally take in the result of the Async process (data from API, in this case), work on it and return an output.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;What actually happens under the hood?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What happens is that the JavaScript engine runs in a synchronous, single-threaded pattern. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Synchronous:&lt;/strong&gt; It executes statements orderly, one after the other.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Single-threaded:&lt;/strong&gt; Two instructions cannot run on the same thread, as is obtainable with languages like Java. One simple instruction runs, then another.&lt;/p&gt;

&lt;p&gt;When you bring Asynchrony into the fore, some interesting things starts to happen. &lt;/p&gt;

&lt;p&gt;The JS engine &lt;strong&gt;doesn't&lt;/strong&gt; run in alone. It runs inside a hosting environment, which is for most developers the typical web browser and for many others, Node JS environment.&lt;/p&gt;

&lt;p&gt;Whenever your JS program makes an Ajax request to fetch data from a server API, you set up the "response" code in a function (callback), and the JS engine tells the hosting environment that it is going to &lt;strong&gt;suspend execution&lt;/strong&gt; for the meantime and when the environment is done with the network request and is with data, it simply should call the function back. &lt;/p&gt;

&lt;p&gt;The browser is then set up to listen for the response from the network, and when it has something to give you, it schedules the callback function to be executed by inserting it into the event loop.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What is an event loop?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Consider this hypothetical piece of code I got:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;eventLoop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt; 
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="c1"&gt;// keep going "forever" &lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
&lt;span class="c1"&gt;// perform a "tick" &lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventLoop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
&lt;span class="c1"&gt;// get the next event in the queue &lt;/span&gt;
&lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;eventLoop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
&lt;span class="c1"&gt;// now, execute the next event &lt;/span&gt;
   &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
   &lt;span class="p"&gt;}&lt;/span&gt; 
   &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
   &lt;span class="nx"&gt;reportError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
  &lt;span class="p"&gt;}&lt;/span&gt; 
 &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's break down this code fellas.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; 'eventLoop' is an array that acts as a queue (first-in, first-out)&lt;/li&gt;
&lt;li&gt;the 'event' variable is initialized.&lt;/li&gt;
&lt;li&gt;while...true ensures that the loop will run continuously and in it we use a conditional to check if the event loop has an item in it. That is, if there is a callback inserted to be executed. &lt;/li&gt;
&lt;li&gt;The next task is gotten with the shift() method and executed in the try block. It is then removed from the queue. This happens continuously. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*&lt;em&gt;This is how an event loop works. *&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There are other important concepts to understand. These include &lt;strong&gt;run-to-completion&lt;/strong&gt;, &lt;strong&gt;parallel threading&lt;/strong&gt; and &lt;strong&gt;concurrency&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;All these topics will be discussed in future posts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#promises"&gt;
  &lt;/a&gt;
  PROMISES
&lt;/h3&gt;

&lt;p&gt;You went to the post office to get two of your packages. At the counter, the attendant tells you: "Hey, both your packages are currently unavailable but will be here in about 5 minutes. Can you please take a seat and wait a little? Thank you"&lt;em&gt;. **That is a promise.&lt;/em&gt;*&lt;/p&gt;

&lt;p&gt;You go and take a seat. In a few minutes, your package arrives. However, you requested for two packages. Instead of calling you and handing over just one, the cashier waits for resolution and the order remains open. Once the second package arrives, you are then now called and handed over your complete package. The order is now fulfilled (or resolved with a success message). Had any or both of the packages not have arrived, the order would have been rejected (or resolved with a failure). When the message (or package) is delivered, it becomes immutable. So you cannot go back and claim the package was opened before handed over to you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sorry for the long story, just hope you have an idea of how it works.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are two key things to note from my explanation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Promises are time-independent. This means that if there are say two or more Async processes, a promise will wait for ALL to resolve before resolving itself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When promises are returned, they become immutable. You can then only alter their contents in the chained handlers which can be resolve() or rejected () handler.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The handlers are defined in the chained then() method. If the promise resolved with a success, the resolve(), or the first function is called. If an error occurred (rejection), a reject() or second function is called.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xPromise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;yPromise&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
&lt;span class="c1"&gt;// `Promise.all([ .. ])` takes an array of promises, &lt;/span&gt;
&lt;span class="c1"&gt;// and returns a new promise that waits on them all to finish&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;xPromise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;yPromise&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="c1"&gt;// when that promise is resolved, let's take the received `X` and `Y` values and add them together. &lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; 
&lt;span class="c1"&gt;// `values` is an array of the messages from the &lt;/span&gt;
&lt;span class="c1"&gt;// previously resolved promises &lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 


&lt;span class="c1"&gt;// `fetchX()` and `fetchY()` return promises for &lt;/span&gt;
&lt;span class="c1"&gt;// their respective values, which may be ready &lt;/span&gt;
&lt;span class="c1"&gt;// *now* or *later*. &lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;fetchX&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;fetchY&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;// we get a promise back for the sum of those &lt;/span&gt;
&lt;span class="c1"&gt;// two numbers. &lt;/span&gt;
&lt;span class="c1"&gt;// now we chain-call `then(..)` to wait for the &lt;/span&gt;
&lt;span class="c1"&gt;// resolution of that returned promise. &lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// that was easier! &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code is fine, but it's missing one component. What if the promise got rejected? What if an error occurred while adding up the two values?&lt;/p&gt;

&lt;p&gt;That's when we'll need to define a second function for error handling:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;fetchX&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;fetchY&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; 
&lt;span class="c1"&gt;// fullfillment handler &lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;},&lt;/span&gt; 
&lt;span class="c1"&gt;// rejection handler &lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// bummer! &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that you can defined a catch method at the bottom of the chain and avoid having to include rejection handlers on all then() methods.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;N/B: If you want to learn more about Callbacks and Promises, and see it in action, I'll suggest you get the  &lt;a href="https://gumroad.com/a/834147443"&gt;HTML to React Course&lt;/a&gt;  by SleeplessYogi&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is still a lot to learn about Promises. But this covers the basics about it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generators"&gt;
  &lt;/a&gt;
  Generators
&lt;/h3&gt;

&lt;p&gt;We've so far learned that we can implement Asynchronous patterns in our JavaScript with callbacks and promises, there's one new addition to that list: &lt;strong&gt;Generators&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Remember when I mentioned run-to-completion? Time to get into it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;All normal functions in JavaScript have &lt;strong&gt;run-to-completion&lt;/strong&gt;. This means that the JavaScript engine will execute all statements in one function before doing anything else. &lt;/p&gt;

&lt;p&gt;Here's the flow in a normal function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// runs first&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// runs after&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Generators are functions which do not obey this principle. These functions can pause in the middle and "yield"  for another function to execute before resuming it's own execution.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- yield a value! &lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// first `next()`, don't pass anything &lt;/span&gt;
&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// "Hello" &lt;/span&gt;
&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// pass `7` to waiting `yield` &lt;/span&gt;
&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's break this code down fellas&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The asterisk (*) indicates that this is a generator function, not a normal function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The yield statement signals the first "stop point".&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The iterator of the function is instantiated with an argument and stored in the variable&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The iteration is kick-started with the first next() call. You don't pass anything here. When this is done, engine starts executing then stops at the next pause.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;See that in the yield statement, a placeholder value is defined. This value will be replaced by whatever we pass to the second next() call, which is 7. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;That call also resumes iteration and the function resolves to 13, as showing with the value property.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Generators can be very useful for Asynchronous programming. A good use case of generator would be to yield for an AJAX call to an API before resuming the function with the returned data.&lt;/p&gt;

&lt;p&gt;If you liked or benefited from this article, consider buying me my favourite fruit:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/ubahthebuilder"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc5Aqnyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520pineapple%26emoji%3D%25F0%259F%258D%258D%26slug%3Dubahthebuilder%26button_colour%3De0b51a%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Will appreciate that a lot.&lt;/p&gt;

&lt;p&gt;Thank you and see you soon.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>I will make you an awesome website! 😄️</title>
      <author>CristoferK</author>
      <pubDate>Sun, 02 May 2021 18:32:19 +0000</pubDate>
      <link>https://dev.to/cristoferk/i-will-make-you-an-awesome-website-4ka1</link>
      <guid>https://dev.to/cristoferk/i-will-make-you-an-awesome-website-4ka1</guid>
      <description>&lt;p&gt;The Fiverr link: &lt;a href="https://www.fiverr.com/cristoferk29/make-an-awesome-website-for-you"&gt;https://www.fiverr.com/cristoferk29/make-an-awesome-website-for-you&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you want an awesome website for a small price? If yes, you are at the right place! Why choose me?&lt;br&gt;
      - Nice UI's&lt;br&gt;
      - Clean Code&lt;br&gt;
      - Just HTML5, CSS3 and JavaScript&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>awesome</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Tutorial: Add Forms to Static Sites with Google Sheets</title>
      <author>Bootstrapper's Tales</author>
      <pubDate>Sun, 02 May 2021 17:34:50 +0000</pubDate>
      <link>https://dev.to/bs_tales/tutorial-add-forms-to-static-sites-with-google-sheets-1c3a</link>
      <guid>https://dev.to/bs_tales/tutorial-add-forms-to-static-sites-with-google-sheets-1c3a</guid>
      <description>&lt;p&gt;&lt;strong&gt;Originally posted on &lt;a href="https://bootstrapperstales.com/forms-static-site-googlesheets?utm_source=devto"&gt;Bootstrapper's Tales&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I decided to add a guides section to the blog. The plan is simple - every time I spend too much time figuring something out, I'll write a guide about it.&lt;/p&gt;

&lt;p&gt;This guide is about how to create an HTML form that stores responses directly to a Google Sheet. It's how I set up the email sign-up form you see at the bottom of the page 👇👇👇 &lt;/p&gt;

&lt;p&gt;It's easy, requires no extra services, and takes around 10 minutes. The perfect solution to collect emails on a small static website. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-prepare-the-google-sheet"&gt;
  &lt;/a&gt;
  Step 1: Prepare the Google Sheet
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Go to &lt;a href=""&gt;Google Sheets&lt;/a&gt; and create a blank sheet&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Name it however you'd like. In the first row insert &lt;code&gt;timestamp&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt; as headers&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9P8G9OOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ro9gz8r8l55bfqic3sd7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9P8G9OOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ro9gz8r8l55bfqic3sd7.png" alt="Sheet Headers" title="Sheet Headers"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On the top bar, click on Tools &amp;gt; Script Editor&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Name your script&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Paste the following code into &lt;code&gt;Code.gs&lt;/code&gt; (Override any code there)&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sheetName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sheet1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;scriptProp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;PropertiesService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getScriptProperties&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;initialSetup&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;activeSpreadsheet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SpreadsheetApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getActiveSpreadsheet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;scriptProp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;activeSpreadsheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getId&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doPost&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;LockService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getScriptLock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tryLock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SpreadsheetApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;openById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scriptProp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sheet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSheetByName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sheetName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getRange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getLastColumn&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;getValues&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;nextRow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getLastRow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;newRow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;header&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;timestamp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parameter&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="nx"&gt;sheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getRange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nextRow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newRow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;setValues&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;newRow&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ContentService&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextOutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;result&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;row&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;nextRow&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setMimeType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ContentService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MimeType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ContentService&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextOutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;result&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setMimeType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ContentService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MimeType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;releaseLock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Save the script&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-2-setup-and-publish-the-project"&gt;
  &lt;/a&gt;
  Step 2: Setup and publish the project
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; On the top, choose &lt;code&gt;initialSetup&lt;/code&gt; function and click run
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7VBsEJkU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ulh3s69tlekdn6bcmpq9.png" alt="Run initialSetup" title="Run initialSetup"&gt;
&lt;/li&gt;
&lt;li&gt;Authorize the script with your Google Account&lt;/li&gt;
&lt;li&gt;On the left, click "Triggers" (clock icon) and then Add Trigger.&lt;/li&gt;
&lt;li&gt;Choose the following settings and click save&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TnnOMeNl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/08h9eixg3linczp0fvlv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TnnOMeNl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/08h9eixg3linczp0fvlv.png" alt="Google Sheets Form Trigger" title="Google Sheets Form Trigger"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On the top, click Deploy &amp;gt; new deployment&lt;/li&gt;
&lt;li&gt;Select type (cog-wheel icon) &amp;gt; Web app&lt;/li&gt;
&lt;li&gt;Insert description, choose "Execute as Me", set access to "Anyone" and finally hit deploy&lt;/li&gt;
&lt;li&gt;Take note of the web app URL that is provided on screen&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-3-add-the-form-to-your-website"&gt;
  &lt;/a&gt;
  Step 3: add the form to your website
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Add the code below to your website. Replace &lt;code&gt;YOUR_WEB_APP_URL&lt;/code&gt; with your web app URL
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"text-align:center;"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"submit-to-google-sheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Email"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"email-submit"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Send&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scriptURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;YOUR_WEB_APP_URL&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forms&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;submit-to-google-sheet&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;submit_button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button#email-submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;submit_button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sending...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scriptURL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Success!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;submit_button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Done!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;submit_button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#extras"&gt;
  &lt;/a&gt;
  Extras
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-add-a-google-form-fallback"&gt;
  &lt;/a&gt;
  1. Add a Google Form fallback
&lt;/h3&gt;

&lt;p&gt;I'm not 100% sure what the capacity of this method is. Can it handle 1000 form submits (I wish 😅) within a minute?&lt;/p&gt;

&lt;p&gt;So, just to make sure, I implemented a fallback. In case of failure, my website opens a new tab with a Google Form to submit an email.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a &lt;a href=""&gt;Google From&lt;/a&gt; and set up the relevant questions (i.e. email)&lt;/li&gt;
&lt;li&gt;Add the following snippet when your post request fails. Replace &lt;code&gt;GOOGLE_FORM_LINK&lt;/code&gt; with the link to your form
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window.open(GOOGLE_FORM_LINK);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;So all in all your html code should look like this
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form style="text-align:center;" name="submit-to-google-sheet"&amp;gt;
  &amp;lt;input name="email" type="email" placeholder="Email" required&amp;gt;
  &amp;lt;button id="email-submit" type="submit"&amp;gt;Send&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;script&amp;gt;
  const scriptURL = YOUR_WEB_APP_URL
  const form = document.forms['submit-to-google-sheet']

  form.addEventListener('submit', e =&amp;gt; {
    e.preventDefault()
    submit_button = document.querySelector("button#email-submit");
    submit_button.innerText = "Sending...";
    fetch(scriptURL, { method: 'POST', body: new FormData(form)})
      .then(function(response){
                console.log('Success!', response);
                submit_button.innerText = "Done!";
                })
      .catch(function(error) {
                console.error('Error!', error.message);
                submit_button.innerText = "Error!";
                window.open(GOOGLE_FORM_LINK);
                })
  })
&amp;lt;/script&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-collect-more-fields"&gt;
  &lt;/a&gt;
  2. Collect more fields
&lt;/h3&gt;

&lt;p&gt;To capture more fields in your static site form, simply:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add headers to your Google Sheet&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; to your html form with a &lt;code&gt;name&lt;/code&gt; attribute that exactly matches your header. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For example, let's add first names. Your Google Sheet:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hjaSHlgF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdbu9h9mqjuthvtua43q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hjaSHlgF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdbu9h9mqjuthvtua43q.png" alt="Google Sheet First Name" title="Google Sheet First Name"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your HTML static form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form style="text-align:center;" name="submit-to-google-sheet"&amp;gt;
  &amp;lt;input name="email" type="email" placeholder="Email" required&amp;gt;
  &amp;lt;input name="first_name" type="text" placeholder="Your Name" required&amp;gt;
  &amp;lt;button id="email-submit" type="submit"&amp;gt;Send&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;I hope you enjoyed my guide! For more, follow me on &lt;a href="https://twitter.com/bs_tales"&gt;Twitter&lt;/a&gt; or visit &lt;a href="http://bootstrapperstales.com"&gt;my blog&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;em&gt;adapted from &lt;a href="https://github.com/jamiewilson/form-to-google-sheets" rel="nofollow"&gt;jamiewilson&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>gatsby</category>
      <category>tutorial</category>
      <category>html</category>
      <category>javascript</category>
    </item>
    <item>
      <title>ReactQuill with NextJS</title>
      <author>A7U</author>
      <pubDate>Sun, 02 May 2021 17:32:34 +0000</pubDate>
      <link>https://dev.to/a7u/reactquill-with-nextjs-478b</link>
      <guid>https://dev.to/a7u/reactquill-with-nextjs-478b</guid>
      <description>&lt;p&gt;Hey everyone, just wanted to share this with you. So I've been trying to find rich editors that were compatible with NextJS. Couldn't find any but I found a way to get ReactQuill working.&lt;/p&gt;

&lt;p&gt;Import dynamic&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dynamic&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react/dynamic&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that import ReactQuill using dynamic&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ReactQuill&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dynamic&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-quill&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;ssr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can easily use it!&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dynamic&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/dynamic&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ReactQuill&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dynamic&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-quill&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;ssr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-quill/dist/quill.snow.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ReactQuill&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope this helps 😊&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>markdown</category>
      <category>editor</category>
      <category>react</category>
    </item>
    <item>
      <title>Automatic Configuration Reloading in Java Applications on Kubernetes</title>
      <author>Frank Rosner</author>
      <pubDate>Sun, 02 May 2021 17:29:36 +0000</pubDate>
      <link>https://dev.to/frosnerd/automatic-configuration-reloading-in-java-applications-on-kubernetes-1li7</link>
      <guid>https://dev.to/frosnerd/automatic-configuration-reloading-in-java-applications-on-kubernetes-1li7</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Applications developed for Kubernetes following the &lt;a href="https://12factor.net/"&gt;twelve-factor methodology&lt;/a&gt; are typically straightforward to operate. The third factor governs &lt;a href="https://12factor.net/config"&gt;application configuration&lt;/a&gt;. Twelve-factor apps should strictly separate configuration from code, making it easy to deploy them to different environments without code changes. They should also store configuration as environment variables, since they are language- and OS-agnostic.&lt;/p&gt;

&lt;p&gt;If there are special quality requirements however, you might want to deviate from that principle. Let's take a stateful, highly available application, such as a distributed database, for example. Since Linux assigns environment variables to a process on startup, it is not (easily) possible to change them without restarting the process.&lt;/p&gt;

&lt;p&gt;In Kubernetes terms, this means any change to the environment variables of a deployment will roll its pods. If your application is stateful, this can be costly, since state has to be migrated when pods get restarted, making a configuration change a non-trivial operation.&lt;/p&gt;

&lt;p&gt;Luckily, there are other ways to implement configuration changes that do not require pod restarts. One of them is to store your application configuration in a config map and mount it into your containers. When you update the config map, Kubernetes will eventually update the mounted files as well and your application can read the updated configuration.&lt;/p&gt;

&lt;p&gt;In this blog post we want to take a look at how to implement that mechanism inside a Java application. The remainder of the post is structured as follows. First, we will implement our Java application which supports automatic configuration reloading. The following section describes how to deploy it to Kubernetes. We are closing the post by discussing and summarizing the findings. The &lt;a href="https://github.com/FRosner/k8s-java-config-reload"&gt;source code&lt;/a&gt; is available on GitHub.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h1&gt;

&lt;p&gt;When it comes to configuration management on the JVM, there are many options. One of the "old hands" in the business is &lt;a href="https://commons.apache.org/proper/commons-configuration/index.html"&gt;Apache Commons Configuration&lt;/a&gt;. It provides a generic configuration interface to manage Java application configuration coming from various sources since 2005.&lt;/p&gt;

&lt;p&gt;Apache Commons Configuration also supports &lt;a href="https://commons.apache.org/proper/commons-configuration/userguide/howto_reloading.html"&gt;automatic reloading&lt;/a&gt; of configuration sources, which is what we are going to use to reload the changes to our configuration file which will be mounted inside the container.&lt;/p&gt;

&lt;p&gt;First, let's define a &lt;code&gt;ConfigReloader&lt;/code&gt; class that encapsulates the periodic configuration reloading and exposes a method to retrieve the latest configuration. To accomplish periodic reloading, we need two components: A &lt;code&gt;ReloadingFileBasedConfigurationBuilder&lt;/code&gt; and a &lt;code&gt;PeriodicReloadingTrigger&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ReloadingFileBasedConfigurationBuilder&lt;/code&gt; is responsible for reloading the configuration file and we will set it up to work with a given properties file. The &lt;code&gt;PeriodicReloadingTrigger&lt;/code&gt; triggers the builder to check for modifications on the file and reload it if necessary at a given interval. The following code snippet shows our implementation of the &lt;code&gt;ConfigReloader&lt;/code&gt; class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.File&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.concurrent.TimeUnit&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.commons.configuration2.Configuration&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.commons.configuration2.FileBasedConfiguration&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.commons.configuration2.PropertiesConfiguration&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.commons.configuration2.builder.ReloadingFileBasedConfigurationBuilder&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.commons.configuration2.builder.fluent.Parameters&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.commons.configuration2.ex.ConfigurationException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.commons.configuration2.reloading.PeriodicReloadingTrigger&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConfigReloader&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;AutoCloseable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;PeriodicReloadingTrigger&lt;/span&gt; &lt;span class="n"&gt;trigger&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;ReloadingFileBasedConfigurationBuilder&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FileBasedConfiguration&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ConfigReloader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;configFilePath&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;Parameters&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Parameters&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="nc"&gt;File&lt;/span&gt; &lt;span class="n"&gt;propertiesFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configFilePath&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ReloadingFileBasedConfigurationBuilder&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FileBasedConfiguration&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;
        &lt;span class="nc"&gt;PropertiesConfiguration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;configure&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fileBased&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;setFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;propertiesFile&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;trigger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PeriodicReloadingTrigger&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getReloadingController&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
        &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;TimeUnit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SECONDS&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;trigger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Configuration&lt;/span&gt; &lt;span class="nf"&gt;getConfig&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getConfiguration&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ConfigurationException&lt;/span&gt; &lt;span class="n"&gt;cex&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;RuntimeException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cex&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="nd"&gt;@Override&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;trigger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stop&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Note that in order to return the latest configuration, we must query the builder on each request. Internally, it will keep a reference to the current configuration that gets updated atomically after a successful reload. This way, we guarantee to the callers of &lt;code&gt;ConfigReloader.getConfig&lt;/code&gt; that the returned configuration does not update while it is in use.&lt;/p&gt;

&lt;p&gt;Next, let's implement a main class that will print something to the standard output stream based on the current configuration value. First, we initialize the &lt;code&gt;ConfigReloader&lt;/code&gt; with a path to a properties file that will later be mounted inside the container. Then we endlessly print a greeting message to a configurable user at a configurable interval. Here goes the code.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Date&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.commons.configuration2.Configuration&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="nc"&gt;InterruptedException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ConfigReloader&lt;/span&gt; &lt;span class="n"&gt;configReloader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ConfigReloader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/config/config.properties"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Configuration&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;configReloader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getConfig&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sleepInterval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sleepIntervalMillis"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello %s, it is %s"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
        &lt;span class="nc"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sleep&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sleepInterval&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#deployment"&gt;
  &lt;/a&gt;
  Deployment
&lt;/h1&gt;

&lt;p&gt;In order to deploy our application to Kubernetes, we first need to bake it into a Docker image. We are going to utilize the Jib Maven plugin:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.google.cloud.tools&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jib-maven-plugin&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.0.0&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;to&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;image&amp;gt;&lt;/span&gt;k8s-java-config-reload&lt;span class="nt"&gt;&amp;lt;/image&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/to&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To test it, we can start a minikube cluster and build the image directly with the minikube Docker daemon:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;minikube start
&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;minikube docker-env&lt;span class="si"&gt;)&lt;/span&gt;
mvn compile jib:dockerBuild
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next, we create a new config map manifest containing the properties file.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ConfigMap&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;k8s-java-config-reload-configmap&lt;/span&gt;
&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;config.properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|-&lt;/span&gt;
    &lt;span class="s"&gt;name=Frank&lt;/span&gt;
    &lt;span class="s"&gt;sleepIntervalMillis=1000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We then create a pod manifest and tell Kubernetes to mount the config map into the container. Note that in production, you probably want to use a more sophisticated mechanism to deploy your application, such as a deployment. But for the sake of this example, a pod is perfectly fine.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Pod&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;k8s-java-config-reload-pod&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;k8s-java-config-reload&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;k8s-java-config-reload&lt;/span&gt;
      &lt;span class="na"&gt;imagePullPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;IfNotPresent&lt;/span&gt;
      &lt;span class="na"&gt;volumeMounts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config-volume&lt;/span&gt;
          &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/config&lt;/span&gt;
  &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config-volume&lt;/span&gt;
      &lt;span class="na"&gt;configMap&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;k8s-java-config-reload-configmap&lt;/span&gt;
  &lt;span class="na"&gt;restartPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Always&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We can then deploy both resources using &lt;code&gt;kubectl&lt;/code&gt; and the application should load the configuration file and start greeting Frank. When following the container logs and updating the config map we can observe how the greetings change.&lt;/p&gt;


&lt;div class="ltag_asciinema"&gt;
  
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#discussion-and-summary"&gt;
  &lt;/a&gt;
  Discussion and Summary
&lt;/h1&gt;

&lt;p&gt;As you can see from the demo, it takes a bit of time until the config change is propagated entirely. The reason for this is that kubelet syncs the mounted config maps in the pod once every minute (see &lt;a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/"&gt;&lt;code&gt;--sync-frequency&lt;/code&gt;&lt;/a&gt;). It also caches existing config map data which has to be invalidated before the new value becomes visible to the container. Additionally, we have the periodic reloading delay inside our Java program. Note that you can trigger an immediate reload of the config map by updating one of the pod's annotations, e.g. by storing a hash of the config map contents in a pod annotation.&lt;/p&gt;

&lt;p&gt;If you need your configuration changes to be rolled out more immediate, there are other options as well. Rather than reading from a properties file, you could use a key-value store such as &lt;a href="https://www.consul.io/"&gt;Consul&lt;/a&gt;, &lt;a href="https://etcd.io/"&gt;etcd&lt;/a&gt;, or &lt;a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-parameter-store.html"&gt;AWS Systems Manager Parameter Store&lt;/a&gt;. While this gives you more direct control of configuration changes, it introduces new challenges. First, managing your configuration as code might require additional tooling, such as defining them as Terraform resources. Additionally, your application will have to know how to speak to the configuration services, including a proper authentication mechanism.&lt;/p&gt;

&lt;p&gt;Another use case where the mounted configmap approach falls short is when you want to reload application secrets, such as credentials, without restarting the pod. In this case, using a central configuration store / secrets manager in combination with an application-internal cache is a good option. The cache can be invalidated once a 401 is hit. This way, rotating the secret inside the secrets manager will eventually propagate to all pods and you do not have to store your secrets in files.&lt;/p&gt;

&lt;p&gt;To summarize, I would suggest following the twelve-factor methodology and passing your configuration as environment variables if possible. If you need to support hot reloading of configuration, and you are fine that this happens with a bit of delay, choosing the config map file mount based solution described in this post is a good option. It relies only on Kubernetes internal mechanisms and basic file system operations from within your application, without the need for special protocols or authentication. Central configuration stores are a viable alternative as well, especially when managing application secrets.&lt;/p&gt;




&lt;p&gt;Cover image by &lt;a href="https://unsplash.com/@guibolduc?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Guillaume Bolduc&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/container?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>kubernetes</category>
      <category>cloud</category>
      <category>devops</category>
    </item>
    <item>
      <title>Weekly Digest 17/2021 - Top of the Week</title>
      <author>Marco Biedermann</author>
      <pubDate>Sun, 02 May 2021 17:16:31 +0000</pubDate>
      <link>https://dev.to/worldindev/weekly-digest-17-2021-4a69</link>
      <guid>https://dev.to/worldindev/weekly-digest-17-2021-4a69</guid>
      <description>&lt;p&gt;Welcome to my Weekly Digest #17 which is the first one for May.&lt;/p&gt;

&lt;p&gt;This weekly digest contains a lot of interesting and inspiring articles, videos, tweets, podcasts, and designs I consumed during this week.&lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#giveaway"&gt;
  &lt;/a&gt;
  🎉 Giveaway
&lt;/h2&gt;

&lt;p&gt;We are giving away any course you need on Udemy. Any price any course.&lt;br&gt;
To enter you have to do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;👍 React to this post&lt;/li&gt;
&lt;li&gt;✉️ Subscribe to our &lt;a href="https://worldindev.ck.page"&gt;newsletter&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You will receive &lt;a href="https://dev.to/worldindev"&gt;our articles&lt;/a&gt; directly to your &lt;a href="https://worldindev.ck.page"&gt;inbox&lt;/a&gt; 📬.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#interesting-articles-to-read"&gt;
  &lt;/a&gt;
  Interesting articles to read
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#css-hell"&gt;
  &lt;/a&gt;
  CSS Hell
&lt;/h3&gt;

&lt;p&gt;Collection of common CSS mistakes, and how to fix them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://csshell.dev/"&gt;CSS Hell - To Hell with bad CSS!&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#faster-builds-for-large-sites-on-netlify-with-ondemand-builders"&gt;
  &lt;/a&gt;
  Faster builds for large sites on Netlify with On-demand Builders
&lt;/h3&gt;

&lt;p&gt;Learn how On-demand Builders improve build times for large sites on Netlify. They help the Jamstack support larger websites and more dynamic apps across any JavaScript framework.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.netlify.com/blog/2021/04/14/faster-builds-for-large-sites-on-netlify-with-on-demand-builders-now-in-early-access/"&gt;Get Faster Builds for Large Sites on Netlify: On-demand Builders&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-questions-should-you-ask-in-a-software-engineer-interview"&gt;
  &lt;/a&gt;
  What Questions Should You Ask in a Software Engineer Interview?
&lt;/h3&gt;

&lt;p&gt;Often, we focus on acing the interview; however, we need to remember that the process is a two-way street.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://typeofnan.dev/what-questions-should-you-ask-in-a-software-engineer-interview/"&gt;What Questions Should You Ask in a Software Engineer Interview?&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#javascript-temporal-api-a-fix-for-the-date-api"&gt;
  &lt;/a&gt;
  JavaScript Temporal API- A Fix for the Date API
&lt;/h3&gt;

&lt;p&gt;JavaScript has a bad date handling API because the Date object implementation was copied directly from Java’s Date Class. Java maintainers eventually deprecated many of Date class methods and created the Calendar Class in 1997 to replace it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.bitsrc.io/javascript-temporal-api-a-fix-for-the-date-api-aa8381a4234c"&gt;JavaScript Temporal API- A Fix for the Date API&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#some-great-videos-i-watched-this-week"&gt;
  &lt;/a&gt;
  Some great videos I watched this week
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#console-is-more-than-just-log"&gt;
  &lt;/a&gt;
  Console is more than just log!
&lt;/h3&gt;

&lt;p&gt;We're going to cover &lt;code&gt;console.count&lt;/code&gt;, &lt;code&gt;assert&lt;/code&gt;, &lt;code&gt;table&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt; and &lt;code&gt;trace&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/stjI3P0qcTU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/leighchalliday"&gt;Leigh Halliday&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-container-queries-polyfill"&gt;
  &lt;/a&gt;
  CSS Container Queries Polyfill
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/WKIzq6vcO3s"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/leveluptuts"&gt;LevelUpTuts&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sass-in-100-seconds"&gt;
  &lt;/a&gt;
  Sass in 100 Seconds
&lt;/h3&gt;

&lt;p&gt;Learn the basics of Sass (SCSS) or syntactically awesome stylesheets. Sass is a language and compiler the can make your CSS code more efficient and programmatic&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/akDIJa0AP5c"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/fireship_dev"&gt;Fireship&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-defer-generating-400-pages-in-our-build-using-eleventy-cloud-and-ondemand-builders"&gt;
  &lt;/a&gt;
  Let’s defer generating 400+ pages in our build using Eleventy Cloud and On-demand Builders
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/bENDCw9aLV0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/zachleat"&gt;Zach Leatherman&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-context-to-build-a-lightdark-theme"&gt;
  &lt;/a&gt;
  Using Context to Build a Light/Dark Theme
&lt;/h3&gt;

&lt;p&gt;In this lesson, we'll leverage context and hooks to build a global light/dark theme in our app.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/L6iIBkrMFUE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://www.youtube.com/c/ReactNativeSchool"&gt;React Native School&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-this-the-best-javascript-extension"&gt;
  &lt;/a&gt;
  Is This The Best JavaScript Extension?
&lt;/h3&gt;

&lt;p&gt;Quokka.js is an extension available for multiple editors that allows you to write JavaScript code on a scratchpad. This scratchpad will auto-update whenever you make changes which makes it the perfect tool for learning, writing, or debugging code. I highly recommend you give it a shot.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/TQXUeGYs8u0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/DevSimplified"&gt;Web Dev Simplified&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#useful-github-repositories"&gt;
  &lt;/a&gt;
  Useful GitHub repositories
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#design-resources-for-developers"&gt;
  &lt;/a&gt;
  Design Resources for Developers
&lt;/h3&gt;

&lt;p&gt;A curated list of design and UI resources from stock photos, web templates, CSS frameworks, UI libraries, tools, and much more&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/bradtraversy"&gt;
        bradtraversy
      &lt;/a&gt; / &lt;a href="https://github.com/bradtraversy/design-resources-for-developers"&gt;
        design-resources-for-developers
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Curated list of design and UI resources from stock photos, web templates, CSS frameworks, UI libraries, tools and much more
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/headerimage.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U37hNx6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/headerimage.png" alt="Repository Banner"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
Please read &lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/./contributing.md"&gt;&lt;code&gt;contributing guidelines&lt;/code&gt;&lt;/a&gt; before submitting new resources.&lt;/h4&gt;
&lt;h2&gt;
Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/#ui-graphics"&gt;UI Graphics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/#fonts"&gt;Fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/#colors"&gt;Colors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/#icons"&gt;Icons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/#logos"&gt;Logos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/#favicons"&gt;Favicons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/#icon-fonts"&gt;Icon Fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/#stock-photos"&gt;Stock Photos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/#stock-videos"&gt;Stock Videos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/#stock-music--sound-effects"&gt;Stock Music &amp;amp; Sound Effects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/#vectors--clip-art"&gt;Vectors &amp;amp; Clipart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/#product--image-mockups"&gt;Product &amp;amp; Image Mockups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/#html--css-templates"&gt;HTML &amp;amp; CSS Templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/#css-frameworks"&gt;CSS Frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/#css-methodologies"&gt;CSS Methodologies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/#css-animations"&gt;CSS Animations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/#javascript-animation-libraries"&gt;Javascript Animations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/#ui-components--kits"&gt;UI Components &amp;amp; Kits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/#react-ui"&gt;React UI Libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/#vue-ui"&gt;Vue UI Libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/#angular-ui"&gt;Angular UI Libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/#svelte-ui"&gt;Svelte UI Libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/#react-native-ui"&gt;React Native UI Libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/#design-systems--style-guides"&gt;Design Systems &amp;amp; Style Guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/#online-design-tools"&gt;Online Design Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/#downloadable-design-software"&gt;Downloadable Design Software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/#design-inspiration"&gt;Design Inspiration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/#image-compression"&gt;Image Compression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/#chrome-extensions"&gt;Chrome Extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bradtraversy/design-resources-for-developers/master/readme.md/#others"&gt;Others&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
UI Graphics&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Websites and resources with modern UI components in different formats such as PSD, Sketch, Figma, etc. They are great for ideas for web components/UI&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Website                           &lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://uidesigndaily.com/" rel="nofollow"&gt;UI Design Daily&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Awesome UI Components of all types&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://100dailyui.webflow.io/" rel="nofollow"&gt;100 Daily UI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free Figma library of products, elements, and screens&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.sketchappsources.com/" rel="nofollow"&gt;Sketch App Sources&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Sketch UIs, wireframes, icons and much more&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.humaaans.com/" rel="nofollow"&gt;Humaaans&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Cool illustrations of people with&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;…&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/bradtraversy/design-resources-for-developers"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#react-navigation-5"&gt;
  &lt;/a&gt;
  React Navigation 5
&lt;/h3&gt;

&lt;p&gt;Routing and navigation for your React Native apps&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/react-navigation"&gt;
        react-navigation
      &lt;/a&gt; / &lt;a href="https://github.com/react-navigation/react-navigation"&gt;
        react-navigation
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Routing and navigation for your React Native apps
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
React Navigation 5&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://circleci.com/gh/react-navigation/react-navigation" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/24eac8bc1064665a50b378dba41be2b73fa5ec2d9c4026df6ee9c58b36c2f6c0/68747470733a2f2f696d672e736869656c64732e696f2f636972636c6563692f70726f6a6563742f6769746875622f72656163742d6e617669676174696f6e2f72656163742d6e617669676174696f6e2f6d61696e2e7376673f7374796c653d666c61742d737175617265" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://codecov.io/github/react-navigation/react-navigation" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9270f7d74579489a3fbd33777eb4214f7bcae306dd6e6f6008be0054be998021/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f72656163742d6e617669676174696f6e2f72656163742d6e617669676174696f6e2e7376673f7374796c653d666c61742d737175617265" alt="Code Coverage"&gt;&lt;/a&gt;
&lt;a href="https://opensource.org/licenses/MIT" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ee73e97cf6a2314b6e96c2ef61cf5b3169ec2014ac773840b59fe3a1edd282d2/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f6c2f4072656163742d6e617669676174696f6e2f636f72652e7376673f7374796c653d666c61742d737175617265" alt="MIT License"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Routing and navigation for your React Native apps.&lt;/p&gt;
&lt;p&gt;Documentation can be found at &lt;a href="https://reactnavigation.org/" rel="nofollow"&gt;reactnavigation.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you are looking for version 4, the code can be found in the &lt;a href="https://github.com/react-navigation/react-navigation/tree/4.x"&gt;4.x branch&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Package Versions&lt;/h2&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Latest Version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/react-navigation/react-navigation/main//packages/core"&gt;@react-navigation/core&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/@react-navigation/core" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e3ad162db446455a91cdb24f0855651925b2820874ac8f2e94b912594013806f/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f4072656163742d6e617669676174696f6e2f636f72652e7376673f7374796c653d666c61742d737175617265" alt="badge"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/react-navigation/react-navigation/main//packages/native"&gt;@react-navigation/native&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/@react-navigation/native" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/56770ab3bd119a9e1e938bbd89b537542e79720fcf7f794dd88008ad4e5f5550/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f4072656163742d6e617669676174696f6e2f6e61746976652e7376673f7374796c653d666c61742d737175617265" alt="badge"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/react-navigation/react-navigation/main//packages/routers"&gt;@react-navigation/routers&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/@react-navigation/routers" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0475d723275a03f7475ab5903f2c52b8cb1a63cbdb5f98da5f02a1a55a0a5631/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f4072656163742d6e617669676174696f6e2f726f75746572732e7376673f7374796c653d666c61742d737175617265" alt="badge"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/react-navigation/react-navigation/main//packages/stack"&gt;@react-navigation/stack&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/@react-navigation/stack" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7cb95517e92ffff05bd57c1ffc8eca26c9930114e8edeecf15591c84ea2433de/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f4072656163742d6e617669676174696f6e2f737461636b2e7376673f7374796c653d666c61742d737175617265" alt="badge"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/react-navigation/react-navigation/main//packages/drawer"&gt;@react-navigation/drawer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/@react-navigation/drawer" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f53074342a380caf8741e673a02278cb119917e7cc2d4111567105de120828f0/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f4072656163742d6e617669676174696f6e2f6472617765722e7376673f7374796c653d666c61742d737175617265" alt="badge"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/react-navigation/react-navigation/main//packages/material-top-tabs"&gt;@react-navigation/material-top-tabs&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/@react-navigation/material-top-tabs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6ce574eb7ec63e56fa5c9b99ae7f31966252bab6dee12b5b3ac8530a7a110d01/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f4072656163742d6e617669676174696f6e2f6d6174657269616c2d746f702d746162732e7376673f7374796c653d666c61742d737175617265" alt="badge"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/react-navigation/react-navigation/main//packages/material-bottom-tabs"&gt;@react-navigation/material-bottom-tabs&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/@react-navigation/material-bottom-tabs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/fb3d31cfc0c92a4155f8a22b513e1da733ab24cd294c3390d2e457e86f5eaebc/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f4072656163742d6e617669676174696f6e2f6d6174657269616c2d626f74746f6d2d746162732e7376673f7374796c653d666c61742d737175617265" alt="badge"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/react-navigation/react-navigation/main//packages/bottom-tabs"&gt;@react-navigation/bottom-tabs&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/@react-navigation/bottom-tabs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a91ffef0fc761cb35d4c6387c79508df6d3c53c03443c6ff3d89915e59ebaebf/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f4072656163742d6e617669676174696f6e2f626f74746f6d2d746162732e7376673f7374796c653d666c61742d737175617265" alt="badge"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/react-navigation/react-navigation/main//packages/devtools"&gt;@react-navigation/devtools&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/@react-navigation/devtools" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/aa214880f2e914c07200da1339fa8ac1ec833a7c61f374fa8b4db7befa54efaf/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f4072656163742d6e617669676174696f6e2f646576746f6f6c732e7376673f7374796c653d666c61742d737175617265" alt="badge"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
Contributing&lt;/h2&gt;
&lt;p&gt;Please read through our &lt;a href="https://raw.githubusercontent.com/react-navigation/react-navigation/main/CONTRIBUTING.md"&gt;contribution guide&lt;/a&gt; to get started!&lt;/p&gt;
&lt;h2&gt;
Installing from a fork on GitHub&lt;/h2&gt;
&lt;p&gt;Since we use a monorepo, it's not possible to install a package from the repository URL. If you need to install a forked version from Git, you can use &lt;a href="https://github.com/ramasilveyra/gitpkg"&gt;&lt;code&gt;gitpkg&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First install &lt;code&gt;gitpkg&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;yarn global add gitpkg&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Then follow these steps to publish and install a forked package:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fork this repo to your account and clone the forked repo to your local machine&lt;/li&gt;
&lt;li&gt;Open a Terminal and &lt;code&gt;cd&lt;/code&gt; to the location of the cloned repo&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;yarn&lt;/code&gt; to install any dependencies&lt;/li&gt;
&lt;li&gt;If you…&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/react-navigation/react-navigation"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#the-algorithms-python"&gt;
  &lt;/a&gt;
  The Algorithms - Python
&lt;/h3&gt;

&lt;p&gt;All Algorithms implemented in Python&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/TheAlgorithms"&gt;
        TheAlgorithms
      &lt;/a&gt; / &lt;a href="https://github.com/TheAlgorithms/Python"&gt;
        Python
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      All Algorithms implemented in Python
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
The Algorithms - Python&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://gitpod.io/#https://github.com/TheAlgorithms/Python" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5a5932d597950fc5cf0b9b9977274c3fba64bedc8a46431e0ce34d244a27326b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f476974706f642d52656164792d2d746f2d2d436f64652d626c75653f6c6f676f3d676974706f64267374796c653d666c61742d737175617265" alt="Gitpod Ready-to-Code"&gt;&lt;/a&gt; 
&lt;a href="https://discord.gg/c7MnfGFGa6" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1de46c8a86db708e5b8709e4c0f6c38f82e38e3bb26e94e256a1c8a123eee549/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f3830383034353932353535363638323738322e7376673f6c6f676f3d646973636f726426636f6c6f72423d373238394441267374796c653d666c61742d737175617265" alt="Discord chat"&gt;&lt;/a&gt; 
&lt;a href="https://gitter.im/TheAlgorithms" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d5016c1148a779d02ff6c85e0c361ceb3c7705ab965a634f697ac5201599aa3e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436861742d4769747465722d6666363962342e7376673f6c6162656c3d43686174266c6f676f3d676974746572267374796c653d666c61742d737175617265" alt="Gitter chat"&gt;&lt;/a&gt; 
&lt;a href="https://github.com/TheAlgorithms/Python/actions"&gt;&lt;img src="https://camo.githubusercontent.com/eca47f8fd3cdd136fce0e30a8a43994934cb4fb58a98b4189db4321ec4ebdbfa/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f546865416c676f726974686d732f507974686f6e2f6275696c643f6c6162656c3d4349266c6f676f3d676974687562267374796c653d666c61742d737175617265" alt="GitHub Workflow Status"&gt;&lt;/a&gt; 
&lt;a href="https://lgtm.com/projects/g/TheAlgorithms/Python/alerts" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e6f6de374a2c01435ca231727996e1bcb0b7b2c513ab52cecab8c4e55089796a/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f616c657274732f6769746875622f546865416c676f726974686d732f507974686f6e2e7376673f6c6162656c3d4c47544d266c6f676f3d4c47544d267374796c653d666c61742d737175617265" alt="LGTM"&gt;&lt;/a&gt; 
&lt;a href="https://github.com/TheAlgorithms/Python/blob/master/CONTRIBUTING.md"&gt;&lt;img src="https://camo.githubusercontent.com/67eb7c8b1ed6c9019f25d5ac1331577db2b42f15303a452aa91e94fc4565019a/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76312e7376673f6c6162656c3d436f6e747269627574696f6e73266d6573736167653d57656c636f6d6526636f6c6f723d303035396233267374796c653d666c61742d737175617265" alt="contributions welcome"&gt;&lt;/a&gt; 
&lt;a href="https://www.paypal.me/TheAlgorithms/100" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d04feeb457617ce3a3887e02318bdd52cdf761939a6f5ebf82ff2cdd07ccba76/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f446f6e6174652d50617950616c2d677265656e2e7376673f6c6f676f3d70617970616c267374796c653d666c61742d737175617265" alt="Donate"&gt;&lt;/a&gt; 
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/175bb7d6cc4bf57107c582c15f2ad49f90b724dea9da1735edcc3b3bdb9d0ee8/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7265706f2d73697a652f546865416c676f726974686d732f507974686f6e2e7376673f6c6162656c3d5265706f25323073697a65267374796c653d666c61742d737175617265"&gt;&lt;img src="https://camo.githubusercontent.com/175bb7d6cc4bf57107c582c15f2ad49f90b724dea9da1735edcc3b3bdb9d0ee8/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7265706f2d73697a652f546865416c676f726974686d732f507974686f6e2e7376673f6c6162656c3d5265706f25323073697a65267374796c653d666c61742d737175617265" alt=""&gt;&lt;/a&gt; 
&lt;a href="https://github.com/pre-commit/pre-commit"&gt;&lt;img src="https://camo.githubusercontent.com/9836c03e8f5b62f3ffeea14c4c9daf181100bd4c20e2dea5b12c4b6afccbe635/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7072652d2d636f6d6d69742d656e61626c65642d627269676874677265656e3f6c6f676f3d7072652d636f6d6d6974266c6f676f436f6c6f723d7768697465267374796c653d666c61742d737175617265" alt="pre-commit"&gt;&lt;/a&gt; 
&lt;a href="https://github.com/psf/black"&gt;&lt;img src="https://camo.githubusercontent.com/f40afe5b2d215ac2c293f4cfcd66b165ecc9b64bcc1f631274801f9a8186677e/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d636f64652532307374796c65266d6573736167653d626c61636b26636f6c6f723d626c61636b267374796c653d666c61742d737175617265" alt="code style: black"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
All algorithms implemented in Python (for education)&lt;/h3&gt;
&lt;p&gt;These implementations are for learning purposes only. Therefore they may be less efficient than the implementations in the Python standard library.&lt;/p&gt;
&lt;h2&gt;
Contribution Guidelines&lt;/h2&gt;
&lt;p&gt;Read our &lt;a href="https://raw.githubusercontent.com/TheAlgorithms/Python/master/CONTRIBUTING.md"&gt;Contribution Guidelines&lt;/a&gt; before you contribute.&lt;/p&gt;
&lt;h2&gt;
Community Channel&lt;/h2&gt;
&lt;p&gt;We're on &lt;a href="https://gitter.im/TheAlgorithms" rel="nofollow"&gt;Gitter&lt;/a&gt;!  Please join us.&lt;/p&gt;
&lt;h2&gt;
List of Algorithms&lt;/h2&gt;
&lt;p&gt;See our &lt;a href="https://raw.githubusercontent.com/TheAlgorithms/Python/master/DIRECTORY.md"&gt;directory&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/TheAlgorithms/Python"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;h2&gt;
  &lt;a href="#dribbble-shots"&gt;
  &lt;/a&gt;
  dribbble shots
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#job-finder-app"&gt;
  &lt;/a&gt;
  Job Finder App
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XUTZqVWZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/4684322/screenshots/15534544/media/116accf0cc1e5e16db2c29f08d17de5a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XUTZqVWZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/4684322/screenshots/15534544/media/116accf0cc1e5e16db2c29f08d17de5a.png" alt="https://cdn.dribbble.com/users/4684322/screenshots/15534544/media/116accf0cc1e5e16db2c29f08d17de5a.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/15534544-Job-Finder-App"&gt;Andri&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crypter%C2%AE-nft-marketplace"&gt;
  &lt;/a&gt;
  Crypter® – NFT marketplace
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A49feAmg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/427857/screenshots/15543783/crypter_-_diagonal_16.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A49feAmg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/427857/screenshots/15543783/crypter_-_diagonal_16.png" alt="https://cdn.dribbble.com/users/427857/screenshots/15543783/crypter_-_diagonal_16.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/15543783-Crypter-NFT-marketplace"&gt;Tran Mau Tri Tam&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#educora-web-ui-kit"&gt;
  &lt;/a&gt;
  Educora - Web UI Kit
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TKeMCe-a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/3010014/screenshots/15580824/media/7f53fba6ed5beda6c1977904b998c6c3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TKeMCe-a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/3010014/screenshots/15580824/media/7f53fba6ed5beda6c1977904b998c6c3.jpg" alt="https://cdn.dribbble.com/users/3010014/screenshots/15580824/media/7f53fba6ed5beda6c1977904b998c6c3.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/15580824--Educora-Web-UI-Kit"&gt;Yousuf Saymon&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learner-app"&gt;
  &lt;/a&gt;
  Learner app
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mm7lbXJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/2285351/screenshots/15573152/media/a5c9e66e3480c1ceaab2cba7b35a3c9a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mm7lbXJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/2285351/screenshots/15573152/media/a5c9e66e3480c1ceaab2cba7b35a3c9a.png" alt="https://cdn.dribbble.com/users/2285351/screenshots/15573152/media/a5c9e66e3480c1ceaab2cba7b35a3c9a.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/15573152-Learner-app"&gt;Asish Sunny&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#delivery-food-mobile-apps"&gt;
  &lt;/a&gt;
  Delivery Food Mobile Apps
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8yf5-XWC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/2162070/screenshots/15574753/media/ac08f2e2baded76f9983eac2a95da0f9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8yf5-XWC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/2162070/screenshots/15574753/media/ac08f2e2baded76f9983eac2a95da0f9.jpg" alt="https://cdn.dribbble.com/users/2162070/screenshots/15574753/media/ac08f2e2baded76f9983eac2a95da0f9.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/15574753-Delivery-Food-Mobile-Apps"&gt;Indah Ratna Sari&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#tweets"&gt;
  &lt;/a&gt;
  Tweets
&lt;/h2&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j-bf7tTF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1386683863108362249/pu/img/p0ijJAfaM5nWxhp1.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--JkYP1OI0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1055142255722344448/xhqy_EUP_normal.jpg" alt="StackBlitz profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        StackBlitz
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @stackblitz
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Browsers are awesome! (3):&lt;br&gt;&lt;br&gt;`&amp;lt;input type="file"&amp;gt;` permits a user to select only a single file at a time... but that's only its default behavior! &lt;br&gt;&lt;br&gt;You can also allow selecting multiple files, and even specify the supported file types!&lt;br&gt;Just add `multiple` and `accept` attributes: 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:18 PM - 26 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1386686096940179460" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1386686096940179460" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1386686096940179460" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---uanvVsZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/Ez_EAZnVoAQKHLB.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tB0fWGN_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/846106819391115264/iZAxk4qr_normal.jpg" alt="🔎Julia Evans🔍 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        🔎Julia Evans🔍
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @b0rk
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I just learned that there's a terminal version of Wireshark called termshark?!?!?! this is incredible &lt;a href="https://t.co/fa5z9T9kCr"&gt;termshark.io&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:55 PM - 27 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1387042731709501444" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1387042731709501444" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1387042731709501444" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f4d48DAi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E0EipLuVoAERDN_.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--NuBM9PDy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1385883291744575488/KOKJ3k8L_normal.jpg" alt="Addy Osmani profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Addy Osmani
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/addyosmani"&gt;@addyosmani&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      📣 Introducing "Image Optimization": a fresh 528 page Print + eBook on modern formats, compression, automation and more: &lt;a href="https://t.co/NBQIG4P0da"&gt;bit.ly/smashing-images&lt;/a&gt; 🖼️&lt;br&gt;&lt;br&gt;2+ years in the making. With thanks to &lt;a href="https://twitter.com/smashingmag"&gt;@smashingmag&lt;/a&gt;, &lt;a href="https://twitter.com/colinbendell"&gt;@colinbendell&lt;/a&gt;, &lt;a href="https://twitter.com/ari4nne"&gt;@ari4nne&lt;/a&gt;, &lt;a href="https://twitter.com/bibydigital"&gt;@bibydigital&lt;/a&gt;, &lt;a href="https://twitter.com/jonsneyers"&gt;@jonsneyers&lt;/a&gt; &amp;amp; countless others :) 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:41 PM - 28 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1387431906359185408" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1387431906359185408" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1387431906359185408" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R2BOtLIn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E0PtdpkWEAAd3fP.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ade2nZ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1338344493234286592/C_ujKIUa_normal.png" alt="GitHub profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        GitHub
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @github
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Something changed? No worries - we've just made it a bit easier to view a single file in history. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:30 PM - 30 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1388214209339707399" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1388214209339707399" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1388214209339707399" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TPzRGMcz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/E0PPKUXWQAUkH4R.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--khgR4x9u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1362432748011536385/vRY-trfG_normal.jpg" alt="Josh W. Comeau profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Josh W. Comeau
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/joshwcomeau"&gt;@joshwcomeau&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      My CSS course features a nifty tool that helps you find the perfect font-size value for fluid headings.&lt;br&gt;&lt;br&gt;I used to solve this through trial-and-error with semi-random numbers. Now I have a system for it 😄&lt;br&gt;&lt;br&gt;(Context in the tweets below! 👇) 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:41 PM - 30 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1388186884946415624" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1388186884946415624" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1388186884946415624" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z031Al-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1388112414747602949/pu/img/v8rnW_Rd2fLaXree.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ph3vfkoQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/799913500600598528/z4Wctlai_normal.jpg" alt="Tomek Sułkowski profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Tomek Sułkowski
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/sulco"&gt;@sulco&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      The `gap` CSS property is a convenient way to set the spacing between not only the grid but also flex items!&lt;br&gt;&lt;br&gt;And now, with the just-released Safari 14.1, you can use it in every major browser! 🥳 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      12:52 PM - 30 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1388113988534341634" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1388113988534341634" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1388113988534341634" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kfSwkVzO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E0M4jp7VEAIguLz.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--NuBM9PDy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1385883291744575488/KOKJ3k8L_normal.jpg" alt="Addy Osmani profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Addy Osmani
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/addyosmani"&gt;@addyosmani&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      The &amp;lt;img&amp;gt; element now supports lazy-loading, async decoding and many other features: &lt;a href="https://t.co/QcbvWLQfT7"&gt;bit.ly/img-cwv&lt;/a&gt; I wrote about how to optimize UX &amp;amp; the Core Web Vitals with it. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      07:25 AM - 30 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1388031656355794945" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1388031656355794945" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1388031656355794945" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;





&lt;h2&gt;
  &lt;a href="#picked-pens"&gt;
  &lt;/a&gt;
  Picked Pens
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#iphone-12-purple"&gt;
  &lt;/a&gt;
  iPhone 12 purple
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ece_mina/embed/poRGeKO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://codepen.io/ece_mina"&gt;Mina&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apple-keynote-animation"&gt;
  &lt;/a&gt;
  Apple Keynote animation
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Mamboleoo/embed/ZELqMOg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/Mamboleoo"&gt;Louis Hoebregts&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#make-the-web-less-boring"&gt;
  &lt;/a&gt;
  Make the web less boring
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/piccalilli/embed/QWdJgJQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/piccalilli_"&gt;Andy Bell&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#peters-blinds-with-css"&gt;
  &lt;/a&gt;
  Peter's Blinds with CSS
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/KKajeyy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/jh3yy"&gt;Jhey&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#podcasts-worth-listening"&gt;
  &lt;/a&gt;
  Podcasts worth listening
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#kent-c-dodds-software-engineer-educator-at-kent-c-dodds-tech"&gt;
  &lt;/a&gt;
  Kent C. Dodds - Software Engineer Educator at Kent C. Dodds Tech
&lt;/h3&gt;

&lt;p&gt;Kent goes through his journey from full-time software engineer to full-time SE educator, the mindset of a junior dev, ways to solidify one's knowledge, and best ways to get a job.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/40Y2RZ9feIyqS4evUtxR4j"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hasty-treat-git-rebase-explained"&gt;
  &lt;/a&gt;
  Hasty Treat - Git Rebase Explained
&lt;/h3&gt;

&lt;p&gt;In this Hasty Treat, Scott and Wes talk about Git Rebase — what it is and how and when to use it!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/0Sxv86yBWWA9RJRisMUj7C"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-css-podcast-fontface"&gt;
  &lt;/a&gt;
  The CSS Podcast - @font-face
&lt;/h3&gt;

&lt;p&gt;In this episode, Una and Adam talk about font adjustments when being used within @font-face. When fonts are loaded, there's an opportunity to provide default values and fine-tunings.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/2lOl1RG3deF4JbuJQfQffd"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typescript-fundamentals-getting-a-bit-deeper"&gt;
  &lt;/a&gt;
  TypeScript Fundamentals — Getting a Bit Deeper
&lt;/h3&gt;

&lt;p&gt;In this episode of Syntax, Scott and Wes continue their discussion of TypeScript Fundamentals with a deeper diver into more advanced use cases.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/5fype60x1ZLwMQHYrfMM0h"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Thank you for reading, talk to you next week, and stay safe! 👋&lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Make sure to subscribe to our &lt;a href="https://worldindev.ck.page"&gt;newsletter&lt;/a&gt; 💌 to receive our weekly recap directly on your email and react to this post to automatically participate in our giveaway 🎁&lt;/p&gt;

&lt;p&gt;If you would like to join our discussions, you can find us on &lt;a href="https://discord.gg/aWS2YKk6"&gt;Discord&lt;/a&gt; 📣.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Best JavaScript Weather App In Codepen 2021</title>
      <author>Stackfindover</author>
      <pubDate>Sun, 02 May 2021 17:10:40 +0000</pubDate>
      <link>https://dev.to/stackfindover/best-javascript-weather-app-in-codepen-2021-104c</link>
      <guid>https://dev.to/stackfindover/best-javascript-weather-app-in-codepen-2021-104c</guid>
      <description>&lt;p&gt;Hello guys, in this video we will show you the top 3 best JavaScript Weather app in codepen 2021&lt;/p&gt;

&lt;p&gt;1 &lt;a href="https://codepen.io/grayghostvisuals/full/dpXPbp"&gt;https://codepen.io/grayghostvisuals/full/dpXPbp&lt;/a&gt;&lt;br&gt;
2 &lt;a href="https://codepen.io/tutsplus/full/gObLaEP"&gt;https://codepen.io/tutsplus/full/gObLaEP&lt;/a&gt;&lt;br&gt;
3 &lt;a href="https://codepen.io/stack-findover/full/vYgQrPP"&gt;https://codepen.io/stack-findover/full/vYgQrPP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/lfyjGXE_1IE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-may-like-this"&gt;
  &lt;/a&gt;
  You may like this
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://blogs.stackfindover.com/how-to-find-a-word-in-a-paragraph/"&gt;How to find the word in paragraph&lt;/a&gt;&lt;br&gt;
&lt;a href="https://blogs.stackfindover.com/trending-responsive-menu-2020/"&gt;Responsive menu design 2021&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Logging to a Docker Container stdout from a Background Process</title>
      <author>Anna Aitchison</author>
      <pubDate>Sun, 02 May 2021 17:05:13 +0000</pubDate>
      <link>https://dev.to/ara225/logging-to-a-docker-container-stdout-from-a-background-process-3dkg</link>
      <guid>https://dev.to/ara225/logging-to-a-docker-container-stdout-from-a-background-process-3dkg</guid>
      <description>&lt;p&gt;Background processes in Docker containers can be a bit of a pain for logging, however they can't always be avoided. For instance, I was working on a container for a legacy CGI application at work recently, which required both a FastCGI wrapper and a Nginx webserver in the same container, with Nginx running as the foreground process and logging to the container's stdout. The CGI application does a lot of logging and we didn't really want to have to manage those logs separately from the Nginx logs. The CGI wrapper we were stuck with doesn't pass on stderr (with CGI stdout goes to the browser so that's pointless also) so we had to resort to more devious means.&lt;/p&gt;

&lt;p&gt;Linking a file/logging to /dev/stdout (or /dev/stderr) doesn't work because these are merely references to the current process's stdout/stderr and logging to a terminal device similarly doesn't work because in production, there won't really be a terminal. &lt;/p&gt;

&lt;p&gt;So, I was stuck and gave up on the idea for a bit until I realized that in Linux process can write to other processs' stdin and stderr. There are 'files' in  /proc/TARGET_PROCESS_PID/fd that represent stdin and stderr for that process, and you can write to them just like any other file if you have the right permissions. Processes can only write to these 'files' if they're running under the same user and group as the target process, and if the user is not root, you might have to change the permissions of the 'files' further down the link chain. Of course, in in my situation, the master nginx process was owned by root and the CGI scripts were running under an unprivileged user. However, I worked around this by writing to the stdout of a nginx worker processes, which would then be picked up by the master process. &lt;/p&gt;

&lt;p&gt;Unfortunately, due to the way we set up the container in the end, this solution hasn't found it's way into production, but I hope it's useful to you.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>container</category>
      <category>logging</category>
    </item>
    <item>
      <title>Web components in 2021: the Good, the Bad and the Ugly</title>
      <author>Émile Perron</author>
      <pubDate>Sun, 02 May 2021 16:42:47 +0000</pubDate>
      <link>https://dev.to/emileperron/web-components-in-2021-the-good-the-bad-and-the-ugly-3kg</link>
      <guid>https://dev.to/emileperron/web-components-in-2021-the-good-the-bad-and-the-ugly-3kg</guid>
      <description>&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components"&gt;Web components&lt;/a&gt; are a native set of features that provides outstanding scoping of styles and functionalities. They can be used in a regular, framework-free web page, but also with any Javascript framework of your choice (e.g. React, Vue, Angular, Svelte, etc.). This makes web components excellent for building reusable elements that need to be shared publicly or reused across multiple projets. At least, in theory.&lt;/p&gt;

&lt;p&gt;In reality, there are some drawbacks that can make web components almost unusable in some projects. &lt;/p&gt;

&lt;p&gt;In this article, I will explain what makes web components great, what their drawbacks are, and I will provide some guidance to help you decide whether or not you should use them in your projects.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-good"&gt;
  &lt;/a&gt;
  The Good
&lt;/h2&gt;

&lt;p&gt;The two main features that make web components powerful are the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements"&gt;Custom Elements API&lt;/a&gt;, and the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM"&gt;Shadow DOM&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Custom Elements API is what allows you to create and register your components as new HTML elements. It also allows you to define lifecycle callbacks for your new element. Overall, it is pretty great and fairly simple to understand and get into, for both novice and experienced developers alike.&lt;/p&gt;

&lt;p&gt;The Shadow DOM is what provides all of the encapsulation of styles. It gives your components their own DOM, which is separate from the rest of your document. This means that global styles cannot affect it (except for CSS custom properties / variables), and that its own styles cannot affect other elements in the parent document. &lt;/p&gt;

&lt;p&gt;The HTML &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; elements are also used in most custom elements, allowing you to easily create templates with dynamic content without having to reach for a third-party templating system or language.&lt;/p&gt;

&lt;p&gt;Browser support for all of these features is great: unless you're still supporting Internet Explorer, you're unlikely to run into any deal-breakers. There is one exception to this, which will be explained later in "The Bad" section.&lt;/p&gt;

&lt;p&gt;Plus, as mentioned at the start of the article, not only are web components compatible with just about every Javascript framework out there, but they can also be used in good old vanilla Javascript, without a framework. That's because web components are basically just ES6 classes extending the native HTMLElement. That means you can share components across your project or your company's entire ecosystem.&lt;/p&gt;

&lt;p&gt;Additionally, there are some &lt;a href="https://www.webcomponents.org/introduction#libraries-for-building-web-components"&gt;great libraries and packages to make building web components easier&lt;/a&gt;, as well as an online platform where you can find and share web components with others: &lt;a href="https://www.webcomponents.org/"&gt;webcomponents.org&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-bad"&gt;
  &lt;/a&gt;
  The Bad
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#flash-of-unstyled-content"&gt;
  &lt;/a&gt;
  Flash of Unstyled Content
&lt;/h3&gt;

&lt;p&gt;Let's start with the Custom Elements API. The only drawback I have experienced with custom elements is the potential for a Flash of Unstyled Content. Since custom elements are declared and registered in Javascript, it can take a few milliseconds for them to be loaded, processed, registered, and finally rendered. While this is happening, your custom element are left unstyled or hidden.&lt;/p&gt;

&lt;p&gt;This could be a major drawback for a marketing website where you have just a few seconds to engage with your visitors in order to keep their attention, but in web applications, it's not really a deal-breaker, especially since your browser's cache dramatically dampens the issue after the initial loading.&lt;/p&gt;

&lt;p&gt;Here's an example of FOUC with a "tabbed container" web component on a reload without cache (on a local development server):&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BaET009X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7k4mxzjahpuz0rjf3gp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BaET009X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7k4mxzjahpuz0rjf3gp.gif" alt="Web component flashing unstyled content for a few milliseconds before rendering correctly"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the same component rendering on reload, with browser cache (still on a local development server):&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D3E3Yc2k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjd21un6mf1lbnjz4ay5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D3E3Yc2k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjd21un6mf1lbnjz4ay5.gif" alt="Web component loading immediately without any visual glitches or FOUC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, browser cache makes this a non-issue for repeat visits.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shadow-dom-doesnt-play-well-with-native-forms"&gt;
  &lt;/a&gt;
  Shadow DOM doesn't play well with native forms
&lt;/h3&gt;

&lt;p&gt;The biggest issue I have encountered with web components is the fact that they do not play well at all with native form functionalities. This is due to two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Custom elements cannot extend elements other than &lt;code&gt;HTMLElement&lt;/code&gt; &lt;em&gt;(without tedious workarounds and major drawbacks)&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Form elements inside the Shadow DOM are not considered as such by the component's parent form.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Remember how the Shadow DOM doesn't use global styles? This means that if you want to use a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; inside a web component, you will have to re-define the styles of every &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;fieldset&amp;gt;&lt;/code&gt;, and more, within your component's styles.&lt;/p&gt;

&lt;p&gt;Of course, you could make each of these elements their own web component, so they each encapsulate their own styles. However, because form elements such as &lt;code&gt;HTMLInputElement&lt;/code&gt; cannot be extended by custom elements, your custom input component has to include the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; in its Shadow DOM. And this is where you run into the next issue: inputs (and other form elements) within the Shadow DOM are not considered part of the form.&lt;/p&gt;

&lt;p&gt;For example, if a form's submit button is inside the Shadow DOM, the form cannot be submitted by pressing Enter inside an input anymore, unless you add your own &lt;code&gt;keydown&lt;/code&gt; event listener to replicate this feature yourself. &lt;/p&gt;

&lt;p&gt;Here is another example that is a little more complex and telling. If you want to make a custom input, you have three solutions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can generate a &lt;code&gt;&amp;lt;input type="hidden"&amp;gt;&lt;/code&gt; in the regular DOM, beside your custom element, and manually replicate a bunch of built-in features to ensure your input is synchronized correctly at all times, triggers the right events, is validated correctly, is accessible, looks good, and works well.&lt;/li&gt;
&lt;li&gt;You can make every form element, including the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; itself, its own web component, and forego native &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; elements for your entire project.&lt;/li&gt;
&lt;li&gt;Handle every form who uses this custom input element with Javascript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are already in a Javascript-heavy environment, where every single form is handled via Javascript, and every component implementation already requires a lot of work in order to be usable and accessible, this might not seem like a major issue.&lt;/p&gt;

&lt;p&gt;However, if you are more vanilla-oriented, newer to web development, or simply like simple solutions and environments, this is likely to be a MAJOR deal-breaker.&lt;/p&gt;

&lt;p&gt;A non-negligible percentage of the web components I would like to build are meant to work with forms or form elements in one way or an other, and I expect it is the same for most other developers. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-ugly"&gt;
  &lt;/a&gt;
  The Ugly
&lt;/h2&gt;

&lt;p&gt;The worst part is that there isn't much information on the web about what is being done to fix or circumvent this issue of incompatibility with native forms. &lt;/p&gt;

&lt;p&gt;Web component libraries like &lt;a href="https://shoelace.style/"&gt;Shoelace&lt;/a&gt; simply implement their own custom form element, which must be handled manually in Javascript.&lt;/p&gt;

&lt;p&gt;Librairies that aim to help build web components, such as Google's &lt;a href="https://lit.dev"&gt;Lit&lt;/a&gt;, cannot allow extending built-in elements &lt;a href="https://github.com/lit/lit-element/issues/879#issuecomment-575236461"&gt;because Safari doesn't support customization of built-ins&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#where-we-stand-and-whether-should-you-use-them"&gt;
  &lt;/a&gt;
  Where we stand, and whether should you use them
&lt;/h2&gt;

&lt;p&gt;Overall, just a few weeks/months after embarking on my web component journey with a big smile and sparkling eyes, I find myself not pessimistic, but slightly disappointed about the current state of web components and their future outside of Javascript framework projects and ecosystems.&lt;/p&gt;

&lt;p&gt;I still believe the idea and general implementation of web components is great. But the drawbacks when it comes to native forms make them much less easy to learn and to implement into. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-should-use-web-components"&gt;
  &lt;/a&gt;
  You should use web components...
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;if you're already handling all your forms manually in Javascript&lt;/li&gt;
&lt;li&gt;if you have (or plan on having) multiple projects or ecosystems with different technology stacks in which you need to share/reuse components&lt;/li&gt;
&lt;li&gt;if you don't mind taking a lot of time to reimplement built-in functionalities and accessibility before you can really start working on your own business-related features (or if you can use an existing component library like &lt;a href="https://shoelace.style/"&gt;Shoelace&lt;/a&gt; to save on the initial development time and costs)&lt;/li&gt;
&lt;li&gt;... or if you don't need your components to interact with forms or form elements&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#you-should-not-use-web-components"&gt;
  &lt;/a&gt;
  You should not use web components...
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;if you want to retain the ability to use native forms &lt;/li&gt;
&lt;li&gt;if you need to support legacy browsers&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#a-light-in-the-distance"&gt;
  &lt;/a&gt;
  A light in the distance
&lt;/h2&gt;

&lt;p&gt;Just after I initially published this article, &lt;a class="mentioned-user" href="https://dev.to/westbrook"&gt;@westbrook&lt;/a&gt;
 commented to let me know about the &lt;a href="https://html.spec.whatwg.org/multipage/custom-elements.html#the-elementinternals-interface"&gt;ElementInternals spec&lt;/a&gt; which is currently implemented in Google Chrome (not in Safari or Firefox yet however). Once available in every browser, this could be a valid solution to the form-related problems I mentioned in the article. &lt;/p&gt;

&lt;p&gt;Check out the following articles to learn more about this spec, its implementations, and the available polyfills: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://web.dev/more-capable-form-controls/"&gt;More capable form controls (web.dev)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/creating-custom-form-controls-with-elementinternals/"&gt;Creating Custom Form Controls with ElementInternals (CSS-Tricks)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#one-last-thing"&gt;
  &lt;/a&gt;
  One last thing...
&lt;/h2&gt;

&lt;p&gt;If you are not in a Javascript-heavy environment but would still like to use web components for your forms (e.g.: you're building a Laravel or Symfony web app), you always have to possibility of developing a universal form handler to overcome the problems that are described in this article.&lt;/p&gt;

&lt;p&gt;Sure, it's more complicated than just using native forms, and it will require you to do some more development and testing before you can get started, but it's probably the simplest workaround.&lt;/p&gt;

&lt;p&gt;If you do have any other workaround or solutions in mind, I'd love to see them here in the comments or on Twitter. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>webcomponents</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>How we uncovered a 24-year-old bug in the Linux kernel</title>
      <author>Mags Guru</author>
      <pubDate>Sun, 02 May 2021 16:35:16 +0000</pubDate>
      <link>https://dev.to/magsguru/how-we-uncovered-a-24-year-old-bug-in-the-linux-kernel-30la</link>
      <guid>https://dev.to/magsguru/how-we-uncovered-a-24-year-old-bug-in-the-linux-kernel-30la</guid>
      <description>&lt;p&gt;A fascinating detective story about finding and fixing a hard-to-find and yet very strange bug that mysteriously eluded detection during the long years of Linux maturation. It starts with a description of the background and the technological background of the company where the bug was found and then the author demonstrates in detail all the steps taken to uncover the bug.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U0hFLTi9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gn6xh2fyygt8uxauq0xl.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U0hFLTi9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gn6xh2fyygt8uxauq0xl.jpeg" alt="Linux Tux"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here at Skroutz, as part of our standard toolkit, we provide every developer with a rewritable database snapshot that they use in development. Updating this happens daily in the form of a pipeline, which includes generating LVM snapshots of the production environment data, anonymizing this dataset by removing all personal information, and then transferring it via rsync to the development database servers. The servers, in turn, provide a ZFS snapshot to each developer, along with tools to allow migration to new snapshots or rollback to old ones.&lt;/p&gt;

&lt;p&gt;We use the same pipeline for providing MariaDB and MongoDB with total dataset sizes of 600GB and 200GB, respectively, and a slightly different version for Elasticsearch. Even though the data on the disks changes significantly for all sources, rsync still saves a lot of time by transferring about 1/3 of the entire dataset each night.&lt;/p&gt;

&lt;p&gt;This setup has worked fine for more than five years, while scaling from 15 to 150 developers. Nevertheless, like most large systems, it required a lot of maintenance, during which some very interesting things happened.&lt;/p&gt;

&lt;p&gt;One of these points was a problem that eventually led to the discovery of a really old bug in the Linux kernel, related, in particular, to the implementation of TCP. The point is that rsync transfer from the original server, for unexplained reasons, started to hang constantly, while everything else was working in normal mode. Moreover, as it turned out, this problem could not be recreated deliberately, although some actions (e.g. adding a speed limit on the rsync level) reduced the frequency of its appearance, which ranged from once or twice a week to once in three months.&lt;/p&gt;

&lt;p&gt;At first we did not pay much attention to this problem because we had more urgent and important tasks to deal with and flagged it as a "race condition in rsync" which we should deal with sometime, and used the already described workaround with rate limiting.&lt;/p&gt;

&lt;p&gt;But eventually it started occurring literally on a daily basis.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;rsync as a pipeline&lt;/strong&gt;&lt;br&gt;
Although it is not necessary, knowing the inner workings of rsync will help you understand the analysis that follows. The website provides a detailed description of its internal architecture, so I will just summarize the most important points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rsync runs as one process on the client and one process on the server, communicating via a pair of sockets. With the rsync daemon, as in our case, the communication is done over a simple TCP connection.&lt;/li&gt;
&lt;li&gt;Depending on the direction of the synchronization, after the initial handshake each endpoint acts as sender or receiver. In our case the client is the receiver and the server is the sender.
The receiver creates a branch of an additional process called a generator which uses the same socket as the sender. The generator determines what it wants to ask the sender and then the sender sends this data to the receiver. As a result, after this step we actually have a pipeline: generator -&amp;gt; sender -&amp;gt; receiver, where the arrows represent the two directions of a single TCP connection. * Although there is a notification system in the process, the pipeline operates using locks and relies on OS buffers and TCP receive windows to control the return flow.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;A "ghost" on the net?&lt;/strong&gt;&lt;br&gt;
When we first encountered the problem we firstly assumed the network bugs, which was quite logical as the servers and switches had been upgraded shortly before. Having excluded all the usual suspects (NIC firmware bugs, TSO/GSO/GRO/VLAN offloading, excessive packet dropping or switch CRC errors, etc.), we came to the conclusion that everything was OK here and the problem lay in something else.&lt;/p&gt;

&lt;p&gt;Attaching the hanged processes with strace and gdb was not very informative: the generator hung on send() and the sender and receiver on recv(), but no data were moved. Nevertheless, looking at the kernels of both systems, we found something interesting. The rsync client socket shared by the generator and receiver processes was in the following state:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ss -mito dst :873
State      Recv-Q Send-Q                  Local Address:Port                                 Peer Address:Port
ESTAB      0      392827 ❶             2001:db8:2a::3:38022                             2001:db8:2a::18:rsync                 timer:(persist,1min56sec,0)
     skmem:(r0,rb4194304,t0,tb530944,f3733,w401771,o0,bl0,d757) ts sack cubic wscale:7,7 rto:204 backoff:15 rtt:2.06/0.541 ato:40 mss:1428 cwnd:10 ssthresh:46 bytes_acked:22924107 bytes_received:100439119971 segs_out:7191833 segs_in:70503044 data_segs_out:16161 data_segs_in:70502223 send 55.5Mbps lastsnd:16281856 lastrcv:14261988 lastack:3164 pacing_rate 133.1Mbps retrans:0/11 rcv_rtt:20 rcv_space:2107888 notsent:392827 minrtt:0.189
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the server, the state of the socket was as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ss -mito src :873
State      Recv-Q Send-Q                Local Address:Port                                 Peer Address:Port
ESTAB      0      0                   2001:db8:2a::18:rsync                              2001:db8:2a::3:38022                 timer:(keepalive,3min7sec,0)
     skmem:(r0,rb3540548,t0,tb4194304,f0,w0,o0,bl0,d292) ts sack cubic wscale:7,7 rto:204 rtt:1.234/1.809 ato:40 mss:1428 cwnd:1453 ssthresh:1431 bytes_acked:100439119971 bytes_received:22924106 segs_out:70503089 segs_in:7191833 data_segs_out:70502269 data_segs_in:16161 send 13451.4Mbps lastsnd:14277708 lastrcv:16297572 lastack:7012576 pacing_rate 16140.1Mbps retrans:0/794 rcv_rtt:7.5 rcv_space:589824 minrtt:0.026
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What is interesting is that on the client, the generator asks the server to send 3.5Mb of data (1 in the first output). However, while the server's Recv-Q is empty and it is able to receive data, nothing is transmitted. If the Recv-Q in the second output were not zero, we would see rsync hang on the server and its inability to read data from the network. Nevertheless, here we see that rsync received all incoming data and it is not its fault.&lt;/p&gt;

&lt;p&gt;So why is the data at one end of the connection queued up, when the other end is perfectly capable of receiving it? The answer lies uncomplicatedly in the timer fields of both ss pins, in particular timer:(persist,1min56sec,0). Quote ss(8):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-o, --options
              Show timer information. For TCP protocol, the output format is:

              timer:(&amp;lt;timer_name&amp;gt;,&amp;lt;expire_time&amp;gt;,&amp;lt;retrans&amp;gt;)

              &amp;lt;timer_name&amp;gt;
                     the name of the timer, there are five kind of timer names:

                     on : means one of these  timers:  TCP  retrans  timer,  TCP
                     early retrans timer and tail loss probe timer

                     keepalive: tcp keep alive timer

                     timewait: timewait stage timer

                     persist: zero window probe timer

                     unknown: none of the above timers
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;persist means that the connection has received a null window notification and expects a non-zero window notification from the pirate.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TCP null windows and null window probes&lt;/strong&gt;&lt;br&gt;
In TCP, flow control is implemented by limiting the data transmitted using a sliding window called the receive window. In short, each side of a TCP connection declares how much data it can buffer in transmission, that is, how much data the other side can send before proceeding to wait for acknowledgement of receipt.&lt;/p&gt;

&lt;p&gt;When one side's receive buffer (Recv-Q) is full (in this case, because the rsync process is performing disk I/O operations at a slower than the network speed), that side sends a null window signal which pauses the transmission in that direction. When the buffer is eventually released, the kernel sends an unsolicited notification with a non-zero window, and transmission resumes. To be sure, in case this notification is lost, the counterparty regularly polls for connection status using so-called Zero Window Probes, the persist mode we observe here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The window is "stuck" in the closed state&lt;/strong&gt;&lt;br&gt;
It is time to dig deeper and use tcpdump to assess what is happening at the network level:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; […]
09:34:34.165148 0c:c4:7a:f9:68:e4 &amp;gt; 0c:c4:7a:f9:69:78, ethertype IPv6 (0x86dd), length 86: (flowlabel 0xcbf6f, hlim 64, next-header TCP (6) payload length: 32) 2001:db8:2a::3.38022 &amp;gt; 2001:db8:2a::18.873: Flags [.], cksum 0x711b (incorrect -&amp;gt; 0x4d39), seq 4212361595, ack 1253278418, win 16384, options [nop,nop,TS val 2864739840 ecr 2885730760], length 0
09:34:34.165354 0c:c4:7a:f9:69:78 &amp;gt; 0c:c4:7a:f9:68:e4, ethertype IPv6 (0x86dd), length 86: (flowlabel 0x25712, hlim 64, next-header TCP (6) payload length: 32) 2001:db8:2a::18.873 &amp;gt; 2001:db8:2a::3.38022: Flags [.], cksum 0x1914 (correct), seq 1253278418, ack 4212361596, win 13831, options [nop,nop,TS val 2885760967 ecr 2863021624], length 0
[… repeats every 2 mins]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first packet is the client's null window probe, the second packet is the server's response. Surprisingly, the server declares a non-zero window with a size of 13831 bytes1, which the client apparently ignores.&lt;br&gt;
In fact, multiplied by 128, since the window scaling factor is 7.&lt;/p&gt;

&lt;p&gt;We have finally moved on, and now there is something to work on. At one point the client encountered the server declaring a null window as part of the standard TCP flow control, but then for some unknown reason the window did not reopen. The client still ignores the window updates announced by the server, so the transmission stands.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Processing TCP input in Linux&lt;/strong&gt;&lt;br&gt;
At this point it is obvious that the TCP connection is in a strange state on the rsync client. Since TCP flow control takes place at the kernel level, to find the root of the problem we need to look at how the kernel handles incoming TCP acknowledgements and try to figure out why it ignores incoming window state announcements.&lt;/p&gt;

&lt;p&gt;The processing of TCP packets takes place in net/ipv4/tcp_input.c. Although there is an ipv4 component in the path, this code is mostly generic for IPv4 and IPv6.&lt;/p&gt;

&lt;p&gt;After some searching we found out that incoming window updates are handled in tcp_ack_update_window and the actual updating is controlled by the following function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* Check if window update is available.
 * The function assumes that snd_una&amp;lt;=ack&amp;lt;=snd_next.
 */
static inline bool tcp_may_update_window(const struct tcp_sock *tp,
                    const u32 ack, const u32 ack_seq,
                    const u32 nwin)
{
    return  after(ack, tp-&amp;gt;snd_una) || ❶
        after(ack_seq, tp-&amp;gt;snd_wl1) || ❷
        (ack_seq == tp-&amp;gt;snd_wl1 &amp;amp;&amp;amp; nwin &amp;gt; tp-&amp;gt;snd_wnd); ❸
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The variables ack, ack_seq, snd_wl1 and snd_una contain the TCP sequence numbers for tracking the transmitted data. These numbers are 32-bit unsigned integers (u32) and are incremented by 1 for every byte transmitted, starting with an arbitrary starting value (the starting sequence number). Here is a summary of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ack_seq - incoming segment number.&lt;/li&gt;
&lt;li&gt;Ack is the acknowledgement number contained in the incoming segment. It confirms the sequence number of the last segment received from us by the pir.&lt;/li&gt;
&lt;li&gt;snd_wl1 - the number of the incoming segment which last updated the receive window of the pir.&lt;/li&gt;
&lt;li&gt;snd_una - the number of the first unconfirmed segment, i.e. sent, but not yet confirmed by the peer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As fixed-size integers, the ordinal numbers will eventually be cyclic, so in the context of such repetition, the comparison of the two numbers is assigned to the after() macro.&lt;/p&gt;

&lt;p&gt;As a reference, note that the names snd_una and snd_wl1 are taken directly from the first TCP specification in RFC 793(English) 1981!&lt;br&gt;
Expressing a rather confusing check in simple terms, we want to get a window update from a pir if it:&lt;br&gt;
❶ Confirms receipt of the data we sent.&lt;br&gt;
❷ Sends new data after the previous window update.&lt;br&gt;
❸ Does not send new data after updating the window, but announces a larger window.&lt;br&gt;
Note that the comparison of ack_seq and snd_wl1 ensures that the window will not be updated by a random (retransmitted) segment that has already been viewed.&lt;br&gt;
In our case, the window should reopen at least according to condition ❸, but it does not. To find out the reason, we need to refer to the specified variables. Unfortunately, they are part of the internal state of the kernel and are not revealed directly in the user space. This is where some wit is required.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Access to the internal state of the kernel&lt;/strong&gt;&lt;br&gt;
To access the state of the kernel, you need to somehow execute code inside it. One way was to patch the kernel with a few printk() calls in the right places, but this would have required rebooting the machine and waiting for another rsync hang. Instead, we decided to patch the kernel in real time using systemtap, using the following script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;probe kernel.statement("tcp_ack@./net/ipv4/tcp_input.c:3751")
{
  if ($sk-&amp;gt;sk_send_head != NULL) {
      ack_seq = @cast(&amp;amp;$skb-&amp;gt;cb[0], "tcp_skb_cb", "kernel&amp;lt;net/tcp.h&amp;gt;")-&amp;gt;seq
      printf("ack: %d, ack_seq: %d, prior_snd_una: %d\n", $ack, ack_seq, $prior_snd_una)
      seq = @cast(&amp;amp;$sk-&amp;gt;sk_send_head-&amp;gt;cb[0], "tcp_skb_cb", "kernel&amp;lt;net/tcp.h&amp;gt;")-&amp;gt;seq
      end_seq = @cast(&amp;amp;$sk-&amp;gt;sk_send_head-&amp;gt;cb[0], "tcp_skb_cb", "kernel&amp;lt;net/tcp.h&amp;gt;")-&amp;gt;end_seq
      printf("sk_send_head seq:%d, end_seq: %d\n", seq, end_seq)

      snd_wnd = @cast($sk, "tcp_sock", "kernel&amp;lt;linux/tcp.h&amp;gt;")-&amp;gt;snd_wnd
      snd_wl1 = @cast($sk, "tcp_sock", "kernel&amp;lt;linux/tcp.h&amp;gt;")-&amp;gt;snd_wl1
      ts_recent = @cast($sk, "tcp_sock", "kernel&amp;lt;linux/tcp.h&amp;gt;")-&amp;gt;rx_opt-&amp;gt;ts_recent
      rcv_tsval = @cast($sk, "tcp_sock", "kernel&amp;lt;linux/tcp.h&amp;gt;")-&amp;gt;rx_opt-&amp;gt;rcv_tsval
      printf("snd_wnd: %d, tcp_wnd_end: %d, snd_wl1: %d\n", snd_wnd, $prior_snd_una + snd_wnd, snd_wl1)
      printf("flag: %x, may update window: %d\n", $flag, $flag &amp;amp; 0x02)
      printf("rcv_tsval: %d, ts_recent: %d\n", rcv_tsval, ts_recent)
      print("\n")
     }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Systemtap works by converting its scripts into C and building a kernel module that patches it "hot" and overrides specific instructions. Here we override the tcp_ack() system call, add our own code to its end, and reset the internal state of the TCP connection. Checking $sk-&amp;gt;sk_send_head != NULL provides a quick way to match only connections with non-zero Send-Q.&lt;/p&gt;

&lt;p&gt;Loading the resulting module into the kernel resulted in the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ack: 4212361596, ack_seq: 1253278418, prior_snd_una: 4212361596
sk_send_head seq:4212361596, end_seq: 4212425472
snd_wnd: 0, tcp_wnd_end: 4212361596, snd_wl1: 1708927328
flag: 4100, may update window: 0
rcv_tsval: 2950255047, ts_recent: 2950255047
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are interested in two points: snd_wl1: 1708927328 and ack_seq: 1253278418. The point is not just that they are different, as expected, but that ack_seq is smaller than snd_wl1, that is, the counting of ack_seq values at some point resumed from the beginning, while the value of snd_wl1 has not been updated for some time. Using the rules of arithmetic of consecutive numbers, we can find out that this endpoint since the last update of snd_wl1 received at least 3.8 GB.&lt;/p&gt;

&lt;p&gt;We have already seen that the field snd_wl1 contains the last sequence number used to update the receive pira window (and hence our send window) and should eventually guarantee against updating windows based on old segments. Everything should be fine if snd_wl1 doesn't update for a while, but the lag from ack_seq shouldn't get too big, otherwise there is a risk of rejecting valid window updates, as in our case. So it looks like the Linux kernel cannot update snd_wl1 for some reason, which leads to an inability to exit the zero window state.&lt;/p&gt;

&lt;p&gt;After getting solid evidence of kernel failures, it's time to report it upstairs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Addressing the Maintainers&lt;/strong&gt;&lt;br&gt;
After digesting the information well, we composed an appeal to the Linux kernel maintainers, in which we stated everything that we could find out at the time, along with our speculations on the subject. Less than two hours later we received a reply, with a patch from Neil Cardwell.&lt;/p&gt;

&lt;p&gt;It turned out that the bug was in the fast path of the recipient of bulk data, that is, the path of code that skips most of the strict expensive TCP processing in order to optimize performance in typical cases of receiving large amounts of data. This is a serious optimization emphasized as early as 28 years ago2 by Van Jacobson in his letter "TCP receive in 30 instructions". Obviously, the Linux implementation, while in the recipient's fast path, did not update snd_wl1. When the connection uses the fast path for too long, snd_wl1 is so far behind that ack_seq is "round-robin" ahead of it. If this happens when the receive window is zero, there is no way to re-open that window, as shown above. Furthermore, this error has been present in Linux since version 2.1.8, which dates back to 1996!&lt;/p&gt;

&lt;p&gt;² This optimization is still relevant today: a relatively recent attempt to simplify code by removing header prediction and associated fast paths failed because of performance degradation.&lt;/p&gt;

&lt;p&gt;After receiving the patch, we immediately installed it, then rebuilt and deployed the kernel to the affected machines, and then waited in the hope that everything would go as it was supposed to. After a couple of days, we were already sure that the patch was correct and there were no side effects.&lt;/p&gt;

&lt;p&gt;After a short discussion the final commit was posted to linux-net, and from there it was pushed to the Linux 5.10-rc1 mainline. Eventually it was implemented in the stable 4.9 and 4.19 kernel series that we use on our Debian systems with versions 4.9.241 and 4.19.153, respectively.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Afterword&lt;/strong&gt;&lt;br&gt;
Although the bug has been fixed, we were still interested in a couple of questions, namely:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How is it possible that a TCP bug that causes connections to hang has gone undetected for 24 years?&lt;/li&gt;
&lt;li&gt;How is it that, working with an infrastructure of over 600 systems running all sorts of software, we only noticed this bug when using rsync?
These questions are difficult to answer definitively, but one can speculate:&lt;/li&gt;
&lt;li&gt;This error will not be caused by most L7 protocols. In "synchronous" request-response protocols, such as HTTP, typically each side will consume all available data before sending. In that case, even if snd_wl1 makes a circle, the recipient of the bulk data will keep a non-zero window and be able to send data, whereupon the next confirmation will update that window and tweak snd_wl1 through the ❶ check in tcp_may_update_window. On the other hand, rsync uses an aggressive pipeline in which the server can send multi-gigabyte responses without receiving incoming data in the process. And even using rsync over SSH (a fairly common combination) rather than a simple TCP transport did not reveal this fault, since the framing/notification in SSH did not allow data to line up on the server in this way.&lt;/li&gt;
&lt;li&gt;Regardless of the application protocol, the receiver must keep the null window in the last path long enough (at least for 2GB) for cyclic addressing, but not so long that ack_seq has time to overtake snd_wl1 again. This is only possible if no packets are lost and no other conditions occur that could cause the fast path header prediction to fail. In practice, this is very unlikely because TCP itself determines the network bandwidth, effectively causing packet loss.&lt;/li&gt;
&lt;li&gt;Most applications will handle network timeouts and either fail or reconnect, which would be like a "random network glitch" that leaves no trace for debugging.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally, even if none of the above happens and your TCP connection hangs regularly, it will take a lot of effort to get to the root of the problem in your kernel code. However, this difficult process will reward you with an exciting adventure in which you learn a lot about the history of Internet protocols, peek into the sacred bowels of the kernel, and observe how similar problems are solved in open source projects.&lt;/p&gt;

</description>
      <category>linux</category>
      <category>unix</category>
      <category>kernel</category>
    </item>
    <item>
      <title>Have you experimented with CSS container queries?</title>
      <author>Stephanie Eckles</author>
      <pubDate>Sun, 02 May 2021 16:26:55 +0000</pubDate>
      <link>https://dev.to/5t3ph/have-you-experimented-with-css-container-queries-3goh</link>
      <guid>https://dev.to/5t3ph/have-you-experimented-with-css-container-queries-3goh</guid>
      <description>&lt;p&gt;CSS container queries have landed as an experiment in Chrome Canary! You can enable them under &lt;code&gt;chrome://flags&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have you had a chance to experiment with them yet&lt;/strong&gt;? How do you feel about them being available in CSS?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xrZNX1Lj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6cyo7o480u92lqe4ed6b.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xrZNX1Lj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6cyo7o480u92lqe4ed6b.gif" alt="demo of using container queries within a flexbox grid layout, using color and CSS content to note when flex children are rendered as small, medium, or large container sizes."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Resources if you're just hearing about them now:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Miriam Suzanne is the proposal author, and you should &lt;a href="https://css.oddbird.net/rwd/query/explainer/"&gt;start with her explainer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Check out her &lt;a href="https://codepen.io/collection/XQrgJo"&gt;CodePen collection of demos&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;You might like highlights from &lt;a href="https://www.twitch.tv/collections/8k9OzUpxdxb9VA"&gt;my Twitch stream of exploring them&lt;/a&gt; for the first and second time&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.oddbird.net/2021/04/05/containerqueries/"&gt;A quick start guide&lt;/a&gt; from David A. Herron&lt;/li&gt;
&lt;li&gt;Ahmad Shadeed's excellent &lt;a href="https://ishadeed.com/article/say-hello-to-css-container-queries/"&gt;overview with practical examples&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;And links to more within Stu Robson's repo &lt;a href="https://github.com/sturobson/Awesome-Container-Queries"&gt;Awesome-Container-Queries&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>discuss</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Content &amp; Community- A Cheatsheet for Open Source projects. ( Part 1: Content 🎨)</title>
      <author>Mathew J Padayatty</author>
      <pubDate>Sun, 02 May 2021 16:16:26 +0000</pubDate>
      <link>https://dev.to/aviyel/content-community-a-cheatsheet-for-open-source-projects-part-1-content-5he7</link>
      <guid>https://dev.to/aviyel/content-community-a-cheatsheet-for-open-source-projects-part-1-content-5he7</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;“Software built on pride and love of the subject is superior to software built for profit.”&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
- Ravi Simhambhatla&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are over 80 million repos on Github, open stack has over 49 teams working on 1,525 project repos.  Every Open Source project is trying to capture the attention and resources of the developer community in a crowded and attention-deficit world.&lt;/p&gt;

&lt;p&gt;To rise above the noise, You need to be able to communicate what your project is doing, attract independent contributors and companies that offer material support. In Open Source, you’re selling &lt;strong&gt;&lt;em&gt;ideas not stuff&lt;/em&gt;&lt;/strong&gt; and you need users and contributors to spend their &lt;strong&gt;&lt;em&gt;time and attention&lt;/em&gt;&lt;/strong&gt; on your projects.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;“In Open Source, marketing is about getting people to exchange their time &amp;amp; attention for your ideas.”&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
- Deirdre Straughan, AWS, Open Source lead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Conventional marketing tactics, slick ads, videos and other materials don’t have the same impact when it comes to the Open Source community. Authenticity, transparency, and a real solution to a real problem carry more weight in the community. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;“Everything that touches your customer, everything! Is marketing.”&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So where do you begin? How can a small crew leverage content marketing around Open Source projects to grow a community in the early days? The steps are pretty straightforward, as with most things execution is the key differentiator.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1:
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#understand-your-key-content-levers"&gt;
  &lt;/a&gt;
  Understand your key content levers.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h3&gt;

&lt;p&gt;Open source doesn’t have as great a set of training manuals and resources as the paid-and-packaged stuff. The OSS documentation is the &lt;strong&gt;SALES PITCH&lt;/strong&gt;. It’s what will convince the engineers, at first glance that your project is worth contributing to and what will convince users of its advantages. &lt;/p&gt;

&lt;p&gt;The documentation needs to convey&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to install the library.&lt;/li&gt;
&lt;li&gt;The background behind the project.&lt;/li&gt;
&lt;li&gt;Code examples.&lt;/li&gt;
&lt;li&gt;Deep dive into underlying software logic.&lt;/li&gt;
&lt;li&gt;Effective benchmarking versus nearest neighbor libraries. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#visualization-gallery"&gt;
  &lt;/a&gt;
  Visualization Gallery
&lt;/h3&gt;

&lt;p&gt;Product visualizations/ Walkthroughs in the forms of videos and .gifs with appropriate feature shout-outs, and accompanying use case descriptions can be an effective way to get the user's buy-in.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Emphasis on reliability, access, and ease of use.&lt;/li&gt;
&lt;li&gt;Guides the eyes to moot points along with the landing page.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#comparison-charts"&gt;
  &lt;/a&gt;
  Comparison charts
&lt;/h3&gt;

&lt;p&gt;A chart/ table capturing the pros and cons of the OSS software in comparison with other players OSS and proprietary is invaluable to a developer's decision-making. A full picture on the product stack with features and its advantages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nudge-content"&gt;
  &lt;/a&gt;
  Nudge Content
&lt;/h3&gt;

&lt;p&gt;Content beyond the product capabilities, useful for the ideal user profile in the form of Tips, insights, case studies, podcasts and webinars can further drive resonance and inclination to spend more time on the website...which in turn correlates to product adoption and product evangelism. &lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2:
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#build-a-content-strategy"&gt;
  &lt;/a&gt;
  Build a content strategy.
&lt;/h2&gt;

&lt;p&gt;Now that you have your levers in place let's look at breaking down the different components of an effective OSS content strategy-&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Building your content strategy.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Education &amp;amp; Support Category&lt;/li&gt;
&lt;li&gt;Product Showcase &lt;/li&gt;
&lt;li&gt;Validation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#education-amp-support-category"&gt;
  &lt;/a&gt;
  Education &amp;amp; Support Category
&lt;/h3&gt;

&lt;p&gt;This is the most crucial aspect of the effectiveness of any OSS content strategy. There is a list of hygiene requirements here that is an absolute must. Which includes User guides, architecture guides, Online courses, documentation, and engineering blogs.&lt;/p&gt;

&lt;p&gt;A key thing to note here is although a lot of OSS platforms make this available, the real challenge here is the seamless accessibility and user-friendliness of the content. The ‘Nudge content’ around case studies, user stories, podcasts, Industry reports, comparison charts, and webinars also come within this segment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#product-showcase"&gt;
  &lt;/a&gt;
  Product Showcase
&lt;/h3&gt;

&lt;p&gt;The most underutilized segment within OSS content is the proper visualization of the product and highlighting all its unique features, UI, and maneuverability. This can include product demos, product screenshots, product .gifs, etc&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#validation"&gt;
  &lt;/a&gt;
  Validation
&lt;/h3&gt;

&lt;p&gt;Community, user, and Industry validation is a crucial aspect of building trust and confidence in the user.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3:
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#optimise-using-tools"&gt;
  &lt;/a&gt;
  Optimise using tools.
&lt;/h2&gt;

&lt;p&gt;After putting together a content strategy, use content tools to execute and A/B test different content for the cohorts you're reaching out to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#content-creation-tools"&gt;
  &lt;/a&gt;
  Content creation tools
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://hemingwayapp.com/"&gt;&lt;strong&gt;Hemingway app (Text)&lt;/strong&gt;&lt;/a&gt; - For Written content, it helps review your blog post and highlights readability aspects that can be useful in making your blog post or content more accessible. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.canva.com/photos/"&gt;&lt;strong&gt;Canva (Image &amp;amp; Video)&lt;/strong&gt;&lt;/a&gt; - One of the easiest design platforms out there, making designing posts videos for quick content creation seamless.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://placeit.net/"&gt;&lt;strong&gt;Placeit(Image &amp;amp; Video)&lt;/strong&gt;&lt;/a&gt; - Create logos, freebies and other content on the go from a large repository of mockups.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://nimbusweb.me/screenshot.php"&gt;&lt;strong&gt;Nimbus Screenshot and Screen Video Recording Chrome Extension&lt;/strong&gt;&lt;/a&gt; - A useful tool while you’re making ‘How-to’ and ‘DIY’ or ‘Product walkthroughs’ videos to helps users understand how to navigate your product.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://unsplash.com/"&gt;&lt;strong&gt;Unsplash&lt;/strong&gt;&lt;/a&gt; - Find usable images for your content. A great repository that's a good alternative to Shutterstock.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://piktochart.com/"&gt;&lt;strong&gt;Picktochart&lt;/strong&gt;&lt;/a&gt; - Data visualizations are always helpful when you're trying to communicate certain aspects of product usage in relation to something else.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.audacityteam.org/download/"&gt;&lt;strong&gt;Audacity&lt;/strong&gt;&lt;/a&gt; - Podcasting tool, is an easy-to-use multitrack audio recording and editing platform that can help you get started on your first podcast.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://streamyard.com/"&gt;&lt;strong&gt;Streamyard&lt;/strong&gt;&lt;/a&gt; - A great tool for webinars and hosting live sessions that helps you to go live across Facebook, YouTube, LinkedIn, and other platforms.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://carbon.now.sh/"&gt;&lt;strong&gt;Carbon&lt;/strong&gt;&lt;/a&gt; - Carbon is the easiest way to create and share beautiful images of your source code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://codeimg.io/"&gt;&lt;strong&gt;CodeImg&lt;/strong&gt;&lt;/a&gt; -Create and share beautiful images of your source code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://getterms.io/"&gt;&lt;strong&gt;Getterms&lt;/strong&gt;&lt;/a&gt; - Generate a simple Terms of Service and Privacy Policy statement for your website&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://beefree.io/"&gt;&lt;strong&gt;Beefree&lt;/strong&gt;&lt;/a&gt; - BEE is an email editor to build beautiful, responsive emails quickly and easily. Our objective is to build the Best Email Editor. Use it online or embed it into your application.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#content-management-amp-analytics"&gt;
  &lt;/a&gt;
  Content management &amp;amp; Analytics
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://tweetdeck.twitter.com/"&gt;&lt;strong&gt;Tweetdeck&lt;/strong&gt;&lt;/a&gt; - Schedule your content on Twitter, engage your twitter profile, messages and trends through a comprehensive dashboard.  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://buzzsumo.com/"&gt;&lt;strong&gt;Buzzsumo&lt;/strong&gt;&lt;/a&gt;- A cloud-based platform that helps you discover new keywords, trending stories, customer questions, and content success.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.semrush.com/"&gt;&lt;strong&gt;Semrush&lt;/strong&gt;&lt;/a&gt; – Keyword Research, SEO, PPC, SMM, PR, Content Marketing, Competitive Research, Campaign Management, Semrush is an all-in-one for improve visibility and discovered marketing insight.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://ahrefs.com/"&gt;&lt;strong&gt;Ahrefs&lt;/strong&gt;&lt;/a&gt; – Ahrefs is one of the largest database for live link because it is know for its backlink checker. it helps for understanding your website so you can optimize your website for search engine.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://neilpatel.com/ubersuggest/"&gt;&lt;strong&gt;Ubersuggest&lt;/strong&gt;&lt;/a&gt; – Ubersuggest is a free SEO tool that can be used to analyze search engine optimization. Its current version is provided by Neil Patel, a well-known SEO expert from around the world.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are a few tools to help you get started, Open Source deserves amazing content on par with it's pro-profit and SaaS equivalents.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Open source to us is the right way to build the future of the web- Transparent and empowering smaller groups of developers rather than large monolithic cooperations.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We've been building tools to help Open source projects create and manage their content, community, and code. &lt;br&gt;
Check out &lt;a href="http://aviyel.com/"&gt;&lt;strong&gt;Aviyel&lt;/strong&gt;&lt;/a&gt; and sign up for early access.&lt;/p&gt;

&lt;p&gt;We'd love to hear from you and work towards making Open Source sustainable.&lt;/p&gt;

&lt;p&gt;May the FOSS be with you! :)&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>opensource</category>
      <category>startup</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
