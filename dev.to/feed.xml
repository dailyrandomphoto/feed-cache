<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Why companies should support their employees side projects</title>
      <author>Wannabe Entrepreneur üéôÔ∏è</author>
      <pubDate>Mon, 20 Dec 2021 02:03:12 +0000</pubDate>
      <link>https://dev.to/wbepodcast/why-companies-should-support-their-employees-side-projects-lm5</link>
      <guid>https://dev.to/wbepodcast/why-companies-should-support-their-employees-side-projects-lm5</guid>
      <description>&lt;h3&gt;
  &lt;a href="#being-a-developer-is-99-brain-work"&gt;
  &lt;/a&gt;
  Being a developer is 99% brain work!
&lt;/h3&gt;

&lt;p&gt;We spend most of our time sited on a chair solving bugs, implementing new features, and scrolling through Twitter...&lt;/p&gt;

&lt;p&gt;We must find ways to explain to our CEOs why we need to add a new node to our K8s cluster and to our POs why we should save extra estimation points for unit tests.&lt;/p&gt;

&lt;p&gt;All of this requires a level of creativity and problem solving that many other professions do not require...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-do-you-do-after-work"&gt;
  &lt;/a&gt;
  What do you do after work?
&lt;/h3&gt;

&lt;p&gt;After a tiring day of work, we can not wait to arrive home, log in to our personal laptop and work on our side project. We can not get enough!! How many domains have you bought this year?? Have you started a youtube channel yet?&lt;/p&gt;

&lt;p&gt;For us knowing how to code is like having a super power! With only just a laptop we get to transform into reality whatever we can imagine. However, there is a downside to this...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#we-get-bored-very-quickly"&gt;
  &lt;/a&gt;
  We get bored very quickly!!
&lt;/h3&gt;

&lt;p&gt;I dare to say that the two most spoken words that come out from the mouth of a developer are: "coffee" and "bored"!&lt;/p&gt;

&lt;p&gt;It's really hard to keep a coder in a company for more than 5 years because it's difficult to keep them motivated.&lt;/p&gt;

&lt;p&gt;There will be a time when a company's product does not need exciting new features or experimental tech. It just needs better logging...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#developers-need-a-chance-to-explore-their-entrepreneurial-side"&gt;
  &lt;/a&gt;
  Developers need a chance to explore their entrepreneurial side
&lt;/h3&gt;

&lt;p&gt;Companies should cultivate a culture of entrepreneurism among their developers. Here are some ideas:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Teach them about the business&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Developers are very creative but lack the business and marketing background. By teaching your devs about the business side of the company and encouraging them to understand more about product building and marketing you are building highly valuable assets for your business&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listen to their ideas&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nothing kills the motivation more than being ignored. I have seen many of my colleagues suggesting brilliant ideas to their bosses that end up being ignored and the result was that my peers stopped trying to contribute and end up leaving...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Support their side projects&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Many companies fear that by supporting their employee's side projects they will eventually lose their focus and eventually leave. This is wrong for two main reasons:&lt;/p&gt;

&lt;p&gt;1- Is extremely hard to make a developer's salary from your side projects... XD&lt;/p&gt;

&lt;p&gt;2- Being bored is actually the main reason why many developers end up working less and eventually leaving their jobs...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#virtual-coworking-space-for-entrepreneurs"&gt;
  &lt;/a&gt;
  Virtual co-working space for entrepreneurs
&lt;/h3&gt;

&lt;p&gt;If you are an employer that wants to support their employee's entrepreneurial spirit or a developer that wants to build their side projects with other indie makers have a look into the WBE Space.&lt;/p&gt;

&lt;p&gt;It's an online coworking space where people from all backgrounds work together in their projects and support each other with feedback and tips.&lt;/p&gt;

&lt;p&gt;Funny enough most of our members have a full time job and are happy with it :D&lt;/p&gt;

</description>
      <category>career</category>
      <category>sideprojects</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Changelog #0006  ‚Äî üé® Unified style</title>
      <author>Cl√°udia Delgado</author>
      <pubDate>Mon, 20 Dec 2021 01:24:31 +0000</pubDate>
      <link>https://dev.to/pie/changelog-0006-unified-style-5dd1</link>
      <guid>https://dev.to/pie/changelog-0006-unified-style-5dd1</guid>
      <description>&lt;p&gt;Another week, another update on our mission to provide the best experience to anyone working with APIs. &lt;a href="https://httpie.io/blog/changelog-0005"&gt;Last week&lt;/a&gt; we launched the new Library feature in preview. While we‚Äôre busy building its remaining features (from must-haves to superpowers), &lt;a href="https://github.com/httpie/httpie"&gt;HTTPie for Terminal reached 53K stars on GitHub&lt;/a&gt;, and we‚Äôve managed to ship a few other goodies. Check out what's new üëá&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unified-code-style-across-the-platform"&gt;
  &lt;/a&gt;
  üé® Unified code style across the platform
&lt;/h2&gt;

&lt;p&gt;We designed the new HTTPie brand with the incredibly talented team at &lt;a href="https://koto.studio"&gt;Koto&lt;/a&gt;. Part of the brand is an extended product palette, which we‚Äîas a developer tools company‚Äîdesigned with a beautiful code syntax highlighting in mind.&lt;/p&gt;

&lt;p&gt;Below is a page from our style guide and an example of how it cascades down through a Tailwind CSS config to our design system and to the product:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SU1ODSS5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://httpie.io/Blog/changelog-0006/httpie-colors-LXXJREAS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SU1ODSS5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://httpie.io/Blog/changelog-0006/httpie-colors-LXXJREAS.png" alt="HTTPie colors" width="880" height="591"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You have been able to see the code style (the ‚Äî ü•Å ‚Äî Pie style) in action here on the website as well as in the web and desktop apps for a while. Now we‚Äôve added it to the development version of HTTPie for Terminal as well.&lt;/p&gt;

&lt;p&gt;Once the upcoming HTTPie for Terminal v3.0.0 has been released, you‚Äôll be able to use the new &lt;code&gt;--style=pie-dark&lt;/code&gt; and &lt;code&gt;--style=pie-light&lt;/code&gt; styles. If you switch between dark and light terminal schemes often (and don‚Äôt mind trading some legibility for the convenience of not having to specify which Pie theme to use) you can use the universal &lt;code&gt;--style=pie&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This way, you‚Äôll have a consistent experience across all HTTPie apps:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CUvZnnfx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://httpie.io/Blog/changelog-0006/pie-theme-6QXLSQ44.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CUvZnnfx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://httpie.io/Blog/changelog-0006/pie-theme-6QXLSQ44.png" alt="pie-theme" width="880" height="676"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Psst, we‚Äôll be also looking into open-sourcing the Pie theme for use in various code editors.)&lt;/p&gt;

&lt;p&gt;By the way, if you‚Äôre a designer and find what and how we‚Äôre building interesting, you should check out our &lt;a href="https://httpie.io/jobs"&gt;jobs page&lt;/a&gt; üëÄ&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-improvements"&gt;
  &lt;/a&gt;
  ‚ú® Other improvements
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You can now open a collection in its own tab. Just click one in the library to open it. For now, you can see there a list of its requests. Later on, this tab is where all the collection superpowers will grow.&lt;/li&gt;
&lt;li&gt;You could always copy a request or response. But what if you wanted only to copy its body? Fair enough, now you can: copy all, copy headers, copy body.&lt;/li&gt;
&lt;li&gt;The request body type selectors were easy to miss at the bottom of our panels. Now they're more prominent and open by default when none is selected.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fixes"&gt;
  &lt;/a&gt;
  ü™≤ Fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Drag &amp;amp; drop (used for tabs and header/parameters rows) now works in the desktop app as well.&lt;/li&gt;
&lt;li&gt;The number of parameters and headers displayed in their tabs incorrectly counted disabled items as well; now, it doesn't.&lt;/li&gt;
&lt;li&gt;The sent request view didn't wrap the start-line. But now, you can include as many parameters as you need, and they'll always be visible in the start-line.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#httpie-for-terminal"&gt;
  &lt;/a&gt;
  HTTPie for Terminal
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://httpie.io/cli"&gt;HTTPie for Terminal&lt;/a&gt; has reached 53K stars on GitHub üåüüéâ Making it the most popular API tool on GitHub, and a top-100 repository out of 200M+ overall.&lt;/p&gt;

&lt;p&gt;Here‚Äôs a summary of this week‚Äôs improvements to the &lt;a href="https://github.com/httpie/httpie"&gt;development version&lt;/a&gt;, which will be part of the upcoming v3.0.0 release.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#improvements"&gt;
  &lt;/a&gt;
  ‚ú® Improvements
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The already mentioned new Pie &lt;code&gt;--style&lt;/code&gt; options. (&lt;a href="https://github.com/httpie/httpie/pull/1238"&gt;#1238&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Decoding is now up to 30% faster when dealing with large streamed responses. (&lt;a href="https://github.com/httpie/httpie/pull/1243"&gt;#1243&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;In addition to already existing &lt;code&gt;install&lt;/code&gt; and &lt;code&gt;uninstall&lt;/code&gt; commands, the &lt;code&gt;httpie plugins&lt;/code&gt; interface can now also &lt;code&gt;upgrade&lt;/code&gt; existing plugins. (&lt;a href="https://github.com/httpie/httpie/pull/1241"&gt;#1241&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fixes"&gt;
  &lt;/a&gt;
  ü™≤ Fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Automatic syntax highlighting and formatting now works for complex &lt;code&gt;Content-Type&lt;/code&gt; headers (e.g when a charset is specified). (&lt;a href="https://github.com/httpie/httpie/pull/1244"&gt;#1244&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#happy-testing-and-see-you-next-week"&gt;
  &lt;/a&gt;
  Happy testing, and see you next week!
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;üíÅüèª‚Äç‚ôÄÔ∏è If you‚Äôre not on the private beta yet, you can &lt;a href="https://httpie.io/beta"&gt;join the waitlist here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;üëâ You can also follow &lt;a href="https://twitter.com/httpie"&gt;@httpie&lt;/a&gt; and join our &lt;a href="https://httpie.io/discord"&gt;Discord community&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;üë©‚Äçüíª We‚Äôre looking for new colleagues in &lt;a href="https://httpie.io/jobs"&gt;engineering and design roles&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Originally published on &lt;a href="https://httpie.io/blog/changelog-0006"&gt;HTTPie blog&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Lost Ark Gold Founder‚Äôs Pack Introduction</title>
      <author>Egio Auditore</author>
      <pubDate>Mon, 20 Dec 2021 01:14:01 +0000</pubDate>
      <link>https://dev.to/egioauditore/lost-ark-gold-founders-pack-introduction-1l52</link>
      <guid>https://dev.to/egioauditore/lost-ark-gold-founders-pack-introduction-1l52</guid>
      <description>&lt;p&gt;People interested in the upcoming MMOARPG Lost Ark should also want to know some information about Founder‚Äôs Pack. This is an item package sold at a clearly marked price, divided into four levels: Bronze, Silver, Gold, and Platinum. Their prices are $14.99, $24.99, $49.99 and $99.99. The level of the package is directly proportional to the reward. If players buy Lost Ark Gold in advance, they will definitely take the lead in Lost Ark earlier than ordinary players.&lt;/p&gt;

&lt;p&gt;Although the rewards provided by Bronze Founder‚Äôs Pack and Silver Founder‚Äôs Pack look very good, it is not enough to compare with Gold Founder‚Äôs Pack and Platinum Founder‚Äôs Pack. Take Gold Founder‚Äôs Pack as an example. Players can get 4,000 Royal Crystals, Gold Supply Crate, Founder‚Äôs Exclusive Avatar and Character Expansion Slot from the pack. Players can get 4 times the Royal Crystals, while technically speaking, they can save these prices between wallets and gold bags.&lt;/p&gt;

&lt;p&gt;The Founder‚Äôs Exclusive Avatar is very interesting. If players follow the Korean and Russian versions of Lost Ark, they will know that these avatars or skins can bring them a lot of Lost Ark Gold in the future. If this avatar is still exclusive to the founder and becomes unavailable in the future, it will be a rare item. Although the Character Expansion Slot is very useful, players don‚Äôt have to buy it in a hurry. You can always buy it in the future. In addition, players must pay more attention to Lost Ark Characters than to other MMO games.&lt;/p&gt;

&lt;p&gt;Players can purchase the Founder‚Äôs Pack that suits them according to their level of interest in Lost Ark. For example, people who like Lost Ark very much can buy Gold Founder‚Äôs Pack. As for players who want to know about other Founder‚Äôs Pack, they can visit IGGM to find out. And these people should be eager to get some achievements in Lost Ark. From this point of view, it is more necessary to buy Lost Ark Gold in advance at IGGM. Check it now!&lt;/p&gt;

&lt;p&gt;Attached link: &lt;a href="https://www.iggm.com/lost-ark-gold"&gt;https://www.iggm.com/lost-ark-gold&lt;/a&gt;&lt;/p&gt;

</description>
      <category>lostarkgold</category>
      <category>iggm</category>
    </item>
    <item>
      <title>Difference between Redux and Context API</title>
      <author>salman6abbas</author>
      <pubDate>Mon, 20 Dec 2021 01:00:51 +0000</pubDate>
      <link>https://dev.to/salman6abbas/difference-between-redux-and-context-api-12bg</link>
      <guid>https://dev.to/salman6abbas/difference-between-redux-and-context-api-12bg</guid>
      <description>&lt;p&gt;So I was having an interview and I was asked to tell about the difference between redux and React's context api. First of all I was blown like nothing came to my mind and then I was like Redux contains a lot of boiler plate while context is very much simpler. I even went after saying even its cofounder Dan Abramov said he doesn't like using Redux.&lt;br&gt;
Well he insisted like no there's other main difference regarding the scope that you have to tell. Well I gave up and then he told me that redux is global scope while context was components scope. Since then I kind of couldn't get over it. Like if this is the case then learning redux (although I don't like it) is essential as more and more companies are using it. What is your stance on it. Will be very glad to see the responses.&lt;/p&gt;

</description>
      <category>react</category>
    </item>
    <item>
      <title>Setting up an Elm project in 2022</title>
      <author>Lindsay Wardell</author>
      <pubDate>Mon, 20 Dec 2021 00:49:47 +0000</pubDate>
      <link>https://dev.to/lindsaykwardell/setting-up-an-elm-project-in-2022-lj4</link>
      <guid>https://dev.to/lindsaykwardell/setting-up-an-elm-project-in-2022-lj4</guid>
      <description>&lt;p&gt;If you haven't used Elm before, it can be a bit intimidating to get started. A pure functional programming language for building web applications, Elm provides a number of tools for writing Elm apps, including &lt;code&gt;elm reactor&lt;/code&gt; for fast recompiling of specific modules and &lt;code&gt;elm make&lt;/code&gt; for building JS assets. But this workflow can feel a bit lacking if you're coming from a Javascript ecosystem, where hot module reload (HMR), automatic bundling, and integration with CSS and other frontend technologies is common.&lt;/p&gt;

&lt;p&gt;Luckily, there are a number of options for setting up a successful Elm application today. Let's explore what's available for building an Elm application in 2022, including ways to get a better development environment, as well as the tooling surrounding Elm that makes working with the language as delightful as possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#elm-the-language"&gt;
  &lt;/a&gt;
  Elm (the language)
&lt;/h2&gt;

&lt;p&gt;You can install the Elm language (and its bundled tooling) &lt;a href="https://www.npmjs.com/package/elm"&gt;from npm&lt;/a&gt;. Installing Elm globally gives you access to a handful of useful tools:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-elm-repl-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;elm repl&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;This is the command line repl for Elm. You can use it to execute commands in Elm and see what the result would be.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-elm-init-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;elm init&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;This is the command to initialize Elm in a folder. Because Elm has its own ecoystem of tooling and libraries separate from Javascript, it also does not use npm for its package management, and as such does not rely on &lt;code&gt;package.json&lt;/code&gt;. If you want to add Elm to a project (or start a new project), you'll need to run this command. When you do, you'll see a message like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ elm init
Hello! Elm projects always start with an elm.json file. I can create them!

Now you may be wondering, what will be in this file? How do I add Elm files to
my project? How do I see it in the browser? How will my code grow? Do I need
more directories? What about tests? Etc.

Check out &amp;lt;https://elm-lang.org/0.19.1/init&amp;gt; for all the answers!

Knowing all that, would you like me to create an elm.json file now? [Y/n]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is an example of how Elm provides helpful information at every opportunity, as well! The link it provides takes you to documentation on how to structure and scaffold an Elm application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-elm-reactor-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;elm reactor&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Running &lt;code&gt;elm reactor&lt;/code&gt; opens an interactive page for navigating your Elm code and previewing it in the browser. Note that is does not render external Javascript, or any values set in your HTML files; it is only displaying what the output is for a given Elm file. Also, it does not support auto refresh, so you will have to manually refresh your browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sVaEopMT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lindsaykwardell.com/blog/elm-reactor.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sVaEopMT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lindsaykwardell.com/blog/elm-reactor.png" alt="Elm reactor, showing current files in the src folder, source directories, and dependencies" width="880" height="399"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-elm-install-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;elm install&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;As you may expect, this command installs an Elm dependency in your application. Sometimes you will need to install a dependency that is already a sub dependency, in which case Elm will inform you that it's going to move the dependency up in the chain so that you can import its modules directly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-elm-make-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;elm make&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;This command lets you build the output Javascript from your Elm code, so that you can import and initialize it in your application. If you are utilizing a tool like Webpack, Parcel, Rollup, or Vite, this is typically not something you'll need to do (more on bundlers later).&lt;/p&gt;

&lt;p&gt;There are other commands available as well. Feel free to run &lt;code&gt;elm --help&lt;/code&gt; to see all the available commands and options.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#editor"&gt;
  &lt;/a&gt;
  Editor
&lt;/h2&gt;

&lt;p&gt;There are a handful of plugins and extension for different editors, the majority of which can be found on an &lt;a href="https://github.com/elm/editor-plugins"&gt;officially updated list&lt;/a&gt; within the Elm organization on Github. My editor of choice is VS Code, and the &lt;a href="https://marketplace.visualstudio.com/items?itemName=Elmtooling.elm-ls-vscode"&gt;VS Code extension for Elm&lt;/a&gt; is an excellent tool for writing in Elm. It provides details on errors when saving, references to where a particular function or value is utilized, and access to function documentation on hover&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bd8yZ7ge--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lindsaykwardell.com/blog/elm-vs-code.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bd8yZ7ge--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lindsaykwardell.com/blog/elm-vs-code.png" alt="The Elm tooling extension in VS Code" width="880" height="485"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-formatting"&gt;
  &lt;/a&gt;
  Code Formatting
&lt;/h2&gt;

&lt;p&gt;Unlike Javascript, Elm has an &lt;a href="https://elm-lang.org/docs/style-guide"&gt;official Style Guide&lt;/a&gt; for how Elm code should be structured. In addition, some formatting is built into the language itself, such as requiring indents of four spaces. This removes a major point of contention within teams. In addition, the community has put together a wonderful tool called &lt;a href="https://github.com/avh4/elm-format"&gt;&lt;code&gt;elm-format&lt;/code&gt;&lt;/a&gt;. Similar to Prettier, this utility can be used to ensure that all Elm code matches the official style guide. Unlike Prettier, there is no custom configuration, meaning once again that your team can focus on writing code instead of what kind of quotes to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linting"&gt;
  &lt;/a&gt;
  Linting
&lt;/h2&gt;

&lt;p&gt;The Elm community has an unofficial linter (called &lt;a href="https://github.com/jfmengels/elm-review/tree/2.6.1"&gt;&lt;code&gt;elm-review&lt;/code&gt;&lt;/a&gt;), which can be used to check your code for potential bugs or mistakes, or highlight a better way to write Elm. Unlike &lt;code&gt;elm-format&lt;/code&gt; (and more similar to tools like ESLint), &lt;code&gt;elm-review&lt;/code&gt; does not come with any default rules to follow:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All the rules describing problematic code are written in Elm, and elm-review does not come with any built-in rules; instead users are encouraged to write rules themselves and publish them as Elm packages, for everyone to benefit. Search the package registry to find what's out there!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h2&gt;

&lt;p&gt;The de-facto standard for testing an Elm application is &lt;a href="https://github.com/elm-explorations/test"&gt;&lt;code&gt;elm-test&lt;/code&gt;&lt;/a&gt;. However, as noted in the README:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When people say ‚Äúelm-test‚Äù they usually refer to either:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This Elm package for writing tests.&lt;/li&gt;
&lt;li&gt;rtfeldman/node-test-runner ‚Äì a CLI tool (called elm-test) for running tests defined using this package in the terminal.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Elm package (available on the &lt;a href="https://package.elm-lang.org/packages/elm-explorations/test/latest"&gt;Elm package repository&lt;/a&gt;) contains the functions required to write tests, query HTML, and perform assertions. The syntax should be familiar if you've written unit or fuzz tests in other languages, with &lt;code&gt;describe&lt;/code&gt; blocks and individual &lt;code&gt;test&lt;/code&gt; functions being called.&lt;/p&gt;

&lt;p&gt;To actually run the tests, however, there are currently two options. The first, as noted above, is &lt;a href="https://github.com/rtfeldman/node-test-runner"&gt;&lt;code&gt;node-test-runner&lt;/code&gt;&lt;/a&gt;, which is available from npm at &lt;code&gt;elm-test&lt;/code&gt;. This utility will run the tests as defined in your Elm code, and return the results. There is a second option, &lt;a href="https://github.com/mpizenberg/elm-test-rs"&gt;&lt;code&gt;elm-test-rs&lt;/code&gt;&lt;/a&gt;, which is written in Rust instead of Node. It has a handful of features that &lt;code&gt;node-test-runner&lt;/code&gt; does not have, as well as some downsides (see the Github README for details), but in general both tools work very well for testing Elm code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#development-environment"&gt;
  &lt;/a&gt;
  Development Environment
&lt;/h2&gt;

&lt;p&gt;Now's the fun part - writing our app! Using only the above tools, you would be set to build an Elm application that is properly formatted, tested, and compiled to JS. However, that doesn't help you get it onto the page; you'l still have to create an HTML file, import your Elm code along with any other dependencies you may have, and test it in your "live" environment. Found an error? Time to recompile!&lt;/p&gt;

&lt;p&gt;Needless to say, this can get pretty tedious, not to mention that most Javascript developers today are used to more advanced tooling (such as auto refresh or hot module reload). What can we do in order to set up a better development environment for ourselves?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#elmlive"&gt;
  &lt;/a&gt;
  elm-live
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U88TU67T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/wking-io/elm-live/raw/master/elm-live-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U88TU67T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/wking-io/elm-live/raw/master/elm-live-logo.png" alt="elm-live, a flexible dev server for Elm." width="821" height="327"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First on our list is &lt;a href="https://github.com/wking-io/elm-live"&gt;elm-live&lt;/a&gt;. From their README, elm-live provides:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Hot reloading&lt;/li&gt;
&lt;li&gt;Local SSL&lt;/li&gt;
&lt;li&gt;No reload mode&lt;/li&gt;
&lt;li&gt;No server mode&lt;/li&gt;
&lt;li&gt;and more!&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;It's a pretty great tool for working with an Elm application, removing the tedious step of constantly rebuilding our application. However, there's still a couple drawbacks with using elm-live. First, it exists as a development environment for Elm, which means that changing our HTML, CSS, or Javascript assets will not trigger anything. Second, if you need any dependencies from npm, elm-live will not compile these for you. You'll still need some sort of bundler for the rest of your assets. elm-live is excellent for projects written primarily in Elm, or if you don't mind running two development environments side by side.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#webpackrollupetc"&gt;
  &lt;/a&gt;
  Webpack/Rollup/etc
&lt;/h3&gt;

&lt;p&gt;If you're a Javascript developer, you may have gotten accustomed with importing arbitrary files into your Javascript code. Want to bring in a &lt;code&gt;.vue&lt;/code&gt; file? Go for it! &lt;code&gt;.svelte&lt;/code&gt;? Sure, why not! Our favorite frameworks typically provide some sort of integration with bundlers so that we can import them directly, without having to compile them first to standard Javascript. Can we do that with Elm?&lt;/p&gt;

&lt;p&gt;It turns out, we can! Elm has pretty good support across compilers/bundlers, so that you can import an Elm file directly into your core JS application - no compile step required! Keep in mind that you will still need to initialize the Elm application in order for that code to do anything, but otherwise you are able to treat it like any other compile-to-JS asset.&lt;/p&gt;

&lt;p&gt;Here's a list of common compiler options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Webpack: &lt;a href="https://github.com/elm-community/elm-webpack-loader"&gt;&lt;code&gt;elm-webpack-loader&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Rollup: &lt;a href="https://github.com/ulisses-alves/rollup-plugin-elm#readme"&gt;&lt;code&gt;rollup-plugin-elm&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Vite: &lt;a href="https://github.com/hmsk/vite-plugin-elm"&gt;&lt;code&gt;vite-plugin-elm&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#a-note-on-parcel"&gt;
  &lt;/a&gt;
  A note on Parcel
&lt;/h3&gt;

&lt;p&gt;Unlike other build tools, Parcel provides &lt;a href="https://parceljs.org/languages/elm"&gt;built-in support for Elm&lt;/a&gt; by default, no plugins required. However, please note that there are some issues when using Parcel 2 with Elm, which are a frequent point of discussion on the Elm Slack channel.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-elmtooling-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;elm-tooling&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Great! Now we're able to import our Elm code directly into our existing applications, making the integration that much easier. However, there's still one last thing we can do to improve our environment. One problem we may run into is that the tooling described above needs to be installed locally in order to utilize it, which can lead to more work onboarding developers or getting started with a project.&lt;/p&gt;

&lt;p&gt;There is a tool called &lt;a href="https://elm-tooling.github.io/elm-tooling-cli/"&gt;&lt;code&gt;elm-tooling&lt;/code&gt;&lt;/a&gt; which does all the hard work for us. Rather than having to install the Elm language, &lt;code&gt;elm-format&lt;/code&gt;, and &lt;code&gt;elm-test&lt;/code&gt; (or &lt;code&gt;elm-test-rs&lt;/code&gt;) individually, we can run &lt;code&gt;npx elm-tooling install&lt;/code&gt;, and all of the core tooling can be installed at once, significantly faster than if they were installed individually. This can even be added as a postinstall command in your &lt;code&gt;package.json&lt;/code&gt;, ensuring that Elm and its related tools are available with a single install command. This is extremely useful when setting up your local environment, or during CI build steps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frameworks-and-templates"&gt;
  &lt;/a&gt;
  Frameworks and Templates
&lt;/h2&gt;

&lt;p&gt;All this tooling is great, and an excellent way to get writing Elm code and integrating it into your application. But sometimes it's nice to start from a higher level abstraction, much like React developers often start with Create React App, or Vue developers use the Vue CLI. While there are no official templates or frameworks beyond what we've already talked about, there are a few interesting projects that are worth taking a look at.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#elmspa"&gt;
  &lt;/a&gt;
  elm-spa
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.elm-spa.dev/"&gt;elm-spa&lt;/a&gt; is a great way to start working on a single-page Elm application. Browser navigation and handling multiple pages is something that is a bit more difficult in Elm than in pure Javascript, and as such requires more boilerplate code in order to make it work. elm-spa handles all of the complexities of building an SPA for you, while providing a number of great features for building a modern web application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BPLRIOUt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lindsaykwardell.com/blog/elm-spa-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BPLRIOUt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lindsaykwardell.com/blog/elm-spa-image.png" alt="Build reliable applications with Elm. With elm-spa, you can create production-ready application with one command: npx elm-spa new. No need to configure webpack, gulp, or any other NPM dev tools. This zero-configuration CLI comes with a live-reloading dev server, production-ready build commands, and even a few scaffolding commands for new and existing applications." width="880" height="424"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#elmpages"&gt;
  &lt;/a&gt;
  elm-pages
&lt;/h3&gt;

&lt;p&gt;Where elm-spa is targeting single-page applications, &lt;a href="https://elm-pages.com/"&gt;elm-pages&lt;/a&gt; is built for generating static sites. Utilizing Elm's type system, elm-pages's goal is to make handling external data for a static site easy. Conceptually, it's similar to what Gatsby or Gridsome do (provide a typesafe interface to access multiple types of data), but utilizing Elm's strengths rather than adding an additional type system such as GraphQL.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jfAbX3ra--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lindsaykwardell.com/blog/elm-pages-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jfAbX3ra--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lindsaykwardell.com/blog/elm-pages-image.png" alt="Pull in typed Elm data to your pages. Whether your data is coming from markdown files, APIs, a CMS, or all of the above, elm-pages lets you pull in just the data you need for a page. No loading spinners, no Msg or update logic, just define your data and use it in your view." width="880" height="238"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-viteelmtemplate-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;vite-elm-template&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;This was a template I created to scratch my own itch. As a Vue developer, I love working with Vite, and really wanted a base template for Vite that I could use to build Elm applications. &lt;a href="https://github.com/lindsaykwardell/vite-elm-template"&gt;&lt;code&gt;vite-elm-template&lt;/code&gt;&lt;/a&gt; is a basic Vite template intended to get you started writing in Elm without having to spend time configuring everything yourself. Unlike elm-pages or elm-spa, it's not a framework of any sort. If you want to bring in single-page application features, or other functionalities, you will have to build those in yourself. That said, it's perfect for getting started with a basic environment.&lt;/p&gt;

&lt;p&gt;As of this writing it includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hot Module Reload of all code in the app (including Elm)&lt;/li&gt;
&lt;li&gt;Tooling installation via &lt;code&gt;elm-tooling&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Includes Elm, &lt;code&gt;elm-format&lt;/code&gt;, &lt;code&gt;elm-json&lt;/code&gt;, and &lt;code&gt;elm-test-rs&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Basic unit test examples&lt;/li&gt;
&lt;li&gt;Github Actions CI for running tests&lt;/li&gt;
&lt;li&gt;Recommends the Elm VS Code extension&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If Vite is something you enjoy working with, I hope you'll check it out! There is also a link in the README to set up a workspace using Gitpod if you want to try things out in a sandbox environment first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope that helps you get started building an Elm application! Elm is an amazing language to learn and work with, and the tooling that exists to support it today makes working with it as delightful an experience as the language itself provides. Above all, I hope you enjoy learning and working with Elm in 2022!&lt;/p&gt;

&lt;p&gt;If you're new to Elm, and would like to learn more about it, check out the &lt;a href="https://guide.elm-lang.org/"&gt;official Elm Guide&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>elm</category>
      <category>spa</category>
      <category>vite</category>
    </item>
    <item>
      <title>There's more than just code in the developer</title>
      <author>Antonio Hernandez</author>
      <pubDate>Mon, 20 Dec 2021 00:49:39 +0000</pubDate>
      <link>https://dev.to/antoniohr/theres-more-than-just-code-in-the-developer-45ed</link>
      <guid>https://dev.to/antoniohr/theres-more-than-just-code-in-the-developer-45ed</guid>
      <description>&lt;p&gt;Hello, I am Antonio, I am 21 years old I was born, grew up and still live in Venezuela, my English is not perfect so I am sorry if there is something written in a bad way (google traslate is helping me :D).&lt;/p&gt;

&lt;p&gt;For my first post I honestly did not want to write something directly technical, first because I am still learning and I do not think I have much to teach for now, however there is something that if I feel that I can contribute here, (I hope I do not skip any rules of the community for writing this post).&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learning-to-program-is-not-difficult-the-difficult-thing-is-to-program-your-mind-to-develop"&gt;
  &lt;/a&gt;
  Learning to program is not difficult, the difficult thing is to program your mind to develop.
&lt;/h2&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;Well, this conclusion is mine, it is not an absolute truth, much less do you have to agree.&lt;/p&gt;

&lt;p&gt;Behind all code there is a story and I do not mean the code but the person who wrote it, it was a person or groups of people from different places, different cultures of different thoughts, of a different life ... but the Chance of fate I prepare each one in their own way to achieve a mission and help others.&lt;/p&gt;

&lt;p&gt;It was not easy for anyone to get that I am sure, in some cases you have to learn another language and learn with few resources and sometimes you will even have to change country to look for an opportunity... However, something that you do not know very well what it is makes you continue with this and this path is beautiful, it is full of uncertainty, ignorance and sometimes disappointment but one thing is certain is that if you stay immobile you will never have a chance at anything.&lt;/p&gt;

&lt;p&gt;I really feel that programming is the most beautiful career, I met her recently and fell in love with her, without understanding her I knew what she wanted, so I am studying every day to learn and at some point, understand her.&lt;/p&gt;

&lt;p&gt;I repeat myself, programming is not difficult, the difficult thing is to understand me, understand what my difficulties are, understand what my shortcomings are, what are my learning methods and above all what is my way of living, because at the end of the day, behind all code there are people, like you and me.&lt;/p&gt;

&lt;p&gt;pd: my next post if it will be something technical programming, I love this website, thanks to all who are here.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>productivity</category>
      <category>programming</category>
      <category>life</category>
    </item>
    <item>
      <title>What is an API?</title>
      <author>Natalie Taktachev</author>
      <pubDate>Sun, 19 Dec 2021 23:43:18 +0000</pubDate>
      <link>https://dev.to/stuxnat/what-is-an-api-1con</link>
      <guid>https://dev.to/stuxnat/what-is-an-api-1con</guid>
      <description>&lt;p&gt;A while back, I wrote a post about creating a Rails API. But what IS an API?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does API mean?&lt;/strong&gt;&lt;br&gt;
API stands for "Application Programming Interface". "API" is often used and heard by many users interacting with computers (even far from programming). API is essentially a tool that allows programs to communicate with each other.  &lt;/p&gt;

&lt;p&gt;Programming interface includes functions, classes, methods, and structures that help one application interact with another. The API contains some "bridges" that allow program A to access data from program B or to some of its capabilities. Thus, programmers can expand the functionality of their product and associate it with other developments.&lt;/p&gt;

&lt;p&gt;The API can only work with a permission of the creators of program A and with the observance of all security measures so that developers wishing to use the API could not get access to confidential information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The main principle of the API and why is it called an interface:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In simple terms, an interface is a "layer" between application A and application B. It contains processes that allow two programs to exchange information and perform functions related to both sides, hiding the "internal structure" of programs. &lt;/p&gt;

&lt;p&gt;This approach allows one to establish interaction between several utilities without thinking about how they work, what program logic drives them and how the transmitted data is processed. Interfaces simplify work for both common users and programmers. The former do not have to think about what it is behind the familiar functions in their gadgets, and developers do not need to study the code of other programmers in order to connect someone else's product to their own.&lt;/p&gt;

&lt;p&gt;This is called encapsulation. By hiding part of the functions for the sake of simplifying the work in general and minimizing areas of the software where one of the developers could make a mistake.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>üö® You gave us feedback and we listened¬†üö®</title>
      <author>Wundergraph üöÄ</author>
      <pubDate>Sun, 19 Dec 2021 23:15:48 +0000</pubDate>
      <link>https://dev.to/wundergraph/you-gave-us-feedback-and-we-listened-2jgk</link>
      <guid>https://dev.to/wundergraph/you-gave-us-feedback-and-we-listened-2jgk</guid>
      <description>&lt;p&gt;Hello Wunderfans! If you enjoy our content, never miss a blog post or a feature update by subscribing to our newsletter or even better, joining our Discord! Hope you enjoy our latest features and happy coding!&lt;/p&gt;

&lt;p&gt;Based on some awesome feedback from the community, we've got two new features, Token Based Authentication &amp;amp; Status Code Unions.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#new-features"&gt;
  &lt;/a&gt;
  New Features
&lt;/h1&gt;

&lt;p&gt;Status Code Unions help you to map REST API response codes to GraphQL Unions: &lt;a href="https://wundergraph.com/docs/reference/wundergraph_config_ts/configure_openapi_rest_datasource#status-code-unions-mapping-http-status-codes-to-graphql-unions"&gt;Documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Token based Authentication lets you use auth tokens obtained from an external OIDC server with WunderGraph, allowing you to use code, device and other auth flows with WG:&lt;br&gt;
&lt;a href="https://wundergraph.com/docs/reference/wundergraph_config_ts/configure_authentication#token-based-authentication"&gt;Documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's also a video going through the use case of using Token Based Auth with Cookie Based Auth together:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/cq570pcssMw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#wundergraph-open%C2%A0source"&gt;
  &lt;/a&gt;
  Wundergraph ü§ù Open¬†Source
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://8bxwlo3ot55.typeform.com/to/KJ96Egx6?format=json&amp;amp;referrer=https%3A%2F%2Fmedium.com%2F%40wundergraph%2Finstant-realtime-apis-using-postgresql-mysql-sqlite-sqlserver-and-planetscale-98f380aaff41&amp;amp;typeform-embed-id=35188084214916737&amp;amp;typeform-embed=embed-widget&amp;amp;typeform-medium-version=next&amp;amp;typeform-medium=embed-sdk&amp;amp;typeform-source=wundergraph.com"&gt;Joing our waiting list!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>javascript</category>
      <category>web3</category>
      <category>programming</category>
    </item>
    <item>
      <title>We made a stick man using only math (part1)</title>
      <author>shAtud</author>
      <pubDate>Sun, 19 Dec 2021 22:45:18 +0000</pubDate>
      <link>https://dev.to/shatud/we-made-a-stock-man-using-only-math-part1-1b2p</link>
      <guid>https://dev.to/shatud/we-made-a-stock-man-using-only-math-part1-1b2p</guid>
      <description>&lt;p&gt;How to code a stick man using only math :basic arithmetic and trigonometry &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Day 33 of #100daysofcode: Revisiting Flask</title>
      <author>Ryan Whelchel</author>
      <pubDate>Sun, 19 Dec 2021 22:41:03 +0000</pubDate>
      <link>https://dev.to/rydwhelchel/day-33-of-100daysofcode-revisiting-flask-h72</link>
      <guid>https://dev.to/rydwhelchel/day-33-of-100daysofcode-revisiting-flask-h72</guid>
      <description>&lt;p&gt;Hey again everybody!&lt;/p&gt;

&lt;p&gt;With so much of my focus lately being on React and Redux, I wanted to revisit Flask and get a better idea of what I &lt;em&gt;should&lt;/em&gt; be doing with Flask when I am using it in tandem with React.&lt;/p&gt;

&lt;p&gt;If you don't know, Flask is a web framework from which you can serve data to specific endpoints. That data can be HTML, which lets you host webpages using nothing but Flask and HTML, but it can also be JSON data which allows you to use your Flask server as an API.&lt;/p&gt;

&lt;p&gt;My previous app used some Flask endpoints and some React-router endpoints as webpages. There were also some Flask endpoints which functioned as an API endpoint... but sometimes redirected you. &lt;/p&gt;

&lt;p&gt;I'm really not proud of how the endpoints were structured in my previous app, so I'm setting out to make sure that my routing is as clean as possible and is as close to best practices as it can be.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;LeetCode&lt;/li&gt;
&lt;li&gt;Bit of FreeCodeCamp&lt;/li&gt;
&lt;li&gt;Set up the Flask backend, set up React routing, did some research on some best practices regarding using Flask with React routing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#upcoming"&gt;
  &lt;/a&gt;
  Upcoming
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Continued Leetcode practice, FreeCodeCamp progress and Advent of Code&lt;/li&gt;
&lt;li&gt;Continue working on Study-aid-app

&lt;ul&gt;
&lt;li&gt;Need to iron out how I want to handle user sessions. Considering using Google auth.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Might return to a little Functional Programming discussion&lt;/li&gt;
&lt;li&gt;Later in the challenge: &lt;strong&gt;Possible Android app version of Study Aid app&lt;/strong&gt;, AWS Deployment, AWS Certification, and Using Docker!?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/"&gt;JS Course - FreeCodeCamp&lt;/a&gt;&lt;br&gt;
&lt;a href="https://redux.js.org/tutorials/essentials/part-1-overview-concepts"&gt;Redux Essentials&lt;/a&gt;&lt;br&gt;
&lt;a href="https://redux.js.org/tutorials/fundamentals/part-1-overview"&gt;Redux Fundamentals&lt;/a&gt;&lt;br&gt;
&lt;a href="https://redux.js.org/faq"&gt;Redux FAQ&lt;/a&gt;&lt;br&gt;
&lt;a href="https://adventofcode.com/"&gt;Advent of Code&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>react</category>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Google Auth/Signin in React Native without Firebase.</title>
      <author>Suyash Vashishtha</author>
      <pubDate>Sun, 19 Dec 2021 22:04:19 +0000</pubDate>
      <link>https://dev.to/suyashvash/google-authsignin-in-react-native-without-firebase-43n</link>
      <guid>https://dev.to/suyashvash/google-authsignin-in-react-native-without-firebase-43n</guid>
      <description>&lt;p&gt;Google auth is one of the most commonly used Authentication methods in Mobile and web apps. Well, it is also a tricky one as compared to normal user email and password auth.&lt;/p&gt;

&lt;p&gt;In this post, we will learn how to integrate Fully working Google auth with React Native (Without Firebase).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-creating-you-react-native-app"&gt;
  &lt;/a&gt;
  1. Creating you React Native app
&lt;/h2&gt;

&lt;p&gt;Let's start by creating our react-native project.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx react-native init myapp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now install the &lt;code&gt;@react-native-google-signin/google-signin&lt;/code&gt; module using &lt;code&gt;npm i @react-native-google-signin/google-signin&lt;/code&gt; in your project folder.&lt;/p&gt;

&lt;p&gt;``&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-setting-up-android-environment"&gt;
  &lt;/a&gt;
  2. Setting up Android environment
&lt;/h2&gt;

&lt;p&gt;After installing the required module, let's set up some android files to make it work properly.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Update &lt;code&gt;android/build.gradle&lt;/code&gt; with the following configuration:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Add &lt;code&gt;classpath 'com.google.gms:google-services:4.3.10'&lt;/code&gt; into your &lt;code&gt;dependencies&lt;/code&gt; in &lt;code&gt;buildscript&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Update &lt;code&gt;android/app/build.gradle&lt;/code&gt; with the following configuration:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Add &lt;code&gt;apply plugin: 'com.android.application'&lt;/code&gt; at the top of your build gradle (android/app).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add&lt;br&gt;
&lt;code&gt;implementation 'com.google.android.gms:play-services-auth:20.0.0'&lt;br&gt;
implementation "androidx.browser:browser:1.2.0"&lt;/code&gt; in dependencies in the same.&lt;br&gt;
`&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-importing-module-in-our-app"&gt;
  &lt;/a&gt;
  3. Importing module in our App
&lt;/h2&gt;

&lt;p&gt;Now import the installed module like this &lt;/p&gt;

&lt;pre&gt;
import { GoogleSignin, statusCodes } from '@react-native-google-signin/google-signin';
&lt;/pre&gt;

&lt;p&gt;then after importing the module let's set up a configuration code for our sign-up.&lt;/p&gt;

&lt;pre&gt;
React.useEffect(() =&amp;gt; {
    GoogleSignin.configure({
      webClientId: "Your-web-client-id", 
      offlineAccess: true
    });
  }, [])
&lt;/pre&gt;

&lt;p&gt;Let's not worry about the client Id, for now, we will generate it later on in this tutorial.&lt;/p&gt;

&lt;p&gt;Now after configuration is done, it's time to make our sign-up function using the Google Auth module we just imported.&lt;/p&gt;

&lt;pre&gt;
const GoogleSingUp = async () =&amp;gt; {
    try {
      await GoogleSignin.hasPlayServices();
      await GoogleSignin.signIn().then(result =&amp;gt; { console.log(result) });
    } catch (error) {
      if (error.code === statusCodes.SIGN_IN_CANCELLED) {
        // user cancelled the login flow
        alert('User cancelled the login flow !');
      } else if (error.code === statusCodes.IN_PROGRESS) {
        alert('Signin in progress');
        // operation (f.e. sign in) is in progress already
      } else if (error.code === statusCodes.PLAY_SERVICES_NOT_AVAILABLE) {
        alert('Google play services not available or outdated !');
        // play services not available or outdated
      } else {
        console.log(error)
      }
    }
  };

&lt;/pre&gt;

&lt;p&gt;Now Connect this function to your button with &lt;code&gt;onPress={GoogleSingUp}&lt;/code&gt; prop &lt;br&gt;
``&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-generating-web-client-id-and-sha1-key-for-sign-up"&gt;
  &lt;/a&gt;
  4. Generating Web client ID and SHA1 key for Sign up
&lt;/h2&gt;

&lt;p&gt;Now, this is the main part where most of the developer gets stuck or get a pretty common and irritating error -&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Error: Status{statusCode=DEVELOPER_ERROR}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But what is causing this error?&lt;/strong&gt;. It is quite simple, the &lt;strong&gt;SHA1 key of Debug Keystore&lt;/strong&gt;. Yeah, according to google, you have to put your Release Keystore key in Google Console. But most blogs and articles forget to mention this point which is very important no matter which module you are using.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-generate-release-keystore-and-its-sha"&gt;
  &lt;/a&gt;
  1) Generate Release keystore and it's SHA
&lt;/h3&gt;

&lt;p&gt;Now assuming you have already installed JDK in your system, let's move to generating the Release key. In your android/app run this command in cmd -&lt;/p&gt;

&lt;pre&gt; keytool -genkey -v -keystore my_release_key.keystore -alias my_key_alias -keyalg RSA -keysize 2048 -validity 10000 &lt;/pre&gt;

&lt;p&gt;It will ask for some detail so fill them in carefully and remember the password you entered in it.&lt;/p&gt;

&lt;p&gt;This command will generate a release key in your &lt;code&gt;android/app&lt;/code&gt; directory.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Now in your &lt;code&gt;android/gradle.properties&lt;/code&gt; add &lt;/p&gt;

&lt;pre&gt;
MYAPP_UPLOAD_STORE_FILE=my_release_key.keystore
MYAPP_UPLOAD_KEY_ALIAS= my_key_alias
MYAPP_UPLOAD_STORE_PASSWORD=yourPassword
MYAPP_UPLOAD_KEY_PASSWORD=yourPassword
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And this in your &lt;code&gt;android/app/build.gradle&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;
signingConfigs {
    debug {
        // storeFile file('debug.keystore')
        // storePassword 'android'
        // keyAlias 'androiddebugkey'
        // keyPassword 'android'

         storeFile file(MYAPP_UPLOAD_STORE_FILE)
         storePassword MYAPP_UPLOAD_STORE_PASSWORD
         keyAlias MYAPP_UPLOAD_KEY_ALIAS
         keyPassword MYAPP_UPLOAD_KEY_PASSWORD
    }

    release {
        if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {
            storeFile file(MYAPP_UPLOAD_STORE_FILE)
            storePassword MYAPP_UPLOAD_STORE_PASSWORD
            keyAlias MYAPP_UPLOAD_KEY_ALIAS
            keyPassword MYAPP_UPLOAD_KEY_PASSWORD
        }
    }
}
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Now this will generate release SHA as your debug keystore SHA, so you don't have to worry about that error&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now generate release SHA1 using this command in &lt;code&gt;android/app&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;
keytool -list -v -keystore app/my_release_key.keystore -alias my_key_alias
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Copy that SHA1 key and paste it somewhere for the next step.&lt;/strong&gt;&lt;br&gt;
``&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-inserting-sha1-key-in-google-developer-console"&gt;
  &lt;/a&gt;
  2) Inserting SHA1 key in Google Developer Console.
&lt;/h3&gt;

&lt;p&gt;Now, after doing that much hard work, let's do this final part. We have to paste this key into the Google Developer console to tell google about our app and its authentication.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;After signing up in the Google Developer console or Google cloud platform, head over to the Credential tab. There you will find a button saying "Create Credential", choose OAth Client ID.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mDcDeoWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5ixlwwb19ycyfzc9073.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mDcDeoWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5ixlwwb19ycyfzc9073.JPG" alt="Google console screenshot for oath id creation " width="880" height="409"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Then choose Application type- Android and enter the package name and then the SHA1 key you copied in the previous step. Hit create and your Android API is ready.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YufkZnke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94jo6jkimbscgqt9hj3b.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YufkZnke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94jo6jkimbscgqt9hj3b.JPG" alt="Android oath creation with SHA1 key" width="850" height="511"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now Similarly create an OathID for Web client instead of Android and leave all other fields as it is.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--84snnFyb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czmcesm9qw4qftqlo0mi.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--84snnFyb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czmcesm9qw4qftqlo0mi.JPG" alt="Web client ID creation" width="854" height="353"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now copy the &lt;strong&gt;Web client ID&lt;/strong&gt; from the Oath you just created.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8k2V3V6L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/goz3jc6r7gygl0ar5035.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8k2V3V6L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/goz3jc6r7gygl0ar5035.JPG" alt="Copt Web client id" width="520" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it we got the Web client ID we needed for Step 3 above.&lt;br&gt;
&lt;code&gt;&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-finalizing"&gt;
  &lt;/a&gt;
  5. Finalizing
&lt;/h2&gt;

&lt;p&gt;Now paste this Web Client ID into your Google config object in Step 3 above and run the app.&lt;/p&gt;

&lt;p&gt;After pressing the Sign-in Button, A pop-up should appear. Select the account you want to login with and after selecting the account it will return an object containing IdToken and some other stuff.&lt;/p&gt;

&lt;p&gt;If you did everything exactly the same and didn't mess up anywhere, we should see some results like this&lt;/p&gt;

&lt;pre&gt;
{
    "idToken": "Your-google-auth-token",
    "scopes": [
        "https://www.googleapis.com/auth/userinfo.email",
        "https://www.googleapis.com/auth/userinfo.profile"
    ],
    "serverAuthCode": "your-server-auth-code",
    "user": {
        "email": "youremail@gmail.com",
        "familyName": "your-last-name",
        "givenName": "your-first-name",
        "id": "some-id",
        "name": "your-full-name",
        "photo": "a-url-for-profile-photo"
    }
}

&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;And with that, we successfully integrated the Google auth into our React Native app.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Please leave a comment if you liked the post or just want to add something valuable.&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>googlecloud</category>
      <category>react</category>
      <category>appdevelopment</category>
    </item>
    <item>
      <title>Give Us Some JavaScript Challenges!!!</title>
      <author>Akram Bouzoualegh</author>
      <pubDate>Sun, 19 Dec 2021 21:52:26 +0000</pubDate>
      <link>https://dev.to/akrambzgh/give-us-some-javascript-challenges-2pi2</link>
      <guid>https://dev.to/akrambzgh/give-us-some-javascript-challenges-2pi2</guid>
      <description>&lt;p&gt;I Want The Challenges Be For Beginners And Professional. Thank For You!!!&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
