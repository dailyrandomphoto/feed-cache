<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Como funcionam as Tries</title>
      <author>Pedro Victor</author>
      <pubDate>Tue, 21 Dec 2021 16:38:48 +0000</pubDate>
      <link>https://dev.to/pedrovictoroc/como-funcionam-as-tries-5f55</link>
      <guid>https://dev.to/pedrovictoroc/como-funcionam-as-tries-5f55</guid>
      <description>&lt;h2&gt;
  &lt;a href="#sum%C3%A1rio"&gt;
  &lt;/a&gt;
  Sumário
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="#tldr"&gt;TL;DR&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#problema-inicial"&gt;O problema inicial&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#um-m%C3%A9todo-geral-para-comparar-strings"&gt;Como comparamos strings&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#uma-ideia-alternativa"&gt;Uma ideia alternativa&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#um-caso-de-uso-mais-complexo"&gt;Idealizando um "autocomplete"&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#algumas-otimiza%C3%A7%C3%B5es"&gt;Algumas otimizações&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#conclus%C3%A3o"&gt;Conclusão&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;Tries são estruturas de dados que assumem a forma de árvore de busca, podendo um nó ter diversos filhos, mas nunca mais de um pai. A chave de cada nó geralmente é composta por um único caractere, o caminho a partir da raiz até um determinado nó forma uma palavra, ou parte de uma, inserida na Trie.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problema-inicial"&gt;
  &lt;/a&gt;
  Problema inicial
&lt;/h2&gt;

&lt;p&gt;Imagine que estamos desenvolvendo um jogo cuja meta do jogador é escrever todas as palavras que conhece, ganha quem souber mais palavras! Uma forma de contabilizarmos as palavras inseridas pode ser: a cada inserção verificamos se a palavra já foi inserida em uma lista, caso não tenha sido então adicionamos.&lt;br&gt;
De fato essa solução funciona, mas será que essa é realmente a mais interessante?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#um-m%C3%A9todo-geral-para-comparar-strings"&gt;
  &lt;/a&gt;
  Um método geral para comparar strings
&lt;/h2&gt;

&lt;p&gt;Antes de tudo, vamos entender como geralmente comparamos strings. Para isso, utilizando como linguagem o JavaScript e &lt;a href="https://javascript.info/comparison#string-comparison"&gt;este link como fonte&lt;/a&gt; temos uma forma geral de comparar strings:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Compare o primeiro caractere de cada string&lt;/li&gt;
&lt;li&gt;Caso o valor de &lt;a href="https://unicode.org/charts/"&gt;Unicode&lt;/a&gt; da primeira string seja maior ou menos que o da segunda, sabemos que são strings diferentes e terminamos&lt;/li&gt;
&lt;li&gt;Caso sejam iguais, continue com o segundo caractere&lt;/li&gt;
&lt;li&gt;Efetue a mesma etapa incrementando o índice do caractere analisado até finalizar a string&lt;/li&gt;
&lt;li&gt;Caso cheguemos ao final da string e seus caracteres sejam iguais, sabemos com certeza que ambas as cadeias de caracteres são iguais&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#uma-ideia-alternativa"&gt;
  &lt;/a&gt;
  Uma ideia alternativa
&lt;/h2&gt;

&lt;p&gt;A essa altura entendemos então que ao tentar adicionar uma palavra na lista que comentamos anteriormente não iremos apenas comparar ela N vezes, com N sendo a quantidade de palavras inseridas anteriormente na lista, mas por baixo dos panos também iremos comparar letras, palavra por palavra, de todos os elementos da lista.&lt;/p&gt;

&lt;p&gt;Temos então uma ideia! E se montarmos um conjunto com as palavras que começam com a letra &lt;strong&gt;"C"&lt;/strong&gt;? Nesse caso, quando quisermos adicionar a palavra &lt;strong&gt;"Car"&lt;/strong&gt; apenas temos que comparar com as palavras dentro deste conjunto, reduzindo as comparações com palavras que começam com outras letras. Podemos aplicar o mesmo raciocínio e, dessa vez, construir o conjunto das palavras que começa com &lt;strong&gt;"Ca"&lt;/strong&gt;, e assim caso este esteja vazio sabemos que a palavra &lt;strong&gt;"Car"&lt;/strong&gt; não foi inserida anteriormente e, por tanto, basta adicionar!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_5qA1pZW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09k6cgwf6m20syjjekqj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_5qA1pZW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09k6cgwf6m20syjjekqj.png" alt="Uma árvore com raiz a letra C, filho esquerdo com chave a letra A, que possui filho com a letra R como chave, todos com fundo verde e letra branca, representando a palavra inserida. A raiz possui filho direito com chave O e dois filhos, com chave M e R respectivamente, suas cores são fundo branco e letra preta." width="377" height="305"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note que o conjunto anterior continha então as palavras "Com" e "Cor", agora, inserimos "Car".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#um-caso-de-uso-mais-complexo"&gt;
  &lt;/a&gt;
  Um caso de uso mais complexo
&lt;/h2&gt;

&lt;p&gt;Imagine que um programador esteja digitando em seu editor de texto e você deseja fornecer uma opção de "autocomplete" que mostra as palavras-chave que o usuário pode estar querendo digitar. Nesse caso, temos &lt;strong&gt;C&lt;/strong&gt;, um conjunto de palavras-chave da linguagem, &lt;strong&gt;S&lt;/strong&gt; um "armazém" de Tries que contém essas palavras-chave e &lt;strong&gt;W&lt;/strong&gt;, a palavra que o programador começou a digitar. Podemos, portanto, selecionar em &lt;strong&gt;S&lt;/strong&gt; (nosso "armazém") a Trie cuja raiz tem chave igual à primeira letra de &lt;strong&gt;W&lt;/strong&gt; (palavra que o programador digitou), chamaremos esta de &lt;strong&gt;T&lt;/strong&gt; (entenda apenas como sendo a Trie que usaremos), e então percorremos a cada letra de &lt;strong&gt;W&lt;/strong&gt; um nó em &lt;strong&gt;T&lt;/strong&gt; e, ao fim de &lt;strong&gt;W&lt;/strong&gt;, percorremos essa sub-árvore  com raiz na última letra da palavra digitada e mostramos todas as palavras que podem ser formadas a partir dela!&lt;/p&gt;

&lt;p&gt;Parece complicado né? Mas na verdade não é! Entenda que nosso armazém é na verdade a raiz de uma Trie! Estranho né? Mas apenas pense que seria o equivalente de termos como chave nada mais nada menos que a string vazia, afinal, ela é prefixo de toda palavra!&lt;/p&gt;

&lt;p&gt;Sobre o restante, nada mais é do que percorrer uma árvore a partir de um certo nó, o que podemos facilmente fazer com um pouquinho de conhecimento sobre a estrutura de dados árvore!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--02jGMCKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ills9uy1q7no76emo143.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--02jGMCKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ills9uy1q7no76emo143.png" alt='Uma trie com nó inicial "L", à esquerda temos um caminho único que constrói a palavra "List", à direita temos dois caminhos que formam "Length" e "Let"' width="400" height="559"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nesse exemplo, suponha que o programador digitou apenas "L", dessa forma podemos percorrer recursivamente a Trie e obter para o nosso "autocomplete" as palavras-chave "Let", "List", "Length". Suponha agora que a entrada seja "Le", nesse caso teremos como retorno para "autocomplete" as palavras-chave "Let" e "Length". Com esse exemplo fica fácil saber como implementar, né?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#algumas-otimiza%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Algumas otimizações
&lt;/h2&gt;

&lt;p&gt;Suponha que no exemplo da imagem anterior tínhamos a palavra "Como", ao invés de "Com", dessa forma, naturalmente, poderíamos ter nossa Trie se adicionássemos um novo nó com a letra "o" como chave, correto? Sim!&lt;/p&gt;

&lt;p&gt;Mas será que isso realmente é necessário? Algumas implementações utilizam uma breve otimização no quesito memória, como o nó de chave "m" não tem mais de um filho, poderíamos concatenar ambas as chaves e ter um nó de chave "mo". Isso traz alguma complexidade para a implementação, entretanto, representa um nó a menos na memória. &lt;/p&gt;

&lt;p&gt;Tries podem ser implementadas de diversas formas, com diversos nomes, como: Árvore Prefixo, Árvore Sufixo e Árvore Patricia, cada um com seus detalhes de implementação e otimizações, é aconselhável ler o que cada uma tem a oferecer antes de implementar!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclusão
&lt;/h2&gt;

&lt;p&gt;Com isso vemos uma nova forma de comparar strings, sem precisarmos percorrer repetidamente uma lista inteira, ou utilizar "índices únicos" em bancos de dados. Obviamente temos casos específicos para seu uso, o intuito deste artigo é apontar para uma nova abordagem, bem como uma nova estrutura de dados, caso algo não tenha ficado claro ou notou algum erro, não deixe de avisar!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>datastructures</category>
      <category>trie</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Towards Perfecting Code Organization</title>
      <author>Michael Mangialardi</author>
      <pubDate>Tue, 21 Dec 2021 16:28:23 +0000</pubDate>
      <link>https://dev.to/michaelmangial1/towards-perfecting-code-organization-m8e</link>
      <guid>https://dev.to/michaelmangial1/towards-perfecting-code-organization-m8e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#environment-and-wellbeing"&gt;
  &lt;/a&gt;
  Environment and Well-Being
&lt;/h2&gt;

&lt;p&gt;Your environment impacts your well-being.&lt;/p&gt;

&lt;p&gt;If you've ever gathered motivation to clean, organize, and decorate your workspace, opened your laptop with a fresh cup of hot coffee, and then carried on with your work for the day, you'll know that this is a proven fact.&lt;/p&gt;

&lt;p&gt;Your environment impacts your well-being.&lt;/p&gt;

&lt;p&gt;Your coding environment is no exception.&lt;/p&gt;

&lt;p&gt;Just like a physical workspace, if a coding workspace is routinely kept organized and neat, it will have a positive impact on your well-being.&lt;/p&gt;

&lt;p&gt;So, how can we organize our coding workspaces?&lt;/p&gt;

&lt;p&gt;Again, just like with a physical workspace, organization is probably the most significant factor.&lt;/p&gt;

&lt;p&gt;A physical workspace may not look neat and tidy, but if things are organized, and a clear pattern for staying organized, then a sense of being overwhelmed is avoided and a productive environment is maintained.&lt;/p&gt;

&lt;p&gt;In a codebase, there may be a variety of different patterns of organization. However, the most important thing is to have it organized via a consistent pattern.&lt;/p&gt;

&lt;p&gt;It's simple math. 1% is better than 0%.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;An organized but less-than-ideal workspace is better than an unorganized and definitely-less-than-ideal workspace.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If you take away nothing else from this article, at least take away this:&lt;/em&gt; If you want to improve your developer experience, organize your workspace. It doesn't haven't to be perfect, it just has to be consistent and intelligible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first step to perfecting code organization is to organize your codebase. Later on, you can fine tune it to be closer to ideal.&lt;/p&gt;

&lt;p&gt;It's a simple fact. It's much easier to reorganize an already-organized workspace.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#perfecting-code-organization"&gt;
  &lt;/a&gt;
  Perfecting Code Organization
&lt;/h2&gt;

&lt;p&gt;As for the fine-tuning of a codebase, let's compare and contrast some common approached to code organization (using a React app as our example).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#grouping-files-by-type"&gt;
  &lt;/a&gt;
  Grouping Files by Type
&lt;/h3&gt;

&lt;p&gt;One common approach in React applications is to group files by their types/groups:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/src
  /components
  /hooks
  /pages
  /functions
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The benefit of this approach is that it's pretty clear where to look for a &lt;code&gt;Button&lt;/code&gt; component (let's say) versus where to look for a &lt;code&gt;Products&lt;/code&gt; page.&lt;/p&gt;

&lt;p&gt;The difficulty with this approach is that it doesn't allow for an association between various files and a common experience in the application (sometimes called a "domain").&lt;/p&gt;

&lt;p&gt;Or, you have nest a folder named after a domain across all the various top-level directories:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/src
  /components
    /product-listing
  /hooks
    /product-listing
  /pages
    /product-listing
  /functions
    /product-listing
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, it can get confusing as to what is a component that it tightly coupled with a domain versus a component that is generic enough to be shared across any domain (for example).&lt;/p&gt;

&lt;p&gt;Of course, you could nest &lt;code&gt;shared&lt;/code&gt; directories to distinguish:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/src
  /components
    /shared
    /product-listing
  /hooks
    /shared
    /product-listing
  /pages
    /product-listing
  /functions
    /shared
    /product-listing
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, as you can catch with the glance of your eye, there is an obvious problem of duplication.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#grouping-files-by-domain"&gt;
  &lt;/a&gt;
  Grouping Files by Domain
&lt;/h3&gt;

&lt;p&gt;What if we reverse the hierarchy?&lt;/p&gt;

&lt;p&gt;Instead of grouping first by file &lt;em&gt;type&lt;/em&gt; and then by &lt;em&gt;domain&lt;/em&gt;, look what happens when we group by domain and then type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/src
  /shared
    /components
    /hooks
    /functions
    /pages
  /product-listing
    /components
    /hooks
    /functions
    /pages
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We still have repetition of directories for the various file types, but the domain concepts are centralized to one part of the code.&lt;/p&gt;

&lt;p&gt;You can also easily see if a file is scoped to a domain or if it is shared.&lt;/p&gt;

&lt;p&gt;There is one development off of this that we will want to make, however.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;shared&lt;/code&gt; directory is still a bit ambiguous with this domain-driven organization.&lt;/p&gt;

&lt;p&gt;There are two main types of shared files:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Files that contain project-specific concepts but are used across multiple domains (i.e. &lt;code&gt;ShoppingCart&lt;/code&gt;, not found in a design system, etc.).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Files that contain generic files that could theoretically be consumed in any application (i.e. &lt;code&gt;Button&lt;/code&gt;, could be found in a design system, etc.). &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For this reason, we can distinguish between &lt;code&gt;common&lt;/code&gt; (product-specific) and &lt;code&gt;shared&lt;/code&gt; (generic) files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/src
  /shared
    /components
    /hooks
    /functions
    /pages
  /common
    /components
    /hooks
    /functions
    /pages
  /product-listing
    /components
    /hooks
    /functions
    /pages
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;? &lt;strong&gt;Note:&lt;/strong&gt; You can use whatever verbiage you prefer to make the distinction. The important thing is to make a distinction. Also, what constitutes &lt;code&gt;common&lt;/code&gt; versus &lt;code&gt;shared&lt;/code&gt; can vary based on context.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#treating-shared-files-as-external-packages"&gt;
  &lt;/a&gt;
  Treating Shared Files As External Packages
&lt;/h3&gt;

&lt;p&gt;A final suggestion to perfect our code organization is to treat the &lt;code&gt;shared&lt;/code&gt; directory as an external package.&lt;/p&gt;

&lt;p&gt;You can achieve this by using &lt;a href="https://webpack.js.org/configuration/resolve/#resolvealias"&gt;an alias&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// some-component.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@shared/components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The advantage of this is that 1) you don't have to deal with long relative imports, 2) you can clearly see the distinction between generic and project-specific files as you would if using an external library, and 3) you can find and replace if you do move the files to an external library.&lt;/p&gt;

&lt;p&gt;Once these files are being treated as a separate package, you may want to group the directory by potential external library names as opposed to file types:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/src
  /shared
    /design
    /data-visualization
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;This is a great way to keep shared, generic files in the project for convenience and experimentation before they become an external library.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can treat this section of the codebase as a "lab" or "staging" for external libraries.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Remember that 1% is better than 0%.&lt;/p&gt;

&lt;p&gt;Your environment impacts your well-being.&lt;/p&gt;

&lt;p&gt;Organize your codebase, and then find ways to improve the organization incremental.&lt;/p&gt;

&lt;p&gt;The big thing is to have consistency in organization and clarity in where to put what and when.&lt;/p&gt;

&lt;p&gt;What do you do to organize your codebase?&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Pure Functions Explained for Humans</title>
      <author>Alex Khismatulin</author>
      <pubDate>Tue, 21 Dec 2021 16:00:52 +0000</pubDate>
      <link>https://dev.to/alexkhismatulin/pure-functions-explained-for-humans-1j3c</link>
      <guid>https://dev.to/alexkhismatulin/pure-functions-explained-for-humans-1j3c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#start-leveraging-pure-functions-today"&gt;
  &lt;/a&gt;
  Start leveraging pure functions TODAY
&lt;/h2&gt;

&lt;p&gt;First things first: you don't have to write code in a functional style to leverage pure functions.&lt;/p&gt;

&lt;p&gt;This powerful tool makes it easier to read, reuse, maintain, and test code. Nobody wants to lose any of these benefits because their code is not functional. And you shouldn't neither. So get known to the concept now to make your code even better, functional or not.&lt;/p&gt;

&lt;p&gt; Good news: it is extremely easy to understand and start using pure functions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-simple-definition"&gt;
  &lt;/a&gt;
  A simple definition
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A function can be called pure if it returns the same output given the same input every time you call it, doesn't consume or modify other resources internally, and doesn't change its inputs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok, this seems to sound way easier than what we usually see when it comes to pure functions. Now let's break it down and see what each part of this definition means and how those parts are named in the professional lexicon.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#returns-the-same-output-given-the-same-input"&gt;
  &lt;/a&gt;
  Returns the same output given the same input
&lt;/h2&gt;

&lt;p&gt;This one means exactly what it says. Every time we call a function with a constant value, it has to return the same result. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-consider-2-examples"&gt;
  &lt;/a&gt;
  Let's consider 2 examples
&lt;/h3&gt;

&lt;p&gt;We will create &lt;code&gt;addFive&lt;/code&gt; and &lt;code&gt;addSomething&lt;/code&gt; functions and see how they follow(or don't follow) the rule. But before we move forward, can you guess which one violates the rule and why?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-addfive-endraw-function"&gt;
  &lt;/a&gt;
  &lt;code&gt;addFive&lt;/code&gt; function
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;seven&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;addFive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we have an &lt;code&gt;addFive&lt;/code&gt; function, we always expect that &lt;code&gt;addFive(2)&lt;/code&gt; would return 7. No matter what happens with the rest of a program, when, or where in the code we call &lt;code&gt;addFive(2)&lt;/code&gt;, it always gives us 7.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-addsomething-endraw-function"&gt;
  &lt;/a&gt;
  &lt;code&gt;addSomething&lt;/code&gt; function
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randomNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;addSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns a random number&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As opposed to &lt;code&gt;addFive&lt;/code&gt;, there's the &lt;code&gt;addSomething&lt;/code&gt; function. As we can guess from the name, it adds an unknown number to a passed value. So if &lt;code&gt;addSomething(2)&lt;/code&gt; call returned 6, we have no guarantee that every time we call &lt;code&gt;addSomething(2)&lt;/code&gt; it would return 6. Instead, this will be an arbitrary number that we can't predict at the moment of calling the function unless we know how the internal random number generator works. This function does not guarantee to return the same output given the same input.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-does-that-mean-for-us"&gt;
  &lt;/a&gt;
  What does that mean for us?
&lt;/h3&gt;

&lt;p&gt;At this point, we can definitely tell that &lt;code&gt;addSomething&lt;/code&gt; is not a pure function. But we also cannot state that &lt;code&gt;addFive&lt;/code&gt; is a pure function yet. To do this, we need to check if it satisfies other conditions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#doesnt-consume-or-modify-other-resources-internally"&gt;
  &lt;/a&gt;
  Doesn't consume or modify other resources internally
&lt;/h2&gt;

&lt;p&gt;To explore this topic, we need to think about how the functions from the above examples would be implemented.&lt;/p&gt;

&lt;p&gt;First, our pure function candidate, &lt;code&gt;addFive&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addFive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see, the function does exactly and only what it says and what we expect it to do. Nothing else other than adding 5 a passed number is happening. &lt;code&gt;addFive&lt;/code&gt; passes this check. &lt;/p&gt;

&lt;p&gt;Now, let's define the &lt;code&gt;addSomething&lt;/code&gt; function that is already known as impure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;callCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;callCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;callCounter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isEvenCall&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;callCounter&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isEvenCall&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function has an external variable that stores the number of times the function was called. Then, based on the counter, we check if it's an even call and add 3 if it is, or add 4 if it's not. This call counter is an external state that the &lt;code&gt;addSomething&lt;/code&gt; function uses to calculate the results. Such states fall under the definition of side effects.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Side effect is a modification of any external state, consumption of dynamic external values, or anything a function does outside of the work related to calculating the output.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In our case, &lt;code&gt;addSomething&lt;/code&gt; modifies and uses &lt;code&gt;callCounter&lt;/code&gt; to calculate the final output. This is a side effect. How could we fix &lt;code&gt;addSomething&lt;/code&gt; to clean it up from side effects?&lt;/p&gt;

&lt;p&gt;If we can't consume or modify an external variable, we need to make it an input:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isEvenCall&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isEvenCall&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we control if it's an even or odd call from outside, and our &lt;code&gt;addSomething&lt;/code&gt; function becomes pure. Whenever we call it with the same pair of inputs, it would return the same number.&lt;/p&gt;

&lt;p&gt;Don't worry if you still don't quite understand what can be a side effect. We will see more examples of side effects a bit later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#doesnt-change-its-inputs"&gt;
  &lt;/a&gt;
  Doesn't change its inputs
&lt;/h2&gt;

&lt;p&gt;For this part we need to create the &lt;code&gt;getFullName&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function takes an object with first and last names. Then it formats these properties in the object so they start with a capital letter and all other letters are lowercased. In the end, the function returns a full name.&lt;/p&gt;

&lt;p&gt;If we skip over potential edge cases, our function will return the same output every time we pass an object with the same values. The function doesn't consume or modify any external resources neither and only calculates a full name. So, does that mean it's pure?&lt;/p&gt;

&lt;p&gt;No. And here's why.&lt;/p&gt;

&lt;p&gt;The object we pass to &lt;code&gt;getFullName&lt;/code&gt; is a referential type. When we change its properties inside the function, the changes get reflected in the original object outside the function. In other words, we &lt;strong&gt;mutate&lt;/strong&gt; our inputs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// note that all letters are lowercased&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;alex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;khismatulin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns "Alex Khismatulin"&lt;/span&gt;

&lt;span class="c1"&gt;// Logs "Alex Khismatulin", capitalized. Object is modified.&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even though primitive vs reference types separation sounds complex, in practice, it is not. Spend a few minutes to check it out. There are plenty of &lt;a href="https://www.google.com/search?q=primitive+types+vs+reference+types"&gt;good posts&lt;/a&gt; on the topic. &lt;strong&gt;Tip&lt;/strong&gt;: add your preferred language to the end of the search query to get more contextual results. Here's &lt;a href="https://www.google.com/search?q=primitive+types+vs+reference+types+javascript"&gt;an example for JavaScript&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Input mutations are also considered &lt;strong&gt;side effects&lt;/strong&gt;. We change inputs that come from outside, so we're still changing an external resource but in a different way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#same-doesnt-always-mean-equal"&gt;
  &lt;/a&gt;
  "Same" doesn't always mean "equal"
&lt;/h2&gt;

&lt;p&gt;As we just touched referential types, we should also note that even though pure functions always return the same output given the same inputs, this doesn't mean that all inputs and outputs must be &lt;strong&gt;equal&lt;/strong&gt; to each other. That is possible when a function takes or returns a referential type. Look at this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function takes first and last names and creates a user object. Every time we pass the same names, we get an object with the same fields and values. But objects returned from different function calls are not equal to one another:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Alex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Khismatulin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Alex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Khismatulin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;user2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;user2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;user2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false, objects are not equal&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We see that &lt;code&gt;firstName&lt;/code&gt; from &lt;code&gt;user1&lt;/code&gt; is equal to &lt;code&gt;firstName&lt;/code&gt; from &lt;code&gt;user2&lt;/code&gt;. &lt;code&gt;lastName&lt;/code&gt; from &lt;code&gt;user1&lt;/code&gt; is equal to &lt;code&gt;lastName&lt;/code&gt; from &lt;code&gt;user2&lt;/code&gt;. But &lt;code&gt;user1&lt;/code&gt; is not equal to &lt;code&gt;user2&lt;/code&gt; because they are different object instances.&lt;/p&gt;

&lt;p&gt;Even though the objects are not equal, our function is still pure. The same is applied to inputs: they don't have to be literally equal to produce the same output. It's just not a 100% correct word used in the first place.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-identical-not-same-or-equal"&gt;
  &lt;/a&gt;
  It's "identical", not "same" or "equal"
&lt;/h3&gt;

&lt;p&gt;The word "identical" describes what we expect from pure functions best. Values such functions take or return don't necessarily have to be equal, but they have to be &lt;strong&gt;identical&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-side-effects"&gt;
  &lt;/a&gt;
  Other side effects
&lt;/h2&gt;

&lt;p&gt;So, what can be a side effect? Here are a few examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Querying or changing external variables and states&lt;/li&gt;
&lt;li&gt;Mutating inputs&lt;/li&gt;
&lt;li&gt;DOM interaction&lt;/li&gt;
&lt;li&gt;Network calls&lt;/li&gt;
&lt;li&gt;Calling other impure functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The list goes on and on, but you get the idea. &lt;strong&gt;Anything unrelated to computing output or relies on any dynamic values other than inputs is a side effect.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Moreover, &lt;code&gt;console.log&lt;/code&gt; is also a side effect! It interacts with the console, thus doing work unrelated to computing an output. No worries, usually console logs have no impact, so this rule is omitted when debugging code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-definition"&gt;
  &lt;/a&gt;
  Final definition
&lt;/h2&gt;

&lt;p&gt;Now, as we have all the pieces of our simple definition uncovered, we a ready to derive a smarter definition of a pure function:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A function can be called pure if it returns identical output given identical input every time it is called and has no side effects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Awesome! But there's one thing that might've been bugging you while reading.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-should-i-do-when-i-do-need-side-effects"&gt;
  &lt;/a&gt;
  What should I do when I do need side effects?
&lt;/h2&gt;

&lt;p&gt;Some things are impure by their nature. At the end of the day, this is what programming is about – transforming data is our bread and butter.&lt;/p&gt;

&lt;p&gt;Side effects are imminent. But when we have to deal with them, we should strive to isolate them as much as possible and separate from the code that executes pure operations.&lt;/p&gt;

&lt;p&gt;Here's a pretty widespread Redux selector pattern. We have a code that gets a snapshot of Redux state and a selector function that knows how to get a specific value from that state:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUserById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getUserById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;42&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;You don't need to know anything about Redux to understand the example. There's no magic going on here. &lt;code&gt;store.getState()&lt;/code&gt; in our case only returns an object that holds some values.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this example, the values in the store change dynamically and are out of our control. We secure the &lt;code&gt;getUserById&lt;/code&gt; value selector function from any third-party states and make it only rely on its inputs.&lt;/p&gt;

&lt;p&gt;You see the pattern: separate the code that has to deal with impure data sources or to produce side effects from the code that gives linear output based on its inputs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-pros"&gt;
  &lt;/a&gt;
  What are the pros?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#reusability"&gt;
  &lt;/a&gt;
  Reusability
&lt;/h3&gt;

&lt;p&gt;Let's come back to the Redux selector example. Other than just returning a user from state, we can update the code and break it down into a few pure functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;findUserById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUsersFromState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have one function that knows how to get users from state and another one that knows how to find a user by id in a list of users. That means we can reuse &lt;code&gt;findUserById&lt;/code&gt; in other parts of the app where we use the same shape for the user object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// find a user in the store users&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getUsersFromState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;findUserById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;42&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// find a user in the lottery players list&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lotteryPlayers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getLotteryPlayers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;winnerId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;winner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;findUserById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;winnerId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both cases leverage &lt;code&gt;findUserById&lt;/code&gt; because it does one small thing and has no unpredictable dependencies. If we ever needed to change the field name that holds user id, we would need to do that in just one place.&lt;/p&gt;

&lt;p&gt;Purity gives us space to create functions that are not bound to specific data sources or context in which functions are called.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h3&gt;

&lt;p&gt;We're going come back to the Redux selector example one more time and imagine that we decided to get state from the store right inside the selector function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUserById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getUserById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;42&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What would it cost us to add a test that validates this function? Well, we would need to do some dark magic to mock &lt;code&gt;store.getState()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Should return user with correct id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;42&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getUserById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;42&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;42&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You see what's going on? We had to mock the whole Redux store just to test one small selector. More importantly, the test must know &lt;strong&gt;how&lt;/strong&gt; the state is retrieved from the store. Imagine what would we need to do to test a more complex one? What would happen if we decided to replace Redux with some other state management tool?&lt;/p&gt;

&lt;p&gt;To see the difference, here's a test for the original pure version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Should return user with correct id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;42&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getUserById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;42&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;42&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we don't need to think about what method is used to return a state from the store and mock the whole thing. We just use a state fixture. If we ever change a state management tool, this will not affect the tests because they only know what the state's shape is, not how it's stored.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#they-make-the-code-easier-to-consume"&gt;
  &lt;/a&gt;
  They make the code easier to consume
&lt;/h3&gt;

&lt;p&gt;Last but not least, writing pure functions forces us to create smaller, more specialized functions that do one small thing. The code is going to become more organized. This, in turn, will increase readability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-the-end"&gt;
  &lt;/a&gt;
  In the end
&lt;/h2&gt;

&lt;p&gt;Pure functions alone are not going to make your code perfect. But this is a must-have part of your toolset if you want to be a professional in what you do. Every little step moves you to a bigger goal, and pure functions are not an exception. Employ this concept and make your code a little better today.&lt;/p&gt;

&lt;p&gt;I hope you learned something today. Make this topic a small piece in the strong foundation of your success. Thank you for reading!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ps"&gt;
  &lt;/a&gt;
  P.S.
&lt;/h2&gt;

&lt;p&gt;If you like occasional no-bullshit web shorties, you should definitely drop me a line on &lt;a href="https://twitter.com/alexkhismatulin"&gt;Twitter&lt;/a&gt;. Feel free to tag me if you want to discuss this article, and I will make sure to join the conversation!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>codequality</category>
      <category>javascript</category>
    </item>
    <item>
      <title>tell us about development tasks you're not going to develop in-house, we wanna help</title>
      <author>byvalue-offer</author>
      <pubDate>Tue, 21 Dec 2021 15:49:03 +0000</pubDate>
      <link>https://dev.to/offer_gombo/tell-us-about-development-tasks-youre-not-going-to-develop-in-house-we-wanna-help-3jae</link>
      <guid>https://dev.to/offer_gombo/tell-us-about-development-tasks-youre-not-going-to-develop-in-house-we-wanna-help-3jae</guid>
      <description>&lt;p&gt;we're on a mission to match companies' needs with API solutions.&lt;br&gt;
when facing the Buy vs Build dilemma and realizing that it doesn't make sense to develop, a lot of developers and product managers struggle. finding  evaluating, comparing and integrating solutions is hard. &lt;strong&gt;we want to help with that!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;we collect tasks that can be solved using an API and just go and get the solutions for them.&lt;/p&gt;

&lt;p&gt;you submit a task here:&lt;br&gt;
&lt;a href="https://byvalue.org/submit-task/"&gt;https://byvalue.org/submit-task/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;we use our collected data, algorithm, our community of API developers and our in-house experts to offer solutions for your tasks.&lt;br&gt;
you would also be able to see who's facing similar tasks and what solutions did they choose. &lt;br&gt;
around any task and solutions there's a discussion where you can engage with our community and get a better understanding of what are your options&lt;/p&gt;

&lt;p&gt;the more tasks we can collect the better our matching would get and our ability to provide quick and accurate solutions, so please... go crazy with asking for stuff you need. it's free to ask for a task and there are no strings attached, if one of the solutions fits your needs, you can subscribe to it and use it. if not, just enjoy our community's discussion and suggestions to help you solve your task or wait for a solution to be developed for you.&lt;/p&gt;

&lt;p&gt;let's create cool things!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Resolving ENS Usernames in React</title>
      <author>Rahat Chowdhury</author>
      <pubDate>Tue, 21 Dec 2021 15:38:20 +0000</pubDate>
      <link>https://dev.to/rahat/resolving-ens-usernames-in-react-3ppm</link>
      <guid>https://dev.to/rahat/resolving-ens-usernames-in-react-3ppm</guid>
      <description>&lt;p&gt;An awesome part of using a dApp is the fact that you can connect your wallet and and be logged in or signed up for the application right away. The problem that this may bring is that wallets are this large string of alphanumeric characters and don't make the best usernames. See example below:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;0xd2f8ed343386FB042178c7e133A837CB8043d0dc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ew right? This isn't the greatest way of displaying a username. You could do something like create a form and ask for a preferred username &lt;em&gt;or&lt;/em&gt; we could leverage the decentralized web and look at using existing ENS usernames in our applications. &lt;/p&gt;

&lt;p&gt;Let's take a look at how we can do this using React and the Ethers library. &lt;/p&gt;

&lt;p&gt;I started off by scaffolding out a react application using:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx create-react-app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then I installed a dependency I need using yarn. (You can use npm instead if you prefer).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add ethers&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Afterwards I went into App.js and got rid of everything inside the div and then imported the ethers library and useState from React to keep track of the username of the signed in person. If you want to code along with this blog then here is what my App.js looked like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import './App.css';
import { useState } from 'react';
import { ethers } from 'ethers';

function App() {
  const [name, setName] = useState("");
  return (
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;h1&amp;gt;{name}&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

export default App;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not too much going on just yet. Let's add a button inside of our app div and give it a function that can execute on click.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div className="App"&amp;gt;
      &amp;lt;button className ="button" onClick={() =&amp;gt; handleWalletConnect()}&amp;gt;connect&amp;lt;/button&amp;gt;
      &amp;lt;h1&amp;gt;{name}&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So this handleWalletConnect function is going to accomplish a couple of things. We want to make sure we get access to the users wallet as well as their ens username if they have one. Here is the function which I'll break down line by line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [name, setName] = useState("");
  const handleWalletConnect = async () =&amp;gt; {
    const { ethereum } = window;
    if(ethereum) {
      const provider = new ethers.providers.Web3Provider(ethereum)
      await provider.send("eth_requestAccounts", []);
      const signer = provider.getSigner()
      const address = await signer.getAddress()
      const ens = await provider.lookupAddress(address);
      if (ens !== null) {
        setName(ens)
      } else {
        setName(address)
      }
    } else {
      alert('no wallet detected!')
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first thing we're doing is destructuring the Ethereum object from the Window:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const { ethereum } = window&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is something that is injected into the window from a wallet like Metamask. As long as it exists we will continue on with the rest of our code, otherwise we want to alert the user that we aren't detecting any wallets in their browser. &lt;/p&gt;

&lt;p&gt;Next up is creating a provider that will give us access to a lot of methods that makes our life easier. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;const provider = new ethers.providers.Web3Provider(ethereum)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A provider is a nice little abstraction of the connection to the Ethereum network. We're leveraging the work that the nice folks at Ethers have already done for us instead of reinventing the wheel. &lt;/p&gt;

&lt;p&gt;The first thing we want to do with our provider is ask for permission to connect to the users wallet which is taken care of with this line:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;await provider.send("eth_requestAccounts", [])&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This sends a request over to the wallet asking the user to allow connection with our dApp. &lt;/p&gt;

&lt;p&gt;Next we want to get information about the user. We do this by creating a signer object:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const signer = provider.getSigner()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This gives us access to more methods like this handy one for getting the signer's address:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const address = await signer.getAddress()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now in theory we have everything we need to start building out our dApp. We have the address but we want to make things a little more human readable. Our provider has a nice little method of doing a reverse lookup to see if the Ethereum address is linked to an ENS username and that's done in the line below:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const ens = await provider.lookupAddress(address)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will return the ens username if it exists otherwise we will get back null. Now we can either set the name to be the username or just fall back to the address if they do not have an ens username.&lt;/p&gt;

&lt;p&gt;Now that we can access our user's decentralized identity we can allow for a greater user experience instead of forcing our users to fill out yet another form on profile details for a new service. &lt;/p&gt;

&lt;p&gt;The final code for this can all be found on this repository:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Rahat-ch/reactensusernames"&gt;https://github.com/Rahat-ch/reactensusernames&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also watch a quick video of this tutorial below:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/qQBJBJGv_ZA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>web3</category>
      <category>react</category>
    </item>
    <item>
      <title>Make Neovim your ultimate code editor</title>
      <author>Siraphob</author>
      <pubDate>Tue, 21 Dec 2021 15:27:47 +0000</pubDate>
      <link>https://dev.to/siraphobk/make-neovim-your-ultimate-code-editor-2j53</link>
      <guid>https://dev.to/siraphobk/make-neovim-your-ultimate-code-editor-2j53</guid>
      <description>&lt;p&gt;&lt;strong&gt;TLDR&lt;/strong&gt;; My dot-file can be downloaded from this &lt;a href="https://gist.github.com/siraphobk/abb53e7312e7f7fd099dd3c9cb276688"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prologue"&gt;
  &lt;/a&gt;
  Prologue
&lt;/h2&gt;

&lt;p&gt;Vim was invented around 30 years ago (1991). It is a text editor that runs in a terminal. Programmers at the time use Vim to write their code.&lt;/p&gt;

&lt;p&gt;In mordern days, even with new text editor like VSCode, intellij, sublime text, etc; Vim still stand tall among them. This is because Vim has some advantages over those text editors.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Vim is extremely lightweight.&lt;br&gt;
Vim itself is very small and it's likely shipped with most Linux distros. The only dependency it needs is a terminal.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;People who use Vim could edit their code faster.&lt;br&gt;
Vim enables full keyboard control. You can navigate, edit, delete, replace, etc. using only your keyboard. You'll seldomly need to touch your mouse when writing code ever again.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vim is highly customizable.&lt;br&gt;
You can configure Vim to work in your way. Keybindings are not intuitively enough? You can remap it! Want to add Git integration? You can do that too! Add code-completiong and linting for your programming language? I don't need to say that it's achievable too.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-neovim"&gt;
  &lt;/a&gt;
  Why Neovim?
&lt;/h2&gt;

&lt;p&gt;You may wonder why I was talking about Vim when the title said Neovim. Well, here I am. In this article I'm going to explain why we'll use Neovim instead of Vim.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-neovim"&gt;
  &lt;/a&gt;
  What is Neovim?
&lt;/h3&gt;

&lt;p&gt;Neovim is a forked version of Vim. It's basically Vim but driven by an open-source community. On the other hand, Vim is maintained by only one person which is its original author, Bram Moolenaar.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-should-you-use-neovim-instead-of-vim"&gt;
  &lt;/a&gt;
  Why should you use Neovim instead of Vim?
&lt;/h3&gt;

&lt;p&gt;As I said, Neovim is maintained by the community. And because of that, the tends software evolves faster and more compatible with the modern system. And by that term, I am talking about integration with other third-parties and bug fixes.&lt;/p&gt;

&lt;p&gt;Moreover, Neovim's software architecture was redesigned to be more extensible and could process task in multi-thread fashion.&lt;/p&gt;

&lt;p&gt;With all that; the traits of its predecessor, blazingly fast software, and powerful plugins; is the reason I recommend you to use Neovim over regular Vim.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-neovim"&gt;
  &lt;/a&gt;
  Installing Neovim
&lt;/h3&gt;

&lt;p&gt;If you're on Debain-based system, you could run the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;neovim
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For other distributions/system, please refer to this &lt;a href="https://github.com/neovim/neovim/wiki/Installing-Neovim"&gt;wiki page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After the installation completed, you could start Neovim by just typing &lt;code&gt;neovim&lt;/code&gt; in your terminal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-neovim"&gt;
  &lt;/a&gt;
  Configuring Neovim
&lt;/h2&gt;

&lt;p&gt;Before any processes of Vim begins, Vim will read its configuration file first.&lt;br&gt;
So does Neovim. Neovim's configuration file is located at &lt;code&gt;$HOME/.config/nvim/init.vim&lt;/code&gt;. If your system doesn't have this directory, you could create one.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;init.vim&lt;/code&gt; file allows you to specify how Neovim should behave. The look&lt;br&gt;
and feel, keybindings, and plugins are all configured through this file.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#installing-plugins-using-vimplug"&gt;
  &lt;/a&gt;
  Installing plugins using Vim-Plug
&lt;/h3&gt;

&lt;p&gt;A way to install plugins in Neovim is through a plugin manager. There exists many plugin managers for you to choose. Here is some examples; Vim-Plug, Pathogen, Vundle, etc. In this article, I'm going to use Vim-Plug since it's very easy to use and setup.&lt;/p&gt;

&lt;p&gt;To install Vim-Plug for Neovim, please run the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s1"&gt;'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#neovim-configuration-file"&gt;
  &lt;/a&gt;
  Neovim configuration file
&lt;/h3&gt;

&lt;p&gt;After the installation completed, open &lt;code&gt;init.vim&lt;/code&gt; and add the following snippet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;call&lt;/span&gt; plug#begin&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'~/.config/nvim/plugged'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;" This is where you define your plugins.&lt;/span&gt;

&lt;span class="k"&gt;call&lt;/span&gt; plug#end&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The snippet above make Vim-Plug scans for the defined plugins. Any defined plugins that don't exist in &lt;code&gt;nvim/plugged&lt;/code&gt; directory will be download and install. To trigger the Vim-Plug installation, reload Neovim and type &lt;code&gt;:PlugInstall&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Protips&lt;/strong&gt;: If you're editing &lt;code&gt;init.vim&lt;/code&gt;, save the file by running &lt;code&gt;:w&lt;/code&gt; and then &lt;code&gt;:source %&lt;/code&gt; to source the current file. After that you can call &lt;code&gt;PlugInstall&lt;/code&gt; without needing to reload the Neovim process again.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#finding-plugins"&gt;
  &lt;/a&gt;
  Finding plugins
&lt;/h3&gt;

&lt;p&gt;You can find any plugins for Vim on &lt;a href="https://vimawesome.com/"&gt;Vimawesome&lt;/a&gt;. When you select a plugin on Vimawesome, it'll show installation instruction for&lt;br&gt;
any plugin manager.&lt;/p&gt;

&lt;p&gt;For example, please see &lt;a href="https://vimawesome.com/plugin/fugitive-vim"&gt;Fugitive&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4QMSwS2V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwq71vw2rols8xz1gy0k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4QMSwS2V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwq71vw2rols8xz1gy0k.png" alt="Fugitive Vim-Awesome" width="880" height="544"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-plugins-i-recommend"&gt;
  &lt;/a&gt;
  Useful plugins I recommend.
&lt;/h3&gt;

&lt;p&gt;I am going to list all the plugins I use and explain what they do in my Neovim configuration. The list is shown below.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;NERDTree - File browsing &lt;br&gt;
Plug 'scrooloose/nerdtree'&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NERDTree Git Plugin - Git integration for NERDTree&lt;br&gt;
Plug 'Xuyuanp/nerdtree-git-plugin'&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vim Devicons - Extend Vim to use beatiful icons&lt;br&gt;
Plug 'ryanoasis/vim-devicons'&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Syntastic - Syntax Checking&lt;br&gt;
Plug 'scrooloose/syntastic'&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Gitgutter - Show git diff in a file&lt;br&gt;
Plug 'airblade/vim-gitgutter'&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NERDCommenter - Add comment keybindings support&lt;br&gt;
Plug 'scrooloose/nerdcommenter'&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vim Surround - Brackets wrapping &lt;br&gt;
Plug 'tpope/vim-surround'&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CTRL-P - File search&lt;br&gt;
Plug 'ctrlpvim/ctrlp.vim'&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vim-Go - Go programming language support for Vim&lt;br&gt;
Plug 'fatih/vim-go'&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;COC(Conquer Of Completion) - Syntax completion support&lt;br&gt;
Plug 'neoclide/coc.nvim', {'branch': 'release'}&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Colorschemes - Customize Vim colorscheme&lt;br&gt;
Plug 'flazz/vim-colorschemes'&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vim-Javascript - Javascript support &lt;br&gt;
Plug 'pangloss/vim-javascript'&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vim-Graphql - Graphql Sytax highlighting&lt;br&gt;
Plug 'jparise/vim-graphql'&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Indentline - Show indentation guide in Vim&lt;br&gt;
Plug 'yggdroot/indentline'&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FZF - FuzzyFinder support for Vim&lt;br&gt;
Plug 'junegunn/fzf', { 'do': { -&amp;gt; fzf#install() } }&lt;br&gt;
Plug 'junegunn/fzf.vim'&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fugitive - Git integration&lt;br&gt;
Plug 'tpope/vim-fugitive'&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vim-Airline - Vim status bar customization&lt;br&gt;
Plug 'vim-airline/vim-airline'&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Undotree - Undo history &lt;br&gt;
Plug 'mbbill/undotree'&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#my-dotfile"&gt;
  &lt;/a&gt;
  My dot-file
&lt;/h3&gt;

&lt;p&gt;For anyone who's looking for my dot-file. You can download it from this &lt;a href="https://gist.github.com/siraphobk/abb53e7312e7f7fd099dd3c9cb276688"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing thoughts
&lt;/h2&gt;

&lt;p&gt;In my opinion Neovim is not the thing that every developers should adopt. It is also not something that would instantly replace your current text editor. Honestly, I think the best text editor is not the fastest one or the one with the most plugins. The best text editor is the one that suits your workflow the most.&lt;/p&gt;

&lt;p&gt;Neovim is one of those text editor that fits my workflow. It is fast, lightweight, and highly customizable. It is a little bit harder to learn at first because of its steep learning curve. But I assure you that it is worth learning and it will pay off a great prize!&lt;/p&gt;

</description>
      <category>vim</category>
      <category>neovim</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Media Query (CSS)</title>
      <author>Iftakher Hossen</author>
      <pubDate>Tue, 21 Dec 2021 15:20:29 +0000</pubDate>
      <link>https://dev.to/iftakher_hossen/media-query-css-3akc</link>
      <guid>https://dev.to/iftakher_hossen/media-query-css-3akc</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-media-query"&gt;
  &lt;/a&gt;
  What is Media Query
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Media Query&lt;/strong&gt; is introduced on CSS3. Media Query is a very useful tool. Media Query in CSS is used to make responsive designs for various platforms. We use the &lt;code&gt;@media&lt;/code&gt; rule to include a block of CSS properties only if a particular condition is true. You have to mention &lt;code&gt;breakpoint&lt;/code&gt;'s, it defines where certain parts of the design will behave differently. Media queries can be used to check many things, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Width and height of the viewport&lt;/li&gt;
&lt;li&gt;Width and height of the device&lt;/li&gt;
&lt;li&gt;Orientation (Landscape/Portrait)&lt;/li&gt;
&lt;li&gt;Resolution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also use media queries to specify that specific styles are only for printed documents or for screen readers (media-type: print, screen, or speech). Media queries can also be used to change the layout of a page depending on the orientation of the browser.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#structure"&gt;
  &lt;/a&gt;
  Structure:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9apcsthO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3gjm1y5v6frpkq204wwj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9apcsthO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3gjm1y5v6frpkq204wwj.png" alt="Structure" width="880" height="358"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T2y0jlGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dk9cm0bcrtyin0fpz8zz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T2y0jlGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dk9cm0bcrtyin0fpz8zz.png" alt="Code Screenshot 02" width="880" height="675"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#meaning-of-and-only-amp-not"&gt;
  &lt;/a&gt;
  Meaning of and, only &amp;amp; not:
&lt;/h4&gt;

&lt;p&gt;And : For using two or more media query breakpoints or media types. &lt;br&gt;
Only    : For using media query on an Older version of browsers.&lt;br&gt;
Not : For inverting the meaning of an entire media query.&lt;/p&gt;

&lt;p&gt;You can use external CSS for different media to keep CSS file's more clean and organized.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ccjN-Ii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1tf0givs3z8wpw9eeqwi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ccjN-Ii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1tf0givs3z8wpw9eeqwi.png" alt="Code Screenshot 03" width="880" height="288"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typical-device-breakpoints"&gt;
  &lt;/a&gt;
  Typical Device Breakpoints
&lt;/h3&gt;

&lt;p&gt;There are tons of screens and devices of different sizes, so it is tough to create an exact breakpoint for each device. To keep things simple you could target five groups:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nrqzUu8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/087amm7obo4l2ge0mlr8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nrqzUu8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/087amm7obo4l2ge0mlr8.png" alt="Code Screenshot 02" width="880" height="758"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#browser-support"&gt;
  &lt;/a&gt;
  Browser Support
&lt;/h3&gt;

&lt;p&gt;The table data define the first version of the browser support the Media Query -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Ov15ht2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wn81661gnt8zvre8rjft.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Ov15ht2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wn81661gnt8zvre8rjft.jpg" alt="Browser  Support Image" width="702" height="89"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>The Most Important Elements of any Landing Page</title>
      <author>Zack Webster</author>
      <pubDate>Tue, 21 Dec 2021 15:15:55 +0000</pubDate>
      <link>https://dev.to/zaxwebs/the-most-important-elements-of-any-landing-page-3720</link>
      <guid>https://dev.to/zaxwebs/the-most-important-elements-of-any-landing-page-3720</guid>
      <description>&lt;p&gt;A good landing page can boost your campaign sales or signups by up to 10 times. But what are landing pages and how do they differ from general web pages? A landing page is a special type of web page where the focus is on one action such as a signup or sale of a specific product, they are often paired with search and social media advertisements. While general web pages are more about encouraging exploration and offering diverse information.&lt;/p&gt;

&lt;p&gt;So, what makes a good landing page? Let's have a look at the top elements you need to have.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#headline"&gt;
  &lt;/a&gt;
  Headline
&lt;/h2&gt;

&lt;p&gt;Your headline is the first thing a user is likely to read when going through your landing page. As such you need to make sure you have a compelling one. How does one craft a good headline? You are in luck, there are already some pre-established formulas that are known to work well. Have a look at the list of 5 proven conversion-boosting headline formulas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Testimonial&lt;/li&gt;
&lt;li&gt;Khan Academy's Testimonial Headline&lt;/li&gt;
&lt;li&gt;Cliffhanger&lt;/li&gt;
&lt;li&gt;Value Proposition&lt;/li&gt;
&lt;li&gt;Listicle&lt;/li&gt;
&lt;li&gt;How-To&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The type of headline that works well for you depends on what you are trying to sell. Personal products, for example, can be more receptive to a testimonial headline. Each type of headline has its perks, try out different variations with A/B testing and optimize for conversion.&lt;/p&gt;

&lt;p&gt;Make sure to keep your headlines short and simple, easy to comprehend and remember. If need be, businesses can also use a sub-heading to elaborate a bit more about what is being offered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clearcut-visual-or-video"&gt;
  &lt;/a&gt;
  Clear-cut Visual or Video
&lt;/h2&gt;

&lt;p&gt;"A picture is worth a thousand words", a video even more. The visuals are what will help grab attention and offer more context quickly. This is a major part of your landing page and has to work in sync with your heading. The heading and your primary visual need to go hand in hand to land an impactful first impression.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y5TNDm74--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p7v9resxwlbowa5syayw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y5TNDm74--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p7v9resxwlbowa5syayw.png" alt="Image description" width="880" height="458"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you decide to use a video, make sure it's professional - it must have a good resolution &amp;amp; audio. If you don't have the budget to invest in a good video you might be better off with an image. You can be creative and blend with the type of heading. For example, a photo of a person benefiting from your product goes well with a testimonial heading.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#good-content"&gt;
  &lt;/a&gt;
  Good Content
&lt;/h2&gt;

&lt;p&gt;Provide rich, useful content, so long as it is relevant. Good, confident content inspires trust. Don’t bore the visitor by talking too much about yourself. Tell them what you or your product does for them. Help them picture what makes you or your product something they need to get.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-amp-benefits"&gt;
  &lt;/a&gt;
  Features &amp;amp; Benefits
&lt;/h2&gt;

&lt;p&gt;Adding to good content, a features &amp;amp; benefits list can be quite powerful. Tell your customers the things they get and their benefits in a sentence each. This also helps direct visualization of all the problems the visitor will overcome should they buy your product or service.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#social-proof"&gt;
  &lt;/a&gt;
  Social Proof
&lt;/h2&gt;

&lt;p&gt;According to a report from Nielsen, 70% of people will trust a review from someone they’ve never even met. Social proof is your best friend when it comes to building credibility. Reviews, testimonials, badges, certificates, customer images, case studies, and company logos are all quite effective tools.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hB1dwlrj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxvbhm4rzp1nk41cq41k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hB1dwlrj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxvbhm4rzp1nk41cq41k.png" alt="Image description" width="880" height="458"&gt;&lt;/a&gt;&lt;br&gt;
To make sure your social proof is effective, you must keep in mind that all not social proof is equal. It's ideal if the social proof comes from the type of audience that you are marketing to and the source is credible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#single-call-to-action"&gt;
  &lt;/a&gt;
  Single Call to Action
&lt;/h2&gt;

&lt;p&gt;A confused customer is less likely to take any action. If you present too many choices you might be losing quite a few sales. One of our jobs as a designer is to reduce the cognitive load. The more you "direct", the easier things are and the more likely a user will be to do it. The best bet is to use a single call to action, the one goal of your landing page. You can further optimize your CTA buttons by offering a context-based label.&lt;/p&gt;

&lt;p&gt;You can further optimize your CTAs by optimizing your forms. Ask for the bare minimum information you need. The more fields you ask visitors to fill out in your form, the less chance you have of them completing your offer. People dread long tasks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#page-speed"&gt;
  &lt;/a&gt;
  Page Speed
&lt;/h2&gt;

&lt;p&gt;While not truly an "element", page speed is one of the most important aspects of a landing page. Nothing on the page matters if your customers leave cause your page took too long to load. We recommend utilizing static assets where possible as those generally can be easily cached and served faster. Use lazy-loading and compressed images.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QjAI5fM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fa585lw9tw6qez8fvlqs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QjAI5fM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fa585lw9tw6qez8fvlqs.png" alt="Image description" width="432" height="293"&gt;&lt;/a&gt;&lt;br&gt;
Tools like PageSpeed Insights can help you get an idea of what can be changed for faster load times on your existing pages. You should aim around the 90s.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#policies"&gt;
  &lt;/a&gt;
  Policies
&lt;/h2&gt;

&lt;p&gt;Adding links to your policies can help clear additional doubts a user might have. It also helps establish the terms between both parties.&lt;/p&gt;

&lt;p&gt;Here are some policy pages you can link to on your landing page:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Terms &amp;amp; Conditions&lt;/li&gt;
&lt;li&gt;Privacy Policy&lt;/li&gt;
&lt;li&gt;Refund Policy&lt;/li&gt;
&lt;li&gt;Warranty Policy&lt;/li&gt;
&lt;li&gt;Disclosures&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We hope the above has been insightful &amp;amp; will help you create landing pages that convert. If you’d like us to help you build one feel free to reach out.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>design</category>
      <category>beginners</category>
    </item>
    <item>
      <title>TIL: Croc - Securely transfer files via CLI</title>
      <author>An Pham</author>
      <pubDate>Tue, 21 Dec 2021 15:09:31 +0000</pubDate>
      <link>https://dev.to/ancs21/til-croc-securely-transfer-files-via-cli-1ihm</link>
      <guid>https://dev.to/ancs21/til-croc-securely-transfer-files-via-cli-1ihm</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/schollz/croc"&gt;croc&lt;/a&gt; is a tool that allows any two computers to simply and securely transfer files and folders.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install"&gt;
  &lt;/a&gt;
  Install
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;macOS
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install croc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Ubuntu
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl https://getcroc.schollz.com | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Window
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;scoop install croc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Send file or folder
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;croc send [file(s)-or-folder]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Receive the file
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;croc [code from output]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More feature, please visit to &lt;a href="https://github.com/schollz/croc"&gt;https://github.com/schollz/croc&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Do you know SourceGraph's "Code Search"?</title>
      <author>jonasbn</author>
      <pubDate>Tue, 21 Dec 2021 15:06:39 +0000</pubDate>
      <link>https://dev.to/jonasbn/do-you-know-sourcegraphs-code-search-308n</link>
      <guid>https://dev.to/jonasbn/do-you-know-sourcegraphs-code-search-308n</guid>
      <description>&lt;p&gt;In &lt;a href="https://changelog.com/founderstalk/81"&gt;episode #81&lt;/a&gt; of "Founders Talk" from the marvellous Changelog podcast Quinn Slack the CEO of SourceGraph was interviewed by one of the ChangeLog hosts about their tool &lt;a href="https://sourcegraph.com/search"&gt;"Code Search"&lt;/a&gt;. To me the description of this tool sounded very interesting and I immediately went to check it out. I registered with my GitHub account and started to search my own public available GitHub repositories, it was fun, but it was not something I could not find on my own laptop or directly in GitHub. Anyway, I really liked the user interface and the fact that it was incredibly fast.&lt;/p&gt;

&lt;p&gt;A few weeks later I wanted to check if my repositories where all configured as expected in regard to using a certain configuration, it was quite easy.&lt;/p&gt;

&lt;p&gt;I specified context: &lt;code&gt;@jonasbn&lt;/code&gt; and the query: &lt;code&gt;file:(\.)?spellcheck\.y(a)?ml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This have me a nice overview of which I my projects had the &lt;a href="https://github.com/marketplace/actions/github-spellcheck-action"&gt;Spellcheck GitHub Action&lt;/a&gt; configured.&lt;/p&gt;

&lt;p&gt;Then I got curious, could I use this for basic &lt;em&gt;market research&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;It is not something we do a lot for open source as maintainers, but it is nice to know if anybody is using your software.&lt;/p&gt;

&lt;p&gt;So I tried to tweak the search a bit.&lt;/p&gt;

&lt;p&gt;Under the context: &lt;code&gt;global&lt;/code&gt; and made something along the lines of the following &lt;code&gt;(\.)?spellcheck\.y(a)?ml archived:no&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;NB this is a constructed search, since I cannot remember the exact query I used, but is was somewhat similar , anyway the above example yielded: 61 hits.&lt;/p&gt;

&lt;p&gt;All of these might not be using the Spellcheck Action, since the configuration originates from &lt;code&gt;pyspelling&lt;/code&gt;, the core tool used by the action, so it required some more tweaking to match the path more accurately.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;file:\.github/workflows/(\.)?spellcheck\.y(a)?ml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This was most helpful and I was convinced that this tool could prove really useful in the future for doing basic &lt;em&gt;market research&lt;/em&gt; for the adaption of the GitHub Action for which I am the current maintainer.&lt;/p&gt;

&lt;p&gt;Fast forward to the day before yesterday. I released GitHub Spellcheck Action, release 0.19.0. As I pushed the release to &lt;a href="https://hub.docker.com/r/jonasbn/github-action-spellcheck"&gt;DockerHub&lt;/a&gt; I noticed that there has been downloads of older Docker images such as version: 0.13.0 and 0.14.0.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;❯ hub-tool tag ls jonasbn/github-action-spellcheck
TAG                                        DIGEST                                                                     STATUS      LAST UPDATE     LAST PUSHED    LAST PULLED    SIZE
jonasbn/github-action-spellcheck:latest    sha256:ef858650e00b2b8e16307c261f116f94fb152283383a247ca4043c932d4283cd    active      3 hours ago     3 hours        4 minutes      73.39MB
jonasbn/github-action-spellcheck:0.19.0    sha256:ef858650e00b2b8e16307c261f116f94fb152283383a247ca4043c932d4283cd    active      3 hours ago     3 hours        4 minutes      73.39MB
jonasbn/github-action-spellcheck:0.18.0    sha256:66d140eb83ff1d887f5c8201b221356651ce3fe4ce9f802cfdf8bd06cff5d8ff    active      6 weeks ago     6 weeks        4 hours        72.34MB
jonasbn/github-action-spellcheck:0.17.0    sha256:07cec3e9217c214013c6ffce2dbc6c1af1290988da3131f821f46a802f4698a4    active      2 months ago    2 months       2 weeks        72.27MB
jonasbn/github-action-spellcheck:0.16.0    sha256:34704a9756b822a6a4ea47db0b4c7fa66a66ea560bfed04d501082441bd43af6    inactive    4 months ago    4 months       2 months       67.83MB
jonasbn/github-action-spellcheck:0.15.0    sha256:fbd89d0315ac2c13d51da29a9f0b790d28152f82319c2c249b1cfb524393bad9    inactive    4 months ago    4 months       5 weeks        68.4MB
jonasbn/github-action-spellcheck:0.14.0    sha256:dc6c61976b7afef0372a6765af4f2ccba36e3f895f4fe00a457f2b421e454e4a    active      7 months ago    7 months       4 days         71.33MB
jonasbn/github-action-spellcheck:0.13.0    sha256:dc6c61976b7afef0372a6765af4f2ccba36e3f895f4fe00a457f2b421e454e4a    active      8 months ago    8 months       4 days         71.33MB
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://sourcegraph.com/search"&gt;"Code Search"&lt;/a&gt; to the rescue...&lt;/p&gt;

&lt;p&gt;Again with the context &lt;code&gt;global&lt;/code&gt; I searched for: &lt;code&gt;rojopolis/spellcheck-github-actions@0.13.0 archived:no&lt;/code&gt;, which yielded 3 hits. I did a variation more and &lt;code&gt;0.14.0&lt;/code&gt; yielded 11 hits.&lt;/p&gt;

&lt;p&gt;I created PRs for the ones using 0.13.0 and looked a the very long list and wondered how big a workload this was going to be, since just for the release 0.14.0, I could see that would require some work.&lt;/p&gt;

&lt;p&gt;Just for the fun of it, I tried to search for the releases 0.12.0 and 0.11.0.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;0.12.0 yielded only my own repository&lt;/li&gt;
&lt;li&gt;0.11.0 yielded 3 hits&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So there is a lot of work in there, either in creating PRs for updates to the configuration files or adaption of &lt;a href="https://github.com/dependabot"&gt;Dependabot&lt;/a&gt; to get this moving, luckily the Christmas holiday is coming up.&lt;/p&gt;

&lt;p&gt;Any way the Docker images for 0.11.0 have been removed from &lt;a href="https://hub.docker.com/r/jonasbn/github-action-spellcheck"&gt;DockerHub&lt;/a&gt;, so I thought I better makes some PRs for these projects to point to a more contemporary version, so I started by clicking into the first of the repositories found.&lt;/p&gt;

&lt;p&gt;Much to my surprise I found out that the repository was active and the spellcheck action was working and passing. So I started to examine the log and guess what, it was pulling the Docker image tagged as &lt;code&gt;latest&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So currently I am not wiser as too who pulls the older Docker images, I did the following search: context &lt;code&gt;global&lt;/code&gt; query: &lt;code&gt;docker://jonasbn/github-action-spellcheck: lang:yaml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I can not see any public repositories point directly to these, at least not with &lt;a href="https://sourcegraph.com/search"&gt;"Code Search"&lt;/a&gt;, but it helped me find a bug and I believe this tool to be a very powerful addition to my toolbox.&lt;/p&gt;

&lt;p&gt;SourceGraph's &lt;a href="https://sourcegraph.com/search"&gt;"Code Search"&lt;/a&gt; is truly awesome.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I can use it to do basic &lt;em&gt;market research&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;I can use it to find bugs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A 0.20.0 release of the &lt;a href="https://github.com/marketplace/actions/github-spellcheck-action"&gt;Spellcheck GitHub Action&lt;/a&gt; is getting ready to be shipped and I plan to write a lot of Christmas PRs, assisting users of &lt;a href="https://github.com/marketplace/actions/github-spellcheck-action"&gt;Spellcheck GitHub Action&lt;/a&gt; to get either updated or on the &lt;a href="https://github.com/dependabot"&gt;Dependabot&lt;/a&gt; bandwagon&lt;/p&gt;

&lt;p&gt;There are several options in getting to use &lt;a href="https://sourcegraph.com/search"&gt;"Code Search"&lt;/a&gt;, I have just used it for public repositories via the one available online - give it a go or as I as I normally put it: #techitout.&lt;/p&gt;

</description>
      <category>sourcegraph</category>
      <category>codesearch</category>
      <category>techitout</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Top 7 Featured DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 21 Dec 2021 14:49:39 +0000</pubDate>
      <link>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-4aah</link>
      <guid>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-4aah</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#remote-pairing-tips"&gt;
  &lt;/a&gt;
  Remote pairing tips
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/felvct"&gt;@felvct&lt;/a&gt; has some great tips for making your remote pairing sessions as productive as possible — super helpful in these times of remote work and social distancing!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/felvct" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DzmRAca_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7QjpBTfD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/184651/04814e27-25cb-437e-977d-d5bfd8462b36.jpeg" alt="felvct"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/felvct/get-the-most-out-of-your-remote-pair-programming-sessions-2l7g" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Get the most out of your (remote) pair programming sessions&lt;/h2&gt;
      &lt;h3&gt;Felix Vaucourt ・ Dec 14 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codequality&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#happy-engineers-are-more-productive"&gt;
  &lt;/a&gt;
  "Happy engineers are more productive"
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/apkoponen"&gt;@apkoponen&lt;/a&gt; has been in IT for 10 years and picked up a &lt;em&gt;few&lt;/em&gt; tips along the way. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/apkoponen" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nyx90Xz_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Lb87kkYo--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/341672/1a9fcadb-7312-4a42-9a41-404653df1b54.jpg" alt="apkoponen"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/apkoponen/100-tips-on-software-developer-productivity-36if" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;100 Tips on Software Developer Productivity&lt;/h2&gt;
      &lt;h3&gt;Ari Koponen ・ Dec 15 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#avoiding-tutorial-hell"&gt;
  &lt;/a&gt;
  Avoiding tutorial hell
&lt;/h2&gt;

&lt;p&gt;Do you have some spare time to develop a project? &lt;a class="mentioned-user" href="https://dev.to/yuridevat"&gt;@yuridevat&lt;/a&gt; has a great framework for figuring out what to build. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/yuridevat" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mqqgu1hQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7pt2folr--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/384066/81336f86-4113-4ace-a390-210f80c1b5ac.png" alt="yuridevat"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/yuridevat/how-i-come-up-with-project-ideas-and-never-faced-tutorial-hell-3287" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How I come up with project ideas (and never faced tutorial hell)&lt;/h2&gt;
      &lt;h3&gt;𝕁𝕦𝕝𝕚𝕒 👩🏻‍💻 ・ Dec 14 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#gotta-catch-em-all"&gt;
  &lt;/a&gt;
  Gotta catch 'em all!
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/fidalmathew"&gt;@fidalmathew&lt;/a&gt; shows us how to build a Pokedex using React.js. Super cool!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/fidalmathew" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9CN2G9fG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--JgdVRviV--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/714983/063558c2-23c2-45e9-b7ca-85ee33e62af8.png" alt="fidalmathew"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/fidalmathew/build-pokemon-finder-using-react-and-pokeapi-5b5k" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Build Pokemon Finder using React and Pokeapi&lt;/h2&gt;
      &lt;h3&gt;Fidal Mathew ・ Dec 18 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#getting-closure-with-javascript"&gt;
  &lt;/a&gt;
  Getting closure with Javascript
&lt;/h2&gt;

&lt;p&gt;In this post, &lt;a class="mentioned-user" href="https://dev.to/aruna"&gt;@aruna&lt;/a&gt; presents a great primer on closures in JS and their purpose.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/aruna" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s2Uujvez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--6Ln-mF0r--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/744146/9920abb3-d96c-4003-918f-382230018c7d.jpg" alt="aruna"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aruna/the-wacky-world-of-closures-what-makes-them-useful-24a7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The Wacky World of Closures &amp;amp; What Makes Them Useful&lt;/h2&gt;
      &lt;h3&gt;aruna-x ・ Dec 16 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-power-of-graphql-amp-apis"&gt;
  &lt;/a&gt;
  The power of GraphQL &amp;amp; APIs
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/whitep4nth3r"&gt;@whitep4nth3r&lt;/a&gt; shows us how to get data from a GraphQL API (and shares some helpful definitions along the way). &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/whitep4nth3r" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xCrpC75f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uqkZs4wv--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/492757/3e8de3e2-8172-4cf6-958c-ed1221225d6a.jpg" alt="whitep4nth3r"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/whitep4nth3r/an-introduction-to-graphql-and-how-to-use-graphql-apis-13i" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;An introduction to GraphQL and how to use GraphQL APIs&lt;/h2&gt;
      &lt;h3&gt;Salma Alam-Naylor ・ Dec 14 ・ 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#graphql&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#showing-the-world-your-skills-when-github-is-not-an-option"&gt;
  &lt;/a&gt;
  Showing the world your skills when GitHub is not an option
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/deleteman123"&gt;@deleteman123&lt;/a&gt; wrote this post for anyone who lives in a country that is unable to access GitHub. Nobody should be excluded from getting noticed as a developer just because of US export laws! &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/deleteman123" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Do_cmJ1i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--fcDG_uU4--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/77392/2434afcd-acef-4b1f-a3fb-eeab4acec940.jpg" alt="deleteman123"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/deleteman123/how-can-you-get-noticed-without-a-github-account-2h1h" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How Can You Get Noticed Without a Github Account?&lt;/h2&gt;
      &lt;h3&gt;Fernando Doglio ・ Dec 18 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>How to Dynamically Create Open Graph Images with Cloudinary and Next.js</title>
      <author>Braydon Coyer</author>
      <pubDate>Tue, 21 Dec 2021 14:47:42 +0000</pubDate>
      <link>https://dev.to/braydoncoyer/how-to-dynamically-create-open-graph-images-with-cloudinary-and-nextjs-1pn3</link>
      <guid>https://dev.to/braydoncoyer/how-to-dynamically-create-open-graph-images-with-cloudinary-and-nextjs-1pn3</guid>
      <description>&lt;p&gt;Have you wondered how sites like &lt;a href="http://dev.to"&gt;dev.to&lt;/a&gt; create dynamic and engaging social sharing banners on Twitter, LinkedIn and Facebook?&lt;/p&gt;

&lt;p&gt;I &lt;a href="https://braydoncoyer.dev/blog/introducing-my-new-blogfolio"&gt;revamped my blogfolio&lt;/a&gt; this year and knew I didn't want to continue to create banner images for my articles, and manually create Open Graph images for my social outlets. &lt;/p&gt;

&lt;p&gt;I'm extremely happy with the result - now when I share my articles online, my Open Graph images look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mNkeRGWL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1640022889/dynamic_og_images_preview_ovwxw9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mNkeRGWL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1640022889/dynamic_og_images_preview_ovwxw9.png" alt="Open Graph image contains article title, author, domain and article banner as an image underlay aligned on the right" width="832" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open Graph image contains article title, author, domain and article banner as an image underlay aligned on the right&lt;/p&gt;

&lt;p&gt;In this article, I'll show you how to leverage the powerful Cloudinary API to create dynamic Open Graph images and banners for your website or blog. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;Want to know the secret right away? We'll be passing various variables to the Cloudinary image request URL which will transform a template image and add an article title and banner image.&lt;/p&gt;

&lt;p&gt;Read on to learn how to do this, or check out my &lt;a href="https://github.com/braydoncoyer/braydoncoyer.dev"&gt;open source blogfolio on GitHub&lt;/a&gt; and see how I accomplished this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-open-graph-meta-tags"&gt;
  &lt;/a&gt;
  What are Open Graph meta tags?
&lt;/h2&gt;

&lt;p&gt;Open Graph meta tags help make your content more clickable, sharable and visible on the web, especially on social media.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;meta&lt;/code&gt; tags are small self-closing tags that inform the web how to display your content. The &lt;a href="https://ogp.me"&gt;Open Graph protocol&lt;/a&gt; is part of Facebook's endeavor to consolidate the various technologies and provide developers a single protocol to adhere to in order to allow content to display more richly on the internet. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sign-up-for-cloudinary"&gt;
  &lt;/a&gt;
  Sign up for Cloudinary
&lt;/h2&gt;

&lt;p&gt;First, head to &lt;a href="https://cloudinary.com/invites/lpov9zyyucivvxsnalc5/gle5rlywpxclhxkdtqur"&gt;Cloudinary&lt;/a&gt; and create an account.&lt;/p&gt;

&lt;p&gt;Cloudinary has a free tier containing 25 monthly credits, which can be consumed by transforming images, storing images and videos, and spending the bandwidth needed to access assets in your bucket.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;✨ Cloudinary gifts you extra monthly credits if you follow their social accounts and spread the word about the service through a message on your timeline. Look for these options on your Dashboard.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#upload-your-og-template-to-cloudinary"&gt;
  &lt;/a&gt;
  Upload your OG template to Cloudinary
&lt;/h2&gt;

&lt;p&gt;Next, either find or create a template image that will be used as a starting point for all of the Open Graph banners. This takes care of a lot of initial layout positioning and creates consistency for the OG images.&lt;/p&gt;

&lt;p&gt;The Twitter card images shown in the feed are a 1.91:1 ratio. ****If you're creating your own template, ensure to design it at the recommended resolution of 1200x630.&lt;/p&gt;

&lt;p&gt;As an example, here is a preview of the template I created for my blog. It contains the basic layout, a transparent section on the right-hand side for the article banner to be used as an underlay, and most importantly, contains the text that will remain constant for each social sharing image we create.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WvHzQZtv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1640023518/dynamic_og_template_preview_tjknx7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WvHzQZtv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1640023518/dynamic_og_template_preview_tjknx7.png" alt="For the purpose of this preview, I’ve included a visual transparent section of the template. When you export to png, this will not be visible." width="832" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the purpose of this preview, I’ve included a visual transparent section of the template. When you export to png, this will not be visible.&lt;/p&gt;

&lt;p&gt;Once you've found or created a template, upload the image to Cloudinary under the Media Library.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qfI0FEvc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1640023795/dynamic_og_upload_cloudinary_vzpacl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qfI0FEvc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1640023795/dynamic_og_upload_cloudinary_vzpacl.png" alt="https://res.cloudinary.com/braydoncoyer/image/upload/v1640023795/dynamic_og_upload_cloudinary_vzpacl.png" width="832" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-article-images-to-cloudinary"&gt;
  &lt;/a&gt;
  Add Article images to Cloudinary
&lt;/h3&gt;

&lt;p&gt;It’s also important that your article images are hosted on Cloudinary so you can easily reference the image name when performing the transformation via the API.&lt;/p&gt;

&lt;p&gt;You can either upload images to Cloudinary from your computer, or use one of their integrated tools to discover and import images into your media library. I use the built-in Unsplash integration to add my article banners to my library, but you can use other tools like Shutterstock and iStock.&lt;/p&gt;

&lt;p&gt;With the template and article images uploaded to Cloudinary, we're ready to move to Next.js.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-shared-seo-component"&gt;
  &lt;/a&gt;
  Create a Shared SEO Component
&lt;/h2&gt;

&lt;p&gt;This part is optional depending on your setup. &lt;/p&gt;

&lt;p&gt;I tend to create reusable layout components that I consume on each page depending on the need and purpose. &lt;/p&gt;

&lt;p&gt;If you already have a preexisting Next.js project, you may already have a reusable layout component. Either way, here's the general idea:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a layout component to be used on your article pages.&lt;/li&gt;
&lt;li&gt;Pass children (the actual page content) and render accordingly.&lt;/li&gt;
&lt;li&gt;Pass meta information to be used for SEO purposes, including information which will be used with Cloudinary.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's an example of a layout component I've created called &lt;code&gt;Container&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`bg-white dark:bg-dark min-h-screen'}&amp;gt;
      &amp;lt;NavMenu /&amp;gt;
      &amp;lt;main className="flex flex-col mx-auto max-w-6xl justify-center px-4 bg-white dark:bg-dark prose prose-lg md:prose-xl dark:prose-dark relative"&amp;gt;
        {children}
      &amp;lt;/main&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the snippet above, you can see that I have passed &lt;code&gt;children&lt;/code&gt; to this component which is rendered inside a &lt;code&gt;main&lt;/code&gt; element with appropriate Tailwind utility classes to achieve my desired layout for my blog.&lt;/p&gt;

&lt;p&gt;Since this component will be reused on every page of my application, we can also include SEO information and dynamically pass information based on which page is rendered.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;customMeta&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// create a router to be used in the meta object below&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My site&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A description about my site&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;imageUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path-to-an-image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;article&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="na"&gt;twitterHandle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://twitter.com/BraydonCoyer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;canonicalUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`https://braydoncoyer.dev&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asPath&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;customMeta&lt;/span&gt; &lt;span class="c1"&gt;// this replaces any properties that we pass to the component as props&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`bg-white dark:bg-dark min-h-screen'}&amp;gt;

            &amp;lt;Head&amp;gt;
        &amp;lt;title&amp;gt;{meta.title}&amp;lt;/title&amp;gt;
        &amp;lt;meta name="robots" content="follow, index" /&amp;gt;
        &amp;lt;meta content={meta.description} name="description" /&amp;gt;
        &amp;lt;meta
          property="og:url"
          content={`&lt;/span&gt;&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//braydoncoyer.dev${router.asPath}`}&lt;/span&gt;
        &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"canonical"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canonicalUrl&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:type"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:site_name"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Braydon Coyer"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:description"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:title"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:image"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;imageUrl&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"twitter:card"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"summary_large_image"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"twitter:site"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;twitterHandle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"twitter:title"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"twitter:description"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"twitter:image"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;imageUrl&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"article:published_time"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NavMenu&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"flex flex-col mx-auto max-w-6xl justify-center px-4 bg-white dark:bg-dark prose prose-lg md:prose-xl dark:prose-dark relative"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While this looks like a lot of code, we are simply crafting a meta object to be consumed inside the &lt;code&gt;Head&lt;/code&gt; component that Next.js exposes.&lt;/p&gt;

&lt;p&gt;This is enough to properly have your application leverage SEO: simply pass a few props to the &lt;code&gt;Container&lt;/code&gt; component and you should be good to go! &lt;/p&gt;

&lt;p&gt;However, notice that the &lt;code&gt;meta&lt;/code&gt; tags containing &lt;code&gt;og:image&lt;/code&gt; and &lt;code&gt;twitter:image&lt;/code&gt; using a static image URL. &lt;/p&gt;

&lt;p&gt;Let's make it dynamic with Cloudinary.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-dynamic-og-image-with-the-cloudinary-api"&gt;
  &lt;/a&gt;
  Building a Dynamic OG Image with the Cloudinary API
&lt;/h2&gt;

&lt;p&gt;Cloudinary's API supports text and image overlays, providing an easy way to dynamically transform images. &lt;/p&gt;

&lt;p&gt;Utilizing the API is as simple as appending variables to the URL of an image hosted on Cloudinary. &lt;/p&gt;

&lt;p&gt;In the end, the URL may look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://res.cloudinary.com/braydoncoyer/image/upload/w_1200,h_630,c_fill,f_auto/w_580,h_630,c_fill,u_learn_tailwindplay_banner.jpg/fl_layer_apply,g_east/w_630,h_450,c_fit,co_rgb:FFFFFF,g_west,x_45,y_-40,l_text:arial_60_bold:Learn%20Tailwind%20with%20TailwindPlay/og_social_large.png
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The URL is a bit cumbersome, but let me break it down from top to bottom:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;https://res.cloudinary.com/braydoncoyer/&lt;/code&gt; - a base URL containing my Cloudinary account name.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;image/upload&lt;/code&gt; - the asset type.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;w_1200,h_630&lt;/code&gt; - the width and height for the entire image.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;c_fill&lt;/code&gt; - crop mode.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;f_auto&lt;/code&gt; - automatically chooses the best format based upon which browser is being used.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;w_580,h_630&lt;/code&gt; - the size of the image underlay.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;u_learn_tailwindplay_banner.jpg&lt;/code&gt; - the name of the banner associated with the article.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;fl_layer_apply&lt;/code&gt; - applies all chained transformations on the underlaid image.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;g_east&lt;/code&gt; - informs Cloudinary which sector on the image to place the underlay.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;w_630,h_450&lt;/code&gt; - the size of a text box&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;co_rgb:FFFFFF&lt;/code&gt; - specifies the text color&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;g_west,x_45,y_-40&lt;/code&gt; - determines which sector to place the text, and includes exact pixel positions.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;text:arial_60_bold:&lt;/code&gt; - font name and size.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Learn%20Tailwind%20with%20TailwindPlay&lt;/code&gt; - the encoded text value to display on the left-side of the image.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;og_social_large.png&lt;/code&gt; - the name of the template uploaded to Cloudinary.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#configure-a-function-to-generate-the-cloudinary-url"&gt;
  &lt;/a&gt;
  Configure a function to generate the Cloudinary URL
&lt;/h3&gt;

&lt;p&gt;Manually creating a URL like this would be extremely tedious and time-consuming. To make the process easier, let's create a function to build the Cloudinary URL and return it to us. &lt;/p&gt;

&lt;p&gt;I've created a file called &lt;code&gt;generateSocialImage&lt;/code&gt; in my &lt;code&gt;lib&lt;/code&gt; directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generateSocialImage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;cloudName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;imagePublicID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;cloudinaryUrlBase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://res.cloudinary.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;titleFont&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;arial&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;titleExtraConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;_bold&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;underlayImageWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;580&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;underlayImageHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;630&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;underlayImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;imageWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;imageHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;630&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;textAreaWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;630&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;textAreaHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;450&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;textLeftOffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;textBottomOffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;textColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FFFFFF&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;titleFontSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;
&lt;span class="p"&gt;}):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// configure social media image dimensions, quality, and format&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;imageConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;`w_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;imageWidth&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;`h_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;imageHeight&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c_fill&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;f_auto&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// configure the underlay - the actual article banner&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;underlayClonfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;`w_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;underlayImageWidth&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;`h_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;underlayImageHeight&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;`c_fill`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;`u_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;underlayImage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/fl_layer_apply`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;`g_east`&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;// configure the title text&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;titleConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;`w_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;textAreaWidth&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;`h_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;textAreaHeight&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c_fit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;`co_rgb:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;textColor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;g_west&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;`x_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;textLeftOffset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;`y_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;textBottomOffset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;`l_text:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;titleFont&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;titleFontSize&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;titleExtraConfig&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;encodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;title&lt;/span&gt;
    &lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// combine all the pieces required to generate a Cloudinary URL&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;urlParts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;cloudinaryUrlBase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;cloudName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;upload&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;imageConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;underlayClonfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;titleConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;imagePublicID&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;// remove any falsy sections of the URL (e.g. an undefined version)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validParts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;urlParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// join all the parts into a valid URL to the generated image&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;validParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the most part, you can plug in your information and the function will work as expected. You can tinker with the destructured props to change the position of the text and image to fit your needs.&lt;/p&gt;

&lt;p&gt;I call this function on my article page, where I can pass the article title and banner image to the function. The function returns the new Cloudinary URL and is then provided to the &lt;code&gt;Container&lt;/code&gt; component. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;📣 Recall that the &lt;code&gt;Container&lt;/code&gt; component hosts the &lt;code&gt;meta&lt;/code&gt; tags needed for proper search engine optimization.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Please note the image named passed as &lt;code&gt;imagePublicID&lt;/code&gt; - this is the name of the template image uploaded to Cloudinary. Make sure you swap this name out to match the name of the template you uploaded in your Cloudinary media library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// [slug].ts&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;socialImageConf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generateSocialImage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;underlayImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;coverImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coverImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastIndexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;cloudName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;braydoncoyer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;imagePublicID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;og_social_large.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// the OG template image name uploaded in Cloudinary &lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Container&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;imageUrl&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;socialImageConf&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// pass the dynamic URL here&lt;/span&gt;
    &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;publishedDate&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'article'&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        ...
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing-your-social-sharing-open-graph-images"&gt;
  &lt;/a&gt;
  Testing your social sharing Open Graph images
&lt;/h2&gt;

&lt;p&gt;Once everything is hooked up and configured appropriately, you should be able to run your Next.js project ( &lt;code&gt;npm run dev&lt;/code&gt; ) and see the &lt;code&gt;meta&lt;/code&gt; tags on the DOM under the &lt;code&gt;head&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--09n7NdyP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1640024175/dynamic_og_constructued_url_ls7uma.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--09n7NdyP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1640024175/dynamic_og_constructued_url_ls7uma.png" alt="https://res.cloudinary.com/braydoncoyer/image/upload/v1640024175/dynamic_og_constructued_url_ls7uma.png" width="832" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Look for the &lt;code&gt;og:image&lt;/code&gt; tag, copy the URL and paste it in a new tab. If everything works, you should see your new dynamic Open Graph image that will appear on social media outlets!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-online-tools-to-validate-the-open-graph-images"&gt;
  &lt;/a&gt;
  Using online tools to validate the Open Graph images
&lt;/h3&gt;

&lt;p&gt;Once your application is published, grab the full article slug and paste it into the textbox on &lt;a href="http://socialsharepreview.com"&gt;socialsharepreview.com&lt;/a&gt; - a tool that validates that your meta tags are correctly configured for the web.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MvV6fq_u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1640024270/dynamic_og_check_preview_lkzcxh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MvV6fq_u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1640024270/dynamic_og_check_preview_lkzcxh.png" alt="https://res.cloudinary.com/braydoncoyer/image/upload/v1640024270/dynamic_og_check_preview_lkzcxh.png" width="832" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;And with that - you've now created a system that dynamically creates Open Graph images for social outlets using Cloudinary and Next.js! &lt;/p&gt;

&lt;p&gt;If you've made it this far and completed this article, I'd love for you to reach out to me on &lt;a href="https://twitter.com/BraydonCoyer"&gt;Twitter&lt;/a&gt; and send me a link to your blog or website so I can see the Open Graph images at work!  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.contentful.com/blog/2021/09/08/personalized-image-social-sharing-with-cloudinary-nextjs/"&gt;How to build a personalized image social sharing app with Cloudinary and Next.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.juanfernandes.uk/blog/automated-open-graph-images-with-11ty-and-cloudinary/"&gt;Automated Open Graph Images with 11ty and Cloudinary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://urre.me/writings/dynamic-open-graph-images/"&gt;Dynamic Open Graph Images&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>cloudinary</category>
      <category>nextjs</category>
    </item>
  </channel>
</rss>
