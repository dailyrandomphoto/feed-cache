<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>AI &amp;amp; JavaScript with TensorFlow.js</title>
      <author>Gant ‚Ñíùí∂ùí∑‚Ñ¥ùìáùíπ‚ÑØ </author>
      <pubDate>Tue, 27 Apr 2021 19:20:54 +0000</pubDate>
      <link>https://dev.to/aws-builders/ai-amp-javascript-with-tensorflow-js-40ae</link>
      <guid>https://dev.to/aws-builders/ai-amp-javascript-with-tensorflow-js-40ae</guid>
      <description>&lt;p&gt;I've been having a blast with AI for years, and the pace keeps accelerating.  &lt;/p&gt;

&lt;p&gt;I can't wait for every code newbie to be able to build the future with AI and JS.  Here's a lil blog post on my current vibe with ML in JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yhWAyFV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abaccujjvdclhh8mm9mc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yhWAyFV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abaccujjvdclhh8mm9mc.gif" alt="Rock Paper Scissors TensorFlow.js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I keep getting invited to conferences and meeting new people who are surprised that this tech is real.  After one talk, they see how to apply TensorFlow.js in new ways and products.&lt;/p&gt;

&lt;p&gt;The web applications are numerous!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VnHAL8NW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b4vbq6kfz5gvcumldbct.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VnHAL8NW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b4vbq6kfz5gvcumldbct.gif" alt="Enjoying The Show Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ALSO: I'm proud to mention I'll be featured on a @ReactNativeRdio episode where I'll talk about the cool stuff in JS mobile dev.  Episode dropping soon!&lt;br&gt;
&lt;a href="https://reactnativeradio.com/"&gt;https://reactnativeradio.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It reminds me of that time on stage when I did AI in React Native live!  I still smile every time I watch this video.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/GantLaborde/status/1037684497834287108"&gt;NicOrNot Stage Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eLQuzP-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9p1zksl2hlk6t4cuy4z0.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eLQuzP-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9p1zksl2hlk6t4cuy4z0.JPG" alt="Nic or Not website"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The truth is people who code are unleashed when they learn what they can do.  That's why we've lead Open Source in TensorFlow JS.  &lt;/p&gt;

&lt;p&gt;We've created libraries that improve quality of life for everyone, and made it free.  NSFWJS is used around the world and has 4.5k stars.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nsfwjs.com/"&gt;https://nsfwjs.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BmnAnKwl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xakj9y4kkl5bppf2rkws.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BmnAnKwl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xakj9y4kkl5bppf2rkws.jpg" alt="NSFWJS Site"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But computer vision can be complex to a new Front-End dev, so it's also important to know when to be fun, too.  Hopefully, there's enough Trekkie &amp;amp; Harry Potter Nerds to make my poorly drawn examples make sense&lt;br&gt;
&lt;a href="http://aisortinghat.com/"&gt;http://aisortinghat.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NB-aiYTD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h17zsw3yajcyajsw6mhc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NB-aiYTD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h17zsw3yajcyajsw6mhc.png" alt="Harry Potter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're into Web Development then I highly recommend you watch &lt;br&gt;
@jason_mayes on twitter.&lt;br&gt;
He runs the TensorFlow.js show and tell videos on YouTube.&lt;/p&gt;

&lt;p&gt;Or at the very least subscribe to his #MadeWithTFJS hashtag and see your fellow devs create&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NLLjy83i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/55np0kt18koa8o8eyg8c.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NLLjy83i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/55np0kt18koa8o8eyg8c.jpg" alt="Jason Mayes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lastly, my book by O'Reilly Media is in Quality Check 2, which means you can pre-order it on Amazon, so you can invest in you and your team's education.  &lt;/p&gt;

&lt;p&gt;It won't be long before every JavaScript Developer is wielding Deep Learning.&lt;/p&gt;

&lt;p&gt;Get the Book: &lt;a href="https://amzn.to/3dR3vpY"&gt;https://amzn.to/3dR3vpY&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://amzn.to/3dR3vpY"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1veEkKRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4tcz9rm4pgdezbau4is.jpg" alt="learning TensorFlow.js"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tensorflow</category>
      <category>tensorflowjs</category>
      <category>ai</category>
      <category>javascript</category>
    </item>
    <item>
      <title>My journey as an AWS Community Builder so far</title>
      <author>Ibrahim Cesar</author>
      <pubDate>Tue, 27 Apr 2021 19:17:03 +0000</pubDate>
      <link>https://dev.to/aws-builders/my-journey-as-an-aws-community-builder-so-far-14n8</link>
      <guid>https://dev.to/aws-builders/my-journey-as-an-aws-community-builder-so-far-14n8</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Hi there. You‚Äôve made it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It was with this simple opening, James Dunn, the AWS Community Builders Program Manager made my day. Well, my night in fact, it was October 16, almost 10pm. After the initial rush of joy, the impostor syndrome kicks in‚Äîas if Jason was reading my mind this sentence came: &lt;em&gt;You‚Äôre exactly the kind of person we‚Äôre looking for&lt;/em&gt;. I felt welcomed. Being part of this community has been such an incredible gift. Now, after 6 months I looked back in my journey so far and can say without a doubt how my growth as a cloud professional was boosted by and from the community.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-great-flood-of-linkedin-contacts"&gt;
  &lt;/a&gt;
  The Great Flood of LinkedIn Contacts
&lt;/h2&gt;

&lt;p&gt;After the welcome calls, the ‚ÄúCommunity Builder‚Äù started to materially, so to speak. We put on our LinkedIn and Twitter bios and used our organization, this very yours here in Dev.to and identified ourselves with logos, cover images.&lt;/p&gt;

&lt;p&gt;This lead to we followed each other in several networks, but in LinkedIn was a Great Flood. In the early days were dozens and dozens of invites. Some people felt overwhelmed. For me, I can see, even is not a ‚Äúbusiness contact‚Äù or I fully know the person, I can say I enriched for sure my feed. In Brazil, the usual LinkedIn content is ‚Äúfell good‚Äù or ‚Äúhustle‚Äù stories or success cases. Then, I got content‚Äîgreat content from several aspects of the cloud.&lt;/p&gt;

&lt;p&gt;I think I could found a quality in the quantity of new contacts of LinkedIn because we share somebody of knowledge, challenges and information we find relevant and common topics. That‚Äôs what‚Äôs makes a community.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#random-acts-of-kindness"&gt;
  &lt;/a&gt;
  Random acts of kindness
&lt;/h2&gt;

&lt;p&gt;Be a community builder can be also somewhat be a full-time job. As part of Amplify‚Äôs Discord, and with a ‚ÄúCommunity Badge‚Äù after interacting within one or another thread, people just popped from nowhere, sometimes without &lt;em&gt;any&lt;/em&gt; context, asking for my help, sometimes with code snippets and in frameworks and didn‚Äôt have any knowledge.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZdTa0hI8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ils2y7w4oub507rzha8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZdTa0hI8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ils2y7w4oub507rzha8.png" alt="Random requests"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My first approach was to treat this as ‚Äúrandom acts of kindness‚Äù‚ÄîI was once and I‚Äôm very often in the web looking for answers, what I can help just happened of I‚Äôve seem that before. I would help as much as I could and I even got surprised by helping people in frameworks I don‚Äôt have any leverage. &lt;em&gt;What&lt;/em&gt;‚Äîthe snarky voice in my head says (and now writing in English, sounds exactly like &lt;a href="https://twitter.com/quinnypig"&gt;Corey Quinn‚Äôs&lt;/a&gt;‚Äî&lt;em&gt;you are doing unpaid job and loving it&lt;/em&gt;. Yes, that‚Äôs right. First, I volunteer. Second, my daily job is to help developers understand better their contexts and tools and doing this kind of invisible, no glamour job, makes me feel giving back to community as much as community gave to me. Every npm we download to our &lt;em&gt;node_modules&lt;/em&gt; there're a person and a chunk of that person‚Äôs hours and life there. Most of the time I just point a way and people find themselves. And not one doesn‚Äôt say thanks until now (Side note: I can &lt;em&gt;barely&lt;/em&gt; imagine what could be the life of an &lt;em&gt;AWS hero&lt;/em&gt;! If I, receive one or two per week of these, in several platforms: by email (I think they find through my LinkedIn or GitHub), Twitter or Discord, imagine they, with a much bigger platform and role). I grow helping others.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tupi-or-not-tupi"&gt;
  &lt;/a&gt;
  Tupi or not tupi?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Tupi_people"&gt;Tupi people&lt;/a&gt; were one of the most many peoples indigenous to Brazil, before colonisation‚Äîand then, you know, the genocide happened and their lands became a country. But Tupi is sort of ‚ÄúBrazilian stamp‚Äù and it happens to sounds close enough of ‚ÄúTo be‚Äù and it was created by the Brazilian poet Oswald de Andrade in his 1928‚Äôs Manifesto Antropof√°gico, or &lt;a href="https://en.wikipedia.org/wiki/Manifesto_Antrop%C3%B3fago"&gt;Anthropophagic Manifesto&lt;/a&gt;. Earlier this year I made &lt;a href="https://ibrahimcesar.cloud/blog/tupi-or-not-tupi/"&gt;a post with this phrase as title on my blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Very simple example, &lt;code&gt;data&lt;/code&gt; in Brazilian Portuguese is &lt;code&gt;date&lt;/code&gt; in English. It looks little but &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;date&lt;/code&gt; are so ubiquitous in programming, be front or backend that is easy to find someone confusing the terms or using one meaning to another and so on, because of the cognitive dissonance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.infoq.com/"&gt;InfoQ&lt;/a&gt;, a software development news outlet has a Brazilian version that &lt;a href="https://www.infoq.com/br/news/2021/02/ultimo-conteudo-do-infoq-brasil/"&gt;published its last Brazilian Portuguese content in February 2021&lt;/a&gt;. This was the reason, in my attempt to ‚Äútranslate‚Äù:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In these 12 years a lot has changed too. And one of the many changes was that more people, in this software development market, learned English. In special this more seniority level public InfoQ Brasil target. With domain in reading English, we realized that makes little sense to these people wait weeks, months, to consume a content in Portuguese translated by us (Translator‚Äôs Note: We Brazilians just call Brazilian Portuguese as Portuguese), with the original content at a click to be accessed.&lt;/p&gt;

&lt;p&gt;We realized English domain made people to write in English, making more difficult to get original content for InfoQ Brasil, which could be a nice to have for the Brazilian market. Believe or not, in 2020 we had more Brazilian people writing original content for InfoQ in English than Brazilian people writing original content for InfoQ in Portuguese.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are a lot of incentives in play to this. The audience is bigger and, to be quite frank, there‚Äôs a &lt;em&gt;bias&lt;/em&gt; against content in Portuguese in relation to a content in English. I know this because &lt;em&gt;I&lt;/em&gt; have this bias, even writing original pieces in Portuguese for my blog, and committed to do so.&lt;/p&gt;

&lt;p&gt;There are Brazilians developers that choose to do their total online presence in English, I don‚Äôt like the idea. It‚Äôs like had to act with an online persona than what I am ‚Äì a Brazilian developer in an interconnected World where English is on programming languages and the language where the most important conversations and discussions happen. I was afraid to even publish something other than my mother's language. Besides self taught programmer, I‚Äôm self taught in English as well. To find your ‚Äúvoice‚Äù even in your language is very difficult, is a process that you start by emulating others until you feel more comfortable, find your ‚Äúvoice‚Äù in another language is really &lt;em&gt;really&lt;/em&gt; difficult. And this was an issue because I didn‚Äôt want to create lists of things or just write for the sake of publish something in English. Then, inspired by a &lt;a href="https://offbynone.io/new-serverless-writers/"&gt;promotion to first-time serverless writers&lt;/a&gt; from Serverless &lt;code&gt;Super&lt;/code&gt;Hero Jeremy Daly‚Äôs &lt;a href="https://offbynone.io/"&gt;off-by-none&lt;/a&gt; I published:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ibrahimcesar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kfkWRBf2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--0zkQIbKi--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/189167/695f3dd9-b865-4c57-a097-5cfe07cca488.jpg" alt="ibrahimcesar image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/serverless-transformation-on-a-news-media-outlet-in-brazil-3ed9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Serverless Transformation on a news media outlet in Brazil&lt;/h2&gt;
      &lt;h3&gt;Ibrahim Cesar „Éª Nov 28 '20 „Éª 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#serverless&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#braziliandevs&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Which was a written version of a &lt;a href="https://www.youtube.com/watch?v=icUhsz5OUCU&amp;amp;t=4150s"&gt;talk I gave at Serverless Week 2020&lt;/a&gt; from AWS User Groups here in Brazil which was my first talk about anything Cloud. Here on dev.to and shut down the internet for the day and I ran to hide myself under the covers. I won one of tickets and the &lt;a href="https://www.stephaniemorillo.co/product-page/the-developer-s-guide-to-content-creation"&gt;The Developer‚Äôs Guide to Content Creation&lt;/a&gt; gave a lot of insights on how to produce better content. I had this article for so much time in my draft and then... I got feedback. People came to talk to me.&lt;/p&gt;

&lt;p&gt;Regarding the choice ‚ÄúTupi or not tupi?‚Äù my approach is not to choose. I tweet both in English and Brazilian Portuguese, use my personal blog for posts in my primary language and dev.to posts for content in English. There‚Äôs a lot of work to be done in Brazilian Portuguese to help educate and bring to teach people who lack the opportunities to learn and develop their English skills. And I‚Äôm committed to help my peers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-heard-and-listen"&gt;
  &lt;/a&gt;
  Be heard, and listen
&lt;/h2&gt;

&lt;p&gt;After that, I publish some post after, both in English and Portuguese. Engaged in some courses and the talks from AWS Community Builders help so so much. I have a tremendous respect for all Developer Advocates from AWS, and there are so many, but &lt;a href="https://aws.amazon.com/pt/blogs/compute/author/jbeswick/"&gt;James Beswick&lt;/a&gt; help me a lot with all his great content. He motivated me to explore more of my writing. So, I worked on a long form piece I was thinking a lot about in the space of serverless. At the same time,  &lt;a href="https://thedevconf.com/tdc/2021/innovation/trilha-stadium-quinta"&gt;The Developers Conference Innovation&lt;/a&gt; accepted a talk addressing the same subject only in a form of a question instead of an assertion: &lt;a href="https://ibrahimcesar.cloud/talks/2021-03-25-serverless-pronto/"&gt;‚ÄúServerless is Ready? We, Developers, are not‚Äù&lt;/a&gt;, so my focus was more on the side of make a case for Serverless readiness. So, for the first time I spoke at a large audience and held the honor to present myself as ‚ÄúAWS Community Builder‚Äù.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d4zmmXxa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qd1lsk6td4tf0qkr1cf1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d4zmmXxa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qd1lsk6td4tf0qkr1cf1.png" alt="About me"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that I published the piece on a lot of concepts and shifts in industry I was dealing and trying to navigate on my daily work experience:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ibrahimcesar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kfkWRBf2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--0zkQIbKi--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/189167/695f3dd9-b865-4c57-a097-5cfe07cca488.jpg" alt="ibrahimcesar image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/serverless-is-ready-developers-are-not-12f9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Serverless is Ready, Developers Are Not&lt;/h2&gt;
      &lt;h3&gt;Ibrahim Cesar „Éª Mar 28 „Éª 11 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#serverless&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#development&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;I know I will sound a totally fanboy, but I was exploding in joy with the reception. They cited me in my favorite readings on serverless: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://offbynone.io/"&gt;Off-by-none&lt;/a&gt;, &lt;em&gt;two&lt;/em&gt; times. I almost cried ü•≤ &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aENnbi1B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wehew8m1vjjvgyvodddv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aENnbi1B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wehew8m1vjjvgyvodddv.jpeg" alt="off by none"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MHwg4XQi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9v7690ix7fcdt9potoyn.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MHwg4XQi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9v7690ix7fcdt9potoyn.jpeg" alt="off by none"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The awesome &lt;a href="https://serverless.email/"&gt;Serverless Status&lt;/a&gt; from Cooperpress:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jj_DyUoF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndvyxsf130uqheoifbmt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jj_DyUoF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndvyxsf130uqheoifbmt.png" alt="Serverless Status"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;And&lt;/em&gt; &lt;a href="https://www.getrevue.co/profile/serverless-transformation"&gt;Serverless Transformation&lt;/a&gt; - by Theodo. You can see that even my first post in English. how much they influenced me.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--06QIQa9Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xz2ger725xnyf2i9o6bk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--06QIQa9Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xz2ger725xnyf2i9o6bk.png" alt="Serverless Transformation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I could not believe! I got featured on my own &lt;em&gt;Big Three&lt;/em&gt; source of news for serverless and resonate with people I respect from the community.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8kRIIcqP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1123535071674281985/00Gp5S5c_normal.png" alt="Sheen Brisals profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Sheen Brisals
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/sheenbrisals"&gt;@sheenbrisals&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Nice readüëá &lt;a href="https://twitter.com/ibrahimcesar"&gt;@ibrahimcesar&lt;/a&gt; üëè&lt;br&gt;&lt;br&gt;My take is, "&lt;a href="https://twitter.com/hashtag/Serverless"&gt;#Serverless&lt;/a&gt; is ready. Developers are ready. Organisations are not."&lt;br&gt;&lt;br&gt;Often organisations are cast with the 'evil spell of fear' by traditional thinkers. Lock-in, agnostic, etc., spins them and slows their progress. &lt;a href="https://t.co/wJXoStoAJF"&gt;twitter.com/ibrahimcesar/s‚Ä¶&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:51 PM - 30 Mar 2021
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            Ibrahim Cesar
          &lt;/span&gt;
          &lt;a class="mentioned-user" href="https://dev.to/ibrahimcesar"&gt;@ibrahimcesar&lt;/a&gt;

        &lt;/div&gt;
        Inspired by &lt;a class="mentioned-user" href="https://dev.to/andrewbrown"&gt;@andrewbrown&lt;/a&gt;
 I started to think a lot about his phrase "Serverless is Ready, Developers Are Not", so I wrote this post on &lt;a class="mentioned-user" href="https://dev.to/thepracticaldev"&gt;@thepracticaldev&lt;/a&gt;
 #serverless #serverlessforeveryone #awscommunity https://t.co/hLEJFBI8uy
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1376985471943852040" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1376985471943852040" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1376985471943852040" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;I felt &lt;em&gt;I existed&lt;/em&gt; out there; you know? I could make an impact and not only listen but speak. Heard. Dialog. Interchange experiences. Grow together.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--BYKpqSIQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1315542552720932865/AYvPQ8RA_normal.jpg" alt="Lou ‚òÅÔ∏è üë®‚ÄçüíªüèãÔ∏è‚Äç‚ôÇÔ∏èüé∏üö¥üèª‚Äç‚ôÇÔ∏èüèç profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Lou ‚òÅÔ∏è üë®‚ÄçüíªüèãÔ∏è‚Äç‚ôÇÔ∏èüé∏üö¥üèª‚Äç‚ôÇÔ∏èüèç
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/loujaybee"&gt;@loujaybee&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      "Serverless is Ready, Developers Are Not". &lt;br&gt;&lt;br&gt;Serverless isn't simple. &lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/ibrahimcesar"&gt;@ibrahimcesar&lt;/a&gt; put into words something I've been thinking about for a while. When I see just "create a Lambda" in the AWS docs I wince because... it's not that simple. &lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/JiBlcNLgBT"&gt;buff.ly/39tGzdn&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      07:52 AM - 31 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1377166778619457541" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1377166778619457541" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1377166778619457541" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#technology-is-political-and-be-part-of-a-community-is-political-too"&gt;
  &lt;/a&gt;
  Technology &lt;em&gt;is&lt;/em&gt; political. And be part of a community is political &lt;em&gt;too&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;‚ÄúPolitical‚Äù is for some people like a ‚Äúreserved‚Äù word we can‚Äôt use in certain contexts or at all in tech. I think is misled, confusing partisan with political. Politics is the set of activities that are associated with deciding in groups, or other forms of power relations between individuals, such as the distribution of resources or status. A technology is a tool that is used by people for some purpose, usually to further their own interests in a society comprising other people. That makes it political.&lt;/p&gt;

&lt;p&gt;So being part of the AWS Community Builders gave so much: a ‚Äúplace‚Äù to feel welcomed, peers I admire, access to so much content and people that I can learn a lot (and for Brazilians, right now, courses or anything paid in dollar is very difficult‚ÄîA financial benefit I got from the program was a free voucher to the Solutions Architect exam - which I passed last February). And even without any coordination I was fortunate enough to appear in &lt;a href="https://aws.amazon.com/pt/blogs/startups/news-startup-nexo-runs-a-lean-tech-team-by-leveraging-aws-and-amplify/"&gt;AWS Startups on my birthday&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Even when you feel cannot make a difference as an individual, you can still make a difference in a group. I expect to be giving as much as I‚Äôm receiving as an AWS Community Builder.&lt;/p&gt;

&lt;p&gt;A great thank you, James Dunn and Elise Greve! You made the difference for me! I hope others along the way!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jznaMPcc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fwcoasgcnrq7vm3spda.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jznaMPcc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fwcoasgcnrq7vm3spda.png" alt="AWS Community Builders"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Hello, thanks for reaching the end! I also do some open source work. If you use AWS Lambdas and the outstanding Middy, I made a middleware to validate reCAPTCHA tokens:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ibrahimcesar"&gt;
        ibrahimcesar
      &lt;/a&gt; / &lt;a href="https://github.com/ibrahimcesar/middy-recaptcha"&gt;
        middy-recaptcha
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      üõµ üîê reCAPTCHA validation Middy middleware for yours AWS Lambdas
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt; &lt;div&gt;
  &lt;h1&gt;
üõµ üîê  reCAPTCHA Middleware for Middy&lt;/h1&gt;
  &lt;blockquote&gt;reCAPTCHA validation Middy middleware for yours AWS Lambdas&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/ellerbrock/typescript-badges/"&gt;&lt;img src="https://camo.githubusercontent.com/1d1f56c37cf5dfd1b9c3782a8d1d6fe07f8764e8c35f53ec90460e5b38cd8f7d/68747470733a2f2f6261646765732e66726170736f66742e636f6d2f747970657363726970742f636f64652f747970657363726970742e7376673f763d313031" alt="TypeScript"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/middy-recaptcha" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9d4c732b30594cf690ba9c3a7b624baebb995f24f4b6b172d1ce76ce28370ffe/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f6d696464792d7265636170746368613f6c6162656c3d6c617465737425323076657273696f6e" alt="Version"&gt;&lt;/a&gt;¬† ¬†&lt;a href="https://raw.githubusercontent.com/ibrahimcesar/middy-recaptcha/main/./LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/4ae491794898f1c8830ef048ef6895f1f18f24155edd8f3145732959fcb86bd1/68747470733a2f2f62616467656e2e6e65742f6769746875622f6c6963656e73652f6962726168696d63657361722f6d696464792d726563617074636861" alt="License"&gt;&lt;/a&gt;¬† ¬†&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/9976d742c6544286ed280b9dc4827aea036b80039fb4d3710d96c4c170b6746c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f6962726168696d63657361722f6d696464792d7265636170746368612f627567"&gt;&lt;img src="https://camo.githubusercontent.com/9976d742c6544286ed280b9dc4827aea036b80039fb4d3710d96c4c170b6746c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f6962726168696d63657361722f6d696464792d7265636170746368612f627567" alt="GitHub issues by-label"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Developed in üáßüá∑ &lt;span&gt;Brazil&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;
üõµ What it does&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://middy.js.org/" rel="nofollow"&gt;Middy&lt;/a&gt; is a very simple middleware engine that allows you to simplify your AWS Lambda code when using Node.js. As I always had to implement and reimplement this type of logic, I decide to wrap up and give back tcommunity middleware for that validates a reCAPTCHA token in the body of a &lt;code&gt;POST&lt;/code&gt; request.&lt;/p&gt;
&lt;h3&gt;
What is Middy&lt;/h3&gt;
&lt;p&gt;From the docs:&lt;/p&gt;
&lt;p&gt;If you have used web frameworks like Express, then you will be familiar with the concepts adopted in Middy and you will be able to get started very quickly.&lt;/p&gt;
&lt;p&gt;A middleware engine allows you to focus on the strict business logic of your Lambda and then attach additional common elements like authentication, authorization, validation, serialization, etc. in a modular and reusable way by decorating the main business logic.&lt;/p&gt;‚Ä¶&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ibrahimcesar/middy-recaptcha"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Thanks for reading. Please leave your thoughts, takes and insights in the comments!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>community</category>
    </item>
    <item>
      <title>Awesome Forms with Solidjs</title>
      <author>John Carroll</author>
      <pubDate>Tue, 27 Apr 2021 18:56:15 +0000</pubDate>
      <link>https://dev.to/johncarroll/awesome-forms-with-solidjs-18gi</link>
      <guid>https://dev.to/johncarroll/awesome-forms-with-solidjs-18gi</guid>
      <description>&lt;p&gt;I recently started falling in love with &lt;a href="https://github.com/solidui/solid"&gt;Solidjs&lt;/a&gt;, a javascript library that looks like React but is significantly faster and, dare I say, has a notably better API. Unlike React, Solidjs component functions are invoked only once when the component is initialized and then never again.&lt;/p&gt;

&lt;p&gt;I decided to take advantage of Solidjs' strengths, and build a 9kb min zipped library to aid with user input forms: &lt;a href="https://gitlab.com/john.carroll.p/rx-controls"&gt;rx-controls-solid&lt;/a&gt;. Let's dive in and see what we can do (note, if you want an introduction to Solidjs, &lt;a href="https://dev.to/ryansolid/introducing-the-solidjs-ui-library-4mck"&gt;start here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Let's create a simple &lt;code&gt;TextField&lt;/code&gt; component in typescript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;withControl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rx-controls-solid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TextField&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;withControl&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// prop.control is static for the lifetime of the component&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;control&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'input-label'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;oninput&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;markDirty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onblur&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;markTouched&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This component tracks whether it has been &lt;code&gt;touched&lt;/code&gt; by a user (notice &lt;code&gt;onblur&lt;/code&gt; callback) and whether it has been changed by a user (&lt;code&gt;oninput&lt;/code&gt;). When a user changes the value, we mark the control as &lt;code&gt;dirty&lt;/code&gt;. We also have the ability to set a label on the input as well as a placeholder. Pretty straightforward stuff.&lt;/p&gt;

&lt;p&gt;But text field's are &lt;em&gt;rarely&lt;/em&gt; used in isolation. We want to build a component to collect some address information. This will involve asking for a &lt;code&gt;Street&lt;/code&gt;, &lt;code&gt;City&lt;/code&gt;, &lt;code&gt;State&lt;/code&gt;, and &lt;code&gt;Postcode&lt;/code&gt;. Lets use our &lt;code&gt;TextField&lt;/code&gt; component to create our &lt;code&gt;AddressForm&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;withControl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;FormGroup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rx-controls-solid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;toSignal&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./utils&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;controlFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormGroup&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;street&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AddressForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;withControl&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;controlFactory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;control&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isControlValid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;valid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isControlTouched&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;touched&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isControlDirty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dirty&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;fieldset&lt;/span&gt; &lt;span class="na"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;is-valid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isControlValid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;is-invalid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isControlValid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;is-touched&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isControlTouched&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;is-untouched&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isControlTouched&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;is-dirty&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isControlDirty&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;is-clean&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isControlDirty&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TextField&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Street"&lt;/span&gt; &lt;span class="na"&gt;controlName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"street"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TextField&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"City"&lt;/span&gt; &lt;span class="na"&gt;controlName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"city"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TextField&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"State"&lt;/span&gt; &lt;span class="na"&gt;controlName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"state"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TextField&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Postcode"&lt;/span&gt; &lt;span class="na"&gt;controlName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"zip"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;fieldset&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the address form, itself, is also wrapped &lt;code&gt;withControl()&lt;/code&gt;. This allows the &lt;code&gt;AddressForm&lt;/code&gt; to also be used as a form component in a larger parent form.&lt;/p&gt;

&lt;p&gt;We want our &lt;code&gt;AddressForm&lt;/code&gt; to use a &lt;code&gt;FormGroup&lt;/code&gt; control rather than the default &lt;code&gt;FormControl&lt;/code&gt; so we provide a &lt;code&gt;controlFactory&lt;/code&gt; function which initializes the control.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;controlFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormGroup&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;street&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AddressForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;withControl&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;controlFactory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;control&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isControlValid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;valid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="c1"&gt;// continued...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All we needed to do to connect our AddressForm control to the &lt;code&gt;TextField's&lt;/code&gt; control was to use the &lt;code&gt;controlName="street"&lt;/code&gt; property to specify which FormControl on the parent should be connected with the child TextField.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TextField&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Street"&lt;/span&gt; &lt;span class="na"&gt;controlName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"street"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TextField&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"City"&lt;/span&gt; &lt;span class="na"&gt;controlName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"city"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also set the component up to apply css classes based on if the &lt;code&gt;AddressForm&lt;/code&gt; is valid/invalid, edited/unedit, and touched/untouched. There's actually a helper function to make applying css classes really easy, but for the sake of education I didn't use it for this example.&lt;/p&gt;

&lt;p&gt;Say we want to hook our AddressForm component into a larger form. That's also easy!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyLargerForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;withControl&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;controlFactory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormGroup&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormGroup&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;street&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;        
      &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;control&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// because we can&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastNameControl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;fieldset&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TextField&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"First name"&lt;/span&gt; &lt;span class="na"&gt;controlName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"firstName"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TextField&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Last name"&lt;/span&gt; &lt;span class="na"&gt;control&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;lastNameControl&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;fieldset&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AddressForm&lt;/span&gt; &lt;span class="na"&gt;controlName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"address"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And, with just a few steps, we have a very powerful, very composible set of form components. As changes happen to the &lt;code&gt;TextField&lt;/code&gt; components, those changes flow upwards and automatically update the parent &lt;code&gt;FormGroup&lt;/code&gt; components.&lt;/p&gt;

&lt;p&gt;We can easily listen to any of these changes and respond to them via the parent.&lt;/p&gt;

&lt;p&gt;For example, to listen to when any part of the form is touched, we can simply subscribe to &lt;code&gt;touched&lt;/code&gt; property state/changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;touched&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To listen to when the "firstName" control, specifically, is touched&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// this is similar to control.controls.firstName.touched&lt;/span&gt;
&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;controls&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;touched&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// or&lt;/span&gt;
&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;touched&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a more complex, advanced example: if we want to listen for value changes, debounce the rate of changes, perform validation, and mark the &lt;code&gt;control&lt;/code&gt; as pending while we wait for validation to complete, we can do the following. Note, when we set errors on the &lt;code&gt;firstName&lt;/code&gt; control, that will result in the "First name" &lt;code&gt;TextField&lt;/code&gt;  being marked as invalid (score!).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;switchMap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tap&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs/operators&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;myCustomValidationService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./my-validation-service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyLargerForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;withControl&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="c1"&gt;// ...hiding the controlFactory boilerplate...&lt;/span&gt;
  &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;control&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;markPending&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="nx"&gt;switchMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;switchMap&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;myCustomValidationService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;markPending&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setErrors&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;validationFailed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setErrors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onsubmit&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pending&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;invalid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="c1"&gt;// do stuff...&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;onCleanup&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;onsubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onsubmit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;fieldset&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TextField&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"First name"&lt;/span&gt; &lt;span class="na"&gt;controlName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"firstName"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TextField&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Last name"&lt;/span&gt; &lt;span class="na"&gt;control&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;lastNameControl&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;fieldset&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AddressForm&lt;/span&gt; &lt;span class="na"&gt;controlName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"address"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is really just scratching the surface of what you can do with &lt;code&gt;rx-controls-solid&lt;/code&gt;. I don't have much in the way of documentation at this point, but you can play around with the library using &lt;a href="https://codesandbox.io/s/rxcontrols-solid-blog-example-4sh0x?file=index.tsx"&gt;this codesandbox&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-out-the-repo"&gt;
  &lt;/a&gt;
  Check out the repo
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gitlab.com/john.carroll.p/rx-controls"&gt;https://gitlab.com/john.carroll.p/rx-controls&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>solidjs</category>
      <category>rxjs</category>
      <category>forms</category>
      <category>githunt</category>
    </item>
    <item>
      <title>Dicas para criar componentes mais leg√≠veis</title>
      <author>Nilton Lopes</author>
      <pubDate>Tue, 27 Apr 2021 18:48:41 +0000</pubDate>
      <link>https://dev.to/pixelwolfhq/dicas-para-criar-componentes-mais-legiveis-336c</link>
      <guid>https://dev.to/pixelwolfhq/dicas-para-criar-componentes-mais-legiveis-336c</guid>
      <description>&lt;h1&gt;
  &lt;a href="#o-problema"&gt;
  &lt;/a&gt;
  O problema
&lt;/h1&gt;

&lt;p&gt;Uma das minhas maiores dores no desenvolvimento de aplica√ß√µes front-end √© quando abro um componente desenvolvido por um colega (ou por mim mesmo üòÖ) e vejo que este possui 2 mil linhas em um √∫nico arquivo. Para mim isso √© ruim, pois demoro para conseguir entender o que de fato todas aquelas linhas fazem - isso quando eu entendo. Ent√£o torna-se necess√°rio desprender de uma quantidade x de tempo para ir lendo tudo at√© fazer, de fato, o eu precisava inicialmente. Para resolver ou, pelo menos, amenizar esse problema existem algumas t√©cnicas que podem ser utilizadas e √© sobre isso que venho tratar aqui.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-velho-e-o-novo-testamento"&gt;
  &lt;/a&gt;
  O velho e o novo testamento
&lt;/h2&gt;

&lt;p&gt;Como j√° citei anteriormente, √†s vezes, no nosso dia a dia de desenvolvimento acabamos deixando um componente t√£o grande que caberiam 2 b√≠blias dentro dele ü§£.&lt;/p&gt;

&lt;p&gt;Para citar alguns dos problemas do arquivo desse tamanho seria:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dificuldade-na-legibilidade-da-p%C3%A1gina"&gt;
  &lt;/a&gt;
  Dificuldade na legibilidade da p√°gina
&lt;/h3&gt;

&lt;p&gt;Com arquivos muito grandes o processo de leitura acaba demorando mais e, por consequ√™ncia, o entendimento tamb√©m. Demora-se mais tempo para conseguir entender o que cada m√©todo, fun√ß√£o ou trecho de c√≥digo executa e quando executa.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#baixa-manutenibilidade"&gt;
  &lt;/a&gt;
  Baixa manutenibilidade
&lt;/h3&gt;

&lt;p&gt;√â comum ver que nesses tipos arquivos h√° uma grande depend√™ncia de peda√ßos diferentes do c√≥digo. Desta forma, se voc√™ precisa alterar um trecho X ele pode afetar algum outro trecho indesejado.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#alta-possibilidade-de-c%C3%B3digo-duplicado"&gt;
  &lt;/a&gt;
  Alta possibilidade de c√≥digo duplicado
&lt;/h3&gt;

&lt;p&gt;Tamb√©m se torna comum ver que em arquivos desse tipo h√° uma grande quantidade de c√≥digos exatamente iguais ou, pelo menos, muito parecido onde uma ou outra coisa que √© diferente. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coleguinha-pistola"&gt;
  &lt;/a&gt;
  Coleguinha pistola
&lt;/h3&gt;

&lt;p&gt;Ningu√©m gosta da sensa√ß√£o que se tem ao abrir um arquivo e pensar "eu n√£o fa√ßo ideia do que tem aqui!". O seu coleguinha n√£o gosta e voc√™ provavelmente tamb√©m n√£o. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virando-o-jogo"&gt;
  &lt;/a&gt;
  Virando o jogo
&lt;/h2&gt;

&lt;p&gt;Para virar o jogo e come√ßar a criar componentes que sejam mais manuten√≠veis, f√°ceis de ler, aproveitar da reutiliza√ß√£o e, n√£o menos importante, deixar os coleguinhas mais felizes √© interessante considerar algumas boas pr√°ticas enquanto estiver escrevendo seus componentes. Na internet encontramos diversos posts/artigos com diversas dicas do que pode ser feito para ter componentes mais manuten√≠veis e simples. Aqui n√£o irei tratar uma especificamente, mas sim de um peda√ßo de cada coisa que vi e que fazem sentido para mim. Caso voc√™ tenha interesse em se aprofundar mais no assunto recomendo muito que busque por &lt;em&gt;&lt;a href="https://bradfrost.com/blog/post/atomic-web-design/"&gt;Atomic Design&lt;/a&gt;&lt;/em&gt;.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;OBS: Nos exemplos que cito abaixo estarei usando Reactjs, mas nada impede que voc√™ aplique os conceitos em outras bibliotecas/frameworks. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#componentes-gen%C3%A9ricos-reutiliz%C3%A1veis"&gt;
  &lt;/a&gt;
  Componentes gen√©ricos reutiliz√°veis
&lt;/h3&gt;

&lt;p&gt;Ficar atento toda vez que come√ßar a notar que h√° coisas demais se repetindo no c√≥digo. Se est√° repetindo exatamente igual ou muito pr√≥ximo disso provavelmente esse trecho de c√≥digo pode virar um componente isolado.&lt;/p&gt;

&lt;p&gt;Para deixar mais sobre as coisas que se repetem, podemos tomar de exemplo coisas como: modais, bot√µes, headers, footers, t√≠tulos, sidebars, cards, caixas de alerta e muitas outras coisas. O sistema que voc√™ est√° desenvolvendo pode ter esses exemplos que citei, como podem ter outros totalmente diferentes. Vai ir da sua percep√ß√£o saber se aquilo que est√° sendo desenvolvido pode ser reutilizado por outras p√°ginas do sistema. Se a resposta for sim, ent√£o componentize!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#componentes-espec%C3%ADficos-n%C3%A3o-reutiliz%C3%A1veis"&gt;
  &lt;/a&gt;
  Componentes espec√≠ficos n√£o reutiliz√°veis
&lt;/h3&gt;

&lt;p&gt;H√° situa√ß√µes onde trechos de c√≥digos est√£o se repetindo, por√©m, n√£o √© algo que poder√° ser reutilizado em outras partes do sistema. √â algo t√£o espec√≠fico que somente aquela p√°gina ter√° aquela funcionalidade.&lt;/p&gt;

&lt;p&gt;Mesmo em casos assim, se a p√°gina est√° ficando muito grande, √© interessante fazer a componentiza√ß√£o deste trecho, por√©m, com uma diferen√ßa. No lugar de colocar esse componente na pasta &lt;code&gt;src/Components&lt;/code&gt; voc√™ o colocar√° na pasta &lt;code&gt;Components&lt;/code&gt; dentro da pasta da sua &lt;em&gt;P√°gina&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Por exemplo, imagine que voc√™ tenha uma p√°gina de listagem de produtos no diret√≥rio &lt;code&gt;/src/Pages/ProductList/index.tsx&lt;/code&gt; e nela h√° um componente que n√£o √© reutiliz√°vel por outras p√°ginas do sistema, mas que pelo tamanho que ele est√° ficando voc√™ deseja criar um arquivo exclusivamente para esse componente. Algo que poderia ser feito seria criar esse componente dentro de uma pasta &lt;code&gt;Components&lt;/code&gt;, com o caminho desse componente ficando assim: &lt;code&gt;/src/Pages/ProductList/Components/MyExampleComponent.tsx&lt;/code&gt;.&lt;br&gt;
Desta forma, todos os componentes exclusivos da p√°gina &lt;code&gt;ProductList&lt;/code&gt; estaria dentro desta pasta, facilitando a identifica√ß√£o do que est√° al√≠ dentro √© algo que n√£o √© reutiliz√°vel, mas que foi componetizado para simplificar a complexidade da p√°gina &lt;code&gt;ProductList&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mZ47LV15--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/PixelwolfHQ/front-end/raw/master/articles/small-components-pattern/assets/example-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mZ47LV15--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/PixelwolfHQ/front-end/raw/master/articles/small-components-pattern/assets/example-1.png" alt="Exemplo de componentiza√ß√£o n√£o reutiliz√°vel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#componentes-de-componentes"&gt;
  &lt;/a&gt;
  Componentes de componentes
&lt;/h3&gt;

&lt;p&gt;Outra situa√ß√£o em que √© poss√≠vel fazer componentes √© quando temos dois ou mais componentes e que juntos se tornam outro componente. Tipo aquele bot√£o e input que juntos viram uma barra de busca, sacou?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iPrGtGmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/PixelwolfHQ/front-end/raw/master/articles/small-components-pattern/assets/page_components_markup.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iPrGtGmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/PixelwolfHQ/front-end/raw/master/articles/small-components-pattern/assets/page_components_markup.png" alt="Exemplo instagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Observe a imagem acima. As caixas em roxo s√£o os componentes "Micro", ou seja, componentes pequenos que possuem uma a√ß√£o bem espec√≠fica. J√° as caixas vermelhas temos os "Macros" ou componentes de componentes. Um componente "Macro" √© um componente maior que junta v√°rios outros componentes menores dentro de si. Assim, tamb√©m facilita a reutiliza√ß√£o, pois toda vez que precisarmos daquele conjunto de componentes juntos podemos utilizar esse componente maior no lugar de ficar chamando cada componente pequeno um por um. &lt;/p&gt;

&lt;p&gt;As aplica√ß√µes para esse tipo de componentiza√ß√£o s√£o diversas. Voc√™ pode, por exemplo, querer criar um componente de uma biblioteca que voc√™ usa para que a chamada dele fique mais simples. Esse √© o exemplo que darei a seguir:&lt;/p&gt;

&lt;p&gt;Nas imagens abaixos veja que h√° dois exemplos de componentes, o primeiro √© o &lt;strong&gt;DefaultModal&lt;/strong&gt; e o segundo √© &lt;strong&gt;CustomModal&lt;/strong&gt;. Observe  que o &lt;strong&gt;CustomModal&lt;/strong&gt; est√° bem mais simples, sem precisar colocar tanta coisa no meio do componente e esses dois componentes fazem a mesma coisa. A diferen√ßa √© que no &lt;strong&gt;CustomModal&lt;/strong&gt; foi criado um componente que encapsula o c√≥digo da primeira imagem, expondo apenas algumas propriedades com os dados que de fato alteram e tamb√©m  permite que seja passado um "&lt;em&gt;filho&lt;/em&gt;" no corpo da modal para que voc√™ possa adicionar elementos mais customiz√°veis. Desta forma, o t√≠tulo, os bot√µes de a√ß√µes, as fun√ß√µes que checa se modal est√° aberta ou fechada, ficam tudo "escondidas" para quem est√° usando a vers√£o &lt;strong&gt;CustomModal&lt;/strong&gt; .  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MeVudTGx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/PixelwolfHQ/front-end/raw/master/articles/small-components-pattern/assets/modal-example.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MeVudTGx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/PixelwolfHQ/front-end/raw/master/articles/small-components-pattern/assets/modal-example.png" alt="Exemplo instagram"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bmGYmg2K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/PixelwolfHQ/front-end/raw/master/articles/small-components-pattern/assets/defaultModal-original.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bmGYmg2K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/PixelwolfHQ/front-end/raw/master/articles/small-components-pattern/assets/defaultModal-original.png" alt="Exemplo instagram"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2tzAPJ1u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/PixelwolfHQ/front-end/raw/master/articles/small-components-pattern/assets/defaultModal-component.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2tzAPJ1u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/PixelwolfHQ/front-end/raw/master/articles/small-components-pattern/assets/defaultModal-component.png" alt="Exemplo instagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reutiliza%C3%A7%C3%A3o-sem-componentes"&gt;
  &lt;/a&gt;
  Reutiliza√ß√£o sem componentes
&lt;/h3&gt;

&lt;p&gt;Nem todo c√≥digo repetido nos componentes podem sem quebrados em outros componentes menores.Tamb√©m temos c√≥digos repetidos que s√£o l√≥gicas para tratar algum problema, coisas como: formata√ß√£o de datas, buscar um endere√ßo com base num cep, tratamento de dados e coisas do tipo. Mesmo nesses casos ainda sim, podemos recorrer √† reutiliza√ß√£o, pode-se pegar esse trecho de l√≥gica repetida, criar uma fun√ß√£o que fica respons√°vel pela aquela atividade e coloc√°-la dentro de uma pasta &lt;code&gt;src/utils&lt;/code&gt; na raiz do projeto. Desta forma, toda vez que voc√™ precisar, por exemplo, buscar um endere√ßo com base no CEP, voc√™ pode importar a fun√ß√£o &lt;code&gt;getAddressByCep&lt;/code&gt; do seu &lt;code&gt;utils&lt;/code&gt; sem precisar copiar e colar o mesmo trecho de c√≥digo para uma nova p√°gina.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finalizando"&gt;
  &lt;/a&gt;
  Finalizando
&lt;/h2&gt;

&lt;p&gt;Tentei neste artigo mostrar algumas dicas para escrever um c√≥digo que seja, pelo menos, um pouco mais manuten√≠vel. Tentei passar um pouco da minha experi√™ncia do assunto, ent√£o pode ser que tenha algo que n√£o caiba na realidade do projeto que voc√™ est√° trabalhando. Caso tenha curtido o tema, sugiro novamente que pesquise por &lt;em&gt;&lt;a href="https://bradfrost.com/blog/post/atomic-web-design/"&gt;Atomic Design&lt;/a&gt;&lt;/em&gt;, pois o que mostrei aqui sobre ele foi apenas a ponta do iceberg. E se tiver algo para acrescentar ficaria agradecido se  compartilhasse comigo tamb√©m, assim podemos sempre ir evoluindo. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#refer%C3%AAncias"&gt;
  &lt;/a&gt;
  Refer√™ncias
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://inside.contabilizei.com.br/componentiza%C3%A7%C3%A3o-no-front-end-3fc889a363df"&gt;Componentiza√ß√£o no front-end I&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://inside.contabilizei.com.br/componentiza%C3%A7%C3%A3o-no-front-end-f40b0b85143f"&gt;Componentiza√ß√£o no front-end IV&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/telles/tips-estruturando-as-camadas-de-uma-arquitetura-react-36bp"&gt;Estruturando camadas de uma arquitetura no React&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.listennotes.com/podcasts/elemencast/1-atomic-design-lan%C3%A7amento-7IoMB4gnhcm/"&gt;Atomic design&lt;/a&gt;&lt;/p&gt;

</description>
      <category>component</category>
      <category>atomicdesign</category>
      <category>react</category>
      <category>frontend</category>
    </item>
    <item>
      <title>SOLID: Liskov Substitution Principle</title>
      <author>Victor Manuel Pinzon</author>
      <pubDate>Tue, 27 Apr 2021 18:44:28 +0000</pubDate>
      <link>https://dev.to/victorpinzon1988eng/solid-liskov-substitution-principle-3jel</link>
      <guid>https://dev.to/victorpinzon1988eng/solid-liskov-substitution-principle-3jel</guid>
      <description>&lt;p&gt;&lt;em&gt;This is a continuation of the &lt;a href="https://dev.to/victorpinzon1988eng/solid-single-responsibility-principle-48an"&gt;SOLID principles&lt;/a&gt; series.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Liskov substitution principle is the most technical principle of all. However, it is the one that most helps to develop decoupled applications, which is the foundation of designing reusable components.&lt;/p&gt;

&lt;p&gt;Barbara Liskov defined this principle as follows: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Let Œ¶(x) be a property provable about objects x of type T. Then Œ¶(y) should be true for objects y of type S where S is a subtype of T‚Äù&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The definition given by Liskov is based on the Design by Contract (DbC) defined by Bertrand Meyer. A contract that is identified by preconditions, invariants, and postconditions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A routine can expect a certain condition to be guaranteed on entry by any client module that calls it: the routine‚Äôs precondition. This is an obligation for the client and benefit for the supplier, as it frees it from having to handle cases outside of the precondition.&lt;/li&gt;
&lt;li&gt;A routine can guarantee a certain property on exit: the routine‚Äôs postcondition - an obligation for the supplier, and a benefit for the client.&lt;/li&gt;
&lt;li&gt;Maintain a certain property, assumed on entry and guaranteed on exit: the class invariant.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The concept of contract and implementation is the foundation for inheritance and polymorphism in object-oriented programming.&lt;/p&gt;

&lt;p&gt;In 1996, Robert C. Martin redefined the concept given by Liskov, as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Function that use pointers of references to base classes must be able to use objects of derived classes without knowing it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The redefinition given by Bob Martin helped to simplify the concept implemented by Liskov years before and its adoption by developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#violation-of-the-liskov-substitution-principle"&gt;
  &lt;/a&gt;
  Violation of the Liskov Substitution Principle
&lt;/h2&gt;

&lt;p&gt;As a developer for a banking entity, you are requested to implement a system for managing bank accounts. Your boss asks you to implement, in the first sprint of the project, a system for managing basic and premium bank accounts. The difference between them is that the latter accumulates preference points on any deposit.&lt;/p&gt;

&lt;p&gt;You implement the following abstract class as the foundation of your system.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BankAccount&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * In charge of depositing a specific amount into the account.
     * @param amount            Dollar ammount.
     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * In charge of withdrawing a specific amount from the account.
     * @param amount            Dollar amount.
     * @return                  Boolean result.
     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This abstract class defines an obligation for any derived class to override any abstract method defined in the BankAccount class. This means that the basic and premium accounts must override the deposit and withdrawal method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BasicAccount&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;BankAccount&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;       
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PremiumAccount&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;BankAccount&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;preferencePoints&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;accumulatePreferencePoints&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;accumulatePreferencePoints&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;accumulatePreferencePoints&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;preferencePoints&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Please take into account that any of these classes have the minimum validations for a production environment.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;All basic and premium accounts are discounted by $25.00 annually for administrative expenses. To implement this policy you defined the following class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WithdrawalService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="no"&gt;ADMINISTRATIVE_EXPENSES_CHARGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;25.00&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;cargarDebitarCuentas&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;

        &lt;span class="nc"&gt;BankAccount&lt;/span&gt; &lt;span class="n"&gt;basiAcct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;BasicAccount&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;basiAcct&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;deposit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;100.00&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="nc"&gt;BankAccount&lt;/span&gt; &lt;span class="n"&gt;premiumAcct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PremiumAccount&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;premiumAcct&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;deposit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;200.00&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BankAccount&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;basiAcct&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;premiumAcct&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;debitAdministrativeExpenses&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;debitAdministrativeExpenses&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BankAccount&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forEach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withdraw&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;WithdrawalService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ADMINISTRATIVE_EXPENSES_CHARGE&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the second sprint of your project, your boss asks you to implement long-term accounts into your bank account managing system. The differences between long-term accounts and basic/premium accounts are the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Long-term accounts are exempt from administrative expenses.&lt;/li&gt;
&lt;li&gt;Long-term accounts don't allow withdrawals. If the client wants to withdraw any amount of his / her account must be done through a different process.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a developer in charge of the accounts system, you decide to extend the BankAccount class for the Long-term accounts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LongTermAccount&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;BankAccount&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;UnsupportedOperationException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Not supported yet."&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; 
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This part is where the violation of the Liskov Substitution Principle is obvious. You cannot extend the BankAccount class in the LongTermAccount without overriding the withdrawal method. However, the long-term accounts don‚Äôt allow withdrawals according to your project‚Äôs requirements. &lt;/p&gt;

&lt;p&gt;You have the following two options to solve this issue:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can override the withdrawal method as an empty method or you can throw an UnsupportedOperationException. However, the BankAccount objects wouldn't be completely interchangeable with LongTermAccount objects because if we try to execute the withdrawal method we would get an exception. As a solution for this issue, we can condition the debitAdministrativeExpenses method, so we can skip the LongTermAccount objects but this would violate the Open/Closed Principle. For instance:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;debitAdministrativeExpenses&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BankAccount&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;BankAccount&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nc"&gt;LongTermAccount&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
                &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withdraw&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ADMINISTRATIVE_EXPENSES_CHARGE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;You can make your code Liskov Substitution Principle compliant.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#implementing-liskov-substitution-principle"&gt;
  &lt;/a&gt;
  Implementing Liskov Substitution Principle
&lt;/h2&gt;

&lt;p&gt;The main issue with the bank account structure is that the long-term account is not a regular bank account, at least is not the type defined in the BankAccount abstract class. There is a simple test on the abductive reasoning area that can be used to check if a class is a subtype from ‚ÄúX‚Äù type. The duck test states ‚ÄúIf it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck‚Äù. The long-term account looks like a regular bank account but it does not behave like a regular one. To solve this issue we have to change the current class structure.&lt;/p&gt;

&lt;p&gt;To make our code LSP compliant, we‚Äôll make the following changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All types of bank accounts will allow the deposit action.&lt;/li&gt;
&lt;li&gt;Only the basic and premium bank accounts will allow the withdrawal action.&lt;/li&gt;
&lt;li&gt;We‚Äôll define an abstract bank account for all types of accounts. This abstract class will define only one method, the deposit method.&lt;/li&gt;
&lt;li&gt;We‚Äôll extend the BankAccount with WithdrawableAccount abstract class, which will define the debit method.&lt;/li&gt;
&lt;li&gt;The basic and premium accounts will extend the WithdrawableAccount abstract class, while the long-term account will extend the BankAccount abstract class.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The abstract BankAccount class will define the deposit method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BankAccount&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * In charge of depositing a specific amount into the account.
     * @param amount            Dollar ammount.
     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The abstract WithdrawableAccount class will define the withdrawal method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WithdrawableAccount&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;BankAccount&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * In charge of withdrawing a specific amount from the account.
     * @param amount            Dollar amount.
     * @return                  Boolean result.
     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The basic and premium account classes will extend the WithdrawableAccount class, which extends the BankAccount class. This nested inheritance allows the basic/premium accounts to have both methods, deposit, and withdrawal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BasicAccount&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;WithdrawableAccount&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;monto&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;monto&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;monto&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;       
    &lt;span class="o"&gt;}&lt;/span&gt;   
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PremiumAccount&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;WithdrawableAccount&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;preferencePoints&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;monto&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;monto&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;accumulatePreferencePoints&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;monto&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;monto&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;monto&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;accumulatePreferencePoints&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;accumulatePreferencePoints&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;preferencePoints&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The WithdrawalService class is implemented using only WithdrawableAccount types or subtypes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WithdrawableService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="no"&gt;ADMINISTRATIVE_EXPENSES_CHARGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;25.00&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;cargarDebitarCuentas&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;

        &lt;span class="nc"&gt;WithdrawableAccount&lt;/span&gt; &lt;span class="n"&gt;basicAcct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;BasicAccount&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;basicAcct&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;deposit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;100.00&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="nc"&gt;WithdrawableAccount&lt;/span&gt; &lt;span class="n"&gt;premiumAcct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PremiumAccount&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;premiumAcct&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;deposit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;200.00&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;WithdrawableAccount&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;basicAcct&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;premiumAcct&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;debitarGastosAdmon&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;debitarGastosAdmon&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;WithdrawableAccount&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forEach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withdraw&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;WithdrawableService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ADMINISTRATIVE_EXPENSES_CHARGE&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The changes done on the class structure assures that our code is LSP compliant. Now we are not required to implement the withdrawal method on the LongTermAccount class. Also, we interchange the WithdrawableAccount objects with any subtype of this abstract class. The class structure is also OCP compliant because if we added another bank account type that does not allow withdrawal, we wouldn't need to modify the current code just to extend the BankAccount type. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importance-of-the-liskov-substitution-principle"&gt;
  &lt;/a&gt;
  Importance of the Liskov Substitution Principle
&lt;/h2&gt;

&lt;p&gt;The LSP allows us to identify incorrect generalization areas done during the design phase and correct them. The Liskov Substitution Principle is fundamental in the development of the dependency injection concept, which is widely used in Java Enterprise Edition and Spring Framework.&lt;/p&gt;

&lt;p&gt;You can use the following tips if you want to easily detect violations of the Liskov Substitution Principle:&lt;/p&gt;

&lt;p&gt;There is an LSP violation if you introduce a condition using the type of your object, as shown above in the instanceof example.&lt;br&gt;
There is an LSP violation if you extend an abstract class and you set one of the abstract methods as an empty method or you throw a not defined exception.&lt;/p&gt;

&lt;p&gt;If you like to read more about LSP, you can have a look at &lt;a href="https://cleancoders.com/episode/clean-code-episode-11-p1"&gt;Uncle Bob‚Äôs Blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the next post, we will talk about the Interface Segregation Principle.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href="https://twitter.com/victorpinzon198"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/victor-manuel-pinzon-reyes-072251134/"&gt;Linkedin&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>java</category>
      <category>oop</category>
      <category>programming</category>
      <category>architecture</category>
    </item>
    <item>
      <title>A new documentation website for Bricks</title>
      <author>Stefano Bartoletti</author>
      <pubDate>Tue, 27 Apr 2021 18:30:15 +0000</pubDate>
      <link>https://dev.to/stefanobartoletti/a-new-documentation-website-for-bricks-ebb</link>
      <guid>https://dev.to/stefanobartoletti/a-new-documentation-website-for-bricks-ebb</guid>
      <description>&lt;p&gt;Bricks, my open-source WordPress starter theme featuring Bootstrap and Gulp, has a new documentation website:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bricks.stefanobartoletti.it/"&gt;https://bricks.stefanobartoletti.it/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Built with Vuepress and hosted on Netlify, this site was an interesting project on its own, giving me the opportunity to use new technologies.&lt;/p&gt;

&lt;p&gt;Just like the theme itself, even the documentation is open-source and its source code hosted on GitHub.&lt;/p&gt;

&lt;p&gt;Contributions are warmly welcome on both projects!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/stefanobartoletti"&gt;
        stefanobartoletti
      &lt;/a&gt; / &lt;a href="https://github.com/stefanobartoletti/bricks"&gt;
        bricks
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A modular WordPress starter theme powered by Bootstrap and Gulp
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/stefanobartoletti"&gt;
        stefanobartoletti
      &lt;/a&gt; / &lt;a href="https://github.com/stefanobartoletti/bricks-docs"&gt;
        bricks-docs
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Documentation for Bricks, a modular WordPress starter theme powered by Bootstrap and Gulp 
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>news</category>
      <category>wordpress</category>
      <category>vue</category>
      <category>netlify</category>
    </item>
    <item>
      <title>Send your leadership an anonymous message in Slack üëÄ</title>
      <author>Incognito for Slack</author>
      <pubDate>Tue, 27 Apr 2021 18:10:25 +0000</pubDate>
      <link>https://dev.to/incognitoforslack/send-your-leadership-an-anonymous-message-in-slack-h1p</link>
      <guid>https://dev.to/incognitoforslack/send-your-leadership-an-anonymous-message-in-slack-h1p</guid>
      <description>&lt;p&gt;I built a Slack app earlier this year so my coworkers and I could ask anonymous questions to our CEO during our town halls. It worked so well that I launched it to the public and have gained some awesome early traction. &lt;/p&gt;

&lt;p&gt;Slack has labeled my app &lt;strong&gt;New &amp;amp; Noteworthy and a Brilliant bot!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DQ1Myuhr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtdgdur8h8rodzwubbm0.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DQ1Myuhr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtdgdur8h8rodzwubbm0.PNG" alt="Incognito for Slack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The headline of the app is:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Give your team a safe space&lt;/strong&gt;&lt;br&gt;
Anonymous messages &amp;amp; polls for things like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;town hall questions&lt;/li&gt;
&lt;li&gt;ideation sessions&lt;/li&gt;
&lt;li&gt;leadership feedback&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The goal is to help:&lt;br&gt;
üó£Ô∏è Encourage open and honest feedback&lt;br&gt;
üí™ Empower your team by valuing their input&lt;br&gt;
üî¶ Spotlight common issues quickly&lt;br&gt;
üò∂ Enable the voices of passive employees&lt;br&gt;
‚öñÔ∏è Level the playing field for all team members&lt;br&gt;
üí∞ Reward the most helpful users anonymously&lt;/p&gt;

&lt;p&gt;There is a &lt;strong&gt;free tier&lt;/strong&gt; and a paid tier that you can try for 2 weeks for free without a credit card.&lt;/p&gt;

&lt;p&gt;I'm very open to your questions and feedback as I'm still in the early days of iteration and growth! Thanks!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>slack</category>
      <category>anonymous</category>
      <category>feedback</category>
    </item>
    <item>
      <title>Understanding How React Works: A Beginner's Guide</title>
      <author>Brandon Marrero üá∫üá∏</author>
      <pubDate>Tue, 27 Apr 2021 17:44:37 +0000</pubDate>
      <link>https://dev.to/branmar97/understanding-how-react-works-a-beginner-s-guide-5f0l</link>
      <guid>https://dev.to/branmar97/understanding-how-react-works-a-beginner-s-guide-5f0l</guid>
      <description>&lt;p&gt;Are you thinking about learning React to build your next web application, but do not understand how it works? &lt;/p&gt;

&lt;p&gt;After reading this brief post, you will have a basic understanding of the React flow to get you headed in the right direction. Your React journey starts here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-react"&gt;
  &lt;/a&gt;
  What is React?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; is a front-end JavaScript library that helps developers quickly build dynamic user interfaces. In an MVC application (Model View Controller), React is the view layer, which is what the user can see and interact with. The view layer can update without reloading the webpage when changes are made.&lt;br&gt;
It has a component architecture that allows reusable code which can be rendered anywhere.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-the-format"&gt;
  &lt;/a&gt;
  What is the format?
&lt;/h2&gt;

&lt;p&gt;Using declarative programming, React makes code easy to read and debug. Declarative programming expresses the logic without displaying all the instructions happening in the background. &lt;/p&gt;

&lt;p&gt;Let me break that down...&lt;/p&gt;

&lt;p&gt;A declarative view is like a customer ordering a cake from a bakery. The customer explains how they expect the cake to look and the baker makes it without specific instructions from the customer. This is declarative programming in a nutshell.&lt;/p&gt;

&lt;p&gt;Here is a code sample.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function App() {
     return (
          &amp;lt;div className="app"&amp;gt;
               &amp;lt;Nav /&amp;gt;
               &amp;lt;Home /&amp;gt;
               &amp;lt;Footer /&amp;gt;
          &amp;lt;/div&amp;gt;
     );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What can we expect from this output? We are rendering a navigation bar, home screen, and footer. &lt;/p&gt;

&lt;p&gt;You may also notice what looks like an HTML element (div), but this is actually &lt;a href="https://reactjs.org/docs/introducing-jsx.html"&gt;JSX&lt;/a&gt;, a React element or extension of JavaScript. The JSX is compiled by Babel into regular JavaScript.&lt;/p&gt;

&lt;p&gt;This is another example of declarative programming. We specify a React Element, which then gets compiled into JavaScript which creates and appends the HTML element to the DOM. &lt;/p&gt;

&lt;p&gt;Read more on JSX &lt;a href="https://reactjs.org/docs/introducing-jsx.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-components"&gt;
  &lt;/a&gt;
  What are components?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/docs/components-and-props.html"&gt;Components&lt;/a&gt; are parts that represent pieces of the user interface. Going back to the previous example regarding declarative programming, the components were Nav, Home, and Footer. &lt;/p&gt;

&lt;p&gt;These components are children of the root component, typically called the App component. Combining all the components together makes an application. &lt;/p&gt;

&lt;p&gt;Components are also reusable with different properties. As data changes, a component can update the information it displays and the styling.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-react-flow"&gt;
  &lt;/a&gt;
  How does React flow?
&lt;/h2&gt;

&lt;p&gt;In React, data flows in one direction, top to bottom. This allows for predictable and maintainable code. Data is passed down from the parent component in the form of &lt;a href="https://reactjs.org/docs/components-and-props.html#gatsby-focus-wrapper"&gt;props&lt;/a&gt;. The data can be used in other forms or passed further down the component tree.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dG3cCJvZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m17ji4j257qh9m6tfjg0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dG3cCJvZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m17ji4j257qh9m6tfjg0.png" alt="Component Flow Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each component has its own &lt;a href="https://reactjs.org/docs/faq-state.html#gatsby-focus-wrapper"&gt;state&lt;/a&gt;, similar to props but private. It stores property values that belong to a component. Property values can be changed using a method called &lt;code&gt;setState()&lt;/code&gt;. By default, a component will re-render when state is changed.&lt;/p&gt;

&lt;p&gt;Using state and props together allows breaking down of components based on specific behaviors. Let's say a &lt;code&gt;PlantsContainer&lt;/code&gt; has a state property with a list of plants. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;PlantsForm&lt;/code&gt; component would render a form for adding new plants and a &lt;code&gt;Plants&lt;/code&gt; component might render the list of plants to the user interface.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thanks for reading my blog post. I hope this post helped you understand the basics of React. If it still seems overwhelming, React can be broken down into 4 key concepts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Components&lt;/li&gt;
&lt;li&gt;JSX&lt;/li&gt;
&lt;li&gt;State&lt;/li&gt;
&lt;li&gt;Props&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will be touching more on these concepts in future posts.&lt;/p&gt;

&lt;p&gt;To learn more about React, I recommend referencing the &lt;a href="https://reactjs.org/docs/getting-started.html"&gt;official docs&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>AWS Solutions Architect Professional tips and tricks</title>
      <author>Libert S</author>
      <pubDate>Tue, 27 Apr 2021 17:43:41 +0000</pubDate>
      <link>https://dev.to/libertxyz/aws-solutions-architect-professional-tips-and-tricks-2obc</link>
      <guid>https://dev.to/libertxyz/aws-solutions-architect-professional-tips-and-tricks-2obc</guid>
      <description>&lt;p&gt;Is the time of the year to renew my AWS Solutions Architect certification as they are only valid for three years. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#handson-experience"&gt;
  &lt;/a&gt;
  hands-on experience
&lt;/h3&gt;

&lt;p&gt;The AWS SA Professional exam (SAP-C01) is considered one of the most difficult exams from the AWS certification program, mostly because it covers multiple AWS services, all the way from IAM to AWS direct connect. Also, the questions are based on real case scenarios compared with most theoretical questions in the AWS Solutions Architect &lt;strong&gt;Associate&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;In the following weeks, I'll add a series of posts about my learning path and share some useful tips and tricks along the way to get certified. &lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
    </item>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>Jess Lee (she/her)</author>
      <pubDate>Tue, 27 Apr 2021 17:41:54 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-312l</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-312l</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Editorial note:&lt;/strong&gt; I will be on parental leave starting very soon so I can welcome my first child ‚ù§Ô∏è Forem's awesome Content Manager, Gracie Gregory, will be taking over the Top 7 series and our weekly newsletter while I'm gone (starting next week). I hope everyone has a great spring and summer!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-to-your-own-beat"&gt;
  &lt;/a&gt;
  Code to your own beat
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/coffeestasia"&gt;@coffeestasia&lt;/a&gt;
 has rounded up some amazing music collections/playlists/channels to help you destress while you debug. üòé &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/coffeestasia" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m9lVgk9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lXaYQ4Mo--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/452501/9bf1251a-c9ff-460b-a2b1-3fd4985d7d04.jpg" alt="coffeestasia image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/coffeestasia/background-music-for-coding-for-every-taste-2oo6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Background Music for Coding for Every Tasteüé∂&lt;/h2&gt;
      &lt;h3&gt;Anastasia üèÑüèª‚Äç‚ôÄÔ∏è „Éª Apr 20 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-internet-decoded"&gt;
  &lt;/a&gt;
  The Internet, decoded
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/rohitrana"&gt;@rohitrana&lt;/a&gt;
 helps us shift from "an average internet user to the person who still uses the internet all the time but knows a little bit about what‚Äôs going on behind the scenes." Sold!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/rohitrana" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nWDv-vCO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--NoONcCYq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/613035/028fc507-d64d-4a57-a423-62118dc61163.jpeg" alt="rohitrana image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/rohitrana/how-the-web-works-1hd7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How the web works&lt;/h2&gt;
      &lt;h3&gt;Rohit Singh Rana „Éª Apr 24 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#self-promotion-as-a-creator"&gt;
  &lt;/a&gt;
  Self Promotion as a Creator
&lt;/h2&gt;

&lt;p&gt;This is a deeply fascinating and complex read on the topic of promoting one's work as a developer. &lt;a class="mentioned-user" href="https://dev.to/ryansolid"&gt;@ryansolid&lt;/a&gt;
 admits to not having the perfect answer here, but they sure do have a nuanced perspective on the challenges and lessons of creating and learning in public. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ryansolid" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--it1XuNsm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--zjqjkX6K--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/186199/a3d1cfed-a1ca-41cd-a146-9db4e65711d4.jpeg" alt="ryansolid image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/this-is-learning/of-chickens-and-pigs-the-dilemma-of-creator-self-promotion-51ea" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Of Chickens and Pigs - The Dilemma of Creator Self Promotion&lt;/h2&gt;
      &lt;h3&gt;Ryan Carniato „Éª Apr 22 „Éª 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devjournal&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#demystifying-the-developer-advocate"&gt;
  &lt;/a&gt;
  Demystifying the developer advocate
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/wassimchegham"&gt;@wassimchegham&lt;/a&gt;
 provides concrete examples of tasks and activities they do at Microsoft as a Senior Developer Advocate. If you've read developer advocate job descriptions but are still struggling to grasp what these pros truly do, this post is a great resource&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/wassimchegham" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rUjA9mUr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--EouHrMi6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/13081/S93LQYOa.jpg" alt="wassimchegham image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/wassimchegham/the-subtle-art-of-being-a-developer-advocate-gdg" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The Subtle Art of Being A Developer Advocate&lt;/h2&gt;
      &lt;h3&gt;Wassim Chegham „Éª Apr 21 „Éª 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#devrel&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#creating-a-great-experience-for-everyone"&gt;
  &lt;/a&gt;
  Creating a great experience for &lt;em&gt;everyone&lt;/em&gt;.
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/hichamelbsi"&gt;@hichamelbsi&lt;/a&gt;
 has some concrete tips for how you can make your sites more accessible ‚Äî because we all need to make this a top priority. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hichamelbsi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mu9ZXmiC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j3cRFUdy--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/200546/e6c03961-e926-4bc8-bfae-6d802916360f.jpeg" alt="hichamelbsi image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hichamelbsi/accessibility-is-a-priority-3jbf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Accessibility is a priority&lt;/h2&gt;
      &lt;h3&gt;ELABBASSI Hicham „Éª Apr 21 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#ux&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#broader-applications-for-localstorage"&gt;
  &lt;/a&gt;
  Broader applications for localStorage
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/tolentinoel"&gt;@tolentinoel&lt;/a&gt;
 encountered localStorage back when they were in coding bootcamp. Since then, they learned that there are more applications for localStorage than just tokens! This post will walk you through a few of them.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/tolentinoel" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yJ-6fwJc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--mtmjc86Q--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/493720/aa51b775-cdb2-4ac0-b15a-24b7b469d6e1.jpeg" alt="tolentinoel image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/tolentinoel/what-is-localstorage-3ffh" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What is localStorage?&lt;/h2&gt;
      &lt;h3&gt;Ellaine Tolentino „Éª Apr 22 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#localstorage&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#unbreaking-authentication"&gt;
  &lt;/a&gt;
  Un-breaking authentication
&lt;/h2&gt;

&lt;p&gt;As &lt;a class="mentioned-user" href="https://dev.to/flippedcoding"&gt;@flippedcoding&lt;/a&gt;
 writes, it's crucial to make sure you get the best authentication practices in place as early in the development process as possible. The tactics outlined in this post (through a Node.js app) are super useful üëÄ &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/flippedcoding" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UWt-uaTR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--D-VsiVuP--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/77973/be223e4c-dc34-43da-a894-10be8f272316.jpg" alt="flippedcoding image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/flippedcoding/implementing-passwordless-authentication-in-node-js-43m0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Implementing Passwordless Authentication in Node.JS&lt;/h2&gt;
      &lt;h3&gt;Milecia „Éª Apr 20 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#security&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#authentication&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>~/.dotfiles</title>
      <author>Vincent</author>
      <pubDate>Tue, 27 Apr 2021 16:42:38 +0000</pubDate>
      <link>https://dev.to/vibioh/dotfiles-5695</link>
      <guid>https://dev.to/vibioh/dotfiles-5695</guid>
      <description>&lt;h1&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why
&lt;/h1&gt;

&lt;p&gt;Suppose you are receiving your brand new computer. You have a bunch of softwares to install (your favorite browser, code editor, windows management tool, etc.) and some configurations and shortcuts tweaks. How long does it take you to be fully productive once unboxed? One hour, one day, one week?&lt;/p&gt;

&lt;p&gt;If you do this manually, you'll make mistakes. Because, we are all human beings.&lt;/p&gt;

&lt;p&gt;You can end up doing it successfully with a well written todo-list but, wait, do you make all the downloads, clicks, configuration by hand? You work in computer science, use computers for doing repetitive and boring tasks.&lt;/p&gt;

&lt;p&gt;Now we suppose your laptop is ready for work. You're happy with it and want the same work environment on your desktop, which has a different operating system, should you start again from a blank page?&lt;/p&gt;

&lt;p&gt;That's why you need installation automation. They are often called "Dotfiles". Let's deep dive into it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What
&lt;/h1&gt;

&lt;p&gt;We want to put all our configuration for various environments in a place that is easy to share or reuse, and ideally idempotent.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  Context
&lt;/h2&gt;

&lt;p&gt;The following guidelines and explanations work on an &lt;a href="https://en.wikipedia.org/wiki/Unix-like"&gt;Unix-like operating systems&lt;/a&gt;. Sorry Microsoft's users, since I've not used this system for a while, I can't talk about it. It would work with &lt;a href="https://fr.wikipedia.org/wiki/Windows_Subsystem_for_Linux"&gt;Windows Subsystem for Linux&lt;/a&gt; because it's a Unix system under the hood.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#content"&gt;
  &lt;/a&gt;
  Content
&lt;/h2&gt;

&lt;p&gt;We have two things to take care of: installation of softwares and their configurations.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;For the installation part, thankfully, most operating-systems have a built-in or mainstream packages manager. Aptitude, Brew, Pacman, you name it. It's a good starting point but not every tool or software are available on it or on each architecture. You may need to download a binary or an archive and to put it at the right place.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For the configuration part, it's more ~complicated~ diverse. Some tools rely on files, others on environment variables and others are simply not configurable easily, e.g. hidden or binary files.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that &lt;a href="https://brew.sh"&gt;Brew&lt;/a&gt;, the package manager for macOS, is not built-in and must be installed manually first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#storage"&gt;
  &lt;/a&gt;
  Storage
&lt;/h2&gt;

&lt;p&gt;It looks like we are starting to talk about code, notably infrastructure as code. Code nowadays is in a version control software (VCS). The most broadly use is &lt;a href="https://git-scm.com"&gt;Git&lt;/a&gt;. In order to make it shareable to everyone, you must store your Git repository on GitHub, GitLab, Bitbucket, etc. They are easy to use, well adopted by the community and easy to find.&lt;/p&gt;

&lt;p&gt;Git has many features, the one we'll focus on is branching. With branches, you can handle the &lt;code&gt;architecture x operation-system&lt;/code&gt; matrix with ease. A branch for "personal-macos", a branch for "work-ubuntu", a branch for "home-raspbian", etc. You can also add conditions in your code for doing things based on hostnames, environment variables, etc.&lt;/p&gt;

&lt;p&gt;My Dotfiles are in place for personal and professional contexts, on &lt;code&gt;amd64&lt;/code&gt; and &lt;code&gt;arm64&lt;/code&gt; architectures, on macOS and Linux operating systems. They are all in one repository with only two branches (&lt;code&gt;main&lt;/code&gt; and &lt;code&gt;work&lt;/code&gt;). I normalize many differences of each operating system.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#bash"&gt;
  &lt;/a&gt;
  Bash
&lt;/h2&gt;

&lt;p&gt;You can find &lt;a href="https://github.com/webpro/awesome-dotfiles"&gt;many tools on GitHub&lt;/a&gt; (or elsewhere) to bootstrap your Dotfiles. Some people choose to rely on Ansible, others on some tools you have to install. But how to install a tool that install the tools? Manual installation is not an option. It's like a chicken-egg problem.&lt;/p&gt;

&lt;p&gt;Obviously, you need a starting point and ensure that it's available everywhere. On Unix-like systems, &lt;a href="https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29"&gt;Bash&lt;/a&gt; is the common denominator. This responsibility, being the common denominator, is hard when you are a thirty years old software.&lt;/p&gt;

&lt;p&gt;For example, in the latest macOS version, the shipped version of &lt;code&gt;bash&lt;/code&gt; is &lt;code&gt;3.2.57&lt;/code&gt;, a version from 2007, &lt;a href="https://apple.stackexchange.com/a/238281"&gt;because of a licensing change&lt;/a&gt;. I'll not explain all the differences between v3 and v5 (current one in 2021) but you can see below a difference.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;MY_VARIABLE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"macOS"&lt;/span&gt;

&lt;span class="c"&gt;# Lower case, works only with bash 4+&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;MY_VARIABLE&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="c"&gt;# Lower case, the old way, bash 3 compliant&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;MY_VARIABLE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; | &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="s2"&gt;"[:upper:]"&lt;/span&gt; &lt;span class="s2"&gt;"[:lower:]"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;So, &lt;em&gt;Bash&lt;/em&gt; is the broader compatible software already installed on most systems. We know how to run our code, but how can we retrieve it then?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#zip-amp-curl"&gt;
  &lt;/a&gt;
  Zip &amp;amp; Curl
&lt;/h2&gt;

&lt;p&gt;We saw before that the best way to store our Dotfiles is in Git, but &lt;code&gt;git&lt;/code&gt; must be installed for cloning the repository, that will install &lt;code&gt;git&lt;/code&gt;. Chicken-egg problem again. Fortunately, solutions like GitHub or Gitlab provide a way to download a repository in a &lt;a href="https://en.wikipedia.org/wiki/ZIP_(file_format)"&gt;Zip&lt;/a&gt; archive. &lt;code&gt;unzip&lt;/code&gt;, like &lt;code&gt;bash&lt;/code&gt;, is present natively on most distributions.&lt;/p&gt;

&lt;p&gt;For fetching datas, we also need a tool. &lt;a href="https://en.wikipedia.org/wiki/CURL"&gt;curl&lt;/a&gt; is the common way to make a request on the Internet from a terminal and, guess what, it's also built-in on most distributions.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-golden-triangle"&gt;
  &lt;/a&gt;
  The golden triangle
&lt;/h2&gt;

&lt;p&gt;Thank to &lt;a href="https://linuxhint.com/bash_pipe_tutorial/"&gt;Bash piping&lt;/a&gt;, we can &lt;code&gt;curl&lt;/code&gt; a bootstrap script, pipe it to &lt;code&gt;bash&lt;/code&gt; and start installation by &lt;code&gt;unzip&lt;/code&gt;-ing archive of the repository. All tools are present after installation (tested on macOS, Manjaro, Debian 10).&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="s2"&gt;"https://my.bootstrap.script"&lt;/span&gt; | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;‚ö†Ô∏è When doing this kind of command, in any case, always check what you are going to run, especially when some "one-liner install scripts" require &lt;code&gt;sudo&lt;/code&gt;. &lt;a href="https://www.youtube.com/watch?v=iDbyYGrswtg"&gt;The Internet&lt;/a&gt; is a cool thing, but not everyone acts as a cool person on it.&lt;/p&gt;

&lt;p&gt;In the bootstrap script, you can choose where the Dotfiles will be (in my case, I place it in &lt;code&gt;${HOME}/code/dotfiles&lt;/code&gt;). I would bring your attention on how the &lt;code&gt;curl&lt;/code&gt; options are written, in their long format. When writing a script, you're not in a terminal trying to be quick and limiting your keyboard input. You write code that will be shared and must be comprehensive by other humans. Be verbose.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; nounset &lt;span class="nt"&gt;-o&lt;/span&gt; pipefail &lt;span class="nt"&gt;-o&lt;/span&gt; errexit

main&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;INSTALL_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/code"&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;GITHUB_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ViBiOh"&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"dotfiles"&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_BRANCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"main"&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;ARCHIVE_FILENAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_PATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/dotfiles.zip"&lt;/span&gt;

  &lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_PATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

  curl &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--disable&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--silent&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--show-error&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--location&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--max-time&lt;/span&gt; 60 &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--output&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ARCHIVE_FILENAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"https://github.com/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GITHUB_USER&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/archive/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_BRANCH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.zip"&lt;/span&gt;
  unzip &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ARCHIVE_FILENAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_PATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ARCHIVE_FILENAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

  &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_PATH&lt;/span&gt;:?&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;mv&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_PATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_BRANCH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_PATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

  &lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_PATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="s2"&gt;"./init"&lt;/span&gt; &lt;span class="nt"&gt;-a&lt;/span&gt;

    git init
    git remote add origin &lt;span class="s2"&gt;"http://github.com/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GITHUB_USER&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.git"&lt;/span&gt;
    git fetch origin
    git checkout &lt;span class="nt"&gt;--force&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_BRANCH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

main &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The bootstrap script does the "first download" of all needed files. Once done, the &lt;code&gt;init&lt;/code&gt; script takes over. The &lt;code&gt;init&lt;/code&gt; is the script that installs and configures all the things, you'll run it multiple times in the future.&lt;/p&gt;

&lt;p&gt;At the end of the script, you can see that there are &lt;code&gt;git&lt;/code&gt; commands. After a successful installation, Git will be installed, and I reconcile the archive downloaded (without &lt;code&gt;.git&lt;/code&gt; folder) with the Git upstream.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#structure"&gt;
  &lt;/a&gt;
  Structure
&lt;/h1&gt;

&lt;p&gt;The first thing we need in our Dotfiles repository is the two scripts described before: &lt;code&gt;bootstrap&lt;/code&gt; and &lt;code&gt;init&lt;/code&gt;. You'll need also at least 3 folders more: &lt;code&gt;install&lt;/code&gt;, &lt;code&gt;symlinks&lt;/code&gt; and &lt;code&gt;sources&lt;/code&gt;. We are gonna dive into them.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; tree &lt;span class="nt"&gt;-L&lt;/span&gt; 1
&lt;span class="nb"&gt;.&lt;/span&gt;
‚îú‚îÄ‚îÄ bootstrap
‚îú‚îÄ‚îÄ init
‚îú‚îÄ‚îÄ &lt;span class="nb"&gt;install&lt;/span&gt;/
‚îú‚îÄ‚îÄ sources/
‚îî‚îÄ‚îÄ symlinks/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#install"&gt;
  &lt;/a&gt;
  Install
&lt;/h2&gt;

&lt;p&gt;Softwares are most of the time available as a binary and maybe on your favorite package manager. But there are also tasks that are not "software installation" in proper words but need to be run at least once on your computer (e.g. disabling unwanted features of your os, generating configuration file that cannot be symlinked, etc.). From my point of view, it's part of the installation scripts.&lt;/p&gt;

&lt;p&gt;Among the softwares I use, all are not available on the package manager. Package managers often install optional softwares I don't want and install them globally, which can interfere with other users. I tend to download binaries directly from GitHub and put them in my &lt;code&gt;${PATH}&lt;/code&gt; instead of relying on the package manager. It's also easier to stick to a defined version and binaries tend to update faster than package upstreams.&lt;/p&gt;

&lt;p&gt;In an ideal world, Dotfiles should not run any command in &lt;code&gt;sudo&lt;/code&gt;. You install &lt;em&gt;your&lt;/em&gt; configuration on a machine, keep everything in your &lt;code&gt;${HOME}&lt;/code&gt; if you can. For example, I create an &lt;code&gt;${HOME}/opt/&lt;/code&gt; folder for putting my stuff in it (GOPATH, Python packages, etc). I add the &lt;code&gt;${HOME}/opt/bin&lt;/code&gt; in my &lt;code&gt;${PATH}&lt;/code&gt;. If I delete my &lt;code&gt;opt/&lt;/code&gt; folder, I'm the only person impacted.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;scripts/&lt;/code&gt; folder, you can separate concerns of your installation by splitting things in different files. This way, you can disable a script based on an environment variable. e.g. On my server, I don't need to install my code editor. I set an environment variable &lt;code&gt;DOTFILES_NO_EDITOR&lt;/code&gt; and the install script will not try to run the &lt;code&gt;scripts/editor&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;I see the installation phase in 3 steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;clean&lt;/code&gt;. Installation must be &lt;strong&gt;idempotent&lt;/strong&gt;, it can require cleaning before installing or simply "resetting" Dotfiles installation.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;install&lt;/code&gt;. Installation as you may think of it: running script that download from package manager, put binaries in appropriate folders, etc.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;credentials&lt;/code&gt;. Retrieving secrets from your password-manager and put them in your configuration file. See the &lt;a href="#secrets"&gt;Secrets&lt;/a&gt; section in &lt;code&gt;sources/&lt;/code&gt; for more details. This phase must be done after all installations (you have to install the password manager first).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For running each phase separately, we can rely on the presence of a function in a file. Sourcing a file is easy in Bash and checking that a function is available too.&lt;/p&gt;

&lt;p&gt;If we condense all we have talked before in one function, it will be like the following code, put in the &lt;code&gt;init&lt;/code&gt; script.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;browse_install&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nv"&gt;IFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt; file&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
    &lt;/span&gt;&lt;span class="nb"&gt;local &lt;/span&gt;BASENAME_FILE
    &lt;span class="nv"&gt;BASENAME_FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;basename&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

    &lt;span class="nb"&gt;local &lt;/span&gt;UPPERCASE_FILENAME
    &lt;span class="nv"&gt;UPPERCASE_FILENAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;"%s"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASENAME_FILE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; | &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="s2"&gt;"[:lower:]"&lt;/span&gt; &lt;span class="s2"&gt;"[:upper:]"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;DISABLE_VARIABLE_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"DOTFILES_NO_&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;UPPERCASE_FILENAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="p"&gt;!DISABLE_VARIABLE_NAME&lt;/span&gt;&lt;span class="k"&gt;:-}&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"true"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
      continue
    fi

    if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
      for &lt;/span&gt;action &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
        &lt;/span&gt;&lt;span class="nb"&gt;unset&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;action&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
      &lt;span class="k"&gt;done

      &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

      &lt;span class="k"&gt;for &lt;/span&gt;action &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
        if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="nt"&gt;-t&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;action&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"function"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
          &lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;"%s - %s"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;action&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASENAME_FILE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
          &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;action&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
        &lt;span class="k"&gt;fi
      done
    fi
  done&lt;/span&gt; &amp;lt; &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;find &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CURRENT_DIR&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/install"&lt;/span&gt; &lt;span class="nt"&gt;-type&lt;/span&gt; f &lt;span class="nt"&gt;-print0&lt;/span&gt; | &lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;C &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="nt"&gt;--zero-terminated&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="c"&gt;# ${CURRENT_DIR} is the root of the Dotfiles repository&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

browse_install clean &lt;span class="nb"&gt;install
&lt;/span&gt;browse_install credentials
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#symlinks"&gt;
  &lt;/a&gt;
  Symlinks
&lt;/h2&gt;

&lt;p&gt;The easiest tools to configure are the ones that rely on a single file on your home directory, that starts with a dot. That's where the repository takes its name: the famous "dotfiles". You know them: the &lt;code&gt;.bashrc&lt;/code&gt;, the &lt;code&gt;.vimrc&lt;/code&gt; or the &lt;code&gt;.gitconfig&lt;/code&gt;. In order to keep the file under version control system (Git), but not committing your entire &lt;code&gt;${HOME}&lt;/code&gt;, the easy trick is using a &lt;a href="https://en.wikipedia.org/wiki/Symbolic_link"&gt;symlink&lt;/a&gt;. The file exists in the &lt;code&gt;${HOME}&lt;/code&gt; folder, so your tool can read it, but the content remains on the folder under version control. The best of both worlds.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~/ &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-la&lt;/span&gt;
.bashrc -&amp;gt; /Users/macbook/code/dotfiles/symlinks/bashrc
.curlrc -&amp;gt; /Users/macbook/code/dotfiles/symlinks/curlrc
.gitconfig -&amp;gt; /Users/macbook/code/dotfiles/symlinks/gitconfig
.ignore -&amp;gt; /Users/macbook/code/dotfiles/symlinks/ignore
.inputrc -&amp;gt; /Users/macbook/code/dotfiles/symlinks/inputrc
.tmux.conf -&amp;gt; /Users/macbook/code/dotfiles/symlinks/tmux.conf
.vimrc -&amp;gt; /Users/macbook/code/dotfiles/symlinks/vimrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;They are simple to install: put all your &lt;code&gt;.file&lt;/code&gt; in a directory (e.g. symlinks) and link every file in that folder to your &lt;code&gt;${HOME}&lt;/code&gt; folder. Note that my files are named without a dot (e.g. &lt;code&gt;bashrc&lt;/code&gt;) and I add the "dot" during the symlink phase. A dotfile is by default a hidden file on most operting systems. I don't want it to be hidden in code, only when used.&lt;/p&gt;

&lt;p&gt;Creating the symlinks can be done with the following snippet, put in the &lt;code&gt;init&lt;/code&gt; script.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;create_symlinks&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nv"&gt;IFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt; file&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
    &lt;/span&gt;&lt;span class="nb"&gt;local &lt;/span&gt;BASENAME_FILE
    &lt;span class="nv"&gt;BASENAME_FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;basename&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FILE_LIMIT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASENAME_FILE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FILE_LIMIT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
      continue
    fi

    &lt;/span&gt;&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/.&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASENAME_FILE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;ln&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/.&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASENAME_FILE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;done&lt;/span&gt; &amp;lt; &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;find &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CURRENT_DIR&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/symlinks"&lt;/span&gt; &lt;span class="nt"&gt;-type&lt;/span&gt; f &lt;span class="nt"&gt;-print0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="c"&gt;# ${CURRENT_DIR} is the root of the Dotfiles repository&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;A gentle reminder on symlinks: they are living "content". When you pull the new version of your Dotfiles repository, the configuration is changed instantaneously.&lt;/p&gt;

&lt;p&gt;üëç It has good side: you pull your code and have nothing to do.&lt;/p&gt;

&lt;p&gt;üëé It has down side: if you have a Git conflict on your &lt;code&gt;symlinks/gitconfig&lt;/code&gt; file, you Git can be broken because your &lt;code&gt;~/.gitconfig&lt;/code&gt; is invalid üòÖ.&lt;/p&gt;

&lt;p&gt;Chicken-egg problem, always.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#sources"&gt;
  &lt;/a&gt;
  Sources
&lt;/h2&gt;

&lt;p&gt;For configuring you shell environment, the music is a little bit different, in other words, complex! The common way for configuring your shell is the &lt;code&gt;~/.bashrc&lt;/code&gt; (or &lt;code&gt;~/.zshrc&lt;/code&gt;, &lt;code&gt;.you-name-it-rc&lt;/code&gt;). That's what we just configured before with symlinks. But putting the configuration of every tools used in the same file makes the file unreadable, with a lot of comments for separating purpose of code. Not a clean way to do it.&lt;/p&gt;

&lt;p&gt;Fortunately, it's up to you to split it correctly. My &lt;code&gt;~/.bashrc&lt;/code&gt; sources every file contained in the &lt;code&gt;dotfiles/sources/&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;I don't want to hardcode the path of my Dotfiles folder. Thanks to symlinks already being linked to a folder inside my repository, I'm able to find where my files really are with the &lt;code&gt;${BASH_SOURCE[0]}&lt;/code&gt; trick.&lt;/p&gt;

&lt;p&gt;Sourcing the &lt;code&gt;sources&lt;/code&gt; folder can be done with the following snippet, put in the &lt;code&gt;symlinks/.bashrc&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;source_all&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;SCRIPT_DIR
  &lt;span class="nv"&gt;SCRIPT_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;dirname&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASH_SOURCE&lt;/span&gt;&lt;span class="p"&gt;[0]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

  &lt;span class="k"&gt;for &lt;/span&gt;file &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SCRIPT_DIR&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/../sources/"&lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In &lt;code&gt;sources/&lt;/code&gt; folder, you put every terminal configuration you need, e.g. environment variable, function, aliases etc. It's time for a good reminder.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Rule #1 of the Dotfiles Club&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You don't put secrets in your Dotfiles.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Rule #2 of the Dotfiles Club&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;YOU DO NOT PUT SECRETS IN YOUR DOTFILES.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/1AfLx8dLTVoHK/source.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/1AfLx8dLTVoHK/source.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to have secrets in your environment variables (e.g. a token, a password), put them in the &lt;code&gt;~/.localrc&lt;/code&gt;. Not symlinked anywhere! As its name stands, it remains "local".&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/.localrc"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
  &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/.localrc"&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#secrets"&gt;
  &lt;/a&gt;
  Secrets
&lt;/h3&gt;

&lt;p&gt;If you have read the two rules of the &lt;em&gt;Dotfiles Club&lt;/em&gt;, you may wonder how to configure automatically your computer without putting secrets in a repository. The secrets of the secrets management is: a password manager.&lt;/p&gt;

&lt;p&gt;Because we are in Unix environments, I personally use &lt;a&gt;pass&lt;/a&gt; that is easily scriptable, relies on the solid &lt;a href="https://en.wikipedia.org/wiki/Pretty_Good_Privacy"&gt;PGP encryption&lt;/a&gt; and stores everything in Git. I need to import my GPG key and it's fine. Security is a serious topic, importing the GPG key is &lt;strong&gt;the sole manual action&lt;/strong&gt; in my process. You can use any other password manager, install the CLI with &lt;code&gt;install/&lt;/code&gt; scripts and you should be able to retrieve your credentials to put it in your configuration file during the &lt;code&gt;credentials&lt;/code&gt; phase.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#tips-and-tricks"&gt;
  &lt;/a&gt;
  Tips and tricks
&lt;/h2&gt;

&lt;p&gt;Keep in mind that your dotfiles are expected to work on various environments at various stages of installation. Always be backward compatible and lenient on errors.&lt;/p&gt;

&lt;p&gt;When sourcing, you should not use Bash flags &lt;code&gt;-o nounset -o pipefail -o errexit&lt;/code&gt;, because if an error happens, it will crash Bash startup and you can end up being locked outside of your terminal.&lt;/p&gt;

&lt;p&gt;Also, if you use a tool that is not built-in, always check its presence with the following snippet. You may have disabled its installation, it may not be available on your architecture, etc.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; git &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;/dev/null 2&amp;gt;&amp;amp;1&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
  &lt;span class="c"&gt;# do `git` related stuff&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#bashrc"&gt;
  &lt;/a&gt;
  Bashrc
&lt;/h3&gt;

&lt;p&gt;Using a &lt;code&gt;.bashrc&lt;/code&gt; for automatically loading your environment is a good thing, but you don't need it when performing a headless operation (such as &lt;code&gt;rsync&lt;/code&gt;). In that case, it can slow you down. Fortunately, there is this trick for disabling the loading of the &lt;code&gt;.bashrc&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-z&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PS1&lt;/span&gt;&lt;span class="k"&gt;:-}&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;macOS has a particular case here. By default, it doesn't look for the &lt;code&gt;~/.bashrc&lt;/code&gt; file, but the &lt;code&gt;~/.bash_profile&lt;/code&gt;. You can fix it by creating this file and pointing it to your &lt;code&gt;.bashrc&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/.bashrc"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
  &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/.bashrc"&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#order"&gt;
  &lt;/a&gt;
  Order
&lt;/h3&gt;

&lt;p&gt;Browsing files must be done in a certain order because you may have dependencies between files (e.g. changing the &lt;code&gt;${PATH}&lt;/code&gt; variable before checking if a software is installed, installing Python before using &lt;code&gt;pip&lt;/code&gt;). You don't have this kind of problems in a single file, because you simply put the line at the right place.&lt;/p&gt;

&lt;p&gt;When iterating on a folder with &lt;code&gt;for&lt;/code&gt; or &lt;code&gt;find&lt;/code&gt;, Bash relies on &lt;a href="https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Filename-Expansion"&gt;the alphabetic order&lt;/a&gt;, defined by the &lt;a href="https://www.gnu.org/software/bash/manual/html_node/Bash-Variables.html#index-LC_005fALL"&gt;&lt;code&gt;LC_ALL / LC_COLLATE&lt;/code&gt;&lt;/a&gt; environment variables. You can control order of sourcing by ensuring your files are in alphabetical order. Pro-tips: underscore is before any lower case character.&lt;/p&gt;

&lt;p&gt;In order to properly configure your locale, you can add the following snippet before the &lt;code&gt;source_all&lt;/code&gt;, that gracefully sets locale if it's present.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;set_locale&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;LOCALES&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt; &lt;span class="s2"&gt;"en_US.utf8"&lt;/span&gt; &lt;span class="s2"&gt;"C.UTF-8"&lt;/span&gt; &lt;span class="s2"&gt;"C"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;ALL_LOCALES
  &lt;span class="nv"&gt;ALL_LOCALES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;locale &lt;span class="nt"&gt;-a&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

  &lt;span class="k"&gt;for &lt;/span&gt;locale &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LOCALES&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
    if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ALL_LOCALES&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;--count&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;locale&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;-eq&lt;/span&gt; 1 &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
      &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;locale&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
      &lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;locale&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
      &lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LANGUAGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;locale&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

      &lt;span class="k"&gt;return
    fi
  done

  return &lt;/span&gt;1
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#all-together"&gt;
  &lt;/a&gt;
  All together
&lt;/h2&gt;

&lt;p&gt;I've made the simplest possible dotfiles repository in &lt;a href="https://gist.github.com/ViBiOh/e38aeb07d6d56dfa78256b61781478c5"&gt;this Gist&lt;/a&gt;. It's not possible to create folder on a Gist, so for example &lt;code&gt;symlinks_bashrc&lt;/code&gt; should be &lt;code&gt;symlinks/bashrc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You'll find a snippet for installing Brew and changing the default shell of user on macOS. If you install Bash with Brew, you have two &lt;code&gt;bash&lt;/code&gt;: one in &lt;code&gt;/bin/bash&lt;/code&gt; (3.2.57) and one in &lt;code&gt;/usr/local/bin/bash&lt;/code&gt; (5+).&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ViBiOh"&gt;
        ViBiOh
      &lt;/a&gt; / &lt;a href="https://github.com/ViBiOh/dotfiles"&gt;
        dotfiles
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Dotfiles for configuring my terminal environment
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
dotfiles&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://sonarcloud.io/dashboard?id=ViBiOh_dotfiles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c6e38f71b09b012bcacd65e311aa0119169d8326593fb67055995a8aaa78ea01/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d566942694f685f646f7466696c6573266d65747269633d616c6572745f737461747573" alt="Quality Gate Status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;curl &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://raw.githubusercontent.com/ViBiOh/dotfiles/main/bootstrap&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;|&lt;/span&gt; bash&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Update&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-smi"&gt;${HOME}&lt;/span&gt;/code/dotfiles/init&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; -a&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Configuration&lt;/h2&gt;
&lt;p&gt;You can set following environment variables for customizing installation behavior:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;DOTFILES_NO_NODE="true"&lt;/code&gt; doesn't perform install of &lt;code&gt;install/node&lt;/code&gt; file (replace &lt;code&gt;NODE&lt;/code&gt; by any uppercase filename in &lt;code&gt;install/&lt;/code&gt; dir)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#!&lt;/span&gt;/usr/bin/env bash&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Server configuration example&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_ALACRITTY=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_APPLE=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_DNSMASQ=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_FIREFOX=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_GOLANG=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_GPG=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_KUBERNETES=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_NODE=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_PASS=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_PYTHON=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_PYTHON_ANSIBLE=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_PYTHON_PGCLI=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_SHELLCHECK=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_SUBLIME=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_SYNCTHING=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_TERRAFORM=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
SSH&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;ssh-keygen -t ed25519 -a 100 -C &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;$(&lt;/span&gt;whoami&lt;span class="pl-pds"&gt;)&lt;/span&gt;&lt;/span&gt;@&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;$(&lt;/span&gt;hostname&lt;span class="pl-pds"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; -f &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-smi"&gt;${HOME}&lt;/span&gt;/.ssh/id_ed25519&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
GPG&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;‚Ä¶
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ViBiOh/dotfiles"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;My &lt;a href="https://github.com/vibioh/dotfiles"&gt;personal Dotfiles&lt;/a&gt; have more syntactic sugar but are the source of inspiration for writing this article. It's a "template repository", feel free to use it. With near 2k commits, achieving my Dotfiles was a journey and I just wanted to share it. Hope you enjoyed the reading ride!&lt;/p&gt;

&lt;p&gt;PS: English is not my native language and it's my first post here, be kind, I'm open to advice for improving =)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://unsplash.com/photos/pUAM5hPaCRI"&gt;cover image from Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>bash</category>
      <category>productivity</category>
      <category>unix</category>
    </item>
    <item>
      <title>Send Mail Using Node.js and gmail in few Simple Steps </title>
      <author>Sudarshan Sawandkar</author>
      <pubDate>Tue, 27 Apr 2021 16:37:08 +0000</pubDate>
      <link>https://dev.to/sudarshansb143/send-mail-using-node-js-and-gmail-in-few-simple-steps-4n79</link>
      <guid>https://dev.to/sudarshansb143/send-mail-using-node-js-and-gmail-in-few-simple-steps-4n79</guid>
      <description>&lt;p&gt;We all know how tedious the stuff gets when we wan't to send mail from any automated system.&lt;/p&gt;

&lt;p&gt;For example, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ping someone when CRON job at remote VM Executed *&lt;/li&gt;
&lt;li&gt;Get failure logs of your server in mail*
etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, today we are going to take a look at how can we send mail from nodejs using just a gmail account and third party library node-mailer &lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;Setting up G-mail :-&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For sending mail's through your gmail A/C you must allow the " less secure app" access to your google A/C which is done here &lt;br&gt;
a&lt;br&gt;
&lt;a href="https://myaccount.google.com/lesssecureapps"&gt;https://myaccount.google.com/lesssecureapps&lt;/a&gt;&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#step-1-setting-up-nodemailer"&gt;
  &lt;/a&gt;
  Step 1 :- Setting up node-mailer
&lt;/h1&gt;

&lt;p&gt;Install node-mailer using npm or yarn (which is one prefer let me know in comments). I will use npm here because, it comes with node installation&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i node-mailer 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-2-setting-up-nodemailer-and-some-basic-configuration"&gt;
  &lt;/a&gt;
  Step 2 :- Setting up node-mailer and some basic configuration
&lt;/h1&gt;

&lt;p&gt;After installing node-mailer, we have to setup some config's. For sending mail, we are going to use &lt;em&gt;Gmail&lt;/em&gt; as a mail service and create a mail transported object. Which internally handles the SMTP (Simple Mail Transfer Protocol) transactions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodemailer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nodemailer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;sendMail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mailTransporter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nodemailer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTransport&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gmail&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yourUserName@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;SecretPassword&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-3-create-mail-object"&gt;
  &lt;/a&gt;
  Step 3 :- create mail object
&lt;/h1&gt;

&lt;p&gt;Now it's time to create actual mail payload. It will contain of recipient mail address and other stuff like subject and the string which we want to send with the mail. This is  the basic payload we can alter the stuff with great flexibility&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mailDetails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yourUserName@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;favPerson@anyDomain.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You Were Hacked 8)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;System failure !&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-4-send-mail"&gt;
  &lt;/a&gt;
  Step 4 :- Send Mail
&lt;/h1&gt;

&lt;p&gt;Now, just hit it. ( I am handling result  with callback, you can also use Promise here)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;mailTransporter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mailDetails&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error Occurs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Email sent successfully&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's It. Now, we can send email to anyone with any email address without setting up out own mail server or anything else &lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h1&gt;

&lt;p&gt;I hope you all learnt something new from this post. Let me know if anything else I have to write in my next one&lt;/p&gt;

&lt;p&gt;Thanks for reading :)&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>node</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
