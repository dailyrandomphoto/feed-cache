<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Exploring the CSS Paint API: Polygon Border</title>
      <author>Temani Afif</author>
      <pubDate>Wed, 20 Oct 2021 13:48:13 +0000</pubDate>
      <link>https://dev.to/afif/exploring-the-css-paint-api-polygon-border-42el</link>
      <guid>https://dev.to/afif/exploring-the-css-paint-api-polygon-border-42el</guid>
      <description>&lt;p&gt;Nowadays, creating complex shapes is an easy task using &lt;code&gt;clip-path&lt;/code&gt;, but adding a border to the shapes is always a pain. There is no robust CSS solution and we always need to produce specific “hacky” code for each particular case. In this article, I will show you how to solve this problem using the CSS Paint API.&lt;/p&gt;

&lt;p&gt;Before we dig into this third experimentation, Here is a small overview of what we are building. And, please note that everything we’re doing here is only supported in Chromium-based browsers so you’ll want to view the demos in Chrome, Edge, or Opera.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3TrM247Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/09/overview-polygon-border-1.gif%3Fresize%3D605%252C281%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3TrM247Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/09/overview-polygon-border-1.gif%3Fresize%3D605%252C281%26ssl%3D1" alt="CSS polygon border"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#live-demo"&gt;
  &lt;/a&gt;
  &lt;center&gt;&lt;a href="https://codepen.io/t_afif/pen/wvewXjZ"&gt;Live Demo&lt;/a&gt;&lt;/center&gt;
&lt;/h3&gt;

&lt;p&gt;You will find no complex CSS code there but rather a generic code where we only adjust a few variables to control the shape.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-main-idea"&gt;
  &lt;/a&gt;
  The main idea
&lt;/h2&gt;

&lt;p&gt;In order to achieve the polygon border, I am going to rely on a combination of the CSS &lt;code&gt;clip-path&lt;/code&gt; property and a custom mask created with the Paint API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kSAfNmds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/09/s_8C7B7FD228C95E70E08E0344785EF03E99A61895BF9BC4080F4DC424E6AFB8F0_1630408175106_overview2.png%3Fw%3D674%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kSAfNmds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/09/s_8C7B7FD228C95E70E08E0344785EF03E99A61895BF9BC4080F4DC424E6AFB8F0_1630408175106_overview2.png%3Fw%3D674%26ssl%3D1" alt="CSS polygon border"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#live-demo"&gt;
  &lt;/a&gt;
  &lt;center&gt;&lt;a href="https://codepen.io/t_afif/pen/RwgrvEr"&gt;Live Demo&lt;/a&gt;&lt;/center&gt;
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;We start with a basic rectangular shape.&lt;/li&gt;
&lt;li&gt;We apply &lt;code&gt;clip-path&lt;/code&gt; to get our polygon shape.&lt;/li&gt;
&lt;li&gt;We apply the custom mask to get our polygon border&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#the-css-setup"&gt;
  &lt;/a&gt;
  The CSS setup
&lt;/h3&gt;

&lt;p&gt;Here’s the CSS for the &lt;code&gt;clip-path&lt;/code&gt; step we’ll get to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;clip-path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--path&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nothing complex so far but note the use of the CSS variable &lt;code&gt;--path&lt;/code&gt;. The entire trick relies on that single variable. Since I will be using a &lt;code&gt;clip-path&lt;/code&gt; and a mask, both need to use the same parameters, hence the &lt;code&gt;--path&lt;/code&gt; variable. And, yes, the Paint API will use that same variable to create the custom mask.&lt;/p&gt;

&lt;p&gt;The CSS code for the whole process becomes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;clip-path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--path&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-mask&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;polygon-border&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In addition to the &lt;code&gt;clip-path&lt;/code&gt;, we apply the custom mask, plus we add an extra variable, &lt;code&gt;--border&lt;/code&gt;, to control the thickness of the border. As you can see, everything is still pretty basic and generic CSS so far. After all, this is one of the things that makes the CSS Paint API so great to work with.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-javascript-setup"&gt;
  &lt;/a&gt;
  The JavaScript setup
&lt;/h3&gt;

&lt;p&gt;&lt;sup&gt;I highly recommend reading the first part of &lt;a href="https://dev.to/this-is-learning/exploring-the-css-paint-api-image-fragmentation-effect-3ekl"&gt;my previous article&lt;/a&gt; to understand the structure of the Paint API.&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Now, let’s see what is happening inside the &lt;code&gt;paint()&lt;/code&gt; function as we jump into JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--border&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;beginPath&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lineTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closePath&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lineWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strokeStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The ability to get and set CSS custom properties is one of the reasons they’re so great. We can reach for JavaScript to first read the value of the &lt;code&gt;--path&lt;/code&gt; variable, then convert it into an array of points (seen on the very first line above). So, that means &lt;code&gt;50% 0,100% 100%,0 100%&lt;/code&gt; become the points for the mask, i.e. &lt;code&gt;points = ["50% 0","100% 100%","0 100%"]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we loop through the points to draw a polygon using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/moveTo"&gt;moveTo&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo"&gt;lineTo&lt;/a&gt;. This polygon is exactly the same as the one drawn in CSS with the &lt;code&gt;clip-path&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;Finally, and after drawing the shape, I add a stroke to it. I define the thickness of the stroke using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth"&gt;lineWidth&lt;/a&gt; and I set a solid color using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle"&gt;strokeStyle&lt;/a&gt;. In other words, only the stroke of the shape is visible since I am not filling the shape with any color (i.e. it’s transparent).&lt;/p&gt;

&lt;p&gt;Now all we have to do is to update the path and the thickness to create any polygon border. It’s worth noting that we are not limited to solid color here since we are using the CSS background property. We can consider gradients or images.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V-GnjKLP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/09/CSS-polygon-border-result.png%3Fw%3D732%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V-GnjKLP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/09/CSS-polygon-border-result.png%3Fw%3D732%26ssl%3D1" alt="CSS polygon border"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#live-demo"&gt;
  &lt;/a&gt;
  &lt;center&gt;&lt;a href="https://codepen.io/t_afif/pen/zYzqzjO"&gt;Live Demo&lt;/a&gt;&lt;/center&gt;
&lt;/h4&gt;

&lt;p&gt;In case we need to add content, we have to consider a pseudo-element. Otherwise, the content gets clipped in the process. It’s not incredibly tough to support content. We move the mask property to the pseudo-element. We can keep the &lt;code&gt;clip-path&lt;/code&gt; declaration on the main element. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#live-demo"&gt;
  &lt;/a&gt;
  &lt;center&gt;&lt;a href="https://codepen.io/t_afif/pen/dyRMQXP"&gt;Live Demo&lt;/a&gt;&lt;/center&gt;
&lt;/h4&gt;




&lt;h2&gt;
  &lt;a href="#questions-so-far"&gt;
  &lt;/a&gt;
  Questions so far?
&lt;/h2&gt;

&lt;p&gt;I know you probably have some burning questions you want to ask after looking over that last script. Allow me to preemptively answer a couple things I bet you have in mind.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-that-raw-cc-endraw-function"&gt;
  &lt;/a&gt;
  What is that &lt;code&gt;cc()&lt;/code&gt; function?
&lt;/h3&gt;

&lt;p&gt;I am using that function to convert the value of each point into pixel values. For each point, I get both x and y coordinates — using &lt;code&gt;points[i].trim().split(" ")&lt;/code&gt; — and then I convert those coordinates to make them usable inside the canvas element that allows us to draw with those points.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;fy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;fy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;fy&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The logic is simple: if it’s a percentage value, I use the width (or the height) to find the final value. If it’s a pixel value, I simply get the value without the unit. If, for, example we have &lt;code&gt;[50% 20%]&lt;/code&gt; where the width is equal to &lt;code&gt;200px&lt;/code&gt; and the height is equal to &lt;code&gt;100px&lt;/code&gt;, then we get &lt;code&gt;[100 20]&lt;/code&gt;. If it’s &lt;code&gt;[20px 50px]&lt;/code&gt;, then we get &lt;code&gt;[20 50]&lt;/code&gt;. And so on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-are-you-using-css-raw-clippath-endraw-if-the-mask-is-already-clipping-the-element-to-the-stroke-of-the-shape"&gt;
  &lt;/a&gt;
  Why are you using CSS &lt;code&gt;clip-path&lt;/code&gt; if the mask is already clipping the element to the stroke of the shape?
&lt;/h3&gt;

&lt;p&gt;Using only the mask was the first idea I had in mind, but I stumbled upon two major issues with that approach. The first is related to how &lt;code&gt;stroke()&lt;/code&gt; works. From &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/stroke"&gt;MDN&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Strokes are aligned to the center of a path; in other words, half of the stroke is drawn on the inner side, and half on the outer side.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That “half inner side, half outer side” gave me a lot of headaches, and I always end up with a strange overflow when putting everything together. That’s where CSS &lt;code&gt;clip-path&lt;/code&gt; helps; it clips the outer part and only keeps the inner side — no more overflow!&lt;/p&gt;

&lt;p&gt;You will notice the use of &lt;code&gt;ctx.lineWidth = 2*b&lt;/code&gt;. I am adding double the border thickness because I will clip half of it to end with the right thickness needed around the entire shape.&lt;/p&gt;

&lt;p&gt;The second issue is related to the shape’s hover-able area. It’s known that masking does not affect that area and we can still hover/interact with the whole rectangle. Again, reaching for &lt;code&gt;clip-path&lt;/code&gt; fixes the issue, plus we limit the interaction just to the shape itself.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://codepen.io/t_afif/pen/dyRMRby"&gt;following demo&lt;/a&gt; illustrates these two issues. The first element has both a mask and &lt;code&gt;clip-path&lt;/code&gt;, while the second only has the mask. We can clearly see the overflow issue. Try to hover the second one to see that we can change the color even if the cursor is outside the triangle.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-are-you-using-raw-property-endraw-with-the-border-value"&gt;
  &lt;/a&gt;
  Why are you using &lt;code&gt;@property&lt;/code&gt; with the border value?
&lt;/h3&gt;

&lt;p&gt;This is an interesting — and pretty tricky — part. By default, custom properties (like &lt;code&gt;--border&lt;/code&gt;) are considered a “CSSUnparsedValue” which means they are treated as strings. From the &lt;a href="https://drafts.css-houdini.org/css-typed-om/#unparsedvalue-objects"&gt;CSS spec&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‘CSSUnparsedValue’ objects represent property values that reference custom properties. They are comprised of a list of string fragments and variable references.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With &lt;code&gt;@property&lt;/code&gt;, we can register the custom property and give it a type so that it can be recognized by the browser and handled as a valid type instead of a string. In our case, we are registering the border as a &lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt; type so later it becomes a &lt;a href="https://drafts.css-houdini.org/css-typed-om/#cssunitvalue"&gt;CSSUnitValue&lt;/a&gt;. What this also does is allow us to use any length unit (&lt;code&gt;px&lt;/code&gt;, &lt;code&gt;em&lt;/code&gt;, &lt;code&gt;ch&lt;/code&gt; ,&lt;code&gt;vh&lt;/code&gt;, etc.) for the border value.&lt;/p&gt;

&lt;p&gt;This may sound a bit complex but let me try to illustrate the difference with a DevTools screenshot.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r5n4kHUo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/09/s_8C7B7FD228C95E70E08E0344785EF03E99A61895BF9BC4080F4DC424E6AFB8F0_1630579831868_unit.png%3Fw%3D702%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r5n4kHUo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/09/s_8C7B7FD228C95E70E08E0344785EF03E99A61895BF9BC4080F4DC424E6AFB8F0_1630579831868_unit.png%3Fw%3D702%26ssl%3D1" alt="console log CSS value"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am using &lt;code&gt;console.log()&lt;/code&gt; on a variable where I defined &lt;code&gt;5em&lt;/code&gt;. The first one is registered but the second one is not.&lt;/p&gt;

&lt;p&gt;In the first case, the browser recognizes the type and makes the conversion into a pixel value, which is useful since we only need pixel values inside the &lt;code&gt;paint()&lt;/code&gt; function. In the second case, we get the variable as a string which is not very useful since we cannot convert em units into &lt;code&gt;px&lt;/code&gt; units inside the &lt;code&gt;paint()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Try all the units. It will always results with the computed pixel value inside the &lt;code&gt;paint()&lt;/code&gt; function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-about-the-raw-path-endraw-variable"&gt;
  &lt;/a&gt;
  What about the &lt;code&gt;--path&lt;/code&gt; variable?
&lt;/h3&gt;

&lt;p&gt;I wanted to use the same approach with the &lt;code&gt;--path&lt;/code&gt; variable but, unfortunately, I think I pushed CSS right up to the limits of what it can do here. Using &lt;code&gt;@property&lt;/code&gt;, we can register complex types, even multi-value variables. But that’s still not enough for the path we need.&lt;/p&gt;

&lt;p&gt;We can use the + and # symbols to &lt;a href="https://drafts.css-houdini.org/css-properties-values-api/#multipliers"&gt;define a space-separated or comma-separated list of values&lt;/a&gt;, but our path is a comma-separated list of space-separated percentage (or length) values. I would use something like &lt;code&gt;[&amp;lt;length-percentage&amp;gt;+]#&lt;/code&gt;, but it doesn’t exist.&lt;/p&gt;

&lt;p&gt;For the path, I am obliged to manipulate it as a string value. That limits us just to percentage and pixel values for now. For this reason, I defined the &lt;code&gt;cc()&lt;/code&gt; function to convert the string values into pixel values.&lt;/p&gt;

&lt;p&gt;We can read in the &lt;a href="https://drafts.css-houdini.org/css-properties-values-api/#syntax-strings"&gt;CSS spec&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The internal grammar of the syntax strings is a subset of the CSS Value Definition Syntax. Future levels of the specification are expected to expand the complexity of the allowed grammar, allowing custom properties that more closely resemble the full breadth of what CSS properties allow.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Even if the grammar is extend to be able to register the path, we will still face issue in case we need to include &lt;code&gt;calc()&lt;/code&gt; inside our path:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;--path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;calc&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;-&lt;/span&gt; &lt;span class="err"&gt;40&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="err"&gt;40&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above, &lt;code&gt;calc(100% - 40px)&lt;/code&gt; is a value that the browser considers a &lt;code&gt;&amp;lt;length-percentage&amp;gt;&lt;/code&gt;, but the browser cannot compute that value until it knows the reference for the percentage. In other words, we cannot get the equivalent pixel value inside the &lt;code&gt;paint()&lt;/code&gt; function since the reference can only be known when the value gets used within &lt;code&gt;var()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To overcome this, we can can extend the &lt;code&gt;cc()&lt;/code&gt; function to do the conversion. We did the conversion of a percentage value and a pixel value, so let’s combine those into one conversion. We will consider 2 cases: &lt;code&gt;calc(P% - Xpx)&lt;/code&gt; and &lt;code&gt;calc(P% + Xpx)&lt;/code&gt;. Our script becomes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;fy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;calc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;calc(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;fx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;fx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;fx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;fx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;calc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;calc(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="nx"&gt;fy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="nx"&gt;fy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;fy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;fy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;fy&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We’re using &lt;code&gt;indexOf()&lt;/code&gt; to test the existence of calc, then, with some string manipulation, we extract both values and find the final pixel value.&lt;/p&gt;

&lt;p&gt;And, as a result, we also need to update this line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;…to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(?!\(&lt;/span&gt;&lt;span class="sr"&gt;.*&lt;/span&gt;&lt;span class="se"&gt;)\s(?![^&lt;/span&gt;&lt;span class="sr"&gt;(&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt;&lt;span class="se"&gt;?\))&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we need to consider &lt;code&gt;calc()&lt;/code&gt;, using the space character won’t work for splitting. That’s because &lt;code&gt;calc()&lt;/code&gt; also contains spaces. So we need a regex. Don’t ask me about it — it’s the one that worked after trying a lot from Stack Overflow.&lt;/p&gt;

&lt;p&gt;Here is &lt;a href="https://codepen.io/t_afif/pen/zYzogdX"&gt;basic demo&lt;/a&gt; to illustrate the update we did so far to support &lt;code&gt;calc()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Notice that we have stored the &lt;code&gt;calc()&lt;/code&gt; expression within the variable &lt;code&gt;--v&lt;/code&gt; that we registered as a &lt;code&gt;&amp;lt;length-percentage&amp;gt;&lt;/code&gt;. This is also a part of the trick because if we do this, the browser uses the correct format. Whatever the complexity of the &lt;code&gt;calc()&lt;/code&gt; expression, the browser always converts it to the format &lt;code&gt;calc(P% +/- Xpx)&lt;/code&gt;. For this reason, we only have to deal with that format inside the &lt;code&gt;paint()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Here is a &lt;a href="https://codepen.io/t_afif/pen/mdwRVBr"&gt;Demo&lt;/a&gt; with different examples where we are using a different &lt;code&gt;calc()&lt;/code&gt; expression for each one.&lt;/p&gt;

&lt;p&gt;If you inspect the code of each box and see the computed value of &lt;code&gt;--v&lt;/code&gt;, you will always find the same format which is super useful because we can have any kind of calculation we want.&lt;/p&gt;

&lt;p&gt;It should be noted that using the variable &lt;code&gt;--v&lt;/code&gt; is not mandatory. We can include the &lt;code&gt;calc()&lt;/code&gt; directly inside the path. We simply need to make sure we insert the correct format since the browser will not handle it for us (remember that we cannot register the path variable so it’s a string for the browser). This can be useful when we need to have many &lt;code&gt;calc()&lt;/code&gt; inside the path and creating a variable for each one will make the code too lengthy. We will see a few examples at the end.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#can-we-have-dashed-border"&gt;
  &lt;/a&gt;
  Can we have dashed border?
&lt;/h3&gt;

&lt;p&gt;We can! And it only takes one instruction. The &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element already has a built-in function to draw dashed stroke &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash"&gt;setLineDash()&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The setLineDash() method of the Canvas 2D API’s CanvasRenderingContext2D interface sets the line dash pattern used when stroking lines. It uses an array of values that specify alternating lengths of lines and gaps which describe the pattern.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All we have to do is to introduce another variable to define our dash pattern.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gBw0BE3d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/09/css-dashed-polygon-border.png%3Fw%3D746%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gBw0BE3d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/09/css-dashed-polygon-border.png%3Fw%3D746%26ssl%3D1" alt="CSS polygon dashed border"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#live-demo"&gt;
  &lt;/a&gt;
  &lt;center&gt;&lt;a href="https://codepen.io/t_afif/pen/RwgaqEV"&gt;Live Demo&lt;/a&gt;&lt;/center&gt;
&lt;/h4&gt;

&lt;p&gt;In the CSS, we simply added a CSS variable, &lt;code&gt;--dash&lt;/code&gt;, and within the mask is the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--dash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setLineDash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also control the offset using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset"&gt;lineDashOffset&lt;/a&gt;. We will see later how controlling the offset can help us reach some cool animations.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use cases!
&lt;/h2&gt;

&lt;p&gt;After exploring the behind the scene of this technique, let’s now focus on the CSS part and check out a few uses cases for our polygon border.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-collection-of-buttons"&gt;
  &lt;/a&gt;
  A collection of buttons
&lt;/h3&gt;

&lt;p&gt;We can easily generate custom shape buttons having cool hover effect.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/abwBPPz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Notice how &lt;code&gt;calc()&lt;/code&gt; is used inside the path of the last button the way we described it earlier. It works fine since I am following the correct format.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#breadcrumbs"&gt;
  &lt;/a&gt;
  Breadcrumbs
&lt;/h3&gt;

&lt;p&gt;No more headaches when creating a breadcrumb system! Below, you will find no “hacky” or complex CSS code, but rather something that’s pretty generic and easy to understand where all we have to do is to adjust a few variables.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/powNXwR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#card-reveal-animation"&gt;
  &lt;/a&gt;
  Card reveal animation
&lt;/h3&gt;

&lt;p&gt;If we apply some animation to the thickness, we can get some &lt;a href="https://codepen.io/t_afif/pen/oNwBxmp"&gt;fancy hover effect&lt;/a&gt;. We can use that same idea to create an animation that reveals the card:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/ZEyLWgp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#callout-amp-speech-bubble"&gt;
  &lt;/a&gt;
  Callout &amp;amp; speech bubble
&lt;/h3&gt;

&lt;p&gt;“How the hell we can add border to that small arrow???” I think everyone has stumbled on this issue when dealing with either a callout or speech bubble sort of design. The Paint API makes this trivial.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/qBjRPeV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In that demo, you will find a few examples that you can extend. You only need to find the path for your speech bubble, then adjust some variables to control the border thickness and the size/position of the arrow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#animating-dashes"&gt;
  &lt;/a&gt;
  Animating dashes
&lt;/h3&gt;

&lt;p&gt;A last one before we end. This time we will focus on the dashed border to create more animations. We already did one in the button collection where we transform a dashed border into a solid one. Let’s tackle two others.&lt;/p&gt;

&lt;p&gt;Hover the below and see the nice effect we get:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/MWoJROX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Those who have worked with SVG for some time are likely familiar with the sort effect that we achieve by animating &lt;code&gt;stroke-dasharray&lt;/code&gt;. Thanks to the Paint API, we can do this directly in CSS. The idea is almost the same one we use with SVG. We define the dash variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;--dash&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--a&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="err"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The variable &lt;code&gt;--a&lt;/code&gt; starts at &lt;code&gt;0&lt;/code&gt;, so our pattern is a solid line (where the length equals 0) with a gap (where length 1000); hence no border. We animate &lt;code&gt;--a&lt;/code&gt; to a big value to draw our border.&lt;/p&gt;

&lt;p&gt;We also talked about using &lt;code&gt;lineDashOffset&lt;/code&gt;, which we can use for another kind of animation. Hover the below and see the result:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/JjJEVwP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Finally, a CSS solution to animate the position of dashes that works with any kind of shape!&lt;/p&gt;

&lt;p&gt;What I did is pretty simple. I added an extra variable, &lt;code&gt;--offset&lt;/code&gt;, to which I apply a transition from 0 to N. Then, inside the &lt;code&gt;paint()&lt;/code&gt; function, I do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--offset&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lineDashOffset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As simple as that! Let’s not forget an infinite animation using keyframes:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/OJgWGKx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We can make the animation run continuously by offsetting 0 to N where N is the sum of the values used in the dash variable (which, in our case, is 10+15=25). We use a negative value to have the opposite direction direction.&lt;/p&gt;

&lt;p&gt;I have probably missed a lot of use cases that I let you discover!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#you-want-to-support-me"&gt;
  &lt;/a&gt;
  &lt;center&gt;You want to support me?&lt;/center&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/afif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQj764Ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-orange.png" alt="buy me a coffee"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;center&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/center&gt;

&lt;p&gt;&lt;a href="https://www.patreon.com/temani"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4kAQAgAW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/db3jtgy2i5l4w8slkps5.png" alt="Become a patron"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Deploying a Telegram Bot to AWS ECS with AWS Copilot. [Step by step] for absolut beginners.</title>
      <author>Christian Prado Ciokler</author>
      <pubDate>Wed, 20 Oct 2021 13:29:12 +0000</pubDate>
      <link>https://dev.to/chrisciokler/deploying-a-telegram-bot-to-aws-ecs-with-aws-copilot-step-by-step-for-absolut-beginners-ngl</link>
      <guid>https://dev.to/chrisciokler/deploying-a-telegram-bot-to-aws-ecs-with-aws-copilot-step-by-step-for-absolut-beginners-ngl</guid>
      <description>&lt;p&gt;The purpose of this project is to share my experience and hope to be of help to someone. Copilot is a young tool for creating and deploying containerized services without handling all the configuration troubles of ECS, EC2, and Fargate. Maybe there is a better way to deploy this kind of project out there but please humor me, we are having fun and trying new things.&lt;/p&gt;

&lt;p&gt;🙏 Hope you like 👍 this post and let's get down to business. 🚀&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of content &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#stack"&gt;The Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#node"&gt;Installing Node&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#aws"&gt;Installing AWS CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#copilot"&gt;Installing Copilot Cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#docker"&gt;Installing Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#project"&gt;Setting up the project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bot"&gt;Creating the Bot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#coding"&gt;Let’s code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#testing"&gt;Testing the Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dockerfile"&gt;Configuring dockerfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploy"&gt;Deploying to ECS with Copilot Cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#refactoring"&gt;Making some refactoring &amp;amp; updating&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusions"&gt;The End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#the-stack-pointup"&gt;
  &lt;/a&gt;
  The Stack &lt;a href="#table"&gt;☝️&lt;/a&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;For this project we are going to use the following tools, don’t worry if you don’t know how to use them I’ll leave you the documentation links down below. Anyhow, I would guide you step by step all the way.&lt;/p&gt;

&lt;p&gt;OS: Windows -should work on others OS as well-&lt;br&gt;
Node &lt;a href="https://nodejs.org/es/docs/"&gt;docs&lt;/a&gt; &lt;a href="https://nodejs.org/es/download/"&gt;installation&lt;/a&gt;&lt;br&gt;
AWS CLI v2 &lt;a href="https://docs.aws.amazon.com/cli/index.html"&gt;docs&lt;/a&gt; &lt;a href="https://docs.aws.amazon.com/es_es/cli/latest/userguide/install-cliv2.html"&gt;installation&lt;/a&gt;&lt;br&gt;
Copilot Cli &lt;a href="https://aws.github.io/copilot-cli/docs/overview/"&gt;docs&lt;/a&gt; &lt;a href="https://aws.github.io/copilot-cli/docs/getting-started/install/"&gt;installation&lt;/a&gt;&lt;br&gt;
Docker &lt;a href="https://docs.docker.com/"&gt;docs&lt;/a&gt; &lt;a href="https://www.docker.com/products/docker-desktop"&gt;installation&lt;/a&gt;&lt;br&gt;
Telegraf &lt;a href="https://telegraf.js.org/"&gt;docs&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/telegraf"&gt;installation&lt;/a&gt;&lt;br&gt;
Binance API &lt;a href="https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md"&gt;docs&lt;/a&gt;&lt;br&gt;
Axios &lt;a href="https://axios-http.com/docs/intro"&gt;docs&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#installing-node-pointup"&gt;
  &lt;/a&gt;
  Installing Node &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;First, we install node, there is not much to say about it just follow this link &lt;a href="https://nodejs.org/es/download/"&gt;here&lt;/a&gt; to download Node and the installer will guide you through the process. At the moment this post is been created we are using version 16.11.0.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#installing-aws-cli-pointup"&gt;
  &lt;/a&gt;
  Installing AWS CLI &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;First, we need to have an AWS account, so if you don’t have one &lt;a href="https://aws.amazon.com/resources/create-account/"&gt;get down to it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you have the account created we install &lt;a href="https://docs.aws.amazon.com/es_es/cli/latest/userguide/install-cliv2.html"&gt;AWS CLI v2&lt;/a&gt; and check if it is working with the command &lt;strong&gt;aws help&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With everything in order, the next step is to configure AWS credentials. So we need to create access keys for an IAM user&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Sign in to the AWS Management Console and open the IAM console at &lt;a href="https://console.aws.amazon.com/iam/"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On the navigation pane, choose &lt;strong&gt;Users&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choose the name of the user whose access keys you want to create, and then choose the &lt;strong&gt;Security credentials&lt;/strong&gt; tab.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the &lt;strong&gt;Access keys&lt;/strong&gt; section, choose &lt;strong&gt;Create access key&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To view the new access key pair, choose &lt;strong&gt;Show&lt;/strong&gt;. You will not have access to the secret access key again after this dialog box closes. Your credentials will look something like this:&lt;br&gt;
Access key ID: AKIAIOSFODNN7EXAMPLE&lt;br&gt;
Secret access key: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To download the key pair, choose &lt;strong&gt;Download .csv file&lt;/strong&gt;. Store the keys in a secure location. You will not have access to the secret access key again after this dialog box closes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Keep the keys confidential to protect your AWS account and never email them. Do not share them outside your organization, even if an inquiry appears to come from AWS or Amazon.com. No one who legitimately represents Amazon will ever ask you for your secret key.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After you download the .csv file, choose &lt;strong&gt;Close&lt;/strong&gt;. When you create an access key, the key pair is active by default, and you can use the pair right away.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To add the credentials to AWS CLI we write the command &lt;strong&gt;aws configure --profile myprofilename&lt;/strong&gt; in the terminal and follow the steps.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;AWS Access Key ID [None]: AKIAI44QH8DHBEXAMPLE &lt;/li&gt;
&lt;li&gt;AWS Secret Access Key [None]: je7MtGbClwBF/EXAMPLEKEY &lt;/li&gt;
&lt;li&gt;Default region name [None]: us-east-1 &lt;/li&gt;
&lt;li&gt;Default output format [None]: json&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s it, know you have successfully set up AWS CLI !!!!&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#installing-copilot-cli-pointup"&gt;
  &lt;/a&gt;
  Installing Copilot Cli  &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The instructions for the installation are &lt;a href="https://aws.github.io/copilot-cli/docs/getting-started/install/"&gt;here&lt;/a&gt;, once you are done write &lt;strong&gt;copilot --help&lt;/strong&gt; in your terminal if everything works as it supposes to,!Congratulations, your pc is smarter than mine, if you had an error don’t worry I had the same problem. Here is how you can fix it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Remember this solution I only tested on Windows OS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Find the installed files and delete them, copilot.exe, copilot.asc, and ecs-cli.asc.&lt;/li&gt;
&lt;li&gt;Install them again using the terminal as administrator but in this folder.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;Invoke-WebRequest -OutFile 'C:\Program Files\Amazon\Copilot\copilot.exe' https://github.com/aws/copilot-cli/releases/latest/download/copilot-windows.exe&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Invoke-WebRequest -OutFile 'C:\Program Files\Amazon\Copilot\copilot.asc' https://github.com/aws/copilot-cli/releases/latest/download/copilot-windows.exe.asc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Invoke-WebRequest -OutFile 'C:\Program Files\Amazon\Copilot\ecs-cli.asc' https://github.com/aws/copilot-cli/releases/latest/download/copilot-windows.exe&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Type &lt;strong&gt;Win + R&lt;/strong&gt; and write this &lt;strong&gt;rundll32.exe sysdm.cpl,EditEnvironmentVariables&lt;/strong&gt;, it will open your environment variables panel.&lt;/li&gt;
&lt;li&gt;Go to system variables, select path and click edit, add a new path &lt;strong&gt;C:\Program Files\Amazon\Copilot&lt;/strong&gt; or the path where the copilot.exe file is.&lt;/li&gt;
&lt;li&gt;Save the changes and restart.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Write the command &lt;strong&gt;copilot --help&lt;/strong&gt; in your terminal and it should work.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#installing-docker-pointup"&gt;
  &lt;/a&gt;
  Installing Docker &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Download docker &lt;a href="https://www.docker.com/products/docker-desktop"&gt;here&lt;/a&gt; and follow the instructions.&lt;/p&gt;

&lt;p&gt;Before you install the Docker Desktop WSL 2 backend, you must complete the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install Windows 10, version 1903 or higher, or Windows 11.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enable WSL 2 feature on Windows. For detailed instructions, refer to &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install"&gt;the Microsoft documentation&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Download and install &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package"&gt;the Linux kernel update package&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;
  &lt;a href="#setting-up-the-project-pointup"&gt;
  &lt;/a&gt;
  Setting up the project &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Create a folder a give it a name of your choice, mine will be crypto-bot-app, open your folder on your IDE and write &lt;strong&gt;npm init -y&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now we add the packages. Write on the terminal &lt;strong&gt;npm i telegraf axios&lt;/strong&gt;&lt;br&gt;
All set!!!&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#creating-the-bot-pointup"&gt;
  &lt;/a&gt;
  Creating the bot &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open your Telegram app and search for the &lt;a href="https://t.me/botfather"&gt;BotFather&lt;/a&gt; and start the bot.&lt;/li&gt;
&lt;li&gt;Write the command /newbot and give it a name, mine will be crypto-bot and username crptobot&lt;/li&gt;
&lt;li&gt;You should receive a token like this 2098237194:AAH9QoFokuBOn0IqES0IGJdJ_AR-tySMOX4, save it for later.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You created your first bot !!congratulation!!, now let add some code to it.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#lets-code-pointup"&gt;
  &lt;/a&gt;
  Let’s code &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Create an index.js file on the project folder where we are going to put this code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Telegraf&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;telegraf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Telegraf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2098237194:AAH9QoFokuBOn0IqES0IGJdJ_AR-tySMOX4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//your token&lt;/span&gt;

&lt;span class="c1"&gt;// START-----------------------------------------------&lt;/span&gt;
&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hi &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`I still under development but you can use me to get the latest price of a cryptocurrency`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`For example to know the price of an specific crypto write the command /price and the symbol of the cryptocurrency`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/price btc`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// COMMANDS===============================================================&lt;/span&gt;
&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;price&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Price&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PRICE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ticker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/price &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://api.binance.com/api/v3/ticker/price?symbol=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ticker&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;USDT`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ticker&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; USDT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Some error occurred in your request, please try again&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#testing-the-code-pointup"&gt;
  &lt;/a&gt;
  Testing the code &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Before initiating, the code let's add the following piece of code to our package.json&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node index.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//here&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;  &lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now run the command &lt;strong&gt;npm start&lt;/strong&gt;, go to telegram, open your bot and type &lt;strong&gt;/start&lt;/strong&gt; or &lt;strong&gt;/price btc&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Once you receive the expected response we may continue this journey.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#configuring-dockerfile-pointup"&gt;
  &lt;/a&gt;
  Configuring dockerfile &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Create a file in your project directory and name it &lt;strong&gt;Dockerfile&lt;/strong&gt;, add this configuration code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM node:16.9.1

WORKDIR /app

COPY package*.json ./

RUN npm install

COPY . .

EXPOSE 80

CMD ["npm","start"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, create a file with the name .dockerignore and add this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;copilot
node_modules
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#deploying-to-ecs-with-copilot-cli-pointup"&gt;
  &lt;/a&gt;
  Deploying to ECS with Copilot Cli &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Now that we have the dockerfile configured correctly, we are going to deploy the bot to ECS to work 24/7.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write the command &lt;strong&gt;copilot init&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Name de app, I'll use crypto-bot-app.&lt;/li&gt;
&lt;li&gt;We choose the workload, in my case Backend Service.&lt;/li&gt;
&lt;li&gt;Name backend service as bot-main-service.&lt;/li&gt;
&lt;li&gt;
Deploy the app with the command &lt;strong&gt;copilot app deploy&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#making-some-refactoring-pointup"&gt;
  &lt;/a&gt;
  Making some refactoring &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;At this point, we can make some refactoring to optimize our code. First, we are going to create a folder "src" with a javascript file named "bot-functions.js" and add this code.&lt;/p&gt;

&lt;p&gt;bot-functions.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;start_message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hi &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`I still under development but you can use me to get the latest price of a cryptocurrency`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`For example to know the price of an specific crypto write the command /price and the symbol of the cryptocurrency`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/price btc`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;getCryptocurrencyPrice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ticker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/price &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://api.binance.com/api/v3/ticker/price?symbol=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ticker&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;USDT`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ticker&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; USDT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Some error occurred in your request, please try again&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then go to index.js and make some changes to it.&lt;/p&gt;

&lt;p&gt;index.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Telegraf&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;telegraf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/bot-functions.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Telegraf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2098237194:AAH9QoFokuBOn0IqES0IGJdJ_AR-tySMOX4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//your token&lt;/span&gt;

&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;price&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Price&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PRICE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCryptocurrencyPrice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we test that everything is working correctly, we add the changes with the command &lt;strong&gt;copilot app deploy&lt;/strong&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#the-end-pointup"&gt;
  &lt;/a&gt;
  The End &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Keep in mind that this is a dev project for educational purposes, in the real world you should storage tokens and important information on environment variables, and all the good practices that the job demands. If you like it, give a thumbs-up 👍 and share it.&lt;/p&gt;

&lt;p&gt;to the next post...&lt;/p&gt;

</description>
      <category>node</category>
      <category>aws</category>
      <category>copilot</category>
      <category>javascript</category>
    </item>
    <item>
      <title>DataDog vs New Relic | Detailed comparison (5 key features)</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Wed, 20 Oct 2021 13:24:12 +0000</pubDate>
      <link>https://dev.to/signoz/datadog-vs-new-relic-detailed-comparison-5-key-features-3f9f</link>
      <guid>https://dev.to/signoz/datadog-vs-new-relic-detailed-comparison-5-key-features-3f9f</guid>
      <description>&lt;p&gt;Both DataDog and New Relic are enterprise monitoring tools that provide a wide range of products covering different aspects of application and infrastructure monitoring. In this article, we will compare DataDog and New Relic based on their different monitoring capabilities.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Businesses are embracing digital transformation now more than ever. In most cases, the digital channel is the primary driver of revenue and growth. Customers and end-users are going online to fulfill both their daily and long-term needs.&lt;/p&gt;

&lt;p&gt;The digital shift has made the app production environment a critical piece of an organization's success. The performance of your application in production needs to be monitored to ensure high availability at all times.&lt;/p&gt;

&lt;p&gt;DataDog and New Relic provide numerous products to monitor applications. Some of the key products offered by both tools include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application Performance Monitoring&lt;/li&gt;
&lt;li&gt;Infrastructure monitoring&lt;/li&gt;
&lt;li&gt;Log Management&lt;/li&gt;
&lt;li&gt;Network monitoring&lt;/li&gt;
&lt;li&gt;Browser or end-user monitoring&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's compare DataDog and New Relic based on the features they provide in the above-mentioned categories.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can also check out &lt;a href="https://signoz.io/?utm_source=blog&amp;amp;utm_medium=datadog_vs_newrelic"&gt;SigNoz&lt;/a&gt;, an open-source APM tool. It is built natively for OpenTelemetry and supports multiple backend storage - ClickHouse or Kafka + Druid. Choosing an open-source APM over SaaS vendors has many benefits for developers. At the same time, &lt;a href="https://signoz.io/?utm_source=blog&amp;amp;utm_medium=datadog_vs_newrelic"&gt;SigNoz&lt;/a&gt; is built to avoid the pain of maintenance that comes with most open-source tools.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#application-performance-monitoring"&gt;
  &lt;/a&gt;
  Application Performance Monitoring
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#datadog-apm"&gt;
  &lt;/a&gt;
  DataDog APM
&lt;/h3&gt;

&lt;p&gt;DataDog's APM provides end-to-end distributed tracing connecting frontend devices to databases.&lt;/p&gt;

&lt;p&gt;Some of the key features of DataDog APM includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Distributed tracing can track requests from user sessions to services and databases.&lt;/li&gt;
&lt;li&gt;Users can correlate their distributed traces to infrastructure and network metrics.&lt;/li&gt;
&lt;li&gt;With DataDog's APM, you can ingest 100% of your traces from the last 15 minutes. You can then retain error and high latency traces&lt;/li&gt;
&lt;li&gt;You can inspect code-level performance and break down slow requests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iklAHOcN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/apm_tools_datadog-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iklAHOcN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/apm_tools_datadog-min.jpg" alt="DataDog APM Dashboard"&gt;&lt;/a&gt;DataDog APM tool dashboard (Source: DataDog dashboard)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-relic-apm"&gt;
  &lt;/a&gt;
  New Relic APM
&lt;/h3&gt;

&lt;p&gt;New Relic's APM covers performance monitoring for many programming languages and combines metrics from mobile and browser apps to services and databases.&lt;/p&gt;

&lt;p&gt;Some of the key features of New Relic APM includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Auto-instrumentation of eight programming languages: Java, .Net, Node.js, PHP, Python, Ruby, Go and C/C++&lt;/li&gt;
&lt;li&gt;Distributed tracing and sampling options for a wide range of technology stack&lt;/li&gt;
&lt;li&gt;Correlation of tracing data with other aspects of application infrastructure and user monitoring&lt;/li&gt;
&lt;li&gt;Fully managed cloud-native experience with on-demand scalability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rnKZlZeq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_newrelic_apm-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rnKZlZeq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_newrelic_apm-min.jpg" alt="New Relic APM Dashboard"&gt;&lt;/a&gt;New Relic APM Dashboard (Source: New Relic Dashboard)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#infrastructure-monitoring"&gt;
  &lt;/a&gt;
  Infrastructure Monitoring
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#datadog-infrastructure-monitoring"&gt;
  &lt;/a&gt;
  DataDog Infrastructure Monitoring
&lt;/h3&gt;

&lt;p&gt;You can monitor all your machines with DataDog's infrastructure monitoring. A DataDog agent runs on all your hosts to capture events and metrics.&lt;/p&gt;

&lt;p&gt;Some of the key features of DataDog's infrastructure monitoring includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can see all your machines in the infrastructure list. Each machine/host has tags, aliases, metrics attached to it&lt;/li&gt;
&lt;li&gt;DataDog provides a Host map to visualize all your hosts on one screen&lt;/li&gt;
&lt;li&gt;It also provides a container map and real-time monitoring of containers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dApWM1rM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_datadog_infrastructure-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dApWM1rM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_datadog_infrastructure-min.jpg" alt="DataDog Infrastructure Monitoring Dashboard"&gt;&lt;/a&gt;See detailed info about your hosts on DataDog dashboard (Source: DataDog website)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-relic-infrastructure-monitoring"&gt;
  &lt;/a&gt;
  New Relic Infrastructure Monitoring
&lt;/h3&gt;

&lt;p&gt;New Relic provides infrastructure monitoring for cloud services, dedicated hosts to containers.&lt;/p&gt;

&lt;p&gt;Some of the key features of New Relic infrastructure monitoring includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can connect changes in your host performance with your configuration changes. You can track the configuration change of your entire infrastructure.&lt;/li&gt;
&lt;li&gt;If your infrastructure account is connected with the APM account, then you can troubleshoot performance issues by connecting the server-side to the application side.&lt;/li&gt;
&lt;li&gt;Provides integrations to collect metrics for popular platforms like AWS, GCP, Azure, Kubernetes, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i7JeS56t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_newrelic_infrastructure-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i7JeS56t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_newrelic_infrastructure-min.jpg" alt="New Relic Infrastructure Monitoring Dashboard"&gt;&lt;/a&gt;New Relic Infrastructure Monitoring Dashboard (Source: New Relic documentation)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#log-management"&gt;
  &lt;/a&gt;
  Log Management
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#datadog-log-management"&gt;
  &lt;/a&gt;
  DataDog Log Management
&lt;/h3&gt;

&lt;p&gt;DataDog log management provides capabilities to search and analyze logs at any scale.&lt;/p&gt;

&lt;p&gt;Some of the key features of DataDog Log Management includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provides logging without limits, can ingest 100% of your logs before indexing.&lt;/li&gt;
&lt;li&gt;Provides log processing pipelines for 170+ common technologies&lt;/li&gt;
&lt;li&gt;Filter logs with a time range, tags, and full-text search&lt;/li&gt;
&lt;li&gt;Provides aggregation of indexed logs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uxh7wr2s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_datadog_log_management-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uxh7wr2s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_datadog_log_management-min.jpg" alt="DataDog Log Management Dashboard"&gt;&lt;/a&gt;DataDog log management dashboard (Source: DataDog website)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-relic-log-management"&gt;
  &lt;/a&gt;
  New Relic Log Management
&lt;/h3&gt;

&lt;p&gt;With New Relic Log Management, you can easily ingest any text-based data. &lt;/p&gt;

&lt;p&gt;Some of the key features of New Relic log management include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Custom charts and visualization for log data&lt;/li&gt;
&lt;li&gt;Quick search response times for any volume of log data&lt;/li&gt;
&lt;li&gt;Provides machine learning capabilities to detect issues from your log data automatically&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tltAVA-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_newrelic_log_management-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tltAVA-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_newrelic_log_management-min.jpg" alt="New Relic Log Management Dashboard"&gt;&lt;/a&gt;New Relic Log Management Dashboard (Source: New Relic website)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#network-monitoring"&gt;
  &lt;/a&gt;
  Network Monitoring
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#datadog-network-monitoring"&gt;
  &lt;/a&gt;
  DataDog Network Monitoring
&lt;/h3&gt;

&lt;p&gt;Some of the key features of DataDog network monitoring include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provides metrics for point-to-point communication on your infrastructure&lt;/li&gt;
&lt;li&gt;Granular data for network flows in a multi-cloud environment along with aggregation capabilities supported by tags&lt;/li&gt;
&lt;li&gt;Automatically collects tags from more than 450 integrations. You can see network volume between any two sets of tags&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BFDVnJ5Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_datadog_network_monitoring-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BFDVnJ5Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_datadog_network_monitoring-min.jpg" alt="DataDog Network Monitoring Dashboard"&gt;&lt;/a&gt;DataDog network monitoring (Source: DataDog website)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-relic-network-monitoring"&gt;
  &lt;/a&gt;
  New Relic Network Monitoring
&lt;/h3&gt;

&lt;p&gt;Some of the key features of New Relic Network monitoring include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provides pre-configured dashboards for monitoring popular cloud services like Azure, AWS, GCP, etc. and provides dynamic alerting&lt;/li&gt;
&lt;li&gt;Provides integrations with 100+ services. You can check the full list of &lt;a href="https://docs.newrelic.com/docs/integrations/amazon-integrations/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;AWS&lt;/b&gt;&lt;/a&gt;, &lt;a href="https://docs.newrelic.com/docs/integrations/microsoft-azure-integrations/azure-integrations-list/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;Azure&lt;/b&gt;&lt;/a&gt; and &lt;a href="https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;GCP&lt;/b&gt;&lt;/a&gt; integrations&lt;/li&gt;
&lt;li&gt;Provides advanced Kubernetes monitoring capabilities correlating metrics from the application and the infrastructure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xKM1B891--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_newrelic_network_monitoring-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xKM1B891--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_newrelic_network_monitoring-min.jpg" alt="New Relic Network Monitoring Dashboard"&gt;&lt;/a&gt;New Relic Network Monitoring (Source: New Relic website)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#browser-or-realuser-monitoring"&gt;
  &lt;/a&gt;
  Browser or real-user monitoring
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#datadog-realuser-monitoring"&gt;
  &lt;/a&gt;
  DataDog Real-User Monitoring
&lt;/h3&gt;

&lt;p&gt;DataDog provides end-to-end visibility into user journeys for mobile and web applications.&lt;/p&gt;

&lt;p&gt;Some of the key features of DataDog end-user monitoring:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provides aggregated fronted performance metrics, with slice and dice capabilities by location, device, application, etc.&lt;/li&gt;
&lt;li&gt;Provides root cause analysis for slow loading times with visibility into code, network, and infrastructure&lt;/li&gt;
&lt;li&gt;Offers customer segmentation with the help of tags for error tracking in real-time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C27ruqBU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_datadog_rum-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C27ruqBU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_datadog_rum-min.jpg" alt="DataDog RUM Dashboard"&gt;&lt;/a&gt;DataDog Real User Monitoring&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-relic-browser-monitoring"&gt;
  &lt;/a&gt;
  New Relic Browser Monitoring
&lt;/h3&gt;

&lt;p&gt;New Relic provides monitoring for end-users using your application across web browsers, devices, operating systems, and networks.&lt;/p&gt;

&lt;p&gt;Some of the key features of New Relic Browser Monitoring include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provides full-stack visibility to identify end-user latency from backend or network issues&lt;/li&gt;
&lt;li&gt;Provides session performance with a heatmap of a user's interaction with the webpage&lt;/li&gt;
&lt;li&gt;Provides Javascript error analytics using which you can see end-user steps leading to errors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HDaqRwiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_browser_monitoring-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HDaqRwiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_browser_monitoring-min.jpg" alt="New Relic Browser Monitoring Dashboard"&gt;&lt;/a&gt;New Relic Browser monitoring (Source: New Relic website&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#issues-with-existing-monitoring-vendors"&gt;
  &lt;/a&gt;
  Issues with existing monitoring vendors
&lt;/h2&gt;

&lt;p&gt;DataDog and New Relic are great monitoring tools and provide a gamut of monitoring products that any organization can use. But these enterprise monitoring tools can have the following issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Crazy node-based pricing,
Node-based pricing doesn’t make sense in today’s micro-services architecture. Any node which is live for more than 8hrs in a month is charged. So, unsuitable for spiky workloads&lt;/li&gt;
&lt;li&gt;Very costly
These tools are very costly if you want to do things like sending custom metrics.&lt;/li&gt;
&lt;li&gt;Cloud-only
Hence,  not suitable for companies that have concerns with sending data outside their infra&lt;/li&gt;
&lt;li&gt;Closed product roadmap
For any small feature, you are dependent on their roadmap. We think this is an unnecessary restriction for a product which developers use. A product used by developers should be extendible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The other alternative can be going for an open-source alternative. But the problem with most open-source products is that they are resource-intensive to set up, maintain and scale up. That's where &lt;a href="https://signoz.io/?utm_source=blog&amp;amp;utm_medium=datadog_vs_newrelic"&gt;SigNoz&lt;/a&gt; comes into the picture.  &lt;a href="https://signoz.io/?utm_source=blog&amp;amp;utm_medium=datadog_vs_newrelic"&gt;SigNoz&lt;/a&gt; is a full-stack open-source APM platform with easy configuration and scalable architecture.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-alternative-to-datadog-and-new-relic-signoz"&gt;
  &lt;/a&gt;
  An alternative to DataDog and New Relic - SigNoz
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://signoz.io/?utm_source=blog&amp;amp;utm_medium=datadog_vs_newrelic"&gt;SigNoz&lt;/a&gt; is a full-stack open-source application performance monitoring and observability tool which can be used in place of DataDog and Grafana. SigNoz is built to give SaaS like user experience combined with the perks of open-source software. Developer tools should be developer first, and SigNoz was built by developers to address the gap between SaaS vendors and open-source software.&lt;/p&gt;

&lt;p&gt;Key architecture features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Native OpenTelemetry support&lt;/strong&gt;
SigNoz is built to support &lt;a href="https://opentelemetry.io/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;OpenTelemetry&lt;/b&gt;&lt;/a&gt; natively, which is quietly becoming the world standard to generate and manage telemetry data.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Flexible and scalable Database storage&lt;/strong&gt;
SigNoz provides users flexibility in terms of storage. You can choose between ClickHouse or Kafka + Druid as your backend storage while installing SigNoz.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6BdjoEB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/SigNoz_architecture_clickhouse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6BdjoEB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/SigNoz_architecture_clickhouse.png" alt="Architecture of SigNoz with OpenTelemetry and ClickHouse"&gt;&lt;/a&gt;Architecture of SigNoz with ClickHouse as storage backend and OpenTelemetry for code instrumentatiio&lt;/p&gt;

&lt;p&gt;SigNoz comes with out of box visualization of things like RED metrics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OKFqZ_PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OKFqZ_PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.png" alt="SigNoz UI showing the popular RED metrics"&gt;&lt;/a&gt;SigNoz UI showing application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/p&gt;

&lt;p&gt;You can also use flamegraphs to visualize spans from your trace data. All of this comes out of the box with SigNoz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FOoIlefK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FOoIlefK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.png" alt="Flamegraphs used to visualize spans of distributed tracing in SigNoz UI"&gt;&lt;/a&gt;Flamegraphs showing exact duration taken by each spans - a concept of distributed tracing&lt;/p&gt;

&lt;p&gt;You can also build custom metrics dashboard for your infrastructure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NgbBDuMT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/signoz_custom_dashboard-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NgbBDuMT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/signoz_custom_dashboard-min.jpg" alt="SigNoz custom metrics dashboard"&gt;&lt;/a&gt;You can also build a custom metrics dashboard for your infrastructure&lt;/p&gt;

&lt;p&gt;Some of the things SigNoz can help you track:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/li&gt;
&lt;li&gt;Slowest endpoints in your application&lt;/li&gt;
&lt;li&gt;See exact request trace to figure out issues in downstream services, slow DB queries, call to 3rd party services like payment gateways, etc&lt;/li&gt;
&lt;li&gt;Filter traces by service name, operation, latency, error, tags/annotations.&lt;/li&gt;
&lt;li&gt;Run aggregates on trace data&lt;/li&gt;
&lt;li&gt;Unified UI for both metrics and traces&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#getting-started-with-signoz"&gt;
  &lt;/a&gt;
  Getting started with SigNoz
&lt;/h2&gt;

&lt;p&gt;If you have docker installed, getting started with SigNoz just takes three easy steps at the command line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;clone&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/SigNoz/signoz.git&lt;/span&gt;
&lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;signoz&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;install&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can read more about deploying SigNoz from its documentation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://signoz.io/docs/deployment/docker/?utm_source=blog&amp;amp;utm_medium=dd_vs_newrelic"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KH63BIXD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zel9jdf6epra2uxvh21c.png" alt="Deployment Docs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can check out SigNoz's GitHub repo here 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#related-content"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Related Content&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://signoz.io/blog/datadog-vs-prometheus/"&gt;DataDog vs Prometheus&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://signoz.io/blog/datadog-vs-grafana/"&gt;DataDog vs Grafana&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://signoz.io/blog/opentelemetry-spring-boot/"&gt;Monitor Spring Boot App with SigNoz and OpenTelemetry&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>kubernetes</category>
      <category>microservices</category>
      <category>monitoring</category>
    </item>
    <item>
      <title>Stoicism and Mindfulness w/ Michael McGill</title>
      <author>Mikhail Karan</author>
      <pubDate>Wed, 20 Oct 2021 13:13:05 +0000</pubDate>
      <link>https://dev.to/mikhailkaran/stoicism-and-mindfulness-w-michael-mcgill-1i5n</link>
      <guid>https://dev.to/mikhailkaran/stoicism-and-mindfulness-w-michael-mcgill-1i5n</guid>
      <description>&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/3Gb0k8W6QdZY2SAmvvDO3Z"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-html-all-the-things"&gt;
  &lt;/a&gt;
  What is HTML All The Things
&lt;/h2&gt;

&lt;p&gt;HTML All The Things is a &lt;a href="https://podcast.htmlallthethings.com/"&gt;web development podcast&lt;/a&gt; and &lt;a href="https://discord.com/invite/jweMCx9"&gt;discord community&lt;/a&gt; which was started by Matt and Mike, developers based in Ontario, Canada. &lt;/p&gt;

&lt;p&gt;The podcast speaks to web development topics as well as running a small business, self-employment and time management. You can join them for both their successes and their struggles as they try to manage expanding their Web Development business without stretching themselves too thin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#announcements"&gt;
  &lt;/a&gt;
  Announcements
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;Svelte for Beginners&lt;/strong&gt; Udemy course is now live! Mike took his experience in teaching and learning Svelte and created a course. &lt;/p&gt;

&lt;p&gt;This course will teach you the fundamentals of JavaScript frameworks. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get it now on Udemy!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/3po8XGG"&gt;Link for 50% off!&lt;/a&gt; (expires in 5 days)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-this-one-about"&gt;
  &lt;/a&gt;
  What's This One About?
&lt;/h2&gt;

&lt;p&gt;In this episode Matt and Mike sit down with Michael McGill to discuss his journey through stoicism and mindfulness. The tech industry is forever changing and is always online so it can be a very stressful place to work at times. Having worked in tech for over 20 years, Michael has surely seen his fair share of "fires" and other high-stress situations which makes his comments on stoicism and mindfulness all the more real. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#guest-introduction"&gt;
  &lt;/a&gt;
  Guest Introduction
&lt;/h2&gt;

&lt;p&gt;Michael McGill has been in the tech industry for 20 years! He’s a Computer Science graduate that transitioned to a leadership role as a CIO (chief information officer). Some refer to him as the Stoic CIO because of his unique perspective on leadership. We’ll be talking about how Michael uses Stoicism and Mindfulness in his everyday life as well as how they apply when managing a team. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/mcgillmd921"&gt;Michael's Twitter Profile&lt;/a&gt;&lt;br&gt;
&lt;a href="http://www.michaeldmcgill.com/newsletter/"&gt;Michael's Newsletter&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#show-notes"&gt;
  &lt;/a&gt;
  Show Notes
&lt;/h2&gt;

&lt;p&gt;9:00 - Can you explain what Stoicism and Mindfulness are?&lt;/p&gt;

&lt;p&gt;25:40 - Can you tell us a little bit about your journey and how you stumbled on Stoicism and mindfulness on your way to CIO?&lt;/p&gt;

&lt;p&gt;32:10 - What are some ways Stoicism intersects the IT world&lt;/p&gt;

&lt;p&gt;37:28 - Servant Leadership&lt;/p&gt;

&lt;p&gt;48:50 - What are some indicators that someone needs to take these concepts more seriously?&lt;/p&gt;

&lt;p&gt;53:45 - What are ways being can start practicing and learning about Stoicism and Mindfulness now?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A Guide to the Good Life: The Ancient Art of Stoic Joy - William B. Irvine&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.headspace.com/"&gt;Headspace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#key-takeaways"&gt;
  &lt;/a&gt;
  Key Takeaways
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Stoicism gives you the ability to take a more objective look at critical situations&lt;/li&gt;
&lt;li&gt;Servant leadership is a methodology where the leader/manager is there for you to succeed. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank you!
&lt;/h2&gt;

&lt;p&gt;If you're enjoying the podcast consider giving us a review on &lt;a href="https://podcasts.apple.com/us/podcast/html-all-things-web-development-web-design-small-business/id1412209136"&gt;Apple Podcasts&lt;/a&gt; or checking out our Patreon to get a shoutout on the podcast. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.patreon.com/htmlallthethings"&gt;Support us on Patreon&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can find us on all the podcast platforms out there as well as&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.instagram.com/htmlallthethings/"&gt;Instagram (@htmlallthethings)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/htmleverything"&gt;Twitter (@htmleverything)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.tiktok.com/@htmlallthethings"&gt;TikTok (Html All The Things)&lt;/a&gt;&lt;/p&gt;

</description>
      <category>podcast</category>
    </item>
    <item>
      <title>Common React performance mistakes 💣</title>
      <author>KaRthick</author>
      <pubDate>Wed, 20 Oct 2021 13:04:15 +0000</pubDate>
      <link>https://dev.to/karthick3018/common-react-performance-mistakes-ac4</link>
      <guid>https://dev.to/karthick3018/common-react-performance-mistakes-ac4</guid>
      <description>&lt;p&gt;Performance | Scaling the application is one of the challenges of a software developer. &lt;/p&gt;

&lt;p&gt;It is a big burden when you start to scale the application after months | years of development. No other go actually we need to somehow visit the code back to scale the application. &lt;/p&gt;

&lt;p&gt;But the burden can be minimized by following some performance optimization &amp;amp; best practices while writing the code.&lt;/p&gt;

&lt;p&gt;At the same time optimization is a "&lt;em&gt;two edged sword&lt;/em&gt;" . &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Performance-related changes applied incorrectly can even harm performance.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here I'll explain some things that I've seen and faced in react applications. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#reactmemo"&gt;
  &lt;/a&gt;
  React.memo
&lt;/h1&gt;

&lt;p&gt;If you're using react, you'll be aware of this particular HOC. It is mainly used to memoize the whole component. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aj3v9rGl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9zqzks9rckjzitx2g23.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aj3v9rGl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9zqzks9rckjzitx2g23.png" alt="memozied children"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;this is a memoized child component that receives handleOnClick as the props . So as per the memoization logic this component should re-render only if any of the props changes rit ?? that's how &lt;strong&gt;React.memo&lt;/strong&gt; works but wait let's create a parent component and check. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t3imwlNv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/te9jeagj3a3mohy4x1la.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t3imwlNv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/te9jeagj3a3mohy4x1la.png" alt="Parent memo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;perfect so during every onClick trigger in the child component parent state value changes but the props received in the child didn't change, so child component won't re-render since we memoized. &lt;/p&gt;

&lt;p&gt;But wait here's where the real issue comes in if you try the above code in any editor or there's a codesandbox below you can see that the &lt;strong&gt;React.memo&lt;/strong&gt; is broken!, child component will re-render for every state change even though the prop is same. &lt;/p&gt;

&lt;p&gt;Is something wrong with the &lt;strong&gt;React.memo&lt;/strong&gt; 🤯 ? &lt;/p&gt;

&lt;p&gt;Nope ! every time when the parent component re-renders a new instance of the &lt;em&gt;handleOnClick&lt;/em&gt; function is created. Hence is leads to break the memoization and re-renders the child component every time.&lt;/p&gt;

&lt;p&gt;So, If you just wrap the child component with &lt;strong&gt;React.memo&lt;/strong&gt; there's no assurance that I will just memoize and work.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But cool hook useCallback can come in to help you out ! . Wrap the handleClick function inside the useCallback hook and try the same code &lt;strong&gt;React.memo&lt;/strong&gt; will just work as expected.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0AWJMX4Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tj1e2rkuyi1prfi8ibp4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0AWJMX4Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tj1e2rkuyi1prfi8ibp4.png" alt="callback wrapper"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;but the above one is also overratted I would say , will explain this why later in the article&lt;/em&gt;&lt;br&gt;
&lt;em&gt;play here&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/silly-microservice-hmxbd"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Don't use the &lt;strong&gt;React.memo&lt;/strong&gt; in a component that props is frequently changing, it will result to an extensive calculations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#inline-functions"&gt;
  &lt;/a&gt;
  Inline functions
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Increment&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;whenever a developer caught this code everyone (including myself 🤩) update the following code and will be like !&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleIncrement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleIncrement&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Increment&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;yeah I've fixed a dam performance issue I going to get 100 performance score in lighthouse.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/JpvpNkks0DCURtrB1b/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/JpvpNkks0DCURtrB1b/giphy.gif" alt="gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;but &lt;em&gt;inline is acutally fine&lt;/em&gt; in this case !! if you have a concern try working with this &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;useEffect(()=&amp;gt;{&lt;br&gt;
console.log('Executing')&lt;br&gt;
},[setState])&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;you cannot use a user defined function inside the useEffect if you're using eslint it will warn you !! but the above code will just work fine because react is smart in this case it knows that setState will never change !.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Caution&lt;/strong&gt;❌ : In-line functions shouldn't be called without arrow functions&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleIncrement&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Increment&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;❌ this might result your code to an infinite loop&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#usecallback"&gt;
  &lt;/a&gt;
  useCallback
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Does it make sense using this hook here??🤔&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;this is the first question you should think off before use using these performance hooks like useCallback and useMemo . &lt;/p&gt;

&lt;p&gt;The same example used above is also a overrated one , &lt;em&gt;don't get confused here&lt;/em&gt; above example is just to explain you how things works ! but imagine the child component just re-renders a "div" and a "p" tag . There's no expensive calculations or any CPU affecting operations here, So why useCallback here ? &lt;/p&gt;

&lt;p&gt;If the child component consist of large amount of data or a extensive calculations, the callback function that you're passing can be wrapped up using useCallback . &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Remember Even useCallback() returning the same function object, still the inline function is re-created on every re-rendering useCallback() just skips it. So the re-render will be less commutated than using the useCallback here !&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;The same set of rules can be applied to &lt;strong&gt;useMemo&lt;/strong&gt; too&lt;/em&gt; &lt;/p&gt;




&lt;p&gt;Manage your Work From Home 🏡 issues using this [kit] a helper site I've made (&lt;a href="https://dev.to/karthick3018/manage-work-from-home-effectively-using-wfh-kit-6bc"&gt;https://dev.to/karthick3018/manage-work-from-home-effectively-using-wfh-kit-6bc&lt;/a&gt;)&lt;/p&gt;




&lt;p&gt;&lt;em&gt;check my dev projects on&lt;/em&gt; &lt;a href="https://github.com/karthick3018"&gt;github&lt;/a&gt;&lt;br&gt;
 &lt;em&gt;Follow me on&lt;/em&gt; &lt;a href="https://twitter.com/Karthick_R_30"&gt;twitter&lt;/a&gt;&lt;br&gt;
&lt;em&gt;connect with me on&lt;/em&gt; &lt;a href="https://www.linkedin.com/in/karthick-raja-dev/"&gt;linkedIn&lt;/a&gt;&lt;br&gt;
&lt;em&gt;check my styles on&lt;/em&gt; &lt;a href="https://codepen.io/karthick30"&gt;codepen&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Thanks for your time&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Happy coding ! Keep Sharing&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Stay Safe&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>performance</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How FORMULA 1 insights are powered by AWS</title>
      <author>Vivek0712</author>
      <pubDate>Wed, 20 Oct 2021 13:00:57 +0000</pubDate>
      <link>https://dev.to/aws-builders/how-formula-1-insights-are-powered-by-aws-3ndb</link>
      <guid>https://dev.to/aws-builders/how-formula-1-insights-are-powered-by-aws-3ndb</guid>
      <description>&lt;p&gt;Motorsports especially Formula1 is a perfect example of engineering marvel where engineers build extraordinary machines. Artificial Intelligence help engineers innovate faster by harnessing the power of data which plays an crucial role in the split-second decisions on the track, redesigning and maximising the performance of vehicles by running analytics and so much more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;The motivation to write this article is that I love working with AI/ML technologies leveraging the cloud and I am big fan of Formula 1.&lt;br&gt;
In Formula 1, AWS powers F1 insights and I took a look under the hood to find some amazing details and the way how it works! So, fasten your seatbelt and we are now going for an amazing learning experience. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#about-formula-1"&gt;
  &lt;/a&gt;
  About Formula 1
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;The Fastest Car deserves Fastest Cloud&lt;/em&gt;&lt;br&gt;
FORMULA 1 is a battle between the world’s best drivers, but it’s also a battle of some of the world’s most innovative engineers. No other sport has been as dynamic in its evolution and embrace of new technology. While some of the tech goes to helping drivers, who are hitting speeds as high as 230 MPH, taking pit stops in under 2 seconds, and flying around corners with a force of 5G, much of it goes to enhance the experiences of its growing base of over a half a billion fans. This is why AWS is proud to be both the official cloud service and machine learning provider for FORMULA1.  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Technology has always played a central role in the evolution of the sport, but serverless and machine learning are changing how F1 automates, collects, analyzes, and leverages data to make decisions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;F1 is taking the competition to the next level by altering some of the rules around car design. F1 simulates these changes using AWS High Performance Compute services to make sim cycles faster and more sophisticated&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;F1 uses Amazon SageMaker to build machine learning models that help fans better understand the split-second decisions made by a driver or pit crew that can dramatically affect the outcome.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/KT2bHdks9jQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#f1-data"&gt;
  &lt;/a&gt;
  F1 Data
&lt;/h2&gt;

&lt;p&gt;During a FORMULA 1 Grand Prix every car contains 120 sensors which generate 1.1M telemetry data points per second transmitted from the cars to the pits. This real-time data is combined with over 69 years of historical race data stored on S3 to inform fans and teams about the unparalleled track-side decision making.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ncHKUBLH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dyqvwmdcfjp751o6t7s7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ncHKUBLH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dyqvwmdcfjp751o6t7s7.png" alt="Car"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1jhKrBFc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ttc11ocnqmqs1j7y3xxp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1jhKrBFc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ttc11ocnqmqs1j7y3xxp.png" alt="Track"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#computational-fluid-dynamics-project"&gt;
  &lt;/a&gt;
  Computational Fluid Dynamics Project
&lt;/h2&gt;

&lt;p&gt;Amazon Web Services, Inc. (AWS), an Amazon.com company (NASDAQ: AMZN), and Formula One Group (Formula 1) have completed a Computational Fluid Dynamics (CFD) project to simulate the aerodynamics of cars while racing, carrying out detailed simulations that have resulted in the car design for the 2021 racing season.   &lt;/p&gt;

&lt;p&gt;The project modelled the impact of one car's aerodynamic wake on another based on 550 million data points running on 1150 compute cores for detailed simulations.&lt;/p&gt;

&lt;p&gt;By use of the Amazon Elastic Compute Cloud (Amazon EC2). c5n instances, the average time for running simulations was reduced to 70% which is equivalent to that of a supercomputer. The entire project duration was for 6 months.&lt;/p&gt;

&lt;p&gt;The Project addressed some of the common problems and proposed the results with the help of the AWS Machine Learning Platform. Let's look into that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#downforce-loss"&gt;
  &lt;/a&gt;
  Downforce Loss
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What is Downforce?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oWuum1Zq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/datx828fxcvvl8v4lfh7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oWuum1Zq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/datx828fxcvvl8v4lfh7.png" alt="Downforce"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For Formula 1 cars, the downforce generated by their aerodynamics is the single largest performance differentiator, helping a car travel faster through corners.   &lt;/p&gt;

&lt;p&gt;** The Problem:** &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Loss of downforce when they are running close to one another&lt;/li&gt;
&lt;li&gt;Reduces drivers’ ability to sustain close racing and increasing the difficulty of overtaking.&lt;/li&gt;
&lt;li&gt;Currently, a car running one car length behind another loses up to 50 percent of its downforce. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The Solution:&lt;/strong&gt; F1 used AWS to look closely at how the aerodynamics of cars interact when racing in close proximity.   These simulations looked at cars in common racing situations and the results have driven the changes to the proposed 2021 car design.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Result:&lt;/strong&gt; Formula 1 has been able to design a car with only 15 percent downforce loss at the same, one car length distance. The resulting car will feature a brand new bodywork design with a new front wing shape, simplified suspension, new rear end layout, underfloor tunnels, wheel wake control devices, and will run on 18-inch wheels with low profile tyres for the first time.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#turbulence"&gt;
  &lt;/a&gt;
  Turbulence
&lt;/h3&gt;

&lt;p&gt;CFD simulates the impact of a liquid or gas on an object and requires extensive compute capacity to perform this kind of simulation, requiring high performance computing (HPC) clusters to do the job.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uV7t_zDD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ov4fb1y27t5zrux5ud3.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uV7t_zDD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ov4fb1y27t5zrux5ud3.jpeg" alt="Turbulence"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Problem:&lt;/strong&gt; HPC clusters on-premises requires considerable upfront capital expenditure, lengthy procurement cycles, and regular hardware refreshes to avoid obsolescence.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Solution:&lt;/strong&gt; AWS provides the most elastic and scalable cloud infrastructure to run HPC applications. With virtually unlimited capacity, engineers, and researches can innovate beyond the limitations of on-premises HPC infrastructure. To complete the CFD work, Formula 1 used AWS ParallelCluster on Amazon EC2 to run the OpenFOAM CFD framework, and Amazon Simple Storage Service (Amazon S3) for data storage.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Result:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Leveraging the scalability of the cloud, Formula 1 was able to run CFD simulations on core counts much larger than they were previously able to execute.&lt;/li&gt;
&lt;li&gt;The increased speed with which the aerodynamics team could run detailed, two car turbulence simulations on AWS meant they could increase the number of car designs they could investigate from one to five per week.&lt;/li&gt;
&lt;li&gt;Moving forward, there are plans to expand the application further, up to 2,300 cores, and to introduce AWS Machine Learning (ML) tools, such as Amazon SageMaker, to allow ML technologies to help with the design and further optimise the performance of the car.
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#aws-machine-learning-with-f1-data"&gt;
  &lt;/a&gt;
  AWS Machine Learning with F1 Data
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IGL7Kb2P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3tqrxv18ycq3338izvpj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IGL7Kb2P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3tqrxv18ycq3338izvpj.png" alt="aws ml"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's now see some of the F1 insights derived using AWS SageMaker.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#f1-insights-by-aws"&gt;
  &lt;/a&gt;
  F1 Insights by AWS
&lt;/h2&gt;

&lt;p&gt;The F1 insights derived using AWS SageMaker can be put into three major categories&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Race Strategy&lt;/li&gt;
&lt;li&gt;Competitor Analysis&lt;/li&gt;
&lt;li&gt;Car Performance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's look into some of the insights under each category&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#race-strategy"&gt;
  &lt;/a&gt;
  Race Strategy
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Battle Forecast: 
Using track history and projected driver pace, Battle Forecast will predict how many laps before the chasing car is within ‘striking distance’ of the car in front.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/LTOTl_wdzAg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pit Strategy Battle:
Undercutting and overcutting are strategies used by F1 teams during close racing scenarios to gain a lead over a rival, with the margin between success and failure measured in tenths of a second. Pit Strategy Battle provides fans and commentators with real-time insight on the position of the two rival drivers, the predicted gap after their respective pit stops, and the percentage chance of an overtake, helping fans to assess how successful each driver’s strategy will be in real time and its potential outcome.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/zzk2AiTyY-I"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Pit Window:&lt;br&gt;
Estimated pit stop windows based on tyre compound, lap times, and spread of cars. Viewers will see how a race can be altered based on race dynamics, including racing strategies of other teams, safety cars, and yellow flags. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Predicted Pit Stop Strategy:&lt;br&gt;
Historical data is used to calculate race strategy during the formation lap, comparing predicted tyre and race strategies. This insight allows viewers to see when a driver should strategically make his next pit stop.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#competitor-analysis"&gt;
  &lt;/a&gt;
  Competitor Analysis
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Car Analysis and Development:&lt;br&gt;
This insight shows how teams develop their cars, how quickly they develop their cars, and what the on-track result is throughout the season. The development race both during the season and from year to year is the principal KPI for an F1 team, and this provides a unique insight into the inner workings of F1 and how the teams perform against each other in this area.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Car Performances:&lt;br&gt;
This insight isolates an individual car’s performance and allows fans to compare its performance to that of different vehicles head-to-head comparing building blocks that make up car performance – namely cornering performance, straight line performance and car balance or handling&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OoeQu5X3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w833foiya97c6r76m4y1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OoeQu5X3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w833foiya97c6r76m4y1.png" alt="car performance"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Driver performance:
Driver Performance highlights which drivers are pushing their car to the absolute limit of performance in comparison to their teammates and competitors. Calculating the forces generated by a car’s tyres during a lap, and comparing it to the car’s maximum capability, this will show how much of the car’s potential performance is being extracted by the driver. Three parameters will be shown to highlight three key areas of driver performance that have a major effect on the ultimate goal - lap time: Acceleration, Braking, Corners.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--THDKCF0Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/swwr49sv2whhteadxsau.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--THDKCF0Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/swwr49sv2whhteadxsau.jpg" alt="Driver Performance"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Driver Season Performance:
This provides a breakdown of driver performance based on the most important subset of driving skills by analyzing a wealth of data across effects of the car, tyres, traffic, fuel, and more to a scored output of each driver's performance across the season against seven key metrics – Qualifying Pace, Race Starts, Race Lap 1, Race Pace, Tyre Management, Driver Pit Stop Skill, and Overtaking. These metrics are normalized using from a range of 0-10 to provide a ‘score’ style metric, and provide an insight for viewers, fans and teams alike into where a certain driver’s strengths and weaknesses lie and how they compare to others in the field.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OnMKMnlG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lotysvl5sgerewfr8c4.jpg" alt="Season perf"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#car-performances"&gt;
  &lt;/a&gt;
  Car Performances
&lt;/h3&gt;

&lt;p&gt;F1 looks closely at aerodynamics, tyre performance, power unit, vehicle dynamics, and vehicle optimisation to offer insights that help fans interpret overall car performance.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Braking Performance:&lt;br&gt;
Braking graphics showing when drivers hit the brakes and how much pressure they apply, the new AWS Insight will take fans even deeper into the black art of braking performance in Formula 1, showing the braking points for each driver, the speed the drivers are travelling at when they hit the anchors, which drivers brake the hardest, the speed decrease difference between different drivers and the maximum g-forces generated.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--migueTwH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvyttwcndauojwt2t9r2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--migueTwH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvyttwcndauojwt2t9r2.jpg" alt="Braking perf"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Corner Analysis:&lt;br&gt;
The single most important area for performance for an F1 car and this offers great insight into how good cars compare against great ones. This breaks the corner down into the 4 principal sections – braking, turn in, mid corner, and exit – analyzing and comparing the performance through the principal sections of a corner via car telemetry data.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2UAYGRhz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/72viztrc50tcp2c4wsmb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2UAYGRhz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/72viztrc50tcp2c4wsmb.jpg" alt="Corner Analysis"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tyre Performance:&lt;br&gt;
Using car data, namely car speed, longitudinal and lateral accelerations, and the Gyro gives us a tyre performance for each corner, which indicates how much the tyre has been used with respect to its ultimate performance life.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#aws-amp-f1"&gt;
  &lt;/a&gt;
  AWS &amp;amp; F1
&lt;/h2&gt;

&lt;p&gt;F1 continues to innovate with the Professional Services team and Amazon ML Solutions Lab Team to accelerate development of F1 Insights by prototyping use cases and develop new proofs of concept. The ProServ team then helps F1 get models in to production and integrated into the F1 infrastructure.&lt;/p&gt;

&lt;p&gt;References:&lt;br&gt;
The article is a case study of how Formula One leverages AWS for insights.&lt;br&gt;
&lt;a href="https://aws.amazon.com/f1/"&gt;https://aws.amazon.com/f1/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I do not own/represent any material with respect to FORUMULA 1 and AWS. This is purely for educational purposes.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>aws</category>
      <category>deeplearning</category>
      <category>analytics</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>What was the first program you wrote?</title>
      <author>Adam Davis</author>
      <pubDate>Wed, 20 Oct 2021 12:57:20 +0000</pubDate>
      <link>https://dev.to/brewinstallbuzzwords/what-was-the-first-program-you-wrote-1gjp</link>
      <guid>https://dev.to/brewinstallbuzzwords/what-was-the-first-program-you-wrote-1gjp</guid>
      <description>&lt;p&gt;When I was in middle school, a friend showed me that you could write programs on a TI-84 calculator.&lt;/p&gt;

&lt;p&gt;I didn't know about loops, variables, functions, or conditionals.&lt;/p&gt;

&lt;p&gt;All I knew was how to print text and use goto statements.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bYyVU_bp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ao6eznwy11dxd3k17ib0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bYyVU_bp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ao6eznwy11dxd3k17ib0.gif" alt="Gif of program"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But that limited knowledge was enough for me to make simple scrolling animations when I was bored in math class.&lt;/p&gt;

&lt;p&gt;Knowing only a small number of programming constructs can sometimes be enough to make simple programs.&lt;/p&gt;

&lt;p&gt;When you first started learning about code, what was the first program you wrote? How far have you come since then?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>career</category>
      <category>beginners</category>
      <category>development</category>
    </item>
    <item>
      <title>How to use the JavaScript startsWith() method?</title>
      <author>hrishikesh1990</author>
      <pubDate>Wed, 20 Oct 2021 12:38:17 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/how-to-use-the-javascript-startswith-method-2e4h</link>
      <guid>https://dev.to/hrishikesh1990/how-to-use-the-javascript-startswith-method-2e4h</guid>
      <description>&lt;p&gt;In this short tutorial, we look at how to use the JavaScript startsWith method. We break down the code with an example to help you understand the concept better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents-javascript-startswith"&gt;
  &lt;/a&gt;
  Table of Contents - JavaScript startsWith():
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-does-startswith-do-in-javascript"&gt;What does startsWith do in JavaScript?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#code-and-explanation"&gt;Code and Explanation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#closing-thoughts-javascript-startswith"&gt;Closing thoughts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-does-startswith-do-in-javascript"&gt;
  &lt;/a&gt;
  What does startsWith do in JavaScript?
&lt;/h2&gt;

&lt;p&gt;The JavaScript startsWith method is used to determine whether a string starts with a character or a particular string. The method returns a boolean true in case the string starts with the specified characters.&lt;/p&gt;

&lt;p&gt;This method is commonly used to check if the entered string contains a substring. Although there are other methods that can be used to find substrings, the startsWith() method is specifically used to check the start of a string.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SearchString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;SearchString - Required, the character/ string to search&lt;/li&gt;
&lt;li&gt;Position - Optional, used to specify the position to begin the search
### Return Value:
The method returns a boolean true if it finds the SearchString and false if it doesn’t.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#code-and-explanation"&gt;
  &lt;/a&gt;
  Code and Explanation:
&lt;/h2&gt;

&lt;p&gt;In this section, we look at the implementation of the startsWith method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;str_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Join our freelancer community&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str_1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Join&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// Output: true&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str_1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Join&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// Output: false&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str_1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;our&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// Output: true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, the first statement returns true as the string begins with ‘Join”. However, in the second statement, we have passed a position argument. Hence the startsWith operator starts searching from the 3 index and returns a false.&lt;/p&gt;

&lt;p&gt;Similarly, the last statement returns true as ‘our’ start’s in the 5th index.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts-javascript-startswith"&gt;
  &lt;/a&gt;
  Closing thoughts - JavaScript startsWith:
&lt;/h2&gt;

&lt;p&gt;A major caveat while using the startsWith method is that it is case-sensitive. Unlike the includes() method in JavaScript, the startsWith method is used specifically to find if a string starts with a string.&lt;/p&gt;

&lt;p&gt;However, in case you are just looking to find a substring, I would recommend using the includes() method.&lt;/p&gt;

&lt;p&gt;Once you are done practicing using the startsWith methods you can try the endsWith method.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Day 12 of 100 Days of Code &amp; Scrum: Leadership Styles and GraphQL Server</title>
      <author>Rammina</author>
      <pubDate>Wed, 20 Oct 2021 12:23:32 +0000</pubDate>
      <link>https://dev.to/rammina/day-12-of-100-days-of-code-scrum-leadership-styles-and-graphql-server-5fi</link>
      <guid>https://dev.to/rammina/day-12-of-100-days-of-code-scrum-leadership-styles-and-graphql-server-5fi</guid>
      <description>&lt;p&gt;&lt;small&gt;&lt;cite&gt;Image by &lt;a href="https://pixabay.com/users/fahribaabdullah14-19581918/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=5842784"&gt;fahribaabdullah14&lt;/a&gt; from &lt;a href="https://pixabay.com/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=5842784"&gt;Pixabay&lt;/a&gt;&lt;/cite&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Good day, everyone!&lt;/p&gt;

&lt;p&gt;Today was actually a productive day for me. I managed to study a lot of Scrum and GraphQL, continued to work on writing my Scrum article, and reached out to multiple people to expand my network. Oh, and I also made my own &lt;a href="https://twitter.com/RamminaR"&gt;Twitter profile&lt;/a&gt;, which I didn't customize yet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;I finished the draft of the Scrum Team section of my Scrum Guide for beginners, and I also reviewed GraphQL's basic concepts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;Here are the things I've learned and done today:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LAj_DOKy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bsfcdf2prgsn1atq7xg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LAj_DOKy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bsfcdf2prgsn1atq7xg.png" alt="Leadership Styles"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;read up on different leadership styles and how Scrum Masters are true servant leaders and not authoritative managers.&lt;/li&gt;
&lt;li&gt;added Scrum Master subsection for my Scrum Guide.&lt;/li&gt;
&lt;li&gt;added Scrum Artifacts section.&lt;/li&gt;
&lt;li&gt;did some practice quiz questions about Scrum.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#graphql"&gt;
  &lt;/a&gt;
  GraphQL
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;started learning about GraphQL server-side.&lt;/li&gt;
&lt;li&gt;read about GraphQL &lt;code&gt;schemas&lt;/code&gt;, &lt;code&gt;type definitions&lt;/code&gt;, and &lt;code&gt;resolver functions&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;learned about GraphQL server's network layer.&lt;/li&gt;
&lt;li&gt;read an introduction to GraphQL server libraries such as &lt;code&gt;express-graphql&lt;/code&gt;, &lt;code&gt;apollo-server&lt;/code&gt;, and &lt;code&gt;graphql-yoga&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;look deeper into how GraphQL differs from REST API, and which scenarios one should be used over the other.&lt;/li&gt;
&lt;li&gt;review concepts I've learned last week.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D08cg42f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7y5nn4tys4z6avy1x2aw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D08cg42f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7y5nn4tys4z6avy1x2aw.png" alt="Leadership Without Authority"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope everyone's doing great! Thank you for reading!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.prisma.io/blog/graphql-server-basics-the-schema-ac5e2950214e"&gt;GraphQL Server Basics: GraphQL Schemas, TypeDefs &amp;amp; Resolvers Explained&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.prisma.io/blog/graphql-server-basics-the-network-layer-51d97d21861"&gt;GraphQL Server Basics: The Network Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.apollographql.com/docs/"&gt;Apollo Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/chingu/a-short-introduction-to-the-scrum-methodology-7a23431b9f17"&gt;A Short Introduction to the Scrum Framework by Jim Medlock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Managing a small developer team first time in foreign country</title>
      <author>Little Boss</author>
      <pubDate>Wed, 20 Oct 2021 12:17:10 +0000</pubDate>
      <link>https://dev.to/littleboss/managing-a-small-developer-team-first-time-in-foreign-country-3lem</link>
      <guid>https://dev.to/littleboss/managing-a-small-developer-team-first-time-in-foreign-country-3lem</guid>
      <description>&lt;p&gt;In the near future it may happen that I will have to start a developer branch for my company in a foreign country. I have immigrated from the country, so I know the language and the culture.&lt;/p&gt;

&lt;p&gt;I am a developer with 5 years experience. I have really good social skills and I am already responsible for training new guys in the office. But our team in the office is small (4 developers).&lt;/p&gt;

&lt;p&gt;I would say that I am very good with people and I know very well when is the time to be "friend-like" or "boss-like" with people. I am also really excited about this new huge project.&lt;/p&gt;

&lt;p&gt;I will be responsible for the people there and the goal is to make the people part if our company, part of the family. They should not feel like cheap foreigners who do our work. I will be visiting the branch multiple times a year. There will be a budget for teambuilding events and holidays. We also will pay a good salary&lt;a href="https://www.linkedin.com/in/nightmarketing/"&gt;,&lt;/a&gt; which is way above average for the locals there. I hope you get the idea. They should feel like part of the team.&lt;/p&gt;

&lt;p&gt;I need ideas on how to fulfill this.&lt;/p&gt;

&lt;p&gt;Also, this time it is a real management job, so any input on how to manage an IT team is welcome. I am currently in the process to plan everything. What should I look for? What tools should I use?&lt;/p&gt;

&lt;p&gt;Right now I think what would be good:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Daily meetings (1 hour~) when I am not there via Microsoft Teams (this way I can participate each day and also control the work). I know it will eat worktime each day, but I am sure its worth it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Via GitHub I should be able to see that everyone works and does something. I am worried about beeing scamed&lt;a href="https://www.bark.com/en/gb/company/mate-logo/LR6q9/"&gt;,&lt;/a&gt; for example: the guys we hire outsource their work again to fiverr or somewhere else. But I am sure I would notice this when checking the code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The hardest part is to find the right people for the team. So the hiring process is really important. Right now what I think:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Find someone online and schedule the first meeting online to get to know the person and whether the "chemistry" fits.&lt;/p&gt;

&lt;p&gt;Give them a task to test their programming skills. I know there are some online tools for this (maybe someone can share their experiences with them). In my opinion asking people to write pointless functions is not the way to go. I would prepare a bigger task/project, for example: Create a laravel app with a user login and dashboard and some additional features.&lt;/p&gt;

&lt;p&gt;Now I know good programmers who know the worth of their time would just decline (at least thats what I would do). So I would probably pay a small amount for this test project, so their time is not completely wasted, what do you think about this idea?&lt;/p&gt;

&lt;p&gt;Last step would be to meet in person for the last interview.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I know there are some best practices for management like scrum or agile development. We have never used this in my current place, is it worth to learn it?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I would love to hear your input/ideas/experiences!&lt;/p&gt;

</description>
      <category>php</category>
      <category>programming</category>
      <category>python</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What are the Prime Features of a Medical App?</title>
      <author>Chris Morris</author>
      <pubDate>Wed, 20 Oct 2021 12:15:04 +0000</pubDate>
      <link>https://dev.to/morrisschriss/what-are-the-prime-features-of-a-medical-app-i41</link>
      <guid>https://dev.to/morrisschriss/what-are-the-prime-features-of-a-medical-app-i41</guid>
      <description>&lt;p&gt;Medical care suppliers have put outrageous accentuation on digitizing care conveyance after the flare-up of the novel Covid. A significant explanation being, the weight medical care associations have begun looking with their innovation engineering, system, labor force, and cycles, says Accenture Digital Health Technology Vision 2021. A similar report additionally focused on that almost 100% of medical services chiefs have voiced a similar test.&lt;/p&gt;

&lt;p&gt;Tolerating the mechanical administration, almost 66% of the leaders are wanting to change to the computerized stage in the following year. While a larger part of 96% will go through similar change in the impending three years.&lt;/p&gt;

&lt;p&gt;According to a Digital Health Report by Accenture, nearly 89% of healthcare consumers trusted their providers to store their healthcare data physically. This is because healthcare providers are bound by privacy and security standards to protect patient data that is stored and shared via electronic medium.&lt;/p&gt;

&lt;p&gt;Then again, patients have been requesting a reasonable perspective on their medical services complexities. &lt;a href="https://www2.deloitte.com/us/en/pages/life-sciences-and-health-care/articles/center-for-health-solutions-us-survey-of-employers-on-health-care-system.html"&gt;Deloitte&lt;/a&gt; 2013 Survey of U.S. Medical services Consumers say that almost:&lt;/p&gt;

&lt;p&gt;62% of buyers utilized a versatile or web application to investigate and settle on better treatment choices&lt;/p&gt;

&lt;p&gt;62% of them have messaged or sent their wellbeing worries to their Providers&lt;/p&gt;

&lt;p&gt;52% have gone through counsel over a video call&lt;/p&gt;

&lt;p&gt;The interest has expanded as the year passed. Presently, 26% of purchasers will switch suppliers just to acquire a superior advanced consideration experience, says Accenture 2020 Digital Health Consumer Survey. Besides, a similar report says, 39% of suppliers accept that a decent computerized collaboration speeds up persistent experience.&lt;/p&gt;

&lt;p&gt;What are the Prime Features of a Medical App? &lt;/p&gt;

&lt;p&gt;The accommodation of utilizing a clinical application comes from its elements. Thus, during versatile clinical application advancement, you should ensure that your designers or &lt;a href="https://www.cronj.com/healthcare-development/medical-app-development"&gt;medical mobile app development&lt;/a&gt; put the accompanying provisions in your clinical application! &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Electronic clinical record openness &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Arrangement planning and rescheduling &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Arrangement the board &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lab test result openness &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Medicine and arrangement notices &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Medication requesting and topping off &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sharing, gathering, and putting away clinical reports &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Specialist profile and certifications accessibility &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Virtual counsel and care convey &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Geo-area following &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Wellbeing checking and following &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Medical care instructive substance attainable quality&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>app</category>
      <category>development</category>
    </item>
    <item>
      <title>Blue / Green Deployments on AWS | AWS White Paper Summary</title>
      <author>Salah Elhossiny</author>
      <pubDate>Wed, 20 Oct 2021 12:10:10 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/blue-green-deployments-on-aws-aws-white-paper-summary-2192</link>
      <guid>https://dev.to/awsmenacommunity/blue-green-deployments-on-aws-aws-white-paper-summary-2192</guid>
      <description>&lt;ul&gt;
&lt;li&gt;The blue/green deployment technique enables you to release applications by shifting traffic between two identical environments that are running different versions of the application. &lt;/li&gt;
&lt;li&gt;Blue/green deployments can mitigate common risks associated with deploying software, such as downtime and rollback capability. &lt;/li&gt;
&lt;li&gt;This whitepaper provides an overview of the blue/green deployment methodology and describes techniques customers can implement using Amazon Web Services (AWS) services and tools. &lt;/li&gt;
&lt;li&gt;It also addresses considerations around the data tier, which is an important component of most applications.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#bluegreen-deployment-methodology"&gt;
  &lt;/a&gt;
  Blue/Green Deployment Methodology
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Blue/green deployments provide releases with near zero-downtime and rollback capabilities. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;The fundamental idea behind blue/green deployment is to shift traffic between two identical environments that are running different versions of your application. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The blue environment represents the current application version serving production traffic. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In parallel, the green environment is staged running a different version of your application. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After the green environment is ready and tested, production traffic is redirected from blue to green. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If any problems are identified, you can roll back by reverting traffic back to the blue environment.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-bluegreen"&gt;
  &lt;/a&gt;
  Benefits of Blue/Green
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;After you deploy the green environment, you have the opportunity to validate it. &lt;/li&gt;
&lt;li&gt;You might do that with test traffic before sending production traffic to the green environment, or by using a very small fraction of production traffic, to better reflect real user traffic. &lt;/li&gt;
&lt;li&gt;This is called canary analysis or canary testing. &lt;/li&gt;
&lt;li&gt;If you discover the green environment is not operating as expected, there is no impact on the blue environment. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can route traffic back to it, minimizing impaired operation or downtime and limiting the blast radius of impact.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This ability to simply roll traffic back to the operational environment is a key benefit of blue/green deployments. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can roll back to the blue environment at any time during the deployment process. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Impaired operation or downtime is minimized because impact is limited to the window of time between green environment issue detection and shift of traffic back to the blue environment. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Additionally, impact is limited to the portion of traffic going to the green environment, not all traffic. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the blast radius of deployment errors is reduced, so is the overall deployment risk. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Blue/green deployments also work well with continuous integration and continuous deployment (CI/CD) workflows, in many cases limiting their complexity. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your deployment automation has to consider fewer dependencies on an existing environment, state, or configuration as your new green environment gets launched onto an entirely new set of resources.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#define-the-environment-boundary"&gt;
  &lt;/a&gt;
  Define the Environment Boundary
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;When planning for blue/green deployments, you have to think about your environment boundary, where have things changed and what needs to be deployed to make those changes live. &lt;/li&gt;
&lt;li&gt;The scope of your environment is influenced by a number of factors: &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Application architecture: Dependencies, loosely/tightly coupled&lt;/p&gt;

&lt;p&gt;Organization: Speed and number of iterations&lt;/p&gt;

&lt;p&gt;Risk and complexity: Blast radius and impact of failed deployment&lt;/p&gt;

&lt;p&gt;People: Expertise of teams&lt;/p&gt;

&lt;p&gt;Process: Testing/QA, rollback capability&lt;/p&gt;

&lt;p&gt;Cost: Operating budgets, additional resources&lt;/p&gt;

&lt;p&gt;For example, organizations operating applications that are based on the microservices architecture pattern could have smaller environment boundaries because of the loose coupling and well-defined interfaces between the individual services. &lt;/p&gt;

&lt;p&gt;Organizations running legacy, monolithic apps can still leverage blue/green deployments, but the environment scope can be wider and the testing more extensive. &lt;/p&gt;

&lt;p&gt;Regardless of the environment boundary, you should make use of automation wherever you can to streamline the process, reduce human error, and control your costs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#services-for-bluegreen-deployments"&gt;
  &lt;/a&gt;
  Services for blue/green deployments
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Amazon Route 53&lt;/li&gt;
&lt;li&gt;Elastic Load Balancing&lt;/li&gt;
&lt;li&gt;Auto Scaling&lt;/li&gt;
&lt;li&gt;AWS Elastic Beanstalk&lt;/li&gt;
&lt;li&gt;AWS OpsWorks&lt;/li&gt;
&lt;li&gt;AWS Cloudformation&lt;/li&gt;
&lt;li&gt;Amazon CloudWatch&lt;/li&gt;
&lt;li&gt;AWS CodeDeploy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are three ways traffic can be shifted during a deployment on Amazon Elastic Container Services (Amazon ECS).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Canary – Traffic is shifted in two increments.&lt;/li&gt;
&lt;li&gt;Linear – Traffic is shifted in equal increments.&lt;/li&gt;
&lt;li&gt;All-at-once – All traffic is shifted to the updated tasks.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#aws-lambda-hooks"&gt;
  &lt;/a&gt;
  AWS Lambda Hooks
&lt;/h3&gt;

&lt;p&gt;With AWS Lambda hooks, CodeDeploy can call the Lambda function during the various lifecycle events including deployment of ECS, Lambda function deployment, and EC2/On-premise deployment. The hooks are helpful in creating a deployment workflow for your apps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation-techniques"&gt;
  &lt;/a&gt;
  Implementation Techniques
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The following techniques are examples of how you can implement blue/green on AWS. &lt;/li&gt;
&lt;li&gt;While AWS highlights specific services in each technique, you may have other services or tools to implement the same pattern. &lt;/li&gt;
&lt;li&gt;Choose the appropriate technique based on the existing architecture, the nature of the application, and the goals for software deployment in your organization. - Experiment as much as possible to gain experience for your environment and to understand how the different deployment risk factors affect your specific workload.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#update-dns-routing-with-amazon-route-53"&gt;
  &lt;/a&gt;
  Update DNS Routing with Amazon Route 53
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;DNS routing through record updates is a common approach to blue/green deployments. &lt;/li&gt;
&lt;li&gt;DNS is used as a mechanism for switching traffic from the blue environment to the green and vice versa when rollback is necessary. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;This approach works with a wide variety of environment configurations, as long as you can express the endpoint into the environment as a DNS name or IP address.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Within AWS, this technique applies to environments that are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Single instances, with a public or Elastic IP address&lt;/li&gt;
&lt;li&gt;Groups of instances behind an Elastic Load Balancing load balancer, or third-party load balancer&lt;/li&gt;
&lt;li&gt;Instances in an Auto Scaling group with an Elastic Load Balancing load balancer as the front end&lt;/li&gt;
&lt;li&gt;Services running on an Amazon Elastic Container Service (Amazon ECS) cluster fronted by an Elastic Load Balancing load balancer&lt;/li&gt;
&lt;li&gt;Elastic Beanstalk environment web tiers&lt;/li&gt;
&lt;li&gt;Other configurations that expose an IP or DNS endpoint&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can shift traffic all at once or you can do a weighted distribution. For weighted distribution with Amazon Route 53, you can define a percentage of traffic to go to the green environment and gradually update the weights until the green environment carries the full production traffic. &lt;/p&gt;

&lt;p&gt;This provides the ability to perform canary analysis where a small percentage of production traffic is introduced to a new environment. You can test the new code and monitor for errors, limiting the blast radius if any issues are encountered. It also allows the green environment to scale out to support the full production load if you’re using Elastic Load Balancing(ELB), for example. ELB automatically scales its request-handling capacity to meet the inbound application traffic; the process of scaling isn’t instant, so we recommend that you test, observe, and understand your traffic patterns. Load balancers can also be pre-warmed (configured for optimum capacity) through a support request.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#swap-the-auto-scaling-group-behind-the-elastic-load-balancer"&gt;
  &lt;/a&gt;
  Swap the Auto Scaling Group Behind the Elastic Load Balancer
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If DNS complexities are prohibitive, consider using load balancing for traffic management to your blue and green environments. &lt;/li&gt;
&lt;li&gt;This technique uses Auto Scaling to manage the EC2 resources for your blue and green environments, scaling up or down based on actual demand. &lt;/li&gt;
&lt;li&gt;You can also control the Auto Scaling group size by updating your maximum desired instance counts for your particular group.&lt;/li&gt;
&lt;li&gt;Auto Scaling also integrates with Elastic Load Balancing (ELB), so any new instances are automatically added to the load balancing pool if they pass the health checks governed by the load balancer. &lt;/li&gt;
&lt;li&gt;ELB tests the health of your registered EC2 instances with a simple ping or a more sophisticated connection attempt or request. &lt;/li&gt;
&lt;li&gt;Health checks occur at configurable intervals and have defined thresholds to determine whether an instance is identified as healthy or unhealthy. &lt;/li&gt;
&lt;li&gt;For example, you could have an ELB health check policy that pings port 80 every 20 seconds and, after passing a threshold of 10 successful pings, health check will report the instance as being InService. &lt;/li&gt;
&lt;li&gt;If enough ping requests time out, then the instance is reported to be OutofService&lt;/li&gt;
&lt;li&gt;As you scale up the green Auto Scaling group, you can take blue Auto Scaling group instances out of service by either terminating them or putting them in Standby state.&lt;/li&gt;
&lt;li&gt;Standby is a good option because if you need to roll back to the blue environment, you only have to put your blue server instances back in service and they're ready to go. &lt;/li&gt;
&lt;li&gt;As soon as the green group is scaled up without issues, you can decommission the blue group by adjusting the group size to zero. &lt;/li&gt;
&lt;li&gt;If you need to roll back, detach the load balancer from the green group or reduce the group size of the green group to zero.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#update-auto-scaling-group-launch-configurations"&gt;
  &lt;/a&gt;
  Update Auto Scaling Group launch configurations
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A launch configuration contains information like the Amazon Machine Image (AMI) ID, instance type, key pair, one or more security groups, and a block device mapping. &lt;/li&gt;
&lt;li&gt;Auto Scaling groups have their own launch configurations. You can associate only one launch configuration with an Auto Scaling group at a time, and it can’t be modified after you create it. &lt;/li&gt;
&lt;li&gt;To change the launch configuration associated with an Auto Scaling group, replace the existing launch configuration with a new one. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;After a new launch configuration is in place, any new instances that are launched use the new launch configuration parameters, but existing instances are not affected. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When Auto Scaling removes instances (referred to as scaling in) from the group, the default termination policy is to remove instances with the earliest launch configuration. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;However, you should know that if the Availability Zones were unbalanced to begin with, then Auto Scaling could remove an instance with a new launch configuration to balance the zones. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In such situations, you should have processes in place to compensate for this effect.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To implement this technique, start with an Auto Scaling group and an Elastic Load Balancing load balancer. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To deploy the new version of the application in the green environment, update the Auto Scaling group with the new launch configuration, and then scale the Auto Scaling group to twice its original size.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The next step is to shrink the Auto Scaling group back to the original size. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;By default, instances with the old launch configuration are removed first. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can also utilize a group’s Standby state to temporarily remove instances from an Auto Scaling group. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Having the instance in Standby state helps in quick rollbacks, if required. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As soon as you’re confident about the newly deployed version of the application, you can permanently remove instances in Standby state.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To perform a rollback, update the Auto Scaling group with the old launch configuration. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then, perform the preceding steps in reverse. Or if the instances are in Standby state, bring them back online&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#swap-the-environment-of-an-elastic-beanstalk-application"&gt;
  &lt;/a&gt;
  Swap the Environment of an Elastic Beanstalk Application
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Elastic Beanstalk enables quick and easier deployment and management of applications without having to worry about the infrastructure that runs those applications. &lt;/li&gt;
&lt;li&gt;To deploy an application using Elastic Beanstalk, upload an application version in the form of an application bundle (for example, Java .war file or .zip file), and then provide some information about your application. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;Based on application information, Elastic Beanstalk deploys the application in the blue environment and provides a URL to access the environment (typically for web server environments).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Elastic Beanstalk provides several deployment policies that you can configure for use, ranging from policies that perform an in-place update on existing instances, to immutable deployment using a set of new instances. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Because Elastic Beanstalk performs an in-place update when you update your application versions, your application may become unavailable to users for a short period of time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Elastic Beanstalk provides an environment URL when the application is up and running. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The green environment is spun up with its own environment URL. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At this time, two environments are up and running, but only the blue environment is serving production traffic.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#use-the-following-procedure-to-promote-the-green-environment-to-serve-production-traffic"&gt;
  &lt;/a&gt;
  Use the following procedure to promote the green environment to serve production traffic.
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Navigate to the environment's dashboard in the Elastic Beanstalk console.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the Actions menu, choose Swap Environment URL.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Elastic Beanstalk performs a DNS switch, which typically takes a few minutes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once the DNS changes have propagated, you can terminate the blue environment. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#clone-a-stack-in-aws-opsworks-and-update-dns"&gt;
  &lt;/a&gt;
  Clone a Stack in AWS OpsWorks and Update DNS
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;AWS OpsWorks utilizes the concept of stacks, which are logical groupings of AWS resources (EC2 instances, Amazon RDS, Elastic Load Balancing, and so on) that have a common purpose and should be logically managed together. &lt;/li&gt;
&lt;li&gt;Stacks are made of one or more layers. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;A layer represents a set of EC2 instances that serve a particular purpose, such as serving applications or hosting a database server. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When a data store is part of the stack, you should be aware of certain data management challenges.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To implement this technique in AWS OpsWorks, bring up the blue environment/stack with the current version of the application.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, create the green environment/stack with the newer version of application. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At this point, the green environment is not receiving any traffic. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If Elastic Load Balancing needs to be initialized, you can do that at this time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When it’s time to promote the green environment/stack into production, update DNS records to point to the green environment/stack’s load balancer. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can also do this DNS flip gradually by using the Amazon Route 53 weighted routing policy.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FJCSwK8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6xcy37limxt9pzny3gq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FJCSwK8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6xcy37limxt9pzny3gq.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xgk1EU1Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eflzp3y9hturlbme34hw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xgk1EU1Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eflzp3y9hturlbme34hw.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#best-practices-for-managing-data-synchronization-and-schema-changes"&gt;
  &lt;/a&gt;
  Best Practices for Managing Data Synchronization and Schema Changes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The complexity of managing data synchronization across two distinct environments depends on the number of data stores in use, the intricacy of the data model, and the data consistency requirements.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both the blue and green environments need up-to-date data:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The green environment needs up-to-date data access because it’s becoming the new production environment.&lt;/li&gt;
&lt;li&gt;The blue environment needs up-to-date data in the event of a rollback, when production is either shifts back or remains on the blue environment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Broadly, you accomplish this by having both the green and blue environments share the same data stores. Unstructured data stores, such as Amazon S3 object storage, NoSQL databases, and shared file systems are often easier to share between the two environments. &lt;/p&gt;

&lt;p&gt;Structured data stores, such as RDBMS, where the data schema can diverge between the environments, typically require additional considerations.&lt;/p&gt;

&lt;p&gt;A general recommendation is to decouple schema changes from the code changes. This way, the relational database is outside of the environment boundary defined for the blue/green deployment and shared between the blue and green environments. The two approaches for performing the schema changes are often used in tandem:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The schema is changed first, before the blue/green code deployment. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;Database updates must be backward compatible, so the old version of the application can still interact with the data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The schema is changed last, after the blue/green code deployment. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Code changes in the new version of the application must be backward compatible with the old schema.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s an increased risk involved when managing schema with a deletive approach: failures in the schema modification process can impact your production environment. &lt;/p&gt;

&lt;p&gt;Your additive changes can bring down the earlier application because of an undocumented issue where best practices weren’t followed or where the new application version still has a dependency on a deleted field somewhere in the code.&lt;/p&gt;

&lt;p&gt;To mitigate risk appropriately, this pattern places a heavy emphasis on your pre-deployment software lifecycle steps. &lt;/p&gt;

&lt;p&gt;Be sure to have a strong testing phase and framework and a strong QA phase. &lt;/p&gt;

&lt;p&gt;Performing the deployment in a test environment can help identify these sorts of issues early, before the push to production.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-bluegreen-deployments-are-not-recommended"&gt;
  &lt;/a&gt;
  When Blue/Green Deployments Are Not Recommended
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The following scenarios highlight patterns that may not be well suited for blue/green deployments.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#are-your-schema-changes-too-complex-to-decouple-from-the-code-changes-is-sharing-of-data-stores-not-feasible"&gt;
  &lt;/a&gt;
  Are your schema changes too complex to decouple from the code changes? Is sharing of data stores not feasible?
&lt;/h4&gt;

&lt;p&gt;In some scenarios, sharing a data store isn’t desired or feasible. Schema changes are too complex to decouple. Data locality introduces too much performance degradation to the application, as when the blue and green environments are in geographically disparate regions. All of these situations require a solution where the data store is inside of the deployment environment boundary and tightly coupled to the blue and green applications respectively.&lt;/p&gt;

&lt;p&gt;This requires data changes to be synchronized—propagated from the blue environment to the green one, and vice versa. The systems and processes to accomplish this are generally complex and limited by the data consistency requirements of your application. This means that during the deployment itself, you have to also manage the reliability, scalability, and performance of that synchronization workload, adding risk to the deployment.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#does-your-application-need-to-be-deployment-aware"&gt;
  &lt;/a&gt;
  Does your application need to be deployment aware?
&lt;/h4&gt;

&lt;p&gt;You should consider using feature flags in your application to make it deployment aware. This will help you control the enabling/disabling of application features in blue/green deployment. Your application code would run additional or alternate subroutines during the deployment, to keep data in sync, or perform other deployment-related duties. These routines are enabled/disabled turned off during the deployment by using configuration flags.&lt;/p&gt;

&lt;p&gt;Making your applications deployment aware introduces additional risk and complexity and typically isn’t recommended with blue/green deployments. The goal of blue/green deployments is to achieve immutable infrastructure, where you don’t make changes to your application after it’s deployed, but redeploy altogether. That way you ensure the same code is operating in a production setting and in the deployment setting, reducing overall risk factors.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#does-your-commercial-offtheshelf-cots-application-come-with-a-predefined-updateupgrade-process-that-isnt-bluegreen-deployment-friendly"&gt;
  &lt;/a&gt;
  Does your commercial off-the-shelf (COTS) application come with a predefined update/upgrade process that isn’t blue/green deployment friendly?
&lt;/h4&gt;

&lt;p&gt;Many commercial software vendors provide their own update and upgrade process for applications which they have tested and validated for distribution. While vendors are increasingly adopting the principles of immutable infrastructure and automated deployment, currently not all software products have those capabilities.&lt;/p&gt;

&lt;p&gt;Working around the vendor’s recommended update and deployment practices to try to implement or simulate a blue/green deployment process may also introduce unnecessary risk that can potentially negate the benefits of this methodology.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Application deployment has associated risks. However, advancements such as the advent of cloud computing, deployment and automation frameworks, and new deployment techniques, blue/green for example, help mitigate risks, such as human error, process, downtime, and rollback capability. &lt;/p&gt;

&lt;p&gt;The AWS utility billing model and wide range of automation tools make it much easier for customers to move fast and cost-effectively implement blue/green deployments at scale.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/whitepapers/latest/blue-green-deployments/blue-green-deployments.pdf#welcome"&gt; Original paper &lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>devops</category>
    </item>
  </channel>
</rss>
